


// 다음코드는 스커럴에서 사용하기위한 샘플 코드

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_M2A_SEND_FILE(pSock, pk ,pFromIP)
{
	local packet=S_M2A_SEND_FILE(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_S_HELLO(pSock, pk ,pFromIP)
{
	local packet=S_S_HELLO(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_X2S_LOGIN(pSock, pk ,pFromIP)
{
	local packet=S_X2S_LOGIN(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_S2X_LOGIN_OK(pSock, pk ,pFromIP)
{
	local packet=S_S2X_LOGIN_OK(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_S_ECHO(pSock, pk ,pFromIP)
{
	local packet=S_S_ECHO(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_X2S_THREAD_TEST1(pSock, pk ,pFromIP)
{
	local packet=S_X2S_THREAD_TEST1(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_X2S_THREAD_TEST2(pSock, pk ,pFromIP)
{
	local packet=S_X2S_THREAD_TEST2(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_M2A_CALL_CMD_RQ(pSock, pk ,pFromIP)
{
	local packet=S_M2A_CALL_CMD_RQ(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_A2M_CALL_CMD_RS(pSock, pk ,pFromIP)
{
	local packet=S_A2M_CALL_CMD_RS(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_A2M_NOTIFY_SERVER_INFO(pSock, pk ,pFromIP)
{
	local packet=S_A2M_NOTIFY_SERVER_INFO(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_A2M_SERVER_CONNECTED(pSock, pk ,pFromIP)
{
	local packet=S_A2M_SERVER_CONNECTED(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_M2A_MYTHOLOGY_MENU_RQ(pSock, pk ,pFromIP)
{
	local packet=S_M2A_MYTHOLOGY_MENU_RQ(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_A2M_MYTHOLOGY_MENU_RS(pSock, pk ,pFromIP)
{
	local packet=S_A2M_MYTHOLOGY_MENU_RS(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_A2M_PROCESS_STATUS_NOTIFY(pSock, pk ,pFromIP)
{
	local packet=S_A2M_PROCESS_STATUS_NOTIFY(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_A2M_PROCESS_INFO_NOTIFY(pSock, pk ,pFromIP)
{
	local packet=S_A2M_PROCESS_INFO_NOTIFY(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_M2A_PROCESS_INFO_UPDATE(pSock, pk ,pFromIP)
{
	local packet=S_M2A_PROCESS_INFO_UPDATE(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_A2M_SEND_ERROR_LOG(pSock, pk ,pFromIP)
{
	local packet=S_A2M_SEND_ERROR_LOG(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_M2A_RESET_ERROR_LOG_COUNT(pSock, pk ,pFromIP)
{
	local packet=S_M2A_RESET_ERROR_LOG_COUNT(); packet.ReadPacket(pSock,pk);

}

//jIPacketSocket_IOCP* pS,jPacket_Base* pk,jIP_Address* pFromIP
function jNET_EVENT_M2A_RUN_EXE(pSock, pk ,pFromIP)
{
	local packet=S_M2A_RUN_EXE(); packet.ReadPacket(pSock,pk);

}



// 다음코드는 C++에서 사용하기위한 샘플 코드

//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(M2A_SEND_FILE)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(M2A_SEND_FILE);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(S_HELLO)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(S_HELLO);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(X2S_LOGIN)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(X2S_LOGIN);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(S2X_LOGIN_OK)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(S2X_LOGIN_OK);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(S_ECHO)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(S_ECHO);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(X2S_THREAD_TEST1)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(X2S_THREAD_TEST1);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(X2S_THREAD_TEST2)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(X2S_THREAD_TEST2);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(M2A_CALL_CMD_RQ)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(M2A_CALL_CMD_RQ);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(A2M_CALL_CMD_RS)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(A2M_CALL_CMD_RS);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(A2M_NOTIFY_SERVER_INFO)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(A2M_NOTIFY_SERVER_INFO);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(A2M_SERVER_CONNECTED)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(A2M_SERVER_CONNECTED);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(M2A_MYTHOLOGY_MENU_RQ)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(M2A_MYTHOLOGY_MENU_RQ);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(A2M_MYTHOLOGY_MENU_RS)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(A2M_MYTHOLOGY_MENU_RS);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(A2M_PROCESS_STATUS_NOTIFY)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(A2M_PROCESS_STATUS_NOTIFY);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(A2M_PROCESS_INFO_NOTIFY)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(A2M_PROCESS_INFO_NOTIFY);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(M2A_PROCESS_INFO_UPDATE)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(M2A_PROCESS_INFO_UPDATE);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(A2M_SEND_ERROR_LOG)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(A2M_SEND_ERROR_LOG);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(M2A_RESET_ERROR_LOG_COUNT)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(M2A_RESET_ERROR_LOG_COUNT);

}
//jIPacketSocket_IOCP* pS,BYTE *pReadBuff, jPacketLen_t dwLen, void* pPlugIn, jIP_Address* pFromIP
jNET_EVENT_RECEIVER(M2A_RUN_EXE)
{
	// PlugIn_UNKOWN*p , BYTE buf[1024] , TestUser* pUser
	READ_PACKET(M2A_RUN_EXE);

}