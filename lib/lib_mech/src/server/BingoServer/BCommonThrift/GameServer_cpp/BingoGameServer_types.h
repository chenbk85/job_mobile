/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BingoGameServer_TYPES_H
#define BingoGameServer_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace nBingo {

typedef int64_t Tbl_User_id_t;

typedef int32_t Sys_Error_id_t;

typedef struct _s_X2LG_LOGIN__isset {
  _s_X2LG_LOGIN__isset() : id(false), passwd(false), info(false) {}
  bool id;
  bool passwd;
  bool info;
} _s_X2LG_LOGIN__isset;

class s_X2LG_LOGIN {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  s_X2LG_LOGIN() : id(), passwd(), info() {
  }

  virtual ~s_X2LG_LOGIN() throw() {}

  std::string id;
  std::string passwd;
  std::string info;

  _s_X2LG_LOGIN__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_passwd(const std::string& val) {
    passwd = val;
  }

  void __set_info(const std::string& val) {
    info = val;
  }

  bool operator == (const s_X2LG_LOGIN & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const s_X2LG_LOGIN &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const s_X2LG_LOGIN & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(s_X2LG_LOGIN &a, s_X2LG_LOGIN &b);

typedef struct _s_LG2X_LOGIN__isset {
  _s_LG2X_LOGIN__isset() : uid(false), result(false) {}
  bool uid;
  bool result;
} _s_LG2X_LOGIN__isset;

class s_LG2X_LOGIN {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  s_LG2X_LOGIN() : uid(0), result(0) {
  }

  virtual ~s_LG2X_LOGIN() throw() {}

  Tbl_User_id_t uid;
  Sys_Error_id_t result;

  _s_LG2X_LOGIN__isset __isset;

  void __set_uid(const Tbl_User_id_t val) {
    uid = val;
  }

  void __set_result(const Sys_Error_id_t val) {
    result = val;
  }

  bool operator == (const s_LG2X_LOGIN & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const s_LG2X_LOGIN &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const s_LG2X_LOGIN & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(s_LG2X_LOGIN &a, s_LG2X_LOGIN &b);

typedef struct _ServerExeption__isset {
  _ServerExeption__isset() : what(false), why(false) {}
  bool what;
  bool why;
} _ServerExeption__isset;

class ServerExeption : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  ServerExeption() : what(0), why() {
  }

  virtual ~ServerExeption() throw() {}

  Sys_Error_id_t what;
  std::string why;

  _ServerExeption__isset __isset;

  void __set_what(const Sys_Error_id_t val) {
    what = val;
  }

  void __set_why(const std::string& val) {
    why = val;
  }

  bool operator == (const ServerExeption & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const ServerExeption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerExeption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServerExeption &a, ServerExeption &b);

} // namespace

#endif
