/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tutorial_types.h"

#include <algorithm>

namespace tutorial {

int _kOperationValues[] = {
  Operation::ADD,
  Operation::SUBTRACT,
  Operation::MULTIPLY,
  Operation::DIVIDE
};
const char* _kOperationNames[] = {
  "ADD",
  "SUBTRACT",
  "MULTIPLY",
  "DIVIDE"
};
const std::map<int, const char*> _Operation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kOperationValues, _kOperationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Work::ascii_fingerprint = "928D5DB19D957BA73E98532DF590DAF5";
const uint8_t Work::binary_fingerprint[16] = {0x92,0x8D,0x5D,0xB1,0x9D,0x95,0x7B,0xA7,0x3E,0x98,0x53,0x2D,0xF5,0x90,0xDA,0xF5};

void swap(Work &a, Work &b) {
  using ::std::swap;
  swap(a.num1, b.num1);
  swap(a.num2, b.num2);
  swap(a.op, b.op);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

const char* VersionTest::ascii_fingerprint = "2422328FB81E8A8D261AB5A893080FB1";
const uint8_t VersionTest::binary_fingerprint[16] = {0x24,0x22,0x32,0x8F,0xB8,0x1E,0x8A,0x8D,0x26,0x1A,0xB5,0xA8,0x93,0x08,0x0F,0xB1};

void swap(VersionTest &a, VersionTest &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.required_value, b.required_value);
  swap(a.optional_value, b.optional_value);
  swap(a.value_default, b.value_default);
  swap(a.required_value_default, b.required_value_default);
  swap(a.optional_value_default, b.optional_value_default);
  swap(a.__isset, b.__isset);
}

const char* InvalidOperation::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t InvalidOperation::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

void swap(InvalidOperation &a, InvalidOperation &b) {
  using ::std::swap;
  swap(a.what, b.what);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

} // namespace
