// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "Calculator.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/async/TEventServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::tutorial;

class CalculatorAsyncHandler : public CalculatorCobSvIf {
 public:
  CalculatorAsyncHandler() {
    syncHandler_ = std::auto_ptr<CalculatorHandler>(new CalculatorHandler);
    // Your initialization goes here
  }
  virtual ~CalculatorAsyncHandler();

  void ping(std::tr1::function<void()> cob) {
    syncHandler_->ping();
    return cob();
  }

  void add(std::tr1::function<void(int32_t const& _return)> cob, const int32_t num1, const int32_t num2) {
    int32_t _return = 0;
    _return = syncHandler_->add(num1, num2);
    return cob(_return);
  }

  void calculate(std::tr1::function<void(int32_t const& _return)> cob, std::tr1::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t logid, const Work& w) {
    int32_t _return = 0;
    _return = syncHandler_->calculate(logid, w);
    return cob(_return);
  }

  void zip(std::tr1::function<void()> cob) {
    syncHandler_->zip();
    return cob();
  }

 protected:
  std::auto_ptr<CalculatorHandler> syncHandler_;
};

