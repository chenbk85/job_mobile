// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "SharedService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/async/TEventServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::shared;

class SharedServiceAsyncHandler : public SharedServiceCobSvIf {
 public:
  SharedServiceAsyncHandler() {
    syncHandler_ = std::auto_ptr<SharedServiceHandler>(new SharedServiceHandler);
    // Your initialization goes here
  }
  virtual ~SharedServiceAsyncHandler();

  void getStruct(std::tr1::function<void(SharedStruct const& _return)> cob, const int32_t key) {
    SharedStruct _return;
    syncHandler_->getStruct(_return, key);
    return cob(_return);
  }

 protected:
  std::auto_ptr<SharedServiceHandler> syncHandler_;
};

