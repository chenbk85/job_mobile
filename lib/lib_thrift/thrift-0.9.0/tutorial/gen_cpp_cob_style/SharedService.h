/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SharedService_H
#define SharedService_H

#include <thrift/transport/TBufferTransports.h>
#include <tr1/functional>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include "shared_types.h"

namespace shared {

class SharedServiceIf {
 public:
  virtual ~SharedServiceIf() {}
  virtual void getStruct(SharedStruct& _return, const int32_t key) = 0;
};

class SharedServiceIfFactory {
 public:
  typedef SharedServiceIf Handler;

  virtual ~SharedServiceIfFactory() {}

  virtual SharedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SharedServiceIf* /* handler */) = 0;
};

class SharedServiceIfSingletonFactory : virtual public SharedServiceIfFactory {
 public:
  SharedServiceIfSingletonFactory(const boost::shared_ptr<SharedServiceIf>& iface) : iface_(iface) {}
  virtual ~SharedServiceIfSingletonFactory() {}

  virtual SharedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SharedServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SharedServiceIf> iface_;
};

class SharedServiceNull : virtual public SharedServiceIf {
 public:
  virtual ~SharedServiceNull() {}
  void getStruct(SharedStruct& /* _return */, const int32_t /* key */) {
    return;
  }
};

typedef struct _SharedService_getStruct_args__isset {
  _SharedService_getStruct_args__isset() : key(false) {}
  bool key;
} _SharedService_getStruct_args__isset;

class SharedService_getStruct_args {
 public:

  SharedService_getStruct_args() : key(0) {
  }

  virtual ~SharedService_getStruct_args() throw() {}

  int32_t key;

  _SharedService_getStruct_args__isset __isset;

  void __set_key(const int32_t val) {
    key = val;
  }

  bool operator == (const SharedService_getStruct_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SharedService_getStruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_getStruct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SharedService_getStruct_pargs {
 public:


  virtual ~SharedService_getStruct_pargs() throw() {}

  const int32_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedService_getStruct_result__isset {
  _SharedService_getStruct_result__isset() : success(false) {}
  bool success;
} _SharedService_getStruct_result__isset;

class SharedService_getStruct_result {
 public:

  SharedService_getStruct_result() {
  }

  virtual ~SharedService_getStruct_result() throw() {}

  SharedStruct success;

  _SharedService_getStruct_result__isset __isset;

  void __set_success(const SharedStruct& val) {
    success = val;
  }

  bool operator == (const SharedService_getStruct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SharedService_getStruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_getStruct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedService_getStruct_presult__isset {
  _SharedService_getStruct_presult__isset() : success(false) {}
  bool success;
} _SharedService_getStruct_presult__isset;

class SharedService_getStruct_presult {
 public:


  virtual ~SharedService_getStruct_presult() throw() {}

  SharedStruct* success;

  _SharedService_getStruct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class SharedServiceClient : virtual public SharedServiceIf {
 public:
  SharedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SharedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getStruct(SharedStruct& _return, const int32_t key);
  void send_getStruct(const int32_t key);
  void recv_getStruct(SharedStruct& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SharedServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SharedServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SharedServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getStruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SharedServiceProcessor(boost::shared_ptr<SharedServiceIf> iface) :
    iface_(iface) {
    processMap_["getStruct"] = &SharedServiceProcessor::process_getStruct;
  }

  virtual ~SharedServiceProcessor() {}
};

class SharedServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SharedServiceProcessorFactory(const ::boost::shared_ptr< SharedServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SharedServiceIfFactory > handlerFactory_;
};

class SharedServiceMultiface : virtual public SharedServiceIf {
 public:
  SharedServiceMultiface(std::vector<boost::shared_ptr<SharedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SharedServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SharedServiceIf> > ifaces_;
  SharedServiceMultiface() {}
  void add(boost::shared_ptr<SharedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getStruct(SharedStruct& _return, const int32_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStruct(_return, key);
    }
    ifaces_[i]->getStruct(_return, key);
    return;
  }

};

class SharedServiceCobClient;

class SharedServiceCobClIf {
 public:
  virtual ~SharedServiceCobClIf() {}
  virtual void getStruct(std::tr1::function<void(SharedServiceCobClient* client)> cob, const int32_t key) = 0;
};

class SharedServiceCobSvIf {
 public:
  virtual ~SharedServiceCobSvIf() {}
  virtual void getStruct(std::tr1::function<void(SharedStruct const& _return)> cob, const int32_t key) = 0;
};

class SharedServiceCobSvIfFactory {
 public:
  typedef SharedServiceCobSvIf Handler;

  virtual ~SharedServiceCobSvIfFactory() {}

  virtual SharedServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SharedServiceCobSvIf* /* handler */) = 0;
};

class SharedServiceCobSvIfSingletonFactory : virtual public SharedServiceCobSvIfFactory {
 public:
  SharedServiceCobSvIfSingletonFactory(const boost::shared_ptr<SharedServiceCobSvIf>& iface) : iface_(iface) {}
  virtual ~SharedServiceCobSvIfSingletonFactory() {}

  virtual SharedServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SharedServiceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<SharedServiceCobSvIf> iface_;
};

class SharedServiceCobSvNull : virtual public SharedServiceCobSvIf {
 public:
  virtual ~SharedServiceCobSvNull() {}
  void getStruct(std::tr1::function<void(SharedStruct const& _return)> cob, const int32_t /* key */) {
    SharedStruct _return;
    return cob(_return);
  }
};

class SharedServiceCobClient : virtual public SharedServiceCobClIf {
 public:
  SharedServiceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void getStruct(std::tr1::function<void(SharedServiceCobClient* client)> cob, const int32_t key);
  void send_getStruct(const int32_t key);
  void recv_getStruct(SharedStruct& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SharedServiceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<SharedServiceCobSvIf> iface_;
  virtual void dispatchCall(std::tr1::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (SharedServiceAsyncProcessor::*ProcessFunction)(std::tr1::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getStruct(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getStruct(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const SharedStruct& _return);
  void throw_getStruct(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  SharedServiceAsyncProcessor(boost::shared_ptr<SharedServiceCobSvIf> iface) :
    iface_(iface) {
    processMap_["getStruct"] = &SharedServiceAsyncProcessor::process_getStruct;
  }

  virtual ~SharedServiceAsyncProcessor() {}
};

class SharedServiceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  SharedServiceAsyncProcessorFactory(const ::boost::shared_ptr< SharedServiceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SharedServiceCobSvIfFactory > handlerFactory_;
};

} // namespace

#endif
