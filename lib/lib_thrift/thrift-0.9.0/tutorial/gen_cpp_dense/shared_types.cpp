/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "shared_types.h"

#include <thrift/TReflectionLocal.h>

#include <algorithm>

namespace shared {

const char* SharedStruct::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t SharedStruct::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

// i32
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_shared_F89EDB52B075B8BD95989BD3D0A04C0A(
  ::apache::thrift::protocol::T_I32);

// string
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_shared_B45CFFE084DD3D20D928BEE85E7B0F21(
  ::apache::thrift::protocol::T_STRING);

// void
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_shared_CAB8111FD0B710A336C898E539090E34(
  ::apache::thrift::protocol::T_STOP);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_shared_3F5FC93B338687BC7235B1AB103F47B3[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_shared_3F5FC93B338687BC7235B1AB103F47B3[] = {
  &trlo_typespec_shared_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_shared_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_shared_CAB8111FD0B710A336C898E539090E34,
};
// {1:i32;2:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_shared_3F5FC93B338687BC7235B1AB103F47B3(
  ::apache::thrift::protocol::T_STRUCT,
  SharedStruct::binary_fingerprint,
  trlo_metas_shared_3F5FC93B338687BC7235B1AB103F47B3,
  trlo_specs_shared_3F5FC93B338687BC7235B1AB103F47B3);

::apache::thrift::reflection::local::TypeSpec* SharedStruct::local_reflection = 
  &trlo_typespec_shared_3F5FC93B338687BC7235B1AB103F47B3;

uint32_t SharedStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SharedStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SharedStruct");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SharedStruct &a, SharedStruct &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

} // namespace
