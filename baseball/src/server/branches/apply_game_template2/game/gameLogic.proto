//option optimize_for = LITE_RUNTIME;


import "excel_baseball_table_db.proto";

/* -------------------------------------------------------------------------- */

message GameUserInfo 
{ 
    // 게임의 구동에 필요한 정보 - 디비에서오는 정보와 서버에서 생성된 정보
	required GameInfo       game_info = 1; 

    // 피망플러스에서 오는 정보
	required bytes          member_info = 2;
}

/* -------------------------------------------------------------------------- */
message GameInfo // Client , UserGateServer에서 가지고 있는 유저 정보.
{
    // 피망 플러스 유저 번호
	required int32					not_used				= 1;
	repeated s_tbl_user				m_tbl_user				= 2;
	repeated s_tbl_team				m_tbl_team				= 3;
	repeated s_tbl_playerbetter		m_tbl_playerbetter		= 4;
	repeated s_tbl_playerpitcher	m_tbl_playerpitcher		= 5;

	repeated s_tbl_friend			m_tbl_friend			= 6;
	repeated s_tbl_item				m_tbl_item				= 7;
	repeated s_tbl_pitcherskill		m_tbl_pitcherskill		= 8;
	repeated s_tbl_package			m_tbl_package			= 9;
	repeated s_tbl_quest			m_tbl_quest				= 10;
	repeated s_tbl_title			m_tbl_title				= 11;
	
	
}

/* -------------------------------------------------------------------------- */

message s_game_play_info // BaseballServer에서 가지고 있는 유저 정보.
{
	required s_tbl_user				m_tbl_user				= 1;
	required s_tbl_team				m_tbl_team				= 2;
	required s_tbl_playerbetter		m_tbl_playerbetter		= 3;
	required s_tbl_playerpitcher	m_tbl_playerpitcher		= 4;
	repeated s_tbl_pitcherskill		m_tbl_pitcherskill		= 5; //투수가 보유한 변화구 스킬종류.
	optional int32					m_e_user_gps			= 7; // BaseballServer에서 사용하는 유저 GPS
}

message s_result_round // 한라운드 결과 s_result_better_hit
{
	optional s_tbl_roundresult		m_tbl_roundresult		=1;
}

message s_result_game // 한게임 끝나고 결과.
{
	optional s_tbl_result		m_tbl_result		=1;
}



message GameRoomInfo // 그방안에 있는 모든유저가 공유해야 하는정보. 최초 방만들고 join상황에서만 주고받는 정보.
{
	required int32						room_id				= 1;// 룸 구분 번호
	repeated s_game_play_info			m_game_play_info	= 2;
	optional int64						m_attack_user		= 3; //누가 선공인지. user db_id()
	optional int32						m_round_count		= 4; //현제 라운드 정보. 0부터시작  TOTAL_ROUND-1 까지.
	repeated s_result_round				m_result_round		= 5; // 각 라운드의결과들.
	optional s_result_game				m_result_game		= 6;
	optional bool						m_is_auto_play		= 7;// 한유저가 나가서 자동플레이 상황인지?
	
}


//#--------------------------------------------------------------------------
// 투수와 타자간의 정보 교환 메세지 리스트
//#--------------------------------------------------------------------------

/*
플레이중에 한 유저가 나가면?
AI 대치 그리고 이어치기는 없슴. 나가버린 유저는 해당 게임 끝나기 전까지 게임룸 입장 안됨.
그럼 두 플레이어에 대한 기록은 어떻게? 저장?
*/
message s_vector3
{
	optional float x=1;
	optional float y=2;
	optional float z=3;
}
message s_vector2
{
	optional float x=1;
	optional float y=2;
}

message s_pitcher_throw_info // 투수가 공을 던져서 서버에서 타자에게로 전달하는내용.
{
	optional s_vector3 screen_to_world	= 1;
	optional int32	ball_type			= 2;
	optional float	scale_rate			= 3;
	optional float	ball_breaking		= 4;
	optional float	angle				= 5;
	optional int64	uid					= 6; //투수 uid
	optional int32	round				= 7; //해당라운드.
	optional int32	rhythm_judge_verifi	= 8;

}

message s_pitcher_throw_info_verify // 투수가 공을 던져서 투수가 서버로 전달하는내용중 검증용 변수들.
{
	optional s_vector3	screen_to_world_org		= 1;
	optional s_vector2	ball_position1			= 2;
	optional s_vector2	ball_position2			= 3;
	optional s_vector2	pannel_c				= 4;
	optional int32		control_speed			= 5;
	optional float		size_down				= 6;
	optional s_vector2	max_line				= 7;
	optional s_vector2	min_line				= 8;
	optional int32	rhythm_judge_verifi			= 9;
	optional int32	rhythm_depth_verifi			= 10;
	optional float	rhythm_effect_time1_verifi	= 11;
}

message s_better_hit_info // 타자가 치는 정보중에 서버에서 투수에게 보내는 내용.
{
	optional s_vector3	screen_to_world		= 1;
	optional s_vector2	force_xy			= 2; //hit_ball
	optional float		force				= 3; //hit_ball
	optional float		torque				= 4; //hit_ball
	optional float		velocity_x			= 5; //hit_ball
	optional int64		uid					= 6; //타자 uid
	optional int32		round				= 7; //해당라운드.
	optional int32		hit_info			= 8; // 0 : 안타 , 1 : 헛스윙 , 2: 아무반응없는거.
}

message s_better_hit_info_verify // 타자가 치는 정보중에 타자가 서버로 보내는 내용중 검증용 변수들.
{
	optional  float	v3ballposition_z					= 1;
	optional  s_vector2	rect_world_ball_pos				= 2;
	optional  s_vector2	rect_world_ball_pos_wh			= 3;// width , height
	optional  s_vector2	screen_ball_pos					= 4;
	optional  s_vector2	screen_ball_pos1				= 5;
	optional  s_vector2	screen_wh						= 6;// width height
	optional  s_vector2	screen_batting					= 7;
	optional  s_vector2	screen_batting_wh				= 8;
	optional  s_vector2	screen_batting1					= 9;
	optional  s_vector2	screen_batting1_wh				= 10;
	optional  s_vector2	batting_pixel_inset				= 11;
	optional  s_vector2	batting_pixel_inset_wh			= 12;
	optional  s_vector2	batting_transform_pos			= 13;
	optional  s_vector2	mcscript_pannel_xw				= 14;
	optional  bool		mcscript_left_hand_batter		= 15;
}



message GLReqGameProtocol  //지우지말것.
{
}
message GLAnsGameProtocol //지우지말것.
{
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                  