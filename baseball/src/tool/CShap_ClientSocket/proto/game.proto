option optimize_for = LITE_RUNTIME;

import "db.proto";


/* ------------------------------------------------------------------------- */
// @brief 게이트웨이가 게임서버에 접속하면서 보내주는 사용자 정보
// 
// @param gameID 접속한 사용자 아이디
// @param categoryID 방의 카테고리 정보
// @param channelID 방의 채널 정보
// @param roomID 방의 고유번호
// @param gameUserInfo 사용자의 게임에 관련된 고유정보(주로 디비에서 읽어온 정보)
message GReqGameEnter 
{
	// category > channel > room
	// 현재 게임서버가 몇번 카테고리의 몇번 채널인지는 UG에서 판단하여 알려줌)
	// 채널별로 게임서버를 뛰울려고 계획중인걸로 알고 있음.
    required int64 gameID = 1;
	required int32 categoryID = 2; 
	required int32 channelID = 3;
	required int32 roomID = 4;
	required bytes gameUserInfo = 5;
}



/* ------------------------------------------------------------------------- */
// @brief 게임서버가 사용자의 게임룸 입장을 허용하면 내보내는 응답
//
// @param gameRoomInfo 방을 구성하는데 필요한 정보(사용자가 작성)
message GAnsGameEnter 
{
	required bytes gameRoomInfo = 1;
}

/* ------------------------------------------------------------------------- */
// @brief 게임에서 나가고 싶다는 클라이언트의 요청이 있을때 들어오는 요청
// @param gameID 나가고 싶어하는 사용자
// @param kick 사용 안하고 있음
// @param leave_info 나가고 싶은 사유
message GReqGameLeave 
{
	required int64	gameID		= 1;
	required bool	kick		= 2;	// 차후 확정성을 위해 추가해놓은것.
	optional bytes	leave_info	= 3;	// 게임에서 퇴장 사유를 지정해 사용할 수
										// 있도록 하는 필드
}


/* ------------------------------------------------------------------------- */
// @brief 게임서버가 사용자를 내보낼때 생성하는 메시지
// 
// @param gameID 나갈 사용자의 아이디
// @param nType 나가게 되는 사유 코드
// @param leave_info 나가게 되는 구체적인 이유
message GAnsGameLeave 
{
	enum KICK_TYPE{
		EXIT_RESERVATION=1; //정상적으로 나감.
		LIMITMONEY=2; // 돈 한도가 모지라서 내보냄.
		ALLIN=3; // 돈이 다 털려서 내보냄.
		SYSTEM_ERROR=4; //DB 업데이트 실패.
		KICK_ZERO=5;
		PURGE = 6;      // 강퇴
		KILL = 7;      // 나가면서 게이트웨이 강제로 종료
	}
	
	required int64 gameID			= 1;
	required KICK_TYPE nType		= 2;	// enum KICK_TYPE 참조할것.
	optional bytes	leave_info		= 3;	// 게임에서 퇴장 사유를 지정해 사용할 수
											// 있도록 하는 필드
											// - GReqLeaveGame 에 의한 퇴장인 경우,
											//	 GReqLeaveGame의 값으로 설정됨
											// - 서버에 의해 퇴장인 경우, 게임 로직에서
											//   지정한 값으로 설정됨
}


/* ------------------------------------------------------------------------- */
// @brief 클라이언트가 통신 불능상태이거나 접속을 끊었음을 알려주는 메시지
// 
// @param gameID 떨어져나간 사용자의 아이디
message GReqDetach 
{ 
	//게임나가기에서 UG가 클라접속이 너무오래지속된체 반응이 없으면 접속을 끊는상황.
	//GAnsGameLeave에 대한 처리를 해주면 된다.
	required int64 gameID = 1;	
}


/* ------------------------------------------------------------------------- */
// @brief 사용안함
message GAnsDetach {
	required int64 gameID = 1;
}



/* ------------------------------------------------------------------------- */
// @brief 게임에서 접속이 떨어졌을때 재접속이 되었다는것을 게임서버에 알리는 메시지
// 
// @param 재접속한 사용자의 아이디
message GReqPlug  // 게임중 비정상 종료후 재접속하여 게임중 난입하는 상태. 이어치기(맞고,포커)
{
	required int64 gameID = 1;
}


/* ------------------------------------------------------------------------- */
// @brief 룸 로직에 plug 알림을 위한 콜백 호출 후 게이트웨이에 전송함
message GAnsPlug 
{
	required int64 gameID = 1;
}


/* ------------------------------------------------------------------------- */
// @brief 사용 안함
message GError {
	required int32 errorCode = 1;
	required string errorInfo = 2;
}
/* ------------------------------------------------------------------------- */

// @brief 사용 안함
message GErrPlug {
	required GError error = 1; //
}



/* ------------------------------------------------------------------------- */
// @brief 게이트웨이가 가지고 있는 사용자에 대한 정보를 변경시킬 이유가 있을때
//       게이트웨이에 변경을 요청하는 메시지
// 
// @param type 변경할 방법에 대한 종류(사용자 정의)
// @param updateInfo 변경할 구체적인 내용(사용자 정의)
message GAnsUserUpdate {
    required int32 type = 1;
    required bytes updateInfo = 2;
}


/* ------------------------------------------------------------------------- */
// @brief 맞고 전용, 클라이언트 접속이 끊어져 있는지 게이트웨이에 물어보는 메시지
message GAnsStatus
{
}


/* ------------------------------------------------------------------------- */
// @brief 맞고 전용, 클라이언트 접속 상태에 대한 메시지
// 
// @param status 클라이언트 접속 상태에 대한 정보 
message GReqStatus
{
    enum Status 
    {
        NORMAL = 1;
        DETACHED = 2;
    }
    required Status status = 1;
}


/* ------------------------------------------------------------------------- */
// @brief 게이트웨이에서 게임서버로 요청이 전달되는 메시지
// 
// @param type 요청의 구분
// @param reqGameEnter 게임 입장시의 요청 메시지
// @param reqGameLeave 게임 퇴장 요청 메시지
// @param reqDetach 클라이언트의 통신불능을 알려주는 메시지
// @param reqGameProtocol 클라이언트로부터온 게임 메시지
// @param ansDB 게이트웨이에 요청한 디비 처리에 대한 응답
// @param reqStatus 맞고전용, 클라이언트 접속 상태 확인
// @param reqUGToGameProtocol 게이트웨이와 게임서버간 통신을 위한 프로토콜

message GReqProtocol {
enum Type {
	NONE = 1;
	GREQGAMEENTER = 2;
	GREQGAMELEAVE = 3;
	GREQDETACH = 4;
	GREQPLUG = 5;
	GLREQGAMEPROTOCOL = 6;
	GDBANS = 7;
    GREQSTATUS = 8;
	GREQUGTOGAMEPROTOCOL = 9;
}
	required Type type = 1;
	optional GReqGameEnter reqGameEnter = 2;
	optional GReqGameLeave reqGameLeave = 3;
	optional GReqDetach reqDetach = 4;
	optional GReqPlug reqPlug = 5;
	optional bytes reqGameProtocol= 6;
	optional AnsDB ansDB = 7;
    optional GReqStatus reqStatus = 8;
    optional bytes reqUGToGameProtocol = 9;
}

/* ------------------------------------------------------------------------- */
// @brief 게임서버에서 게이트웨이로 보내는 응답 메시지
//
// @param type 응답의 구분
// @param ansGameEnter 게임 입장에 대한 응답 메시지
// @param ansGameLeave 게임에 내보낼때 알려주는 메시지
// @param ansDetach 사용안함
// @param ansPlug 사용안함
// @param ansGameProtocol 게임서버에서 클라이언트로 가는 게임 메시지
// @param ansUpdate 게이트웨이의 사용자 정보를 갱신하는 메시지
// @param ansStatus 맞고 전용, 클라이언트 접속 상태 확인 메시지
// @param ansUGToGameProtocol 게이트웨이와 게임서버간 통신을 위한 프로토콜

message GAnsProtocol {
enum Type {
	NONE = 1;
	GANSGAMEENTER = 2;
	GANSGAMELEAVE = 3;
	GANSDETACH = 4;
	GANSPLUG = 5;
	GERRPLUG = 6;

	GLANSGAMEPROTOCOL = 7;
	GDBREQ = 8;
    GANSUSERUPDATE = 9;
    GANSSTATUS = 10;
	GANSUGTOGAMEPROTOCOL = 11;
}
	required Type type = 1;
	optional GAnsGameEnter ansGameEnter = 2;
	optional GAnsGameLeave ansGameLeave = 3;
	optional GAnsDetach ansDetach = 4;
	optional GAnsPlug ansPlug = 5;
	optional GErrPlug ansErr = 6;
	optional bytes ansGameProtocol = 7;
	optional ReqDB reqDB = 8;
    optional GAnsUserUpdate ansUpdate = 9;
    optional GAnsStatus ansStatus = 10;
	optional bytes ansUGToGameProtocol = 11;
}

