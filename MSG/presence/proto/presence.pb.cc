// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "presence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_presence_2eproto() {
  delete PReqProtocol::default_instance_;
  delete PAnsProtocol::default_instance_;
}

void protobuf_AddDesc_presence_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  PReqProtocol::default_instance_ = new PReqProtocol();
  PAnsProtocol::default_instance_ = new PAnsProtocol();
  PReqProtocol::default_instance_->InitAsDefaultInstance();
  PAnsProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_presence_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_presence_2eproto {
  StaticDescriptorInitializer_presence_2eproto() {
    protobuf_AddDesc_presence_2eproto();
  }
} static_descriptor_initializer_presence_2eproto_;

bool PresenceCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PReqProtocol::kCommandFieldNumber;
const int PReqProtocol::kSeqIDFieldNumber;
const int PReqProtocol::kGameIDFieldNumber;
const int PReqProtocol::kSvcIDFieldNumber;
const int PReqProtocol::kCategoryFieldNumber;
const int PReqProtocol::kArg1FieldNumber;
const int PReqProtocol::kArg2FieldNumber;
#endif  // !_MSC_VER

PReqProtocol::PReqProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PReqProtocol::InitAsDefaultInstance() {
}

PReqProtocol::PReqProtocol(const PReqProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PReqProtocol::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  seqid_ = 0;
  gameid_ = GOOGLE_LONGLONG(0);
  svcid_ = 0;
  category_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PReqProtocol::~PReqProtocol() {
  SharedDtor();
}

void PReqProtocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PReqProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PReqProtocol& PReqProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();  return *default_instance_;
}

PReqProtocol* PReqProtocol::default_instance_ = NULL;

PReqProtocol* PReqProtocol::New() const {
  return new PReqProtocol;
}

void PReqProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    seqid_ = 0;
    gameid_ = GOOGLE_LONGLONG(0);
    svcid_ = 0;
    category_ = 0;
    arg1_ = 0;
    arg2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PReqProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PresenceCommand command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (PresenceCommand_IsValid(value)) {
            set_command(static_cast< PresenceCommand >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seqID;
        break;
      }
      
      // required int32 seqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqid_)));
          set_has_seqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameID;
        break;
      }
      
      // required int64 gameID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_svcID;
        break;
      }
      
      // required int32 svcID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svcid_)));
          set_has_svcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_category;
        break;
      }
      
      // required int32 category = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_arg1;
        break;
      }
      
      // optional int32 arg1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg1_)));
          set_has_arg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_arg2;
        break;
      }
      
      // optional int32 arg2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg2_)));
          set_has_arg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PReqProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PresenceCommand command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }
  
  // required int32 seqID = 2;
  if (has_seqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seqid(), output);
  }
  
  // required int64 gameID = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gameid(), output);
  }
  
  // required int32 svcID = 4;
  if (has_svcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->svcid(), output);
  }
  
  // required int32 category = 5;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->category(), output);
  }
  
  // optional int32 arg1 = 6;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->arg1(), output);
  }
  
  // optional int32 arg2 = 7;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->arg2(), output);
  }
  
}

int PReqProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PresenceCommand command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }
    
    // required int32 seqID = 2;
    if (has_seqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqid());
    }
    
    // required int64 gameID = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gameid());
    }
    
    // required int32 svcID = 4;
    if (has_svcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svcid());
    }
    
    // required int32 category = 5;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }
    
    // optional int32 arg1 = 6;
    if (has_arg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg1());
    }
    
    // optional int32 arg2 = 7;
    if (has_arg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg2());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PReqProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PReqProtocol*>(&from));
}

void PReqProtocol::MergeFrom(const PReqProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_seqid()) {
      set_seqid(from.seqid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_svcid()) {
      set_svcid(from.svcid());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_arg1()) {
      set_arg1(from.arg1());
    }
    if (from.has_arg2()) {
      set_arg2(from.arg2());
    }
  }
}

void PReqProtocol::CopyFrom(const PReqProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PReqProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void PReqProtocol::Swap(PReqProtocol* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(seqid_, other->seqid_);
    std::swap(gameid_, other->gameid_);
    std::swap(svcid_, other->svcid_);
    std::swap(category_, other->category_);
    std::swap(arg1_, other->arg1_);
    std::swap(arg2_, other->arg2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PReqProtocol::GetTypeName() const {
  return "PReqProtocol";
}


// ===================================================================

#ifndef _MSC_VER
const int PAnsProtocol::kCommandFieldNumber;
const int PAnsProtocol::kSeqIDFieldNumber;
const int PAnsProtocol::kGameIDFieldNumber;
const int PAnsProtocol::kSvcIDFieldNumber;
const int PAnsProtocol::kCategoryFieldNumber;
const int PAnsProtocol::kResultFieldNumber;
const int PAnsProtocol::kStatusFieldNumber;
const int PAnsProtocol::kDetachedFieldNumber;
const int PAnsProtocol::kIpFieldNumber;
const int PAnsProtocol::kPortFieldNumber;
const int PAnsProtocol::kRoomIDFieldNumber;
const int PAnsProtocol::kArg1FieldNumber;
const int PAnsProtocol::kArg2FieldNumber;
const int PAnsProtocol::kInfoFieldNumber;
#endif  // !_MSC_VER

PAnsProtocol::PAnsProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PAnsProtocol::InitAsDefaultInstance() {
}

PAnsProtocol::PAnsProtocol(const PAnsProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PAnsProtocol::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  seqid_ = 0;
  gameid_ = GOOGLE_LONGLONG(0);
  svcid_ = 0;
  category_ = 0;
  result_ = false;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detached_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  roomid_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PAnsProtocol::~PAnsProtocol() {
  SharedDtor();
}

void PAnsProtocol::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void PAnsProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PAnsProtocol& PAnsProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_2eproto();  return *default_instance_;
}

PAnsProtocol* PAnsProtocol::default_instance_ = NULL;

PAnsProtocol* PAnsProtocol::New() const {
  return new PAnsProtocol;
}

void PAnsProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    seqid_ = 0;
    gameid_ = GOOGLE_LONGLONG(0);
    svcid_ = 0;
    category_ = 0;
    result_ = false;
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    detached_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    roomid_ = 0;
    arg1_ = 0;
    arg2_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PAnsProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PresenceCommand command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (PresenceCommand_IsValid(value)) {
            set_command(static_cast< PresenceCommand >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seqID;
        break;
      }
      
      // required int32 seqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqid_)));
          set_has_seqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameID;
        break;
      }
      
      // required int64 gameID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_svcID;
        break;
      }
      
      // required int32 svcID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svcid_)));
          set_has_svcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_category;
        break;
      }
      
      // required int32 category = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }
      
      // required bool result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_status;
        break;
      }
      
      // required string status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_detached;
        break;
      }
      
      // required bool detached = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &detached_)));
          set_has_detached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }
      
      // optional string ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_port;
        break;
      }
      
      // optional int32 port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_roomID;
        break;
      }
      
      // optional int32 roomID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_arg1;
        break;
      }
      
      // optional int32 arg1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg1_)));
          set_has_arg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_arg2;
        break;
      }
      
      // optional int32 arg2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg2_)));
          set_has_arg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_info;
        break;
      }
      
      // optional string info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PAnsProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PresenceCommand command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }
  
  // required int32 seqID = 2;
  if (has_seqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seqid(), output);
  }
  
  // required int64 gameID = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gameid(), output);
  }
  
  // required int32 svcID = 4;
  if (has_svcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->svcid(), output);
  }
  
  // required int32 category = 5;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->category(), output);
  }
  
  // required bool result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->result(), output);
  }
  
  // required string status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->status(), output);
  }
  
  // required bool detached = 8;
  if (has_detached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->detached(), output);
  }
  
  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ip(), output);
  }
  
  // optional int32 port = 10;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->port(), output);
  }
  
  // optional int32 roomID = 11;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->roomid(), output);
  }
  
  // optional int32 arg1 = 12;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->arg1(), output);
  }
  
  // optional int32 arg2 = 13;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->arg2(), output);
  }
  
  // optional string info = 14;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->info(), output);
  }
  
}

int PAnsProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PresenceCommand command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }
    
    // required int32 seqID = 2;
    if (has_seqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqid());
    }
    
    // required int64 gameID = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gameid());
    }
    
    // required int32 svcID = 4;
    if (has_svcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svcid());
    }
    
    // required int32 category = 5;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }
    
    // required bool result = 6;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // required string status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
    // required bool detached = 8;
    if (has_detached()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 9;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional int32 port = 10;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // optional int32 roomID = 11;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional int32 arg1 = 12;
    if (has_arg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg1());
    }
    
    // optional int32 arg2 = 13;
    if (has_arg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg2());
    }
    
    // optional string info = 14;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PAnsProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PAnsProtocol*>(&from));
}

void PAnsProtocol::MergeFrom(const PAnsProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_seqid()) {
      set_seqid(from.seqid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_svcid()) {
      set_svcid(from.svcid());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_detached()) {
      set_detached(from.detached());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_arg1()) {
      set_arg1(from.arg1());
    }
    if (from.has_arg2()) {
      set_arg2(from.arg2());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
}

void PAnsProtocol::CopyFrom(const PAnsProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAnsProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void PAnsProtocol::Swap(PAnsProtocol* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(seqid_, other->seqid_);
    std::swap(gameid_, other->gameid_);
    std::swap(svcid_, other->svcid_);
    std::swap(category_, other->category_);
    std::swap(result_, other->result_);
    std::swap(status_, other->status_);
    std::swap(detached_, other->detached_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(roomid_, other->roomid_);
    std::swap(arg1_, other->arg1_);
    std::swap(arg2_, other->arg2_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PAnsProtocol::GetTypeName() const {
  return "PAnsProtocol";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
