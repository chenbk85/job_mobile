/* * using System;namespace Evaluant.Calculator.Play{    /// <summary>    /// Summary description for Program.    /// </summary>    public class Program    {        public static void Main(string[] args)        {            string[] expressions = new string[]			{				"2 + 3 + 5",				"2 * 3 + 5",				"2 * (3 + 5)",				"2 * (2*(2*(2+1)))",				"10 % 3",				"true or false",				"false || not (false and true)",				"3 > 2 and 1 <= (3-2)",				"3 % 2 != 10 % 3",			};            foreach (string expression in expressions)                Console.WriteLine("{0} = {1}",                    expression,                    new Expression(expression).Evaluate());        }    }}*/using UnityEngine;using System.Collections.Generic;using Evaluant.Calculator;namespace nNWM{    public class jCalculator    {        string m_text;        public Dictionary<string, float> m_VarList;        public bool Init(string s)        {            m_text = s;            bool isVarStart = false;            string var = "";            foreach (char v in m_text)            {                if (v == '{')                {                    isVarStart = true;                    var = "";                    continue;                }                if (v == '}')                {                    if (var.Length != 0)                        m_VarList.Add(var, 0);                    var = "";                    isVarStart = false;                    continue;                }                if (isVarStart == true)                {                    var = var + v;                }            }            if (isVarStart != true)                return true;            jDebug.jWARN("invalid var : " + s);            return false;        }        public bool ReplaceVar(string name, float val)        {            if (m_VarList.ContainsKey(name) == false)            {                jDebug.jWARN(" var is not found : " + name);                return false;            }            m_VarList[name] = val;            return true;        }        public float Calc()        {            string eval_text = m_text;            foreach (var v in m_VarList)            {                string name = "{" + v.Key + "}";                eval_text.Replace(name, v.Value.ToString());            }            try            {                Expression ex = new Expression(eval_text);                //Object eval = (Object)ex.Evaluate();                decimal d = (decimal)ex.Evaluate();                return (float)d;            }            catch (System.Exception e)            {                jDebug.jWARN("error in : " + eval_text + " : " + e.ToString());            }            return 0;        }    }}