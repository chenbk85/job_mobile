// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "excel_baseball_table_db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* s_tbl_quest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_tbl_quest_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_tbl_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_tbl_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_tbl_roundresult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_tbl_roundresult_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_tbl_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_tbl_user_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_excel_5fbaseball_5ftable_5fdb_2eproto() {
  protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "excel_baseball_table_db.proto");
  GOOGLE_CHECK(file != NULL);
  s_tbl_quest_descriptor_ = file->message_type(0);
  static const int s_tbl_quest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, db_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, quest_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, date_insert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, date_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, done_count_),
  };
  s_tbl_quest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_tbl_quest_descriptor_,
      s_tbl_quest::default_instance_,
      s_tbl_quest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_quest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_tbl_quest));
  s_tbl_result_descriptor_ = file->message_type(1);
  static const int s_tbl_result_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, db_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, win_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, win_better_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, win_pitcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, win_elo_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, lose_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, lose_better_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, lose_pitcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, lose_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, lose_elo_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, play_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, time_end_),
  };
  s_tbl_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_tbl_result_descriptor_,
      s_tbl_result::default_instance_,
      s_tbl_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_tbl_result));
  s_tbl_roundresult_descriptor_ = file->message_type(2);
  static const int s_tbl_roundresult_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, db_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, used_batter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, used_pitcher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, round_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, used_breakingball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, used_breakingball_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, used_pitcherability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, pitching_rhythm_judge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, used_gesturetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, gesturetype_input_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, used_batting_fullpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, batting_timing_judge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, batting_hittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, uid_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, base_runner_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, hit_type_),
  };
  s_tbl_roundresult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_tbl_roundresult_descriptor_,
      s_tbl_roundresult::default_instance_,
      s_tbl_roundresult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_roundresult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_tbl_roundresult));
  s_tbl_user_descriptor_ = file->message_type(3);
  static const int s_tbl_user_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, db_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, pp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, host_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, discon_tot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, win_tot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, win_tot_continue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, win_tot_continue_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, lose_tot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, win_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, lose_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, batter_tot_homerun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, pitcher_tot_strikeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, batter_tot_homerun_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, pitcher_tot_strikeout_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, elo_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, cash_item_buy_money_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, time_last_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, time_last_logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, day_continue_attend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, client_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, client_networ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, playtime_tot_),
  };
  s_tbl_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_tbl_user_descriptor_,
      s_tbl_user::default_instance_,
      s_tbl_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_tbl_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_tbl_user));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_excel_5fbaseball_5ftable_5fdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_tbl_quest_descriptor_, &s_tbl_quest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_tbl_result_descriptor_, &s_tbl_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_tbl_roundresult_descriptor_, &s_tbl_roundresult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_tbl_user_descriptor_, &s_tbl_user::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_excel_5fbaseball_5ftable_5fdb_2eproto() {
  delete s_tbl_quest::default_instance_;
  delete s_tbl_quest_reflection_;
  delete s_tbl_result::default_instance_;
  delete s_tbl_result_reflection_;
  delete s_tbl_roundresult::default_instance_;
  delete s_tbl_roundresult_reflection_;
  delete s_tbl_user::default_instance_;
  delete s_tbl_user_reflection_;
}

void protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035excel_baseball_table_db.proto\"\206\001\n\013s_tb"
    "l_quest\022\r\n\005db_id\030\001 \001(\003\022\021\n\tquest_sid\030\002 \001("
    "\005\022\013\n\003uid\030\003 \001(\003\022\023\n\013date_insert\030\004 \001(\t\022\021\n\td"
    "ate_done\030\005 \001(\t\022\014\n\004info\030\006 \001(\t\022\022\n\ndone_cou"
    "nt\030\007 \001(\005\"\223\002\n\014s_tbl_result\022\r\n\005db_id\030\001 \001(\003"
    "\022\017\n\007win_uid\030\002 \001(\003\022\022\n\nwin_better\030\003 \001(\003\022\023\n"
    "\013win_pitcher\030\004 \001(\003\022\021\n\twin_score\030\005 \001(\005\022\025\n"
    "\rwin_elo_point\030\006 \001(\005\022\020\n\010lose_uid\030\007 \001(\003\022\023"
    "\n\013lose_better\030\010 \001(\003\022\024\n\014lose_pitcher\030\t \001("
    "\003\022\022\n\nlose_score\030\n \001(\005\022\026\n\016lose_elo_point\030"
    "\013 \001(\005\022\025\n\rplay_time_sec\030\014 \001(\005\022\020\n\010time_end"
    "\030\r \001(\t\"\321\003\n\021s_tbl_roundresult\022\r\n\005db_id\030\001 "
    "\001(\003\022\014\n\004grid\030\002 \001(\003\022\026\n\016used_batter_id\030\003 \001("
    "\005\022\027\n\017used_pitcher_id\030\004 \001(\005\022\024\n\014round_numb"
    "er\030\005 \001(\005\022\031\n\021used_breakingball\030\006 \001(\005\022\037\n\027u"
    "sed_breakingball_speed\030\007 \001(\005\022\033\n\023used_pit"
    "cherability\030\010 \001(\005\022\035\n\025pitching_rhythm_jud"
    "ge\030\t \001(\005\022\030\n\020used_gesturetype\030\n \001(\005\022\037\n\027ge"
    "sturetype_input_error\030\013 \001(\005\022\036\n\026used_batt"
    "ing_fullpower\030\014 \001(\005\022\034\n\024batting_timing_ju"
    "dge\030\r \001(\005\022\027\n\017batting_hittype\030\016 \001(\005\022\022\n\nui"
    "d_attack\030\017 \001(\003\022\r\n\005score\030\020 \001(\005\022\031\n\021base_ru"
    "nner_state\030\021 \001(\005\022\020\n\010hit_type\030\022 \001(\005\"\257\004\n\ns"
    "_tbl_user\022\r\n\005db_id\030\001 \001(\003\022\r\n\005pp_id\030\002 \001(\003\022"
    "\021\n\thost_type\030\003 \001(\t\022\r\n\005uname\030\004 \001(\t\022\022\n\ndis"
    "con_tot\030\005 \001(\005\022\017\n\007win_tot\030\006 \001(\005\022\030\n\020win_to"
    "t_continue\030\007 \001(\005\022\034\n\024win_tot_continue_max"
    "\030\010 \001(\005\022\020\n\010lose_tot\030\t \001(\005\022\022\n\nwin_season\030\n"
    " \001(\005\022\023\n\013lose_season\030\013 \001(\005\022\032\n\022batter_tot_"
    "homerun\030\014 \001(\005\022\035\n\025pitcher_tot_strikeout\030\r"
    " \001(\005\022!\n\031batter_tot_homerun_season\030\016 \001(\005\022"
    "$\n\034pitcher_tot_strikeout_season\030\017 \001(\005\022\021\n"
    "\telo_point\030\020 \001(\005\022\"\n\032cash_item_buy_money_"
    "amount\030\021 \001(\003\022\027\n\017time_last_login\030\022 \001(\t\022\030\n"
    "\020time_last_logout\030\023 \001(\t\022\033\n\023day_continue_"
    "attend\030\024 \001(\005\022\021\n\tclient_os\030\025 \001(\t\022\025\n\rclien"
    "t_networ\030\026 \001(\t\022\024\n\014playtime_tot\030\027 \001(\003", 1476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "excel_baseball_table_db.proto", &protobuf_RegisterTypes);
  s_tbl_quest::default_instance_ = new s_tbl_quest();
  s_tbl_result::default_instance_ = new s_tbl_result();
  s_tbl_roundresult::default_instance_ = new s_tbl_roundresult();
  s_tbl_user::default_instance_ = new s_tbl_user();
  s_tbl_quest::default_instance_->InitAsDefaultInstance();
  s_tbl_result::default_instance_->InitAsDefaultInstance();
  s_tbl_roundresult::default_instance_->InitAsDefaultInstance();
  s_tbl_user::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_excel_5fbaseball_5ftable_5fdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_excel_5fbaseball_5ftable_5fdb_2eproto {
  StaticDescriptorInitializer_excel_5fbaseball_5ftable_5fdb_2eproto() {
    protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  }
} static_descriptor_initializer_excel_5fbaseball_5ftable_5fdb_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int s_tbl_quest::kDbIdFieldNumber;
const int s_tbl_quest::kQuestSidFieldNumber;
const int s_tbl_quest::kUidFieldNumber;
const int s_tbl_quest::kDateInsertFieldNumber;
const int s_tbl_quest::kDateDoneFieldNumber;
const int s_tbl_quest::kInfoFieldNumber;
const int s_tbl_quest::kDoneCountFieldNumber;
#endif  // !_MSC_VER

s_tbl_quest::s_tbl_quest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_tbl_quest::InitAsDefaultInstance() {
}

s_tbl_quest::s_tbl_quest(const s_tbl_quest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_tbl_quest::SharedCtor() {
  _cached_size_ = 0;
  db_id_ = GOOGLE_LONGLONG(0);
  quest_sid_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  date_insert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_done_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  done_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_tbl_quest::~s_tbl_quest() {
  SharedDtor();
}

void s_tbl_quest::SharedDtor() {
  if (date_insert_ != &::google::protobuf::internal::kEmptyString) {
    delete date_insert_;
  }
  if (date_done_ != &::google::protobuf::internal::kEmptyString) {
    delete date_done_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void s_tbl_quest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_tbl_quest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_tbl_quest_descriptor_;
}

const s_tbl_quest& s_tbl_quest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();  return *default_instance_;
}

s_tbl_quest* s_tbl_quest::default_instance_ = NULL;

s_tbl_quest* s_tbl_quest::New() const {
  return new s_tbl_quest;
}

void s_tbl_quest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_id_ = GOOGLE_LONGLONG(0);
    quest_sid_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    if (has_date_insert()) {
      if (date_insert_ != &::google::protobuf::internal::kEmptyString) {
        date_insert_->clear();
      }
    }
    if (has_date_done()) {
      if (date_done_ != &::google::protobuf::internal::kEmptyString) {
        date_done_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    done_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_tbl_quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 db_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &db_id_)));
          set_has_db_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_sid;
        break;
      }
      
      // optional int32 quest_sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_sid_)));
          set_has_quest_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_date_insert;
        break;
      }
      
      // optional string date_insert = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_insert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_insert()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_insert().data(), this->date_insert().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_date_done;
        break;
      }
      
      // optional string date_done = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_done:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_done()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_done().data(), this->date_done().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }
      
      // optional string info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_done_count;
        break;
      }
      
      // optional int32 done_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &done_count_)));
          set_has_done_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_tbl_quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 db_id = 1;
  if (has_db_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->db_id(), output);
  }
  
  // optional int32 quest_sid = 2;
  if (has_quest_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quest_sid(), output);
  }
  
  // optional int64 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uid(), output);
  }
  
  // optional string date_insert = 4;
  if (has_date_insert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_insert().data(), this->date_insert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->date_insert(), output);
  }
  
  // optional string date_done = 5;
  if (has_date_done()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_done().data(), this->date_done().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->date_done(), output);
  }
  
  // optional string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->info(), output);
  }
  
  // optional int32 done_count = 7;
  if (has_done_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->done_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_tbl_quest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 db_id = 1;
  if (has_db_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->db_id(), target);
  }
  
  // optional int32 quest_sid = 2;
  if (has_quest_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quest_sid(), target);
  }
  
  // optional int64 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uid(), target);
  }
  
  // optional string date_insert = 4;
  if (has_date_insert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_insert().data(), this->date_insert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date_insert(), target);
  }
  
  // optional string date_done = 5;
  if (has_date_done()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_done().data(), this->date_done().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date_done(), target);
  }
  
  // optional string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->info(), target);
  }
  
  // optional int32 done_count = 7;
  if (has_done_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->done_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_tbl_quest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 db_id = 1;
    if (has_db_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->db_id());
    }
    
    // optional int32 quest_sid = 2;
    if (has_quest_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_sid());
    }
    
    // optional int64 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional string date_insert = 4;
    if (has_date_insert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_insert());
    }
    
    // optional string date_done = 5;
    if (has_date_done()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_done());
    }
    
    // optional string info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
    // optional int32 done_count = 7;
    if (has_done_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->done_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_tbl_quest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_tbl_quest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_tbl_quest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_tbl_quest::MergeFrom(const s_tbl_quest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_id()) {
      set_db_id(from.db_id());
    }
    if (from.has_quest_sid()) {
      set_quest_sid(from.quest_sid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_date_insert()) {
      set_date_insert(from.date_insert());
    }
    if (from.has_date_done()) {
      set_date_done(from.date_done());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_done_count()) {
      set_done_count(from.done_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_tbl_quest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_tbl_quest::CopyFrom(const s_tbl_quest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_tbl_quest::IsInitialized() const {
  
  return true;
}

void s_tbl_quest::Swap(s_tbl_quest* other) {
  if (other != this) {
    std::swap(db_id_, other->db_id_);
    std::swap(quest_sid_, other->quest_sid_);
    std::swap(uid_, other->uid_);
    std::swap(date_insert_, other->date_insert_);
    std::swap(date_done_, other->date_done_);
    std::swap(info_, other->info_);
    std::swap(done_count_, other->done_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_tbl_quest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_tbl_quest_descriptor_;
  metadata.reflection = s_tbl_quest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_tbl_result::kDbIdFieldNumber;
const int s_tbl_result::kWinUidFieldNumber;
const int s_tbl_result::kWinBetterFieldNumber;
const int s_tbl_result::kWinPitcherFieldNumber;
const int s_tbl_result::kWinScoreFieldNumber;
const int s_tbl_result::kWinEloPointFieldNumber;
const int s_tbl_result::kLoseUidFieldNumber;
const int s_tbl_result::kLoseBetterFieldNumber;
const int s_tbl_result::kLosePitcherFieldNumber;
const int s_tbl_result::kLoseScoreFieldNumber;
const int s_tbl_result::kLoseEloPointFieldNumber;
const int s_tbl_result::kPlayTimeSecFieldNumber;
const int s_tbl_result::kTimeEndFieldNumber;
#endif  // !_MSC_VER

s_tbl_result::s_tbl_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_tbl_result::InitAsDefaultInstance() {
}

s_tbl_result::s_tbl_result(const s_tbl_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_tbl_result::SharedCtor() {
  _cached_size_ = 0;
  db_id_ = GOOGLE_LONGLONG(0);
  win_uid_ = GOOGLE_LONGLONG(0);
  win_better_ = GOOGLE_LONGLONG(0);
  win_pitcher_ = GOOGLE_LONGLONG(0);
  win_score_ = 0;
  win_elo_point_ = 0;
  lose_uid_ = GOOGLE_LONGLONG(0);
  lose_better_ = GOOGLE_LONGLONG(0);
  lose_pitcher_ = GOOGLE_LONGLONG(0);
  lose_score_ = 0;
  lose_elo_point_ = 0;
  play_time_sec_ = 0;
  time_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_tbl_result::~s_tbl_result() {
  SharedDtor();
}

void s_tbl_result::SharedDtor() {
  if (time_end_ != &::google::protobuf::internal::kEmptyString) {
    delete time_end_;
  }
  if (this != default_instance_) {
  }
}

void s_tbl_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_tbl_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_tbl_result_descriptor_;
}

const s_tbl_result& s_tbl_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();  return *default_instance_;
}

s_tbl_result* s_tbl_result::default_instance_ = NULL;

s_tbl_result* s_tbl_result::New() const {
  return new s_tbl_result;
}

void s_tbl_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_id_ = GOOGLE_LONGLONG(0);
    win_uid_ = GOOGLE_LONGLONG(0);
    win_better_ = GOOGLE_LONGLONG(0);
    win_pitcher_ = GOOGLE_LONGLONG(0);
    win_score_ = 0;
    win_elo_point_ = 0;
    lose_uid_ = GOOGLE_LONGLONG(0);
    lose_better_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lose_pitcher_ = GOOGLE_LONGLONG(0);
    lose_score_ = 0;
    lose_elo_point_ = 0;
    play_time_sec_ = 0;
    if (has_time_end()) {
      if (time_end_ != &::google::protobuf::internal::kEmptyString) {
        time_end_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_tbl_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 db_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &db_id_)));
          set_has_db_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_uid;
        break;
      }
      
      // optional int64 win_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_uid_)));
          set_has_win_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_better;
        break;
      }
      
      // optional int64 win_better = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_better:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_better_)));
          set_has_win_better();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win_pitcher;
        break;
      }
      
      // optional int64 win_pitcher = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_pitcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_pitcher_)));
          set_has_win_pitcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_score;
        break;
      }
      
      // optional int32 win_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_score_)));
          set_has_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_elo_point;
        break;
      }
      
      // optional int32 win_elo_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_elo_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_elo_point_)));
          set_has_win_elo_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lose_uid;
        break;
      }
      
      // optional int64 lose_uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lose_uid_)));
          set_has_lose_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lose_better;
        break;
      }
      
      // optional int64 lose_better = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_better:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lose_better_)));
          set_has_lose_better();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lose_pitcher;
        break;
      }
      
      // optional int64 lose_pitcher = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_pitcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lose_pitcher_)));
          set_has_lose_pitcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lose_score;
        break;
      }
      
      // optional int32 lose_score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_score_)));
          set_has_lose_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lose_elo_point;
        break;
      }
      
      // optional int32 lose_elo_point = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_elo_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_elo_point_)));
          set_has_lose_elo_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_play_time_sec;
        break;
      }
      
      // optional int32 play_time_sec = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_time_sec_)));
          set_has_play_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_time_end;
        break;
      }
      
      // optional string time_end = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_end()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_end().data(), this->time_end().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_tbl_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 db_id = 1;
  if (has_db_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->db_id(), output);
  }
  
  // optional int64 win_uid = 2;
  if (has_win_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->win_uid(), output);
  }
  
  // optional int64 win_better = 3;
  if (has_win_better()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->win_better(), output);
  }
  
  // optional int64 win_pitcher = 4;
  if (has_win_pitcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->win_pitcher(), output);
  }
  
  // optional int32 win_score = 5;
  if (has_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->win_score(), output);
  }
  
  // optional int32 win_elo_point = 6;
  if (has_win_elo_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_elo_point(), output);
  }
  
  // optional int64 lose_uid = 7;
  if (has_lose_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lose_uid(), output);
  }
  
  // optional int64 lose_better = 8;
  if (has_lose_better()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lose_better(), output);
  }
  
  // optional int64 lose_pitcher = 9;
  if (has_lose_pitcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->lose_pitcher(), output);
  }
  
  // optional int32 lose_score = 10;
  if (has_lose_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lose_score(), output);
  }
  
  // optional int32 lose_elo_point = 11;
  if (has_lose_elo_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lose_elo_point(), output);
  }
  
  // optional int32 play_time_sec = 12;
  if (has_play_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->play_time_sec(), output);
  }
  
  // optional string time_end = 13;
  if (has_time_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_end().data(), this->time_end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->time_end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_tbl_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 db_id = 1;
  if (has_db_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->db_id(), target);
  }
  
  // optional int64 win_uid = 2;
  if (has_win_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->win_uid(), target);
  }
  
  // optional int64 win_better = 3;
  if (has_win_better()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->win_better(), target);
  }
  
  // optional int64 win_pitcher = 4;
  if (has_win_pitcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->win_pitcher(), target);
  }
  
  // optional int32 win_score = 5;
  if (has_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->win_score(), target);
  }
  
  // optional int32 win_elo_point = 6;
  if (has_win_elo_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_elo_point(), target);
  }
  
  // optional int64 lose_uid = 7;
  if (has_lose_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lose_uid(), target);
  }
  
  // optional int64 lose_better = 8;
  if (has_lose_better()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lose_better(), target);
  }
  
  // optional int64 lose_pitcher = 9;
  if (has_lose_pitcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->lose_pitcher(), target);
  }
  
  // optional int32 lose_score = 10;
  if (has_lose_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lose_score(), target);
  }
  
  // optional int32 lose_elo_point = 11;
  if (has_lose_elo_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lose_elo_point(), target);
  }
  
  // optional int32 play_time_sec = 12;
  if (has_play_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->play_time_sec(), target);
  }
  
  // optional string time_end = 13;
  if (has_time_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_end().data(), this->time_end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->time_end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_tbl_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 db_id = 1;
    if (has_db_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->db_id());
    }
    
    // optional int64 win_uid = 2;
    if (has_win_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_uid());
    }
    
    // optional int64 win_better = 3;
    if (has_win_better()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_better());
    }
    
    // optional int64 win_pitcher = 4;
    if (has_win_pitcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_pitcher());
    }
    
    // optional int32 win_score = 5;
    if (has_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_score());
    }
    
    // optional int32 win_elo_point = 6;
    if (has_win_elo_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_elo_point());
    }
    
    // optional int64 lose_uid = 7;
    if (has_lose_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lose_uid());
    }
    
    // optional int64 lose_better = 8;
    if (has_lose_better()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lose_better());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 lose_pitcher = 9;
    if (has_lose_pitcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lose_pitcher());
    }
    
    // optional int32 lose_score = 10;
    if (has_lose_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_score());
    }
    
    // optional int32 lose_elo_point = 11;
    if (has_lose_elo_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_elo_point());
    }
    
    // optional int32 play_time_sec = 12;
    if (has_play_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_time_sec());
    }
    
    // optional string time_end = 13;
    if (has_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_tbl_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_tbl_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_tbl_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_tbl_result::MergeFrom(const s_tbl_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_id()) {
      set_db_id(from.db_id());
    }
    if (from.has_win_uid()) {
      set_win_uid(from.win_uid());
    }
    if (from.has_win_better()) {
      set_win_better(from.win_better());
    }
    if (from.has_win_pitcher()) {
      set_win_pitcher(from.win_pitcher());
    }
    if (from.has_win_score()) {
      set_win_score(from.win_score());
    }
    if (from.has_win_elo_point()) {
      set_win_elo_point(from.win_elo_point());
    }
    if (from.has_lose_uid()) {
      set_lose_uid(from.lose_uid());
    }
    if (from.has_lose_better()) {
      set_lose_better(from.lose_better());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lose_pitcher()) {
      set_lose_pitcher(from.lose_pitcher());
    }
    if (from.has_lose_score()) {
      set_lose_score(from.lose_score());
    }
    if (from.has_lose_elo_point()) {
      set_lose_elo_point(from.lose_elo_point());
    }
    if (from.has_play_time_sec()) {
      set_play_time_sec(from.play_time_sec());
    }
    if (from.has_time_end()) {
      set_time_end(from.time_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_tbl_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_tbl_result::CopyFrom(const s_tbl_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_tbl_result::IsInitialized() const {
  
  return true;
}

void s_tbl_result::Swap(s_tbl_result* other) {
  if (other != this) {
    std::swap(db_id_, other->db_id_);
    std::swap(win_uid_, other->win_uid_);
    std::swap(win_better_, other->win_better_);
    std::swap(win_pitcher_, other->win_pitcher_);
    std::swap(win_score_, other->win_score_);
    std::swap(win_elo_point_, other->win_elo_point_);
    std::swap(lose_uid_, other->lose_uid_);
    std::swap(lose_better_, other->lose_better_);
    std::swap(lose_pitcher_, other->lose_pitcher_);
    std::swap(lose_score_, other->lose_score_);
    std::swap(lose_elo_point_, other->lose_elo_point_);
    std::swap(play_time_sec_, other->play_time_sec_);
    std::swap(time_end_, other->time_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_tbl_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_tbl_result_descriptor_;
  metadata.reflection = s_tbl_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_tbl_roundresult::kDbIdFieldNumber;
const int s_tbl_roundresult::kGridFieldNumber;
const int s_tbl_roundresult::kUsedBatterIdFieldNumber;
const int s_tbl_roundresult::kUsedPitcherIdFieldNumber;
const int s_tbl_roundresult::kRoundNumberFieldNumber;
const int s_tbl_roundresult::kUsedBreakingballFieldNumber;
const int s_tbl_roundresult::kUsedBreakingballSpeedFieldNumber;
const int s_tbl_roundresult::kUsedPitcherabilityFieldNumber;
const int s_tbl_roundresult::kPitchingRhythmJudgeFieldNumber;
const int s_tbl_roundresult::kUsedGesturetypeFieldNumber;
const int s_tbl_roundresult::kGesturetypeInputErrorFieldNumber;
const int s_tbl_roundresult::kUsedBattingFullpowerFieldNumber;
const int s_tbl_roundresult::kBattingTimingJudgeFieldNumber;
const int s_tbl_roundresult::kBattingHittypeFieldNumber;
const int s_tbl_roundresult::kUidAttackFieldNumber;
const int s_tbl_roundresult::kScoreFieldNumber;
const int s_tbl_roundresult::kBaseRunnerStateFieldNumber;
const int s_tbl_roundresult::kHitTypeFieldNumber;
#endif  // !_MSC_VER

s_tbl_roundresult::s_tbl_roundresult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_tbl_roundresult::InitAsDefaultInstance() {
}

s_tbl_roundresult::s_tbl_roundresult(const s_tbl_roundresult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_tbl_roundresult::SharedCtor() {
  _cached_size_ = 0;
  db_id_ = GOOGLE_LONGLONG(0);
  grid_ = GOOGLE_LONGLONG(0);
  used_batter_id_ = 0;
  used_pitcher_id_ = 0;
  round_number_ = 0;
  used_breakingball_ = 0;
  used_breakingball_speed_ = 0;
  used_pitcherability_ = 0;
  pitching_rhythm_judge_ = 0;
  used_gesturetype_ = 0;
  gesturetype_input_error_ = 0;
  used_batting_fullpower_ = 0;
  batting_timing_judge_ = 0;
  batting_hittype_ = 0;
  uid_attack_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  base_runner_state_ = 0;
  hit_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_tbl_roundresult::~s_tbl_roundresult() {
  SharedDtor();
}

void s_tbl_roundresult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_tbl_roundresult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_tbl_roundresult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_tbl_roundresult_descriptor_;
}

const s_tbl_roundresult& s_tbl_roundresult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();  return *default_instance_;
}

s_tbl_roundresult* s_tbl_roundresult::default_instance_ = NULL;

s_tbl_roundresult* s_tbl_roundresult::New() const {
  return new s_tbl_roundresult;
}

void s_tbl_roundresult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_id_ = GOOGLE_LONGLONG(0);
    grid_ = GOOGLE_LONGLONG(0);
    used_batter_id_ = 0;
    used_pitcher_id_ = 0;
    round_number_ = 0;
    used_breakingball_ = 0;
    used_breakingball_speed_ = 0;
    used_pitcherability_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pitching_rhythm_judge_ = 0;
    used_gesturetype_ = 0;
    gesturetype_input_error_ = 0;
    used_batting_fullpower_ = 0;
    batting_timing_judge_ = 0;
    batting_hittype_ = 0;
    uid_attack_ = GOOGLE_LONGLONG(0);
    score_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    base_runner_state_ = 0;
    hit_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_tbl_roundresult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 db_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &db_id_)));
          set_has_db_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid;
        break;
      }
      
      // optional int64 grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_batter_id;
        break;
      }
      
      // optional int32 used_batter_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_batter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_batter_id_)));
          set_has_used_batter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_used_pitcher_id;
        break;
      }
      
      // optional int32 used_pitcher_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_pitcher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_pitcher_id_)));
          set_has_used_pitcher_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_round_number;
        break;
      }
      
      // optional int32 round_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_number_)));
          set_has_round_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_used_breakingball;
        break;
      }
      
      // optional int32 used_breakingball = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_breakingball:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_breakingball_)));
          set_has_used_breakingball();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_used_breakingball_speed;
        break;
      }
      
      // optional int32 used_breakingball_speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_breakingball_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_breakingball_speed_)));
          set_has_used_breakingball_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_used_pitcherability;
        break;
      }
      
      // optional int32 used_pitcherability = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_pitcherability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_pitcherability_)));
          set_has_used_pitcherability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pitching_rhythm_judge;
        break;
      }
      
      // optional int32 pitching_rhythm_judge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitching_rhythm_judge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitching_rhythm_judge_)));
          set_has_pitching_rhythm_judge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_used_gesturetype;
        break;
      }
      
      // optional int32 used_gesturetype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_gesturetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_gesturetype_)));
          set_has_used_gesturetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gesturetype_input_error;
        break;
      }
      
      // optional int32 gesturetype_input_error = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gesturetype_input_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gesturetype_input_error_)));
          set_has_gesturetype_input_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_used_batting_fullpower;
        break;
      }
      
      // optional int32 used_batting_fullpower = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_batting_fullpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_batting_fullpower_)));
          set_has_used_batting_fullpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_batting_timing_judge;
        break;
      }
      
      // optional int32 batting_timing_judge = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batting_timing_judge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batting_timing_judge_)));
          set_has_batting_timing_judge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_batting_hittype;
        break;
      }
      
      // optional int32 batting_hittype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batting_hittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batting_hittype_)));
          set_has_batting_hittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_uid_attack;
        break;
      }
      
      // optional int64 uid_attack = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_attack_)));
          set_has_uid_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_score;
        break;
      }
      
      // optional int32 score = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_base_runner_state;
        break;
      }
      
      // optional int32 base_runner_state = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_runner_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_runner_state_)));
          set_has_base_runner_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_hit_type;
        break;
      }
      
      // optional int32 hit_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_type_)));
          set_has_hit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_tbl_roundresult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 db_id = 1;
  if (has_db_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->db_id(), output);
  }
  
  // optional int64 grid = 2;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->grid(), output);
  }
  
  // optional int32 used_batter_id = 3;
  if (has_used_batter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->used_batter_id(), output);
  }
  
  // optional int32 used_pitcher_id = 4;
  if (has_used_pitcher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->used_pitcher_id(), output);
  }
  
  // optional int32 round_number = 5;
  if (has_round_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->round_number(), output);
  }
  
  // optional int32 used_breakingball = 6;
  if (has_used_breakingball()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->used_breakingball(), output);
  }
  
  // optional int32 used_breakingball_speed = 7;
  if (has_used_breakingball_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->used_breakingball_speed(), output);
  }
  
  // optional int32 used_pitcherability = 8;
  if (has_used_pitcherability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->used_pitcherability(), output);
  }
  
  // optional int32 pitching_rhythm_judge = 9;
  if (has_pitching_rhythm_judge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pitching_rhythm_judge(), output);
  }
  
  // optional int32 used_gesturetype = 10;
  if (has_used_gesturetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->used_gesturetype(), output);
  }
  
  // optional int32 gesturetype_input_error = 11;
  if (has_gesturetype_input_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gesturetype_input_error(), output);
  }
  
  // optional int32 used_batting_fullpower = 12;
  if (has_used_batting_fullpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->used_batting_fullpower(), output);
  }
  
  // optional int32 batting_timing_judge = 13;
  if (has_batting_timing_judge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->batting_timing_judge(), output);
  }
  
  // optional int32 batting_hittype = 14;
  if (has_batting_hittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->batting_hittype(), output);
  }
  
  // optional int64 uid_attack = 15;
  if (has_uid_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->uid_attack(), output);
  }
  
  // optional int32 score = 16;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->score(), output);
  }
  
  // optional int32 base_runner_state = 17;
  if (has_base_runner_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->base_runner_state(), output);
  }
  
  // optional int32 hit_type = 18;
  if (has_hit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->hit_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_tbl_roundresult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 db_id = 1;
  if (has_db_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->db_id(), target);
  }
  
  // optional int64 grid = 2;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->grid(), target);
  }
  
  // optional int32 used_batter_id = 3;
  if (has_used_batter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->used_batter_id(), target);
  }
  
  // optional int32 used_pitcher_id = 4;
  if (has_used_pitcher_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->used_pitcher_id(), target);
  }
  
  // optional int32 round_number = 5;
  if (has_round_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->round_number(), target);
  }
  
  // optional int32 used_breakingball = 6;
  if (has_used_breakingball()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->used_breakingball(), target);
  }
  
  // optional int32 used_breakingball_speed = 7;
  if (has_used_breakingball_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->used_breakingball_speed(), target);
  }
  
  // optional int32 used_pitcherability = 8;
  if (has_used_pitcherability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->used_pitcherability(), target);
  }
  
  // optional int32 pitching_rhythm_judge = 9;
  if (has_pitching_rhythm_judge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pitching_rhythm_judge(), target);
  }
  
  // optional int32 used_gesturetype = 10;
  if (has_used_gesturetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->used_gesturetype(), target);
  }
  
  // optional int32 gesturetype_input_error = 11;
  if (has_gesturetype_input_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gesturetype_input_error(), target);
  }
  
  // optional int32 used_batting_fullpower = 12;
  if (has_used_batting_fullpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->used_batting_fullpower(), target);
  }
  
  // optional int32 batting_timing_judge = 13;
  if (has_batting_timing_judge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->batting_timing_judge(), target);
  }
  
  // optional int32 batting_hittype = 14;
  if (has_batting_hittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->batting_hittype(), target);
  }
  
  // optional int64 uid_attack = 15;
  if (has_uid_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->uid_attack(), target);
  }
  
  // optional int32 score = 16;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->score(), target);
  }
  
  // optional int32 base_runner_state = 17;
  if (has_base_runner_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->base_runner_state(), target);
  }
  
  // optional int32 hit_type = 18;
  if (has_hit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->hit_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_tbl_roundresult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 db_id = 1;
    if (has_db_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->db_id());
    }
    
    // optional int64 grid = 2;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grid());
    }
    
    // optional int32 used_batter_id = 3;
    if (has_used_batter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_batter_id());
    }
    
    // optional int32 used_pitcher_id = 4;
    if (has_used_pitcher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_pitcher_id());
    }
    
    // optional int32 round_number = 5;
    if (has_round_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_number());
    }
    
    // optional int32 used_breakingball = 6;
    if (has_used_breakingball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_breakingball());
    }
    
    // optional int32 used_breakingball_speed = 7;
    if (has_used_breakingball_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_breakingball_speed());
    }
    
    // optional int32 used_pitcherability = 8;
    if (has_used_pitcherability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_pitcherability());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pitching_rhythm_judge = 9;
    if (has_pitching_rhythm_judge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitching_rhythm_judge());
    }
    
    // optional int32 used_gesturetype = 10;
    if (has_used_gesturetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_gesturetype());
    }
    
    // optional int32 gesturetype_input_error = 11;
    if (has_gesturetype_input_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gesturetype_input_error());
    }
    
    // optional int32 used_batting_fullpower = 12;
    if (has_used_batting_fullpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_batting_fullpower());
    }
    
    // optional int32 batting_timing_judge = 13;
    if (has_batting_timing_judge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batting_timing_judge());
    }
    
    // optional int32 batting_hittype = 14;
    if (has_batting_hittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batting_hittype());
    }
    
    // optional int64 uid_attack = 15;
    if (has_uid_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid_attack());
    }
    
    // optional int32 score = 16;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 base_runner_state = 17;
    if (has_base_runner_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_runner_state());
    }
    
    // optional int32 hit_type = 18;
    if (has_hit_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_tbl_roundresult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_tbl_roundresult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_tbl_roundresult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_tbl_roundresult::MergeFrom(const s_tbl_roundresult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_id()) {
      set_db_id(from.db_id());
    }
    if (from.has_grid()) {
      set_grid(from.grid());
    }
    if (from.has_used_batter_id()) {
      set_used_batter_id(from.used_batter_id());
    }
    if (from.has_used_pitcher_id()) {
      set_used_pitcher_id(from.used_pitcher_id());
    }
    if (from.has_round_number()) {
      set_round_number(from.round_number());
    }
    if (from.has_used_breakingball()) {
      set_used_breakingball(from.used_breakingball());
    }
    if (from.has_used_breakingball_speed()) {
      set_used_breakingball_speed(from.used_breakingball_speed());
    }
    if (from.has_used_pitcherability()) {
      set_used_pitcherability(from.used_pitcherability());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pitching_rhythm_judge()) {
      set_pitching_rhythm_judge(from.pitching_rhythm_judge());
    }
    if (from.has_used_gesturetype()) {
      set_used_gesturetype(from.used_gesturetype());
    }
    if (from.has_gesturetype_input_error()) {
      set_gesturetype_input_error(from.gesturetype_input_error());
    }
    if (from.has_used_batting_fullpower()) {
      set_used_batting_fullpower(from.used_batting_fullpower());
    }
    if (from.has_batting_timing_judge()) {
      set_batting_timing_judge(from.batting_timing_judge());
    }
    if (from.has_batting_hittype()) {
      set_batting_hittype(from.batting_hittype());
    }
    if (from.has_uid_attack()) {
      set_uid_attack(from.uid_attack());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_base_runner_state()) {
      set_base_runner_state(from.base_runner_state());
    }
    if (from.has_hit_type()) {
      set_hit_type(from.hit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_tbl_roundresult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_tbl_roundresult::CopyFrom(const s_tbl_roundresult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_tbl_roundresult::IsInitialized() const {
  
  return true;
}

void s_tbl_roundresult::Swap(s_tbl_roundresult* other) {
  if (other != this) {
    std::swap(db_id_, other->db_id_);
    std::swap(grid_, other->grid_);
    std::swap(used_batter_id_, other->used_batter_id_);
    std::swap(used_pitcher_id_, other->used_pitcher_id_);
    std::swap(round_number_, other->round_number_);
    std::swap(used_breakingball_, other->used_breakingball_);
    std::swap(used_breakingball_speed_, other->used_breakingball_speed_);
    std::swap(used_pitcherability_, other->used_pitcherability_);
    std::swap(pitching_rhythm_judge_, other->pitching_rhythm_judge_);
    std::swap(used_gesturetype_, other->used_gesturetype_);
    std::swap(gesturetype_input_error_, other->gesturetype_input_error_);
    std::swap(used_batting_fullpower_, other->used_batting_fullpower_);
    std::swap(batting_timing_judge_, other->batting_timing_judge_);
    std::swap(batting_hittype_, other->batting_hittype_);
    std::swap(uid_attack_, other->uid_attack_);
    std::swap(score_, other->score_);
    std::swap(base_runner_state_, other->base_runner_state_);
    std::swap(hit_type_, other->hit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_tbl_roundresult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_tbl_roundresult_descriptor_;
  metadata.reflection = s_tbl_roundresult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_tbl_user::kDbIdFieldNumber;
const int s_tbl_user::kPpIdFieldNumber;
const int s_tbl_user::kHostTypeFieldNumber;
const int s_tbl_user::kUnameFieldNumber;
const int s_tbl_user::kDisconTotFieldNumber;
const int s_tbl_user::kWinTotFieldNumber;
const int s_tbl_user::kWinTotContinueFieldNumber;
const int s_tbl_user::kWinTotContinueMaxFieldNumber;
const int s_tbl_user::kLoseTotFieldNumber;
const int s_tbl_user::kWinSeasonFieldNumber;
const int s_tbl_user::kLoseSeasonFieldNumber;
const int s_tbl_user::kBatterTotHomerunFieldNumber;
const int s_tbl_user::kPitcherTotStrikeoutFieldNumber;
const int s_tbl_user::kBatterTotHomerunSeasonFieldNumber;
const int s_tbl_user::kPitcherTotStrikeoutSeasonFieldNumber;
const int s_tbl_user::kEloPointFieldNumber;
const int s_tbl_user::kCashItemBuyMoneyAmountFieldNumber;
const int s_tbl_user::kTimeLastLoginFieldNumber;
const int s_tbl_user::kTimeLastLogoutFieldNumber;
const int s_tbl_user::kDayContinueAttendFieldNumber;
const int s_tbl_user::kClientOsFieldNumber;
const int s_tbl_user::kClientNetworFieldNumber;
const int s_tbl_user::kPlaytimeTotFieldNumber;
#endif  // !_MSC_VER

s_tbl_user::s_tbl_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_tbl_user::InitAsDefaultInstance() {
}

s_tbl_user::s_tbl_user(const s_tbl_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_tbl_user::SharedCtor() {
  _cached_size_ = 0;
  db_id_ = GOOGLE_LONGLONG(0);
  pp_id_ = GOOGLE_LONGLONG(0);
  host_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  discon_tot_ = 0;
  win_tot_ = 0;
  win_tot_continue_ = 0;
  win_tot_continue_max_ = 0;
  lose_tot_ = 0;
  win_season_ = 0;
  lose_season_ = 0;
  batter_tot_homerun_ = 0;
  pitcher_tot_strikeout_ = 0;
  batter_tot_homerun_season_ = 0;
  pitcher_tot_strikeout_season_ = 0;
  elo_point_ = 0;
  cash_item_buy_money_amount_ = GOOGLE_LONGLONG(0);
  time_last_login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_last_logout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  day_continue_attend_ = 0;
  client_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_networ_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playtime_tot_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_tbl_user::~s_tbl_user() {
  SharedDtor();
}

void s_tbl_user::SharedDtor() {
  if (host_type_ != &::google::protobuf::internal::kEmptyString) {
    delete host_type_;
  }
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    delete uname_;
  }
  if (time_last_login_ != &::google::protobuf::internal::kEmptyString) {
    delete time_last_login_;
  }
  if (time_last_logout_ != &::google::protobuf::internal::kEmptyString) {
    delete time_last_logout_;
  }
  if (client_os_ != &::google::protobuf::internal::kEmptyString) {
    delete client_os_;
  }
  if (client_networ_ != &::google::protobuf::internal::kEmptyString) {
    delete client_networ_;
  }
  if (this != default_instance_) {
  }
}

void s_tbl_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_tbl_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_tbl_user_descriptor_;
}

const s_tbl_user& s_tbl_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();  return *default_instance_;
}

s_tbl_user* s_tbl_user::default_instance_ = NULL;

s_tbl_user* s_tbl_user::New() const {
  return new s_tbl_user;
}

void s_tbl_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_id_ = GOOGLE_LONGLONG(0);
    pp_id_ = GOOGLE_LONGLONG(0);
    if (has_host_type()) {
      if (host_type_ != &::google::protobuf::internal::kEmptyString) {
        host_type_->clear();
      }
    }
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::kEmptyString) {
        uname_->clear();
      }
    }
    discon_tot_ = 0;
    win_tot_ = 0;
    win_tot_continue_ = 0;
    win_tot_continue_max_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lose_tot_ = 0;
    win_season_ = 0;
    lose_season_ = 0;
    batter_tot_homerun_ = 0;
    pitcher_tot_strikeout_ = 0;
    batter_tot_homerun_season_ = 0;
    pitcher_tot_strikeout_season_ = 0;
    elo_point_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cash_item_buy_money_amount_ = GOOGLE_LONGLONG(0);
    if (has_time_last_login()) {
      if (time_last_login_ != &::google::protobuf::internal::kEmptyString) {
        time_last_login_->clear();
      }
    }
    if (has_time_last_logout()) {
      if (time_last_logout_ != &::google::protobuf::internal::kEmptyString) {
        time_last_logout_->clear();
      }
    }
    day_continue_attend_ = 0;
    if (has_client_os()) {
      if (client_os_ != &::google::protobuf::internal::kEmptyString) {
        client_os_->clear();
      }
    }
    if (has_client_networ()) {
      if (client_networ_ != &::google::protobuf::internal::kEmptyString) {
        client_networ_->clear();
      }
    }
    playtime_tot_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_tbl_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 db_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &db_id_)));
          set_has_db_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pp_id;
        break;
      }
      
      // optional int64 pp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pp_id_)));
          set_has_pp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_host_type;
        break;
      }
      
      // optional string host_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_type().data(), this->host_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uname;
        break;
      }
      
      // optional string uname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_discon_tot;
        break;
      }
      
      // optional int32 discon_tot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discon_tot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discon_tot_)));
          set_has_discon_tot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_tot;
        break;
      }
      
      // optional int32 win_tot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_tot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_tot_)));
          set_has_win_tot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_win_tot_continue;
        break;
      }
      
      // optional int32 win_tot_continue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_tot_continue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_tot_continue_)));
          set_has_win_tot_continue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_win_tot_continue_max;
        break;
      }
      
      // optional int32 win_tot_continue_max = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_tot_continue_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_tot_continue_max_)));
          set_has_win_tot_continue_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lose_tot;
        break;
      }
      
      // optional int32 lose_tot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_tot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_tot_)));
          set_has_lose_tot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_win_season;
        break;
      }
      
      // optional int32 win_season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_season_)));
          set_has_win_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lose_season;
        break;
      }
      
      // optional int32 lose_season = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_season_)));
          set_has_lose_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_batter_tot_homerun;
        break;
      }
      
      // optional int32 batter_tot_homerun = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter_tot_homerun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batter_tot_homerun_)));
          set_has_batter_tot_homerun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pitcher_tot_strikeout;
        break;
      }
      
      // optional int32 pitcher_tot_strikeout = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_tot_strikeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_tot_strikeout_)));
          set_has_pitcher_tot_strikeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_batter_tot_homerun_season;
        break;
      }
      
      // optional int32 batter_tot_homerun_season = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter_tot_homerun_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batter_tot_homerun_season_)));
          set_has_batter_tot_homerun_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pitcher_tot_strikeout_season;
        break;
      }
      
      // optional int32 pitcher_tot_strikeout_season = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_tot_strikeout_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_tot_strikeout_season_)));
          set_has_pitcher_tot_strikeout_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_elo_point;
        break;
      }
      
      // optional int32 elo_point = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elo_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elo_point_)));
          set_has_elo_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cash_item_buy_money_amount;
        break;
      }
      
      // optional int64 cash_item_buy_money_amount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash_item_buy_money_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cash_item_buy_money_amount_)));
          set_has_cash_item_buy_money_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_time_last_login;
        break;
      }
      
      // optional string time_last_login = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_last_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_last_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_last_login().data(), this->time_last_login().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_time_last_logout;
        break;
      }
      
      // optional string time_last_logout = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_last_logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_last_logout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_last_logout().data(), this->time_last_logout().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_day_continue_attend;
        break;
      }
      
      // optional int32 day_continue_attend = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_continue_attend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_continue_attend_)));
          set_has_day_continue_attend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_client_os;
        break;
      }
      
      // optional string client_os = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_os().data(), this->client_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_client_networ;
        break;
      }
      
      // optional string client_networ = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_networ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_networ()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_networ().data(), this->client_networ().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_playtime_tot;
        break;
      }
      
      // optional int64 playtime_tot = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playtime_tot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playtime_tot_)));
          set_has_playtime_tot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_tbl_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 db_id = 1;
  if (has_db_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->db_id(), output);
  }
  
  // optional int64 pp_id = 2;
  if (has_pp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pp_id(), output);
  }
  
  // optional string host_type = 3;
  if (has_host_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_type().data(), this->host_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->host_type(), output);
  }
  
  // optional string uname = 4;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uname(), output);
  }
  
  // optional int32 discon_tot = 5;
  if (has_discon_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->discon_tot(), output);
  }
  
  // optional int32 win_tot = 6;
  if (has_win_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_tot(), output);
  }
  
  // optional int32 win_tot_continue = 7;
  if (has_win_tot_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->win_tot_continue(), output);
  }
  
  // optional int32 win_tot_continue_max = 8;
  if (has_win_tot_continue_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->win_tot_continue_max(), output);
  }
  
  // optional int32 lose_tot = 9;
  if (has_lose_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lose_tot(), output);
  }
  
  // optional int32 win_season = 10;
  if (has_win_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->win_season(), output);
  }
  
  // optional int32 lose_season = 11;
  if (has_lose_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lose_season(), output);
  }
  
  // optional int32 batter_tot_homerun = 12;
  if (has_batter_tot_homerun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->batter_tot_homerun(), output);
  }
  
  // optional int32 pitcher_tot_strikeout = 13;
  if (has_pitcher_tot_strikeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pitcher_tot_strikeout(), output);
  }
  
  // optional int32 batter_tot_homerun_season = 14;
  if (has_batter_tot_homerun_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->batter_tot_homerun_season(), output);
  }
  
  // optional int32 pitcher_tot_strikeout_season = 15;
  if (has_pitcher_tot_strikeout_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pitcher_tot_strikeout_season(), output);
  }
  
  // optional int32 elo_point = 16;
  if (has_elo_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->elo_point(), output);
  }
  
  // optional int64 cash_item_buy_money_amount = 17;
  if (has_cash_item_buy_money_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->cash_item_buy_money_amount(), output);
  }
  
  // optional string time_last_login = 18;
  if (has_time_last_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_last_login().data(), this->time_last_login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->time_last_login(), output);
  }
  
  // optional string time_last_logout = 19;
  if (has_time_last_logout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_last_logout().data(), this->time_last_logout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->time_last_logout(), output);
  }
  
  // optional int32 day_continue_attend = 20;
  if (has_day_continue_attend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->day_continue_attend(), output);
  }
  
  // optional string client_os = 21;
  if (has_client_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_os().data(), this->client_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->client_os(), output);
  }
  
  // optional string client_networ = 22;
  if (has_client_networ()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_networ().data(), this->client_networ().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->client_networ(), output);
  }
  
  // optional int64 playtime_tot = 23;
  if (has_playtime_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->playtime_tot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_tbl_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 db_id = 1;
  if (has_db_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->db_id(), target);
  }
  
  // optional int64 pp_id = 2;
  if (has_pp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pp_id(), target);
  }
  
  // optional string host_type = 3;
  if (has_host_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_type().data(), this->host_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host_type(), target);
  }
  
  // optional string uname = 4;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uname(), target);
  }
  
  // optional int32 discon_tot = 5;
  if (has_discon_tot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->discon_tot(), target);
  }
  
  // optional int32 win_tot = 6;
  if (has_win_tot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_tot(), target);
  }
  
  // optional int32 win_tot_continue = 7;
  if (has_win_tot_continue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->win_tot_continue(), target);
  }
  
  // optional int32 win_tot_continue_max = 8;
  if (has_win_tot_continue_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->win_tot_continue_max(), target);
  }
  
  // optional int32 lose_tot = 9;
  if (has_lose_tot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lose_tot(), target);
  }
  
  // optional int32 win_season = 10;
  if (has_win_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->win_season(), target);
  }
  
  // optional int32 lose_season = 11;
  if (has_lose_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lose_season(), target);
  }
  
  // optional int32 batter_tot_homerun = 12;
  if (has_batter_tot_homerun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->batter_tot_homerun(), target);
  }
  
  // optional int32 pitcher_tot_strikeout = 13;
  if (has_pitcher_tot_strikeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pitcher_tot_strikeout(), target);
  }
  
  // optional int32 batter_tot_homerun_season = 14;
  if (has_batter_tot_homerun_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->batter_tot_homerun_season(), target);
  }
  
  // optional int32 pitcher_tot_strikeout_season = 15;
  if (has_pitcher_tot_strikeout_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pitcher_tot_strikeout_season(), target);
  }
  
  // optional int32 elo_point = 16;
  if (has_elo_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->elo_point(), target);
  }
  
  // optional int64 cash_item_buy_money_amount = 17;
  if (has_cash_item_buy_money_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->cash_item_buy_money_amount(), target);
  }
  
  // optional string time_last_login = 18;
  if (has_time_last_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_last_login().data(), this->time_last_login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->time_last_login(), target);
  }
  
  // optional string time_last_logout = 19;
  if (has_time_last_logout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_last_logout().data(), this->time_last_logout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->time_last_logout(), target);
  }
  
  // optional int32 day_continue_attend = 20;
  if (has_day_continue_attend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->day_continue_attend(), target);
  }
  
  // optional string client_os = 21;
  if (has_client_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_os().data(), this->client_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->client_os(), target);
  }
  
  // optional string client_networ = 22;
  if (has_client_networ()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_networ().data(), this->client_networ().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->client_networ(), target);
  }
  
  // optional int64 playtime_tot = 23;
  if (has_playtime_tot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->playtime_tot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_tbl_user::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 db_id = 1;
    if (has_db_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->db_id());
    }
    
    // optional int64 pp_id = 2;
    if (has_pp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pp_id());
    }
    
    // optional string host_type = 3;
    if (has_host_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_type());
    }
    
    // optional string uname = 4;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }
    
    // optional int32 discon_tot = 5;
    if (has_discon_tot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discon_tot());
    }
    
    // optional int32 win_tot = 6;
    if (has_win_tot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_tot());
    }
    
    // optional int32 win_tot_continue = 7;
    if (has_win_tot_continue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_tot_continue());
    }
    
    // optional int32 win_tot_continue_max = 8;
    if (has_win_tot_continue_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_tot_continue_max());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lose_tot = 9;
    if (has_lose_tot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_tot());
    }
    
    // optional int32 win_season = 10;
    if (has_win_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_season());
    }
    
    // optional int32 lose_season = 11;
    if (has_lose_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_season());
    }
    
    // optional int32 batter_tot_homerun = 12;
    if (has_batter_tot_homerun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batter_tot_homerun());
    }
    
    // optional int32 pitcher_tot_strikeout = 13;
    if (has_pitcher_tot_strikeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_tot_strikeout());
    }
    
    // optional int32 batter_tot_homerun_season = 14;
    if (has_batter_tot_homerun_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batter_tot_homerun_season());
    }
    
    // optional int32 pitcher_tot_strikeout_season = 15;
    if (has_pitcher_tot_strikeout_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_tot_strikeout_season());
    }
    
    // optional int32 elo_point = 16;
    if (has_elo_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elo_point());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 cash_item_buy_money_amount = 17;
    if (has_cash_item_buy_money_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cash_item_buy_money_amount());
    }
    
    // optional string time_last_login = 18;
    if (has_time_last_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_last_login());
    }
    
    // optional string time_last_logout = 19;
    if (has_time_last_logout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_last_logout());
    }
    
    // optional int32 day_continue_attend = 20;
    if (has_day_continue_attend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_continue_attend());
    }
    
    // optional string client_os = 21;
    if (has_client_os()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_os());
    }
    
    // optional string client_networ = 22;
    if (has_client_networ()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_networ());
    }
    
    // optional int64 playtime_tot = 23;
    if (has_playtime_tot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playtime_tot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_tbl_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_tbl_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_tbl_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_tbl_user::MergeFrom(const s_tbl_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_id()) {
      set_db_id(from.db_id());
    }
    if (from.has_pp_id()) {
      set_pp_id(from.pp_id());
    }
    if (from.has_host_type()) {
      set_host_type(from.host_type());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_discon_tot()) {
      set_discon_tot(from.discon_tot());
    }
    if (from.has_win_tot()) {
      set_win_tot(from.win_tot());
    }
    if (from.has_win_tot_continue()) {
      set_win_tot_continue(from.win_tot_continue());
    }
    if (from.has_win_tot_continue_max()) {
      set_win_tot_continue_max(from.win_tot_continue_max());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lose_tot()) {
      set_lose_tot(from.lose_tot());
    }
    if (from.has_win_season()) {
      set_win_season(from.win_season());
    }
    if (from.has_lose_season()) {
      set_lose_season(from.lose_season());
    }
    if (from.has_batter_tot_homerun()) {
      set_batter_tot_homerun(from.batter_tot_homerun());
    }
    if (from.has_pitcher_tot_strikeout()) {
      set_pitcher_tot_strikeout(from.pitcher_tot_strikeout());
    }
    if (from.has_batter_tot_homerun_season()) {
      set_batter_tot_homerun_season(from.batter_tot_homerun_season());
    }
    if (from.has_pitcher_tot_strikeout_season()) {
      set_pitcher_tot_strikeout_season(from.pitcher_tot_strikeout_season());
    }
    if (from.has_elo_point()) {
      set_elo_point(from.elo_point());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cash_item_buy_money_amount()) {
      set_cash_item_buy_money_amount(from.cash_item_buy_money_amount());
    }
    if (from.has_time_last_login()) {
      set_time_last_login(from.time_last_login());
    }
    if (from.has_time_last_logout()) {
      set_time_last_logout(from.time_last_logout());
    }
    if (from.has_day_continue_attend()) {
      set_day_continue_attend(from.day_continue_attend());
    }
    if (from.has_client_os()) {
      set_client_os(from.client_os());
    }
    if (from.has_client_networ()) {
      set_client_networ(from.client_networ());
    }
    if (from.has_playtime_tot()) {
      set_playtime_tot(from.playtime_tot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_tbl_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_tbl_user::CopyFrom(const s_tbl_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_tbl_user::IsInitialized() const {
  
  return true;
}

void s_tbl_user::Swap(s_tbl_user* other) {
  if (other != this) {
    std::swap(db_id_, other->db_id_);
    std::swap(pp_id_, other->pp_id_);
    std::swap(host_type_, other->host_type_);
    std::swap(uname_, other->uname_);
    std::swap(discon_tot_, other->discon_tot_);
    std::swap(win_tot_, other->win_tot_);
    std::swap(win_tot_continue_, other->win_tot_continue_);
    std::swap(win_tot_continue_max_, other->win_tot_continue_max_);
    std::swap(lose_tot_, other->lose_tot_);
    std::swap(win_season_, other->win_season_);
    std::swap(lose_season_, other->lose_season_);
    std::swap(batter_tot_homerun_, other->batter_tot_homerun_);
    std::swap(pitcher_tot_strikeout_, other->pitcher_tot_strikeout_);
    std::swap(batter_tot_homerun_season_, other->batter_tot_homerun_season_);
    std::swap(pitcher_tot_strikeout_season_, other->pitcher_tot_strikeout_season_);
    std::swap(elo_point_, other->elo_point_);
    std::swap(cash_item_buy_money_amount_, other->cash_item_buy_money_amount_);
    std::swap(time_last_login_, other->time_last_login_);
    std::swap(time_last_logout_, other->time_last_logout_);
    std::swap(day_continue_attend_, other->day_continue_attend_);
    std::swap(client_os_, other->client_os_);
    std::swap(client_networ_, other->client_networ_);
    std::swap(playtime_tot_, other->playtime_tot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_tbl_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_tbl_user_descriptor_;
  metadata.reflection = s_tbl_user_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
