// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: excel_baseball_table_db.proto

#ifndef PROTOBUF_excel_5fbaseball_5ftable_5fdb_2eproto__INCLUDED
#define PROTOBUF_excel_5fbaseball_5ftable_5fdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
void protobuf_AssignDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
void protobuf_ShutdownFile_excel_5fbaseball_5ftable_5fdb_2eproto();

class s_tbl_quest;
class s_tbl_result;
class s_tbl_roundresult;
class s_tbl_user;

// ===================================================================

class s_tbl_quest : public ::google::protobuf::Message {
 public:
  s_tbl_quest();
  virtual ~s_tbl_quest();
  
  s_tbl_quest(const s_tbl_quest& from);
  
  inline s_tbl_quest& operator=(const s_tbl_quest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_tbl_quest& default_instance();
  
  void Swap(s_tbl_quest* other);
  
  // implements Message ----------------------------------------------
  
  s_tbl_quest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_tbl_quest& from);
  void MergeFrom(const s_tbl_quest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 db_id = 1;
  inline bool has_db_id() const;
  inline void clear_db_id();
  static const int kDbIdFieldNumber = 1;
  inline ::google::protobuf::int64 db_id() const;
  inline void set_db_id(::google::protobuf::int64 value);
  
  // optional int32 quest_sid = 2;
  inline bool has_quest_sid() const;
  inline void clear_quest_sid();
  static const int kQuestSidFieldNumber = 2;
  inline ::google::protobuf::int32 quest_sid() const;
  inline void set_quest_sid(::google::protobuf::int32 value);
  
  // optional int64 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional string date_insert = 4;
  inline bool has_date_insert() const;
  inline void clear_date_insert();
  static const int kDateInsertFieldNumber = 4;
  inline const ::std::string& date_insert() const;
  inline void set_date_insert(const ::std::string& value);
  inline void set_date_insert(const char* value);
  inline void set_date_insert(const char* value, size_t size);
  inline ::std::string* mutable_date_insert();
  inline ::std::string* release_date_insert();
  
  // optional string date_done = 5;
  inline bool has_date_done() const;
  inline void clear_date_done();
  static const int kDateDoneFieldNumber = 5;
  inline const ::std::string& date_done() const;
  inline void set_date_done(const ::std::string& value);
  inline void set_date_done(const char* value);
  inline void set_date_done(const char* value, size_t size);
  inline ::std::string* mutable_date_done();
  inline ::std::string* release_date_done();
  
  // optional string info = 6;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // optional int32 done_count = 7;
  inline bool has_done_count() const;
  inline void clear_done_count();
  static const int kDoneCountFieldNumber = 7;
  inline ::google::protobuf::int32 done_count() const;
  inline void set_done_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_tbl_quest)
 private:
  inline void set_has_db_id();
  inline void clear_has_db_id();
  inline void set_has_quest_sid();
  inline void clear_has_quest_sid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_date_insert();
  inline void clear_has_date_insert();
  inline void set_has_date_done();
  inline void clear_has_date_done();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_done_count();
  inline void clear_has_done_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 db_id_;
  ::google::protobuf::int64 uid_;
  ::std::string* date_insert_;
  ::google::protobuf::int32 quest_sid_;
  ::google::protobuf::int32 done_count_;
  ::std::string* date_done_;
  ::std::string* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_5fdb_2eproto();
  
  void InitAsDefaultInstance();
  static s_tbl_quest* default_instance_;
};
// -------------------------------------------------------------------

class s_tbl_result : public ::google::protobuf::Message {
 public:
  s_tbl_result();
  virtual ~s_tbl_result();
  
  s_tbl_result(const s_tbl_result& from);
  
  inline s_tbl_result& operator=(const s_tbl_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_tbl_result& default_instance();
  
  void Swap(s_tbl_result* other);
  
  // implements Message ----------------------------------------------
  
  s_tbl_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_tbl_result& from);
  void MergeFrom(const s_tbl_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 db_id = 1;
  inline bool has_db_id() const;
  inline void clear_db_id();
  static const int kDbIdFieldNumber = 1;
  inline ::google::protobuf::int64 db_id() const;
  inline void set_db_id(::google::protobuf::int64 value);
  
  // optional int64 win_uid = 2;
  inline bool has_win_uid() const;
  inline void clear_win_uid();
  static const int kWinUidFieldNumber = 2;
  inline ::google::protobuf::int64 win_uid() const;
  inline void set_win_uid(::google::protobuf::int64 value);
  
  // optional int64 win_better = 3;
  inline bool has_win_better() const;
  inline void clear_win_better();
  static const int kWinBetterFieldNumber = 3;
  inline ::google::protobuf::int64 win_better() const;
  inline void set_win_better(::google::protobuf::int64 value);
  
  // optional int64 win_pitcher = 4;
  inline bool has_win_pitcher() const;
  inline void clear_win_pitcher();
  static const int kWinPitcherFieldNumber = 4;
  inline ::google::protobuf::int64 win_pitcher() const;
  inline void set_win_pitcher(::google::protobuf::int64 value);
  
  // optional int32 win_score = 5;
  inline bool has_win_score() const;
  inline void clear_win_score();
  static const int kWinScoreFieldNumber = 5;
  inline ::google::protobuf::int32 win_score() const;
  inline void set_win_score(::google::protobuf::int32 value);
  
  // optional int32 win_elo_point = 6;
  inline bool has_win_elo_point() const;
  inline void clear_win_elo_point();
  static const int kWinEloPointFieldNumber = 6;
  inline ::google::protobuf::int32 win_elo_point() const;
  inline void set_win_elo_point(::google::protobuf::int32 value);
  
  // optional int64 lose_uid = 7;
  inline bool has_lose_uid() const;
  inline void clear_lose_uid();
  static const int kLoseUidFieldNumber = 7;
  inline ::google::protobuf::int64 lose_uid() const;
  inline void set_lose_uid(::google::protobuf::int64 value);
  
  // optional int64 lose_better = 8;
  inline bool has_lose_better() const;
  inline void clear_lose_better();
  static const int kLoseBetterFieldNumber = 8;
  inline ::google::protobuf::int64 lose_better() const;
  inline void set_lose_better(::google::protobuf::int64 value);
  
  // optional int64 lose_pitcher = 9;
  inline bool has_lose_pitcher() const;
  inline void clear_lose_pitcher();
  static const int kLosePitcherFieldNumber = 9;
  inline ::google::protobuf::int64 lose_pitcher() const;
  inline void set_lose_pitcher(::google::protobuf::int64 value);
  
  // optional int32 lose_score = 10;
  inline bool has_lose_score() const;
  inline void clear_lose_score();
  static const int kLoseScoreFieldNumber = 10;
  inline ::google::protobuf::int32 lose_score() const;
  inline void set_lose_score(::google::protobuf::int32 value);
  
  // optional int32 lose_elo_point = 11;
  inline bool has_lose_elo_point() const;
  inline void clear_lose_elo_point();
  static const int kLoseEloPointFieldNumber = 11;
  inline ::google::protobuf::int32 lose_elo_point() const;
  inline void set_lose_elo_point(::google::protobuf::int32 value);
  
  // optional int32 play_time_sec = 12;
  inline bool has_play_time_sec() const;
  inline void clear_play_time_sec();
  static const int kPlayTimeSecFieldNumber = 12;
  inline ::google::protobuf::int32 play_time_sec() const;
  inline void set_play_time_sec(::google::protobuf::int32 value);
  
  // optional string time_end = 13;
  inline bool has_time_end() const;
  inline void clear_time_end();
  static const int kTimeEndFieldNumber = 13;
  inline const ::std::string& time_end() const;
  inline void set_time_end(const ::std::string& value);
  inline void set_time_end(const char* value);
  inline void set_time_end(const char* value, size_t size);
  inline ::std::string* mutable_time_end();
  inline ::std::string* release_time_end();
  
  // @@protoc_insertion_point(class_scope:s_tbl_result)
 private:
  inline void set_has_db_id();
  inline void clear_has_db_id();
  inline void set_has_win_uid();
  inline void clear_has_win_uid();
  inline void set_has_win_better();
  inline void clear_has_win_better();
  inline void set_has_win_pitcher();
  inline void clear_has_win_pitcher();
  inline void set_has_win_score();
  inline void clear_has_win_score();
  inline void set_has_win_elo_point();
  inline void clear_has_win_elo_point();
  inline void set_has_lose_uid();
  inline void clear_has_lose_uid();
  inline void set_has_lose_better();
  inline void clear_has_lose_better();
  inline void set_has_lose_pitcher();
  inline void clear_has_lose_pitcher();
  inline void set_has_lose_score();
  inline void clear_has_lose_score();
  inline void set_has_lose_elo_point();
  inline void clear_has_lose_elo_point();
  inline void set_has_play_time_sec();
  inline void clear_has_play_time_sec();
  inline void set_has_time_end();
  inline void clear_has_time_end();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 db_id_;
  ::google::protobuf::int64 win_uid_;
  ::google::protobuf::int64 win_better_;
  ::google::protobuf::int64 win_pitcher_;
  ::google::protobuf::int32 win_score_;
  ::google::protobuf::int32 win_elo_point_;
  ::google::protobuf::int64 lose_uid_;
  ::google::protobuf::int64 lose_better_;
  ::google::protobuf::int64 lose_pitcher_;
  ::google::protobuf::int32 lose_score_;
  ::google::protobuf::int32 lose_elo_point_;
  ::std::string* time_end_;
  ::google::protobuf::int32 play_time_sec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_5fdb_2eproto();
  
  void InitAsDefaultInstance();
  static s_tbl_result* default_instance_;
};
// -------------------------------------------------------------------

class s_tbl_roundresult : public ::google::protobuf::Message {
 public:
  s_tbl_roundresult();
  virtual ~s_tbl_roundresult();
  
  s_tbl_roundresult(const s_tbl_roundresult& from);
  
  inline s_tbl_roundresult& operator=(const s_tbl_roundresult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_tbl_roundresult& default_instance();
  
  void Swap(s_tbl_roundresult* other);
  
  // implements Message ----------------------------------------------
  
  s_tbl_roundresult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_tbl_roundresult& from);
  void MergeFrom(const s_tbl_roundresult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 db_id = 1;
  inline bool has_db_id() const;
  inline void clear_db_id();
  static const int kDbIdFieldNumber = 1;
  inline ::google::protobuf::int64 db_id() const;
  inline void set_db_id(::google::protobuf::int64 value);
  
  // optional int64 grid = 2;
  inline bool has_grid() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 2;
  inline ::google::protobuf::int64 grid() const;
  inline void set_grid(::google::protobuf::int64 value);
  
  // optional int32 used_batter_id = 3;
  inline bool has_used_batter_id() const;
  inline void clear_used_batter_id();
  static const int kUsedBatterIdFieldNumber = 3;
  inline ::google::protobuf::int32 used_batter_id() const;
  inline void set_used_batter_id(::google::protobuf::int32 value);
  
  // optional int32 used_pitcher_id = 4;
  inline bool has_used_pitcher_id() const;
  inline void clear_used_pitcher_id();
  static const int kUsedPitcherIdFieldNumber = 4;
  inline ::google::protobuf::int32 used_pitcher_id() const;
  inline void set_used_pitcher_id(::google::protobuf::int32 value);
  
  // optional int32 round_number = 5;
  inline bool has_round_number() const;
  inline void clear_round_number();
  static const int kRoundNumberFieldNumber = 5;
  inline ::google::protobuf::int32 round_number() const;
  inline void set_round_number(::google::protobuf::int32 value);
  
  // optional int32 used_breakingball = 6;
  inline bool has_used_breakingball() const;
  inline void clear_used_breakingball();
  static const int kUsedBreakingballFieldNumber = 6;
  inline ::google::protobuf::int32 used_breakingball() const;
  inline void set_used_breakingball(::google::protobuf::int32 value);
  
  // optional int32 used_breakingball_speed = 7;
  inline bool has_used_breakingball_speed() const;
  inline void clear_used_breakingball_speed();
  static const int kUsedBreakingballSpeedFieldNumber = 7;
  inline ::google::protobuf::int32 used_breakingball_speed() const;
  inline void set_used_breakingball_speed(::google::protobuf::int32 value);
  
  // optional int32 used_pitcherability = 8;
  inline bool has_used_pitcherability() const;
  inline void clear_used_pitcherability();
  static const int kUsedPitcherabilityFieldNumber = 8;
  inline ::google::protobuf::int32 used_pitcherability() const;
  inline void set_used_pitcherability(::google::protobuf::int32 value);
  
  // optional int32 pitching_rhythm_judge = 9;
  inline bool has_pitching_rhythm_judge() const;
  inline void clear_pitching_rhythm_judge();
  static const int kPitchingRhythmJudgeFieldNumber = 9;
  inline ::google::protobuf::int32 pitching_rhythm_judge() const;
  inline void set_pitching_rhythm_judge(::google::protobuf::int32 value);
  
  // optional int32 used_gesturetype = 10;
  inline bool has_used_gesturetype() const;
  inline void clear_used_gesturetype();
  static const int kUsedGesturetypeFieldNumber = 10;
  inline ::google::protobuf::int32 used_gesturetype() const;
  inline void set_used_gesturetype(::google::protobuf::int32 value);
  
  // optional int32 gesturetype_input_error = 11;
  inline bool has_gesturetype_input_error() const;
  inline void clear_gesturetype_input_error();
  static const int kGesturetypeInputErrorFieldNumber = 11;
  inline ::google::protobuf::int32 gesturetype_input_error() const;
  inline void set_gesturetype_input_error(::google::protobuf::int32 value);
  
  // optional int32 used_batting_fullpower = 12;
  inline bool has_used_batting_fullpower() const;
  inline void clear_used_batting_fullpower();
  static const int kUsedBattingFullpowerFieldNumber = 12;
  inline ::google::protobuf::int32 used_batting_fullpower() const;
  inline void set_used_batting_fullpower(::google::protobuf::int32 value);
  
  // optional int32 batting_timing_judge = 13;
  inline bool has_batting_timing_judge() const;
  inline void clear_batting_timing_judge();
  static const int kBattingTimingJudgeFieldNumber = 13;
  inline ::google::protobuf::int32 batting_timing_judge() const;
  inline void set_batting_timing_judge(::google::protobuf::int32 value);
  
  // optional int32 batting_hittype = 14;
  inline bool has_batting_hittype() const;
  inline void clear_batting_hittype();
  static const int kBattingHittypeFieldNumber = 14;
  inline ::google::protobuf::int32 batting_hittype() const;
  inline void set_batting_hittype(::google::protobuf::int32 value);
  
  // optional int64 uid_attack = 15;
  inline bool has_uid_attack() const;
  inline void clear_uid_attack();
  static const int kUidAttackFieldNumber = 15;
  inline ::google::protobuf::int64 uid_attack() const;
  inline void set_uid_attack(::google::protobuf::int64 value);
  
  // optional int32 score = 16;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 16;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 base_runner_state = 17;
  inline bool has_base_runner_state() const;
  inline void clear_base_runner_state();
  static const int kBaseRunnerStateFieldNumber = 17;
  inline ::google::protobuf::int32 base_runner_state() const;
  inline void set_base_runner_state(::google::protobuf::int32 value);
  
  // optional int32 hit_type = 18;
  inline bool has_hit_type() const;
  inline void clear_hit_type();
  static const int kHitTypeFieldNumber = 18;
  inline ::google::protobuf::int32 hit_type() const;
  inline void set_hit_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_tbl_roundresult)
 private:
  inline void set_has_db_id();
  inline void clear_has_db_id();
  inline void set_has_grid();
  inline void clear_has_grid();
  inline void set_has_used_batter_id();
  inline void clear_has_used_batter_id();
  inline void set_has_used_pitcher_id();
  inline void clear_has_used_pitcher_id();
  inline void set_has_round_number();
  inline void clear_has_round_number();
  inline void set_has_used_breakingball();
  inline void clear_has_used_breakingball();
  inline void set_has_used_breakingball_speed();
  inline void clear_has_used_breakingball_speed();
  inline void set_has_used_pitcherability();
  inline void clear_has_used_pitcherability();
  inline void set_has_pitching_rhythm_judge();
  inline void clear_has_pitching_rhythm_judge();
  inline void set_has_used_gesturetype();
  inline void clear_has_used_gesturetype();
  inline void set_has_gesturetype_input_error();
  inline void clear_has_gesturetype_input_error();
  inline void set_has_used_batting_fullpower();
  inline void clear_has_used_batting_fullpower();
  inline void set_has_batting_timing_judge();
  inline void clear_has_batting_timing_judge();
  inline void set_has_batting_hittype();
  inline void clear_has_batting_hittype();
  inline void set_has_uid_attack();
  inline void clear_has_uid_attack();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_base_runner_state();
  inline void clear_has_base_runner_state();
  inline void set_has_hit_type();
  inline void clear_has_hit_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 db_id_;
  ::google::protobuf::int64 grid_;
  ::google::protobuf::int32 used_batter_id_;
  ::google::protobuf::int32 used_pitcher_id_;
  ::google::protobuf::int32 round_number_;
  ::google::protobuf::int32 used_breakingball_;
  ::google::protobuf::int32 used_breakingball_speed_;
  ::google::protobuf::int32 used_pitcherability_;
  ::google::protobuf::int32 pitching_rhythm_judge_;
  ::google::protobuf::int32 used_gesturetype_;
  ::google::protobuf::int32 gesturetype_input_error_;
  ::google::protobuf::int32 used_batting_fullpower_;
  ::google::protobuf::int32 batting_timing_judge_;
  ::google::protobuf::int32 batting_hittype_;
  ::google::protobuf::int64 uid_attack_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 base_runner_state_;
  ::google::protobuf::int32 hit_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_5fdb_2eproto();
  
  void InitAsDefaultInstance();
  static s_tbl_roundresult* default_instance_;
};
// -------------------------------------------------------------------

class s_tbl_user : public ::google::protobuf::Message {
 public:
  s_tbl_user();
  virtual ~s_tbl_user();
  
  s_tbl_user(const s_tbl_user& from);
  
  inline s_tbl_user& operator=(const s_tbl_user& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_tbl_user& default_instance();
  
  void Swap(s_tbl_user* other);
  
  // implements Message ----------------------------------------------
  
  s_tbl_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_tbl_user& from);
  void MergeFrom(const s_tbl_user& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 db_id = 1;
  inline bool has_db_id() const;
  inline void clear_db_id();
  static const int kDbIdFieldNumber = 1;
  inline ::google::protobuf::int64 db_id() const;
  inline void set_db_id(::google::protobuf::int64 value);
  
  // optional int64 pp_id = 2;
  inline bool has_pp_id() const;
  inline void clear_pp_id();
  static const int kPpIdFieldNumber = 2;
  inline ::google::protobuf::int64 pp_id() const;
  inline void set_pp_id(::google::protobuf::int64 value);
  
  // optional string host_type = 3;
  inline bool has_host_type() const;
  inline void clear_host_type();
  static const int kHostTypeFieldNumber = 3;
  inline const ::std::string& host_type() const;
  inline void set_host_type(const ::std::string& value);
  inline void set_host_type(const char* value);
  inline void set_host_type(const char* value, size_t size);
  inline ::std::string* mutable_host_type();
  inline ::std::string* release_host_type();
  
  // optional string uname = 4;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 4;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  
  // optional int32 discon_tot = 5;
  inline bool has_discon_tot() const;
  inline void clear_discon_tot();
  static const int kDisconTotFieldNumber = 5;
  inline ::google::protobuf::int32 discon_tot() const;
  inline void set_discon_tot(::google::protobuf::int32 value);
  
  // optional int32 win_tot = 6;
  inline bool has_win_tot() const;
  inline void clear_win_tot();
  static const int kWinTotFieldNumber = 6;
  inline ::google::protobuf::int32 win_tot() const;
  inline void set_win_tot(::google::protobuf::int32 value);
  
  // optional int32 win_tot_continue = 7;
  inline bool has_win_tot_continue() const;
  inline void clear_win_tot_continue();
  static const int kWinTotContinueFieldNumber = 7;
  inline ::google::protobuf::int32 win_tot_continue() const;
  inline void set_win_tot_continue(::google::protobuf::int32 value);
  
  // optional int32 win_tot_continue_max = 8;
  inline bool has_win_tot_continue_max() const;
  inline void clear_win_tot_continue_max();
  static const int kWinTotContinueMaxFieldNumber = 8;
  inline ::google::protobuf::int32 win_tot_continue_max() const;
  inline void set_win_tot_continue_max(::google::protobuf::int32 value);
  
  // optional int32 lose_tot = 9;
  inline bool has_lose_tot() const;
  inline void clear_lose_tot();
  static const int kLoseTotFieldNumber = 9;
  inline ::google::protobuf::int32 lose_tot() const;
  inline void set_lose_tot(::google::protobuf::int32 value);
  
  // optional int32 win_season = 10;
  inline bool has_win_season() const;
  inline void clear_win_season();
  static const int kWinSeasonFieldNumber = 10;
  inline ::google::protobuf::int32 win_season() const;
  inline void set_win_season(::google::protobuf::int32 value);
  
  // optional int32 lose_season = 11;
  inline bool has_lose_season() const;
  inline void clear_lose_season();
  static const int kLoseSeasonFieldNumber = 11;
  inline ::google::protobuf::int32 lose_season() const;
  inline void set_lose_season(::google::protobuf::int32 value);
  
  // optional int32 batter_tot_homerun = 12;
  inline bool has_batter_tot_homerun() const;
  inline void clear_batter_tot_homerun();
  static const int kBatterTotHomerunFieldNumber = 12;
  inline ::google::protobuf::int32 batter_tot_homerun() const;
  inline void set_batter_tot_homerun(::google::protobuf::int32 value);
  
  // optional int32 pitcher_tot_strikeout = 13;
  inline bool has_pitcher_tot_strikeout() const;
  inline void clear_pitcher_tot_strikeout();
  static const int kPitcherTotStrikeoutFieldNumber = 13;
  inline ::google::protobuf::int32 pitcher_tot_strikeout() const;
  inline void set_pitcher_tot_strikeout(::google::protobuf::int32 value);
  
  // optional int32 batter_tot_homerun_season = 14;
  inline bool has_batter_tot_homerun_season() const;
  inline void clear_batter_tot_homerun_season();
  static const int kBatterTotHomerunSeasonFieldNumber = 14;
  inline ::google::protobuf::int32 batter_tot_homerun_season() const;
  inline void set_batter_tot_homerun_season(::google::protobuf::int32 value);
  
  // optional int32 pitcher_tot_strikeout_season = 15;
  inline bool has_pitcher_tot_strikeout_season() const;
  inline void clear_pitcher_tot_strikeout_season();
  static const int kPitcherTotStrikeoutSeasonFieldNumber = 15;
  inline ::google::protobuf::int32 pitcher_tot_strikeout_season() const;
  inline void set_pitcher_tot_strikeout_season(::google::protobuf::int32 value);
  
  // optional int32 elo_point = 16;
  inline bool has_elo_point() const;
  inline void clear_elo_point();
  static const int kEloPointFieldNumber = 16;
  inline ::google::protobuf::int32 elo_point() const;
  inline void set_elo_point(::google::protobuf::int32 value);
  
  // optional int64 cash_item_buy_money_amount = 17;
  inline bool has_cash_item_buy_money_amount() const;
  inline void clear_cash_item_buy_money_amount();
  static const int kCashItemBuyMoneyAmountFieldNumber = 17;
  inline ::google::protobuf::int64 cash_item_buy_money_amount() const;
  inline void set_cash_item_buy_money_amount(::google::protobuf::int64 value);
  
  // optional string time_last_login = 18;
  inline bool has_time_last_login() const;
  inline void clear_time_last_login();
  static const int kTimeLastLoginFieldNumber = 18;
  inline const ::std::string& time_last_login() const;
  inline void set_time_last_login(const ::std::string& value);
  inline void set_time_last_login(const char* value);
  inline void set_time_last_login(const char* value, size_t size);
  inline ::std::string* mutable_time_last_login();
  inline ::std::string* release_time_last_login();
  
  // optional string time_last_logout = 19;
  inline bool has_time_last_logout() const;
  inline void clear_time_last_logout();
  static const int kTimeLastLogoutFieldNumber = 19;
  inline const ::std::string& time_last_logout() const;
  inline void set_time_last_logout(const ::std::string& value);
  inline void set_time_last_logout(const char* value);
  inline void set_time_last_logout(const char* value, size_t size);
  inline ::std::string* mutable_time_last_logout();
  inline ::std::string* release_time_last_logout();
  
  // optional int32 day_continue_attend = 20;
  inline bool has_day_continue_attend() const;
  inline void clear_day_continue_attend();
  static const int kDayContinueAttendFieldNumber = 20;
  inline ::google::protobuf::int32 day_continue_attend() const;
  inline void set_day_continue_attend(::google::protobuf::int32 value);
  
  // optional string client_os = 21;
  inline bool has_client_os() const;
  inline void clear_client_os();
  static const int kClientOsFieldNumber = 21;
  inline const ::std::string& client_os() const;
  inline void set_client_os(const ::std::string& value);
  inline void set_client_os(const char* value);
  inline void set_client_os(const char* value, size_t size);
  inline ::std::string* mutable_client_os();
  inline ::std::string* release_client_os();
  
  // optional string client_networ = 22;
  inline bool has_client_networ() const;
  inline void clear_client_networ();
  static const int kClientNetworFieldNumber = 22;
  inline const ::std::string& client_networ() const;
  inline void set_client_networ(const ::std::string& value);
  inline void set_client_networ(const char* value);
  inline void set_client_networ(const char* value, size_t size);
  inline ::std::string* mutable_client_networ();
  inline ::std::string* release_client_networ();
  
  // optional int64 playtime_tot = 23;
  inline bool has_playtime_tot() const;
  inline void clear_playtime_tot();
  static const int kPlaytimeTotFieldNumber = 23;
  inline ::google::protobuf::int64 playtime_tot() const;
  inline void set_playtime_tot(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_tbl_user)
 private:
  inline void set_has_db_id();
  inline void clear_has_db_id();
  inline void set_has_pp_id();
  inline void clear_has_pp_id();
  inline void set_has_host_type();
  inline void clear_has_host_type();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_discon_tot();
  inline void clear_has_discon_tot();
  inline void set_has_win_tot();
  inline void clear_has_win_tot();
  inline void set_has_win_tot_continue();
  inline void clear_has_win_tot_continue();
  inline void set_has_win_tot_continue_max();
  inline void clear_has_win_tot_continue_max();
  inline void set_has_lose_tot();
  inline void clear_has_lose_tot();
  inline void set_has_win_season();
  inline void clear_has_win_season();
  inline void set_has_lose_season();
  inline void clear_has_lose_season();
  inline void set_has_batter_tot_homerun();
  inline void clear_has_batter_tot_homerun();
  inline void set_has_pitcher_tot_strikeout();
  inline void clear_has_pitcher_tot_strikeout();
  inline void set_has_batter_tot_homerun_season();
  inline void clear_has_batter_tot_homerun_season();
  inline void set_has_pitcher_tot_strikeout_season();
  inline void clear_has_pitcher_tot_strikeout_season();
  inline void set_has_elo_point();
  inline void clear_has_elo_point();
  inline void set_has_cash_item_buy_money_amount();
  inline void clear_has_cash_item_buy_money_amount();
  inline void set_has_time_last_login();
  inline void clear_has_time_last_login();
  inline void set_has_time_last_logout();
  inline void clear_has_time_last_logout();
  inline void set_has_day_continue_attend();
  inline void clear_has_day_continue_attend();
  inline void set_has_client_os();
  inline void clear_has_client_os();
  inline void set_has_client_networ();
  inline void clear_has_client_networ();
  inline void set_has_playtime_tot();
  inline void clear_has_playtime_tot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 db_id_;
  ::google::protobuf::int64 pp_id_;
  ::std::string* host_type_;
  ::std::string* uname_;
  ::google::protobuf::int32 discon_tot_;
  ::google::protobuf::int32 win_tot_;
  ::google::protobuf::int32 win_tot_continue_;
  ::google::protobuf::int32 win_tot_continue_max_;
  ::google::protobuf::int32 lose_tot_;
  ::google::protobuf::int32 win_season_;
  ::google::protobuf::int32 lose_season_;
  ::google::protobuf::int32 batter_tot_homerun_;
  ::google::protobuf::int32 pitcher_tot_strikeout_;
  ::google::protobuf::int32 batter_tot_homerun_season_;
  ::google::protobuf::int32 pitcher_tot_strikeout_season_;
  ::google::protobuf::int32 elo_point_;
  ::google::protobuf::int64 cash_item_buy_money_amount_;
  ::std::string* time_last_login_;
  ::std::string* time_last_logout_;
  ::std::string* client_os_;
  ::std::string* client_networ_;
  ::google::protobuf::int64 playtime_tot_;
  ::google::protobuf::int32 day_continue_attend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_5fdb_2eproto();
  
  void InitAsDefaultInstance();
  static s_tbl_user* default_instance_;
};
// ===================================================================


// ===================================================================

// s_tbl_quest

// optional int64 db_id = 1;
inline bool s_tbl_quest::has_db_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_tbl_quest::set_has_db_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_tbl_quest::clear_has_db_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_tbl_quest::clear_db_id() {
  db_id_ = GOOGLE_LONGLONG(0);
  clear_has_db_id();
}
inline ::google::protobuf::int64 s_tbl_quest::db_id() const {
  return db_id_;
}
inline void s_tbl_quest::set_db_id(::google::protobuf::int64 value) {
  set_has_db_id();
  db_id_ = value;
}

// optional int32 quest_sid = 2;
inline bool s_tbl_quest::has_quest_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_tbl_quest::set_has_quest_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_tbl_quest::clear_has_quest_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_tbl_quest::clear_quest_sid() {
  quest_sid_ = 0;
  clear_has_quest_sid();
}
inline ::google::protobuf::int32 s_tbl_quest::quest_sid() const {
  return quest_sid_;
}
inline void s_tbl_quest::set_quest_sid(::google::protobuf::int32 value) {
  set_has_quest_sid();
  quest_sid_ = value;
}

// optional int64 uid = 3;
inline bool s_tbl_quest::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_tbl_quest::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_tbl_quest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_tbl_quest::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_tbl_quest::uid() const {
  return uid_;
}
inline void s_tbl_quest::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string date_insert = 4;
inline bool s_tbl_quest::has_date_insert() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_tbl_quest::set_has_date_insert() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_tbl_quest::clear_has_date_insert() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_tbl_quest::clear_date_insert() {
  if (date_insert_ != &::google::protobuf::internal::kEmptyString) {
    date_insert_->clear();
  }
  clear_has_date_insert();
}
inline const ::std::string& s_tbl_quest::date_insert() const {
  return *date_insert_;
}
inline void s_tbl_quest::set_date_insert(const ::std::string& value) {
  set_has_date_insert();
  if (date_insert_ == &::google::protobuf::internal::kEmptyString) {
    date_insert_ = new ::std::string;
  }
  date_insert_->assign(value);
}
inline void s_tbl_quest::set_date_insert(const char* value) {
  set_has_date_insert();
  if (date_insert_ == &::google::protobuf::internal::kEmptyString) {
    date_insert_ = new ::std::string;
  }
  date_insert_->assign(value);
}
inline void s_tbl_quest::set_date_insert(const char* value, size_t size) {
  set_has_date_insert();
  if (date_insert_ == &::google::protobuf::internal::kEmptyString) {
    date_insert_ = new ::std::string;
  }
  date_insert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_quest::mutable_date_insert() {
  set_has_date_insert();
  if (date_insert_ == &::google::protobuf::internal::kEmptyString) {
    date_insert_ = new ::std::string;
  }
  return date_insert_;
}
inline ::std::string* s_tbl_quest::release_date_insert() {
  clear_has_date_insert();
  if (date_insert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_insert_;
    date_insert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string date_done = 5;
inline bool s_tbl_quest::has_date_done() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void s_tbl_quest::set_has_date_done() {
  _has_bits_[0] |= 0x00000010u;
}
inline void s_tbl_quest::clear_has_date_done() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void s_tbl_quest::clear_date_done() {
  if (date_done_ != &::google::protobuf::internal::kEmptyString) {
    date_done_->clear();
  }
  clear_has_date_done();
}
inline const ::std::string& s_tbl_quest::date_done() const {
  return *date_done_;
}
inline void s_tbl_quest::set_date_done(const ::std::string& value) {
  set_has_date_done();
  if (date_done_ == &::google::protobuf::internal::kEmptyString) {
    date_done_ = new ::std::string;
  }
  date_done_->assign(value);
}
inline void s_tbl_quest::set_date_done(const char* value) {
  set_has_date_done();
  if (date_done_ == &::google::protobuf::internal::kEmptyString) {
    date_done_ = new ::std::string;
  }
  date_done_->assign(value);
}
inline void s_tbl_quest::set_date_done(const char* value, size_t size) {
  set_has_date_done();
  if (date_done_ == &::google::protobuf::internal::kEmptyString) {
    date_done_ = new ::std::string;
  }
  date_done_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_quest::mutable_date_done() {
  set_has_date_done();
  if (date_done_ == &::google::protobuf::internal::kEmptyString) {
    date_done_ = new ::std::string;
  }
  return date_done_;
}
inline ::std::string* s_tbl_quest::release_date_done() {
  clear_has_date_done();
  if (date_done_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_done_;
    date_done_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string info = 6;
inline bool s_tbl_quest::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void s_tbl_quest::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void s_tbl_quest::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void s_tbl_quest::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& s_tbl_quest::info() const {
  return *info_;
}
inline void s_tbl_quest::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void s_tbl_quest::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void s_tbl_quest::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_quest::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* s_tbl_quest::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 done_count = 7;
inline bool s_tbl_quest::has_done_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void s_tbl_quest::set_has_done_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void s_tbl_quest::clear_has_done_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void s_tbl_quest::clear_done_count() {
  done_count_ = 0;
  clear_has_done_count();
}
inline ::google::protobuf::int32 s_tbl_quest::done_count() const {
  return done_count_;
}
inline void s_tbl_quest::set_done_count(::google::protobuf::int32 value) {
  set_has_done_count();
  done_count_ = value;
}

// -------------------------------------------------------------------

// s_tbl_result

// optional int64 db_id = 1;
inline bool s_tbl_result::has_db_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_tbl_result::set_has_db_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_tbl_result::clear_has_db_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_tbl_result::clear_db_id() {
  db_id_ = GOOGLE_LONGLONG(0);
  clear_has_db_id();
}
inline ::google::protobuf::int64 s_tbl_result::db_id() const {
  return db_id_;
}
inline void s_tbl_result::set_db_id(::google::protobuf::int64 value) {
  set_has_db_id();
  db_id_ = value;
}

// optional int64 win_uid = 2;
inline bool s_tbl_result::has_win_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_tbl_result::set_has_win_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_tbl_result::clear_has_win_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_tbl_result::clear_win_uid() {
  win_uid_ = GOOGLE_LONGLONG(0);
  clear_has_win_uid();
}
inline ::google::protobuf::int64 s_tbl_result::win_uid() const {
  return win_uid_;
}
inline void s_tbl_result::set_win_uid(::google::protobuf::int64 value) {
  set_has_win_uid();
  win_uid_ = value;
}

// optional int64 win_better = 3;
inline bool s_tbl_result::has_win_better() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_tbl_result::set_has_win_better() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_tbl_result::clear_has_win_better() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_tbl_result::clear_win_better() {
  win_better_ = GOOGLE_LONGLONG(0);
  clear_has_win_better();
}
inline ::google::protobuf::int64 s_tbl_result::win_better() const {
  return win_better_;
}
inline void s_tbl_result::set_win_better(::google::protobuf::int64 value) {
  set_has_win_better();
  win_better_ = value;
}

// optional int64 win_pitcher = 4;
inline bool s_tbl_result::has_win_pitcher() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_tbl_result::set_has_win_pitcher() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_tbl_result::clear_has_win_pitcher() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_tbl_result::clear_win_pitcher() {
  win_pitcher_ = GOOGLE_LONGLONG(0);
  clear_has_win_pitcher();
}
inline ::google::protobuf::int64 s_tbl_result::win_pitcher() const {
  return win_pitcher_;
}
inline void s_tbl_result::set_win_pitcher(::google::protobuf::int64 value) {
  set_has_win_pitcher();
  win_pitcher_ = value;
}

// optional int32 win_score = 5;
inline bool s_tbl_result::has_win_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void s_tbl_result::set_has_win_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void s_tbl_result::clear_has_win_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void s_tbl_result::clear_win_score() {
  win_score_ = 0;
  clear_has_win_score();
}
inline ::google::protobuf::int32 s_tbl_result::win_score() const {
  return win_score_;
}
inline void s_tbl_result::set_win_score(::google::protobuf::int32 value) {
  set_has_win_score();
  win_score_ = value;
}

// optional int32 win_elo_point = 6;
inline bool s_tbl_result::has_win_elo_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void s_tbl_result::set_has_win_elo_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void s_tbl_result::clear_has_win_elo_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void s_tbl_result::clear_win_elo_point() {
  win_elo_point_ = 0;
  clear_has_win_elo_point();
}
inline ::google::protobuf::int32 s_tbl_result::win_elo_point() const {
  return win_elo_point_;
}
inline void s_tbl_result::set_win_elo_point(::google::protobuf::int32 value) {
  set_has_win_elo_point();
  win_elo_point_ = value;
}

// optional int64 lose_uid = 7;
inline bool s_tbl_result::has_lose_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void s_tbl_result::set_has_lose_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void s_tbl_result::clear_has_lose_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void s_tbl_result::clear_lose_uid() {
  lose_uid_ = GOOGLE_LONGLONG(0);
  clear_has_lose_uid();
}
inline ::google::protobuf::int64 s_tbl_result::lose_uid() const {
  return lose_uid_;
}
inline void s_tbl_result::set_lose_uid(::google::protobuf::int64 value) {
  set_has_lose_uid();
  lose_uid_ = value;
}

// optional int64 lose_better = 8;
inline bool s_tbl_result::has_lose_better() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void s_tbl_result::set_has_lose_better() {
  _has_bits_[0] |= 0x00000080u;
}
inline void s_tbl_result::clear_has_lose_better() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void s_tbl_result::clear_lose_better() {
  lose_better_ = GOOGLE_LONGLONG(0);
  clear_has_lose_better();
}
inline ::google::protobuf::int64 s_tbl_result::lose_better() const {
  return lose_better_;
}
inline void s_tbl_result::set_lose_better(::google::protobuf::int64 value) {
  set_has_lose_better();
  lose_better_ = value;
}

// optional int64 lose_pitcher = 9;
inline bool s_tbl_result::has_lose_pitcher() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void s_tbl_result::set_has_lose_pitcher() {
  _has_bits_[0] |= 0x00000100u;
}
inline void s_tbl_result::clear_has_lose_pitcher() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void s_tbl_result::clear_lose_pitcher() {
  lose_pitcher_ = GOOGLE_LONGLONG(0);
  clear_has_lose_pitcher();
}
inline ::google::protobuf::int64 s_tbl_result::lose_pitcher() const {
  return lose_pitcher_;
}
inline void s_tbl_result::set_lose_pitcher(::google::protobuf::int64 value) {
  set_has_lose_pitcher();
  lose_pitcher_ = value;
}

// optional int32 lose_score = 10;
inline bool s_tbl_result::has_lose_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void s_tbl_result::set_has_lose_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void s_tbl_result::clear_has_lose_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void s_tbl_result::clear_lose_score() {
  lose_score_ = 0;
  clear_has_lose_score();
}
inline ::google::protobuf::int32 s_tbl_result::lose_score() const {
  return lose_score_;
}
inline void s_tbl_result::set_lose_score(::google::protobuf::int32 value) {
  set_has_lose_score();
  lose_score_ = value;
}

// optional int32 lose_elo_point = 11;
inline bool s_tbl_result::has_lose_elo_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void s_tbl_result::set_has_lose_elo_point() {
  _has_bits_[0] |= 0x00000400u;
}
inline void s_tbl_result::clear_has_lose_elo_point() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void s_tbl_result::clear_lose_elo_point() {
  lose_elo_point_ = 0;
  clear_has_lose_elo_point();
}
inline ::google::protobuf::int32 s_tbl_result::lose_elo_point() const {
  return lose_elo_point_;
}
inline void s_tbl_result::set_lose_elo_point(::google::protobuf::int32 value) {
  set_has_lose_elo_point();
  lose_elo_point_ = value;
}

// optional int32 play_time_sec = 12;
inline bool s_tbl_result::has_play_time_sec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void s_tbl_result::set_has_play_time_sec() {
  _has_bits_[0] |= 0x00000800u;
}
inline void s_tbl_result::clear_has_play_time_sec() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void s_tbl_result::clear_play_time_sec() {
  play_time_sec_ = 0;
  clear_has_play_time_sec();
}
inline ::google::protobuf::int32 s_tbl_result::play_time_sec() const {
  return play_time_sec_;
}
inline void s_tbl_result::set_play_time_sec(::google::protobuf::int32 value) {
  set_has_play_time_sec();
  play_time_sec_ = value;
}

// optional string time_end = 13;
inline bool s_tbl_result::has_time_end() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void s_tbl_result::set_has_time_end() {
  _has_bits_[0] |= 0x00001000u;
}
inline void s_tbl_result::clear_has_time_end() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void s_tbl_result::clear_time_end() {
  if (time_end_ != &::google::protobuf::internal::kEmptyString) {
    time_end_->clear();
  }
  clear_has_time_end();
}
inline const ::std::string& s_tbl_result::time_end() const {
  return *time_end_;
}
inline void s_tbl_result::set_time_end(const ::std::string& value) {
  set_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    time_end_ = new ::std::string;
  }
  time_end_->assign(value);
}
inline void s_tbl_result::set_time_end(const char* value) {
  set_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    time_end_ = new ::std::string;
  }
  time_end_->assign(value);
}
inline void s_tbl_result::set_time_end(const char* value, size_t size) {
  set_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    time_end_ = new ::std::string;
  }
  time_end_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_result::mutable_time_end() {
  set_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    time_end_ = new ::std::string;
  }
  return time_end_;
}
inline ::std::string* s_tbl_result::release_time_end() {
  clear_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_end_;
    time_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_tbl_roundresult

// optional int64 db_id = 1;
inline bool s_tbl_roundresult::has_db_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_tbl_roundresult::set_has_db_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_tbl_roundresult::clear_has_db_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_tbl_roundresult::clear_db_id() {
  db_id_ = GOOGLE_LONGLONG(0);
  clear_has_db_id();
}
inline ::google::protobuf::int64 s_tbl_roundresult::db_id() const {
  return db_id_;
}
inline void s_tbl_roundresult::set_db_id(::google::protobuf::int64 value) {
  set_has_db_id();
  db_id_ = value;
}

// optional int64 grid = 2;
inline bool s_tbl_roundresult::has_grid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_tbl_roundresult::set_has_grid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_tbl_roundresult::clear_has_grid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_tbl_roundresult::clear_grid() {
  grid_ = GOOGLE_LONGLONG(0);
  clear_has_grid();
}
inline ::google::protobuf::int64 s_tbl_roundresult::grid() const {
  return grid_;
}
inline void s_tbl_roundresult::set_grid(::google::protobuf::int64 value) {
  set_has_grid();
  grid_ = value;
}

// optional int32 used_batter_id = 3;
inline bool s_tbl_roundresult::has_used_batter_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_tbl_roundresult::set_has_used_batter_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_tbl_roundresult::clear_has_used_batter_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_tbl_roundresult::clear_used_batter_id() {
  used_batter_id_ = 0;
  clear_has_used_batter_id();
}
inline ::google::protobuf::int32 s_tbl_roundresult::used_batter_id() const {
  return used_batter_id_;
}
inline void s_tbl_roundresult::set_used_batter_id(::google::protobuf::int32 value) {
  set_has_used_batter_id();
  used_batter_id_ = value;
}

// optional int32 used_pitcher_id = 4;
inline bool s_tbl_roundresult::has_used_pitcher_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_tbl_roundresult::set_has_used_pitcher_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_tbl_roundresult::clear_has_used_pitcher_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_tbl_roundresult::clear_used_pitcher_id() {
  used_pitcher_id_ = 0;
  clear_has_used_pitcher_id();
}
inline ::google::protobuf::int32 s_tbl_roundresult::used_pitcher_id() const {
  return used_pitcher_id_;
}
inline void s_tbl_roundresult::set_used_pitcher_id(::google::protobuf::int32 value) {
  set_has_used_pitcher_id();
  used_pitcher_id_ = value;
}

// optional int32 round_number = 5;
inline bool s_tbl_roundresult::has_round_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void s_tbl_roundresult::set_has_round_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void s_tbl_roundresult::clear_has_round_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void s_tbl_roundresult::clear_round_number() {
  round_number_ = 0;
  clear_has_round_number();
}
inline ::google::protobuf::int32 s_tbl_roundresult::round_number() const {
  return round_number_;
}
inline void s_tbl_roundresult::set_round_number(::google::protobuf::int32 value) {
  set_has_round_number();
  round_number_ = value;
}

// optional int32 used_breakingball = 6;
inline bool s_tbl_roundresult::has_used_breakingball() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void s_tbl_roundresult::set_has_used_breakingball() {
  _has_bits_[0] |= 0x00000020u;
}
inline void s_tbl_roundresult::clear_has_used_breakingball() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void s_tbl_roundresult::clear_used_breakingball() {
  used_breakingball_ = 0;
  clear_has_used_breakingball();
}
inline ::google::protobuf::int32 s_tbl_roundresult::used_breakingball() const {
  return used_breakingball_;
}
inline void s_tbl_roundresult::set_used_breakingball(::google::protobuf::int32 value) {
  set_has_used_breakingball();
  used_breakingball_ = value;
}

// optional int32 used_breakingball_speed = 7;
inline bool s_tbl_roundresult::has_used_breakingball_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void s_tbl_roundresult::set_has_used_breakingball_speed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void s_tbl_roundresult::clear_has_used_breakingball_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void s_tbl_roundresult::clear_used_breakingball_speed() {
  used_breakingball_speed_ = 0;
  clear_has_used_breakingball_speed();
}
inline ::google::protobuf::int32 s_tbl_roundresult::used_breakingball_speed() const {
  return used_breakingball_speed_;
}
inline void s_tbl_roundresult::set_used_breakingball_speed(::google::protobuf::int32 value) {
  set_has_used_breakingball_speed();
  used_breakingball_speed_ = value;
}

// optional int32 used_pitcherability = 8;
inline bool s_tbl_roundresult::has_used_pitcherability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void s_tbl_roundresult::set_has_used_pitcherability() {
  _has_bits_[0] |= 0x00000080u;
}
inline void s_tbl_roundresult::clear_has_used_pitcherability() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void s_tbl_roundresult::clear_used_pitcherability() {
  used_pitcherability_ = 0;
  clear_has_used_pitcherability();
}
inline ::google::protobuf::int32 s_tbl_roundresult::used_pitcherability() const {
  return used_pitcherability_;
}
inline void s_tbl_roundresult::set_used_pitcherability(::google::protobuf::int32 value) {
  set_has_used_pitcherability();
  used_pitcherability_ = value;
}

// optional int32 pitching_rhythm_judge = 9;
inline bool s_tbl_roundresult::has_pitching_rhythm_judge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void s_tbl_roundresult::set_has_pitching_rhythm_judge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void s_tbl_roundresult::clear_has_pitching_rhythm_judge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void s_tbl_roundresult::clear_pitching_rhythm_judge() {
  pitching_rhythm_judge_ = 0;
  clear_has_pitching_rhythm_judge();
}
inline ::google::protobuf::int32 s_tbl_roundresult::pitching_rhythm_judge() const {
  return pitching_rhythm_judge_;
}
inline void s_tbl_roundresult::set_pitching_rhythm_judge(::google::protobuf::int32 value) {
  set_has_pitching_rhythm_judge();
  pitching_rhythm_judge_ = value;
}

// optional int32 used_gesturetype = 10;
inline bool s_tbl_roundresult::has_used_gesturetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void s_tbl_roundresult::set_has_used_gesturetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void s_tbl_roundresult::clear_has_used_gesturetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void s_tbl_roundresult::clear_used_gesturetype() {
  used_gesturetype_ = 0;
  clear_has_used_gesturetype();
}
inline ::google::protobuf::int32 s_tbl_roundresult::used_gesturetype() const {
  return used_gesturetype_;
}
inline void s_tbl_roundresult::set_used_gesturetype(::google::protobuf::int32 value) {
  set_has_used_gesturetype();
  used_gesturetype_ = value;
}

// optional int32 gesturetype_input_error = 11;
inline bool s_tbl_roundresult::has_gesturetype_input_error() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void s_tbl_roundresult::set_has_gesturetype_input_error() {
  _has_bits_[0] |= 0x00000400u;
}
inline void s_tbl_roundresult::clear_has_gesturetype_input_error() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void s_tbl_roundresult::clear_gesturetype_input_error() {
  gesturetype_input_error_ = 0;
  clear_has_gesturetype_input_error();
}
inline ::google::protobuf::int32 s_tbl_roundresult::gesturetype_input_error() const {
  return gesturetype_input_error_;
}
inline void s_tbl_roundresult::set_gesturetype_input_error(::google::protobuf::int32 value) {
  set_has_gesturetype_input_error();
  gesturetype_input_error_ = value;
}

// optional int32 used_batting_fullpower = 12;
inline bool s_tbl_roundresult::has_used_batting_fullpower() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void s_tbl_roundresult::set_has_used_batting_fullpower() {
  _has_bits_[0] |= 0x00000800u;
}
inline void s_tbl_roundresult::clear_has_used_batting_fullpower() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void s_tbl_roundresult::clear_used_batting_fullpower() {
  used_batting_fullpower_ = 0;
  clear_has_used_batting_fullpower();
}
inline ::google::protobuf::int32 s_tbl_roundresult::used_batting_fullpower() const {
  return used_batting_fullpower_;
}
inline void s_tbl_roundresult::set_used_batting_fullpower(::google::protobuf::int32 value) {
  set_has_used_batting_fullpower();
  used_batting_fullpower_ = value;
}

// optional int32 batting_timing_judge = 13;
inline bool s_tbl_roundresult::has_batting_timing_judge() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void s_tbl_roundresult::set_has_batting_timing_judge() {
  _has_bits_[0] |= 0x00001000u;
}
inline void s_tbl_roundresult::clear_has_batting_timing_judge() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void s_tbl_roundresult::clear_batting_timing_judge() {
  batting_timing_judge_ = 0;
  clear_has_batting_timing_judge();
}
inline ::google::protobuf::int32 s_tbl_roundresult::batting_timing_judge() const {
  return batting_timing_judge_;
}
inline void s_tbl_roundresult::set_batting_timing_judge(::google::protobuf::int32 value) {
  set_has_batting_timing_judge();
  batting_timing_judge_ = value;
}

// optional int32 batting_hittype = 14;
inline bool s_tbl_roundresult::has_batting_hittype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void s_tbl_roundresult::set_has_batting_hittype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void s_tbl_roundresult::clear_has_batting_hittype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void s_tbl_roundresult::clear_batting_hittype() {
  batting_hittype_ = 0;
  clear_has_batting_hittype();
}
inline ::google::protobuf::int32 s_tbl_roundresult::batting_hittype() const {
  return batting_hittype_;
}
inline void s_tbl_roundresult::set_batting_hittype(::google::protobuf::int32 value) {
  set_has_batting_hittype();
  batting_hittype_ = value;
}

// optional int64 uid_attack = 15;
inline bool s_tbl_roundresult::has_uid_attack() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void s_tbl_roundresult::set_has_uid_attack() {
  _has_bits_[0] |= 0x00004000u;
}
inline void s_tbl_roundresult::clear_has_uid_attack() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void s_tbl_roundresult::clear_uid_attack() {
  uid_attack_ = GOOGLE_LONGLONG(0);
  clear_has_uid_attack();
}
inline ::google::protobuf::int64 s_tbl_roundresult::uid_attack() const {
  return uid_attack_;
}
inline void s_tbl_roundresult::set_uid_attack(::google::protobuf::int64 value) {
  set_has_uid_attack();
  uid_attack_ = value;
}

// optional int32 score = 16;
inline bool s_tbl_roundresult::has_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void s_tbl_roundresult::set_has_score() {
  _has_bits_[0] |= 0x00008000u;
}
inline void s_tbl_roundresult::clear_has_score() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void s_tbl_roundresult::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 s_tbl_roundresult::score() const {
  return score_;
}
inline void s_tbl_roundresult::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 base_runner_state = 17;
inline bool s_tbl_roundresult::has_base_runner_state() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void s_tbl_roundresult::set_has_base_runner_state() {
  _has_bits_[0] |= 0x00010000u;
}
inline void s_tbl_roundresult::clear_has_base_runner_state() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void s_tbl_roundresult::clear_base_runner_state() {
  base_runner_state_ = 0;
  clear_has_base_runner_state();
}
inline ::google::protobuf::int32 s_tbl_roundresult::base_runner_state() const {
  return base_runner_state_;
}
inline void s_tbl_roundresult::set_base_runner_state(::google::protobuf::int32 value) {
  set_has_base_runner_state();
  base_runner_state_ = value;
}

// optional int32 hit_type = 18;
inline bool s_tbl_roundresult::has_hit_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void s_tbl_roundresult::set_has_hit_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void s_tbl_roundresult::clear_has_hit_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void s_tbl_roundresult::clear_hit_type() {
  hit_type_ = 0;
  clear_has_hit_type();
}
inline ::google::protobuf::int32 s_tbl_roundresult::hit_type() const {
  return hit_type_;
}
inline void s_tbl_roundresult::set_hit_type(::google::protobuf::int32 value) {
  set_has_hit_type();
  hit_type_ = value;
}

// -------------------------------------------------------------------

// s_tbl_user

// optional int64 db_id = 1;
inline bool s_tbl_user::has_db_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_tbl_user::set_has_db_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_tbl_user::clear_has_db_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_tbl_user::clear_db_id() {
  db_id_ = GOOGLE_LONGLONG(0);
  clear_has_db_id();
}
inline ::google::protobuf::int64 s_tbl_user::db_id() const {
  return db_id_;
}
inline void s_tbl_user::set_db_id(::google::protobuf::int64 value) {
  set_has_db_id();
  db_id_ = value;
}

// optional int64 pp_id = 2;
inline bool s_tbl_user::has_pp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_tbl_user::set_has_pp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_tbl_user::clear_has_pp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_tbl_user::clear_pp_id() {
  pp_id_ = GOOGLE_LONGLONG(0);
  clear_has_pp_id();
}
inline ::google::protobuf::int64 s_tbl_user::pp_id() const {
  return pp_id_;
}
inline void s_tbl_user::set_pp_id(::google::protobuf::int64 value) {
  set_has_pp_id();
  pp_id_ = value;
}

// optional string host_type = 3;
inline bool s_tbl_user::has_host_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_tbl_user::set_has_host_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_tbl_user::clear_has_host_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_tbl_user::clear_host_type() {
  if (host_type_ != &::google::protobuf::internal::kEmptyString) {
    host_type_->clear();
  }
  clear_has_host_type();
}
inline const ::std::string& s_tbl_user::host_type() const {
  return *host_type_;
}
inline void s_tbl_user::set_host_type(const ::std::string& value) {
  set_has_host_type();
  if (host_type_ == &::google::protobuf::internal::kEmptyString) {
    host_type_ = new ::std::string;
  }
  host_type_->assign(value);
}
inline void s_tbl_user::set_host_type(const char* value) {
  set_has_host_type();
  if (host_type_ == &::google::protobuf::internal::kEmptyString) {
    host_type_ = new ::std::string;
  }
  host_type_->assign(value);
}
inline void s_tbl_user::set_host_type(const char* value, size_t size) {
  set_has_host_type();
  if (host_type_ == &::google::protobuf::internal::kEmptyString) {
    host_type_ = new ::std::string;
  }
  host_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_user::mutable_host_type() {
  set_has_host_type();
  if (host_type_ == &::google::protobuf::internal::kEmptyString) {
    host_type_ = new ::std::string;
  }
  return host_type_;
}
inline ::std::string* s_tbl_user::release_host_type() {
  clear_has_host_type();
  if (host_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_type_;
    host_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string uname = 4;
inline bool s_tbl_user::has_uname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_tbl_user::set_has_uname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_tbl_user::clear_has_uname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_tbl_user::clear_uname() {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& s_tbl_user::uname() const {
  return *uname_;
}
inline void s_tbl_user::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void s_tbl_user::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void s_tbl_user::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_user::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  return uname_;
}
inline ::std::string* s_tbl_user::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 discon_tot = 5;
inline bool s_tbl_user::has_discon_tot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void s_tbl_user::set_has_discon_tot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void s_tbl_user::clear_has_discon_tot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void s_tbl_user::clear_discon_tot() {
  discon_tot_ = 0;
  clear_has_discon_tot();
}
inline ::google::protobuf::int32 s_tbl_user::discon_tot() const {
  return discon_tot_;
}
inline void s_tbl_user::set_discon_tot(::google::protobuf::int32 value) {
  set_has_discon_tot();
  discon_tot_ = value;
}

// optional int32 win_tot = 6;
inline bool s_tbl_user::has_win_tot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void s_tbl_user::set_has_win_tot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void s_tbl_user::clear_has_win_tot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void s_tbl_user::clear_win_tot() {
  win_tot_ = 0;
  clear_has_win_tot();
}
inline ::google::protobuf::int32 s_tbl_user::win_tot() const {
  return win_tot_;
}
inline void s_tbl_user::set_win_tot(::google::protobuf::int32 value) {
  set_has_win_tot();
  win_tot_ = value;
}

// optional int32 win_tot_continue = 7;
inline bool s_tbl_user::has_win_tot_continue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void s_tbl_user::set_has_win_tot_continue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void s_tbl_user::clear_has_win_tot_continue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void s_tbl_user::clear_win_tot_continue() {
  win_tot_continue_ = 0;
  clear_has_win_tot_continue();
}
inline ::google::protobuf::int32 s_tbl_user::win_tot_continue() const {
  return win_tot_continue_;
}
inline void s_tbl_user::set_win_tot_continue(::google::protobuf::int32 value) {
  set_has_win_tot_continue();
  win_tot_continue_ = value;
}

// optional int32 win_tot_continue_max = 8;
inline bool s_tbl_user::has_win_tot_continue_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void s_tbl_user::set_has_win_tot_continue_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void s_tbl_user::clear_has_win_tot_continue_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void s_tbl_user::clear_win_tot_continue_max() {
  win_tot_continue_max_ = 0;
  clear_has_win_tot_continue_max();
}
inline ::google::protobuf::int32 s_tbl_user::win_tot_continue_max() const {
  return win_tot_continue_max_;
}
inline void s_tbl_user::set_win_tot_continue_max(::google::protobuf::int32 value) {
  set_has_win_tot_continue_max();
  win_tot_continue_max_ = value;
}

// optional int32 lose_tot = 9;
inline bool s_tbl_user::has_lose_tot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void s_tbl_user::set_has_lose_tot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void s_tbl_user::clear_has_lose_tot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void s_tbl_user::clear_lose_tot() {
  lose_tot_ = 0;
  clear_has_lose_tot();
}
inline ::google::protobuf::int32 s_tbl_user::lose_tot() const {
  return lose_tot_;
}
inline void s_tbl_user::set_lose_tot(::google::protobuf::int32 value) {
  set_has_lose_tot();
  lose_tot_ = value;
}

// optional int32 win_season = 10;
inline bool s_tbl_user::has_win_season() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void s_tbl_user::set_has_win_season() {
  _has_bits_[0] |= 0x00000200u;
}
inline void s_tbl_user::clear_has_win_season() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void s_tbl_user::clear_win_season() {
  win_season_ = 0;
  clear_has_win_season();
}
inline ::google::protobuf::int32 s_tbl_user::win_season() const {
  return win_season_;
}
inline void s_tbl_user::set_win_season(::google::protobuf::int32 value) {
  set_has_win_season();
  win_season_ = value;
}

// optional int32 lose_season = 11;
inline bool s_tbl_user::has_lose_season() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void s_tbl_user::set_has_lose_season() {
  _has_bits_[0] |= 0x00000400u;
}
inline void s_tbl_user::clear_has_lose_season() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void s_tbl_user::clear_lose_season() {
  lose_season_ = 0;
  clear_has_lose_season();
}
inline ::google::protobuf::int32 s_tbl_user::lose_season() const {
  return lose_season_;
}
inline void s_tbl_user::set_lose_season(::google::protobuf::int32 value) {
  set_has_lose_season();
  lose_season_ = value;
}

// optional int32 batter_tot_homerun = 12;
inline bool s_tbl_user::has_batter_tot_homerun() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void s_tbl_user::set_has_batter_tot_homerun() {
  _has_bits_[0] |= 0x00000800u;
}
inline void s_tbl_user::clear_has_batter_tot_homerun() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void s_tbl_user::clear_batter_tot_homerun() {
  batter_tot_homerun_ = 0;
  clear_has_batter_tot_homerun();
}
inline ::google::protobuf::int32 s_tbl_user::batter_tot_homerun() const {
  return batter_tot_homerun_;
}
inline void s_tbl_user::set_batter_tot_homerun(::google::protobuf::int32 value) {
  set_has_batter_tot_homerun();
  batter_tot_homerun_ = value;
}

// optional int32 pitcher_tot_strikeout = 13;
inline bool s_tbl_user::has_pitcher_tot_strikeout() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void s_tbl_user::set_has_pitcher_tot_strikeout() {
  _has_bits_[0] |= 0x00001000u;
}
inline void s_tbl_user::clear_has_pitcher_tot_strikeout() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void s_tbl_user::clear_pitcher_tot_strikeout() {
  pitcher_tot_strikeout_ = 0;
  clear_has_pitcher_tot_strikeout();
}
inline ::google::protobuf::int32 s_tbl_user::pitcher_tot_strikeout() const {
  return pitcher_tot_strikeout_;
}
inline void s_tbl_user::set_pitcher_tot_strikeout(::google::protobuf::int32 value) {
  set_has_pitcher_tot_strikeout();
  pitcher_tot_strikeout_ = value;
}

// optional int32 batter_tot_homerun_season = 14;
inline bool s_tbl_user::has_batter_tot_homerun_season() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void s_tbl_user::set_has_batter_tot_homerun_season() {
  _has_bits_[0] |= 0x00002000u;
}
inline void s_tbl_user::clear_has_batter_tot_homerun_season() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void s_tbl_user::clear_batter_tot_homerun_season() {
  batter_tot_homerun_season_ = 0;
  clear_has_batter_tot_homerun_season();
}
inline ::google::protobuf::int32 s_tbl_user::batter_tot_homerun_season() const {
  return batter_tot_homerun_season_;
}
inline void s_tbl_user::set_batter_tot_homerun_season(::google::protobuf::int32 value) {
  set_has_batter_tot_homerun_season();
  batter_tot_homerun_season_ = value;
}

// optional int32 pitcher_tot_strikeout_season = 15;
inline bool s_tbl_user::has_pitcher_tot_strikeout_season() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void s_tbl_user::set_has_pitcher_tot_strikeout_season() {
  _has_bits_[0] |= 0x00004000u;
}
inline void s_tbl_user::clear_has_pitcher_tot_strikeout_season() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void s_tbl_user::clear_pitcher_tot_strikeout_season() {
  pitcher_tot_strikeout_season_ = 0;
  clear_has_pitcher_tot_strikeout_season();
}
inline ::google::protobuf::int32 s_tbl_user::pitcher_tot_strikeout_season() const {
  return pitcher_tot_strikeout_season_;
}
inline void s_tbl_user::set_pitcher_tot_strikeout_season(::google::protobuf::int32 value) {
  set_has_pitcher_tot_strikeout_season();
  pitcher_tot_strikeout_season_ = value;
}

// optional int32 elo_point = 16;
inline bool s_tbl_user::has_elo_point() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void s_tbl_user::set_has_elo_point() {
  _has_bits_[0] |= 0x00008000u;
}
inline void s_tbl_user::clear_has_elo_point() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void s_tbl_user::clear_elo_point() {
  elo_point_ = 0;
  clear_has_elo_point();
}
inline ::google::protobuf::int32 s_tbl_user::elo_point() const {
  return elo_point_;
}
inline void s_tbl_user::set_elo_point(::google::protobuf::int32 value) {
  set_has_elo_point();
  elo_point_ = value;
}

// optional int64 cash_item_buy_money_amount = 17;
inline bool s_tbl_user::has_cash_item_buy_money_amount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void s_tbl_user::set_has_cash_item_buy_money_amount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void s_tbl_user::clear_has_cash_item_buy_money_amount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void s_tbl_user::clear_cash_item_buy_money_amount() {
  cash_item_buy_money_amount_ = GOOGLE_LONGLONG(0);
  clear_has_cash_item_buy_money_amount();
}
inline ::google::protobuf::int64 s_tbl_user::cash_item_buy_money_amount() const {
  return cash_item_buy_money_amount_;
}
inline void s_tbl_user::set_cash_item_buy_money_amount(::google::protobuf::int64 value) {
  set_has_cash_item_buy_money_amount();
  cash_item_buy_money_amount_ = value;
}

// optional string time_last_login = 18;
inline bool s_tbl_user::has_time_last_login() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void s_tbl_user::set_has_time_last_login() {
  _has_bits_[0] |= 0x00020000u;
}
inline void s_tbl_user::clear_has_time_last_login() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void s_tbl_user::clear_time_last_login() {
  if (time_last_login_ != &::google::protobuf::internal::kEmptyString) {
    time_last_login_->clear();
  }
  clear_has_time_last_login();
}
inline const ::std::string& s_tbl_user::time_last_login() const {
  return *time_last_login_;
}
inline void s_tbl_user::set_time_last_login(const ::std::string& value) {
  set_has_time_last_login();
  if (time_last_login_ == &::google::protobuf::internal::kEmptyString) {
    time_last_login_ = new ::std::string;
  }
  time_last_login_->assign(value);
}
inline void s_tbl_user::set_time_last_login(const char* value) {
  set_has_time_last_login();
  if (time_last_login_ == &::google::protobuf::internal::kEmptyString) {
    time_last_login_ = new ::std::string;
  }
  time_last_login_->assign(value);
}
inline void s_tbl_user::set_time_last_login(const char* value, size_t size) {
  set_has_time_last_login();
  if (time_last_login_ == &::google::protobuf::internal::kEmptyString) {
    time_last_login_ = new ::std::string;
  }
  time_last_login_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_user::mutable_time_last_login() {
  set_has_time_last_login();
  if (time_last_login_ == &::google::protobuf::internal::kEmptyString) {
    time_last_login_ = new ::std::string;
  }
  return time_last_login_;
}
inline ::std::string* s_tbl_user::release_time_last_login() {
  clear_has_time_last_login();
  if (time_last_login_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_last_login_;
    time_last_login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string time_last_logout = 19;
inline bool s_tbl_user::has_time_last_logout() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void s_tbl_user::set_has_time_last_logout() {
  _has_bits_[0] |= 0x00040000u;
}
inline void s_tbl_user::clear_has_time_last_logout() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void s_tbl_user::clear_time_last_logout() {
  if (time_last_logout_ != &::google::protobuf::internal::kEmptyString) {
    time_last_logout_->clear();
  }
  clear_has_time_last_logout();
}
inline const ::std::string& s_tbl_user::time_last_logout() const {
  return *time_last_logout_;
}
inline void s_tbl_user::set_time_last_logout(const ::std::string& value) {
  set_has_time_last_logout();
  if (time_last_logout_ == &::google::protobuf::internal::kEmptyString) {
    time_last_logout_ = new ::std::string;
  }
  time_last_logout_->assign(value);
}
inline void s_tbl_user::set_time_last_logout(const char* value) {
  set_has_time_last_logout();
  if (time_last_logout_ == &::google::protobuf::internal::kEmptyString) {
    time_last_logout_ = new ::std::string;
  }
  time_last_logout_->assign(value);
}
inline void s_tbl_user::set_time_last_logout(const char* value, size_t size) {
  set_has_time_last_logout();
  if (time_last_logout_ == &::google::protobuf::internal::kEmptyString) {
    time_last_logout_ = new ::std::string;
  }
  time_last_logout_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_user::mutable_time_last_logout() {
  set_has_time_last_logout();
  if (time_last_logout_ == &::google::protobuf::internal::kEmptyString) {
    time_last_logout_ = new ::std::string;
  }
  return time_last_logout_;
}
inline ::std::string* s_tbl_user::release_time_last_logout() {
  clear_has_time_last_logout();
  if (time_last_logout_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_last_logout_;
    time_last_logout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 day_continue_attend = 20;
inline bool s_tbl_user::has_day_continue_attend() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void s_tbl_user::set_has_day_continue_attend() {
  _has_bits_[0] |= 0x00080000u;
}
inline void s_tbl_user::clear_has_day_continue_attend() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void s_tbl_user::clear_day_continue_attend() {
  day_continue_attend_ = 0;
  clear_has_day_continue_attend();
}
inline ::google::protobuf::int32 s_tbl_user::day_continue_attend() const {
  return day_continue_attend_;
}
inline void s_tbl_user::set_day_continue_attend(::google::protobuf::int32 value) {
  set_has_day_continue_attend();
  day_continue_attend_ = value;
}

// optional string client_os = 21;
inline bool s_tbl_user::has_client_os() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void s_tbl_user::set_has_client_os() {
  _has_bits_[0] |= 0x00100000u;
}
inline void s_tbl_user::clear_has_client_os() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void s_tbl_user::clear_client_os() {
  if (client_os_ != &::google::protobuf::internal::kEmptyString) {
    client_os_->clear();
  }
  clear_has_client_os();
}
inline const ::std::string& s_tbl_user::client_os() const {
  return *client_os_;
}
inline void s_tbl_user::set_client_os(const ::std::string& value) {
  set_has_client_os();
  if (client_os_ == &::google::protobuf::internal::kEmptyString) {
    client_os_ = new ::std::string;
  }
  client_os_->assign(value);
}
inline void s_tbl_user::set_client_os(const char* value) {
  set_has_client_os();
  if (client_os_ == &::google::protobuf::internal::kEmptyString) {
    client_os_ = new ::std::string;
  }
  client_os_->assign(value);
}
inline void s_tbl_user::set_client_os(const char* value, size_t size) {
  set_has_client_os();
  if (client_os_ == &::google::protobuf::internal::kEmptyString) {
    client_os_ = new ::std::string;
  }
  client_os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_user::mutable_client_os() {
  set_has_client_os();
  if (client_os_ == &::google::protobuf::internal::kEmptyString) {
    client_os_ = new ::std::string;
  }
  return client_os_;
}
inline ::std::string* s_tbl_user::release_client_os() {
  clear_has_client_os();
  if (client_os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_os_;
    client_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string client_networ = 22;
inline bool s_tbl_user::has_client_networ() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void s_tbl_user::set_has_client_networ() {
  _has_bits_[0] |= 0x00200000u;
}
inline void s_tbl_user::clear_has_client_networ() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void s_tbl_user::clear_client_networ() {
  if (client_networ_ != &::google::protobuf::internal::kEmptyString) {
    client_networ_->clear();
  }
  clear_has_client_networ();
}
inline const ::std::string& s_tbl_user::client_networ() const {
  return *client_networ_;
}
inline void s_tbl_user::set_client_networ(const ::std::string& value) {
  set_has_client_networ();
  if (client_networ_ == &::google::protobuf::internal::kEmptyString) {
    client_networ_ = new ::std::string;
  }
  client_networ_->assign(value);
}
inline void s_tbl_user::set_client_networ(const char* value) {
  set_has_client_networ();
  if (client_networ_ == &::google::protobuf::internal::kEmptyString) {
    client_networ_ = new ::std::string;
  }
  client_networ_->assign(value);
}
inline void s_tbl_user::set_client_networ(const char* value, size_t size) {
  set_has_client_networ();
  if (client_networ_ == &::google::protobuf::internal::kEmptyString) {
    client_networ_ = new ::std::string;
  }
  client_networ_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_tbl_user::mutable_client_networ() {
  set_has_client_networ();
  if (client_networ_ == &::google::protobuf::internal::kEmptyString) {
    client_networ_ = new ::std::string;
  }
  return client_networ_;
}
inline ::std::string* s_tbl_user::release_client_networ() {
  clear_has_client_networ();
  if (client_networ_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_networ_;
    client_networ_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 playtime_tot = 23;
inline bool s_tbl_user::has_playtime_tot() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void s_tbl_user::set_has_playtime_tot() {
  _has_bits_[0] |= 0x00400000u;
}
inline void s_tbl_user::clear_has_playtime_tot() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void s_tbl_user::clear_playtime_tot() {
  playtime_tot_ = GOOGLE_LONGLONG(0);
  clear_has_playtime_tot();
}
inline ::google::protobuf::int64 s_tbl_user::playtime_tot() const {
  return playtime_tot_;
}
inline void s_tbl_user::set_playtime_tot(::google::protobuf::int64 value) {
  set_has_playtime_tot();
  playtime_tot_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_excel_5fbaseball_5ftable_5fdb_2eproto__INCLUDED
