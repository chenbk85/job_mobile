// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PT_UserGateServer.proto

#ifndef PROTOBUF_PT_5fUserGateServer_2eproto__INCLUDED
#define PROTOBUF_PT_5fUserGateServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "excel_baseball_table_db.pb.h"
#include "gameLogic.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
void protobuf_AssignDesc_PT_5fUserGateServer_2eproto();
void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto();

class s_x2ug_echo;
class s_ug2x_echo;
class s_ans_ug_error;
class s_x2ug_get_client_version;
class s_ug2x_client_version;
class UserGateServer_Client;
class Client_UserGateServer;

enum UserGateServer_Client_Type {
  UserGateServer_Client_Type_NONE = 1,
  UserGateServer_Client_Type_ug2x_echo = 2,
  UserGateServer_Client_Type_ans_ug_error = 3,
  UserGateServer_Client_Type_ug2x_client_version = 4
};
bool UserGateServer_Client_Type_IsValid(int value);
const UserGateServer_Client_Type UserGateServer_Client_Type_Type_MIN = UserGateServer_Client_Type_NONE;
const UserGateServer_Client_Type UserGateServer_Client_Type_Type_MAX = UserGateServer_Client_Type_ug2x_client_version;
const int UserGateServer_Client_Type_Type_ARRAYSIZE = UserGateServer_Client_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserGateServer_Client_Type_descriptor();
inline const ::std::string& UserGateServer_Client_Type_Name(UserGateServer_Client_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserGateServer_Client_Type_descriptor(), value);
}
inline bool UserGateServer_Client_Type_Parse(
    const ::std::string& name, UserGateServer_Client_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserGateServer_Client_Type>(
    UserGateServer_Client_Type_descriptor(), name, value);
}
enum Client_UserGateServer_Type {
  Client_UserGateServer_Type_NONE = 1,
  Client_UserGateServer_Type_x2ug_echo = 2,
  Client_UserGateServer_Type_x2ug_get_client_version = 3
};
bool Client_UserGateServer_Type_IsValid(int value);
const Client_UserGateServer_Type Client_UserGateServer_Type_Type_MIN = Client_UserGateServer_Type_NONE;
const Client_UserGateServer_Type Client_UserGateServer_Type_Type_MAX = Client_UserGateServer_Type_x2ug_get_client_version;
const int Client_UserGateServer_Type_Type_ARRAYSIZE = Client_UserGateServer_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Client_UserGateServer_Type_descriptor();
inline const ::std::string& Client_UserGateServer_Type_Name(Client_UserGateServer_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Client_UserGateServer_Type_descriptor(), value);
}
inline bool Client_UserGateServer_Type_Parse(
    const ::std::string& name, Client_UserGateServer_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Client_UserGateServer_Type>(
    Client_UserGateServer_Type_descriptor(), name, value);
}
// ===================================================================

class s_x2ug_echo : public ::google::protobuf::Message {
 public:
  s_x2ug_echo();
  virtual ~s_x2ug_echo();
  
  s_x2ug_echo(const s_x2ug_echo& from);
  
  inline s_x2ug_echo& operator=(const s_x2ug_echo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_x2ug_echo& default_instance();
  
  void Swap(s_x2ug_echo* other);
  
  // implements Message ----------------------------------------------
  
  s_x2ug_echo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_x2ug_echo& from);
  void MergeFrom(const s_x2ug_echo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int32 client_time_msec = 3;
  inline bool has_client_time_msec() const;
  inline void clear_client_time_msec();
  static const int kClientTimeMsecFieldNumber = 3;
  inline ::google::protobuf::int32 client_time_msec() const;
  inline void set_client_time_msec(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_x2ug_echo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_client_time_msec();
  inline void clear_has_client_time_msec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 client_time_msec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_x2ug_echo* default_instance_;
};
// -------------------------------------------------------------------

class s_ug2x_echo : public ::google::protobuf::Message {
 public:
  s_ug2x_echo();
  virtual ~s_ug2x_echo();
  
  s_ug2x_echo(const s_ug2x_echo& from);
  
  inline s_ug2x_echo& operator=(const s_ug2x_echo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ug2x_echo& default_instance();
  
  void Swap(s_ug2x_echo* other);
  
  // implements Message ----------------------------------------------
  
  s_ug2x_echo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ug2x_echo& from);
  void MergeFrom(const s_ug2x_echo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int32 client_time_msec = 3;
  inline bool has_client_time_msec() const;
  inline void clear_client_time_msec();
  static const int kClientTimeMsecFieldNumber = 3;
  inline ::google::protobuf::int32 client_time_msec() const;
  inline void set_client_time_msec(::google::protobuf::int32 value);
  
  // optional int64 ug_time_msec = 4;
  inline bool has_ug_time_msec() const;
  inline void clear_ug_time_msec();
  static const int kUgTimeMsecFieldNumber = 4;
  inline ::google::protobuf::int64 ug_time_msec() const;
  inline void set_ug_time_msec(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_ug2x_echo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_client_time_msec();
  inline void clear_has_client_time_msec();
  inline void set_has_ug_time_msec();
  inline void clear_has_ug_time_msec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 client_time_msec_;
  ::google::protobuf::int64 ug_time_msec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ug2x_echo* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_ug_error : public ::google::protobuf::Message {
 public:
  s_ans_ug_error();
  virtual ~s_ans_ug_error();
  
  s_ans_ug_error(const s_ans_ug_error& from);
  
  inline s_ans_ug_error& operator=(const s_ans_ug_error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_ug_error& default_instance();
  
  void Swap(s_ans_ug_error* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_ug_error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_ug_error& from);
  void MergeFrom(const s_ans_ug_error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sys_error_id = 1;
  inline bool has_sys_error_id() const;
  inline void clear_sys_error_id();
  static const int kSysErrorIdFieldNumber = 1;
  inline ::google::protobuf::int32 sys_error_id() const;
  inline void set_sys_error_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_ug_error)
 private:
  inline void set_has_sys_error_id();
  inline void clear_has_sys_error_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sys_error_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_ug_error* default_instance_;
};
// -------------------------------------------------------------------

class s_x2ug_get_client_version : public ::google::protobuf::Message {
 public:
  s_x2ug_get_client_version();
  virtual ~s_x2ug_get_client_version();
  
  s_x2ug_get_client_version(const s_x2ug_get_client_version& from);
  
  inline s_x2ug_get_client_version& operator=(const s_x2ug_get_client_version& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_x2ug_get_client_version& default_instance();
  
  void Swap(s_x2ug_get_client_version* other);
  
  // implements Message ----------------------------------------------
  
  s_x2ug_get_client_version* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_x2ug_get_client_version& from);
  void MergeFrom(const s_x2ug_get_client_version& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // @@protoc_insertion_point(class_scope:s_x2ug_get_client_version)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_x2ug_get_client_version* default_instance_;
};
// -------------------------------------------------------------------

class s_ug2x_client_version : public ::google::protobuf::Message {
 public:
  s_ug2x_client_version();
  virtual ~s_ug2x_client_version();
  
  s_ug2x_client_version(const s_ug2x_client_version& from);
  
  inline s_ug2x_client_version& operator=(const s_ug2x_client_version& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ug2x_client_version& default_instance();
  
  void Swap(s_ug2x_client_version* other);
  
  // implements Message ----------------------------------------------
  
  s_ug2x_client_version* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ug2x_client_version& from);
  void MergeFrom(const s_ug2x_client_version& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // @@protoc_insertion_point(class_scope:s_ug2x_client_version)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ug2x_client_version* default_instance_;
};
// -------------------------------------------------------------------

class UserGateServer_Client : public ::google::protobuf::Message {
 public:
  UserGateServer_Client();
  virtual ~UserGateServer_Client();
  
  UserGateServer_Client(const UserGateServer_Client& from);
  
  inline UserGateServer_Client& operator=(const UserGateServer_Client& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGateServer_Client& default_instance();
  
  void Swap(UserGateServer_Client* other);
  
  // implements Message ----------------------------------------------
  
  UserGateServer_Client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserGateServer_Client& from);
  void MergeFrom(const UserGateServer_Client& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UserGateServer_Client_Type Type;
  static const Type NONE = UserGateServer_Client_Type_NONE;
  static const Type ug2x_echo = UserGateServer_Client_Type_ug2x_echo;
  static const Type ans_ug_error = UserGateServer_Client_Type_ans_ug_error;
  static const Type ug2x_client_version = UserGateServer_Client_Type_ug2x_client_version;
  static inline bool Type_IsValid(int value) {
    return UserGateServer_Client_Type_IsValid(value);
  }
  static const Type Type_MIN =
    UserGateServer_Client_Type_Type_MIN;
  static const Type Type_MAX =
    UserGateServer_Client_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    UserGateServer_Client_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return UserGateServer_Client_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return UserGateServer_Client_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return UserGateServer_Client_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .UserGateServer_Client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::UserGateServer_Client_Type type() const;
  inline void set_type(::UserGateServer_Client_Type value);
  
  // optional .s_ug2x_echo m_ug2x_echo = 2;
  inline bool has_m_ug2x_echo() const;
  inline void clear_m_ug2x_echo();
  static const int kMUg2XEchoFieldNumber = 2;
  inline const ::s_ug2x_echo& m_ug2x_echo() const;
  inline ::s_ug2x_echo* mutable_m_ug2x_echo();
  inline ::s_ug2x_echo* release_m_ug2x_echo();
  
  // optional .s_ans_ug_error m_ans_ug_error = 3;
  inline bool has_m_ans_ug_error() const;
  inline void clear_m_ans_ug_error();
  static const int kMAnsUgErrorFieldNumber = 3;
  inline const ::s_ans_ug_error& m_ans_ug_error() const;
  inline ::s_ans_ug_error* mutable_m_ans_ug_error();
  inline ::s_ans_ug_error* release_m_ans_ug_error();
  
  // optional .s_ug2x_client_version m_ug2x_client_version = 4;
  inline bool has_m_ug2x_client_version() const;
  inline void clear_m_ug2x_client_version();
  static const int kMUg2XClientVersionFieldNumber = 4;
  inline const ::s_ug2x_client_version& m_ug2x_client_version() const;
  inline ::s_ug2x_client_version* mutable_m_ug2x_client_version();
  inline ::s_ug2x_client_version* release_m_ug2x_client_version();
  
  // @@protoc_insertion_point(class_scope:UserGateServer_Client)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_m_ug2x_echo();
  inline void clear_has_m_ug2x_echo();
  inline void set_has_m_ans_ug_error();
  inline void clear_has_m_ans_ug_error();
  inline void set_has_m_ug2x_client_version();
  inline void clear_has_m_ug2x_client_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_ug2x_echo* m_ug2x_echo_;
  ::s_ans_ug_error* m_ans_ug_error_;
  ::s_ug2x_client_version* m_ug2x_client_version_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto();
  
  void InitAsDefaultInstance();
  static UserGateServer_Client* default_instance_;
};
// -------------------------------------------------------------------

class Client_UserGateServer : public ::google::protobuf::Message {
 public:
  Client_UserGateServer();
  virtual ~Client_UserGateServer();
  
  Client_UserGateServer(const Client_UserGateServer& from);
  
  inline Client_UserGateServer& operator=(const Client_UserGateServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Client_UserGateServer& default_instance();
  
  void Swap(Client_UserGateServer* other);
  
  // implements Message ----------------------------------------------
  
  Client_UserGateServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client_UserGateServer& from);
  void MergeFrom(const Client_UserGateServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Client_UserGateServer_Type Type;
  static const Type NONE = Client_UserGateServer_Type_NONE;
  static const Type x2ug_echo = Client_UserGateServer_Type_x2ug_echo;
  static const Type x2ug_get_client_version = Client_UserGateServer_Type_x2ug_get_client_version;
  static inline bool Type_IsValid(int value) {
    return Client_UserGateServer_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Client_UserGateServer_Type_Type_MIN;
  static const Type Type_MAX =
    Client_UserGateServer_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Client_UserGateServer_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Client_UserGateServer_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Client_UserGateServer_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Client_UserGateServer_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Client_UserGateServer.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Client_UserGateServer_Type type() const;
  inline void set_type(::Client_UserGateServer_Type value);
  
  // optional .s_x2ug_echo m_x2ug_echo = 2;
  inline bool has_m_x2ug_echo() const;
  inline void clear_m_x2ug_echo();
  static const int kMX2UgEchoFieldNumber = 2;
  inline const ::s_x2ug_echo& m_x2ug_echo() const;
  inline ::s_x2ug_echo* mutable_m_x2ug_echo();
  inline ::s_x2ug_echo* release_m_x2ug_echo();
  
  // optional .s_x2ug_get_client_version m_x2ug_get_client_version = 3;
  inline bool has_m_x2ug_get_client_version() const;
  inline void clear_m_x2ug_get_client_version();
  static const int kMX2UgGetClientVersionFieldNumber = 3;
  inline const ::s_x2ug_get_client_version& m_x2ug_get_client_version() const;
  inline ::s_x2ug_get_client_version* mutable_m_x2ug_get_client_version();
  inline ::s_x2ug_get_client_version* release_m_x2ug_get_client_version();
  
  // @@protoc_insertion_point(class_scope:Client_UserGateServer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_m_x2ug_echo();
  inline void clear_has_m_x2ug_echo();
  inline void set_has_m_x2ug_get_client_version();
  inline void clear_has_m_x2ug_get_client_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_x2ug_echo* m_x2ug_echo_;
  ::s_x2ug_get_client_version* m_x2ug_get_client_version_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fUserGateServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto();
  
  void InitAsDefaultInstance();
  static Client_UserGateServer* default_instance_;
};
// ===================================================================


// ===================================================================

// s_x2ug_echo

// optional int32 type = 1;
inline bool s_x2ug_echo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_x2ug_echo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_x2ug_echo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_x2ug_echo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_x2ug_echo::type() const {
  return type_;
}
inline void s_x2ug_echo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_x2ug_echo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_x2ug_echo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_x2ug_echo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_x2ug_echo::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_x2ug_echo::msg() const {
  return *msg_;
}
inline void s_x2ug_echo::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_x2ug_echo::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_x2ug_echo::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_x2ug_echo::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_x2ug_echo::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 client_time_msec = 3;
inline bool s_x2ug_echo::has_client_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_x2ug_echo::set_has_client_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_x2ug_echo::clear_has_client_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_x2ug_echo::clear_client_time_msec() {
  client_time_msec_ = 0;
  clear_has_client_time_msec();
}
inline ::google::protobuf::int32 s_x2ug_echo::client_time_msec() const {
  return client_time_msec_;
}
inline void s_x2ug_echo::set_client_time_msec(::google::protobuf::int32 value) {
  set_has_client_time_msec();
  client_time_msec_ = value;
}

// -------------------------------------------------------------------

// s_ug2x_echo

// optional int32 type = 1;
inline bool s_ug2x_echo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ug2x_echo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ug2x_echo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ug2x_echo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_ug2x_echo::type() const {
  return type_;
}
inline void s_ug2x_echo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_ug2x_echo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ug2x_echo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ug2x_echo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ug2x_echo::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_ug2x_echo::msg() const {
  return *msg_;
}
inline void s_ug2x_echo::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_ug2x_echo::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_ug2x_echo::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_ug2x_echo::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_ug2x_echo::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 client_time_msec = 3;
inline bool s_ug2x_echo::has_client_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_ug2x_echo::set_has_client_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_ug2x_echo::clear_has_client_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_ug2x_echo::clear_client_time_msec() {
  client_time_msec_ = 0;
  clear_has_client_time_msec();
}
inline ::google::protobuf::int32 s_ug2x_echo::client_time_msec() const {
  return client_time_msec_;
}
inline void s_ug2x_echo::set_client_time_msec(::google::protobuf::int32 value) {
  set_has_client_time_msec();
  client_time_msec_ = value;
}

// optional int64 ug_time_msec = 4;
inline bool s_ug2x_echo::has_ug_time_msec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_ug2x_echo::set_has_ug_time_msec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_ug2x_echo::clear_has_ug_time_msec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_ug2x_echo::clear_ug_time_msec() {
  ug_time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_ug_time_msec();
}
inline ::google::protobuf::int64 s_ug2x_echo::ug_time_msec() const {
  return ug_time_msec_;
}
inline void s_ug2x_echo::set_ug_time_msec(::google::protobuf::int64 value) {
  set_has_ug_time_msec();
  ug_time_msec_ = value;
}

// -------------------------------------------------------------------

// s_ans_ug_error

// optional int32 sys_error_id = 1;
inline bool s_ans_ug_error::has_sys_error_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_ug_error::set_has_sys_error_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_ug_error::clear_has_sys_error_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_ug_error::clear_sys_error_id() {
  sys_error_id_ = 0;
  clear_has_sys_error_id();
}
inline ::google::protobuf::int32 s_ans_ug_error::sys_error_id() const {
  return sys_error_id_;
}
inline void s_ans_ug_error::set_sys_error_id(::google::protobuf::int32 value) {
  set_has_sys_error_id();
  sys_error_id_ = value;
}

// -------------------------------------------------------------------

// s_x2ug_get_client_version

// optional string version = 1;
inline bool s_x2ug_get_client_version::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_x2ug_get_client_version::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_x2ug_get_client_version::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_x2ug_get_client_version::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& s_x2ug_get_client_version::version() const {
  return *version_;
}
inline void s_x2ug_get_client_version::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void s_x2ug_get_client_version::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void s_x2ug_get_client_version::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_x2ug_get_client_version::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* s_x2ug_get_client_version::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_ug2x_client_version

// optional string version = 1;
inline bool s_ug2x_client_version::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ug2x_client_version::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ug2x_client_version::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ug2x_client_version::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& s_ug2x_client_version::version() const {
  return *version_;
}
inline void s_ug2x_client_version::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void s_ug2x_client_version::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void s_ug2x_client_version::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_ug2x_client_version::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* s_ug2x_client_version::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserGateServer_Client

// required .UserGateServer_Client.Type type = 1;
inline bool UserGateServer_Client::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGateServer_Client::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGateServer_Client::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGateServer_Client::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::UserGateServer_Client_Type UserGateServer_Client::type() const {
  return static_cast< ::UserGateServer_Client_Type >(type_);
}
inline void UserGateServer_Client::set_type(::UserGateServer_Client_Type value) {
  GOOGLE_DCHECK(::UserGateServer_Client_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .s_ug2x_echo m_ug2x_echo = 2;
inline bool UserGateServer_Client::has_m_ug2x_echo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserGateServer_Client::set_has_m_ug2x_echo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserGateServer_Client::clear_has_m_ug2x_echo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserGateServer_Client::clear_m_ug2x_echo() {
  if (m_ug2x_echo_ != NULL) m_ug2x_echo_->::s_ug2x_echo::Clear();
  clear_has_m_ug2x_echo();
}
inline const ::s_ug2x_echo& UserGateServer_Client::m_ug2x_echo() const {
  return m_ug2x_echo_ != NULL ? *m_ug2x_echo_ : *default_instance_->m_ug2x_echo_;
}
inline ::s_ug2x_echo* UserGateServer_Client::mutable_m_ug2x_echo() {
  set_has_m_ug2x_echo();
  if (m_ug2x_echo_ == NULL) m_ug2x_echo_ = new ::s_ug2x_echo;
  return m_ug2x_echo_;
}
inline ::s_ug2x_echo* UserGateServer_Client::release_m_ug2x_echo() {
  clear_has_m_ug2x_echo();
  ::s_ug2x_echo* temp = m_ug2x_echo_;
  m_ug2x_echo_ = NULL;
  return temp;
}

// optional .s_ans_ug_error m_ans_ug_error = 3;
inline bool UserGateServer_Client::has_m_ans_ug_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserGateServer_Client::set_has_m_ans_ug_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserGateServer_Client::clear_has_m_ans_ug_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserGateServer_Client::clear_m_ans_ug_error() {
  if (m_ans_ug_error_ != NULL) m_ans_ug_error_->::s_ans_ug_error::Clear();
  clear_has_m_ans_ug_error();
}
inline const ::s_ans_ug_error& UserGateServer_Client::m_ans_ug_error() const {
  return m_ans_ug_error_ != NULL ? *m_ans_ug_error_ : *default_instance_->m_ans_ug_error_;
}
inline ::s_ans_ug_error* UserGateServer_Client::mutable_m_ans_ug_error() {
  set_has_m_ans_ug_error();
  if (m_ans_ug_error_ == NULL) m_ans_ug_error_ = new ::s_ans_ug_error;
  return m_ans_ug_error_;
}
inline ::s_ans_ug_error* UserGateServer_Client::release_m_ans_ug_error() {
  clear_has_m_ans_ug_error();
  ::s_ans_ug_error* temp = m_ans_ug_error_;
  m_ans_ug_error_ = NULL;
  return temp;
}

// optional .s_ug2x_client_version m_ug2x_client_version = 4;
inline bool UserGateServer_Client::has_m_ug2x_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserGateServer_Client::set_has_m_ug2x_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserGateServer_Client::clear_has_m_ug2x_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserGateServer_Client::clear_m_ug2x_client_version() {
  if (m_ug2x_client_version_ != NULL) m_ug2x_client_version_->::s_ug2x_client_version::Clear();
  clear_has_m_ug2x_client_version();
}
inline const ::s_ug2x_client_version& UserGateServer_Client::m_ug2x_client_version() const {
  return m_ug2x_client_version_ != NULL ? *m_ug2x_client_version_ : *default_instance_->m_ug2x_client_version_;
}
inline ::s_ug2x_client_version* UserGateServer_Client::mutable_m_ug2x_client_version() {
  set_has_m_ug2x_client_version();
  if (m_ug2x_client_version_ == NULL) m_ug2x_client_version_ = new ::s_ug2x_client_version;
  return m_ug2x_client_version_;
}
inline ::s_ug2x_client_version* UserGateServer_Client::release_m_ug2x_client_version() {
  clear_has_m_ug2x_client_version();
  ::s_ug2x_client_version* temp = m_ug2x_client_version_;
  m_ug2x_client_version_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Client_UserGateServer

// required .Client_UserGateServer.Type type = 1;
inline bool Client_UserGateServer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Client_UserGateServer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Client_UserGateServer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Client_UserGateServer::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Client_UserGateServer_Type Client_UserGateServer::type() const {
  return static_cast< ::Client_UserGateServer_Type >(type_);
}
inline void Client_UserGateServer::set_type(::Client_UserGateServer_Type value) {
  GOOGLE_DCHECK(::Client_UserGateServer_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .s_x2ug_echo m_x2ug_echo = 2;
inline bool Client_UserGateServer::has_m_x2ug_echo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Client_UserGateServer::set_has_m_x2ug_echo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Client_UserGateServer::clear_has_m_x2ug_echo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Client_UserGateServer::clear_m_x2ug_echo() {
  if (m_x2ug_echo_ != NULL) m_x2ug_echo_->::s_x2ug_echo::Clear();
  clear_has_m_x2ug_echo();
}
inline const ::s_x2ug_echo& Client_UserGateServer::m_x2ug_echo() const {
  return m_x2ug_echo_ != NULL ? *m_x2ug_echo_ : *default_instance_->m_x2ug_echo_;
}
inline ::s_x2ug_echo* Client_UserGateServer::mutable_m_x2ug_echo() {
  set_has_m_x2ug_echo();
  if (m_x2ug_echo_ == NULL) m_x2ug_echo_ = new ::s_x2ug_echo;
  return m_x2ug_echo_;
}
inline ::s_x2ug_echo* Client_UserGateServer::release_m_x2ug_echo() {
  clear_has_m_x2ug_echo();
  ::s_x2ug_echo* temp = m_x2ug_echo_;
  m_x2ug_echo_ = NULL;
  return temp;
}

// optional .s_x2ug_get_client_version m_x2ug_get_client_version = 3;
inline bool Client_UserGateServer::has_m_x2ug_get_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Client_UserGateServer::set_has_m_x2ug_get_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Client_UserGateServer::clear_has_m_x2ug_get_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Client_UserGateServer::clear_m_x2ug_get_client_version() {
  if (m_x2ug_get_client_version_ != NULL) m_x2ug_get_client_version_->::s_x2ug_get_client_version::Clear();
  clear_has_m_x2ug_get_client_version();
}
inline const ::s_x2ug_get_client_version& Client_UserGateServer::m_x2ug_get_client_version() const {
  return m_x2ug_get_client_version_ != NULL ? *m_x2ug_get_client_version_ : *default_instance_->m_x2ug_get_client_version_;
}
inline ::s_x2ug_get_client_version* Client_UserGateServer::mutable_m_x2ug_get_client_version() {
  set_has_m_x2ug_get_client_version();
  if (m_x2ug_get_client_version_ == NULL) m_x2ug_get_client_version_ = new ::s_x2ug_get_client_version;
  return m_x2ug_get_client_version_;
}
inline ::s_x2ug_get_client_version* Client_UserGateServer::release_m_x2ug_get_client_version() {
  clear_has_m_x2ug_get_client_version();
  ::s_x2ug_get_client_version* temp = m_x2ug_get_client_version_;
  m_x2ug_get_client_version_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserGateServer_Client_Type>() {
  return ::UserGateServer_Client_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Client_UserGateServer_Type>() {
  return ::Client_UserGateServer_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PT_5fUserGateServer_2eproto__INCLUDED
