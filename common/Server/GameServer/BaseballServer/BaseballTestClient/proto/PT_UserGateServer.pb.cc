// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PT_UserGateServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* s_x2ug_echo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_x2ug_echo_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ug2x_echo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ug2x_echo_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_ug_error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_ug_error_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_x2ug_get_client_version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_x2ug_get_client_version_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ug2x_client_version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ug2x_client_version_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserGateServer_Client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGateServer_Client_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserGateServer_Client_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Client_UserGateServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client_UserGateServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Client_UserGateServer_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PT_5fUserGateServer_2eproto() {
  protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PT_UserGateServer.proto");
  GOOGLE_CHECK(file != NULL);
  s_x2ug_echo_descriptor_ = file->message_type(0);
  static const int s_x2ug_echo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2ug_echo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2ug_echo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2ug_echo, client_time_msec_),
  };
  s_x2ug_echo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_x2ug_echo_descriptor_,
      s_x2ug_echo::default_instance_,
      s_x2ug_echo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2ug_echo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2ug_echo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_x2ug_echo));
  s_ug2x_echo_descriptor_ = file->message_type(1);
  static const int s_ug2x_echo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_echo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_echo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_echo, client_time_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_echo, ug_time_msec_),
  };
  s_ug2x_echo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ug2x_echo_descriptor_,
      s_ug2x_echo::default_instance_,
      s_ug2x_echo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_echo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_echo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ug2x_echo));
  s_ans_ug_error_descriptor_ = file->message_type(2);
  static const int s_ans_ug_error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_ug_error, sys_error_id_),
  };
  s_ans_ug_error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_ug_error_descriptor_,
      s_ans_ug_error::default_instance_,
      s_ans_ug_error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_ug_error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_ug_error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_ug_error));
  s_x2ug_get_client_version_descriptor_ = file->message_type(3);
  static const int s_x2ug_get_client_version_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2ug_get_client_version, version_),
  };
  s_x2ug_get_client_version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_x2ug_get_client_version_descriptor_,
      s_x2ug_get_client_version::default_instance_,
      s_x2ug_get_client_version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2ug_get_client_version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2ug_get_client_version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_x2ug_get_client_version));
  s_ug2x_client_version_descriptor_ = file->message_type(4);
  static const int s_ug2x_client_version_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_client_version, version_),
  };
  s_ug2x_client_version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ug2x_client_version_descriptor_,
      s_ug2x_client_version::default_instance_,
      s_ug2x_client_version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_client_version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2x_client_version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ug2x_client_version));
  UserGateServer_Client_descriptor_ = file->message_type(5);
  static const int UserGateServer_Client_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_Client, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_Client, m_ug2x_echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_Client, m_ans_ug_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_Client, m_ug2x_client_version_),
  };
  UserGateServer_Client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGateServer_Client_descriptor_,
      UserGateServer_Client::default_instance_,
      UserGateServer_Client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_Client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_Client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGateServer_Client));
  UserGateServer_Client_Type_descriptor_ = UserGateServer_Client_descriptor_->enum_type(0);
  Client_UserGateServer_descriptor_ = file->message_type(6);
  static const int Client_UserGateServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_UserGateServer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_UserGateServer, m_x2ug_echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_UserGateServer, m_x2ug_get_client_version_),
  };
  Client_UserGateServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client_UserGateServer_descriptor_,
      Client_UserGateServer::default_instance_,
      Client_UserGateServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_UserGateServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_UserGateServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client_UserGateServer));
  Client_UserGateServer_Type_descriptor_ = Client_UserGateServer_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PT_5fUserGateServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_x2ug_echo_descriptor_, &s_x2ug_echo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ug2x_echo_descriptor_, &s_ug2x_echo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_ug_error_descriptor_, &s_ans_ug_error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_x2ug_get_client_version_descriptor_, &s_x2ug_get_client_version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ug2x_client_version_descriptor_, &s_ug2x_client_version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGateServer_Client_descriptor_, &UserGateServer_Client::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client_UserGateServer_descriptor_, &Client_UserGateServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PT_5fUserGateServer_2eproto() {
  delete s_x2ug_echo::default_instance_;
  delete s_x2ug_echo_reflection_;
  delete s_ug2x_echo::default_instance_;
  delete s_ug2x_echo_reflection_;
  delete s_ans_ug_error::default_instance_;
  delete s_ans_ug_error_reflection_;
  delete s_x2ug_get_client_version::default_instance_;
  delete s_x2ug_get_client_version_reflection_;
  delete s_ug2x_client_version::default_instance_;
  delete s_ug2x_client_version_reflection_;
  delete UserGateServer_Client::default_instance_;
  delete UserGateServer_Client_reflection_;
  delete Client_UserGateServer::default_instance_;
  delete Client_UserGateServer_reflection_;
}

void protobuf_AddDesc_PT_5fUserGateServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  ::protobuf_AddDesc_gameLogic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027PT_UserGateServer.proto\032\035excel_basebal"
    "l_table_db.proto\032\017gameLogic.proto\"B\n\013s_x"
    "2ug_echo\022\014\n\004type\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\030\n\020c"
    "lient_time_msec\030\003 \001(\005\"X\n\013s_ug2x_echo\022\014\n\004"
    "type\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\030\n\020client_time_m"
    "sec\030\003 \001(\005\022\024\n\014ug_time_msec\030\004 \001(\003\"&\n\016s_ans"
    "_ug_error\022\024\n\014sys_error_id\030\001 \001(\005\",\n\031s_x2u"
    "g_get_client_version\022\017\n\007version\030\001 \001(\t\"(\n"
    "\025s_ug2x_client_version\022\017\n\007version\030\001 \001(\t\""
    "\221\002\n\025UserGateServer_Client\022)\n\004type\030\001 \002(\0162"
    "\033.UserGateServer_Client.Type\022!\n\013m_ug2x_e"
    "cho\030\002 \001(\0132\014.s_ug2x_echo\022\'\n\016m_ans_ug_erro"
    "r\030\003 \001(\0132\017.s_ans_ug_error\0225\n\025m_ug2x_clien"
    "t_version\030\004 \001(\0132\026.s_ug2x_client_version\""
    "J\n\004Type\022\010\n\004NONE\020\001\022\r\n\tug2x_echo\020\002\022\020\n\014ans_"
    "ug_error\020\003\022\027\n\023ug2x_client_version\020\004\"\342\001\n\025"
    "Client_UserGateServer\022)\n\004type\030\001 \002(\0162\033.Cl"
    "ient_UserGateServer.Type\022!\n\013m_x2ug_echo\030"
    "\002 \001(\0132\014.s_x2ug_echo\022=\n\031m_x2ug_get_client"
    "_version\030\003 \001(\0132\032.s_x2ug_get_client_versi"
    "on\"<\n\004Type\022\010\n\004NONE\020\001\022\r\n\tx2ug_echo\020\002\022\033\n\027x"
    "2ug_get_client_version\020\003", 864);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PT_UserGateServer.proto", &protobuf_RegisterTypes);
  s_x2ug_echo::default_instance_ = new s_x2ug_echo();
  s_ug2x_echo::default_instance_ = new s_ug2x_echo();
  s_ans_ug_error::default_instance_ = new s_ans_ug_error();
  s_x2ug_get_client_version::default_instance_ = new s_x2ug_get_client_version();
  s_ug2x_client_version::default_instance_ = new s_ug2x_client_version();
  UserGateServer_Client::default_instance_ = new UserGateServer_Client();
  Client_UserGateServer::default_instance_ = new Client_UserGateServer();
  s_x2ug_echo::default_instance_->InitAsDefaultInstance();
  s_ug2x_echo::default_instance_->InitAsDefaultInstance();
  s_ans_ug_error::default_instance_->InitAsDefaultInstance();
  s_x2ug_get_client_version::default_instance_->InitAsDefaultInstance();
  s_ug2x_client_version::default_instance_->InitAsDefaultInstance();
  UserGateServer_Client::default_instance_->InitAsDefaultInstance();
  Client_UserGateServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PT_5fUserGateServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PT_5fUserGateServer_2eproto {
  StaticDescriptorInitializer_PT_5fUserGateServer_2eproto() {
    protobuf_AddDesc_PT_5fUserGateServer_2eproto();
  }
} static_descriptor_initializer_PT_5fUserGateServer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int s_x2ug_echo::kTypeFieldNumber;
const int s_x2ug_echo::kMsgFieldNumber;
const int s_x2ug_echo::kClientTimeMsecFieldNumber;
#endif  // !_MSC_VER

s_x2ug_echo::s_x2ug_echo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_x2ug_echo::InitAsDefaultInstance() {
}

s_x2ug_echo::s_x2ug_echo(const s_x2ug_echo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_x2ug_echo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_time_msec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_x2ug_echo::~s_x2ug_echo() {
  SharedDtor();
}

void s_x2ug_echo::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_x2ug_echo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_x2ug_echo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_x2ug_echo_descriptor_;
}

const s_x2ug_echo& s_x2ug_echo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fUserGateServer_2eproto();  return *default_instance_;
}

s_x2ug_echo* s_x2ug_echo::default_instance_ = NULL;

s_x2ug_echo* s_x2ug_echo::New() const {
  return new s_x2ug_echo;
}

void s_x2ug_echo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    client_time_msec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_x2ug_echo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_time_msec;
        break;
      }
      
      // optional int32 client_time_msec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_time_msec_)));
          set_has_client_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_x2ug_echo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_time_msec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_x2ug_echo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_time_msec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_x2ug_echo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int32 client_time_msec = 3;
    if (has_client_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_time_msec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_x2ug_echo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_x2ug_echo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_x2ug_echo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_x2ug_echo::MergeFrom(const s_x2ug_echo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_client_time_msec()) {
      set_client_time_msec(from.client_time_msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_x2ug_echo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_x2ug_echo::CopyFrom(const s_x2ug_echo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_x2ug_echo::IsInitialized() const {
  
  return true;
}

void s_x2ug_echo::Swap(s_x2ug_echo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(client_time_msec_, other->client_time_msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_x2ug_echo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_x2ug_echo_descriptor_;
  metadata.reflection = s_x2ug_echo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ug2x_echo::kTypeFieldNumber;
const int s_ug2x_echo::kMsgFieldNumber;
const int s_ug2x_echo::kClientTimeMsecFieldNumber;
const int s_ug2x_echo::kUgTimeMsecFieldNumber;
#endif  // !_MSC_VER

s_ug2x_echo::s_ug2x_echo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ug2x_echo::InitAsDefaultInstance() {
}

s_ug2x_echo::s_ug2x_echo(const s_ug2x_echo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ug2x_echo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_time_msec_ = 0;
  ug_time_msec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ug2x_echo::~s_ug2x_echo() {
  SharedDtor();
}

void s_ug2x_echo::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_ug2x_echo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ug2x_echo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ug2x_echo_descriptor_;
}

const s_ug2x_echo& s_ug2x_echo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fUserGateServer_2eproto();  return *default_instance_;
}

s_ug2x_echo* s_ug2x_echo::default_instance_ = NULL;

s_ug2x_echo* s_ug2x_echo::New() const {
  return new s_ug2x_echo;
}

void s_ug2x_echo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    client_time_msec_ = 0;
    ug_time_msec_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ug2x_echo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_time_msec;
        break;
      }
      
      // optional int32 client_time_msec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_time_msec_)));
          set_has_client_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ug_time_msec;
        break;
      }
      
      // optional int64 ug_time_msec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ug_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ug_time_msec_)));
          set_has_ug_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ug2x_echo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_time_msec(), output);
  }
  
  // optional int64 ug_time_msec = 4;
  if (has_ug_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ug_time_msec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ug2x_echo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_time_msec(), target);
  }
  
  // optional int64 ug_time_msec = 4;
  if (has_ug_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ug_time_msec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ug2x_echo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int32 client_time_msec = 3;
    if (has_client_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_time_msec());
    }
    
    // optional int64 ug_time_msec = 4;
    if (has_ug_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ug_time_msec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ug2x_echo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ug2x_echo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ug2x_echo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ug2x_echo::MergeFrom(const s_ug2x_echo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_client_time_msec()) {
      set_client_time_msec(from.client_time_msec());
    }
    if (from.has_ug_time_msec()) {
      set_ug_time_msec(from.ug_time_msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ug2x_echo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ug2x_echo::CopyFrom(const s_ug2x_echo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ug2x_echo::IsInitialized() const {
  
  return true;
}

void s_ug2x_echo::Swap(s_ug2x_echo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(client_time_msec_, other->client_time_msec_);
    std::swap(ug_time_msec_, other->ug_time_msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ug2x_echo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ug2x_echo_descriptor_;
  metadata.reflection = s_ug2x_echo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_ug_error::kSysErrorIdFieldNumber;
#endif  // !_MSC_VER

s_ans_ug_error::s_ans_ug_error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_ug_error::InitAsDefaultInstance() {
}

s_ans_ug_error::s_ans_ug_error(const s_ans_ug_error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_ug_error::SharedCtor() {
  _cached_size_ = 0;
  sys_error_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_ug_error::~s_ans_ug_error() {
  SharedDtor();
}

void s_ans_ug_error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_ug_error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_ug_error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_ug_error_descriptor_;
}

const s_ans_ug_error& s_ans_ug_error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fUserGateServer_2eproto();  return *default_instance_;
}

s_ans_ug_error* s_ans_ug_error::default_instance_ = NULL;

s_ans_ug_error* s_ans_ug_error::New() const {
  return new s_ans_ug_error;
}

void s_ans_ug_error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sys_error_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_ug_error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sys_error_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_error_id_)));
          set_has_sys_error_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_ug_error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sys_error_id = 1;
  if (has_sys_error_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sys_error_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_ug_error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sys_error_id = 1;
  if (has_sys_error_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sys_error_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_ug_error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sys_error_id = 1;
    if (has_sys_error_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_error_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_ug_error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_ug_error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_ug_error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_ug_error::MergeFrom(const s_ans_ug_error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_error_id()) {
      set_sys_error_id(from.sys_error_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_ug_error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_ug_error::CopyFrom(const s_ans_ug_error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_ug_error::IsInitialized() const {
  
  return true;
}

void s_ans_ug_error::Swap(s_ans_ug_error* other) {
  if (other != this) {
    std::swap(sys_error_id_, other->sys_error_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_ug_error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_ug_error_descriptor_;
  metadata.reflection = s_ans_ug_error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_x2ug_get_client_version::kVersionFieldNumber;
#endif  // !_MSC_VER

s_x2ug_get_client_version::s_x2ug_get_client_version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_x2ug_get_client_version::InitAsDefaultInstance() {
}

s_x2ug_get_client_version::s_x2ug_get_client_version(const s_x2ug_get_client_version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_x2ug_get_client_version::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_x2ug_get_client_version::~s_x2ug_get_client_version() {
  SharedDtor();
}

void s_x2ug_get_client_version::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void s_x2ug_get_client_version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_x2ug_get_client_version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_x2ug_get_client_version_descriptor_;
}

const s_x2ug_get_client_version& s_x2ug_get_client_version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fUserGateServer_2eproto();  return *default_instance_;
}

s_x2ug_get_client_version* s_x2ug_get_client_version::default_instance_ = NULL;

s_x2ug_get_client_version* s_x2ug_get_client_version::New() const {
  return new s_x2ug_get_client_version;
}

void s_x2ug_get_client_version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_x2ug_get_client_version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_x2ug_get_client_version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_x2ug_get_client_version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_x2ug_get_client_version::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_x2ug_get_client_version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_x2ug_get_client_version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_x2ug_get_client_version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_x2ug_get_client_version::MergeFrom(const s_x2ug_get_client_version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_x2ug_get_client_version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_x2ug_get_client_version::CopyFrom(const s_x2ug_get_client_version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_x2ug_get_client_version::IsInitialized() const {
  
  return true;
}

void s_x2ug_get_client_version::Swap(s_x2ug_get_client_version* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_x2ug_get_client_version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_x2ug_get_client_version_descriptor_;
  metadata.reflection = s_x2ug_get_client_version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ug2x_client_version::kVersionFieldNumber;
#endif  // !_MSC_VER

s_ug2x_client_version::s_ug2x_client_version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ug2x_client_version::InitAsDefaultInstance() {
}

s_ug2x_client_version::s_ug2x_client_version(const s_ug2x_client_version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ug2x_client_version::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ug2x_client_version::~s_ug2x_client_version() {
  SharedDtor();
}

void s_ug2x_client_version::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void s_ug2x_client_version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ug2x_client_version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ug2x_client_version_descriptor_;
}

const s_ug2x_client_version& s_ug2x_client_version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fUserGateServer_2eproto();  return *default_instance_;
}

s_ug2x_client_version* s_ug2x_client_version::default_instance_ = NULL;

s_ug2x_client_version* s_ug2x_client_version::New() const {
  return new s_ug2x_client_version;
}

void s_ug2x_client_version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ug2x_client_version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ug2x_client_version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ug2x_client_version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ug2x_client_version::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ug2x_client_version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ug2x_client_version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ug2x_client_version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ug2x_client_version::MergeFrom(const s_ug2x_client_version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ug2x_client_version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ug2x_client_version::CopyFrom(const s_ug2x_client_version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ug2x_client_version::IsInitialized() const {
  
  return true;
}

void s_ug2x_client_version::Swap(s_ug2x_client_version* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ug2x_client_version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ug2x_client_version_descriptor_;
  metadata.reflection = s_ug2x_client_version_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserGateServer_Client_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGateServer_Client_Type_descriptor_;
}
bool UserGateServer_Client_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserGateServer_Client_Type UserGateServer_Client::NONE;
const UserGateServer_Client_Type UserGateServer_Client::ug2x_echo;
const UserGateServer_Client_Type UserGateServer_Client::ans_ug_error;
const UserGateServer_Client_Type UserGateServer_Client::ug2x_client_version;
const UserGateServer_Client_Type UserGateServer_Client::Type_MIN;
const UserGateServer_Client_Type UserGateServer_Client::Type_MAX;
const int UserGateServer_Client::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserGateServer_Client::kTypeFieldNumber;
const int UserGateServer_Client::kMUg2XEchoFieldNumber;
const int UserGateServer_Client::kMAnsUgErrorFieldNumber;
const int UserGateServer_Client::kMUg2XClientVersionFieldNumber;
#endif  // !_MSC_VER

UserGateServer_Client::UserGateServer_Client()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserGateServer_Client::InitAsDefaultInstance() {
  m_ug2x_echo_ = const_cast< ::s_ug2x_echo*>(&::s_ug2x_echo::default_instance());
  m_ans_ug_error_ = const_cast< ::s_ans_ug_error*>(&::s_ans_ug_error::default_instance());
  m_ug2x_client_version_ = const_cast< ::s_ug2x_client_version*>(&::s_ug2x_client_version::default_instance());
}

UserGateServer_Client::UserGateServer_Client(const UserGateServer_Client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserGateServer_Client::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_ug2x_echo_ = NULL;
  m_ans_ug_error_ = NULL;
  m_ug2x_client_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGateServer_Client::~UserGateServer_Client() {
  SharedDtor();
}

void UserGateServer_Client::SharedDtor() {
  if (this != default_instance_) {
    delete m_ug2x_echo_;
    delete m_ans_ug_error_;
    delete m_ug2x_client_version_;
  }
}

void UserGateServer_Client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGateServer_Client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGateServer_Client_descriptor_;
}

const UserGateServer_Client& UserGateServer_Client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fUserGateServer_2eproto();  return *default_instance_;
}

UserGateServer_Client* UserGateServer_Client::default_instance_ = NULL;

UserGateServer_Client* UserGateServer_Client::New() const {
  return new UserGateServer_Client;
}

void UserGateServer_Client::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_ug2x_echo()) {
      if (m_ug2x_echo_ != NULL) m_ug2x_echo_->::s_ug2x_echo::Clear();
    }
    if (has_m_ans_ug_error()) {
      if (m_ans_ug_error_ != NULL) m_ans_ug_error_->::s_ans_ug_error::Clear();
    }
    if (has_m_ug2x_client_version()) {
      if (m_ug2x_client_version_ != NULL) m_ug2x_client_version_->::s_ug2x_client_version::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGateServer_Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserGateServer_Client.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UserGateServer_Client_Type_IsValid(value)) {
            set_type(static_cast< ::UserGateServer_Client_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ug2x_echo;
        break;
      }
      
      // optional .s_ug2x_echo m_ug2x_echo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ug2x_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ug2x_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_ans_ug_error;
        break;
      }
      
      // optional .s_ans_ug_error m_ans_ug_error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_ug_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_ug_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_ug2x_client_version;
        break;
      }
      
      // optional .s_ug2x_client_version m_ug2x_client_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ug2x_client_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ug2x_client_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserGateServer_Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UserGateServer_Client.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_ug2x_echo m_ug2x_echo = 2;
  if (has_m_ug2x_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_ug2x_echo(), output);
  }
  
  // optional .s_ans_ug_error m_ans_ug_error = 3;
  if (has_m_ans_ug_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_ans_ug_error(), output);
  }
  
  // optional .s_ug2x_client_version m_ug2x_client_version = 4;
  if (has_m_ug2x_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_ug2x_client_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserGateServer_Client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UserGateServer_Client.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .s_ug2x_echo m_ug2x_echo = 2;
  if (has_m_ug2x_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_ug2x_echo(), target);
  }
  
  // optional .s_ans_ug_error m_ans_ug_error = 3;
  if (has_m_ans_ug_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_ans_ug_error(), target);
  }
  
  // optional .s_ug2x_client_version m_ug2x_client_version = 4;
  if (has_m_ug2x_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_ug2x_client_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserGateServer_Client::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserGateServer_Client.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_ug2x_echo m_ug2x_echo = 2;
    if (has_m_ug2x_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ug2x_echo());
    }
    
    // optional .s_ans_ug_error m_ans_ug_error = 3;
    if (has_m_ans_ug_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_ug_error());
    }
    
    // optional .s_ug2x_client_version m_ug2x_client_version = 4;
    if (has_m_ug2x_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ug2x_client_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGateServer_Client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGateServer_Client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGateServer_Client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGateServer_Client::MergeFrom(const UserGateServer_Client& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_ug2x_echo()) {
      mutable_m_ug2x_echo()->::s_ug2x_echo::MergeFrom(from.m_ug2x_echo());
    }
    if (from.has_m_ans_ug_error()) {
      mutable_m_ans_ug_error()->::s_ans_ug_error::MergeFrom(from.m_ans_ug_error());
    }
    if (from.has_m_ug2x_client_version()) {
      mutable_m_ug2x_client_version()->::s_ug2x_client_version::MergeFrom(from.m_ug2x_client_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGateServer_Client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGateServer_Client::CopyFrom(const UserGateServer_Client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGateServer_Client::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserGateServer_Client::Swap(UserGateServer_Client* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_ug2x_echo_, other->m_ug2x_echo_);
    std::swap(m_ans_ug_error_, other->m_ans_ug_error_);
    std::swap(m_ug2x_client_version_, other->m_ug2x_client_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGateServer_Client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGateServer_Client_descriptor_;
  metadata.reflection = UserGateServer_Client_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Client_UserGateServer_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_UserGateServer_Type_descriptor_;
}
bool Client_UserGateServer_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Client_UserGateServer_Type Client_UserGateServer::NONE;
const Client_UserGateServer_Type Client_UserGateServer::x2ug_echo;
const Client_UserGateServer_Type Client_UserGateServer::x2ug_get_client_version;
const Client_UserGateServer_Type Client_UserGateServer::Type_MIN;
const Client_UserGateServer_Type Client_UserGateServer::Type_MAX;
const int Client_UserGateServer::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Client_UserGateServer::kTypeFieldNumber;
const int Client_UserGateServer::kMX2UgEchoFieldNumber;
const int Client_UserGateServer::kMX2UgGetClientVersionFieldNumber;
#endif  // !_MSC_VER

Client_UserGateServer::Client_UserGateServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client_UserGateServer::InitAsDefaultInstance() {
  m_x2ug_echo_ = const_cast< ::s_x2ug_echo*>(&::s_x2ug_echo::default_instance());
  m_x2ug_get_client_version_ = const_cast< ::s_x2ug_get_client_version*>(&::s_x2ug_get_client_version::default_instance());
}

Client_UserGateServer::Client_UserGateServer(const Client_UserGateServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client_UserGateServer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_x2ug_echo_ = NULL;
  m_x2ug_get_client_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client_UserGateServer::~Client_UserGateServer() {
  SharedDtor();
}

void Client_UserGateServer::SharedDtor() {
  if (this != default_instance_) {
    delete m_x2ug_echo_;
    delete m_x2ug_get_client_version_;
  }
}

void Client_UserGateServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client_UserGateServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_UserGateServer_descriptor_;
}

const Client_UserGateServer& Client_UserGateServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fUserGateServer_2eproto();  return *default_instance_;
}

Client_UserGateServer* Client_UserGateServer::default_instance_ = NULL;

Client_UserGateServer* Client_UserGateServer::New() const {
  return new Client_UserGateServer;
}

void Client_UserGateServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_x2ug_echo()) {
      if (m_x2ug_echo_ != NULL) m_x2ug_echo_->::s_x2ug_echo::Clear();
    }
    if (has_m_x2ug_get_client_version()) {
      if (m_x2ug_get_client_version_ != NULL) m_x2ug_get_client_version_->::s_x2ug_get_client_version::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client_UserGateServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Client_UserGateServer.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Client_UserGateServer_Type_IsValid(value)) {
            set_type(static_cast< ::Client_UserGateServer_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_x2ug_echo;
        break;
      }
      
      // optional .s_x2ug_echo m_x2ug_echo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_x2ug_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_x2ug_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_x2ug_get_client_version;
        break;
      }
      
      // optional .s_x2ug_get_client_version m_x2ug_get_client_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_x2ug_get_client_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_x2ug_get_client_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client_UserGateServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Client_UserGateServer.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_x2ug_echo m_x2ug_echo = 2;
  if (has_m_x2ug_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_x2ug_echo(), output);
  }
  
  // optional .s_x2ug_get_client_version m_x2ug_get_client_version = 3;
  if (has_m_x2ug_get_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_x2ug_get_client_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client_UserGateServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Client_UserGateServer.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .s_x2ug_echo m_x2ug_echo = 2;
  if (has_m_x2ug_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_x2ug_echo(), target);
  }
  
  // optional .s_x2ug_get_client_version m_x2ug_get_client_version = 3;
  if (has_m_x2ug_get_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_x2ug_get_client_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client_UserGateServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Client_UserGateServer.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_x2ug_echo m_x2ug_echo = 2;
    if (has_m_x2ug_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_x2ug_echo());
    }
    
    // optional .s_x2ug_get_client_version m_x2ug_get_client_version = 3;
    if (has_m_x2ug_get_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_x2ug_get_client_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client_UserGateServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client_UserGateServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client_UserGateServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client_UserGateServer::MergeFrom(const Client_UserGateServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_x2ug_echo()) {
      mutable_m_x2ug_echo()->::s_x2ug_echo::MergeFrom(from.m_x2ug_echo());
    }
    if (from.has_m_x2ug_get_client_version()) {
      mutable_m_x2ug_get_client_version()->::s_x2ug_get_client_version::MergeFrom(from.m_x2ug_get_client_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client_UserGateServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client_UserGateServer::CopyFrom(const Client_UserGateServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client_UserGateServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Client_UserGateServer::Swap(Client_UserGateServer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_x2ug_echo_, other->m_x2ug_echo_);
    std::swap(m_x2ug_get_client_version_, other->m_x2ug_get_client_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client_UserGateServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client_UserGateServer_descriptor_;
  metadata.reflection = Client_UserGateServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
