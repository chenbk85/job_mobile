// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: excel_baseball_table.proto

#ifndef PROTOBUF_excel_5fbaseball_5ftable_2eproto__INCLUDED
#define PROTOBUF_excel_5fbaseball_5ftable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
void protobuf_AssignDesc_excel_5fbaseball_5ftable_2eproto();
void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto();

class Tbl__PlayerBase;
class Tbl_Item;
class Tbl_PlayerBetter;
class Tbl_PlayerPitcher;
class Tbl_Result;
class Tbl_RoundResult;
class Tbl_User;

// ===================================================================

class Tbl__PlayerBase : public ::google::protobuf::MessageLite {
 public:
  Tbl__PlayerBase();
  virtual ~Tbl__PlayerBase();
  
  Tbl__PlayerBase(const Tbl__PlayerBase& from);
  
  inline Tbl__PlayerBase& operator=(const Tbl__PlayerBase& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Tbl__PlayerBase& default_instance();
  
  void Swap(Tbl__PlayerBase* other);
  
  // implements Message ----------------------------------------------
  
  Tbl__PlayerBase* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Tbl__PlayerBase& from);
  void MergeFrom(const Tbl__PlayerBase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);
  
  // required int32 sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 ppid = 3;
  inline bool has_ppid() const;
  inline void clear_ppid();
  static const int kPpidFieldNumber = 3;
  inline ::google::protobuf::int32 ppid() const;
  inline void set_ppid(::google::protobuf::int32 value);
  
  // required string pname = 4;
  inline bool has_pname() const;
  inline void clear_pname();
  static const int kPnameFieldNumber = 4;
  inline const ::std::string& pname() const;
  inline void set_pname(const ::std::string& value);
  inline void set_pname(const char* value);
  inline void set_pname(const char* value, size_t size);
  inline ::std::string* mutable_pname();
  inline ::std::string* release_pname();
  
  // required int32 city = 5;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 5;
  inline ::google::protobuf::int32 city() const;
  inline void set_city(::google::protobuf::int32 value);
  
  // required string initial_name = 6;
  inline bool has_initial_name() const;
  inline void clear_initial_name();
  static const int kInitialNameFieldNumber = 6;
  inline const ::std::string& initial_name() const;
  inline void set_initial_name(const ::std::string& value);
  inline void set_initial_name(const char* value);
  inline void set_initial_name(const char* value, size_t size);
  inline ::std::string* mutable_initial_name();
  inline ::std::string* release_initial_name();
  
  // required int32 back_number = 7;
  inline bool has_back_number() const;
  inline void clear_back_number();
  static const int kBackNumberFieldNumber = 7;
  inline ::google::protobuf::int32 back_number() const;
  inline void set_back_number(::google::protobuf::int32 value);
  
  // required int32 age = 8;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 8;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);
  
  // required int32 bady_type = 9;
  inline bool has_bady_type() const;
  inline void clear_bady_type();
  static const int kBadyTypeFieldNumber = 9;
  inline ::google::protobuf::int32 bady_type() const;
  inline void set_bady_type(::google::protobuf::int32 value);
  
  // required bool leftright_type = 10;
  inline bool has_leftright_type() const;
  inline void clear_leftright_type();
  static const int kLeftrightTypeFieldNumber = 10;
  inline bool leftright_type() const;
  inline void set_leftright_type(bool value);
  
  // required int64 exp = 11;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 11;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);
  
  // required int32 questcomplete_count = 12;
  inline bool has_questcomplete_count() const;
  inline void clear_questcomplete_count();
  static const int kQuestcompleteCountFieldNumber = 12;
  inline ::google::protobuf::int32 questcomplete_count() const;
  inline void set_questcomplete_count(::google::protobuf::int32 value);
  
  // required int32 win_continue = 13;
  inline bool has_win_continue() const;
  inline void clear_win_continue();
  static const int kWinContinueFieldNumber = 13;
  inline ::google::protobuf::int32 win_continue() const;
  inline void set_win_continue(::google::protobuf::int32 value);
  
  // required int32 lose_continue = 14;
  inline bool has_lose_continue() const;
  inline void clear_lose_continue();
  static const int kLoseContinueFieldNumber = 14;
  inline ::google::protobuf::int32 lose_continue() const;
  inline void set_lose_continue(::google::protobuf::int32 value);
  
  // required int64 last_game_result = 15;
  inline bool has_last_game_result() const;
  inline void clear_last_game_result();
  static const int kLastGameResultFieldNumber = 15;
  inline ::google::protobuf::int64 last_game_result() const;
  inline void set_last_game_result(::google::protobuf::int64 value);
  
  // required int32 win_tot = 16;
  inline bool has_win_tot() const;
  inline void clear_win_tot();
  static const int kWinTotFieldNumber = 16;
  inline ::google::protobuf::int32 win_tot() const;
  inline void set_win_tot(::google::protobuf::int32 value);
  
  // required int32 lose_tot = 17;
  inline bool has_lose_tot() const;
  inline void clear_lose_tot();
  static const int kLoseTotFieldNumber = 17;
  inline ::google::protobuf::int32 lose_tot() const;
  inline void set_lose_tot(::google::protobuf::int32 value);
  
  // required int32 win_season = 18;
  inline bool has_win_season() const;
  inline void clear_win_season();
  static const int kWinSeasonFieldNumber = 18;
  inline ::google::protobuf::int32 win_season() const;
  inline void set_win_season(::google::protobuf::int32 value);
  
  // required int32 lose_season = 19;
  inline bool has_lose_season() const;
  inline void clear_lose_season();
  static const int kLoseSeasonFieldNumber = 19;
  inline ::google::protobuf::int32 lose_season() const;
  inline void set_lose_season(::google::protobuf::int32 value);
  
  // required string skill_sticker = 20;
  inline bool has_skill_sticker() const;
  inline void clear_skill_sticker();
  static const int kSkillStickerFieldNumber = 20;
  inline const ::std::string& skill_sticker() const;
  inline void set_skill_sticker(const ::std::string& value);
  inline void set_skill_sticker(const char* value);
  inline void set_skill_sticker(const char* value, size_t size);
  inline ::std::string* mutable_skill_sticker();
  inline ::std::string* release_skill_sticker();
  
  // required int32 elo_point = 21;
  inline bool has_elo_point() const;
  inline void clear_elo_point();
  static const int kEloPointFieldNumber = 21;
  inline ::google::protobuf::int32 elo_point() const;
  inline void set_elo_point(::google::protobuf::int32 value);
  
  // required bool onoff_type = 22;
  inline bool has_onoff_type() const;
  inline void clear_onoff_type();
  static const int kOnoffTypeFieldNumber = 22;
  inline bool onoff_type() const;
  inline void set_onoff_type(bool value);
  
  // @@protoc_insertion_point(class_scope:Tbl__PlayerBase)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_ppid();
  inline void clear_has_ppid();
  inline void set_has_pname();
  inline void clear_has_pname();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_initial_name();
  inline void clear_has_initial_name();
  inline void set_has_back_number();
  inline void clear_has_back_number();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_bady_type();
  inline void clear_has_bady_type();
  inline void set_has_leftright_type();
  inline void clear_has_leftright_type();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_questcomplete_count();
  inline void clear_has_questcomplete_count();
  inline void set_has_win_continue();
  inline void clear_has_win_continue();
  inline void set_has_lose_continue();
  inline void clear_has_lose_continue();
  inline void set_has_last_game_result();
  inline void clear_has_last_game_result();
  inline void set_has_win_tot();
  inline void clear_has_win_tot();
  inline void set_has_lose_tot();
  inline void clear_has_lose_tot();
  inline void set_has_win_season();
  inline void clear_has_win_season();
  inline void set_has_lose_season();
  inline void clear_has_lose_season();
  inline void set_has_skill_sticker();
  inline void clear_has_skill_sticker();
  inline void set_has_elo_point();
  inline void clear_has_elo_point();
  inline void set_has_onoff_type();
  inline void clear_has_onoff_type();
  
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 ppid_;
  ::std::string* pname_;
  ::std::string* initial_name_;
  ::google::protobuf::int32 city_;
  ::google::protobuf::int32 back_number_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 bady_type_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 questcomplete_count_;
  ::google::protobuf::int32 win_continue_;
  ::google::protobuf::int64 last_game_result_;
  ::google::protobuf::int32 lose_continue_;
  ::google::protobuf::int32 win_tot_;
  bool leftright_type_;
  bool onoff_type_;
  ::google::protobuf::int32 lose_tot_;
  ::google::protobuf::int32 win_season_;
  ::google::protobuf::int32 lose_season_;
  ::std::string* skill_sticker_;
  ::google::protobuf::int32 elo_point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static Tbl__PlayerBase* default_instance_;
};
// -------------------------------------------------------------------

class Tbl_Item : public ::google::protobuf::MessageLite {
 public:
  Tbl_Item();
  virtual ~Tbl_Item();
  
  Tbl_Item(const Tbl_Item& from);
  
  inline Tbl_Item& operator=(const Tbl_Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Tbl_Item& default_instance();
  
  void Swap(Tbl_Item* other);
  
  // implements Message ----------------------------------------------
  
  Tbl_Item* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Tbl_Item& from);
  void MergeFrom(const Tbl_Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 iid = 1;
  inline bool has_iid() const;
  inline void clear_iid();
  static const int kIidFieldNumber = 1;
  inline ::google::protobuf::int64 iid() const;
  inline void set_iid(::google::protobuf::int64 value);
  
  // required int32 sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 category = 3;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 3;
  inline ::google::protobuf::int32 category() const;
  inline void set_category(::google::protobuf::int32 value);
  
  // required int64 pid = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 4;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);
  
  // required string upgrade_level = 5;
  inline bool has_upgrade_level() const;
  inline void clear_upgrade_level();
  static const int kUpgradeLevelFieldNumber = 5;
  inline const ::std::string& upgrade_level() const;
  inline void set_upgrade_level(const ::std::string& value);
  inline void set_upgrade_level(const char* value);
  inline void set_upgrade_level(const char* value, size_t size);
  inline ::std::string* mutable_upgrade_level();
  inline ::std::string* release_upgrade_level();
  
  // required string etc_info = 6;
  inline bool has_etc_info() const;
  inline void clear_etc_info();
  static const int kEtcInfoFieldNumber = 6;
  inline const ::std::string& etc_info() const;
  inline void set_etc_info(const ::std::string& value);
  inline void set_etc_info(const char* value);
  inline void set_etc_info(const char* value, size_t size);
  inline ::std::string* mutable_etc_info();
  inline ::std::string* release_etc_info();
  
  // required string grade = 7;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 7;
  inline const ::std::string& grade() const;
  inline void set_grade(const ::std::string& value);
  inline void set_grade(const char* value);
  inline void set_grade(const char* value, size_t size);
  inline ::std::string* mutable_grade();
  inline ::std::string* release_grade();
  
  // required int32 bought_real_money = 8;
  inline bool has_bought_real_money() const;
  inline void clear_bought_real_money();
  static const int kBoughtRealMoneyFieldNumber = 8;
  inline ::google::protobuf::int32 bought_real_money() const;
  inline void set_bought_real_money(::google::protobuf::int32 value);
  
  // required int32 bought_point_money = 9;
  inline bool has_bought_point_money() const;
  inline void clear_bought_point_money();
  static const int kBoughtPointMoneyFieldNumber = 9;
  inline ::google::protobuf::int32 bought_point_money() const;
  inline void set_bought_point_money(::google::protobuf::int32 value);
  
  // required int32 bought_game_money = 10;
  inline bool has_bought_game_money() const;
  inline void clear_bought_game_money();
  static const int kBoughtGameMoneyFieldNumber = 10;
  inline ::google::protobuf::int32 bought_game_money() const;
  inline void set_bought_game_money(::google::protobuf::int32 value);
  
  // required bool is_used = 11;
  inline bool has_is_used() const;
  inline void clear_is_used();
  static const int kIsUsedFieldNumber = 11;
  inline bool is_used() const;
  inline void set_is_used(bool value);
  
  // required bool is_confirmed = 12;
  inline bool has_is_confirmed() const;
  inline void clear_is_confirmed();
  static const int kIsConfirmedFieldNumber = 12;
  inline bool is_confirmed() const;
  inline void set_is_confirmed(bool value);
  
  // required int32 usable_hour = 13;
  inline bool has_usable_hour() const;
  inline void clear_usable_hour();
  static const int kUsableHourFieldNumber = 13;
  inline ::google::protobuf::int32 usable_hour() const;
  inline void set_usable_hour(::google::protobuf::int32 value);
  
  // required int32 used_game_count = 14;
  inline bool has_used_game_count() const;
  inline void clear_used_game_count();
  static const int kUsedGameCountFieldNumber = 14;
  inline ::google::protobuf::int32 used_game_count() const;
  inline void set_used_game_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Tbl_Item)
 private:
  inline void set_has_iid();
  inline void clear_has_iid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_upgrade_level();
  inline void clear_has_upgrade_level();
  inline void set_has_etc_info();
  inline void clear_has_etc_info();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_bought_real_money();
  inline void clear_has_bought_real_money();
  inline void set_has_bought_point_money();
  inline void clear_has_bought_point_money();
  inline void set_has_bought_game_money();
  inline void clear_has_bought_game_money();
  inline void set_has_is_used();
  inline void clear_has_is_used();
  inline void set_has_is_confirmed();
  inline void clear_has_is_confirmed();
  inline void set_has_usable_hour();
  inline void clear_has_usable_hour();
  inline void set_has_used_game_count();
  inline void clear_has_used_game_count();
  
  ::google::protobuf::int64 iid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 category_;
  ::google::protobuf::int64 pid_;
  ::std::string* upgrade_level_;
  ::std::string* etc_info_;
  ::std::string* grade_;
  ::google::protobuf::int32 bought_real_money_;
  ::google::protobuf::int32 bought_point_money_;
  ::google::protobuf::int32 bought_game_money_;
  bool is_used_;
  bool is_confirmed_;
  ::google::protobuf::int32 usable_hour_;
  ::google::protobuf::int32 used_game_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static Tbl_Item* default_instance_;
};
// -------------------------------------------------------------------

class Tbl_PlayerBetter : public ::google::protobuf::MessageLite {
 public:
  Tbl_PlayerBetter();
  virtual ~Tbl_PlayerBetter();
  
  Tbl_PlayerBetter(const Tbl_PlayerBetter& from);
  
  inline Tbl_PlayerBetter& operator=(const Tbl_PlayerBetter& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Tbl_PlayerBetter& default_instance();
  
  void Swap(Tbl_PlayerBetter* other);
  
  // implements Message ----------------------------------------------
  
  Tbl_PlayerBetter* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Tbl_PlayerBetter& from);
  void MergeFrom(const Tbl_PlayerBetter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
  inline bool has_m_tbl__playerbase() const;
  inline void clear_m_tbl__playerbase();
  static const int kMTblPlayerBaseFieldNumber = 1;
  inline const ::Tbl__PlayerBase& m_tbl__playerbase() const;
  inline ::Tbl__PlayerBase* mutable_m_tbl__playerbase();
  inline ::Tbl__PlayerBase* release_m_tbl__playerbase();
  
  // required int32 batting_average = 2;
  inline bool has_batting_average() const;
  inline void clear_batting_average();
  static const int kBattingAverageFieldNumber = 2;
  inline ::google::protobuf::int32 batting_average() const;
  inline void set_batting_average(::google::protobuf::int32 value);
  
  // required int32 continue_homerun_count = 3;
  inline bool has_continue_homerun_count() const;
  inline void clear_continue_homerun_count();
  static const int kContinueHomerunCountFieldNumber = 3;
  inline ::google::protobuf::int32 continue_homerun_count() const;
  inline void set_continue_homerun_count(::google::protobuf::int32 value);
  
  // required int32 homeruntotal_count = 4;
  inline bool has_homeruntotal_count() const;
  inline void clear_homeruntotal_count();
  static const int kHomeruntotalCountFieldNumber = 4;
  inline ::google::protobuf::int32 homeruntotal_count() const;
  inline void set_homeruntotal_count(::google::protobuf::int32 value);
  
  // required int32 single_homerun_count = 5;
  inline bool has_single_homerun_count() const;
  inline void clear_single_homerun_count();
  static const int kSingleHomerunCountFieldNumber = 5;
  inline ::google::protobuf::int32 single_homerun_count() const;
  inline void set_single_homerun_count(::google::protobuf::int32 value);
  
  // required int32 tworun_homerun_count = 6;
  inline bool has_tworun_homerun_count() const;
  inline void clear_tworun_homerun_count();
  static const int kTworunHomerunCountFieldNumber = 6;
  inline ::google::protobuf::int32 tworun_homerun_count() const;
  inline void set_tworun_homerun_count(::google::protobuf::int32 value);
  
  // required int32 threerun_homerun_count = 7;
  inline bool has_threerun_homerun_count() const;
  inline void clear_threerun_homerun_count();
  static const int kThreerunHomerunCountFieldNumber = 7;
  inline ::google::protobuf::int32 threerun_homerun_count() const;
  inline void set_threerun_homerun_count(::google::protobuf::int32 value);
  
  // required int32 grandslam_homerun_count = 8;
  inline bool has_grandslam_homerun_count() const;
  inline void clear_grandslam_homerun_count();
  static const int kGrandslamHomerunCountFieldNumber = 8;
  inline ::google::protobuf::int32 grandslam_homerun_count() const;
  inline void set_grandslam_homerun_count(::google::protobuf::int32 value);
  
  // required int32 one_hit_count = 9;
  inline bool has_one_hit_count() const;
  inline void clear_one_hit_count();
  static const int kOneHitCountFieldNumber = 9;
  inline ::google::protobuf::int32 one_hit_count() const;
  inline void set_one_hit_count(::google::protobuf::int32 value);
  
  // required int32 double_hit_count = 10;
  inline bool has_double_hit_count() const;
  inline void clear_double_hit_count();
  static const int kDoubleHitCountFieldNumber = 10;
  inline ::google::protobuf::int32 double_hit_count() const;
  inline void set_double_hit_count(::google::protobuf::int32 value);
  
  // required int32 triple_hit_count = 11;
  inline bool has_triple_hit_count() const;
  inline void clear_triple_hit_count();
  static const int kTripleHitCountFieldNumber = 11;
  inline ::google::protobuf::int32 triple_hit_count() const;
  inline void set_triple_hit_count(::google::protobuf::int32 value);
  
  // required int32 foul_hit_count = 12;
  inline bool has_foul_hit_count() const;
  inline void clear_foul_hit_count();
  static const int kFoulHitCountFieldNumber = 12;
  inline ::google::protobuf::int32 foul_hit_count() const;
  inline void set_foul_hit_count(::google::protobuf::int32 value);
  
  // required int32 out_hit_count = 13;
  inline bool has_out_hit_count() const;
  inline void clear_out_hit_count();
  static const int kOutHitCountFieldNumber = 13;
  inline ::google::protobuf::int32 out_hit_count() const;
  inline void set_out_hit_count(::google::protobuf::int32 value);
  
  // required int32 score_count = 14;
  inline bool has_score_count() const;
  inline void clear_score_count();
  static const int kScoreCountFieldNumber = 14;
  inline ::google::protobuf::int32 score_count() const;
  inline void set_score_count(::google::protobuf::int32 value);
  
  // required int32 betting_type = 15;
  inline bool has_betting_type() const;
  inline void clear_betting_type();
  static const int kBettingTypeFieldNumber = 15;
  inline ::google::protobuf::int32 betting_type() const;
  inline void set_betting_type(::google::protobuf::int32 value);
  
  // required int32 better_power = 16;
  inline bool has_better_power() const;
  inline void clear_better_power();
  static const int kBetterPowerFieldNumber = 16;
  inline ::google::protobuf::int32 better_power() const;
  inline void set_better_power(::google::protobuf::int32 value);
  
  // required int32 better_focus = 17;
  inline bool has_better_focus() const;
  inline void clear_better_focus();
  static const int kBetterFocusFieldNumber = 17;
  inline ::google::protobuf::int32 better_focus() const;
  inline void set_better_focus(::google::protobuf::int32 value);
  
  // required int32 better_power_buff = 18;
  inline bool has_better_power_buff() const;
  inline void clear_better_power_buff();
  static const int kBetterPowerBuffFieldNumber = 18;
  inline ::google::protobuf::int32 better_power_buff() const;
  inline void set_better_power_buff(::google::protobuf::int32 value);
  
  // required int32 better_focus_buff = 19;
  inline bool has_better_focus_buff() const;
  inline void clear_better_focus_buff();
  static const int kBetterFocusBuffFieldNumber = 19;
  inline ::google::protobuf::int32 better_focus_buff() const;
  inline void set_better_focus_buff(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Tbl_PlayerBetter)
 private:
  inline void set_has_m_tbl__playerbase();
  inline void clear_has_m_tbl__playerbase();
  inline void set_has_batting_average();
  inline void clear_has_batting_average();
  inline void set_has_continue_homerun_count();
  inline void clear_has_continue_homerun_count();
  inline void set_has_homeruntotal_count();
  inline void clear_has_homeruntotal_count();
  inline void set_has_single_homerun_count();
  inline void clear_has_single_homerun_count();
  inline void set_has_tworun_homerun_count();
  inline void clear_has_tworun_homerun_count();
  inline void set_has_threerun_homerun_count();
  inline void clear_has_threerun_homerun_count();
  inline void set_has_grandslam_homerun_count();
  inline void clear_has_grandslam_homerun_count();
  inline void set_has_one_hit_count();
  inline void clear_has_one_hit_count();
  inline void set_has_double_hit_count();
  inline void clear_has_double_hit_count();
  inline void set_has_triple_hit_count();
  inline void clear_has_triple_hit_count();
  inline void set_has_foul_hit_count();
  inline void clear_has_foul_hit_count();
  inline void set_has_out_hit_count();
  inline void clear_has_out_hit_count();
  inline void set_has_score_count();
  inline void clear_has_score_count();
  inline void set_has_betting_type();
  inline void clear_has_betting_type();
  inline void set_has_better_power();
  inline void clear_has_better_power();
  inline void set_has_better_focus();
  inline void clear_has_better_focus();
  inline void set_has_better_power_buff();
  inline void clear_has_better_power_buff();
  inline void set_has_better_focus_buff();
  inline void clear_has_better_focus_buff();
  
  ::Tbl__PlayerBase* m_tbl__playerbase_;
  ::google::protobuf::int32 batting_average_;
  ::google::protobuf::int32 continue_homerun_count_;
  ::google::protobuf::int32 homeruntotal_count_;
  ::google::protobuf::int32 single_homerun_count_;
  ::google::protobuf::int32 tworun_homerun_count_;
  ::google::protobuf::int32 threerun_homerun_count_;
  ::google::protobuf::int32 grandslam_homerun_count_;
  ::google::protobuf::int32 one_hit_count_;
  ::google::protobuf::int32 double_hit_count_;
  ::google::protobuf::int32 triple_hit_count_;
  ::google::protobuf::int32 foul_hit_count_;
  ::google::protobuf::int32 out_hit_count_;
  ::google::protobuf::int32 score_count_;
  ::google::protobuf::int32 betting_type_;
  ::google::protobuf::int32 better_power_;
  ::google::protobuf::int32 better_focus_;
  ::google::protobuf::int32 better_power_buff_;
  ::google::protobuf::int32 better_focus_buff_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static Tbl_PlayerBetter* default_instance_;
};
// -------------------------------------------------------------------

class Tbl_PlayerPitcher : public ::google::protobuf::MessageLite {
 public:
  Tbl_PlayerPitcher();
  virtual ~Tbl_PlayerPitcher();
  
  Tbl_PlayerPitcher(const Tbl_PlayerPitcher& from);
  
  inline Tbl_PlayerPitcher& operator=(const Tbl_PlayerPitcher& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Tbl_PlayerPitcher& default_instance();
  
  void Swap(Tbl_PlayerPitcher* other);
  
  // implements Message ----------------------------------------------
  
  Tbl_PlayerPitcher* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Tbl_PlayerPitcher& from);
  void MergeFrom(const Tbl_PlayerPitcher& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
  inline bool has_m_tbl__playerbase() const;
  inline void clear_m_tbl__playerbase();
  static const int kMTblPlayerBaseFieldNumber = 1;
  inline const ::Tbl__PlayerBase& m_tbl__playerbase() const;
  inline ::Tbl__PlayerBase* mutable_m_tbl__playerbase();
  inline ::Tbl__PlayerBase* release_m_tbl__playerbase();
  
  // required int32 pitching_average = 2;
  inline bool has_pitching_average() const;
  inline void clear_pitching_average();
  static const int kPitchingAverageFieldNumber = 2;
  inline ::google::protobuf::int32 pitching_average() const;
  inline void set_pitching_average(::google::protobuf::int32 value);
  
  // required int32 hit_count = 3;
  inline bool has_hit_count() const;
  inline void clear_hit_count();
  static const int kHitCountFieldNumber = 3;
  inline ::google::protobuf::int32 hit_count() const;
  inline void set_hit_count(::google::protobuf::int32 value);
  
  // required int32 strikeout_count = 4;
  inline bool has_strikeout_count() const;
  inline void clear_strikeout_count();
  static const int kStrikeoutCountFieldNumber = 4;
  inline ::google::protobuf::int32 strikeout_count() const;
  inline void set_strikeout_count(::google::protobuf::int32 value);
  
  // required int32 homerun_pitching_count = 5;
  inline bool has_homerun_pitching_count() const;
  inline void clear_homerun_pitching_count();
  static const int kHomerunPitchingCountFieldNumber = 5;
  inline ::google::protobuf::int32 homerun_pitching_count() const;
  inline void set_homerun_pitching_count(::google::protobuf::int32 value);
  
  // required int32 continue_strikeout_count = 6;
  inline bool has_continue_strikeout_count() const;
  inline void clear_continue_strikeout_count();
  static const int kContinueStrikeoutCountFieldNumber = 6;
  inline ::google::protobuf::int32 continue_strikeout_count() const;
  inline void set_continue_strikeout_count(::google::protobuf::int32 value);
  
  // required int32 continue_homerun_pitching_count = 7;
  inline bool has_continue_homerun_pitching_count() const;
  inline void clear_continue_homerun_pitching_count();
  static const int kContinueHomerunPitchingCountFieldNumber = 7;
  inline ::google::protobuf::int32 continue_homerun_pitching_count() const;
  inline void set_continue_homerun_pitching_count(::google::protobuf::int32 value);
  
  // required int32 pitching_type = 8;
  inline bool has_pitching_type() const;
  inline void clear_pitching_type();
  static const int kPitchingTypeFieldNumber = 8;
  inline ::google::protobuf::int32 pitching_type() const;
  inline void set_pitching_type(::google::protobuf::int32 value);
  
  // required int32 pitcher_control = 9;
  inline bool has_pitcher_control() const;
  inline void clear_pitcher_control();
  static const int kPitcherControlFieldNumber = 9;
  inline ::google::protobuf::int32 pitcher_control() const;
  inline void set_pitcher_control(::google::protobuf::int32 value);
  
  // required int32 pitcher_ballspeed = 10;
  inline bool has_pitcher_ballspeed() const;
  inline void clear_pitcher_ballspeed();
  static const int kPitcherBallspeedFieldNumber = 10;
  inline ::google::protobuf::int32 pitcher_ballspeed() const;
  inline void set_pitcher_ballspeed(::google::protobuf::int32 value);
  
  // required int32 pitcher_breakingball_value = 11;
  inline bool has_pitcher_breakingball_value() const;
  inline void clear_pitcher_breakingball_value();
  static const int kPitcherBreakingballValueFieldNumber = 11;
  inline ::google::protobuf::int32 pitcher_breakingball_value() const;
  inline void set_pitcher_breakingball_value(::google::protobuf::int32 value);
  
  // required int32 pitcher_breakingball_type = 12;
  inline bool has_pitcher_breakingball_type() const;
  inline void clear_pitcher_breakingball_type();
  static const int kPitcherBreakingballTypeFieldNumber = 12;
  inline ::google::protobuf::int32 pitcher_breakingball_type() const;
  inline void set_pitcher_breakingball_type(::google::protobuf::int32 value);
  
  // required int32 pitcher_control_buff = 13;
  inline bool has_pitcher_control_buff() const;
  inline void clear_pitcher_control_buff();
  static const int kPitcherControlBuffFieldNumber = 13;
  inline ::google::protobuf::int32 pitcher_control_buff() const;
  inline void set_pitcher_control_buff(::google::protobuf::int32 value);
  
  // required int32 pitcher_ballspeed_buff = 14;
  inline bool has_pitcher_ballspeed_buff() const;
  inline void clear_pitcher_ballspeed_buff();
  static const int kPitcherBallspeedBuffFieldNumber = 14;
  inline ::google::protobuf::int32 pitcher_ballspeed_buff() const;
  inline void set_pitcher_ballspeed_buff(::google::protobuf::int32 value);
  
  // required int32 pitcher_breakingball_value_buff = 15;
  inline bool has_pitcher_breakingball_value_buff() const;
  inline void clear_pitcher_breakingball_value_buff();
  static const int kPitcherBreakingballValueBuffFieldNumber = 15;
  inline ::google::protobuf::int32 pitcher_breakingball_value_buff() const;
  inline void set_pitcher_breakingball_value_buff(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Tbl_PlayerPitcher)
 private:
  inline void set_has_m_tbl__playerbase();
  inline void clear_has_m_tbl__playerbase();
  inline void set_has_pitching_average();
  inline void clear_has_pitching_average();
  inline void set_has_hit_count();
  inline void clear_has_hit_count();
  inline void set_has_strikeout_count();
  inline void clear_has_strikeout_count();
  inline void set_has_homerun_pitching_count();
  inline void clear_has_homerun_pitching_count();
  inline void set_has_continue_strikeout_count();
  inline void clear_has_continue_strikeout_count();
  inline void set_has_continue_homerun_pitching_count();
  inline void clear_has_continue_homerun_pitching_count();
  inline void set_has_pitching_type();
  inline void clear_has_pitching_type();
  inline void set_has_pitcher_control();
  inline void clear_has_pitcher_control();
  inline void set_has_pitcher_ballspeed();
  inline void clear_has_pitcher_ballspeed();
  inline void set_has_pitcher_breakingball_value();
  inline void clear_has_pitcher_breakingball_value();
  inline void set_has_pitcher_breakingball_type();
  inline void clear_has_pitcher_breakingball_type();
  inline void set_has_pitcher_control_buff();
  inline void clear_has_pitcher_control_buff();
  inline void set_has_pitcher_ballspeed_buff();
  inline void clear_has_pitcher_ballspeed_buff();
  inline void set_has_pitcher_breakingball_value_buff();
  inline void clear_has_pitcher_breakingball_value_buff();
  
  ::Tbl__PlayerBase* m_tbl__playerbase_;
  ::google::protobuf::int32 pitching_average_;
  ::google::protobuf::int32 hit_count_;
  ::google::protobuf::int32 strikeout_count_;
  ::google::protobuf::int32 homerun_pitching_count_;
  ::google::protobuf::int32 continue_strikeout_count_;
  ::google::protobuf::int32 continue_homerun_pitching_count_;
  ::google::protobuf::int32 pitching_type_;
  ::google::protobuf::int32 pitcher_control_;
  ::google::protobuf::int32 pitcher_ballspeed_;
  ::google::protobuf::int32 pitcher_breakingball_value_;
  ::google::protobuf::int32 pitcher_breakingball_type_;
  ::google::protobuf::int32 pitcher_control_buff_;
  ::google::protobuf::int32 pitcher_ballspeed_buff_;
  ::google::protobuf::int32 pitcher_breakingball_value_buff_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static Tbl_PlayerPitcher* default_instance_;
};
// -------------------------------------------------------------------

class Tbl_Result : public ::google::protobuf::MessageLite {
 public:
  Tbl_Result();
  virtual ~Tbl_Result();
  
  Tbl_Result(const Tbl_Result& from);
  
  inline Tbl_Result& operator=(const Tbl_Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Tbl_Result& default_instance();
  
  void Swap(Tbl_Result* other);
  
  // implements Message ----------------------------------------------
  
  Tbl_Result* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Tbl_Result& from);
  void MergeFrom(const Tbl_Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 grid = 1;
  inline bool has_grid() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 1;
  inline ::google::protobuf::int64 grid() const;
  inline void set_grid(::google::protobuf::int64 value);
  
  // required bool is_singlemode = 2;
  inline bool has_is_singlemode() const;
  inline void clear_is_singlemode();
  static const int kIsSinglemodeFieldNumber = 2;
  inline bool is_singlemode() const;
  inline void set_is_singlemode(bool value);
  
  // required int32 ppid1 = 3;
  inline bool has_ppid1() const;
  inline void clear_ppid1();
  static const int kPpid1FieldNumber = 3;
  inline ::google::protobuf::int32 ppid1() const;
  inline void set_ppid1(::google::protobuf::int32 value);
  
  // required int64 uid1 = 4;
  inline bool has_uid1() const;
  inline void clear_uid1();
  static const int kUid1FieldNumber = 4;
  inline ::google::protobuf::int64 uid1() const;
  inline void set_uid1(::google::protobuf::int64 value);
  
  // required string uname1 = 5;
  inline bool has_uname1() const;
  inline void clear_uname1();
  static const int kUname1FieldNumber = 5;
  inline const ::std::string& uname1() const;
  inline void set_uname1(const ::std::string& value);
  inline void set_uname1(const char* value);
  inline void set_uname1(const char* value, size_t size);
  inline ::std::string* mutable_uname1();
  inline ::std::string* release_uname1();
  
  // required int64 pid_better1 = 6;
  inline bool has_pid_better1() const;
  inline void clear_pid_better1();
  static const int kPidBetter1FieldNumber = 6;
  inline ::google::protobuf::int64 pid_better1() const;
  inline void set_pid_better1(::google::protobuf::int64 value);
  
  // required int64 pid_pitcher1 = 7;
  inline bool has_pid_pitcher1() const;
  inline void clear_pid_pitcher1();
  static const int kPidPitcher1FieldNumber = 7;
  inline ::google::protobuf::int64 pid_pitcher1() const;
  inline void set_pid_pitcher1(::google::protobuf::int64 value);
  
  // required int32 ppid2 = 8;
  inline bool has_ppid2() const;
  inline void clear_ppid2();
  static const int kPpid2FieldNumber = 8;
  inline ::google::protobuf::int32 ppid2() const;
  inline void set_ppid2(::google::protobuf::int32 value);
  
  // required int64 uid2 = 9;
  inline bool has_uid2() const;
  inline void clear_uid2();
  static const int kUid2FieldNumber = 9;
  inline ::google::protobuf::int64 uid2() const;
  inline void set_uid2(::google::protobuf::int64 value);
  
  // required string uname2 = 10;
  inline bool has_uname2() const;
  inline void clear_uname2();
  static const int kUname2FieldNumber = 10;
  inline const ::std::string& uname2() const;
  inline void set_uname2(const ::std::string& value);
  inline void set_uname2(const char* value);
  inline void set_uname2(const char* value, size_t size);
  inline ::std::string* mutable_uname2();
  inline ::std::string* release_uname2();
  
  // required int64 pid_better2 = 11;
  inline bool has_pid_better2() const;
  inline void clear_pid_better2();
  static const int kPidBetter2FieldNumber = 11;
  inline ::google::protobuf::int64 pid_better2() const;
  inline void set_pid_better2(::google::protobuf::int64 value);
  
  // required int64 pid_pitcher2 = 12;
  inline bool has_pid_pitcher2() const;
  inline void clear_pid_pitcher2();
  static const int kPidPitcher2FieldNumber = 12;
  inline ::google::protobuf::int64 pid_pitcher2() const;
  inline void set_pid_pitcher2(::google::protobuf::int64 value);
  
  // required string time_start = 13;
  inline bool has_time_start() const;
  inline void clear_time_start();
  static const int kTimeStartFieldNumber = 13;
  inline const ::std::string& time_start() const;
  inline void set_time_start(const ::std::string& value);
  inline void set_time_start(const char* value);
  inline void set_time_start(const char* value, size_t size);
  inline ::std::string* mutable_time_start();
  inline ::std::string* release_time_start();
  
  // required string time_end = 14;
  inline bool has_time_end() const;
  inline void clear_time_end();
  static const int kTimeEndFieldNumber = 14;
  inline const ::std::string& time_end() const;
  inline void set_time_end(const ::std::string& value);
  inline void set_time_end(const char* value);
  inline void set_time_end(const char* value, size_t size);
  inline ::std::string* mutable_time_end();
  inline ::std::string* release_time_end();
  
  // required int64 winner = 15;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 15;
  inline ::google::protobuf::int64 winner() const;
  inline void set_winner(::google::protobuf::int64 value);
  
  // required int32 reward_exp1 = 16;
  inline bool has_reward_exp1() const;
  inline void clear_reward_exp1();
  static const int kRewardExp1FieldNumber = 16;
  inline ::google::protobuf::int32 reward_exp1() const;
  inline void set_reward_exp1(::google::protobuf::int32 value);
  
  // required int32 reward_exp2 = 17;
  inline bool has_reward_exp2() const;
  inline void clear_reward_exp2();
  static const int kRewardExp2FieldNumber = 17;
  inline ::google::protobuf::int32 reward_exp2() const;
  inline void set_reward_exp2(::google::protobuf::int32 value);
  
  // required int64 reward_item1 = 18;
  inline bool has_reward_item1() const;
  inline void clear_reward_item1();
  static const int kRewardItem1FieldNumber = 18;
  inline ::google::protobuf::int64 reward_item1() const;
  inline void set_reward_item1(::google::protobuf::int64 value);
  
  // required int64 reward_item2 = 19;
  inline bool has_reward_item2() const;
  inline void clear_reward_item2();
  static const int kRewardItem2FieldNumber = 19;
  inline ::google::protobuf::int64 reward_item2() const;
  inline void set_reward_item2(::google::protobuf::int64 value);
  
  // required int32 reward_gamemoney1 = 20;
  inline bool has_reward_gamemoney1() const;
  inline void clear_reward_gamemoney1();
  static const int kRewardGamemoney1FieldNumber = 20;
  inline ::google::protobuf::int32 reward_gamemoney1() const;
  inline void set_reward_gamemoney1(::google::protobuf::int32 value);
  
  // required int32 reward_gamemoney2 = 21;
  inline bool has_reward_gamemoney2() const;
  inline void clear_reward_gamemoney2();
  static const int kRewardGamemoney2FieldNumber = 21;
  inline ::google::protobuf::int32 reward_gamemoney2() const;
  inline void set_reward_gamemoney2(::google::protobuf::int32 value);
  
  // required int32 score1 = 22;
  inline bool has_score1() const;
  inline void clear_score1();
  static const int kScore1FieldNumber = 22;
  inline ::google::protobuf::int32 score1() const;
  inline void set_score1(::google::protobuf::int32 value);
  
  // required int32 score2 = 23;
  inline bool has_score2() const;
  inline void clear_score2();
  static const int kScore2FieldNumber = 23;
  inline ::google::protobuf::int32 score2() const;
  inline void set_score2(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Tbl_Result)
 private:
  inline void set_has_grid();
  inline void clear_has_grid();
  inline void set_has_is_singlemode();
  inline void clear_has_is_singlemode();
  inline void set_has_ppid1();
  inline void clear_has_ppid1();
  inline void set_has_uid1();
  inline void clear_has_uid1();
  inline void set_has_uname1();
  inline void clear_has_uname1();
  inline void set_has_pid_better1();
  inline void clear_has_pid_better1();
  inline void set_has_pid_pitcher1();
  inline void clear_has_pid_pitcher1();
  inline void set_has_ppid2();
  inline void clear_has_ppid2();
  inline void set_has_uid2();
  inline void clear_has_uid2();
  inline void set_has_uname2();
  inline void clear_has_uname2();
  inline void set_has_pid_better2();
  inline void clear_has_pid_better2();
  inline void set_has_pid_pitcher2();
  inline void clear_has_pid_pitcher2();
  inline void set_has_time_start();
  inline void clear_has_time_start();
  inline void set_has_time_end();
  inline void clear_has_time_end();
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_reward_exp1();
  inline void clear_has_reward_exp1();
  inline void set_has_reward_exp2();
  inline void clear_has_reward_exp2();
  inline void set_has_reward_item1();
  inline void clear_has_reward_item1();
  inline void set_has_reward_item2();
  inline void clear_has_reward_item2();
  inline void set_has_reward_gamemoney1();
  inline void clear_has_reward_gamemoney1();
  inline void set_has_reward_gamemoney2();
  inline void clear_has_reward_gamemoney2();
  inline void set_has_score1();
  inline void clear_has_score1();
  inline void set_has_score2();
  inline void clear_has_score2();
  
  ::google::protobuf::int64 grid_;
  bool is_singlemode_;
  ::google::protobuf::int32 ppid1_;
  ::google::protobuf::int64 uid1_;
  ::std::string* uname1_;
  ::google::protobuf::int64 pid_better1_;
  ::google::protobuf::int64 pid_pitcher1_;
  ::google::protobuf::int64 uid2_;
  ::std::string* uname2_;
  ::google::protobuf::int64 pid_better2_;
  ::google::protobuf::int64 pid_pitcher2_;
  ::google::protobuf::int32 ppid2_;
  ::google::protobuf::int32 reward_exp1_;
  ::std::string* time_start_;
  ::std::string* time_end_;
  ::google::protobuf::int64 winner_;
  ::google::protobuf::int64 reward_item1_;
  ::google::protobuf::int32 reward_exp2_;
  ::google::protobuf::int32 reward_gamemoney1_;
  ::google::protobuf::int64 reward_item2_;
  ::google::protobuf::int32 reward_gamemoney2_;
  ::google::protobuf::int32 score1_;
  ::google::protobuf::int32 score2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static Tbl_Result* default_instance_;
};
// -------------------------------------------------------------------

class Tbl_RoundResult : public ::google::protobuf::MessageLite {
 public:
  Tbl_RoundResult();
  virtual ~Tbl_RoundResult();
  
  Tbl_RoundResult(const Tbl_RoundResult& from);
  
  inline Tbl_RoundResult& operator=(const Tbl_RoundResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Tbl_RoundResult& default_instance();
  
  void Swap(Tbl_RoundResult* other);
  
  // implements Message ----------------------------------------------
  
  Tbl_RoundResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Tbl_RoundResult& from);
  void MergeFrom(const Tbl_RoundResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 grid2 = 1;
  inline bool has_grid2() const;
  inline void clear_grid2();
  static const int kGrid2FieldNumber = 1;
  inline ::google::protobuf::int64 grid2() const;
  inline void set_grid2(::google::protobuf::int64 value);
  
  // required int64 grid = 2;
  inline bool has_grid() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 2;
  inline ::google::protobuf::int64 grid() const;
  inline void set_grid(::google::protobuf::int64 value);
  
  // required int32 round_number = 3;
  inline bool has_round_number() const;
  inline void clear_round_number();
  static const int kRoundNumberFieldNumber = 3;
  inline ::google::protobuf::int32 round_number() const;
  inline void set_round_number(::google::protobuf::int32 value);
  
  // required int64 pid_better = 4;
  inline bool has_pid_better() const;
  inline void clear_pid_better();
  static const int kPidBetterFieldNumber = 4;
  inline ::google::protobuf::int64 pid_better() const;
  inline void set_pid_better(::google::protobuf::int64 value);
  
  // required int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // required int32 base_runner_count = 6;
  inline bool has_base_runner_count() const;
  inline void clear_base_runner_count();
  static const int kBaseRunnerCountFieldNumber = 6;
  inline ::google::protobuf::int32 base_runner_count() const;
  inline void set_base_runner_count(::google::protobuf::int32 value);
  
  // required int32 hit_type = 7;
  inline bool has_hit_type() const;
  inline void clear_hit_type();
  static const int kHitTypeFieldNumber = 7;
  inline ::google::protobuf::int32 hit_type() const;
  inline void set_hit_type(::google::protobuf::int32 value);
  
  // required int32 strike = 8;
  inline bool has_strike() const;
  inline void clear_strike();
  static const int kStrikeFieldNumber = 8;
  inline ::google::protobuf::int32 strike() const;
  inline void set_strike(::google::protobuf::int32 value);
  
  // required int32 foul = 9;
  inline bool has_foul() const;
  inline void clear_foul();
  static const int kFoulFieldNumber = 9;
  inline ::google::protobuf::int32 foul() const;
  inline void set_foul(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Tbl_RoundResult)
 private:
  inline void set_has_grid2();
  inline void clear_has_grid2();
  inline void set_has_grid();
  inline void clear_has_grid();
  inline void set_has_round_number();
  inline void clear_has_round_number();
  inline void set_has_pid_better();
  inline void clear_has_pid_better();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_base_runner_count();
  inline void clear_has_base_runner_count();
  inline void set_has_hit_type();
  inline void clear_has_hit_type();
  inline void set_has_strike();
  inline void clear_has_strike();
  inline void set_has_foul();
  inline void clear_has_foul();
  
  ::google::protobuf::int64 grid2_;
  ::google::protobuf::int64 grid_;
  ::google::protobuf::int64 pid_better_;
  ::google::protobuf::int32 round_number_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 base_runner_count_;
  ::google::protobuf::int32 hit_type_;
  ::google::protobuf::int32 strike_;
  ::google::protobuf::int32 foul_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static Tbl_RoundResult* default_instance_;
};
// -------------------------------------------------------------------

class Tbl_User : public ::google::protobuf::MessageLite {
 public:
  Tbl_User();
  virtual ~Tbl_User();
  
  Tbl_User(const Tbl_User& from);
  
  inline Tbl_User& operator=(const Tbl_User& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Tbl_User& default_instance();
  
  void Swap(Tbl_User* other);
  
  // implements Message ----------------------------------------------
  
  Tbl_User* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Tbl_User& from);
  void MergeFrom(const Tbl_User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // required int32 ppid = 2;
  inline bool has_ppid() const;
  inline void clear_ppid();
  static const int kPpidFieldNumber = 2;
  inline ::google::protobuf::int32 ppid() const;
  inline void set_ppid(::google::protobuf::int32 value);
  
  // required string uname = 3;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 3;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  
  // required int32 pitcher_tot_win = 4;
  inline bool has_pitcher_tot_win() const;
  inline void clear_pitcher_tot_win();
  static const int kPitcherTotWinFieldNumber = 4;
  inline ::google::protobuf::int32 pitcher_tot_win() const;
  inline void set_pitcher_tot_win(::google::protobuf::int32 value);
  
  // required int32 pitcher_tot_lose = 5;
  inline bool has_pitcher_tot_lose() const;
  inline void clear_pitcher_tot_lose();
  static const int kPitcherTotLoseFieldNumber = 5;
  inline ::google::protobuf::int32 pitcher_tot_lose() const;
  inline void set_pitcher_tot_lose(::google::protobuf::int32 value);
  
  // required int32 pitcher_tot_strikeout = 6;
  inline bool has_pitcher_tot_strikeout() const;
  inline void clear_pitcher_tot_strikeout();
  static const int kPitcherTotStrikeoutFieldNumber = 6;
  inline ::google::protobuf::int32 pitcher_tot_strikeout() const;
  inline void set_pitcher_tot_strikeout(::google::protobuf::int32 value);
  
  // required int32 pitcher_tot_average_level = 7;
  inline bool has_pitcher_tot_average_level() const;
  inline void clear_pitcher_tot_average_level();
  static const int kPitcherTotAverageLevelFieldNumber = 7;
  inline ::google::protobuf::int32 pitcher_tot_average_level() const;
  inline void set_pitcher_tot_average_level(::google::protobuf::int32 value);
  
  // required int32 better_tot_win = 8;
  inline bool has_better_tot_win() const;
  inline void clear_better_tot_win();
  static const int kBetterTotWinFieldNumber = 8;
  inline ::google::protobuf::int32 better_tot_win() const;
  inline void set_better_tot_win(::google::protobuf::int32 value);
  
  // required int32 better_tot_lose = 9;
  inline bool has_better_tot_lose() const;
  inline void clear_better_tot_lose();
  static const int kBetterTotLoseFieldNumber = 9;
  inline ::google::protobuf::int32 better_tot_lose() const;
  inline void set_better_tot_lose(::google::protobuf::int32 value);
  
  // required int32 better_tot_homerun = 10;
  inline bool has_better_tot_homerun() const;
  inline void clear_better_tot_homerun();
  static const int kBetterTotHomerunFieldNumber = 10;
  inline ::google::protobuf::int32 better_tot_homerun() const;
  inline void set_better_tot_homerun(::google::protobuf::int32 value);
  
  // required int32 better_tot__average_level = 11;
  inline bool has_better_tot__average_level() const;
  inline void clear_better_tot__average_level();
  static const int kBetterTotAverageLevelFieldNumber = 11;
  inline ::google::protobuf::int32 better_tot__average_level() const;
  inline void set_better_tot__average_level(::google::protobuf::int32 value);
  
  // required int32 cash_item_buy_count = 12;
  inline bool has_cash_item_buy_count() const;
  inline void clear_cash_item_buy_count();
  static const int kCashItemBuyCountFieldNumber = 12;
  inline ::google::protobuf::int32 cash_item_buy_count() const;
  inline void set_cash_item_buy_count(::google::protobuf::int32 value);
  
  // required string playtime_first = 13;
  inline bool has_playtime_first() const;
  inline void clear_playtime_first();
  static const int kPlaytimeFirstFieldNumber = 13;
  inline const ::std::string& playtime_first() const;
  inline void set_playtime_first(const ::std::string& value);
  inline void set_playtime_first(const char* value);
  inline void set_playtime_first(const char* value, size_t size);
  inline ::std::string* mutable_playtime_first();
  inline ::std::string* release_playtime_first();
  
  // required string playtime_last = 14;
  inline bool has_playtime_last() const;
  inline void clear_playtime_last();
  static const int kPlaytimeLastFieldNumber = 14;
  inline const ::std::string& playtime_last() const;
  inline void set_playtime_last(const ::std::string& value);
  inline void set_playtime_last(const char* value);
  inline void set_playtime_last(const char* value, size_t size);
  inline ::std::string* mutable_playtime_last();
  inline ::std::string* release_playtime_last();
  
  // required int64 playtime_tot = 15;
  inline bool has_playtime_tot() const;
  inline void clear_playtime_tot();
  static const int kPlaytimeTotFieldNumber = 15;
  inline ::google::protobuf::int64 playtime_tot() const;
  inline void set_playtime_tot(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Tbl_User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_ppid();
  inline void clear_has_ppid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_pitcher_tot_win();
  inline void clear_has_pitcher_tot_win();
  inline void set_has_pitcher_tot_lose();
  inline void clear_has_pitcher_tot_lose();
  inline void set_has_pitcher_tot_strikeout();
  inline void clear_has_pitcher_tot_strikeout();
  inline void set_has_pitcher_tot_average_level();
  inline void clear_has_pitcher_tot_average_level();
  inline void set_has_better_tot_win();
  inline void clear_has_better_tot_win();
  inline void set_has_better_tot_lose();
  inline void clear_has_better_tot_lose();
  inline void set_has_better_tot_homerun();
  inline void clear_has_better_tot_homerun();
  inline void set_has_better_tot__average_level();
  inline void clear_has_better_tot__average_level();
  inline void set_has_cash_item_buy_count();
  inline void clear_has_cash_item_buy_count();
  inline void set_has_playtime_first();
  inline void clear_has_playtime_first();
  inline void set_has_playtime_last();
  inline void clear_has_playtime_last();
  inline void set_has_playtime_tot();
  inline void clear_has_playtime_tot();
  
  ::google::protobuf::int64 uid_;
  ::std::string* uname_;
  ::google::protobuf::int32 ppid_;
  ::google::protobuf::int32 pitcher_tot_win_;
  ::google::protobuf::int32 pitcher_tot_lose_;
  ::google::protobuf::int32 pitcher_tot_strikeout_;
  ::google::protobuf::int32 pitcher_tot_average_level_;
  ::google::protobuf::int32 better_tot_win_;
  ::google::protobuf::int32 better_tot_lose_;
  ::google::protobuf::int32 better_tot_homerun_;
  ::google::protobuf::int32 better_tot__average_level_;
  ::google::protobuf::int32 cash_item_buy_count_;
  ::std::string* playtime_first_;
  ::std::string* playtime_last_;
  ::google::protobuf::int64 playtime_tot_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_AssignDesc_excel_5fbaseball_5ftable_2eproto();
  friend void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static Tbl_User* default_instance_;
};
// ===================================================================


// ===================================================================

// Tbl__PlayerBase

// required int64 pid = 1;
inline bool Tbl__PlayerBase::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tbl__PlayerBase::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tbl__PlayerBase::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tbl__PlayerBase::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 Tbl__PlayerBase::pid() const {
  return pid_;
}
inline void Tbl__PlayerBase::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// required int32 sid = 2;
inline bool Tbl__PlayerBase::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tbl__PlayerBase::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tbl__PlayerBase::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tbl__PlayerBase::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::sid() const {
  return sid_;
}
inline void Tbl__PlayerBase::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// required int32 ppid = 3;
inline bool Tbl__PlayerBase::has_ppid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tbl__PlayerBase::set_has_ppid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tbl__PlayerBase::clear_has_ppid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tbl__PlayerBase::clear_ppid() {
  ppid_ = 0;
  clear_has_ppid();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::ppid() const {
  return ppid_;
}
inline void Tbl__PlayerBase::set_ppid(::google::protobuf::int32 value) {
  set_has_ppid();
  ppid_ = value;
}

// required string pname = 4;
inline bool Tbl__PlayerBase::has_pname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tbl__PlayerBase::set_has_pname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tbl__PlayerBase::clear_has_pname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tbl__PlayerBase::clear_pname() {
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    pname_->clear();
  }
  clear_has_pname();
}
inline const ::std::string& Tbl__PlayerBase::pname() const {
  return *pname_;
}
inline void Tbl__PlayerBase::set_pname(const ::std::string& value) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(value);
}
inline void Tbl__PlayerBase::set_pname(const char* value) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(value);
}
inline void Tbl__PlayerBase::set_pname(const char* value, size_t size) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl__PlayerBase::mutable_pname() {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  return pname_;
}
inline ::std::string* Tbl__PlayerBase::release_pname() {
  clear_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pname_;
    pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 city = 5;
inline bool Tbl__PlayerBase::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tbl__PlayerBase::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tbl__PlayerBase::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tbl__PlayerBase::clear_city() {
  city_ = 0;
  clear_has_city();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::city() const {
  return city_;
}
inline void Tbl__PlayerBase::set_city(::google::protobuf::int32 value) {
  set_has_city();
  city_ = value;
}

// required string initial_name = 6;
inline bool Tbl__PlayerBase::has_initial_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tbl__PlayerBase::set_has_initial_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tbl__PlayerBase::clear_has_initial_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tbl__PlayerBase::clear_initial_name() {
  if (initial_name_ != &::google::protobuf::internal::kEmptyString) {
    initial_name_->clear();
  }
  clear_has_initial_name();
}
inline const ::std::string& Tbl__PlayerBase::initial_name() const {
  return *initial_name_;
}
inline void Tbl__PlayerBase::set_initial_name(const ::std::string& value) {
  set_has_initial_name();
  if (initial_name_ == &::google::protobuf::internal::kEmptyString) {
    initial_name_ = new ::std::string;
  }
  initial_name_->assign(value);
}
inline void Tbl__PlayerBase::set_initial_name(const char* value) {
  set_has_initial_name();
  if (initial_name_ == &::google::protobuf::internal::kEmptyString) {
    initial_name_ = new ::std::string;
  }
  initial_name_->assign(value);
}
inline void Tbl__PlayerBase::set_initial_name(const char* value, size_t size) {
  set_has_initial_name();
  if (initial_name_ == &::google::protobuf::internal::kEmptyString) {
    initial_name_ = new ::std::string;
  }
  initial_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl__PlayerBase::mutable_initial_name() {
  set_has_initial_name();
  if (initial_name_ == &::google::protobuf::internal::kEmptyString) {
    initial_name_ = new ::std::string;
  }
  return initial_name_;
}
inline ::std::string* Tbl__PlayerBase::release_initial_name() {
  clear_has_initial_name();
  if (initial_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = initial_name_;
    initial_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 back_number = 7;
inline bool Tbl__PlayerBase::has_back_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tbl__PlayerBase::set_has_back_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tbl__PlayerBase::clear_has_back_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tbl__PlayerBase::clear_back_number() {
  back_number_ = 0;
  clear_has_back_number();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::back_number() const {
  return back_number_;
}
inline void Tbl__PlayerBase::set_back_number(::google::protobuf::int32 value) {
  set_has_back_number();
  back_number_ = value;
}

// required int32 age = 8;
inline bool Tbl__PlayerBase::has_age() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tbl__PlayerBase::set_has_age() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tbl__PlayerBase::clear_has_age() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tbl__PlayerBase::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::age() const {
  return age_;
}
inline void Tbl__PlayerBase::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}

// required int32 bady_type = 9;
inline bool Tbl__PlayerBase::has_bady_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tbl__PlayerBase::set_has_bady_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tbl__PlayerBase::clear_has_bady_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tbl__PlayerBase::clear_bady_type() {
  bady_type_ = 0;
  clear_has_bady_type();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::bady_type() const {
  return bady_type_;
}
inline void Tbl__PlayerBase::set_bady_type(::google::protobuf::int32 value) {
  set_has_bady_type();
  bady_type_ = value;
}

// required bool leftright_type = 10;
inline bool Tbl__PlayerBase::has_leftright_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tbl__PlayerBase::set_has_leftright_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tbl__PlayerBase::clear_has_leftright_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tbl__PlayerBase::clear_leftright_type() {
  leftright_type_ = false;
  clear_has_leftright_type();
}
inline bool Tbl__PlayerBase::leftright_type() const {
  return leftright_type_;
}
inline void Tbl__PlayerBase::set_leftright_type(bool value) {
  set_has_leftright_type();
  leftright_type_ = value;
}

// required int64 exp = 11;
inline bool Tbl__PlayerBase::has_exp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Tbl__PlayerBase::set_has_exp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Tbl__PlayerBase::clear_has_exp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Tbl__PlayerBase::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 Tbl__PlayerBase::exp() const {
  return exp_;
}
inline void Tbl__PlayerBase::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// required int32 questcomplete_count = 12;
inline bool Tbl__PlayerBase::has_questcomplete_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Tbl__PlayerBase::set_has_questcomplete_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Tbl__PlayerBase::clear_has_questcomplete_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Tbl__PlayerBase::clear_questcomplete_count() {
  questcomplete_count_ = 0;
  clear_has_questcomplete_count();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::questcomplete_count() const {
  return questcomplete_count_;
}
inline void Tbl__PlayerBase::set_questcomplete_count(::google::protobuf::int32 value) {
  set_has_questcomplete_count();
  questcomplete_count_ = value;
}

// required int32 win_continue = 13;
inline bool Tbl__PlayerBase::has_win_continue() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Tbl__PlayerBase::set_has_win_continue() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Tbl__PlayerBase::clear_has_win_continue() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Tbl__PlayerBase::clear_win_continue() {
  win_continue_ = 0;
  clear_has_win_continue();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::win_continue() const {
  return win_continue_;
}
inline void Tbl__PlayerBase::set_win_continue(::google::protobuf::int32 value) {
  set_has_win_continue();
  win_continue_ = value;
}

// required int32 lose_continue = 14;
inline bool Tbl__PlayerBase::has_lose_continue() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Tbl__PlayerBase::set_has_lose_continue() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Tbl__PlayerBase::clear_has_lose_continue() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Tbl__PlayerBase::clear_lose_continue() {
  lose_continue_ = 0;
  clear_has_lose_continue();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::lose_continue() const {
  return lose_continue_;
}
inline void Tbl__PlayerBase::set_lose_continue(::google::protobuf::int32 value) {
  set_has_lose_continue();
  lose_continue_ = value;
}

// required int64 last_game_result = 15;
inline bool Tbl__PlayerBase::has_last_game_result() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Tbl__PlayerBase::set_has_last_game_result() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Tbl__PlayerBase::clear_has_last_game_result() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Tbl__PlayerBase::clear_last_game_result() {
  last_game_result_ = GOOGLE_LONGLONG(0);
  clear_has_last_game_result();
}
inline ::google::protobuf::int64 Tbl__PlayerBase::last_game_result() const {
  return last_game_result_;
}
inline void Tbl__PlayerBase::set_last_game_result(::google::protobuf::int64 value) {
  set_has_last_game_result();
  last_game_result_ = value;
}

// required int32 win_tot = 16;
inline bool Tbl__PlayerBase::has_win_tot() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Tbl__PlayerBase::set_has_win_tot() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Tbl__PlayerBase::clear_has_win_tot() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Tbl__PlayerBase::clear_win_tot() {
  win_tot_ = 0;
  clear_has_win_tot();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::win_tot() const {
  return win_tot_;
}
inline void Tbl__PlayerBase::set_win_tot(::google::protobuf::int32 value) {
  set_has_win_tot();
  win_tot_ = value;
}

// required int32 lose_tot = 17;
inline bool Tbl__PlayerBase::has_lose_tot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Tbl__PlayerBase::set_has_lose_tot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Tbl__PlayerBase::clear_has_lose_tot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Tbl__PlayerBase::clear_lose_tot() {
  lose_tot_ = 0;
  clear_has_lose_tot();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::lose_tot() const {
  return lose_tot_;
}
inline void Tbl__PlayerBase::set_lose_tot(::google::protobuf::int32 value) {
  set_has_lose_tot();
  lose_tot_ = value;
}

// required int32 win_season = 18;
inline bool Tbl__PlayerBase::has_win_season() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Tbl__PlayerBase::set_has_win_season() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Tbl__PlayerBase::clear_has_win_season() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Tbl__PlayerBase::clear_win_season() {
  win_season_ = 0;
  clear_has_win_season();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::win_season() const {
  return win_season_;
}
inline void Tbl__PlayerBase::set_win_season(::google::protobuf::int32 value) {
  set_has_win_season();
  win_season_ = value;
}

// required int32 lose_season = 19;
inline bool Tbl__PlayerBase::has_lose_season() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Tbl__PlayerBase::set_has_lose_season() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Tbl__PlayerBase::clear_has_lose_season() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Tbl__PlayerBase::clear_lose_season() {
  lose_season_ = 0;
  clear_has_lose_season();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::lose_season() const {
  return lose_season_;
}
inline void Tbl__PlayerBase::set_lose_season(::google::protobuf::int32 value) {
  set_has_lose_season();
  lose_season_ = value;
}

// required string skill_sticker = 20;
inline bool Tbl__PlayerBase::has_skill_sticker() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Tbl__PlayerBase::set_has_skill_sticker() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Tbl__PlayerBase::clear_has_skill_sticker() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Tbl__PlayerBase::clear_skill_sticker() {
  if (skill_sticker_ != &::google::protobuf::internal::kEmptyString) {
    skill_sticker_->clear();
  }
  clear_has_skill_sticker();
}
inline const ::std::string& Tbl__PlayerBase::skill_sticker() const {
  return *skill_sticker_;
}
inline void Tbl__PlayerBase::set_skill_sticker(const ::std::string& value) {
  set_has_skill_sticker();
  if (skill_sticker_ == &::google::protobuf::internal::kEmptyString) {
    skill_sticker_ = new ::std::string;
  }
  skill_sticker_->assign(value);
}
inline void Tbl__PlayerBase::set_skill_sticker(const char* value) {
  set_has_skill_sticker();
  if (skill_sticker_ == &::google::protobuf::internal::kEmptyString) {
    skill_sticker_ = new ::std::string;
  }
  skill_sticker_->assign(value);
}
inline void Tbl__PlayerBase::set_skill_sticker(const char* value, size_t size) {
  set_has_skill_sticker();
  if (skill_sticker_ == &::google::protobuf::internal::kEmptyString) {
    skill_sticker_ = new ::std::string;
  }
  skill_sticker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl__PlayerBase::mutable_skill_sticker() {
  set_has_skill_sticker();
  if (skill_sticker_ == &::google::protobuf::internal::kEmptyString) {
    skill_sticker_ = new ::std::string;
  }
  return skill_sticker_;
}
inline ::std::string* Tbl__PlayerBase::release_skill_sticker() {
  clear_has_skill_sticker();
  if (skill_sticker_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_sticker_;
    skill_sticker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 elo_point = 21;
inline bool Tbl__PlayerBase::has_elo_point() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Tbl__PlayerBase::set_has_elo_point() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Tbl__PlayerBase::clear_has_elo_point() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Tbl__PlayerBase::clear_elo_point() {
  elo_point_ = 0;
  clear_has_elo_point();
}
inline ::google::protobuf::int32 Tbl__PlayerBase::elo_point() const {
  return elo_point_;
}
inline void Tbl__PlayerBase::set_elo_point(::google::protobuf::int32 value) {
  set_has_elo_point();
  elo_point_ = value;
}

// required bool onoff_type = 22;
inline bool Tbl__PlayerBase::has_onoff_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Tbl__PlayerBase::set_has_onoff_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Tbl__PlayerBase::clear_has_onoff_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Tbl__PlayerBase::clear_onoff_type() {
  onoff_type_ = false;
  clear_has_onoff_type();
}
inline bool Tbl__PlayerBase::onoff_type() const {
  return onoff_type_;
}
inline void Tbl__PlayerBase::set_onoff_type(bool value) {
  set_has_onoff_type();
  onoff_type_ = value;
}

// -------------------------------------------------------------------

// Tbl_Item

// required int64 iid = 1;
inline bool Tbl_Item::has_iid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tbl_Item::set_has_iid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tbl_Item::clear_has_iid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tbl_Item::clear_iid() {
  iid_ = GOOGLE_LONGLONG(0);
  clear_has_iid();
}
inline ::google::protobuf::int64 Tbl_Item::iid() const {
  return iid_;
}
inline void Tbl_Item::set_iid(::google::protobuf::int64 value) {
  set_has_iid();
  iid_ = value;
}

// required int32 sid = 2;
inline bool Tbl_Item::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tbl_Item::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tbl_Item::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tbl_Item::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 Tbl_Item::sid() const {
  return sid_;
}
inline void Tbl_Item::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// required int32 category = 3;
inline bool Tbl_Item::has_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tbl_Item::set_has_category() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tbl_Item::clear_has_category() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tbl_Item::clear_category() {
  category_ = 0;
  clear_has_category();
}
inline ::google::protobuf::int32 Tbl_Item::category() const {
  return category_;
}
inline void Tbl_Item::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
}

// required int64 pid = 4;
inline bool Tbl_Item::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tbl_Item::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tbl_Item::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tbl_Item::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 Tbl_Item::pid() const {
  return pid_;
}
inline void Tbl_Item::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
}

// required string upgrade_level = 5;
inline bool Tbl_Item::has_upgrade_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tbl_Item::set_has_upgrade_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tbl_Item::clear_has_upgrade_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tbl_Item::clear_upgrade_level() {
  if (upgrade_level_ != &::google::protobuf::internal::kEmptyString) {
    upgrade_level_->clear();
  }
  clear_has_upgrade_level();
}
inline const ::std::string& Tbl_Item::upgrade_level() const {
  return *upgrade_level_;
}
inline void Tbl_Item::set_upgrade_level(const ::std::string& value) {
  set_has_upgrade_level();
  if (upgrade_level_ == &::google::protobuf::internal::kEmptyString) {
    upgrade_level_ = new ::std::string;
  }
  upgrade_level_->assign(value);
}
inline void Tbl_Item::set_upgrade_level(const char* value) {
  set_has_upgrade_level();
  if (upgrade_level_ == &::google::protobuf::internal::kEmptyString) {
    upgrade_level_ = new ::std::string;
  }
  upgrade_level_->assign(value);
}
inline void Tbl_Item::set_upgrade_level(const char* value, size_t size) {
  set_has_upgrade_level();
  if (upgrade_level_ == &::google::protobuf::internal::kEmptyString) {
    upgrade_level_ = new ::std::string;
  }
  upgrade_level_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_Item::mutable_upgrade_level() {
  set_has_upgrade_level();
  if (upgrade_level_ == &::google::protobuf::internal::kEmptyString) {
    upgrade_level_ = new ::std::string;
  }
  return upgrade_level_;
}
inline ::std::string* Tbl_Item::release_upgrade_level() {
  clear_has_upgrade_level();
  if (upgrade_level_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = upgrade_level_;
    upgrade_level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string etc_info = 6;
inline bool Tbl_Item::has_etc_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tbl_Item::set_has_etc_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tbl_Item::clear_has_etc_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tbl_Item::clear_etc_info() {
  if (etc_info_ != &::google::protobuf::internal::kEmptyString) {
    etc_info_->clear();
  }
  clear_has_etc_info();
}
inline const ::std::string& Tbl_Item::etc_info() const {
  return *etc_info_;
}
inline void Tbl_Item::set_etc_info(const ::std::string& value) {
  set_has_etc_info();
  if (etc_info_ == &::google::protobuf::internal::kEmptyString) {
    etc_info_ = new ::std::string;
  }
  etc_info_->assign(value);
}
inline void Tbl_Item::set_etc_info(const char* value) {
  set_has_etc_info();
  if (etc_info_ == &::google::protobuf::internal::kEmptyString) {
    etc_info_ = new ::std::string;
  }
  etc_info_->assign(value);
}
inline void Tbl_Item::set_etc_info(const char* value, size_t size) {
  set_has_etc_info();
  if (etc_info_ == &::google::protobuf::internal::kEmptyString) {
    etc_info_ = new ::std::string;
  }
  etc_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_Item::mutable_etc_info() {
  set_has_etc_info();
  if (etc_info_ == &::google::protobuf::internal::kEmptyString) {
    etc_info_ = new ::std::string;
  }
  return etc_info_;
}
inline ::std::string* Tbl_Item::release_etc_info() {
  clear_has_etc_info();
  if (etc_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = etc_info_;
    etc_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string grade = 7;
inline bool Tbl_Item::has_grade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tbl_Item::set_has_grade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tbl_Item::clear_has_grade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tbl_Item::clear_grade() {
  if (grade_ != &::google::protobuf::internal::kEmptyString) {
    grade_->clear();
  }
  clear_has_grade();
}
inline const ::std::string& Tbl_Item::grade() const {
  return *grade_;
}
inline void Tbl_Item::set_grade(const ::std::string& value) {
  set_has_grade();
  if (grade_ == &::google::protobuf::internal::kEmptyString) {
    grade_ = new ::std::string;
  }
  grade_->assign(value);
}
inline void Tbl_Item::set_grade(const char* value) {
  set_has_grade();
  if (grade_ == &::google::protobuf::internal::kEmptyString) {
    grade_ = new ::std::string;
  }
  grade_->assign(value);
}
inline void Tbl_Item::set_grade(const char* value, size_t size) {
  set_has_grade();
  if (grade_ == &::google::protobuf::internal::kEmptyString) {
    grade_ = new ::std::string;
  }
  grade_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_Item::mutable_grade() {
  set_has_grade();
  if (grade_ == &::google::protobuf::internal::kEmptyString) {
    grade_ = new ::std::string;
  }
  return grade_;
}
inline ::std::string* Tbl_Item::release_grade() {
  clear_has_grade();
  if (grade_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grade_;
    grade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 bought_real_money = 8;
inline bool Tbl_Item::has_bought_real_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tbl_Item::set_has_bought_real_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tbl_Item::clear_has_bought_real_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tbl_Item::clear_bought_real_money() {
  bought_real_money_ = 0;
  clear_has_bought_real_money();
}
inline ::google::protobuf::int32 Tbl_Item::bought_real_money() const {
  return bought_real_money_;
}
inline void Tbl_Item::set_bought_real_money(::google::protobuf::int32 value) {
  set_has_bought_real_money();
  bought_real_money_ = value;
}

// required int32 bought_point_money = 9;
inline bool Tbl_Item::has_bought_point_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tbl_Item::set_has_bought_point_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tbl_Item::clear_has_bought_point_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tbl_Item::clear_bought_point_money() {
  bought_point_money_ = 0;
  clear_has_bought_point_money();
}
inline ::google::protobuf::int32 Tbl_Item::bought_point_money() const {
  return bought_point_money_;
}
inline void Tbl_Item::set_bought_point_money(::google::protobuf::int32 value) {
  set_has_bought_point_money();
  bought_point_money_ = value;
}

// required int32 bought_game_money = 10;
inline bool Tbl_Item::has_bought_game_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tbl_Item::set_has_bought_game_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tbl_Item::clear_has_bought_game_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tbl_Item::clear_bought_game_money() {
  bought_game_money_ = 0;
  clear_has_bought_game_money();
}
inline ::google::protobuf::int32 Tbl_Item::bought_game_money() const {
  return bought_game_money_;
}
inline void Tbl_Item::set_bought_game_money(::google::protobuf::int32 value) {
  set_has_bought_game_money();
  bought_game_money_ = value;
}

// required bool is_used = 11;
inline bool Tbl_Item::has_is_used() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Tbl_Item::set_has_is_used() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Tbl_Item::clear_has_is_used() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Tbl_Item::clear_is_used() {
  is_used_ = false;
  clear_has_is_used();
}
inline bool Tbl_Item::is_used() const {
  return is_used_;
}
inline void Tbl_Item::set_is_used(bool value) {
  set_has_is_used();
  is_used_ = value;
}

// required bool is_confirmed = 12;
inline bool Tbl_Item::has_is_confirmed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Tbl_Item::set_has_is_confirmed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Tbl_Item::clear_has_is_confirmed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Tbl_Item::clear_is_confirmed() {
  is_confirmed_ = false;
  clear_has_is_confirmed();
}
inline bool Tbl_Item::is_confirmed() const {
  return is_confirmed_;
}
inline void Tbl_Item::set_is_confirmed(bool value) {
  set_has_is_confirmed();
  is_confirmed_ = value;
}

// required int32 usable_hour = 13;
inline bool Tbl_Item::has_usable_hour() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Tbl_Item::set_has_usable_hour() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Tbl_Item::clear_has_usable_hour() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Tbl_Item::clear_usable_hour() {
  usable_hour_ = 0;
  clear_has_usable_hour();
}
inline ::google::protobuf::int32 Tbl_Item::usable_hour() const {
  return usable_hour_;
}
inline void Tbl_Item::set_usable_hour(::google::protobuf::int32 value) {
  set_has_usable_hour();
  usable_hour_ = value;
}

// required int32 used_game_count = 14;
inline bool Tbl_Item::has_used_game_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Tbl_Item::set_has_used_game_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Tbl_Item::clear_has_used_game_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Tbl_Item::clear_used_game_count() {
  used_game_count_ = 0;
  clear_has_used_game_count();
}
inline ::google::protobuf::int32 Tbl_Item::used_game_count() const {
  return used_game_count_;
}
inline void Tbl_Item::set_used_game_count(::google::protobuf::int32 value) {
  set_has_used_game_count();
  used_game_count_ = value;
}

// -------------------------------------------------------------------

// Tbl_PlayerBetter

// required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
inline bool Tbl_PlayerBetter::has_m_tbl__playerbase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tbl_PlayerBetter::set_has_m_tbl__playerbase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tbl_PlayerBetter::clear_has_m_tbl__playerbase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tbl_PlayerBetter::clear_m_tbl__playerbase() {
  if (m_tbl__playerbase_ != NULL) m_tbl__playerbase_->::Tbl__PlayerBase::Clear();
  clear_has_m_tbl__playerbase();
}
inline const ::Tbl__PlayerBase& Tbl_PlayerBetter::m_tbl__playerbase() const {
  return m_tbl__playerbase_ != NULL ? *m_tbl__playerbase_ : *default_instance_->m_tbl__playerbase_;
}
inline ::Tbl__PlayerBase* Tbl_PlayerBetter::mutable_m_tbl__playerbase() {
  set_has_m_tbl__playerbase();
  if (m_tbl__playerbase_ == NULL) m_tbl__playerbase_ = new ::Tbl__PlayerBase;
  return m_tbl__playerbase_;
}
inline ::Tbl__PlayerBase* Tbl_PlayerBetter::release_m_tbl__playerbase() {
  clear_has_m_tbl__playerbase();
  ::Tbl__PlayerBase* temp = m_tbl__playerbase_;
  m_tbl__playerbase_ = NULL;
  return temp;
}

// required int32 batting_average = 2;
inline bool Tbl_PlayerBetter::has_batting_average() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tbl_PlayerBetter::set_has_batting_average() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tbl_PlayerBetter::clear_has_batting_average() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tbl_PlayerBetter::clear_batting_average() {
  batting_average_ = 0;
  clear_has_batting_average();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::batting_average() const {
  return batting_average_;
}
inline void Tbl_PlayerBetter::set_batting_average(::google::protobuf::int32 value) {
  set_has_batting_average();
  batting_average_ = value;
}

// required int32 continue_homerun_count = 3;
inline bool Tbl_PlayerBetter::has_continue_homerun_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tbl_PlayerBetter::set_has_continue_homerun_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tbl_PlayerBetter::clear_has_continue_homerun_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tbl_PlayerBetter::clear_continue_homerun_count() {
  continue_homerun_count_ = 0;
  clear_has_continue_homerun_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::continue_homerun_count() const {
  return continue_homerun_count_;
}
inline void Tbl_PlayerBetter::set_continue_homerun_count(::google::protobuf::int32 value) {
  set_has_continue_homerun_count();
  continue_homerun_count_ = value;
}

// required int32 homeruntotal_count = 4;
inline bool Tbl_PlayerBetter::has_homeruntotal_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tbl_PlayerBetter::set_has_homeruntotal_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tbl_PlayerBetter::clear_has_homeruntotal_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tbl_PlayerBetter::clear_homeruntotal_count() {
  homeruntotal_count_ = 0;
  clear_has_homeruntotal_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::homeruntotal_count() const {
  return homeruntotal_count_;
}
inline void Tbl_PlayerBetter::set_homeruntotal_count(::google::protobuf::int32 value) {
  set_has_homeruntotal_count();
  homeruntotal_count_ = value;
}

// required int32 single_homerun_count = 5;
inline bool Tbl_PlayerBetter::has_single_homerun_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tbl_PlayerBetter::set_has_single_homerun_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tbl_PlayerBetter::clear_has_single_homerun_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tbl_PlayerBetter::clear_single_homerun_count() {
  single_homerun_count_ = 0;
  clear_has_single_homerun_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::single_homerun_count() const {
  return single_homerun_count_;
}
inline void Tbl_PlayerBetter::set_single_homerun_count(::google::protobuf::int32 value) {
  set_has_single_homerun_count();
  single_homerun_count_ = value;
}

// required int32 tworun_homerun_count = 6;
inline bool Tbl_PlayerBetter::has_tworun_homerun_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tbl_PlayerBetter::set_has_tworun_homerun_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tbl_PlayerBetter::clear_has_tworun_homerun_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tbl_PlayerBetter::clear_tworun_homerun_count() {
  tworun_homerun_count_ = 0;
  clear_has_tworun_homerun_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::tworun_homerun_count() const {
  return tworun_homerun_count_;
}
inline void Tbl_PlayerBetter::set_tworun_homerun_count(::google::protobuf::int32 value) {
  set_has_tworun_homerun_count();
  tworun_homerun_count_ = value;
}

// required int32 threerun_homerun_count = 7;
inline bool Tbl_PlayerBetter::has_threerun_homerun_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tbl_PlayerBetter::set_has_threerun_homerun_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tbl_PlayerBetter::clear_has_threerun_homerun_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tbl_PlayerBetter::clear_threerun_homerun_count() {
  threerun_homerun_count_ = 0;
  clear_has_threerun_homerun_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::threerun_homerun_count() const {
  return threerun_homerun_count_;
}
inline void Tbl_PlayerBetter::set_threerun_homerun_count(::google::protobuf::int32 value) {
  set_has_threerun_homerun_count();
  threerun_homerun_count_ = value;
}

// required int32 grandslam_homerun_count = 8;
inline bool Tbl_PlayerBetter::has_grandslam_homerun_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tbl_PlayerBetter::set_has_grandslam_homerun_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tbl_PlayerBetter::clear_has_grandslam_homerun_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tbl_PlayerBetter::clear_grandslam_homerun_count() {
  grandslam_homerun_count_ = 0;
  clear_has_grandslam_homerun_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::grandslam_homerun_count() const {
  return grandslam_homerun_count_;
}
inline void Tbl_PlayerBetter::set_grandslam_homerun_count(::google::protobuf::int32 value) {
  set_has_grandslam_homerun_count();
  grandslam_homerun_count_ = value;
}

// required int32 one_hit_count = 9;
inline bool Tbl_PlayerBetter::has_one_hit_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tbl_PlayerBetter::set_has_one_hit_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tbl_PlayerBetter::clear_has_one_hit_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tbl_PlayerBetter::clear_one_hit_count() {
  one_hit_count_ = 0;
  clear_has_one_hit_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::one_hit_count() const {
  return one_hit_count_;
}
inline void Tbl_PlayerBetter::set_one_hit_count(::google::protobuf::int32 value) {
  set_has_one_hit_count();
  one_hit_count_ = value;
}

// required int32 double_hit_count = 10;
inline bool Tbl_PlayerBetter::has_double_hit_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tbl_PlayerBetter::set_has_double_hit_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tbl_PlayerBetter::clear_has_double_hit_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tbl_PlayerBetter::clear_double_hit_count() {
  double_hit_count_ = 0;
  clear_has_double_hit_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::double_hit_count() const {
  return double_hit_count_;
}
inline void Tbl_PlayerBetter::set_double_hit_count(::google::protobuf::int32 value) {
  set_has_double_hit_count();
  double_hit_count_ = value;
}

// required int32 triple_hit_count = 11;
inline bool Tbl_PlayerBetter::has_triple_hit_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Tbl_PlayerBetter::set_has_triple_hit_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Tbl_PlayerBetter::clear_has_triple_hit_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Tbl_PlayerBetter::clear_triple_hit_count() {
  triple_hit_count_ = 0;
  clear_has_triple_hit_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::triple_hit_count() const {
  return triple_hit_count_;
}
inline void Tbl_PlayerBetter::set_triple_hit_count(::google::protobuf::int32 value) {
  set_has_triple_hit_count();
  triple_hit_count_ = value;
}

// required int32 foul_hit_count = 12;
inline bool Tbl_PlayerBetter::has_foul_hit_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Tbl_PlayerBetter::set_has_foul_hit_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Tbl_PlayerBetter::clear_has_foul_hit_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Tbl_PlayerBetter::clear_foul_hit_count() {
  foul_hit_count_ = 0;
  clear_has_foul_hit_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::foul_hit_count() const {
  return foul_hit_count_;
}
inline void Tbl_PlayerBetter::set_foul_hit_count(::google::protobuf::int32 value) {
  set_has_foul_hit_count();
  foul_hit_count_ = value;
}

// required int32 out_hit_count = 13;
inline bool Tbl_PlayerBetter::has_out_hit_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Tbl_PlayerBetter::set_has_out_hit_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Tbl_PlayerBetter::clear_has_out_hit_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Tbl_PlayerBetter::clear_out_hit_count() {
  out_hit_count_ = 0;
  clear_has_out_hit_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::out_hit_count() const {
  return out_hit_count_;
}
inline void Tbl_PlayerBetter::set_out_hit_count(::google::protobuf::int32 value) {
  set_has_out_hit_count();
  out_hit_count_ = value;
}

// required int32 score_count = 14;
inline bool Tbl_PlayerBetter::has_score_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Tbl_PlayerBetter::set_has_score_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Tbl_PlayerBetter::clear_has_score_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Tbl_PlayerBetter::clear_score_count() {
  score_count_ = 0;
  clear_has_score_count();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::score_count() const {
  return score_count_;
}
inline void Tbl_PlayerBetter::set_score_count(::google::protobuf::int32 value) {
  set_has_score_count();
  score_count_ = value;
}

// required int32 betting_type = 15;
inline bool Tbl_PlayerBetter::has_betting_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Tbl_PlayerBetter::set_has_betting_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Tbl_PlayerBetter::clear_has_betting_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Tbl_PlayerBetter::clear_betting_type() {
  betting_type_ = 0;
  clear_has_betting_type();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::betting_type() const {
  return betting_type_;
}
inline void Tbl_PlayerBetter::set_betting_type(::google::protobuf::int32 value) {
  set_has_betting_type();
  betting_type_ = value;
}

// required int32 better_power = 16;
inline bool Tbl_PlayerBetter::has_better_power() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Tbl_PlayerBetter::set_has_better_power() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Tbl_PlayerBetter::clear_has_better_power() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Tbl_PlayerBetter::clear_better_power() {
  better_power_ = 0;
  clear_has_better_power();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::better_power() const {
  return better_power_;
}
inline void Tbl_PlayerBetter::set_better_power(::google::protobuf::int32 value) {
  set_has_better_power();
  better_power_ = value;
}

// required int32 better_focus = 17;
inline bool Tbl_PlayerBetter::has_better_focus() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Tbl_PlayerBetter::set_has_better_focus() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Tbl_PlayerBetter::clear_has_better_focus() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Tbl_PlayerBetter::clear_better_focus() {
  better_focus_ = 0;
  clear_has_better_focus();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::better_focus() const {
  return better_focus_;
}
inline void Tbl_PlayerBetter::set_better_focus(::google::protobuf::int32 value) {
  set_has_better_focus();
  better_focus_ = value;
}

// required int32 better_power_buff = 18;
inline bool Tbl_PlayerBetter::has_better_power_buff() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Tbl_PlayerBetter::set_has_better_power_buff() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Tbl_PlayerBetter::clear_has_better_power_buff() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Tbl_PlayerBetter::clear_better_power_buff() {
  better_power_buff_ = 0;
  clear_has_better_power_buff();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::better_power_buff() const {
  return better_power_buff_;
}
inline void Tbl_PlayerBetter::set_better_power_buff(::google::protobuf::int32 value) {
  set_has_better_power_buff();
  better_power_buff_ = value;
}

// required int32 better_focus_buff = 19;
inline bool Tbl_PlayerBetter::has_better_focus_buff() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Tbl_PlayerBetter::set_has_better_focus_buff() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Tbl_PlayerBetter::clear_has_better_focus_buff() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Tbl_PlayerBetter::clear_better_focus_buff() {
  better_focus_buff_ = 0;
  clear_has_better_focus_buff();
}
inline ::google::protobuf::int32 Tbl_PlayerBetter::better_focus_buff() const {
  return better_focus_buff_;
}
inline void Tbl_PlayerBetter::set_better_focus_buff(::google::protobuf::int32 value) {
  set_has_better_focus_buff();
  better_focus_buff_ = value;
}

// -------------------------------------------------------------------

// Tbl_PlayerPitcher

// required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
inline bool Tbl_PlayerPitcher::has_m_tbl__playerbase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_m_tbl__playerbase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tbl_PlayerPitcher::clear_has_m_tbl__playerbase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tbl_PlayerPitcher::clear_m_tbl__playerbase() {
  if (m_tbl__playerbase_ != NULL) m_tbl__playerbase_->::Tbl__PlayerBase::Clear();
  clear_has_m_tbl__playerbase();
}
inline const ::Tbl__PlayerBase& Tbl_PlayerPitcher::m_tbl__playerbase() const {
  return m_tbl__playerbase_ != NULL ? *m_tbl__playerbase_ : *default_instance_->m_tbl__playerbase_;
}
inline ::Tbl__PlayerBase* Tbl_PlayerPitcher::mutable_m_tbl__playerbase() {
  set_has_m_tbl__playerbase();
  if (m_tbl__playerbase_ == NULL) m_tbl__playerbase_ = new ::Tbl__PlayerBase;
  return m_tbl__playerbase_;
}
inline ::Tbl__PlayerBase* Tbl_PlayerPitcher::release_m_tbl__playerbase() {
  clear_has_m_tbl__playerbase();
  ::Tbl__PlayerBase* temp = m_tbl__playerbase_;
  m_tbl__playerbase_ = NULL;
  return temp;
}

// required int32 pitching_average = 2;
inline bool Tbl_PlayerPitcher::has_pitching_average() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitching_average() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tbl_PlayerPitcher::clear_has_pitching_average() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tbl_PlayerPitcher::clear_pitching_average() {
  pitching_average_ = 0;
  clear_has_pitching_average();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitching_average() const {
  return pitching_average_;
}
inline void Tbl_PlayerPitcher::set_pitching_average(::google::protobuf::int32 value) {
  set_has_pitching_average();
  pitching_average_ = value;
}

// required int32 hit_count = 3;
inline bool Tbl_PlayerPitcher::has_hit_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_hit_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tbl_PlayerPitcher::clear_has_hit_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tbl_PlayerPitcher::clear_hit_count() {
  hit_count_ = 0;
  clear_has_hit_count();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::hit_count() const {
  return hit_count_;
}
inline void Tbl_PlayerPitcher::set_hit_count(::google::protobuf::int32 value) {
  set_has_hit_count();
  hit_count_ = value;
}

// required int32 strikeout_count = 4;
inline bool Tbl_PlayerPitcher::has_strikeout_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_strikeout_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tbl_PlayerPitcher::clear_has_strikeout_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tbl_PlayerPitcher::clear_strikeout_count() {
  strikeout_count_ = 0;
  clear_has_strikeout_count();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::strikeout_count() const {
  return strikeout_count_;
}
inline void Tbl_PlayerPitcher::set_strikeout_count(::google::protobuf::int32 value) {
  set_has_strikeout_count();
  strikeout_count_ = value;
}

// required int32 homerun_pitching_count = 5;
inline bool Tbl_PlayerPitcher::has_homerun_pitching_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_homerun_pitching_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tbl_PlayerPitcher::clear_has_homerun_pitching_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tbl_PlayerPitcher::clear_homerun_pitching_count() {
  homerun_pitching_count_ = 0;
  clear_has_homerun_pitching_count();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::homerun_pitching_count() const {
  return homerun_pitching_count_;
}
inline void Tbl_PlayerPitcher::set_homerun_pitching_count(::google::protobuf::int32 value) {
  set_has_homerun_pitching_count();
  homerun_pitching_count_ = value;
}

// required int32 continue_strikeout_count = 6;
inline bool Tbl_PlayerPitcher::has_continue_strikeout_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_continue_strikeout_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tbl_PlayerPitcher::clear_has_continue_strikeout_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tbl_PlayerPitcher::clear_continue_strikeout_count() {
  continue_strikeout_count_ = 0;
  clear_has_continue_strikeout_count();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::continue_strikeout_count() const {
  return continue_strikeout_count_;
}
inline void Tbl_PlayerPitcher::set_continue_strikeout_count(::google::protobuf::int32 value) {
  set_has_continue_strikeout_count();
  continue_strikeout_count_ = value;
}

// required int32 continue_homerun_pitching_count = 7;
inline bool Tbl_PlayerPitcher::has_continue_homerun_pitching_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_continue_homerun_pitching_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tbl_PlayerPitcher::clear_has_continue_homerun_pitching_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tbl_PlayerPitcher::clear_continue_homerun_pitching_count() {
  continue_homerun_pitching_count_ = 0;
  clear_has_continue_homerun_pitching_count();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::continue_homerun_pitching_count() const {
  return continue_homerun_pitching_count_;
}
inline void Tbl_PlayerPitcher::set_continue_homerun_pitching_count(::google::protobuf::int32 value) {
  set_has_continue_homerun_pitching_count();
  continue_homerun_pitching_count_ = value;
}

// required int32 pitching_type = 8;
inline bool Tbl_PlayerPitcher::has_pitching_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitching_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tbl_PlayerPitcher::clear_has_pitching_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tbl_PlayerPitcher::clear_pitching_type() {
  pitching_type_ = 0;
  clear_has_pitching_type();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitching_type() const {
  return pitching_type_;
}
inline void Tbl_PlayerPitcher::set_pitching_type(::google::protobuf::int32 value) {
  set_has_pitching_type();
  pitching_type_ = value;
}

// required int32 pitcher_control = 9;
inline bool Tbl_PlayerPitcher::has_pitcher_control() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitcher_control() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tbl_PlayerPitcher::clear_has_pitcher_control() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tbl_PlayerPitcher::clear_pitcher_control() {
  pitcher_control_ = 0;
  clear_has_pitcher_control();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitcher_control() const {
  return pitcher_control_;
}
inline void Tbl_PlayerPitcher::set_pitcher_control(::google::protobuf::int32 value) {
  set_has_pitcher_control();
  pitcher_control_ = value;
}

// required int32 pitcher_ballspeed = 10;
inline bool Tbl_PlayerPitcher::has_pitcher_ballspeed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitcher_ballspeed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tbl_PlayerPitcher::clear_has_pitcher_ballspeed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tbl_PlayerPitcher::clear_pitcher_ballspeed() {
  pitcher_ballspeed_ = 0;
  clear_has_pitcher_ballspeed();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitcher_ballspeed() const {
  return pitcher_ballspeed_;
}
inline void Tbl_PlayerPitcher::set_pitcher_ballspeed(::google::protobuf::int32 value) {
  set_has_pitcher_ballspeed();
  pitcher_ballspeed_ = value;
}

// required int32 pitcher_breakingball_value = 11;
inline bool Tbl_PlayerPitcher::has_pitcher_breakingball_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitcher_breakingball_value() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Tbl_PlayerPitcher::clear_has_pitcher_breakingball_value() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Tbl_PlayerPitcher::clear_pitcher_breakingball_value() {
  pitcher_breakingball_value_ = 0;
  clear_has_pitcher_breakingball_value();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitcher_breakingball_value() const {
  return pitcher_breakingball_value_;
}
inline void Tbl_PlayerPitcher::set_pitcher_breakingball_value(::google::protobuf::int32 value) {
  set_has_pitcher_breakingball_value();
  pitcher_breakingball_value_ = value;
}

// required int32 pitcher_breakingball_type = 12;
inline bool Tbl_PlayerPitcher::has_pitcher_breakingball_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitcher_breakingball_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Tbl_PlayerPitcher::clear_has_pitcher_breakingball_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Tbl_PlayerPitcher::clear_pitcher_breakingball_type() {
  pitcher_breakingball_type_ = 0;
  clear_has_pitcher_breakingball_type();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitcher_breakingball_type() const {
  return pitcher_breakingball_type_;
}
inline void Tbl_PlayerPitcher::set_pitcher_breakingball_type(::google::protobuf::int32 value) {
  set_has_pitcher_breakingball_type();
  pitcher_breakingball_type_ = value;
}

// required int32 pitcher_control_buff = 13;
inline bool Tbl_PlayerPitcher::has_pitcher_control_buff() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitcher_control_buff() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Tbl_PlayerPitcher::clear_has_pitcher_control_buff() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Tbl_PlayerPitcher::clear_pitcher_control_buff() {
  pitcher_control_buff_ = 0;
  clear_has_pitcher_control_buff();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitcher_control_buff() const {
  return pitcher_control_buff_;
}
inline void Tbl_PlayerPitcher::set_pitcher_control_buff(::google::protobuf::int32 value) {
  set_has_pitcher_control_buff();
  pitcher_control_buff_ = value;
}

// required int32 pitcher_ballspeed_buff = 14;
inline bool Tbl_PlayerPitcher::has_pitcher_ballspeed_buff() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitcher_ballspeed_buff() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Tbl_PlayerPitcher::clear_has_pitcher_ballspeed_buff() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Tbl_PlayerPitcher::clear_pitcher_ballspeed_buff() {
  pitcher_ballspeed_buff_ = 0;
  clear_has_pitcher_ballspeed_buff();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitcher_ballspeed_buff() const {
  return pitcher_ballspeed_buff_;
}
inline void Tbl_PlayerPitcher::set_pitcher_ballspeed_buff(::google::protobuf::int32 value) {
  set_has_pitcher_ballspeed_buff();
  pitcher_ballspeed_buff_ = value;
}

// required int32 pitcher_breakingball_value_buff = 15;
inline bool Tbl_PlayerPitcher::has_pitcher_breakingball_value_buff() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Tbl_PlayerPitcher::set_has_pitcher_breakingball_value_buff() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Tbl_PlayerPitcher::clear_has_pitcher_breakingball_value_buff() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Tbl_PlayerPitcher::clear_pitcher_breakingball_value_buff() {
  pitcher_breakingball_value_buff_ = 0;
  clear_has_pitcher_breakingball_value_buff();
}
inline ::google::protobuf::int32 Tbl_PlayerPitcher::pitcher_breakingball_value_buff() const {
  return pitcher_breakingball_value_buff_;
}
inline void Tbl_PlayerPitcher::set_pitcher_breakingball_value_buff(::google::protobuf::int32 value) {
  set_has_pitcher_breakingball_value_buff();
  pitcher_breakingball_value_buff_ = value;
}

// -------------------------------------------------------------------

// Tbl_Result

// required int64 grid = 1;
inline bool Tbl_Result::has_grid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tbl_Result::set_has_grid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tbl_Result::clear_has_grid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tbl_Result::clear_grid() {
  grid_ = GOOGLE_LONGLONG(0);
  clear_has_grid();
}
inline ::google::protobuf::int64 Tbl_Result::grid() const {
  return grid_;
}
inline void Tbl_Result::set_grid(::google::protobuf::int64 value) {
  set_has_grid();
  grid_ = value;
}

// required bool is_singlemode = 2;
inline bool Tbl_Result::has_is_singlemode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tbl_Result::set_has_is_singlemode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tbl_Result::clear_has_is_singlemode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tbl_Result::clear_is_singlemode() {
  is_singlemode_ = false;
  clear_has_is_singlemode();
}
inline bool Tbl_Result::is_singlemode() const {
  return is_singlemode_;
}
inline void Tbl_Result::set_is_singlemode(bool value) {
  set_has_is_singlemode();
  is_singlemode_ = value;
}

// required int32 ppid1 = 3;
inline bool Tbl_Result::has_ppid1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tbl_Result::set_has_ppid1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tbl_Result::clear_has_ppid1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tbl_Result::clear_ppid1() {
  ppid1_ = 0;
  clear_has_ppid1();
}
inline ::google::protobuf::int32 Tbl_Result::ppid1() const {
  return ppid1_;
}
inline void Tbl_Result::set_ppid1(::google::protobuf::int32 value) {
  set_has_ppid1();
  ppid1_ = value;
}

// required int64 uid1 = 4;
inline bool Tbl_Result::has_uid1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tbl_Result::set_has_uid1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tbl_Result::clear_has_uid1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tbl_Result::clear_uid1() {
  uid1_ = GOOGLE_LONGLONG(0);
  clear_has_uid1();
}
inline ::google::protobuf::int64 Tbl_Result::uid1() const {
  return uid1_;
}
inline void Tbl_Result::set_uid1(::google::protobuf::int64 value) {
  set_has_uid1();
  uid1_ = value;
}

// required string uname1 = 5;
inline bool Tbl_Result::has_uname1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tbl_Result::set_has_uname1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tbl_Result::clear_has_uname1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tbl_Result::clear_uname1() {
  if (uname1_ != &::google::protobuf::internal::kEmptyString) {
    uname1_->clear();
  }
  clear_has_uname1();
}
inline const ::std::string& Tbl_Result::uname1() const {
  return *uname1_;
}
inline void Tbl_Result::set_uname1(const ::std::string& value) {
  set_has_uname1();
  if (uname1_ == &::google::protobuf::internal::kEmptyString) {
    uname1_ = new ::std::string;
  }
  uname1_->assign(value);
}
inline void Tbl_Result::set_uname1(const char* value) {
  set_has_uname1();
  if (uname1_ == &::google::protobuf::internal::kEmptyString) {
    uname1_ = new ::std::string;
  }
  uname1_->assign(value);
}
inline void Tbl_Result::set_uname1(const char* value, size_t size) {
  set_has_uname1();
  if (uname1_ == &::google::protobuf::internal::kEmptyString) {
    uname1_ = new ::std::string;
  }
  uname1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_Result::mutable_uname1() {
  set_has_uname1();
  if (uname1_ == &::google::protobuf::internal::kEmptyString) {
    uname1_ = new ::std::string;
  }
  return uname1_;
}
inline ::std::string* Tbl_Result::release_uname1() {
  clear_has_uname1();
  if (uname1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uname1_;
    uname1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 pid_better1 = 6;
inline bool Tbl_Result::has_pid_better1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tbl_Result::set_has_pid_better1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tbl_Result::clear_has_pid_better1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tbl_Result::clear_pid_better1() {
  pid_better1_ = GOOGLE_LONGLONG(0);
  clear_has_pid_better1();
}
inline ::google::protobuf::int64 Tbl_Result::pid_better1() const {
  return pid_better1_;
}
inline void Tbl_Result::set_pid_better1(::google::protobuf::int64 value) {
  set_has_pid_better1();
  pid_better1_ = value;
}

// required int64 pid_pitcher1 = 7;
inline bool Tbl_Result::has_pid_pitcher1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tbl_Result::set_has_pid_pitcher1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tbl_Result::clear_has_pid_pitcher1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tbl_Result::clear_pid_pitcher1() {
  pid_pitcher1_ = GOOGLE_LONGLONG(0);
  clear_has_pid_pitcher1();
}
inline ::google::protobuf::int64 Tbl_Result::pid_pitcher1() const {
  return pid_pitcher1_;
}
inline void Tbl_Result::set_pid_pitcher1(::google::protobuf::int64 value) {
  set_has_pid_pitcher1();
  pid_pitcher1_ = value;
}

// required int32 ppid2 = 8;
inline bool Tbl_Result::has_ppid2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tbl_Result::set_has_ppid2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tbl_Result::clear_has_ppid2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tbl_Result::clear_ppid2() {
  ppid2_ = 0;
  clear_has_ppid2();
}
inline ::google::protobuf::int32 Tbl_Result::ppid2() const {
  return ppid2_;
}
inline void Tbl_Result::set_ppid2(::google::protobuf::int32 value) {
  set_has_ppid2();
  ppid2_ = value;
}

// required int64 uid2 = 9;
inline bool Tbl_Result::has_uid2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tbl_Result::set_has_uid2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tbl_Result::clear_has_uid2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tbl_Result::clear_uid2() {
  uid2_ = GOOGLE_LONGLONG(0);
  clear_has_uid2();
}
inline ::google::protobuf::int64 Tbl_Result::uid2() const {
  return uid2_;
}
inline void Tbl_Result::set_uid2(::google::protobuf::int64 value) {
  set_has_uid2();
  uid2_ = value;
}

// required string uname2 = 10;
inline bool Tbl_Result::has_uname2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tbl_Result::set_has_uname2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tbl_Result::clear_has_uname2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tbl_Result::clear_uname2() {
  if (uname2_ != &::google::protobuf::internal::kEmptyString) {
    uname2_->clear();
  }
  clear_has_uname2();
}
inline const ::std::string& Tbl_Result::uname2() const {
  return *uname2_;
}
inline void Tbl_Result::set_uname2(const ::std::string& value) {
  set_has_uname2();
  if (uname2_ == &::google::protobuf::internal::kEmptyString) {
    uname2_ = new ::std::string;
  }
  uname2_->assign(value);
}
inline void Tbl_Result::set_uname2(const char* value) {
  set_has_uname2();
  if (uname2_ == &::google::protobuf::internal::kEmptyString) {
    uname2_ = new ::std::string;
  }
  uname2_->assign(value);
}
inline void Tbl_Result::set_uname2(const char* value, size_t size) {
  set_has_uname2();
  if (uname2_ == &::google::protobuf::internal::kEmptyString) {
    uname2_ = new ::std::string;
  }
  uname2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_Result::mutable_uname2() {
  set_has_uname2();
  if (uname2_ == &::google::protobuf::internal::kEmptyString) {
    uname2_ = new ::std::string;
  }
  return uname2_;
}
inline ::std::string* Tbl_Result::release_uname2() {
  clear_has_uname2();
  if (uname2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uname2_;
    uname2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 pid_better2 = 11;
inline bool Tbl_Result::has_pid_better2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Tbl_Result::set_has_pid_better2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Tbl_Result::clear_has_pid_better2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Tbl_Result::clear_pid_better2() {
  pid_better2_ = GOOGLE_LONGLONG(0);
  clear_has_pid_better2();
}
inline ::google::protobuf::int64 Tbl_Result::pid_better2() const {
  return pid_better2_;
}
inline void Tbl_Result::set_pid_better2(::google::protobuf::int64 value) {
  set_has_pid_better2();
  pid_better2_ = value;
}

// required int64 pid_pitcher2 = 12;
inline bool Tbl_Result::has_pid_pitcher2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Tbl_Result::set_has_pid_pitcher2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Tbl_Result::clear_has_pid_pitcher2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Tbl_Result::clear_pid_pitcher2() {
  pid_pitcher2_ = GOOGLE_LONGLONG(0);
  clear_has_pid_pitcher2();
}
inline ::google::protobuf::int64 Tbl_Result::pid_pitcher2() const {
  return pid_pitcher2_;
}
inline void Tbl_Result::set_pid_pitcher2(::google::protobuf::int64 value) {
  set_has_pid_pitcher2();
  pid_pitcher2_ = value;
}

// required string time_start = 13;
inline bool Tbl_Result::has_time_start() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Tbl_Result::set_has_time_start() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Tbl_Result::clear_has_time_start() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Tbl_Result::clear_time_start() {
  if (time_start_ != &::google::protobuf::internal::kEmptyString) {
    time_start_->clear();
  }
  clear_has_time_start();
}
inline const ::std::string& Tbl_Result::time_start() const {
  return *time_start_;
}
inline void Tbl_Result::set_time_start(const ::std::string& value) {
  set_has_time_start();
  if (time_start_ == &::google::protobuf::internal::kEmptyString) {
    time_start_ = new ::std::string;
  }
  time_start_->assign(value);
}
inline void Tbl_Result::set_time_start(const char* value) {
  set_has_time_start();
  if (time_start_ == &::google::protobuf::internal::kEmptyString) {
    time_start_ = new ::std::string;
  }
  time_start_->assign(value);
}
inline void Tbl_Result::set_time_start(const char* value, size_t size) {
  set_has_time_start();
  if (time_start_ == &::google::protobuf::internal::kEmptyString) {
    time_start_ = new ::std::string;
  }
  time_start_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_Result::mutable_time_start() {
  set_has_time_start();
  if (time_start_ == &::google::protobuf::internal::kEmptyString) {
    time_start_ = new ::std::string;
  }
  return time_start_;
}
inline ::std::string* Tbl_Result::release_time_start() {
  clear_has_time_start();
  if (time_start_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_start_;
    time_start_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string time_end = 14;
inline bool Tbl_Result::has_time_end() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Tbl_Result::set_has_time_end() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Tbl_Result::clear_has_time_end() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Tbl_Result::clear_time_end() {
  if (time_end_ != &::google::protobuf::internal::kEmptyString) {
    time_end_->clear();
  }
  clear_has_time_end();
}
inline const ::std::string& Tbl_Result::time_end() const {
  return *time_end_;
}
inline void Tbl_Result::set_time_end(const ::std::string& value) {
  set_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    time_end_ = new ::std::string;
  }
  time_end_->assign(value);
}
inline void Tbl_Result::set_time_end(const char* value) {
  set_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    time_end_ = new ::std::string;
  }
  time_end_->assign(value);
}
inline void Tbl_Result::set_time_end(const char* value, size_t size) {
  set_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    time_end_ = new ::std::string;
  }
  time_end_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_Result::mutable_time_end() {
  set_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    time_end_ = new ::std::string;
  }
  return time_end_;
}
inline ::std::string* Tbl_Result::release_time_end() {
  clear_has_time_end();
  if (time_end_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_end_;
    time_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 winner = 15;
inline bool Tbl_Result::has_winner() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Tbl_Result::set_has_winner() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Tbl_Result::clear_has_winner() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Tbl_Result::clear_winner() {
  winner_ = GOOGLE_LONGLONG(0);
  clear_has_winner();
}
inline ::google::protobuf::int64 Tbl_Result::winner() const {
  return winner_;
}
inline void Tbl_Result::set_winner(::google::protobuf::int64 value) {
  set_has_winner();
  winner_ = value;
}

// required int32 reward_exp1 = 16;
inline bool Tbl_Result::has_reward_exp1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Tbl_Result::set_has_reward_exp1() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Tbl_Result::clear_has_reward_exp1() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Tbl_Result::clear_reward_exp1() {
  reward_exp1_ = 0;
  clear_has_reward_exp1();
}
inline ::google::protobuf::int32 Tbl_Result::reward_exp1() const {
  return reward_exp1_;
}
inline void Tbl_Result::set_reward_exp1(::google::protobuf::int32 value) {
  set_has_reward_exp1();
  reward_exp1_ = value;
}

// required int32 reward_exp2 = 17;
inline bool Tbl_Result::has_reward_exp2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Tbl_Result::set_has_reward_exp2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Tbl_Result::clear_has_reward_exp2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Tbl_Result::clear_reward_exp2() {
  reward_exp2_ = 0;
  clear_has_reward_exp2();
}
inline ::google::protobuf::int32 Tbl_Result::reward_exp2() const {
  return reward_exp2_;
}
inline void Tbl_Result::set_reward_exp2(::google::protobuf::int32 value) {
  set_has_reward_exp2();
  reward_exp2_ = value;
}

// required int64 reward_item1 = 18;
inline bool Tbl_Result::has_reward_item1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Tbl_Result::set_has_reward_item1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Tbl_Result::clear_has_reward_item1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Tbl_Result::clear_reward_item1() {
  reward_item1_ = GOOGLE_LONGLONG(0);
  clear_has_reward_item1();
}
inline ::google::protobuf::int64 Tbl_Result::reward_item1() const {
  return reward_item1_;
}
inline void Tbl_Result::set_reward_item1(::google::protobuf::int64 value) {
  set_has_reward_item1();
  reward_item1_ = value;
}

// required int64 reward_item2 = 19;
inline bool Tbl_Result::has_reward_item2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Tbl_Result::set_has_reward_item2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Tbl_Result::clear_has_reward_item2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Tbl_Result::clear_reward_item2() {
  reward_item2_ = GOOGLE_LONGLONG(0);
  clear_has_reward_item2();
}
inline ::google::protobuf::int64 Tbl_Result::reward_item2() const {
  return reward_item2_;
}
inline void Tbl_Result::set_reward_item2(::google::protobuf::int64 value) {
  set_has_reward_item2();
  reward_item2_ = value;
}

// required int32 reward_gamemoney1 = 20;
inline bool Tbl_Result::has_reward_gamemoney1() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Tbl_Result::set_has_reward_gamemoney1() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Tbl_Result::clear_has_reward_gamemoney1() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Tbl_Result::clear_reward_gamemoney1() {
  reward_gamemoney1_ = 0;
  clear_has_reward_gamemoney1();
}
inline ::google::protobuf::int32 Tbl_Result::reward_gamemoney1() const {
  return reward_gamemoney1_;
}
inline void Tbl_Result::set_reward_gamemoney1(::google::protobuf::int32 value) {
  set_has_reward_gamemoney1();
  reward_gamemoney1_ = value;
}

// required int32 reward_gamemoney2 = 21;
inline bool Tbl_Result::has_reward_gamemoney2() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Tbl_Result::set_has_reward_gamemoney2() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Tbl_Result::clear_has_reward_gamemoney2() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Tbl_Result::clear_reward_gamemoney2() {
  reward_gamemoney2_ = 0;
  clear_has_reward_gamemoney2();
}
inline ::google::protobuf::int32 Tbl_Result::reward_gamemoney2() const {
  return reward_gamemoney2_;
}
inline void Tbl_Result::set_reward_gamemoney2(::google::protobuf::int32 value) {
  set_has_reward_gamemoney2();
  reward_gamemoney2_ = value;
}

// required int32 score1 = 22;
inline bool Tbl_Result::has_score1() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Tbl_Result::set_has_score1() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Tbl_Result::clear_has_score1() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Tbl_Result::clear_score1() {
  score1_ = 0;
  clear_has_score1();
}
inline ::google::protobuf::int32 Tbl_Result::score1() const {
  return score1_;
}
inline void Tbl_Result::set_score1(::google::protobuf::int32 value) {
  set_has_score1();
  score1_ = value;
}

// required int32 score2 = 23;
inline bool Tbl_Result::has_score2() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Tbl_Result::set_has_score2() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Tbl_Result::clear_has_score2() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Tbl_Result::clear_score2() {
  score2_ = 0;
  clear_has_score2();
}
inline ::google::protobuf::int32 Tbl_Result::score2() const {
  return score2_;
}
inline void Tbl_Result::set_score2(::google::protobuf::int32 value) {
  set_has_score2();
  score2_ = value;
}

// -------------------------------------------------------------------

// Tbl_RoundResult

// required int64 grid2 = 1;
inline bool Tbl_RoundResult::has_grid2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tbl_RoundResult::set_has_grid2() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tbl_RoundResult::clear_has_grid2() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tbl_RoundResult::clear_grid2() {
  grid2_ = GOOGLE_LONGLONG(0);
  clear_has_grid2();
}
inline ::google::protobuf::int64 Tbl_RoundResult::grid2() const {
  return grid2_;
}
inline void Tbl_RoundResult::set_grid2(::google::protobuf::int64 value) {
  set_has_grid2();
  grid2_ = value;
}

// required int64 grid = 2;
inline bool Tbl_RoundResult::has_grid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tbl_RoundResult::set_has_grid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tbl_RoundResult::clear_has_grid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tbl_RoundResult::clear_grid() {
  grid_ = GOOGLE_LONGLONG(0);
  clear_has_grid();
}
inline ::google::protobuf::int64 Tbl_RoundResult::grid() const {
  return grid_;
}
inline void Tbl_RoundResult::set_grid(::google::protobuf::int64 value) {
  set_has_grid();
  grid_ = value;
}

// required int32 round_number = 3;
inline bool Tbl_RoundResult::has_round_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tbl_RoundResult::set_has_round_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tbl_RoundResult::clear_has_round_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tbl_RoundResult::clear_round_number() {
  round_number_ = 0;
  clear_has_round_number();
}
inline ::google::protobuf::int32 Tbl_RoundResult::round_number() const {
  return round_number_;
}
inline void Tbl_RoundResult::set_round_number(::google::protobuf::int32 value) {
  set_has_round_number();
  round_number_ = value;
}

// required int64 pid_better = 4;
inline bool Tbl_RoundResult::has_pid_better() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tbl_RoundResult::set_has_pid_better() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tbl_RoundResult::clear_has_pid_better() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tbl_RoundResult::clear_pid_better() {
  pid_better_ = GOOGLE_LONGLONG(0);
  clear_has_pid_better();
}
inline ::google::protobuf::int64 Tbl_RoundResult::pid_better() const {
  return pid_better_;
}
inline void Tbl_RoundResult::set_pid_better(::google::protobuf::int64 value) {
  set_has_pid_better();
  pid_better_ = value;
}

// required int32 score = 5;
inline bool Tbl_RoundResult::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tbl_RoundResult::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tbl_RoundResult::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tbl_RoundResult::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Tbl_RoundResult::score() const {
  return score_;
}
inline void Tbl_RoundResult::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int32 base_runner_count = 6;
inline bool Tbl_RoundResult::has_base_runner_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tbl_RoundResult::set_has_base_runner_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tbl_RoundResult::clear_has_base_runner_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tbl_RoundResult::clear_base_runner_count() {
  base_runner_count_ = 0;
  clear_has_base_runner_count();
}
inline ::google::protobuf::int32 Tbl_RoundResult::base_runner_count() const {
  return base_runner_count_;
}
inline void Tbl_RoundResult::set_base_runner_count(::google::protobuf::int32 value) {
  set_has_base_runner_count();
  base_runner_count_ = value;
}

// required int32 hit_type = 7;
inline bool Tbl_RoundResult::has_hit_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tbl_RoundResult::set_has_hit_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tbl_RoundResult::clear_has_hit_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tbl_RoundResult::clear_hit_type() {
  hit_type_ = 0;
  clear_has_hit_type();
}
inline ::google::protobuf::int32 Tbl_RoundResult::hit_type() const {
  return hit_type_;
}
inline void Tbl_RoundResult::set_hit_type(::google::protobuf::int32 value) {
  set_has_hit_type();
  hit_type_ = value;
}

// required int32 strike = 8;
inline bool Tbl_RoundResult::has_strike() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tbl_RoundResult::set_has_strike() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tbl_RoundResult::clear_has_strike() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tbl_RoundResult::clear_strike() {
  strike_ = 0;
  clear_has_strike();
}
inline ::google::protobuf::int32 Tbl_RoundResult::strike() const {
  return strike_;
}
inline void Tbl_RoundResult::set_strike(::google::protobuf::int32 value) {
  set_has_strike();
  strike_ = value;
}

// required int32 foul = 9;
inline bool Tbl_RoundResult::has_foul() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tbl_RoundResult::set_has_foul() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tbl_RoundResult::clear_has_foul() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tbl_RoundResult::clear_foul() {
  foul_ = 0;
  clear_has_foul();
}
inline ::google::protobuf::int32 Tbl_RoundResult::foul() const {
  return foul_;
}
inline void Tbl_RoundResult::set_foul(::google::protobuf::int32 value) {
  set_has_foul();
  foul_ = value;
}

// -------------------------------------------------------------------

// Tbl_User

// required int64 uid = 1;
inline bool Tbl_User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tbl_User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tbl_User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tbl_User::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 Tbl_User::uid() const {
  return uid_;
}
inline void Tbl_User::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// required int32 ppid = 2;
inline bool Tbl_User::has_ppid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tbl_User::set_has_ppid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tbl_User::clear_has_ppid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tbl_User::clear_ppid() {
  ppid_ = 0;
  clear_has_ppid();
}
inline ::google::protobuf::int32 Tbl_User::ppid() const {
  return ppid_;
}
inline void Tbl_User::set_ppid(::google::protobuf::int32 value) {
  set_has_ppid();
  ppid_ = value;
}

// required string uname = 3;
inline bool Tbl_User::has_uname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tbl_User::set_has_uname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tbl_User::clear_has_uname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tbl_User::clear_uname() {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& Tbl_User::uname() const {
  return *uname_;
}
inline void Tbl_User::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void Tbl_User::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void Tbl_User::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_User::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  return uname_;
}
inline ::std::string* Tbl_User::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 pitcher_tot_win = 4;
inline bool Tbl_User::has_pitcher_tot_win() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tbl_User::set_has_pitcher_tot_win() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tbl_User::clear_has_pitcher_tot_win() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tbl_User::clear_pitcher_tot_win() {
  pitcher_tot_win_ = 0;
  clear_has_pitcher_tot_win();
}
inline ::google::protobuf::int32 Tbl_User::pitcher_tot_win() const {
  return pitcher_tot_win_;
}
inline void Tbl_User::set_pitcher_tot_win(::google::protobuf::int32 value) {
  set_has_pitcher_tot_win();
  pitcher_tot_win_ = value;
}

// required int32 pitcher_tot_lose = 5;
inline bool Tbl_User::has_pitcher_tot_lose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tbl_User::set_has_pitcher_tot_lose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tbl_User::clear_has_pitcher_tot_lose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tbl_User::clear_pitcher_tot_lose() {
  pitcher_tot_lose_ = 0;
  clear_has_pitcher_tot_lose();
}
inline ::google::protobuf::int32 Tbl_User::pitcher_tot_lose() const {
  return pitcher_tot_lose_;
}
inline void Tbl_User::set_pitcher_tot_lose(::google::protobuf::int32 value) {
  set_has_pitcher_tot_lose();
  pitcher_tot_lose_ = value;
}

// required int32 pitcher_tot_strikeout = 6;
inline bool Tbl_User::has_pitcher_tot_strikeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tbl_User::set_has_pitcher_tot_strikeout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tbl_User::clear_has_pitcher_tot_strikeout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tbl_User::clear_pitcher_tot_strikeout() {
  pitcher_tot_strikeout_ = 0;
  clear_has_pitcher_tot_strikeout();
}
inline ::google::protobuf::int32 Tbl_User::pitcher_tot_strikeout() const {
  return pitcher_tot_strikeout_;
}
inline void Tbl_User::set_pitcher_tot_strikeout(::google::protobuf::int32 value) {
  set_has_pitcher_tot_strikeout();
  pitcher_tot_strikeout_ = value;
}

// required int32 pitcher_tot_average_level = 7;
inline bool Tbl_User::has_pitcher_tot_average_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tbl_User::set_has_pitcher_tot_average_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tbl_User::clear_has_pitcher_tot_average_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tbl_User::clear_pitcher_tot_average_level() {
  pitcher_tot_average_level_ = 0;
  clear_has_pitcher_tot_average_level();
}
inline ::google::protobuf::int32 Tbl_User::pitcher_tot_average_level() const {
  return pitcher_tot_average_level_;
}
inline void Tbl_User::set_pitcher_tot_average_level(::google::protobuf::int32 value) {
  set_has_pitcher_tot_average_level();
  pitcher_tot_average_level_ = value;
}

// required int32 better_tot_win = 8;
inline bool Tbl_User::has_better_tot_win() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tbl_User::set_has_better_tot_win() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tbl_User::clear_has_better_tot_win() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tbl_User::clear_better_tot_win() {
  better_tot_win_ = 0;
  clear_has_better_tot_win();
}
inline ::google::protobuf::int32 Tbl_User::better_tot_win() const {
  return better_tot_win_;
}
inline void Tbl_User::set_better_tot_win(::google::protobuf::int32 value) {
  set_has_better_tot_win();
  better_tot_win_ = value;
}

// required int32 better_tot_lose = 9;
inline bool Tbl_User::has_better_tot_lose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tbl_User::set_has_better_tot_lose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tbl_User::clear_has_better_tot_lose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tbl_User::clear_better_tot_lose() {
  better_tot_lose_ = 0;
  clear_has_better_tot_lose();
}
inline ::google::protobuf::int32 Tbl_User::better_tot_lose() const {
  return better_tot_lose_;
}
inline void Tbl_User::set_better_tot_lose(::google::protobuf::int32 value) {
  set_has_better_tot_lose();
  better_tot_lose_ = value;
}

// required int32 better_tot_homerun = 10;
inline bool Tbl_User::has_better_tot_homerun() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tbl_User::set_has_better_tot_homerun() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tbl_User::clear_has_better_tot_homerun() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tbl_User::clear_better_tot_homerun() {
  better_tot_homerun_ = 0;
  clear_has_better_tot_homerun();
}
inline ::google::protobuf::int32 Tbl_User::better_tot_homerun() const {
  return better_tot_homerun_;
}
inline void Tbl_User::set_better_tot_homerun(::google::protobuf::int32 value) {
  set_has_better_tot_homerun();
  better_tot_homerun_ = value;
}

// required int32 better_tot__average_level = 11;
inline bool Tbl_User::has_better_tot__average_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Tbl_User::set_has_better_tot__average_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Tbl_User::clear_has_better_tot__average_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Tbl_User::clear_better_tot__average_level() {
  better_tot__average_level_ = 0;
  clear_has_better_tot__average_level();
}
inline ::google::protobuf::int32 Tbl_User::better_tot__average_level() const {
  return better_tot__average_level_;
}
inline void Tbl_User::set_better_tot__average_level(::google::protobuf::int32 value) {
  set_has_better_tot__average_level();
  better_tot__average_level_ = value;
}

// required int32 cash_item_buy_count = 12;
inline bool Tbl_User::has_cash_item_buy_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Tbl_User::set_has_cash_item_buy_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Tbl_User::clear_has_cash_item_buy_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Tbl_User::clear_cash_item_buy_count() {
  cash_item_buy_count_ = 0;
  clear_has_cash_item_buy_count();
}
inline ::google::protobuf::int32 Tbl_User::cash_item_buy_count() const {
  return cash_item_buy_count_;
}
inline void Tbl_User::set_cash_item_buy_count(::google::protobuf::int32 value) {
  set_has_cash_item_buy_count();
  cash_item_buy_count_ = value;
}

// required string playtime_first = 13;
inline bool Tbl_User::has_playtime_first() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Tbl_User::set_has_playtime_first() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Tbl_User::clear_has_playtime_first() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Tbl_User::clear_playtime_first() {
  if (playtime_first_ != &::google::protobuf::internal::kEmptyString) {
    playtime_first_->clear();
  }
  clear_has_playtime_first();
}
inline const ::std::string& Tbl_User::playtime_first() const {
  return *playtime_first_;
}
inline void Tbl_User::set_playtime_first(const ::std::string& value) {
  set_has_playtime_first();
  if (playtime_first_ == &::google::protobuf::internal::kEmptyString) {
    playtime_first_ = new ::std::string;
  }
  playtime_first_->assign(value);
}
inline void Tbl_User::set_playtime_first(const char* value) {
  set_has_playtime_first();
  if (playtime_first_ == &::google::protobuf::internal::kEmptyString) {
    playtime_first_ = new ::std::string;
  }
  playtime_first_->assign(value);
}
inline void Tbl_User::set_playtime_first(const char* value, size_t size) {
  set_has_playtime_first();
  if (playtime_first_ == &::google::protobuf::internal::kEmptyString) {
    playtime_first_ = new ::std::string;
  }
  playtime_first_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_User::mutable_playtime_first() {
  set_has_playtime_first();
  if (playtime_first_ == &::google::protobuf::internal::kEmptyString) {
    playtime_first_ = new ::std::string;
  }
  return playtime_first_;
}
inline ::std::string* Tbl_User::release_playtime_first() {
  clear_has_playtime_first();
  if (playtime_first_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playtime_first_;
    playtime_first_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string playtime_last = 14;
inline bool Tbl_User::has_playtime_last() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Tbl_User::set_has_playtime_last() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Tbl_User::clear_has_playtime_last() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Tbl_User::clear_playtime_last() {
  if (playtime_last_ != &::google::protobuf::internal::kEmptyString) {
    playtime_last_->clear();
  }
  clear_has_playtime_last();
}
inline const ::std::string& Tbl_User::playtime_last() const {
  return *playtime_last_;
}
inline void Tbl_User::set_playtime_last(const ::std::string& value) {
  set_has_playtime_last();
  if (playtime_last_ == &::google::protobuf::internal::kEmptyString) {
    playtime_last_ = new ::std::string;
  }
  playtime_last_->assign(value);
}
inline void Tbl_User::set_playtime_last(const char* value) {
  set_has_playtime_last();
  if (playtime_last_ == &::google::protobuf::internal::kEmptyString) {
    playtime_last_ = new ::std::string;
  }
  playtime_last_->assign(value);
}
inline void Tbl_User::set_playtime_last(const char* value, size_t size) {
  set_has_playtime_last();
  if (playtime_last_ == &::google::protobuf::internal::kEmptyString) {
    playtime_last_ = new ::std::string;
  }
  playtime_last_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tbl_User::mutable_playtime_last() {
  set_has_playtime_last();
  if (playtime_last_ == &::google::protobuf::internal::kEmptyString) {
    playtime_last_ = new ::std::string;
  }
  return playtime_last_;
}
inline ::std::string* Tbl_User::release_playtime_last() {
  clear_has_playtime_last();
  if (playtime_last_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playtime_last_;
    playtime_last_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 playtime_tot = 15;
inline bool Tbl_User::has_playtime_tot() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Tbl_User::set_has_playtime_tot() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Tbl_User::clear_has_playtime_tot() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Tbl_User::clear_playtime_tot() {
  playtime_tot_ = GOOGLE_LONGLONG(0);
  clear_has_playtime_tot();
}
inline ::google::protobuf::int64 Tbl_User::playtime_tot() const {
  return playtime_tot_;
}
inline void Tbl_User::set_playtime_tot(::google::protobuf::int64 value) {
  set_has_playtime_tot();
  playtime_tot_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_excel_5fbaseball_5ftable_2eproto__INCLUDED
