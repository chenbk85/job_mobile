// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PT_BaseballServer.proto

#ifndef PROTOBUF_PT_5fBaseballServer_2eproto__INCLUDED
#define PROTOBUF_PT_5fBaseballServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "excel_baseball_table_db.pb.h"
#include "gameLogic.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();

class s_ans_join_room;
class s_req_room_state;
class s_ans_room_state;
class s_x2bs_echo;
class s_bs2x_echo;
class s_req_chat;
class s_ans_chat;
class s_ans_timer_start;
class s_req_timer_start;
class s_req_do_disconnect;
class s_x2bs_echo2;
class s_bs2x_echo2;
class s_ans_bs_error;
class s_req_get_cvar;
class s_req_set_cvar;
class s_bs2ug_set_cvar;
class s_ug2bs_ans_set_cvar;
class s_x2bs_auto_match_ready2;
class s_bs2x_auto_match_ready2;
class s_ans_game_start;
class s_ans_game_round_start;
class s_x2bs_match_ready;
class s_bs2x_match_ready;
class s_req_pitcher_throw;
class s_ans_pitcher_throw;
class s_req_better_hit;
class s_ans_better_hit;
class s_req_result_better_hit;
class s_ans_result_better_hit;
class s_x2bs_batter_ready;
class s_bs2x_batter_ready;
class s_ans_change_attack_team;
class s_ans_game_end;
class s_bs2x_game_end_other_user_info;
class s_bs2ug_game_end;
class s_ug2bs_game_end;
class s_ans_user_disconnect;
class s_req_rematch;
class s_ans_rematch;
class s_req_answer_restart_game;
class s_ans_answer_restart_game;
class s_ug2bs_echo;
class s_bs2ug_echo;
class s_ug2bs_error;
class s_bs2ug_error;
class s_bs2ug_add_discon_tot;
class s_ug2bs_add_discon_tot;
class BaseballServer_UserGateServer;
class BaseballServer_Client;
class UserGateServer_BaseballServer;
class Client_BaseballServer;

enum BaseballServer_UserGateServer_Type {
  BaseballServer_UserGateServer_Type_NONE = 1,
  BaseballServer_UserGateServer_Type_bs2ug_set_cvar = 2,
  BaseballServer_UserGateServer_Type_bs2ug_game_end = 3,
  BaseballServer_UserGateServer_Type_bs2ug_echo = 4,
  BaseballServer_UserGateServer_Type_bs2ug_error = 5,
  BaseballServer_UserGateServer_Type_bs2ug_add_discon_tot = 6
};
bool BaseballServer_UserGateServer_Type_IsValid(int value);
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer_Type_Type_MIN = BaseballServer_UserGateServer_Type_NONE;
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer_Type_Type_MAX = BaseballServer_UserGateServer_Type_bs2ug_add_discon_tot;
const int BaseballServer_UserGateServer_Type_Type_ARRAYSIZE = BaseballServer_UserGateServer_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BaseballServer_UserGateServer_Type_descriptor();
inline const ::std::string& BaseballServer_UserGateServer_Type_Name(BaseballServer_UserGateServer_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BaseballServer_UserGateServer_Type_descriptor(), value);
}
inline bool BaseballServer_UserGateServer_Type_Parse(
    const ::std::string& name, BaseballServer_UserGateServer_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BaseballServer_UserGateServer_Type>(
    BaseballServer_UserGateServer_Type_descriptor(), name, value);
}
enum BaseballServer_Client_Type {
  BaseballServer_Client_Type_NONE = 1,
  BaseballServer_Client_Type_ans_join_room = 2,
  BaseballServer_Client_Type_ans_room_state = 3,
  BaseballServer_Client_Type_bs2x_echo = 4,
  BaseballServer_Client_Type_ans_chat = 5,
  BaseballServer_Client_Type_ans_timer_start = 6,
  BaseballServer_Client_Type_bs2x_echo2 = 7,
  BaseballServer_Client_Type_ans_bs_error = 8,
  BaseballServer_Client_Type_bs2x_auto_match_ready2 = 9,
  BaseballServer_Client_Type_ans_game_start = 10,
  BaseballServer_Client_Type_ans_game_round_start = 11,
  BaseballServer_Client_Type_bs2x_match_ready = 12,
  BaseballServer_Client_Type_ans_pitcher_throw = 13,
  BaseballServer_Client_Type_ans_better_hit = 14,
  BaseballServer_Client_Type_ans_result_better_hit = 15,
  BaseballServer_Client_Type_bs2x_batter_ready = 16,
  BaseballServer_Client_Type_ans_change_attack_team = 17,
  BaseballServer_Client_Type_ans_game_end = 18,
  BaseballServer_Client_Type_bs2x_game_end_other_user_info = 19,
  BaseballServer_Client_Type_ans_user_disconnect = 20,
  BaseballServer_Client_Type_ans_rematch = 21,
  BaseballServer_Client_Type_ans_answer_restart_game = 22
};
bool BaseballServer_Client_Type_IsValid(int value);
const BaseballServer_Client_Type BaseballServer_Client_Type_Type_MIN = BaseballServer_Client_Type_NONE;
const BaseballServer_Client_Type BaseballServer_Client_Type_Type_MAX = BaseballServer_Client_Type_ans_answer_restart_game;
const int BaseballServer_Client_Type_Type_ARRAYSIZE = BaseballServer_Client_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BaseballServer_Client_Type_descriptor();
inline const ::std::string& BaseballServer_Client_Type_Name(BaseballServer_Client_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BaseballServer_Client_Type_descriptor(), value);
}
inline bool BaseballServer_Client_Type_Parse(
    const ::std::string& name, BaseballServer_Client_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BaseballServer_Client_Type>(
    BaseballServer_Client_Type_descriptor(), name, value);
}
enum UserGateServer_BaseballServer_Type {
  UserGateServer_BaseballServer_Type_NONE = 1,
  UserGateServer_BaseballServer_Type_ug2bs_ans_set_cvar = 2,
  UserGateServer_BaseballServer_Type_ug2bs_game_end = 3,
  UserGateServer_BaseballServer_Type_ug2bs_echo = 4,
  UserGateServer_BaseballServer_Type_ug2bs_error = 5,
  UserGateServer_BaseballServer_Type_ug2bs_add_discon_tot = 6
};
bool UserGateServer_BaseballServer_Type_IsValid(int value);
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer_Type_Type_MIN = UserGateServer_BaseballServer_Type_NONE;
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer_Type_Type_MAX = UserGateServer_BaseballServer_Type_ug2bs_add_discon_tot;
const int UserGateServer_BaseballServer_Type_Type_ARRAYSIZE = UserGateServer_BaseballServer_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserGateServer_BaseballServer_Type_descriptor();
inline const ::std::string& UserGateServer_BaseballServer_Type_Name(UserGateServer_BaseballServer_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserGateServer_BaseballServer_Type_descriptor(), value);
}
inline bool UserGateServer_BaseballServer_Type_Parse(
    const ::std::string& name, UserGateServer_BaseballServer_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserGateServer_BaseballServer_Type>(
    UserGateServer_BaseballServer_Type_descriptor(), name, value);
}
enum Client_BaseballServer_Type {
  Client_BaseballServer_Type_NONE = 1,
  Client_BaseballServer_Type_req_room_state = 2,
  Client_BaseballServer_Type_x2bs_echo = 3,
  Client_BaseballServer_Type_req_chat = 4,
  Client_BaseballServer_Type_req_timer_start = 5,
  Client_BaseballServer_Type_req_do_disconnect = 6,
  Client_BaseballServer_Type_x2bs_echo2 = 7,
  Client_BaseballServer_Type_req_get_cvar = 8,
  Client_BaseballServer_Type_req_set_cvar = 9,
  Client_BaseballServer_Type_x2bs_auto_match_ready2 = 10,
  Client_BaseballServer_Type_x2bs_match_ready = 11,
  Client_BaseballServer_Type_req_pitcher_throw = 12,
  Client_BaseballServer_Type_req_better_hit = 13,
  Client_BaseballServer_Type_req_result_better_hit = 14,
  Client_BaseballServer_Type_x2bs_batter_ready = 15,
  Client_BaseballServer_Type_req_rematch = 16,
  Client_BaseballServer_Type_req_answer_restart_game = 17
};
bool Client_BaseballServer_Type_IsValid(int value);
const Client_BaseballServer_Type Client_BaseballServer_Type_Type_MIN = Client_BaseballServer_Type_NONE;
const Client_BaseballServer_Type Client_BaseballServer_Type_Type_MAX = Client_BaseballServer_Type_req_answer_restart_game;
const int Client_BaseballServer_Type_Type_ARRAYSIZE = Client_BaseballServer_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Client_BaseballServer_Type_descriptor();
inline const ::std::string& Client_BaseballServer_Type_Name(Client_BaseballServer_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Client_BaseballServer_Type_descriptor(), value);
}
inline bool Client_BaseballServer_Type_Parse(
    const ::std::string& name, Client_BaseballServer_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Client_BaseballServer_Type>(
    Client_BaseballServer_Type_descriptor(), name, value);
}
enum EUserGPS_notuse {
  _notuseGPS_LOGOUT = 0,
  _notuseGPS_LOGIN_OK = 1,
  _notuseGPS_SHOP = 2,
  _notuseGPS_GAMEROOM = 3
};
bool EUserGPS_notuse_IsValid(int value);
const EUserGPS_notuse EUserGPS_notuse_MIN = _notuseGPS_LOGOUT;
const EUserGPS_notuse EUserGPS_notuse_MAX = _notuseGPS_GAMEROOM;
const int EUserGPS_notuse_ARRAYSIZE = EUserGPS_notuse_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUserGPS_notuse_descriptor();
inline const ::std::string& EUserGPS_notuse_Name(EUserGPS_notuse value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUserGPS_notuse_descriptor(), value);
}
inline bool EUserGPS_notuse_Parse(
    const ::std::string& name, EUserGPS_notuse* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUserGPS_notuse>(
    EUserGPS_notuse_descriptor(), name, value);
}
// ===================================================================

class s_ans_join_room : public ::google::protobuf::Message {
 public:
  s_ans_join_room();
  virtual ~s_ans_join_room();
  
  s_ans_join_room(const s_ans_join_room& from);
  
  inline s_ans_join_room& operator=(const s_ans_join_room& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_join_room& default_instance();
  
  void Swap(s_ans_join_room* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_join_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_join_room& from);
  void MergeFrom(const s_ans_join_room& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .GameRoomInfo gri = 1;
  inline bool has_gri() const;
  inline void clear_gri();
  static const int kGriFieldNumber = 1;
  inline const ::GameRoomInfo& gri() const;
  inline ::GameRoomInfo* mutable_gri();
  inline ::GameRoomInfo* release_gri();
  
  // @@protoc_insertion_point(class_scope:s_ans_join_room)
 private:
  inline void set_has_gri();
  inline void clear_has_gri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::GameRoomInfo* gri_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_join_room* default_instance_;
};
// -------------------------------------------------------------------

class s_req_room_state : public ::google::protobuf::Message {
 public:
  s_req_room_state();
  virtual ~s_req_room_state();
  
  s_req_room_state(const s_req_room_state& from);
  
  inline s_req_room_state& operator=(const s_req_room_state& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_room_state& default_instance();
  
  void Swap(s_req_room_state* other);
  
  // implements Message ----------------------------------------------
  
  s_req_room_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_room_state& from);
  void MergeFrom(const s_req_room_state& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline ::google::protobuf::int32 room() const;
  inline void set_room(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_req_room_state)
 private:
  inline void set_has_room();
  inline void clear_has_room();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 room_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_room_state* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_room_state : public ::google::protobuf::Message {
 public:
  s_ans_room_state();
  virtual ~s_ans_room_state();
  
  s_ans_room_state(const s_ans_room_state& from);
  
  inline s_ans_room_state& operator=(const s_ans_room_state& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_room_state& default_instance();
  
  void Swap(s_ans_room_state* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_room_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_room_state& from);
  void MergeFrom(const s_ans_room_state& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .GameRoomInfo gri = 1;
  inline bool has_gri() const;
  inline void clear_gri();
  static const int kGriFieldNumber = 1;
  inline const ::GameRoomInfo& gri() const;
  inline ::GameRoomInfo* mutable_gri();
  inline ::GameRoomInfo* release_gri();
  
  // @@protoc_insertion_point(class_scope:s_ans_room_state)
 private:
  inline void set_has_gri();
  inline void clear_has_gri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::GameRoomInfo* gri_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_room_state* default_instance_;
};
// -------------------------------------------------------------------

class s_x2bs_echo : public ::google::protobuf::Message {
 public:
  s_x2bs_echo();
  virtual ~s_x2bs_echo();
  
  s_x2bs_echo(const s_x2bs_echo& from);
  
  inline s_x2bs_echo& operator=(const s_x2bs_echo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_x2bs_echo& default_instance();
  
  void Swap(s_x2bs_echo* other);
  
  // implements Message ----------------------------------------------
  
  s_x2bs_echo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_x2bs_echo& from);
  void MergeFrom(const s_x2bs_echo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int32 client_time_msec = 3;
  inline bool has_client_time_msec() const;
  inline void clear_client_time_msec();
  static const int kClientTimeMsecFieldNumber = 3;
  inline ::google::protobuf::int32 client_time_msec() const;
  inline void set_client_time_msec(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_x2bs_echo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_client_time_msec();
  inline void clear_has_client_time_msec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 client_time_msec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_x2bs_echo* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2x_echo : public ::google::protobuf::Message {
 public:
  s_bs2x_echo();
  virtual ~s_bs2x_echo();
  
  s_bs2x_echo(const s_bs2x_echo& from);
  
  inline s_bs2x_echo& operator=(const s_bs2x_echo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2x_echo& default_instance();
  
  void Swap(s_bs2x_echo* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2x_echo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2x_echo& from);
  void MergeFrom(const s_bs2x_echo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int32 client_time_msec = 3;
  inline bool has_client_time_msec() const;
  inline void clear_client_time_msec();
  static const int kClientTimeMsecFieldNumber = 3;
  inline ::google::protobuf::int32 client_time_msec() const;
  inline void set_client_time_msec(::google::protobuf::int32 value);
  
  // optional int64 bs_time_msec = 4;
  inline bool has_bs_time_msec() const;
  inline void clear_bs_time_msec();
  static const int kBsTimeMsecFieldNumber = 4;
  inline ::google::protobuf::int64 bs_time_msec() const;
  inline void set_bs_time_msec(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_bs2x_echo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_client_time_msec();
  inline void clear_has_client_time_msec();
  inline void set_has_bs_time_msec();
  inline void clear_has_bs_time_msec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 client_time_msec_;
  ::google::protobuf::int64 bs_time_msec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2x_echo* default_instance_;
};
// -------------------------------------------------------------------

class s_req_chat : public ::google::protobuf::Message {
 public:
  s_req_chat();
  virtual ~s_req_chat();
  
  s_req_chat(const s_req_chat& from);
  
  inline s_req_chat& operator=(const s_req_chat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_chat& default_instance();
  
  void Swap(s_req_chat* other);
  
  // implements Message ----------------------------------------------
  
  s_req_chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_chat& from);
  void MergeFrom(const s_req_chat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional string etc = 3;
  inline bool has_etc() const;
  inline void clear_etc();
  static const int kEtcFieldNumber = 3;
  inline const ::std::string& etc() const;
  inline void set_etc(const ::std::string& value);
  inline void set_etc(const char* value);
  inline void set_etc(const char* value, size_t size);
  inline ::std::string* mutable_etc();
  inline ::std::string* release_etc();
  
  // @@protoc_insertion_point(class_scope:s_req_chat)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_etc();
  inline void clear_has_etc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::std::string* etc_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_chat* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_chat : public ::google::protobuf::Message {
 public:
  s_ans_chat();
  virtual ~s_ans_chat();
  
  s_ans_chat(const s_ans_chat& from);
  
  inline s_ans_chat& operator=(const s_ans_chat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_chat& default_instance();
  
  void Swap(s_ans_chat* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_chat& from);
  void MergeFrom(const s_ans_chat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional string etc = 3;
  inline bool has_etc() const;
  inline void clear_etc();
  static const int kEtcFieldNumber = 3;
  inline const ::std::string& etc() const;
  inline void set_etc(const ::std::string& value);
  inline void set_etc(const char* value);
  inline void set_etc(const char* value, size_t size);
  inline ::std::string* mutable_etc();
  inline ::std::string* release_etc();
  
  // @@protoc_insertion_point(class_scope:s_ans_chat)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_etc();
  inline void clear_has_etc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::std::string* etc_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_chat* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_timer_start : public ::google::protobuf::Message {
 public:
  s_ans_timer_start();
  virtual ~s_ans_timer_start();
  
  s_ans_timer_start(const s_ans_timer_start& from);
  
  inline s_ans_timer_start& operator=(const s_ans_timer_start& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_timer_start& default_instance();
  
  void Swap(s_ans_timer_start* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_timer_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_timer_start& from);
  void MergeFrom(const s_ans_timer_start& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // @@protoc_insertion_point(class_scope:s_ans_timer_start)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_timer_start* default_instance_;
};
// -------------------------------------------------------------------

class s_req_timer_start : public ::google::protobuf::Message {
 public:
  s_req_timer_start();
  virtual ~s_req_timer_start();
  
  s_req_timer_start(const s_req_timer_start& from);
  
  inline s_req_timer_start& operator=(const s_req_timer_start& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_timer_start& default_instance();
  
  void Swap(s_req_timer_start* other);
  
  // implements Message ----------------------------------------------
  
  s_req_timer_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_timer_start& from);
  void MergeFrom(const s_req_timer_start& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int32 term() const;
  inline void set_term(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // @@protoc_insertion_point(class_scope:s_req_timer_start)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 term_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_timer_start* default_instance_;
};
// -------------------------------------------------------------------

class s_req_do_disconnect : public ::google::protobuf::Message {
 public:
  s_req_do_disconnect();
  virtual ~s_req_do_disconnect();
  
  s_req_do_disconnect(const s_req_do_disconnect& from);
  
  inline s_req_do_disconnect& operator=(const s_req_do_disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_do_disconnect& default_instance();
  
  void Swap(s_req_do_disconnect* other);
  
  // implements Message ----------------------------------------------
  
  s_req_do_disconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_do_disconnect& from);
  void MergeFrom(const s_req_do_disconnect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  
  // @@protoc_insertion_point(class_scope:s_req_do_disconnect)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_do_disconnect* default_instance_;
};
// -------------------------------------------------------------------

class s_x2bs_echo2 : public ::google::protobuf::Message {
 public:
  s_x2bs_echo2();
  virtual ~s_x2bs_echo2();
  
  s_x2bs_echo2(const s_x2bs_echo2& from);
  
  inline s_x2bs_echo2& operator=(const s_x2bs_echo2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_x2bs_echo2& default_instance();
  
  void Swap(s_x2bs_echo2* other);
  
  // implements Message ----------------------------------------------
  
  s_x2bs_echo2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_x2bs_echo2& from);
  void MergeFrom(const s_x2bs_echo2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int32 client_time_msec = 3;
  inline bool has_client_time_msec() const;
  inline void clear_client_time_msec();
  static const int kClientTimeMsecFieldNumber = 3;
  inline ::google::protobuf::int32 client_time_msec() const;
  inline void set_client_time_msec(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_x2bs_echo2)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_client_time_msec();
  inline void clear_has_client_time_msec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 client_time_msec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_x2bs_echo2* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2x_echo2 : public ::google::protobuf::Message {
 public:
  s_bs2x_echo2();
  virtual ~s_bs2x_echo2();
  
  s_bs2x_echo2(const s_bs2x_echo2& from);
  
  inline s_bs2x_echo2& operator=(const s_bs2x_echo2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2x_echo2& default_instance();
  
  void Swap(s_bs2x_echo2* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2x_echo2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2x_echo2& from);
  void MergeFrom(const s_bs2x_echo2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int32 client_time_msec = 3;
  inline bool has_client_time_msec() const;
  inline void clear_client_time_msec();
  static const int kClientTimeMsecFieldNumber = 3;
  inline ::google::protobuf::int32 client_time_msec() const;
  inline void set_client_time_msec(::google::protobuf::int32 value);
  
  // optional int64 bs_time_msec = 4;
  inline bool has_bs_time_msec() const;
  inline void clear_bs_time_msec();
  static const int kBsTimeMsecFieldNumber = 4;
  inline ::google::protobuf::int64 bs_time_msec() const;
  inline void set_bs_time_msec(::google::protobuf::int64 value);
  
  // optional int32 etc = 5;
  inline bool has_etc() const;
  inline void clear_etc();
  static const int kEtcFieldNumber = 5;
  inline ::google::protobuf::int32 etc() const;
  inline void set_etc(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_bs2x_echo2)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_client_time_msec();
  inline void clear_has_client_time_msec();
  inline void set_has_bs_time_msec();
  inline void clear_has_bs_time_msec();
  inline void set_has_etc();
  inline void clear_has_etc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 client_time_msec_;
  ::google::protobuf::int64 bs_time_msec_;
  ::google::protobuf::int32 etc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2x_echo2* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_bs_error : public ::google::protobuf::Message {
 public:
  s_ans_bs_error();
  virtual ~s_ans_bs_error();
  
  s_ans_bs_error(const s_ans_bs_error& from);
  
  inline s_ans_bs_error& operator=(const s_ans_bs_error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_bs_error& default_instance();
  
  void Swap(s_ans_bs_error* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_bs_error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_bs_error& from);
  void MergeFrom(const s_ans_bs_error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sys_error_id = 1;
  inline bool has_sys_error_id() const;
  inline void clear_sys_error_id();
  static const int kSysErrorIdFieldNumber = 1;
  inline ::google::protobuf::int32 sys_error_id() const;
  inline void set_sys_error_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_bs_error)
 private:
  inline void set_has_sys_error_id();
  inline void clear_has_sys_error_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sys_error_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_bs_error* default_instance_;
};
// -------------------------------------------------------------------

class s_req_get_cvar : public ::google::protobuf::Message {
 public:
  s_req_get_cvar();
  virtual ~s_req_get_cvar();
  
  s_req_get_cvar(const s_req_get_cvar& from);
  
  inline s_req_get_cvar& operator=(const s_req_get_cvar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_get_cvar& default_instance();
  
  void Swap(s_req_get_cvar* other);
  
  // implements Message ----------------------------------------------
  
  s_req_get_cvar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_get_cvar& from);
  void MergeFrom(const s_req_get_cvar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:s_req_get_cvar)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_get_cvar* default_instance_;
};
// -------------------------------------------------------------------

class s_req_set_cvar : public ::google::protobuf::Message {
 public:
  s_req_set_cvar();
  virtual ~s_req_set_cvar();
  
  s_req_set_cvar(const s_req_set_cvar& from);
  
  inline s_req_set_cvar& operator=(const s_req_set_cvar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_set_cvar& default_instance();
  
  void Swap(s_req_set_cvar* other);
  
  // implements Message ----------------------------------------------
  
  s_req_set_cvar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_set_cvar& from);
  void MergeFrom(const s_req_set_cvar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // @@protoc_insertion_point(class_scope:s_req_set_cvar)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_val();
  inline void clear_has_val();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* val_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_set_cvar* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2ug_set_cvar : public ::google::protobuf::Message {
 public:
  s_bs2ug_set_cvar();
  virtual ~s_bs2ug_set_cvar();
  
  s_bs2ug_set_cvar(const s_bs2ug_set_cvar& from);
  
  inline s_bs2ug_set_cvar& operator=(const s_bs2ug_set_cvar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2ug_set_cvar& default_instance();
  
  void Swap(s_bs2ug_set_cvar* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2ug_set_cvar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2ug_set_cvar& from);
  void MergeFrom(const s_bs2ug_set_cvar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // @@protoc_insertion_point(class_scope:s_bs2ug_set_cvar)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_val();
  inline void clear_has_val();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* val_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2ug_set_cvar* default_instance_;
};
// -------------------------------------------------------------------

class s_ug2bs_ans_set_cvar : public ::google::protobuf::Message {
 public:
  s_ug2bs_ans_set_cvar();
  virtual ~s_ug2bs_ans_set_cvar();
  
  s_ug2bs_ans_set_cvar(const s_ug2bs_ans_set_cvar& from);
  
  inline s_ug2bs_ans_set_cvar& operator=(const s_ug2bs_ans_set_cvar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ug2bs_ans_set_cvar& default_instance();
  
  void Swap(s_ug2bs_ans_set_cvar* other);
  
  // implements Message ----------------------------------------------
  
  s_ug2bs_ans_set_cvar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ug2bs_ans_set_cvar& from);
  void MergeFrom(const s_ug2bs_ans_set_cvar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // @@protoc_insertion_point(class_scope:s_ug2bs_ans_set_cvar)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_val();
  inline void clear_has_val();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* val_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ug2bs_ans_set_cvar* default_instance_;
};
// -------------------------------------------------------------------

class s_x2bs_auto_match_ready2 : public ::google::protobuf::Message {
 public:
  s_x2bs_auto_match_ready2();
  virtual ~s_x2bs_auto_match_ready2();
  
  s_x2bs_auto_match_ready2(const s_x2bs_auto_match_ready2& from);
  
  inline s_x2bs_auto_match_ready2& operator=(const s_x2bs_auto_match_ready2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_x2bs_auto_match_ready2& default_instance();
  
  void Swap(s_x2bs_auto_match_ready2* other);
  
  // implements Message ----------------------------------------------
  
  s_x2bs_auto_match_ready2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_x2bs_auto_match_ready2& from);
  void MergeFrom(const s_x2bs_auto_match_ready2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 batter = 2;
  inline bool has_batter() const;
  inline void clear_batter();
  static const int kBatterFieldNumber = 2;
  inline ::google::protobuf::int32 batter() const;
  inline void set_batter(::google::protobuf::int32 value);
  
  // optional int32 pitcher = 3;
  inline bool has_pitcher() const;
  inline void clear_pitcher();
  static const int kPitcherFieldNumber = 3;
  inline ::google::protobuf::int32 pitcher() const;
  inline void set_pitcher(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_x2bs_auto_match_ready2)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_batter();
  inline void clear_has_batter();
  inline void set_has_pitcher();
  inline void clear_has_pitcher();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 batter_;
  ::google::protobuf::int32 pitcher_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_x2bs_auto_match_ready2* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2x_auto_match_ready2 : public ::google::protobuf::Message {
 public:
  s_bs2x_auto_match_ready2();
  virtual ~s_bs2x_auto_match_ready2();
  
  s_bs2x_auto_match_ready2(const s_bs2x_auto_match_ready2& from);
  
  inline s_bs2x_auto_match_ready2& operator=(const s_bs2x_auto_match_ready2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2x_auto_match_ready2& default_instance();
  
  void Swap(s_bs2x_auto_match_ready2* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2x_auto_match_ready2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2x_auto_match_ready2& from);
  void MergeFrom(const s_bs2x_auto_match_ready2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 batter = 2;
  inline bool has_batter() const;
  inline void clear_batter();
  static const int kBatterFieldNumber = 2;
  inline ::google::protobuf::int32 batter() const;
  inline void set_batter(::google::protobuf::int32 value);
  
  // optional int32 pitcher = 3;
  inline bool has_pitcher() const;
  inline void clear_pitcher();
  static const int kPitcherFieldNumber = 3;
  inline ::google::protobuf::int32 pitcher() const;
  inline void set_pitcher(::google::protobuf::int32 value);
  
  // optional int32 other_batter = 4;
  inline bool has_other_batter() const;
  inline void clear_other_batter();
  static const int kOtherBatterFieldNumber = 4;
  inline ::google::protobuf::int32 other_batter() const;
  inline void set_other_batter(::google::protobuf::int32 value);
  
  // optional int32 other_pitcher = 5;
  inline bool has_other_pitcher() const;
  inline void clear_other_pitcher();
  static const int kOtherPitcherFieldNumber = 5;
  inline ::google::protobuf::int32 other_pitcher() const;
  inline void set_other_pitcher(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_bs2x_auto_match_ready2)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_batter();
  inline void clear_has_batter();
  inline void set_has_pitcher();
  inline void clear_has_pitcher();
  inline void set_has_other_batter();
  inline void clear_has_other_batter();
  inline void set_has_other_pitcher();
  inline void clear_has_other_pitcher();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 batter_;
  ::google::protobuf::int32 pitcher_;
  ::google::protobuf::int32 other_batter_;
  ::google::protobuf::int32 other_pitcher_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2x_auto_match_ready2* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_game_start : public ::google::protobuf::Message {
 public:
  s_ans_game_start();
  virtual ~s_ans_game_start();
  
  s_ans_game_start(const s_ans_game_start& from);
  
  inline s_ans_game_start& operator=(const s_ans_game_start& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_game_start& default_instance();
  
  void Swap(s_ans_game_start* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_game_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_game_start& from);
  void MergeFrom(const s_ans_game_start& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 attack_user = 1;
  inline bool has_attack_user() const;
  inline void clear_attack_user();
  static const int kAttackUserFieldNumber = 1;
  inline ::google::protobuf::int64 attack_user() const;
  inline void set_attack_user(::google::protobuf::int64 value);
  
  // optional int32 sid_Sys_Runner_State = 2;
  inline bool has_sid_sys_runner_state() const;
  inline void clear_sid_sys_runner_state();
  static const int kSidSysRunnerStateFieldNumber = 2;
  inline ::google::protobuf::int32 sid_sys_runner_state() const;
  inline void set_sid_sys_runner_state(::google::protobuf::int32 value);
  
  // optional int32 baseball_park = 3;
  inline bool has_baseball_park() const;
  inline void clear_baseball_park();
  static const int kBaseballParkFieldNumber = 3;
  inline ::google::protobuf::int32 baseball_park() const;
  inline void set_baseball_park(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_game_start)
 private:
  inline void set_has_attack_user();
  inline void clear_has_attack_user();
  inline void set_has_sid_sys_runner_state();
  inline void clear_has_sid_sys_runner_state();
  inline void set_has_baseball_park();
  inline void clear_has_baseball_park();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 attack_user_;
  ::google::protobuf::int32 sid_sys_runner_state_;
  ::google::protobuf::int32 baseball_park_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_game_start* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_game_round_start : public ::google::protobuf::Message {
 public:
  s_ans_game_round_start();
  virtual ~s_ans_game_round_start();
  
  s_ans_game_round_start(const s_ans_game_round_start& from);
  
  inline s_ans_game_round_start& operator=(const s_ans_game_round_start& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_game_round_start& default_instance();
  
  void Swap(s_ans_game_round_start* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_game_round_start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_game_round_start& from);
  void MergeFrom(const s_ans_game_round_start& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);
  
  // optional int32 runner_state = 2;
  inline bool has_runner_state() const;
  inline void clear_runner_state();
  static const int kRunnerStateFieldNumber = 2;
  inline ::google::protobuf::int32 runner_state() const;
  inline void set_runner_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_game_round_start)
 private:
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_runner_state();
  inline void clear_has_runner_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 round_;
  ::google::protobuf::int32 runner_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_game_round_start* default_instance_;
};
// -------------------------------------------------------------------

class s_x2bs_match_ready : public ::google::protobuf::Message {
 public:
  s_x2bs_match_ready();
  virtual ~s_x2bs_match_ready();
  
  s_x2bs_match_ready(const s_x2bs_match_ready& from);
  
  inline s_x2bs_match_ready& operator=(const s_x2bs_match_ready& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_x2bs_match_ready& default_instance();
  
  void Swap(s_x2bs_match_ready* other);
  
  // implements Message ----------------------------------------------
  
  s_x2bs_match_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_x2bs_match_ready& from);
  void MergeFrom(const s_x2bs_match_ready& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_x2bs_match_ready)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_x2bs_match_ready* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2x_match_ready : public ::google::protobuf::Message {
 public:
  s_bs2x_match_ready();
  virtual ~s_bs2x_match_ready();
  
  s_bs2x_match_ready(const s_bs2x_match_ready& from);
  
  inline s_bs2x_match_ready& operator=(const s_bs2x_match_ready& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2x_match_ready& default_instance();
  
  void Swap(s_bs2x_match_ready* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2x_match_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2x_match_ready& from);
  void MergeFrom(const s_bs2x_match_ready& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_bs2x_match_ready)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2x_match_ready* default_instance_;
};
// -------------------------------------------------------------------

class s_req_pitcher_throw : public ::google::protobuf::Message {
 public:
  s_req_pitcher_throw();
  virtual ~s_req_pitcher_throw();
  
  s_req_pitcher_throw(const s_req_pitcher_throw& from);
  
  inline s_req_pitcher_throw& operator=(const s_req_pitcher_throw& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_pitcher_throw& default_instance();
  
  void Swap(s_req_pitcher_throw* other);
  
  // implements Message ----------------------------------------------
  
  s_req_pitcher_throw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_pitcher_throw& from);
  void MergeFrom(const s_req_pitcher_throw& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_pitcher_throw_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::s_pitcher_throw_info& info() const;
  inline ::s_pitcher_throw_info* mutable_info();
  inline ::s_pitcher_throw_info* release_info();
  
  // optional int32 used_gesturetype = 2;
  inline bool has_used_gesturetype() const;
  inline void clear_used_gesturetype();
  static const int kUsedGesturetypeFieldNumber = 2;
  inline ::google::protobuf::int32 used_gesturetype() const;
  inline void set_used_gesturetype(::google::protobuf::int32 value);
  
  // optional int32 gesturetype_input_error = 3;
  inline bool has_gesturetype_input_error() const;
  inline void clear_gesturetype_input_error();
  static const int kGesturetypeInputErrorFieldNumber = 3;
  inline ::google::protobuf::int32 gesturetype_input_error() const;
  inline void set_gesturetype_input_error(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_req_pitcher_throw)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_used_gesturetype();
  inline void clear_has_used_gesturetype();
  inline void set_has_gesturetype_input_error();
  inline void clear_has_gesturetype_input_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_pitcher_throw_info* info_;
  ::google::protobuf::int32 used_gesturetype_;
  ::google::protobuf::int32 gesturetype_input_error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_pitcher_throw* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_pitcher_throw : public ::google::protobuf::Message {
 public:
  s_ans_pitcher_throw();
  virtual ~s_ans_pitcher_throw();
  
  s_ans_pitcher_throw(const s_ans_pitcher_throw& from);
  
  inline s_ans_pitcher_throw& operator=(const s_ans_pitcher_throw& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_pitcher_throw& default_instance();
  
  void Swap(s_ans_pitcher_throw* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_pitcher_throw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_pitcher_throw& from);
  void MergeFrom(const s_ans_pitcher_throw& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_pitcher_throw_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::s_pitcher_throw_info& info() const;
  inline ::s_pitcher_throw_info* mutable_info();
  inline ::s_pitcher_throw_info* release_info();
  
  // optional bool is_auto = 2;
  inline bool has_is_auto() const;
  inline void clear_is_auto();
  static const int kIsAutoFieldNumber = 2;
  inline bool is_auto() const;
  inline void set_is_auto(bool value);
  
  // @@protoc_insertion_point(class_scope:s_ans_pitcher_throw)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_is_auto();
  inline void clear_has_is_auto();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_pitcher_throw_info* info_;
  bool is_auto_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_pitcher_throw* default_instance_;
};
// -------------------------------------------------------------------

class s_req_better_hit : public ::google::protobuf::Message {
 public:
  s_req_better_hit();
  virtual ~s_req_better_hit();
  
  s_req_better_hit(const s_req_better_hit& from);
  
  inline s_req_better_hit& operator=(const s_req_better_hit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_better_hit& default_instance();
  
  void Swap(s_req_better_hit* other);
  
  // implements Message ----------------------------------------------
  
  s_req_better_hit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_better_hit& from);
  void MergeFrom(const s_req_better_hit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_better_hit_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::s_better_hit_info& info() const;
  inline ::s_better_hit_info* mutable_info();
  inline ::s_better_hit_info* release_info();
  
  // @@protoc_insertion_point(class_scope:s_req_better_hit)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_better_hit_info* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_better_hit* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_better_hit : public ::google::protobuf::Message {
 public:
  s_ans_better_hit();
  virtual ~s_ans_better_hit();
  
  s_ans_better_hit(const s_ans_better_hit& from);
  
  inline s_ans_better_hit& operator=(const s_ans_better_hit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_better_hit& default_instance();
  
  void Swap(s_ans_better_hit* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_better_hit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_better_hit& from);
  void MergeFrom(const s_ans_better_hit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_better_hit_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::s_better_hit_info& info() const;
  inline ::s_better_hit_info* mutable_info();
  inline ::s_better_hit_info* release_info();
  
  // optional bool is_auto = 2;
  inline bool has_is_auto() const;
  inline void clear_is_auto();
  static const int kIsAutoFieldNumber = 2;
  inline bool is_auto() const;
  inline void set_is_auto(bool value);
  
  // @@protoc_insertion_point(class_scope:s_ans_better_hit)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_is_auto();
  inline void clear_has_is_auto();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_better_hit_info* info_;
  bool is_auto_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_better_hit* default_instance_;
};
// -------------------------------------------------------------------

class s_req_result_better_hit : public ::google::protobuf::Message {
 public:
  s_req_result_better_hit();
  virtual ~s_req_result_better_hit();
  
  s_req_result_better_hit(const s_req_result_better_hit& from);
  
  inline s_req_result_better_hit& operator=(const s_req_result_better_hit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_result_better_hit& default_instance();
  
  void Swap(s_req_result_better_hit* other);
  
  // implements Message ----------------------------------------------
  
  s_req_result_better_hit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_result_better_hit& from);
  void MergeFrom(const s_req_result_better_hit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_result_round info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::s_result_round& info() const;
  inline ::s_result_round* mutable_info();
  inline ::s_result_round* release_info();
  
  // optional int32 test = 2;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 2;
  inline ::google::protobuf::int32 test() const;
  inline void set_test(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_req_result_better_hit)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_result_round* info_;
  ::google::protobuf::int32 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_result_better_hit* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_result_better_hit : public ::google::protobuf::Message {
 public:
  s_ans_result_better_hit();
  virtual ~s_ans_result_better_hit();
  
  s_ans_result_better_hit(const s_ans_result_better_hit& from);
  
  inline s_ans_result_better_hit& operator=(const s_ans_result_better_hit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_result_better_hit& default_instance();
  
  void Swap(s_ans_result_better_hit* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_result_better_hit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_result_better_hit& from);
  void MergeFrom(const s_ans_result_better_hit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_result_round info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::s_result_round& info() const;
  inline ::s_result_round* mutable_info();
  inline ::s_result_round* release_info();
  
  // optional int32 end_type = 2;
  inline bool has_end_type() const;
  inline void clear_end_type();
  static const int kEndTypeFieldNumber = 2;
  inline ::google::protobuf::int32 end_type() const;
  inline void set_end_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_result_better_hit)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_end_type();
  inline void clear_has_end_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_result_round* info_;
  ::google::protobuf::int32 end_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_result_better_hit* default_instance_;
};
// -------------------------------------------------------------------

class s_x2bs_batter_ready : public ::google::protobuf::Message {
 public:
  s_x2bs_batter_ready();
  virtual ~s_x2bs_batter_ready();
  
  s_x2bs_batter_ready(const s_x2bs_batter_ready& from);
  
  inline s_x2bs_batter_ready& operator=(const s_x2bs_batter_ready& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_x2bs_batter_ready& default_instance();
  
  void Swap(s_x2bs_batter_ready* other);
  
  // implements Message ----------------------------------------------
  
  s_x2bs_batter_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_x2bs_batter_ready& from);
  void MergeFrom(const s_x2bs_batter_ready& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:s_x2bs_batter_ready)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_x2bs_batter_ready* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2x_batter_ready : public ::google::protobuf::Message {
 public:
  s_bs2x_batter_ready();
  virtual ~s_bs2x_batter_ready();
  
  s_bs2x_batter_ready(const s_bs2x_batter_ready& from);
  
  inline s_bs2x_batter_ready& operator=(const s_bs2x_batter_ready& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2x_batter_ready& default_instance();
  
  void Swap(s_bs2x_batter_ready* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2x_batter_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2x_batter_ready& from);
  void MergeFrom(const s_bs2x_batter_ready& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:s_bs2x_batter_ready)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2x_batter_ready* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_change_attack_team : public ::google::protobuf::Message {
 public:
  s_ans_change_attack_team();
  virtual ~s_ans_change_attack_team();
  
  s_ans_change_attack_team(const s_ans_change_attack_team& from);
  
  inline s_ans_change_attack_team& operator=(const s_ans_change_attack_team& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_change_attack_team& default_instance();
  
  void Swap(s_ans_change_attack_team* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_change_attack_team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_change_attack_team& from);
  void MergeFrom(const s_ans_change_attack_team& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);
  
  // optional int64 attack_user = 2;
  inline bool has_attack_user() const;
  inline void clear_attack_user();
  static const int kAttackUserFieldNumber = 2;
  inline ::google::protobuf::int64 attack_user() const;
  inline void set_attack_user(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_change_attack_team)
 private:
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_attack_user();
  inline void clear_has_attack_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 attack_user_;
  ::google::protobuf::int32 round_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_change_attack_team* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_game_end : public ::google::protobuf::Message {
 public:
  s_ans_game_end();
  virtual ~s_ans_game_end();
  
  s_ans_game_end(const s_ans_game_end& from);
  
  inline s_ans_game_end& operator=(const s_ans_game_end& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_game_end& default_instance();
  
  void Swap(s_ans_game_end* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_game_end& from);
  void MergeFrom(const s_ans_game_end& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_result_game rg = 1;
  inline bool has_rg() const;
  inline void clear_rg();
  static const int kRgFieldNumber = 1;
  inline const ::s_result_game& rg() const;
  inline ::s_result_game* mutable_rg();
  inline ::s_result_game* release_rg();
  
  // optional .s_tbl_user user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::s_tbl_user& user() const;
  inline ::s_tbl_user* mutable_user();
  inline ::s_tbl_user* release_user();
  
  // optional int32 end_type = 3;
  inline bool has_end_type() const;
  inline void clear_end_type();
  static const int kEndTypeFieldNumber = 3;
  inline ::google::protobuf::int32 end_type() const;
  inline void set_end_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_game_end)
 private:
  inline void set_has_rg();
  inline void clear_has_rg();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_end_type();
  inline void clear_has_end_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_result_game* rg_;
  ::s_tbl_user* user_;
  ::google::protobuf::int32 end_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_game_end* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2x_game_end_other_user_info : public ::google::protobuf::Message {
 public:
  s_bs2x_game_end_other_user_info();
  virtual ~s_bs2x_game_end_other_user_info();
  
  s_bs2x_game_end_other_user_info(const s_bs2x_game_end_other_user_info& from);
  
  inline s_bs2x_game_end_other_user_info& operator=(const s_bs2x_game_end_other_user_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2x_game_end_other_user_info& default_instance();
  
  void Swap(s_bs2x_game_end_other_user_info* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2x_game_end_other_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2x_game_end_other_user_info& from);
  void MergeFrom(const s_bs2x_game_end_other_user_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_tbl_user other_user = 1;
  inline bool has_other_user() const;
  inline void clear_other_user();
  static const int kOtherUserFieldNumber = 1;
  inline const ::s_tbl_user& other_user() const;
  inline ::s_tbl_user* mutable_other_user();
  inline ::s_tbl_user* release_other_user();
  
  // @@protoc_insertion_point(class_scope:s_bs2x_game_end_other_user_info)
 private:
  inline void set_has_other_user();
  inline void clear_has_other_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_tbl_user* other_user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2x_game_end_other_user_info* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2ug_game_end : public ::google::protobuf::Message {
 public:
  s_bs2ug_game_end();
  virtual ~s_bs2ug_game_end();
  
  s_bs2ug_game_end(const s_bs2ug_game_end& from);
  
  inline s_bs2ug_game_end& operator=(const s_bs2ug_game_end& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2ug_game_end& default_instance();
  
  void Swap(s_bs2ug_game_end* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2ug_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2ug_game_end& from);
  void MergeFrom(const s_bs2ug_game_end& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_result_game rg = 1;
  inline bool has_rg() const;
  inline void clear_rg();
  static const int kRgFieldNumber = 1;
  inline const ::s_result_game& rg() const;
  inline ::s_result_game* mutable_rg();
  inline ::s_result_game* release_rg();
  
  // optional bool is_better = 2;
  inline bool has_is_better() const;
  inline void clear_is_better();
  static const int kIsBetterFieldNumber = 2;
  inline bool is_better() const;
  inline void set_is_better(bool value);
  
  // repeated .s_result_round rr = 3;
  inline int rr_size() const;
  inline void clear_rr();
  static const int kRrFieldNumber = 3;
  inline const ::s_result_round& rr(int index) const;
  inline ::s_result_round* mutable_rr(int index);
  inline ::s_result_round* add_rr();
  inline const ::google::protobuf::RepeatedPtrField< ::s_result_round >&
      rr() const;
  inline ::google::protobuf::RepeatedPtrField< ::s_result_round >*
      mutable_rr();
  
  // @@protoc_insertion_point(class_scope:s_bs2ug_game_end)
 private:
  inline void set_has_rg();
  inline void clear_has_rg();
  inline void set_has_is_better();
  inline void clear_has_is_better();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_result_game* rg_;
  ::google::protobuf::RepeatedPtrField< ::s_result_round > rr_;
  bool is_better_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2ug_game_end* default_instance_;
};
// -------------------------------------------------------------------

class s_ug2bs_game_end : public ::google::protobuf::Message {
 public:
  s_ug2bs_game_end();
  virtual ~s_ug2bs_game_end();
  
  s_ug2bs_game_end(const s_ug2bs_game_end& from);
  
  inline s_ug2bs_game_end& operator=(const s_ug2bs_game_end& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ug2bs_game_end& default_instance();
  
  void Swap(s_ug2bs_game_end* other);
  
  // implements Message ----------------------------------------------
  
  s_ug2bs_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ug2bs_game_end& from);
  void MergeFrom(const s_ug2bs_game_end& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .s_result_game rg = 1;
  inline bool has_rg() const;
  inline void clear_rg();
  static const int kRgFieldNumber = 1;
  inline const ::s_result_game& rg() const;
  inline ::s_result_game* mutable_rg();
  inline ::s_result_game* release_rg();
  
  // optional .s_tbl_user user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::s_tbl_user& user() const;
  inline ::s_tbl_user* mutable_user();
  inline ::s_tbl_user* release_user();
  
  // @@protoc_insertion_point(class_scope:s_ug2bs_game_end)
 private:
  inline void set_has_rg();
  inline void clear_has_rg();
  inline void set_has_user();
  inline void clear_has_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_result_game* rg_;
  ::s_tbl_user* user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ug2bs_game_end* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_user_disconnect : public ::google::protobuf::Message {
 public:
  s_ans_user_disconnect();
  virtual ~s_ans_user_disconnect();
  
  s_ans_user_disconnect(const s_ans_user_disconnect& from);
  
  inline s_ans_user_disconnect& operator=(const s_ans_user_disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_user_disconnect& default_instance();
  
  void Swap(s_ans_user_disconnect* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_user_disconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_user_disconnect& from);
  void MergeFrom(const s_ans_user_disconnect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 sys_error_id = 2;
  inline bool has_sys_error_id() const;
  inline void clear_sys_error_id();
  static const int kSysErrorIdFieldNumber = 2;
  inline ::google::protobuf::int32 sys_error_id() const;
  inline void set_sys_error_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_user_disconnect)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sys_error_id();
  inline void clear_has_sys_error_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 sys_error_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_user_disconnect* default_instance_;
};
// -------------------------------------------------------------------

class s_req_rematch : public ::google::protobuf::Message {
 public:
  s_req_rematch();
  virtual ~s_req_rematch();
  
  s_req_rematch(const s_req_rematch& from);
  
  inline s_req_rematch& operator=(const s_req_rematch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_rematch& default_instance();
  
  void Swap(s_req_rematch* other);
  
  // implements Message ----------------------------------------------
  
  s_req_rematch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_rematch& from);
  void MergeFrom(const s_req_rematch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_req_rematch)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_rematch* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_rematch : public ::google::protobuf::Message {
 public:
  s_ans_rematch();
  virtual ~s_ans_rematch();
  
  s_ans_rematch(const s_ans_rematch& from);
  
  inline s_ans_rematch& operator=(const s_ans_rematch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_rematch& default_instance();
  
  void Swap(s_ans_rematch* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_rematch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_rematch& from);
  void MergeFrom(const s_ans_rematch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_rematch)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_rematch* default_instance_;
};
// -------------------------------------------------------------------

class s_req_answer_restart_game : public ::google::protobuf::Message {
 public:
  s_req_answer_restart_game();
  virtual ~s_req_answer_restart_game();
  
  s_req_answer_restart_game(const s_req_answer_restart_game& from);
  
  inline s_req_answer_restart_game& operator=(const s_req_answer_restart_game& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_req_answer_restart_game& default_instance();
  
  void Swap(s_req_answer_restart_game* other);
  
  // implements Message ----------------------------------------------
  
  s_req_answer_restart_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_req_answer_restart_game& from);
  void MergeFrom(const s_req_answer_restart_game& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional bool ok = 2;
  inline bool has_ok() const;
  inline void clear_ok();
  static const int kOkFieldNumber = 2;
  inline bool ok() const;
  inline void set_ok(bool value);
  
  // @@protoc_insertion_point(class_scope:s_req_answer_restart_game)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_ok();
  inline void clear_has_ok();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 uid_;
  bool ok_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_req_answer_restart_game* default_instance_;
};
// -------------------------------------------------------------------

class s_ans_answer_restart_game : public ::google::protobuf::Message {
 public:
  s_ans_answer_restart_game();
  virtual ~s_ans_answer_restart_game();
  
  s_ans_answer_restart_game(const s_ans_answer_restart_game& from);
  
  inline s_ans_answer_restart_game& operator=(const s_ans_answer_restart_game& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ans_answer_restart_game& default_instance();
  
  void Swap(s_ans_answer_restart_game* other);
  
  // implements Message ----------------------------------------------
  
  s_ans_answer_restart_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ans_answer_restart_game& from);
  void MergeFrom(const s_ans_answer_restart_game& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int64 uid = 1;
  inline int uid_size() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid(int index) const;
  inline void set_uid(int index, ::google::protobuf::int64 value);
  inline void add_uid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_uid();
  
  // repeated bool ok = 2;
  inline int ok_size() const;
  inline void clear_ok();
  static const int kOkFieldNumber = 2;
  inline bool ok(int index) const;
  inline void set_ok(int index, bool value);
  inline void add_ok(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      ok() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_ok();
  
  // optional int32 baseball_park = 3;
  inline bool has_baseball_park() const;
  inline void clear_baseball_park();
  static const int kBaseballParkFieldNumber = 3;
  inline ::google::protobuf::int32 baseball_park() const;
  inline void set_baseball_park(::google::protobuf::int32 value);
  
  // optional int64 attack_user = 4;
  inline bool has_attack_user() const;
  inline void clear_attack_user();
  static const int kAttackUserFieldNumber = 4;
  inline ::google::protobuf::int64 attack_user() const;
  inline void set_attack_user(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_ans_answer_restart_game)
 private:
  inline void set_has_baseball_park();
  inline void clear_has_baseball_park();
  inline void set_has_attack_user();
  inline void clear_has_attack_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > uid_;
  ::google::protobuf::RepeatedField< bool > ok_;
  ::google::protobuf::int64 attack_user_;
  ::google::protobuf::int32 baseball_park_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ans_answer_restart_game* default_instance_;
};
// -------------------------------------------------------------------

class s_ug2bs_echo : public ::google::protobuf::Message {
 public:
  s_ug2bs_echo();
  virtual ~s_ug2bs_echo();
  
  s_ug2bs_echo(const s_ug2bs_echo& from);
  
  inline s_ug2bs_echo& operator=(const s_ug2bs_echo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ug2bs_echo& default_instance();
  
  void Swap(s_ug2bs_echo* other);
  
  // implements Message ----------------------------------------------
  
  s_ug2bs_echo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ug2bs_echo& from);
  void MergeFrom(const s_ug2bs_echo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int64 bs_time_msec = 3;
  inline bool has_bs_time_msec() const;
  inline void clear_bs_time_msec();
  static const int kBsTimeMsecFieldNumber = 3;
  inline ::google::protobuf::int64 bs_time_msec() const;
  inline void set_bs_time_msec(::google::protobuf::int64 value);
  
  // optional int64 ug_time_msec = 4;
  inline bool has_ug_time_msec() const;
  inline void clear_ug_time_msec();
  static const int kUgTimeMsecFieldNumber = 4;
  inline ::google::protobuf::int64 ug_time_msec() const;
  inline void set_ug_time_msec(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_ug2bs_echo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_bs_time_msec();
  inline void clear_has_bs_time_msec();
  inline void set_has_ug_time_msec();
  inline void clear_has_ug_time_msec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int64 bs_time_msec_;
  ::google::protobuf::int64 ug_time_msec_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ug2bs_echo* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2ug_echo : public ::google::protobuf::Message {
 public:
  s_bs2ug_echo();
  virtual ~s_bs2ug_echo();
  
  s_bs2ug_echo(const s_bs2ug_echo& from);
  
  inline s_bs2ug_echo& operator=(const s_bs2ug_echo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2ug_echo& default_instance();
  
  void Swap(s_bs2ug_echo* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2ug_echo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2ug_echo& from);
  void MergeFrom(const s_bs2ug_echo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int64 bs_time_msec = 3;
  inline bool has_bs_time_msec() const;
  inline void clear_bs_time_msec();
  static const int kBsTimeMsecFieldNumber = 3;
  inline ::google::protobuf::int64 bs_time_msec() const;
  inline void set_bs_time_msec(::google::protobuf::int64 value);
  
  // optional int64 ug_time_msec = 4;
  inline bool has_ug_time_msec() const;
  inline void clear_ug_time_msec();
  static const int kUgTimeMsecFieldNumber = 4;
  inline ::google::protobuf::int64 ug_time_msec() const;
  inline void set_ug_time_msec(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_bs2ug_echo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_bs_time_msec();
  inline void clear_has_bs_time_msec();
  inline void set_has_ug_time_msec();
  inline void clear_has_ug_time_msec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int64 bs_time_msec_;
  ::google::protobuf::int64 ug_time_msec_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2ug_echo* default_instance_;
};
// -------------------------------------------------------------------

class s_ug2bs_error : public ::google::protobuf::Message {
 public:
  s_ug2bs_error();
  virtual ~s_ug2bs_error();
  
  s_ug2bs_error(const s_ug2bs_error& from);
  
  inline s_ug2bs_error& operator=(const s_ug2bs_error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ug2bs_error& default_instance();
  
  void Swap(s_ug2bs_error* other);
  
  // implements Message ----------------------------------------------
  
  s_ug2bs_error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ug2bs_error& from);
  void MergeFrom(const s_ug2bs_error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sys_error_id = 1;
  inline bool has_sys_error_id() const;
  inline void clear_sys_error_id();
  static const int kSysErrorIdFieldNumber = 1;
  inline ::google::protobuf::int32 sys_error_id() const;
  inline void set_sys_error_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_ug2bs_error)
 private:
  inline void set_has_sys_error_id();
  inline void clear_has_sys_error_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sys_error_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ug2bs_error* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2ug_error : public ::google::protobuf::Message {
 public:
  s_bs2ug_error();
  virtual ~s_bs2ug_error();
  
  s_bs2ug_error(const s_bs2ug_error& from);
  
  inline s_bs2ug_error& operator=(const s_bs2ug_error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2ug_error& default_instance();
  
  void Swap(s_bs2ug_error* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2ug_error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2ug_error& from);
  void MergeFrom(const s_bs2ug_error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sys_error_id = 1;
  inline bool has_sys_error_id() const;
  inline void clear_sys_error_id();
  static const int kSysErrorIdFieldNumber = 1;
  inline ::google::protobuf::int32 sys_error_id() const;
  inline void set_sys_error_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:s_bs2ug_error)
 private:
  inline void set_has_sys_error_id();
  inline void clear_has_sys_error_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sys_error_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2ug_error* default_instance_;
};
// -------------------------------------------------------------------

class s_bs2ug_add_discon_tot : public ::google::protobuf::Message {
 public:
  s_bs2ug_add_discon_tot();
  virtual ~s_bs2ug_add_discon_tot();
  
  s_bs2ug_add_discon_tot(const s_bs2ug_add_discon_tot& from);
  
  inline s_bs2ug_add_discon_tot& operator=(const s_bs2ug_add_discon_tot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_bs2ug_add_discon_tot& default_instance();
  
  void Swap(s_bs2ug_add_discon_tot* other);
  
  // implements Message ----------------------------------------------
  
  s_bs2ug_add_discon_tot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_bs2ug_add_discon_tot& from);
  void MergeFrom(const s_bs2ug_add_discon_tot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 discon_uid = 1;
  inline bool has_discon_uid() const;
  inline void clear_discon_uid();
  static const int kDisconUidFieldNumber = 1;
  inline ::google::protobuf::int64 discon_uid() const;
  inline void set_discon_uid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_bs2ug_add_discon_tot)
 private:
  inline void set_has_discon_uid();
  inline void clear_has_discon_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 discon_uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_bs2ug_add_discon_tot* default_instance_;
};
// -------------------------------------------------------------------

class s_ug2bs_add_discon_tot : public ::google::protobuf::Message {
 public:
  s_ug2bs_add_discon_tot();
  virtual ~s_ug2bs_add_discon_tot();
  
  s_ug2bs_add_discon_tot(const s_ug2bs_add_discon_tot& from);
  
  inline s_ug2bs_add_discon_tot& operator=(const s_ug2bs_add_discon_tot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_ug2bs_add_discon_tot& default_instance();
  
  void Swap(s_ug2bs_add_discon_tot* other);
  
  // implements Message ----------------------------------------------
  
  s_ug2bs_add_discon_tot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_ug2bs_add_discon_tot& from);
  void MergeFrom(const s_ug2bs_add_discon_tot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 discon_uid = 1;
  inline bool has_discon_uid() const;
  inline void clear_discon_uid();
  static const int kDisconUidFieldNumber = 1;
  inline ::google::protobuf::int64 discon_uid() const;
  inline void set_discon_uid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:s_ug2bs_add_discon_tot)
 private:
  inline void set_has_discon_uid();
  inline void clear_has_discon_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 discon_uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static s_ug2bs_add_discon_tot* default_instance_;
};
// -------------------------------------------------------------------

class BaseballServer_UserGateServer : public ::google::protobuf::Message {
 public:
  BaseballServer_UserGateServer();
  virtual ~BaseballServer_UserGateServer();
  
  BaseballServer_UserGateServer(const BaseballServer_UserGateServer& from);
  
  inline BaseballServer_UserGateServer& operator=(const BaseballServer_UserGateServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseballServer_UserGateServer& default_instance();
  
  void Swap(BaseballServer_UserGateServer* other);
  
  // implements Message ----------------------------------------------
  
  BaseballServer_UserGateServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseballServer_UserGateServer& from);
  void MergeFrom(const BaseballServer_UserGateServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BaseballServer_UserGateServer_Type Type;
  static const Type NONE = BaseballServer_UserGateServer_Type_NONE;
  static const Type bs2ug_set_cvar = BaseballServer_UserGateServer_Type_bs2ug_set_cvar;
  static const Type bs2ug_game_end = BaseballServer_UserGateServer_Type_bs2ug_game_end;
  static const Type bs2ug_echo = BaseballServer_UserGateServer_Type_bs2ug_echo;
  static const Type bs2ug_error = BaseballServer_UserGateServer_Type_bs2ug_error;
  static const Type bs2ug_add_discon_tot = BaseballServer_UserGateServer_Type_bs2ug_add_discon_tot;
  static inline bool Type_IsValid(int value) {
    return BaseballServer_UserGateServer_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BaseballServer_UserGateServer_Type_Type_MIN;
  static const Type Type_MAX =
    BaseballServer_UserGateServer_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BaseballServer_UserGateServer_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BaseballServer_UserGateServer_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BaseballServer_UserGateServer_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BaseballServer_UserGateServer_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .BaseballServer_UserGateServer.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::BaseballServer_UserGateServer_Type type() const;
  inline void set_type(::BaseballServer_UserGateServer_Type value);
  
  // optional .s_bs2ug_set_cvar m_bs2ug_set_cvar = 2;
  inline bool has_m_bs2ug_set_cvar() const;
  inline void clear_m_bs2ug_set_cvar();
  static const int kMBs2UgSetCvarFieldNumber = 2;
  inline const ::s_bs2ug_set_cvar& m_bs2ug_set_cvar() const;
  inline ::s_bs2ug_set_cvar* mutable_m_bs2ug_set_cvar();
  inline ::s_bs2ug_set_cvar* release_m_bs2ug_set_cvar();
  
  // optional .s_bs2ug_game_end m_bs2ug_game_end = 3;
  inline bool has_m_bs2ug_game_end() const;
  inline void clear_m_bs2ug_game_end();
  static const int kMBs2UgGameEndFieldNumber = 3;
  inline const ::s_bs2ug_game_end& m_bs2ug_game_end() const;
  inline ::s_bs2ug_game_end* mutable_m_bs2ug_game_end();
  inline ::s_bs2ug_game_end* release_m_bs2ug_game_end();
  
  // optional .s_bs2ug_echo m_bs2ug_echo = 4;
  inline bool has_m_bs2ug_echo() const;
  inline void clear_m_bs2ug_echo();
  static const int kMBs2UgEchoFieldNumber = 4;
  inline const ::s_bs2ug_echo& m_bs2ug_echo() const;
  inline ::s_bs2ug_echo* mutable_m_bs2ug_echo();
  inline ::s_bs2ug_echo* release_m_bs2ug_echo();
  
  // optional .s_bs2ug_error m_bs2ug_error = 5;
  inline bool has_m_bs2ug_error() const;
  inline void clear_m_bs2ug_error();
  static const int kMBs2UgErrorFieldNumber = 5;
  inline const ::s_bs2ug_error& m_bs2ug_error() const;
  inline ::s_bs2ug_error* mutable_m_bs2ug_error();
  inline ::s_bs2ug_error* release_m_bs2ug_error();
  
  // optional .s_bs2ug_add_discon_tot m_bs2ug_add_discon_tot = 6;
  inline bool has_m_bs2ug_add_discon_tot() const;
  inline void clear_m_bs2ug_add_discon_tot();
  static const int kMBs2UgAddDisconTotFieldNumber = 6;
  inline const ::s_bs2ug_add_discon_tot& m_bs2ug_add_discon_tot() const;
  inline ::s_bs2ug_add_discon_tot* mutable_m_bs2ug_add_discon_tot();
  inline ::s_bs2ug_add_discon_tot* release_m_bs2ug_add_discon_tot();
  
  // @@protoc_insertion_point(class_scope:BaseballServer_UserGateServer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_m_bs2ug_set_cvar();
  inline void clear_has_m_bs2ug_set_cvar();
  inline void set_has_m_bs2ug_game_end();
  inline void clear_has_m_bs2ug_game_end();
  inline void set_has_m_bs2ug_echo();
  inline void clear_has_m_bs2ug_echo();
  inline void set_has_m_bs2ug_error();
  inline void clear_has_m_bs2ug_error();
  inline void set_has_m_bs2ug_add_discon_tot();
  inline void clear_has_m_bs2ug_add_discon_tot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_bs2ug_set_cvar* m_bs2ug_set_cvar_;
  ::s_bs2ug_game_end* m_bs2ug_game_end_;
  ::s_bs2ug_echo* m_bs2ug_echo_;
  ::s_bs2ug_error* m_bs2ug_error_;
  ::s_bs2ug_add_discon_tot* m_bs2ug_add_discon_tot_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static BaseballServer_UserGateServer* default_instance_;
};
// -------------------------------------------------------------------

class BaseballServer_Client : public ::google::protobuf::Message {
 public:
  BaseballServer_Client();
  virtual ~BaseballServer_Client();
  
  BaseballServer_Client(const BaseballServer_Client& from);
  
  inline BaseballServer_Client& operator=(const BaseballServer_Client& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseballServer_Client& default_instance();
  
  void Swap(BaseballServer_Client* other);
  
  // implements Message ----------------------------------------------
  
  BaseballServer_Client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseballServer_Client& from);
  void MergeFrom(const BaseballServer_Client& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BaseballServer_Client_Type Type;
  static const Type NONE = BaseballServer_Client_Type_NONE;
  static const Type ans_join_room = BaseballServer_Client_Type_ans_join_room;
  static const Type ans_room_state = BaseballServer_Client_Type_ans_room_state;
  static const Type bs2x_echo = BaseballServer_Client_Type_bs2x_echo;
  static const Type ans_chat = BaseballServer_Client_Type_ans_chat;
  static const Type ans_timer_start = BaseballServer_Client_Type_ans_timer_start;
  static const Type bs2x_echo2 = BaseballServer_Client_Type_bs2x_echo2;
  static const Type ans_bs_error = BaseballServer_Client_Type_ans_bs_error;
  static const Type bs2x_auto_match_ready2 = BaseballServer_Client_Type_bs2x_auto_match_ready2;
  static const Type ans_game_start = BaseballServer_Client_Type_ans_game_start;
  static const Type ans_game_round_start = BaseballServer_Client_Type_ans_game_round_start;
  static const Type bs2x_match_ready = BaseballServer_Client_Type_bs2x_match_ready;
  static const Type ans_pitcher_throw = BaseballServer_Client_Type_ans_pitcher_throw;
  static const Type ans_better_hit = BaseballServer_Client_Type_ans_better_hit;
  static const Type ans_result_better_hit = BaseballServer_Client_Type_ans_result_better_hit;
  static const Type bs2x_batter_ready = BaseballServer_Client_Type_bs2x_batter_ready;
  static const Type ans_change_attack_team = BaseballServer_Client_Type_ans_change_attack_team;
  static const Type ans_game_end = BaseballServer_Client_Type_ans_game_end;
  static const Type bs2x_game_end_other_user_info = BaseballServer_Client_Type_bs2x_game_end_other_user_info;
  static const Type ans_user_disconnect = BaseballServer_Client_Type_ans_user_disconnect;
  static const Type ans_rematch = BaseballServer_Client_Type_ans_rematch;
  static const Type ans_answer_restart_game = BaseballServer_Client_Type_ans_answer_restart_game;
  static inline bool Type_IsValid(int value) {
    return BaseballServer_Client_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BaseballServer_Client_Type_Type_MIN;
  static const Type Type_MAX =
    BaseballServer_Client_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BaseballServer_Client_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BaseballServer_Client_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BaseballServer_Client_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BaseballServer_Client_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .BaseballServer_Client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::BaseballServer_Client_Type type() const;
  inline void set_type(::BaseballServer_Client_Type value);
  
  // optional .s_ans_join_room m_ans_join_room = 2;
  inline bool has_m_ans_join_room() const;
  inline void clear_m_ans_join_room();
  static const int kMAnsJoinRoomFieldNumber = 2;
  inline const ::s_ans_join_room& m_ans_join_room() const;
  inline ::s_ans_join_room* mutable_m_ans_join_room();
  inline ::s_ans_join_room* release_m_ans_join_room();
  
  // optional .s_ans_room_state m_ans_room_state = 3;
  inline bool has_m_ans_room_state() const;
  inline void clear_m_ans_room_state();
  static const int kMAnsRoomStateFieldNumber = 3;
  inline const ::s_ans_room_state& m_ans_room_state() const;
  inline ::s_ans_room_state* mutable_m_ans_room_state();
  inline ::s_ans_room_state* release_m_ans_room_state();
  
  // optional .s_bs2x_echo m_bs2x_echo = 4;
  inline bool has_m_bs2x_echo() const;
  inline void clear_m_bs2x_echo();
  static const int kMBs2XEchoFieldNumber = 4;
  inline const ::s_bs2x_echo& m_bs2x_echo() const;
  inline ::s_bs2x_echo* mutable_m_bs2x_echo();
  inline ::s_bs2x_echo* release_m_bs2x_echo();
  
  // optional .s_ans_chat m_ans_chat = 5;
  inline bool has_m_ans_chat() const;
  inline void clear_m_ans_chat();
  static const int kMAnsChatFieldNumber = 5;
  inline const ::s_ans_chat& m_ans_chat() const;
  inline ::s_ans_chat* mutable_m_ans_chat();
  inline ::s_ans_chat* release_m_ans_chat();
  
  // optional .s_ans_timer_start m_ans_timer_start = 6;
  inline bool has_m_ans_timer_start() const;
  inline void clear_m_ans_timer_start();
  static const int kMAnsTimerStartFieldNumber = 6;
  inline const ::s_ans_timer_start& m_ans_timer_start() const;
  inline ::s_ans_timer_start* mutable_m_ans_timer_start();
  inline ::s_ans_timer_start* release_m_ans_timer_start();
  
  // optional .s_bs2x_echo2 m_bs2x_echo2 = 7;
  inline bool has_m_bs2x_echo2() const;
  inline void clear_m_bs2x_echo2();
  static const int kMBs2XEcho2FieldNumber = 7;
  inline const ::s_bs2x_echo2& m_bs2x_echo2() const;
  inline ::s_bs2x_echo2* mutable_m_bs2x_echo2();
  inline ::s_bs2x_echo2* release_m_bs2x_echo2();
  
  // optional .s_ans_bs_error m_ans_bs_error = 8;
  inline bool has_m_ans_bs_error() const;
  inline void clear_m_ans_bs_error();
  static const int kMAnsBsErrorFieldNumber = 8;
  inline const ::s_ans_bs_error& m_ans_bs_error() const;
  inline ::s_ans_bs_error* mutable_m_ans_bs_error();
  inline ::s_ans_bs_error* release_m_ans_bs_error();
  
  // optional .s_bs2x_auto_match_ready2 m_bs2x_auto_match_ready2 = 9;
  inline bool has_m_bs2x_auto_match_ready2() const;
  inline void clear_m_bs2x_auto_match_ready2();
  static const int kMBs2XAutoMatchReady2FieldNumber = 9;
  inline const ::s_bs2x_auto_match_ready2& m_bs2x_auto_match_ready2() const;
  inline ::s_bs2x_auto_match_ready2* mutable_m_bs2x_auto_match_ready2();
  inline ::s_bs2x_auto_match_ready2* release_m_bs2x_auto_match_ready2();
  
  // optional .s_ans_game_start m_ans_game_start = 10;
  inline bool has_m_ans_game_start() const;
  inline void clear_m_ans_game_start();
  static const int kMAnsGameStartFieldNumber = 10;
  inline const ::s_ans_game_start& m_ans_game_start() const;
  inline ::s_ans_game_start* mutable_m_ans_game_start();
  inline ::s_ans_game_start* release_m_ans_game_start();
  
  // optional .s_ans_game_round_start m_ans_game_round_start = 11;
  inline bool has_m_ans_game_round_start() const;
  inline void clear_m_ans_game_round_start();
  static const int kMAnsGameRoundStartFieldNumber = 11;
  inline const ::s_ans_game_round_start& m_ans_game_round_start() const;
  inline ::s_ans_game_round_start* mutable_m_ans_game_round_start();
  inline ::s_ans_game_round_start* release_m_ans_game_round_start();
  
  // optional .s_bs2x_match_ready m_bs2x_match_ready = 12;
  inline bool has_m_bs2x_match_ready() const;
  inline void clear_m_bs2x_match_ready();
  static const int kMBs2XMatchReadyFieldNumber = 12;
  inline const ::s_bs2x_match_ready& m_bs2x_match_ready() const;
  inline ::s_bs2x_match_ready* mutable_m_bs2x_match_ready();
  inline ::s_bs2x_match_ready* release_m_bs2x_match_ready();
  
  // optional .s_ans_pitcher_throw m_ans_pitcher_throw = 13;
  inline bool has_m_ans_pitcher_throw() const;
  inline void clear_m_ans_pitcher_throw();
  static const int kMAnsPitcherThrowFieldNumber = 13;
  inline const ::s_ans_pitcher_throw& m_ans_pitcher_throw() const;
  inline ::s_ans_pitcher_throw* mutable_m_ans_pitcher_throw();
  inline ::s_ans_pitcher_throw* release_m_ans_pitcher_throw();
  
  // optional .s_ans_better_hit m_ans_better_hit = 14;
  inline bool has_m_ans_better_hit() const;
  inline void clear_m_ans_better_hit();
  static const int kMAnsBetterHitFieldNumber = 14;
  inline const ::s_ans_better_hit& m_ans_better_hit() const;
  inline ::s_ans_better_hit* mutable_m_ans_better_hit();
  inline ::s_ans_better_hit* release_m_ans_better_hit();
  
  // optional .s_ans_result_better_hit m_ans_result_better_hit = 15;
  inline bool has_m_ans_result_better_hit() const;
  inline void clear_m_ans_result_better_hit();
  static const int kMAnsResultBetterHitFieldNumber = 15;
  inline const ::s_ans_result_better_hit& m_ans_result_better_hit() const;
  inline ::s_ans_result_better_hit* mutable_m_ans_result_better_hit();
  inline ::s_ans_result_better_hit* release_m_ans_result_better_hit();
  
  // optional .s_bs2x_batter_ready m_bs2x_batter_ready = 16;
  inline bool has_m_bs2x_batter_ready() const;
  inline void clear_m_bs2x_batter_ready();
  static const int kMBs2XBatterReadyFieldNumber = 16;
  inline const ::s_bs2x_batter_ready& m_bs2x_batter_ready() const;
  inline ::s_bs2x_batter_ready* mutable_m_bs2x_batter_ready();
  inline ::s_bs2x_batter_ready* release_m_bs2x_batter_ready();
  
  // optional .s_ans_change_attack_team m_ans_change_attack_team = 17;
  inline bool has_m_ans_change_attack_team() const;
  inline void clear_m_ans_change_attack_team();
  static const int kMAnsChangeAttackTeamFieldNumber = 17;
  inline const ::s_ans_change_attack_team& m_ans_change_attack_team() const;
  inline ::s_ans_change_attack_team* mutable_m_ans_change_attack_team();
  inline ::s_ans_change_attack_team* release_m_ans_change_attack_team();
  
  // optional .s_ans_game_end m_ans_game_end = 18;
  inline bool has_m_ans_game_end() const;
  inline void clear_m_ans_game_end();
  static const int kMAnsGameEndFieldNumber = 18;
  inline const ::s_ans_game_end& m_ans_game_end() const;
  inline ::s_ans_game_end* mutable_m_ans_game_end();
  inline ::s_ans_game_end* release_m_ans_game_end();
  
  // optional .s_bs2x_game_end_other_user_info m_bs2x_game_end_other_user_info = 19;
  inline bool has_m_bs2x_game_end_other_user_info() const;
  inline void clear_m_bs2x_game_end_other_user_info();
  static const int kMBs2XGameEndOtherUserInfoFieldNumber = 19;
  inline const ::s_bs2x_game_end_other_user_info& m_bs2x_game_end_other_user_info() const;
  inline ::s_bs2x_game_end_other_user_info* mutable_m_bs2x_game_end_other_user_info();
  inline ::s_bs2x_game_end_other_user_info* release_m_bs2x_game_end_other_user_info();
  
  // optional .s_ans_user_disconnect m_ans_user_disconnect = 20;
  inline bool has_m_ans_user_disconnect() const;
  inline void clear_m_ans_user_disconnect();
  static const int kMAnsUserDisconnectFieldNumber = 20;
  inline const ::s_ans_user_disconnect& m_ans_user_disconnect() const;
  inline ::s_ans_user_disconnect* mutable_m_ans_user_disconnect();
  inline ::s_ans_user_disconnect* release_m_ans_user_disconnect();
  
  // optional .s_ans_rematch m_ans_rematch = 21;
  inline bool has_m_ans_rematch() const;
  inline void clear_m_ans_rematch();
  static const int kMAnsRematchFieldNumber = 21;
  inline const ::s_ans_rematch& m_ans_rematch() const;
  inline ::s_ans_rematch* mutable_m_ans_rematch();
  inline ::s_ans_rematch* release_m_ans_rematch();
  
  // optional .s_ans_answer_restart_game m_ans_answer_restart_game = 22;
  inline bool has_m_ans_answer_restart_game() const;
  inline void clear_m_ans_answer_restart_game();
  static const int kMAnsAnswerRestartGameFieldNumber = 22;
  inline const ::s_ans_answer_restart_game& m_ans_answer_restart_game() const;
  inline ::s_ans_answer_restart_game* mutable_m_ans_answer_restart_game();
  inline ::s_ans_answer_restart_game* release_m_ans_answer_restart_game();
  
  // @@protoc_insertion_point(class_scope:BaseballServer_Client)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_m_ans_join_room();
  inline void clear_has_m_ans_join_room();
  inline void set_has_m_ans_room_state();
  inline void clear_has_m_ans_room_state();
  inline void set_has_m_bs2x_echo();
  inline void clear_has_m_bs2x_echo();
  inline void set_has_m_ans_chat();
  inline void clear_has_m_ans_chat();
  inline void set_has_m_ans_timer_start();
  inline void clear_has_m_ans_timer_start();
  inline void set_has_m_bs2x_echo2();
  inline void clear_has_m_bs2x_echo2();
  inline void set_has_m_ans_bs_error();
  inline void clear_has_m_ans_bs_error();
  inline void set_has_m_bs2x_auto_match_ready2();
  inline void clear_has_m_bs2x_auto_match_ready2();
  inline void set_has_m_ans_game_start();
  inline void clear_has_m_ans_game_start();
  inline void set_has_m_ans_game_round_start();
  inline void clear_has_m_ans_game_round_start();
  inline void set_has_m_bs2x_match_ready();
  inline void clear_has_m_bs2x_match_ready();
  inline void set_has_m_ans_pitcher_throw();
  inline void clear_has_m_ans_pitcher_throw();
  inline void set_has_m_ans_better_hit();
  inline void clear_has_m_ans_better_hit();
  inline void set_has_m_ans_result_better_hit();
  inline void clear_has_m_ans_result_better_hit();
  inline void set_has_m_bs2x_batter_ready();
  inline void clear_has_m_bs2x_batter_ready();
  inline void set_has_m_ans_change_attack_team();
  inline void clear_has_m_ans_change_attack_team();
  inline void set_has_m_ans_game_end();
  inline void clear_has_m_ans_game_end();
  inline void set_has_m_bs2x_game_end_other_user_info();
  inline void clear_has_m_bs2x_game_end_other_user_info();
  inline void set_has_m_ans_user_disconnect();
  inline void clear_has_m_ans_user_disconnect();
  inline void set_has_m_ans_rematch();
  inline void clear_has_m_ans_rematch();
  inline void set_has_m_ans_answer_restart_game();
  inline void clear_has_m_ans_answer_restart_game();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_ans_join_room* m_ans_join_room_;
  ::s_ans_room_state* m_ans_room_state_;
  ::s_bs2x_echo* m_bs2x_echo_;
  ::s_ans_chat* m_ans_chat_;
  ::s_ans_timer_start* m_ans_timer_start_;
  ::s_bs2x_echo2* m_bs2x_echo2_;
  ::s_ans_bs_error* m_ans_bs_error_;
  ::s_bs2x_auto_match_ready2* m_bs2x_auto_match_ready2_;
  ::s_ans_game_start* m_ans_game_start_;
  ::s_ans_game_round_start* m_ans_game_round_start_;
  ::s_bs2x_match_ready* m_bs2x_match_ready_;
  ::s_ans_pitcher_throw* m_ans_pitcher_throw_;
  ::s_ans_better_hit* m_ans_better_hit_;
  ::s_ans_result_better_hit* m_ans_result_better_hit_;
  ::s_bs2x_batter_ready* m_bs2x_batter_ready_;
  ::s_ans_change_attack_team* m_ans_change_attack_team_;
  ::s_ans_game_end* m_ans_game_end_;
  ::s_bs2x_game_end_other_user_info* m_bs2x_game_end_other_user_info_;
  ::s_ans_user_disconnect* m_ans_user_disconnect_;
  ::s_ans_rematch* m_ans_rematch_;
  ::s_ans_answer_restart_game* m_ans_answer_restart_game_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static BaseballServer_Client* default_instance_;
};
// -------------------------------------------------------------------

class UserGateServer_BaseballServer : public ::google::protobuf::Message {
 public:
  UserGateServer_BaseballServer();
  virtual ~UserGateServer_BaseballServer();
  
  UserGateServer_BaseballServer(const UserGateServer_BaseballServer& from);
  
  inline UserGateServer_BaseballServer& operator=(const UserGateServer_BaseballServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGateServer_BaseballServer& default_instance();
  
  void Swap(UserGateServer_BaseballServer* other);
  
  // implements Message ----------------------------------------------
  
  UserGateServer_BaseballServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserGateServer_BaseballServer& from);
  void MergeFrom(const UserGateServer_BaseballServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UserGateServer_BaseballServer_Type Type;
  static const Type NONE = UserGateServer_BaseballServer_Type_NONE;
  static const Type ug2bs_ans_set_cvar = UserGateServer_BaseballServer_Type_ug2bs_ans_set_cvar;
  static const Type ug2bs_game_end = UserGateServer_BaseballServer_Type_ug2bs_game_end;
  static const Type ug2bs_echo = UserGateServer_BaseballServer_Type_ug2bs_echo;
  static const Type ug2bs_error = UserGateServer_BaseballServer_Type_ug2bs_error;
  static const Type ug2bs_add_discon_tot = UserGateServer_BaseballServer_Type_ug2bs_add_discon_tot;
  static inline bool Type_IsValid(int value) {
    return UserGateServer_BaseballServer_Type_IsValid(value);
  }
  static const Type Type_MIN =
    UserGateServer_BaseballServer_Type_Type_MIN;
  static const Type Type_MAX =
    UserGateServer_BaseballServer_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    UserGateServer_BaseballServer_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return UserGateServer_BaseballServer_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return UserGateServer_BaseballServer_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return UserGateServer_BaseballServer_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .UserGateServer_BaseballServer.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::UserGateServer_BaseballServer_Type type() const;
  inline void set_type(::UserGateServer_BaseballServer_Type value);
  
  // optional .s_ug2bs_ans_set_cvar m_ug2bs_ans_set_cvar = 2;
  inline bool has_m_ug2bs_ans_set_cvar() const;
  inline void clear_m_ug2bs_ans_set_cvar();
  static const int kMUg2BsAnsSetCvarFieldNumber = 2;
  inline const ::s_ug2bs_ans_set_cvar& m_ug2bs_ans_set_cvar() const;
  inline ::s_ug2bs_ans_set_cvar* mutable_m_ug2bs_ans_set_cvar();
  inline ::s_ug2bs_ans_set_cvar* release_m_ug2bs_ans_set_cvar();
  
  // optional .s_ug2bs_game_end m_ug2bs_game_end = 3;
  inline bool has_m_ug2bs_game_end() const;
  inline void clear_m_ug2bs_game_end();
  static const int kMUg2BsGameEndFieldNumber = 3;
  inline const ::s_ug2bs_game_end& m_ug2bs_game_end() const;
  inline ::s_ug2bs_game_end* mutable_m_ug2bs_game_end();
  inline ::s_ug2bs_game_end* release_m_ug2bs_game_end();
  
  // optional .s_ug2bs_echo m_ug2bs_echo = 4;
  inline bool has_m_ug2bs_echo() const;
  inline void clear_m_ug2bs_echo();
  static const int kMUg2BsEchoFieldNumber = 4;
  inline const ::s_ug2bs_echo& m_ug2bs_echo() const;
  inline ::s_ug2bs_echo* mutable_m_ug2bs_echo();
  inline ::s_ug2bs_echo* release_m_ug2bs_echo();
  
  // optional .s_ug2bs_error m_ug2bs_error = 5;
  inline bool has_m_ug2bs_error() const;
  inline void clear_m_ug2bs_error();
  static const int kMUg2BsErrorFieldNumber = 5;
  inline const ::s_ug2bs_error& m_ug2bs_error() const;
  inline ::s_ug2bs_error* mutable_m_ug2bs_error();
  inline ::s_ug2bs_error* release_m_ug2bs_error();
  
  // optional .s_ug2bs_add_discon_tot m_ug2bs_add_discon_tot = 6;
  inline bool has_m_ug2bs_add_discon_tot() const;
  inline void clear_m_ug2bs_add_discon_tot();
  static const int kMUg2BsAddDisconTotFieldNumber = 6;
  inline const ::s_ug2bs_add_discon_tot& m_ug2bs_add_discon_tot() const;
  inline ::s_ug2bs_add_discon_tot* mutable_m_ug2bs_add_discon_tot();
  inline ::s_ug2bs_add_discon_tot* release_m_ug2bs_add_discon_tot();
  
  // @@protoc_insertion_point(class_scope:UserGateServer_BaseballServer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_m_ug2bs_ans_set_cvar();
  inline void clear_has_m_ug2bs_ans_set_cvar();
  inline void set_has_m_ug2bs_game_end();
  inline void clear_has_m_ug2bs_game_end();
  inline void set_has_m_ug2bs_echo();
  inline void clear_has_m_ug2bs_echo();
  inline void set_has_m_ug2bs_error();
  inline void clear_has_m_ug2bs_error();
  inline void set_has_m_ug2bs_add_discon_tot();
  inline void clear_has_m_ug2bs_add_discon_tot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_ug2bs_ans_set_cvar* m_ug2bs_ans_set_cvar_;
  ::s_ug2bs_game_end* m_ug2bs_game_end_;
  ::s_ug2bs_echo* m_ug2bs_echo_;
  ::s_ug2bs_error* m_ug2bs_error_;
  ::s_ug2bs_add_discon_tot* m_ug2bs_add_discon_tot_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static UserGateServer_BaseballServer* default_instance_;
};
// -------------------------------------------------------------------

class Client_BaseballServer : public ::google::protobuf::Message {
 public:
  Client_BaseballServer();
  virtual ~Client_BaseballServer();
  
  Client_BaseballServer(const Client_BaseballServer& from);
  
  inline Client_BaseballServer& operator=(const Client_BaseballServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Client_BaseballServer& default_instance();
  
  void Swap(Client_BaseballServer* other);
  
  // implements Message ----------------------------------------------
  
  Client_BaseballServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client_BaseballServer& from);
  void MergeFrom(const Client_BaseballServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Client_BaseballServer_Type Type;
  static const Type NONE = Client_BaseballServer_Type_NONE;
  static const Type req_room_state = Client_BaseballServer_Type_req_room_state;
  static const Type x2bs_echo = Client_BaseballServer_Type_x2bs_echo;
  static const Type req_chat = Client_BaseballServer_Type_req_chat;
  static const Type req_timer_start = Client_BaseballServer_Type_req_timer_start;
  static const Type req_do_disconnect = Client_BaseballServer_Type_req_do_disconnect;
  static const Type x2bs_echo2 = Client_BaseballServer_Type_x2bs_echo2;
  static const Type req_get_cvar = Client_BaseballServer_Type_req_get_cvar;
  static const Type req_set_cvar = Client_BaseballServer_Type_req_set_cvar;
  static const Type x2bs_auto_match_ready2 = Client_BaseballServer_Type_x2bs_auto_match_ready2;
  static const Type x2bs_match_ready = Client_BaseballServer_Type_x2bs_match_ready;
  static const Type req_pitcher_throw = Client_BaseballServer_Type_req_pitcher_throw;
  static const Type req_better_hit = Client_BaseballServer_Type_req_better_hit;
  static const Type req_result_better_hit = Client_BaseballServer_Type_req_result_better_hit;
  static const Type x2bs_batter_ready = Client_BaseballServer_Type_x2bs_batter_ready;
  static const Type req_rematch = Client_BaseballServer_Type_req_rematch;
  static const Type req_answer_restart_game = Client_BaseballServer_Type_req_answer_restart_game;
  static inline bool Type_IsValid(int value) {
    return Client_BaseballServer_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Client_BaseballServer_Type_Type_MIN;
  static const Type Type_MAX =
    Client_BaseballServer_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Client_BaseballServer_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Client_BaseballServer_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Client_BaseballServer_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Client_BaseballServer_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Client_BaseballServer.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Client_BaseballServer_Type type() const;
  inline void set_type(::Client_BaseballServer_Type value);
  
  // optional .s_req_room_state m_req_room_state = 2;
  inline bool has_m_req_room_state() const;
  inline void clear_m_req_room_state();
  static const int kMReqRoomStateFieldNumber = 2;
  inline const ::s_req_room_state& m_req_room_state() const;
  inline ::s_req_room_state* mutable_m_req_room_state();
  inline ::s_req_room_state* release_m_req_room_state();
  
  // optional .s_x2bs_echo m_x2bs_echo = 3;
  inline bool has_m_x2bs_echo() const;
  inline void clear_m_x2bs_echo();
  static const int kMX2BsEchoFieldNumber = 3;
  inline const ::s_x2bs_echo& m_x2bs_echo() const;
  inline ::s_x2bs_echo* mutable_m_x2bs_echo();
  inline ::s_x2bs_echo* release_m_x2bs_echo();
  
  // optional .s_req_chat m_req_chat = 4;
  inline bool has_m_req_chat() const;
  inline void clear_m_req_chat();
  static const int kMReqChatFieldNumber = 4;
  inline const ::s_req_chat& m_req_chat() const;
  inline ::s_req_chat* mutable_m_req_chat();
  inline ::s_req_chat* release_m_req_chat();
  
  // optional .s_req_timer_start m_req_timer_start = 5;
  inline bool has_m_req_timer_start() const;
  inline void clear_m_req_timer_start();
  static const int kMReqTimerStartFieldNumber = 5;
  inline const ::s_req_timer_start& m_req_timer_start() const;
  inline ::s_req_timer_start* mutable_m_req_timer_start();
  inline ::s_req_timer_start* release_m_req_timer_start();
  
  // optional .s_req_do_disconnect m_req_do_disconnect = 6;
  inline bool has_m_req_do_disconnect() const;
  inline void clear_m_req_do_disconnect();
  static const int kMReqDoDisconnectFieldNumber = 6;
  inline const ::s_req_do_disconnect& m_req_do_disconnect() const;
  inline ::s_req_do_disconnect* mutable_m_req_do_disconnect();
  inline ::s_req_do_disconnect* release_m_req_do_disconnect();
  
  // optional .s_x2bs_echo2 m_x2bs_echo2 = 7;
  inline bool has_m_x2bs_echo2() const;
  inline void clear_m_x2bs_echo2();
  static const int kMX2BsEcho2FieldNumber = 7;
  inline const ::s_x2bs_echo2& m_x2bs_echo2() const;
  inline ::s_x2bs_echo2* mutable_m_x2bs_echo2();
  inline ::s_x2bs_echo2* release_m_x2bs_echo2();
  
  // optional .s_req_get_cvar m_req_get_cvar = 8;
  inline bool has_m_req_get_cvar() const;
  inline void clear_m_req_get_cvar();
  static const int kMReqGetCvarFieldNumber = 8;
  inline const ::s_req_get_cvar& m_req_get_cvar() const;
  inline ::s_req_get_cvar* mutable_m_req_get_cvar();
  inline ::s_req_get_cvar* release_m_req_get_cvar();
  
  // optional .s_req_set_cvar m_req_set_cvar = 9;
  inline bool has_m_req_set_cvar() const;
  inline void clear_m_req_set_cvar();
  static const int kMReqSetCvarFieldNumber = 9;
  inline const ::s_req_set_cvar& m_req_set_cvar() const;
  inline ::s_req_set_cvar* mutable_m_req_set_cvar();
  inline ::s_req_set_cvar* release_m_req_set_cvar();
  
  // optional .s_x2bs_auto_match_ready2 m_x2bs_auto_match_ready2 = 10;
  inline bool has_m_x2bs_auto_match_ready2() const;
  inline void clear_m_x2bs_auto_match_ready2();
  static const int kMX2BsAutoMatchReady2FieldNumber = 10;
  inline const ::s_x2bs_auto_match_ready2& m_x2bs_auto_match_ready2() const;
  inline ::s_x2bs_auto_match_ready2* mutable_m_x2bs_auto_match_ready2();
  inline ::s_x2bs_auto_match_ready2* release_m_x2bs_auto_match_ready2();
  
  // optional .s_x2bs_match_ready m_x2bs_match_ready = 11;
  inline bool has_m_x2bs_match_ready() const;
  inline void clear_m_x2bs_match_ready();
  static const int kMX2BsMatchReadyFieldNumber = 11;
  inline const ::s_x2bs_match_ready& m_x2bs_match_ready() const;
  inline ::s_x2bs_match_ready* mutable_m_x2bs_match_ready();
  inline ::s_x2bs_match_ready* release_m_x2bs_match_ready();
  
  // optional .s_req_pitcher_throw m_req_pitcher_throw = 12;
  inline bool has_m_req_pitcher_throw() const;
  inline void clear_m_req_pitcher_throw();
  static const int kMReqPitcherThrowFieldNumber = 12;
  inline const ::s_req_pitcher_throw& m_req_pitcher_throw() const;
  inline ::s_req_pitcher_throw* mutable_m_req_pitcher_throw();
  inline ::s_req_pitcher_throw* release_m_req_pitcher_throw();
  
  // optional .s_req_better_hit m_req_better_hit = 13;
  inline bool has_m_req_better_hit() const;
  inline void clear_m_req_better_hit();
  static const int kMReqBetterHitFieldNumber = 13;
  inline const ::s_req_better_hit& m_req_better_hit() const;
  inline ::s_req_better_hit* mutable_m_req_better_hit();
  inline ::s_req_better_hit* release_m_req_better_hit();
  
  // optional .s_req_result_better_hit m_req_result_better_hit = 14;
  inline bool has_m_req_result_better_hit() const;
  inline void clear_m_req_result_better_hit();
  static const int kMReqResultBetterHitFieldNumber = 14;
  inline const ::s_req_result_better_hit& m_req_result_better_hit() const;
  inline ::s_req_result_better_hit* mutable_m_req_result_better_hit();
  inline ::s_req_result_better_hit* release_m_req_result_better_hit();
  
  // optional .s_x2bs_batter_ready m_x2bs_batter_ready = 15;
  inline bool has_m_x2bs_batter_ready() const;
  inline void clear_m_x2bs_batter_ready();
  static const int kMX2BsBatterReadyFieldNumber = 15;
  inline const ::s_x2bs_batter_ready& m_x2bs_batter_ready() const;
  inline ::s_x2bs_batter_ready* mutable_m_x2bs_batter_ready();
  inline ::s_x2bs_batter_ready* release_m_x2bs_batter_ready();
  
  // optional .s_req_rematch m_req_rematch = 16;
  inline bool has_m_req_rematch() const;
  inline void clear_m_req_rematch();
  static const int kMReqRematchFieldNumber = 16;
  inline const ::s_req_rematch& m_req_rematch() const;
  inline ::s_req_rematch* mutable_m_req_rematch();
  inline ::s_req_rematch* release_m_req_rematch();
  
  // optional .s_req_answer_restart_game m_req_answer_restart_game = 17;
  inline bool has_m_req_answer_restart_game() const;
  inline void clear_m_req_answer_restart_game();
  static const int kMReqAnswerRestartGameFieldNumber = 17;
  inline const ::s_req_answer_restart_game& m_req_answer_restart_game() const;
  inline ::s_req_answer_restart_game* mutable_m_req_answer_restart_game();
  inline ::s_req_answer_restart_game* release_m_req_answer_restart_game();
  
  // @@protoc_insertion_point(class_scope:Client_BaseballServer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_m_req_room_state();
  inline void clear_has_m_req_room_state();
  inline void set_has_m_x2bs_echo();
  inline void clear_has_m_x2bs_echo();
  inline void set_has_m_req_chat();
  inline void clear_has_m_req_chat();
  inline void set_has_m_req_timer_start();
  inline void clear_has_m_req_timer_start();
  inline void set_has_m_req_do_disconnect();
  inline void clear_has_m_req_do_disconnect();
  inline void set_has_m_x2bs_echo2();
  inline void clear_has_m_x2bs_echo2();
  inline void set_has_m_req_get_cvar();
  inline void clear_has_m_req_get_cvar();
  inline void set_has_m_req_set_cvar();
  inline void clear_has_m_req_set_cvar();
  inline void set_has_m_x2bs_auto_match_ready2();
  inline void clear_has_m_x2bs_auto_match_ready2();
  inline void set_has_m_x2bs_match_ready();
  inline void clear_has_m_x2bs_match_ready();
  inline void set_has_m_req_pitcher_throw();
  inline void clear_has_m_req_pitcher_throw();
  inline void set_has_m_req_better_hit();
  inline void clear_has_m_req_better_hit();
  inline void set_has_m_req_result_better_hit();
  inline void clear_has_m_req_result_better_hit();
  inline void set_has_m_x2bs_batter_ready();
  inline void clear_has_m_x2bs_batter_ready();
  inline void set_has_m_req_rematch();
  inline void clear_has_m_req_rematch();
  inline void set_has_m_req_answer_restart_game();
  inline void clear_has_m_req_answer_restart_game();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::s_req_room_state* m_req_room_state_;
  ::s_x2bs_echo* m_x2bs_echo_;
  ::s_req_chat* m_req_chat_;
  ::s_req_timer_start* m_req_timer_start_;
  ::s_req_do_disconnect* m_req_do_disconnect_;
  ::s_x2bs_echo2* m_x2bs_echo2_;
  ::s_req_get_cvar* m_req_get_cvar_;
  ::s_req_set_cvar* m_req_set_cvar_;
  ::s_x2bs_auto_match_ready2* m_x2bs_auto_match_ready2_;
  ::s_x2bs_match_ready* m_x2bs_match_ready_;
  ::s_req_pitcher_throw* m_req_pitcher_throw_;
  ::s_req_better_hit* m_req_better_hit_;
  ::s_req_result_better_hit* m_req_result_better_hit_;
  ::s_x2bs_batter_ready* m_x2bs_batter_ready_;
  ::s_req_rematch* m_req_rematch_;
  ::s_req_answer_restart_game* m_req_answer_restart_game_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_AssignDesc_PT_5fBaseballServer_2eproto();
  friend void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto();
  
  void InitAsDefaultInstance();
  static Client_BaseballServer* default_instance_;
};
// ===================================================================


// ===================================================================

// s_ans_join_room

// optional .GameRoomInfo gri = 1;
inline bool s_ans_join_room::has_gri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_join_room::set_has_gri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_join_room::clear_has_gri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_join_room::clear_gri() {
  if (gri_ != NULL) gri_->::GameRoomInfo::Clear();
  clear_has_gri();
}
inline const ::GameRoomInfo& s_ans_join_room::gri() const {
  return gri_ != NULL ? *gri_ : *default_instance_->gri_;
}
inline ::GameRoomInfo* s_ans_join_room::mutable_gri() {
  set_has_gri();
  if (gri_ == NULL) gri_ = new ::GameRoomInfo;
  return gri_;
}
inline ::GameRoomInfo* s_ans_join_room::release_gri() {
  clear_has_gri();
  ::GameRoomInfo* temp = gri_;
  gri_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// s_req_room_state

// optional int32 room = 1;
inline bool s_req_room_state::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_room_state::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_room_state::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_room_state::clear_room() {
  room_ = 0;
  clear_has_room();
}
inline ::google::protobuf::int32 s_req_room_state::room() const {
  return room_;
}
inline void s_req_room_state::set_room(::google::protobuf::int32 value) {
  set_has_room();
  room_ = value;
}

// -------------------------------------------------------------------

// s_ans_room_state

// optional .GameRoomInfo gri = 1;
inline bool s_ans_room_state::has_gri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_room_state::set_has_gri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_room_state::clear_has_gri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_room_state::clear_gri() {
  if (gri_ != NULL) gri_->::GameRoomInfo::Clear();
  clear_has_gri();
}
inline const ::GameRoomInfo& s_ans_room_state::gri() const {
  return gri_ != NULL ? *gri_ : *default_instance_->gri_;
}
inline ::GameRoomInfo* s_ans_room_state::mutable_gri() {
  set_has_gri();
  if (gri_ == NULL) gri_ = new ::GameRoomInfo;
  return gri_;
}
inline ::GameRoomInfo* s_ans_room_state::release_gri() {
  clear_has_gri();
  ::GameRoomInfo* temp = gri_;
  gri_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// s_x2bs_echo

// optional int32 type = 1;
inline bool s_x2bs_echo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_x2bs_echo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_x2bs_echo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_x2bs_echo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_x2bs_echo::type() const {
  return type_;
}
inline void s_x2bs_echo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_x2bs_echo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_x2bs_echo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_x2bs_echo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_x2bs_echo::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_x2bs_echo::msg() const {
  return *msg_;
}
inline void s_x2bs_echo::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_x2bs_echo::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_x2bs_echo::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_x2bs_echo::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_x2bs_echo::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 client_time_msec = 3;
inline bool s_x2bs_echo::has_client_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_x2bs_echo::set_has_client_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_x2bs_echo::clear_has_client_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_x2bs_echo::clear_client_time_msec() {
  client_time_msec_ = 0;
  clear_has_client_time_msec();
}
inline ::google::protobuf::int32 s_x2bs_echo::client_time_msec() const {
  return client_time_msec_;
}
inline void s_x2bs_echo::set_client_time_msec(::google::protobuf::int32 value) {
  set_has_client_time_msec();
  client_time_msec_ = value;
}

// -------------------------------------------------------------------

// s_bs2x_echo

// optional int32 type = 1;
inline bool s_bs2x_echo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2x_echo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2x_echo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2x_echo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_bs2x_echo::type() const {
  return type_;
}
inline void s_bs2x_echo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_bs2x_echo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_bs2x_echo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_bs2x_echo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_bs2x_echo::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_bs2x_echo::msg() const {
  return *msg_;
}
inline void s_bs2x_echo::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_bs2x_echo::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_bs2x_echo::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_bs2x_echo::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_bs2x_echo::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 client_time_msec = 3;
inline bool s_bs2x_echo::has_client_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_bs2x_echo::set_has_client_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_bs2x_echo::clear_has_client_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_bs2x_echo::clear_client_time_msec() {
  client_time_msec_ = 0;
  clear_has_client_time_msec();
}
inline ::google::protobuf::int32 s_bs2x_echo::client_time_msec() const {
  return client_time_msec_;
}
inline void s_bs2x_echo::set_client_time_msec(::google::protobuf::int32 value) {
  set_has_client_time_msec();
  client_time_msec_ = value;
}

// optional int64 bs_time_msec = 4;
inline bool s_bs2x_echo::has_bs_time_msec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_bs2x_echo::set_has_bs_time_msec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_bs2x_echo::clear_has_bs_time_msec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_bs2x_echo::clear_bs_time_msec() {
  bs_time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_bs_time_msec();
}
inline ::google::protobuf::int64 s_bs2x_echo::bs_time_msec() const {
  return bs_time_msec_;
}
inline void s_bs2x_echo::set_bs_time_msec(::google::protobuf::int64 value) {
  set_has_bs_time_msec();
  bs_time_msec_ = value;
}

// -------------------------------------------------------------------

// s_req_chat

// optional int32 type = 1;
inline bool s_req_chat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_chat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_chat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_chat::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_req_chat::type() const {
  return type_;
}
inline void s_req_chat::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_req_chat::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_req_chat::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_req_chat::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_req_chat::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_req_chat::msg() const {
  return *msg_;
}
inline void s_req_chat::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_req_chat::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_req_chat::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_req_chat::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_req_chat::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string etc = 3;
inline bool s_req_chat::has_etc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_req_chat::set_has_etc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_req_chat::clear_has_etc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_req_chat::clear_etc() {
  if (etc_ != &::google::protobuf::internal::kEmptyString) {
    etc_->clear();
  }
  clear_has_etc();
}
inline const ::std::string& s_req_chat::etc() const {
  return *etc_;
}
inline void s_req_chat::set_etc(const ::std::string& value) {
  set_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    etc_ = new ::std::string;
  }
  etc_->assign(value);
}
inline void s_req_chat::set_etc(const char* value) {
  set_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    etc_ = new ::std::string;
  }
  etc_->assign(value);
}
inline void s_req_chat::set_etc(const char* value, size_t size) {
  set_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    etc_ = new ::std::string;
  }
  etc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_req_chat::mutable_etc() {
  set_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    etc_ = new ::std::string;
  }
  return etc_;
}
inline ::std::string* s_req_chat::release_etc() {
  clear_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = etc_;
    etc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_ans_chat

// optional int32 type = 1;
inline bool s_ans_chat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_chat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_chat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_chat::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_ans_chat::type() const {
  return type_;
}
inline void s_ans_chat::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_ans_chat::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_chat::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_chat::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_chat::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_ans_chat::msg() const {
  return *msg_;
}
inline void s_ans_chat::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_ans_chat::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_ans_chat::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_ans_chat::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_ans_chat::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string etc = 3;
inline bool s_ans_chat::has_etc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_ans_chat::set_has_etc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_ans_chat::clear_has_etc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_ans_chat::clear_etc() {
  if (etc_ != &::google::protobuf::internal::kEmptyString) {
    etc_->clear();
  }
  clear_has_etc();
}
inline const ::std::string& s_ans_chat::etc() const {
  return *etc_;
}
inline void s_ans_chat::set_etc(const ::std::string& value) {
  set_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    etc_ = new ::std::string;
  }
  etc_->assign(value);
}
inline void s_ans_chat::set_etc(const char* value) {
  set_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    etc_ = new ::std::string;
  }
  etc_->assign(value);
}
inline void s_ans_chat::set_etc(const char* value, size_t size) {
  set_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    etc_ = new ::std::string;
  }
  etc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_ans_chat::mutable_etc() {
  set_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    etc_ = new ::std::string;
  }
  return etc_;
}
inline ::std::string* s_ans_chat::release_etc() {
  clear_has_etc();
  if (etc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = etc_;
    etc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_ans_timer_start

// optional int32 count = 1;
inline bool s_ans_timer_start::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_timer_start::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_timer_start::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_timer_start::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 s_ans_timer_start::count() const {
  return count_;
}
inline void s_ans_timer_start::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional string msg = 2;
inline bool s_ans_timer_start::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_timer_start::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_timer_start::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_timer_start::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_ans_timer_start::msg() const {
  return *msg_;
}
inline void s_ans_timer_start::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_ans_timer_start::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_ans_timer_start::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_ans_timer_start::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_ans_timer_start::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_req_timer_start

// optional int32 term = 1;
inline bool s_req_timer_start::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_timer_start::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_timer_start::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_timer_start::clear_term() {
  term_ = 0;
  clear_has_term();
}
inline ::google::protobuf::int32 s_req_timer_start::term() const {
  return term_;
}
inline void s_req_timer_start::set_term(::google::protobuf::int32 value) {
  set_has_term();
  term_ = value;
}

// optional string msg = 2;
inline bool s_req_timer_start::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_req_timer_start::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_req_timer_start::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_req_timer_start::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_req_timer_start::msg() const {
  return *msg_;
}
inline void s_req_timer_start::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_req_timer_start::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_req_timer_start::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_req_timer_start::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_req_timer_start::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_req_do_disconnect

// optional string reason = 1;
inline bool s_req_do_disconnect::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_do_disconnect::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_do_disconnect::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_do_disconnect::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& s_req_do_disconnect::reason() const {
  return *reason_;
}
inline void s_req_do_disconnect::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void s_req_do_disconnect::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void s_req_do_disconnect::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_req_do_disconnect::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* s_req_do_disconnect::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_x2bs_echo2

// optional int32 type = 1;
inline bool s_x2bs_echo2::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_x2bs_echo2::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_x2bs_echo2::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_x2bs_echo2::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_x2bs_echo2::type() const {
  return type_;
}
inline void s_x2bs_echo2::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_x2bs_echo2::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_x2bs_echo2::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_x2bs_echo2::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_x2bs_echo2::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_x2bs_echo2::msg() const {
  return *msg_;
}
inline void s_x2bs_echo2::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_x2bs_echo2::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_x2bs_echo2::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_x2bs_echo2::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_x2bs_echo2::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 client_time_msec = 3;
inline bool s_x2bs_echo2::has_client_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_x2bs_echo2::set_has_client_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_x2bs_echo2::clear_has_client_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_x2bs_echo2::clear_client_time_msec() {
  client_time_msec_ = 0;
  clear_has_client_time_msec();
}
inline ::google::protobuf::int32 s_x2bs_echo2::client_time_msec() const {
  return client_time_msec_;
}
inline void s_x2bs_echo2::set_client_time_msec(::google::protobuf::int32 value) {
  set_has_client_time_msec();
  client_time_msec_ = value;
}

// -------------------------------------------------------------------

// s_bs2x_echo2

// optional int32 type = 1;
inline bool s_bs2x_echo2::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2x_echo2::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2x_echo2::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2x_echo2::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_bs2x_echo2::type() const {
  return type_;
}
inline void s_bs2x_echo2::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_bs2x_echo2::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_bs2x_echo2::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_bs2x_echo2::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_bs2x_echo2::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_bs2x_echo2::msg() const {
  return *msg_;
}
inline void s_bs2x_echo2::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_bs2x_echo2::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_bs2x_echo2::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_bs2x_echo2::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_bs2x_echo2::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 client_time_msec = 3;
inline bool s_bs2x_echo2::has_client_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_bs2x_echo2::set_has_client_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_bs2x_echo2::clear_has_client_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_bs2x_echo2::clear_client_time_msec() {
  client_time_msec_ = 0;
  clear_has_client_time_msec();
}
inline ::google::protobuf::int32 s_bs2x_echo2::client_time_msec() const {
  return client_time_msec_;
}
inline void s_bs2x_echo2::set_client_time_msec(::google::protobuf::int32 value) {
  set_has_client_time_msec();
  client_time_msec_ = value;
}

// optional int64 bs_time_msec = 4;
inline bool s_bs2x_echo2::has_bs_time_msec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_bs2x_echo2::set_has_bs_time_msec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_bs2x_echo2::clear_has_bs_time_msec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_bs2x_echo2::clear_bs_time_msec() {
  bs_time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_bs_time_msec();
}
inline ::google::protobuf::int64 s_bs2x_echo2::bs_time_msec() const {
  return bs_time_msec_;
}
inline void s_bs2x_echo2::set_bs_time_msec(::google::protobuf::int64 value) {
  set_has_bs_time_msec();
  bs_time_msec_ = value;
}

// optional int32 etc = 5;
inline bool s_bs2x_echo2::has_etc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void s_bs2x_echo2::set_has_etc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void s_bs2x_echo2::clear_has_etc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void s_bs2x_echo2::clear_etc() {
  etc_ = 0;
  clear_has_etc();
}
inline ::google::protobuf::int32 s_bs2x_echo2::etc() const {
  return etc_;
}
inline void s_bs2x_echo2::set_etc(::google::protobuf::int32 value) {
  set_has_etc();
  etc_ = value;
}

// -------------------------------------------------------------------

// s_ans_bs_error

// optional int32 sys_error_id = 1;
inline bool s_ans_bs_error::has_sys_error_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_bs_error::set_has_sys_error_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_bs_error::clear_has_sys_error_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_bs_error::clear_sys_error_id() {
  sys_error_id_ = 0;
  clear_has_sys_error_id();
}
inline ::google::protobuf::int32 s_ans_bs_error::sys_error_id() const {
  return sys_error_id_;
}
inline void s_ans_bs_error::set_sys_error_id(::google::protobuf::int32 value) {
  set_has_sys_error_id();
  sys_error_id_ = value;
}

// -------------------------------------------------------------------

// s_req_get_cvar

// optional string name = 1;
inline bool s_req_get_cvar::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_get_cvar::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_get_cvar::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_get_cvar::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& s_req_get_cvar::name() const {
  return *name_;
}
inline void s_req_get_cvar::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_req_get_cvar::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_req_get_cvar::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_req_get_cvar::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* s_req_get_cvar::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_req_set_cvar

// optional string name = 1;
inline bool s_req_set_cvar::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_set_cvar::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_set_cvar::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_set_cvar::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& s_req_set_cvar::name() const {
  return *name_;
}
inline void s_req_set_cvar::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_req_set_cvar::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_req_set_cvar::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_req_set_cvar::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* s_req_set_cvar::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string val = 2;
inline bool s_req_set_cvar::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_req_set_cvar::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_req_set_cvar::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_req_set_cvar::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& s_req_set_cvar::val() const {
  return *val_;
}
inline void s_req_set_cvar::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void s_req_set_cvar::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void s_req_set_cvar::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_req_set_cvar::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* s_req_set_cvar::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_bs2ug_set_cvar

// optional string name = 1;
inline bool s_bs2ug_set_cvar::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2ug_set_cvar::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2ug_set_cvar::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2ug_set_cvar::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& s_bs2ug_set_cvar::name() const {
  return *name_;
}
inline void s_bs2ug_set_cvar::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_bs2ug_set_cvar::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_bs2ug_set_cvar::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_bs2ug_set_cvar::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* s_bs2ug_set_cvar::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string val = 2;
inline bool s_bs2ug_set_cvar::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_bs2ug_set_cvar::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_bs2ug_set_cvar::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_bs2ug_set_cvar::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& s_bs2ug_set_cvar::val() const {
  return *val_;
}
inline void s_bs2ug_set_cvar::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void s_bs2ug_set_cvar::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void s_bs2ug_set_cvar::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_bs2ug_set_cvar::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* s_bs2ug_set_cvar::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_ug2bs_ans_set_cvar

// optional string name = 1;
inline bool s_ug2bs_ans_set_cvar::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ug2bs_ans_set_cvar::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ug2bs_ans_set_cvar::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ug2bs_ans_set_cvar::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& s_ug2bs_ans_set_cvar::name() const {
  return *name_;
}
inline void s_ug2bs_ans_set_cvar::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_ug2bs_ans_set_cvar::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_ug2bs_ans_set_cvar::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_ug2bs_ans_set_cvar::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* s_ug2bs_ans_set_cvar::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string val = 2;
inline bool s_ug2bs_ans_set_cvar::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ug2bs_ans_set_cvar::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ug2bs_ans_set_cvar::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ug2bs_ans_set_cvar::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& s_ug2bs_ans_set_cvar::val() const {
  return *val_;
}
inline void s_ug2bs_ans_set_cvar::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void s_ug2bs_ans_set_cvar::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void s_ug2bs_ans_set_cvar::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_ug2bs_ans_set_cvar::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* s_ug2bs_ans_set_cvar::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// s_x2bs_auto_match_ready2

// optional int64 uid = 1;
inline bool s_x2bs_auto_match_ready2::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_x2bs_auto_match_ready2::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_x2bs_auto_match_ready2::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_x2bs_auto_match_ready2::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_x2bs_auto_match_ready2::uid() const {
  return uid_;
}
inline void s_x2bs_auto_match_ready2::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 batter = 2;
inline bool s_x2bs_auto_match_ready2::has_batter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_x2bs_auto_match_ready2::set_has_batter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_x2bs_auto_match_ready2::clear_has_batter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_x2bs_auto_match_ready2::clear_batter() {
  batter_ = 0;
  clear_has_batter();
}
inline ::google::protobuf::int32 s_x2bs_auto_match_ready2::batter() const {
  return batter_;
}
inline void s_x2bs_auto_match_ready2::set_batter(::google::protobuf::int32 value) {
  set_has_batter();
  batter_ = value;
}

// optional int32 pitcher = 3;
inline bool s_x2bs_auto_match_ready2::has_pitcher() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_x2bs_auto_match_ready2::set_has_pitcher() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_x2bs_auto_match_ready2::clear_has_pitcher() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_x2bs_auto_match_ready2::clear_pitcher() {
  pitcher_ = 0;
  clear_has_pitcher();
}
inline ::google::protobuf::int32 s_x2bs_auto_match_ready2::pitcher() const {
  return pitcher_;
}
inline void s_x2bs_auto_match_ready2::set_pitcher(::google::protobuf::int32 value) {
  set_has_pitcher();
  pitcher_ = value;
}

// -------------------------------------------------------------------

// s_bs2x_auto_match_ready2

// optional int64 uid = 1;
inline bool s_bs2x_auto_match_ready2::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2x_auto_match_ready2::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2x_auto_match_ready2::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2x_auto_match_ready2::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_bs2x_auto_match_ready2::uid() const {
  return uid_;
}
inline void s_bs2x_auto_match_ready2::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 batter = 2;
inline bool s_bs2x_auto_match_ready2::has_batter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_bs2x_auto_match_ready2::set_has_batter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_bs2x_auto_match_ready2::clear_has_batter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_bs2x_auto_match_ready2::clear_batter() {
  batter_ = 0;
  clear_has_batter();
}
inline ::google::protobuf::int32 s_bs2x_auto_match_ready2::batter() const {
  return batter_;
}
inline void s_bs2x_auto_match_ready2::set_batter(::google::protobuf::int32 value) {
  set_has_batter();
  batter_ = value;
}

// optional int32 pitcher = 3;
inline bool s_bs2x_auto_match_ready2::has_pitcher() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_bs2x_auto_match_ready2::set_has_pitcher() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_bs2x_auto_match_ready2::clear_has_pitcher() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_bs2x_auto_match_ready2::clear_pitcher() {
  pitcher_ = 0;
  clear_has_pitcher();
}
inline ::google::protobuf::int32 s_bs2x_auto_match_ready2::pitcher() const {
  return pitcher_;
}
inline void s_bs2x_auto_match_ready2::set_pitcher(::google::protobuf::int32 value) {
  set_has_pitcher();
  pitcher_ = value;
}

// optional int32 other_batter = 4;
inline bool s_bs2x_auto_match_ready2::has_other_batter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_bs2x_auto_match_ready2::set_has_other_batter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_bs2x_auto_match_ready2::clear_has_other_batter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_bs2x_auto_match_ready2::clear_other_batter() {
  other_batter_ = 0;
  clear_has_other_batter();
}
inline ::google::protobuf::int32 s_bs2x_auto_match_ready2::other_batter() const {
  return other_batter_;
}
inline void s_bs2x_auto_match_ready2::set_other_batter(::google::protobuf::int32 value) {
  set_has_other_batter();
  other_batter_ = value;
}

// optional int32 other_pitcher = 5;
inline bool s_bs2x_auto_match_ready2::has_other_pitcher() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void s_bs2x_auto_match_ready2::set_has_other_pitcher() {
  _has_bits_[0] |= 0x00000010u;
}
inline void s_bs2x_auto_match_ready2::clear_has_other_pitcher() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void s_bs2x_auto_match_ready2::clear_other_pitcher() {
  other_pitcher_ = 0;
  clear_has_other_pitcher();
}
inline ::google::protobuf::int32 s_bs2x_auto_match_ready2::other_pitcher() const {
  return other_pitcher_;
}
inline void s_bs2x_auto_match_ready2::set_other_pitcher(::google::protobuf::int32 value) {
  set_has_other_pitcher();
  other_pitcher_ = value;
}

// -------------------------------------------------------------------

// s_ans_game_start

// optional int64 attack_user = 1;
inline bool s_ans_game_start::has_attack_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_game_start::set_has_attack_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_game_start::clear_has_attack_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_game_start::clear_attack_user() {
  attack_user_ = GOOGLE_LONGLONG(0);
  clear_has_attack_user();
}
inline ::google::protobuf::int64 s_ans_game_start::attack_user() const {
  return attack_user_;
}
inline void s_ans_game_start::set_attack_user(::google::protobuf::int64 value) {
  set_has_attack_user();
  attack_user_ = value;
}

// optional int32 sid_Sys_Runner_State = 2;
inline bool s_ans_game_start::has_sid_sys_runner_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_game_start::set_has_sid_sys_runner_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_game_start::clear_has_sid_sys_runner_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_game_start::clear_sid_sys_runner_state() {
  sid_sys_runner_state_ = 0;
  clear_has_sid_sys_runner_state();
}
inline ::google::protobuf::int32 s_ans_game_start::sid_sys_runner_state() const {
  return sid_sys_runner_state_;
}
inline void s_ans_game_start::set_sid_sys_runner_state(::google::protobuf::int32 value) {
  set_has_sid_sys_runner_state();
  sid_sys_runner_state_ = value;
}

// optional int32 baseball_park = 3;
inline bool s_ans_game_start::has_baseball_park() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_ans_game_start::set_has_baseball_park() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_ans_game_start::clear_has_baseball_park() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_ans_game_start::clear_baseball_park() {
  baseball_park_ = 0;
  clear_has_baseball_park();
}
inline ::google::protobuf::int32 s_ans_game_start::baseball_park() const {
  return baseball_park_;
}
inline void s_ans_game_start::set_baseball_park(::google::protobuf::int32 value) {
  set_has_baseball_park();
  baseball_park_ = value;
}

// -------------------------------------------------------------------

// s_ans_game_round_start

// optional int32 round = 1;
inline bool s_ans_game_round_start::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_game_round_start::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_game_round_start::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_game_round_start::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 s_ans_game_round_start::round() const {
  return round_;
}
inline void s_ans_game_round_start::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
}

// optional int32 runner_state = 2;
inline bool s_ans_game_round_start::has_runner_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_game_round_start::set_has_runner_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_game_round_start::clear_has_runner_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_game_round_start::clear_runner_state() {
  runner_state_ = 0;
  clear_has_runner_state();
}
inline ::google::protobuf::int32 s_ans_game_round_start::runner_state() const {
  return runner_state_;
}
inline void s_ans_game_round_start::set_runner_state(::google::protobuf::int32 value) {
  set_has_runner_state();
  runner_state_ = value;
}

// -------------------------------------------------------------------

// s_x2bs_match_ready

// optional int64 uid = 1;
inline bool s_x2bs_match_ready::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_x2bs_match_ready::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_x2bs_match_ready::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_x2bs_match_ready::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_x2bs_match_ready::uid() const {
  return uid_;
}
inline void s_x2bs_match_ready::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// s_bs2x_match_ready

// optional int64 uid = 1;
inline bool s_bs2x_match_ready::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2x_match_ready::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2x_match_ready::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2x_match_ready::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_bs2x_match_ready::uid() const {
  return uid_;
}
inline void s_bs2x_match_ready::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// s_req_pitcher_throw

// optional .s_pitcher_throw_info info = 1;
inline bool s_req_pitcher_throw::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_pitcher_throw::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_pitcher_throw::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_pitcher_throw::clear_info() {
  if (info_ != NULL) info_->::s_pitcher_throw_info::Clear();
  clear_has_info();
}
inline const ::s_pitcher_throw_info& s_req_pitcher_throw::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::s_pitcher_throw_info* s_req_pitcher_throw::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::s_pitcher_throw_info;
  return info_;
}
inline ::s_pitcher_throw_info* s_req_pitcher_throw::release_info() {
  clear_has_info();
  ::s_pitcher_throw_info* temp = info_;
  info_ = NULL;
  return temp;
}

// optional int32 used_gesturetype = 2;
inline bool s_req_pitcher_throw::has_used_gesturetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_req_pitcher_throw::set_has_used_gesturetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_req_pitcher_throw::clear_has_used_gesturetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_req_pitcher_throw::clear_used_gesturetype() {
  used_gesturetype_ = 0;
  clear_has_used_gesturetype();
}
inline ::google::protobuf::int32 s_req_pitcher_throw::used_gesturetype() const {
  return used_gesturetype_;
}
inline void s_req_pitcher_throw::set_used_gesturetype(::google::protobuf::int32 value) {
  set_has_used_gesturetype();
  used_gesturetype_ = value;
}

// optional int32 gesturetype_input_error = 3;
inline bool s_req_pitcher_throw::has_gesturetype_input_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_req_pitcher_throw::set_has_gesturetype_input_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_req_pitcher_throw::clear_has_gesturetype_input_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_req_pitcher_throw::clear_gesturetype_input_error() {
  gesturetype_input_error_ = 0;
  clear_has_gesturetype_input_error();
}
inline ::google::protobuf::int32 s_req_pitcher_throw::gesturetype_input_error() const {
  return gesturetype_input_error_;
}
inline void s_req_pitcher_throw::set_gesturetype_input_error(::google::protobuf::int32 value) {
  set_has_gesturetype_input_error();
  gesturetype_input_error_ = value;
}

// -------------------------------------------------------------------

// s_ans_pitcher_throw

// optional .s_pitcher_throw_info info = 1;
inline bool s_ans_pitcher_throw::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_pitcher_throw::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_pitcher_throw::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_pitcher_throw::clear_info() {
  if (info_ != NULL) info_->::s_pitcher_throw_info::Clear();
  clear_has_info();
}
inline const ::s_pitcher_throw_info& s_ans_pitcher_throw::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::s_pitcher_throw_info* s_ans_pitcher_throw::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::s_pitcher_throw_info;
  return info_;
}
inline ::s_pitcher_throw_info* s_ans_pitcher_throw::release_info() {
  clear_has_info();
  ::s_pitcher_throw_info* temp = info_;
  info_ = NULL;
  return temp;
}

// optional bool is_auto = 2;
inline bool s_ans_pitcher_throw::has_is_auto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_pitcher_throw::set_has_is_auto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_pitcher_throw::clear_has_is_auto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_pitcher_throw::clear_is_auto() {
  is_auto_ = false;
  clear_has_is_auto();
}
inline bool s_ans_pitcher_throw::is_auto() const {
  return is_auto_;
}
inline void s_ans_pitcher_throw::set_is_auto(bool value) {
  set_has_is_auto();
  is_auto_ = value;
}

// -------------------------------------------------------------------

// s_req_better_hit

// optional .s_better_hit_info info = 1;
inline bool s_req_better_hit::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_better_hit::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_better_hit::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_better_hit::clear_info() {
  if (info_ != NULL) info_->::s_better_hit_info::Clear();
  clear_has_info();
}
inline const ::s_better_hit_info& s_req_better_hit::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::s_better_hit_info* s_req_better_hit::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::s_better_hit_info;
  return info_;
}
inline ::s_better_hit_info* s_req_better_hit::release_info() {
  clear_has_info();
  ::s_better_hit_info* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// s_ans_better_hit

// optional .s_better_hit_info info = 1;
inline bool s_ans_better_hit::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_better_hit::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_better_hit::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_better_hit::clear_info() {
  if (info_ != NULL) info_->::s_better_hit_info::Clear();
  clear_has_info();
}
inline const ::s_better_hit_info& s_ans_better_hit::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::s_better_hit_info* s_ans_better_hit::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::s_better_hit_info;
  return info_;
}
inline ::s_better_hit_info* s_ans_better_hit::release_info() {
  clear_has_info();
  ::s_better_hit_info* temp = info_;
  info_ = NULL;
  return temp;
}

// optional bool is_auto = 2;
inline bool s_ans_better_hit::has_is_auto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_better_hit::set_has_is_auto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_better_hit::clear_has_is_auto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_better_hit::clear_is_auto() {
  is_auto_ = false;
  clear_has_is_auto();
}
inline bool s_ans_better_hit::is_auto() const {
  return is_auto_;
}
inline void s_ans_better_hit::set_is_auto(bool value) {
  set_has_is_auto();
  is_auto_ = value;
}

// -------------------------------------------------------------------

// s_req_result_better_hit

// optional .s_result_round info = 1;
inline bool s_req_result_better_hit::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_result_better_hit::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_result_better_hit::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_result_better_hit::clear_info() {
  if (info_ != NULL) info_->::s_result_round::Clear();
  clear_has_info();
}
inline const ::s_result_round& s_req_result_better_hit::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::s_result_round* s_req_result_better_hit::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::s_result_round;
  return info_;
}
inline ::s_result_round* s_req_result_better_hit::release_info() {
  clear_has_info();
  ::s_result_round* temp = info_;
  info_ = NULL;
  return temp;
}

// optional int32 test = 2;
inline bool s_req_result_better_hit::has_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_req_result_better_hit::set_has_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_req_result_better_hit::clear_has_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_req_result_better_hit::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::google::protobuf::int32 s_req_result_better_hit::test() const {
  return test_;
}
inline void s_req_result_better_hit::set_test(::google::protobuf::int32 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// s_ans_result_better_hit

// optional .s_result_round info = 1;
inline bool s_ans_result_better_hit::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_result_better_hit::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_result_better_hit::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_result_better_hit::clear_info() {
  if (info_ != NULL) info_->::s_result_round::Clear();
  clear_has_info();
}
inline const ::s_result_round& s_ans_result_better_hit::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::s_result_round* s_ans_result_better_hit::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::s_result_round;
  return info_;
}
inline ::s_result_round* s_ans_result_better_hit::release_info() {
  clear_has_info();
  ::s_result_round* temp = info_;
  info_ = NULL;
  return temp;
}

// optional int32 end_type = 2;
inline bool s_ans_result_better_hit::has_end_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_result_better_hit::set_has_end_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_result_better_hit::clear_has_end_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_result_better_hit::clear_end_type() {
  end_type_ = 0;
  clear_has_end_type();
}
inline ::google::protobuf::int32 s_ans_result_better_hit::end_type() const {
  return end_type_;
}
inline void s_ans_result_better_hit::set_end_type(::google::protobuf::int32 value) {
  set_has_end_type();
  end_type_ = value;
}

// -------------------------------------------------------------------

// s_x2bs_batter_ready

// -------------------------------------------------------------------

// s_bs2x_batter_ready

// -------------------------------------------------------------------

// s_ans_change_attack_team

// optional int32 round = 1;
inline bool s_ans_change_attack_team::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_change_attack_team::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_change_attack_team::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_change_attack_team::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 s_ans_change_attack_team::round() const {
  return round_;
}
inline void s_ans_change_attack_team::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
}

// optional int64 attack_user = 2;
inline bool s_ans_change_attack_team::has_attack_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_change_attack_team::set_has_attack_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_change_attack_team::clear_has_attack_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_change_attack_team::clear_attack_user() {
  attack_user_ = GOOGLE_LONGLONG(0);
  clear_has_attack_user();
}
inline ::google::protobuf::int64 s_ans_change_attack_team::attack_user() const {
  return attack_user_;
}
inline void s_ans_change_attack_team::set_attack_user(::google::protobuf::int64 value) {
  set_has_attack_user();
  attack_user_ = value;
}

// -------------------------------------------------------------------

// s_ans_game_end

// optional .s_result_game rg = 1;
inline bool s_ans_game_end::has_rg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_game_end::set_has_rg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_game_end::clear_has_rg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_game_end::clear_rg() {
  if (rg_ != NULL) rg_->::s_result_game::Clear();
  clear_has_rg();
}
inline const ::s_result_game& s_ans_game_end::rg() const {
  return rg_ != NULL ? *rg_ : *default_instance_->rg_;
}
inline ::s_result_game* s_ans_game_end::mutable_rg() {
  set_has_rg();
  if (rg_ == NULL) rg_ = new ::s_result_game;
  return rg_;
}
inline ::s_result_game* s_ans_game_end::release_rg() {
  clear_has_rg();
  ::s_result_game* temp = rg_;
  rg_ = NULL;
  return temp;
}

// optional .s_tbl_user user = 2;
inline bool s_ans_game_end::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_game_end::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_game_end::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_game_end::clear_user() {
  if (user_ != NULL) user_->::s_tbl_user::Clear();
  clear_has_user();
}
inline const ::s_tbl_user& s_ans_game_end::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::s_tbl_user* s_ans_game_end::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::s_tbl_user;
  return user_;
}
inline ::s_tbl_user* s_ans_game_end::release_user() {
  clear_has_user();
  ::s_tbl_user* temp = user_;
  user_ = NULL;
  return temp;
}

// optional int32 end_type = 3;
inline bool s_ans_game_end::has_end_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_ans_game_end::set_has_end_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_ans_game_end::clear_has_end_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_ans_game_end::clear_end_type() {
  end_type_ = 0;
  clear_has_end_type();
}
inline ::google::protobuf::int32 s_ans_game_end::end_type() const {
  return end_type_;
}
inline void s_ans_game_end::set_end_type(::google::protobuf::int32 value) {
  set_has_end_type();
  end_type_ = value;
}

// -------------------------------------------------------------------

// s_bs2x_game_end_other_user_info

// optional .s_tbl_user other_user = 1;
inline bool s_bs2x_game_end_other_user_info::has_other_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2x_game_end_other_user_info::set_has_other_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2x_game_end_other_user_info::clear_has_other_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2x_game_end_other_user_info::clear_other_user() {
  if (other_user_ != NULL) other_user_->::s_tbl_user::Clear();
  clear_has_other_user();
}
inline const ::s_tbl_user& s_bs2x_game_end_other_user_info::other_user() const {
  return other_user_ != NULL ? *other_user_ : *default_instance_->other_user_;
}
inline ::s_tbl_user* s_bs2x_game_end_other_user_info::mutable_other_user() {
  set_has_other_user();
  if (other_user_ == NULL) other_user_ = new ::s_tbl_user;
  return other_user_;
}
inline ::s_tbl_user* s_bs2x_game_end_other_user_info::release_other_user() {
  clear_has_other_user();
  ::s_tbl_user* temp = other_user_;
  other_user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// s_bs2ug_game_end

// optional .s_result_game rg = 1;
inline bool s_bs2ug_game_end::has_rg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2ug_game_end::set_has_rg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2ug_game_end::clear_has_rg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2ug_game_end::clear_rg() {
  if (rg_ != NULL) rg_->::s_result_game::Clear();
  clear_has_rg();
}
inline const ::s_result_game& s_bs2ug_game_end::rg() const {
  return rg_ != NULL ? *rg_ : *default_instance_->rg_;
}
inline ::s_result_game* s_bs2ug_game_end::mutable_rg() {
  set_has_rg();
  if (rg_ == NULL) rg_ = new ::s_result_game;
  return rg_;
}
inline ::s_result_game* s_bs2ug_game_end::release_rg() {
  clear_has_rg();
  ::s_result_game* temp = rg_;
  rg_ = NULL;
  return temp;
}

// optional bool is_better = 2;
inline bool s_bs2ug_game_end::has_is_better() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_bs2ug_game_end::set_has_is_better() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_bs2ug_game_end::clear_has_is_better() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_bs2ug_game_end::clear_is_better() {
  is_better_ = false;
  clear_has_is_better();
}
inline bool s_bs2ug_game_end::is_better() const {
  return is_better_;
}
inline void s_bs2ug_game_end::set_is_better(bool value) {
  set_has_is_better();
  is_better_ = value;
}

// repeated .s_result_round rr = 3;
inline int s_bs2ug_game_end::rr_size() const {
  return rr_.size();
}
inline void s_bs2ug_game_end::clear_rr() {
  rr_.Clear();
}
inline const ::s_result_round& s_bs2ug_game_end::rr(int index) const {
  return rr_.Get(index);
}
inline ::s_result_round* s_bs2ug_game_end::mutable_rr(int index) {
  return rr_.Mutable(index);
}
inline ::s_result_round* s_bs2ug_game_end::add_rr() {
  return rr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::s_result_round >&
s_bs2ug_game_end::rr() const {
  return rr_;
}
inline ::google::protobuf::RepeatedPtrField< ::s_result_round >*
s_bs2ug_game_end::mutable_rr() {
  return &rr_;
}

// -------------------------------------------------------------------

// s_ug2bs_game_end

// optional .s_result_game rg = 1;
inline bool s_ug2bs_game_end::has_rg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ug2bs_game_end::set_has_rg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ug2bs_game_end::clear_has_rg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ug2bs_game_end::clear_rg() {
  if (rg_ != NULL) rg_->::s_result_game::Clear();
  clear_has_rg();
}
inline const ::s_result_game& s_ug2bs_game_end::rg() const {
  return rg_ != NULL ? *rg_ : *default_instance_->rg_;
}
inline ::s_result_game* s_ug2bs_game_end::mutable_rg() {
  set_has_rg();
  if (rg_ == NULL) rg_ = new ::s_result_game;
  return rg_;
}
inline ::s_result_game* s_ug2bs_game_end::release_rg() {
  clear_has_rg();
  ::s_result_game* temp = rg_;
  rg_ = NULL;
  return temp;
}

// optional .s_tbl_user user = 2;
inline bool s_ug2bs_game_end::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ug2bs_game_end::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ug2bs_game_end::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ug2bs_game_end::clear_user() {
  if (user_ != NULL) user_->::s_tbl_user::Clear();
  clear_has_user();
}
inline const ::s_tbl_user& s_ug2bs_game_end::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::s_tbl_user* s_ug2bs_game_end::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::s_tbl_user;
  return user_;
}
inline ::s_tbl_user* s_ug2bs_game_end::release_user() {
  clear_has_user();
  ::s_tbl_user* temp = user_;
  user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// s_ans_user_disconnect

// optional int64 uid = 1;
inline bool s_ans_user_disconnect::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_user_disconnect::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_user_disconnect::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_user_disconnect::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_ans_user_disconnect::uid() const {
  return uid_;
}
inline void s_ans_user_disconnect::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 sys_error_id = 2;
inline bool s_ans_user_disconnect::has_sys_error_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ans_user_disconnect::set_has_sys_error_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ans_user_disconnect::clear_has_sys_error_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ans_user_disconnect::clear_sys_error_id() {
  sys_error_id_ = 0;
  clear_has_sys_error_id();
}
inline ::google::protobuf::int32 s_ans_user_disconnect::sys_error_id() const {
  return sys_error_id_;
}
inline void s_ans_user_disconnect::set_sys_error_id(::google::protobuf::int32 value) {
  set_has_sys_error_id();
  sys_error_id_ = value;
}

// -------------------------------------------------------------------

// s_req_rematch

// optional int64 uid = 1;
inline bool s_req_rematch::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_rematch::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_rematch::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_rematch::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_req_rematch::uid() const {
  return uid_;
}
inline void s_req_rematch::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// s_ans_rematch

// optional int64 uid = 1;
inline bool s_ans_rematch::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ans_rematch::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ans_rematch::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ans_rematch::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_ans_rematch::uid() const {
  return uid_;
}
inline void s_ans_rematch::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// s_req_answer_restart_game

// optional int64 uid = 1;
inline bool s_req_answer_restart_game::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_req_answer_restart_game::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_req_answer_restart_game::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_req_answer_restart_game::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 s_req_answer_restart_game::uid() const {
  return uid_;
}
inline void s_req_answer_restart_game::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional bool ok = 2;
inline bool s_req_answer_restart_game::has_ok() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_req_answer_restart_game::set_has_ok() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_req_answer_restart_game::clear_has_ok() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_req_answer_restart_game::clear_ok() {
  ok_ = false;
  clear_has_ok();
}
inline bool s_req_answer_restart_game::ok() const {
  return ok_;
}
inline void s_req_answer_restart_game::set_ok(bool value) {
  set_has_ok();
  ok_ = value;
}

// -------------------------------------------------------------------

// s_ans_answer_restart_game

// repeated int64 uid = 1;
inline int s_ans_answer_restart_game::uid_size() const {
  return uid_.size();
}
inline void s_ans_answer_restart_game::clear_uid() {
  uid_.Clear();
}
inline ::google::protobuf::int64 s_ans_answer_restart_game::uid(int index) const {
  return uid_.Get(index);
}
inline void s_ans_answer_restart_game::set_uid(int index, ::google::protobuf::int64 value) {
  uid_.Set(index, value);
}
inline void s_ans_answer_restart_game::add_uid(::google::protobuf::int64 value) {
  uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
s_ans_answer_restart_game::uid() const {
  return uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
s_ans_answer_restart_game::mutable_uid() {
  return &uid_;
}

// repeated bool ok = 2;
inline int s_ans_answer_restart_game::ok_size() const {
  return ok_.size();
}
inline void s_ans_answer_restart_game::clear_ok() {
  ok_.Clear();
}
inline bool s_ans_answer_restart_game::ok(int index) const {
  return ok_.Get(index);
}
inline void s_ans_answer_restart_game::set_ok(int index, bool value) {
  ok_.Set(index, value);
}
inline void s_ans_answer_restart_game::add_ok(bool value) {
  ok_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
s_ans_answer_restart_game::ok() const {
  return ok_;
}
inline ::google::protobuf::RepeatedField< bool >*
s_ans_answer_restart_game::mutable_ok() {
  return &ok_;
}

// optional int32 baseball_park = 3;
inline bool s_ans_answer_restart_game::has_baseball_park() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_ans_answer_restart_game::set_has_baseball_park() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_ans_answer_restart_game::clear_has_baseball_park() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_ans_answer_restart_game::clear_baseball_park() {
  baseball_park_ = 0;
  clear_has_baseball_park();
}
inline ::google::protobuf::int32 s_ans_answer_restart_game::baseball_park() const {
  return baseball_park_;
}
inline void s_ans_answer_restart_game::set_baseball_park(::google::protobuf::int32 value) {
  set_has_baseball_park();
  baseball_park_ = value;
}

// optional int64 attack_user = 4;
inline bool s_ans_answer_restart_game::has_attack_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_ans_answer_restart_game::set_has_attack_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_ans_answer_restart_game::clear_has_attack_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_ans_answer_restart_game::clear_attack_user() {
  attack_user_ = GOOGLE_LONGLONG(0);
  clear_has_attack_user();
}
inline ::google::protobuf::int64 s_ans_answer_restart_game::attack_user() const {
  return attack_user_;
}
inline void s_ans_answer_restart_game::set_attack_user(::google::protobuf::int64 value) {
  set_has_attack_user();
  attack_user_ = value;
}

// -------------------------------------------------------------------

// s_ug2bs_echo

// optional int32 type = 1;
inline bool s_ug2bs_echo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ug2bs_echo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ug2bs_echo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ug2bs_echo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_ug2bs_echo::type() const {
  return type_;
}
inline void s_ug2bs_echo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_ug2bs_echo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_ug2bs_echo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_ug2bs_echo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_ug2bs_echo::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_ug2bs_echo::msg() const {
  return *msg_;
}
inline void s_ug2bs_echo::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_ug2bs_echo::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_ug2bs_echo::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_ug2bs_echo::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_ug2bs_echo::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 bs_time_msec = 3;
inline bool s_ug2bs_echo::has_bs_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_ug2bs_echo::set_has_bs_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_ug2bs_echo::clear_has_bs_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_ug2bs_echo::clear_bs_time_msec() {
  bs_time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_bs_time_msec();
}
inline ::google::protobuf::int64 s_ug2bs_echo::bs_time_msec() const {
  return bs_time_msec_;
}
inline void s_ug2bs_echo::set_bs_time_msec(::google::protobuf::int64 value) {
  set_has_bs_time_msec();
  bs_time_msec_ = value;
}

// optional int64 ug_time_msec = 4;
inline bool s_ug2bs_echo::has_ug_time_msec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_ug2bs_echo::set_has_ug_time_msec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_ug2bs_echo::clear_has_ug_time_msec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_ug2bs_echo::clear_ug_time_msec() {
  ug_time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_ug_time_msec();
}
inline ::google::protobuf::int64 s_ug2bs_echo::ug_time_msec() const {
  return ug_time_msec_;
}
inline void s_ug2bs_echo::set_ug_time_msec(::google::protobuf::int64 value) {
  set_has_ug_time_msec();
  ug_time_msec_ = value;
}

// -------------------------------------------------------------------

// s_bs2ug_echo

// optional int32 type = 1;
inline bool s_bs2ug_echo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2ug_echo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2ug_echo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2ug_echo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 s_bs2ug_echo::type() const {
  return type_;
}
inline void s_bs2ug_echo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string msg = 2;
inline bool s_bs2ug_echo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void s_bs2ug_echo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void s_bs2ug_echo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void s_bs2ug_echo::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& s_bs2ug_echo::msg() const {
  return *msg_;
}
inline void s_bs2ug_echo::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_bs2ug_echo::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void s_bs2ug_echo::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_bs2ug_echo::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* s_bs2ug_echo::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 bs_time_msec = 3;
inline bool s_bs2ug_echo::has_bs_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void s_bs2ug_echo::set_has_bs_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void s_bs2ug_echo::clear_has_bs_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void s_bs2ug_echo::clear_bs_time_msec() {
  bs_time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_bs_time_msec();
}
inline ::google::protobuf::int64 s_bs2ug_echo::bs_time_msec() const {
  return bs_time_msec_;
}
inline void s_bs2ug_echo::set_bs_time_msec(::google::protobuf::int64 value) {
  set_has_bs_time_msec();
  bs_time_msec_ = value;
}

// optional int64 ug_time_msec = 4;
inline bool s_bs2ug_echo::has_ug_time_msec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void s_bs2ug_echo::set_has_ug_time_msec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void s_bs2ug_echo::clear_has_ug_time_msec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void s_bs2ug_echo::clear_ug_time_msec() {
  ug_time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_ug_time_msec();
}
inline ::google::protobuf::int64 s_bs2ug_echo::ug_time_msec() const {
  return ug_time_msec_;
}
inline void s_bs2ug_echo::set_ug_time_msec(::google::protobuf::int64 value) {
  set_has_ug_time_msec();
  ug_time_msec_ = value;
}

// -------------------------------------------------------------------

// s_ug2bs_error

// optional int32 sys_error_id = 1;
inline bool s_ug2bs_error::has_sys_error_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ug2bs_error::set_has_sys_error_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ug2bs_error::clear_has_sys_error_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ug2bs_error::clear_sys_error_id() {
  sys_error_id_ = 0;
  clear_has_sys_error_id();
}
inline ::google::protobuf::int32 s_ug2bs_error::sys_error_id() const {
  return sys_error_id_;
}
inline void s_ug2bs_error::set_sys_error_id(::google::protobuf::int32 value) {
  set_has_sys_error_id();
  sys_error_id_ = value;
}

// -------------------------------------------------------------------

// s_bs2ug_error

// optional int32 sys_error_id = 1;
inline bool s_bs2ug_error::has_sys_error_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2ug_error::set_has_sys_error_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2ug_error::clear_has_sys_error_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2ug_error::clear_sys_error_id() {
  sys_error_id_ = 0;
  clear_has_sys_error_id();
}
inline ::google::protobuf::int32 s_bs2ug_error::sys_error_id() const {
  return sys_error_id_;
}
inline void s_bs2ug_error::set_sys_error_id(::google::protobuf::int32 value) {
  set_has_sys_error_id();
  sys_error_id_ = value;
}

// -------------------------------------------------------------------

// s_bs2ug_add_discon_tot

// optional int64 discon_uid = 1;
inline bool s_bs2ug_add_discon_tot::has_discon_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_bs2ug_add_discon_tot::set_has_discon_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_bs2ug_add_discon_tot::clear_has_discon_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_bs2ug_add_discon_tot::clear_discon_uid() {
  discon_uid_ = GOOGLE_LONGLONG(0);
  clear_has_discon_uid();
}
inline ::google::protobuf::int64 s_bs2ug_add_discon_tot::discon_uid() const {
  return discon_uid_;
}
inline void s_bs2ug_add_discon_tot::set_discon_uid(::google::protobuf::int64 value) {
  set_has_discon_uid();
  discon_uid_ = value;
}

// -------------------------------------------------------------------

// s_ug2bs_add_discon_tot

// optional int64 discon_uid = 1;
inline bool s_ug2bs_add_discon_tot::has_discon_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void s_ug2bs_add_discon_tot::set_has_discon_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void s_ug2bs_add_discon_tot::clear_has_discon_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void s_ug2bs_add_discon_tot::clear_discon_uid() {
  discon_uid_ = GOOGLE_LONGLONG(0);
  clear_has_discon_uid();
}
inline ::google::protobuf::int64 s_ug2bs_add_discon_tot::discon_uid() const {
  return discon_uid_;
}
inline void s_ug2bs_add_discon_tot::set_discon_uid(::google::protobuf::int64 value) {
  set_has_discon_uid();
  discon_uid_ = value;
}

// -------------------------------------------------------------------

// BaseballServer_UserGateServer

// required .BaseballServer_UserGateServer.Type type = 1;
inline bool BaseballServer_UserGateServer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseballServer_UserGateServer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseballServer_UserGateServer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseballServer_UserGateServer::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::type() const {
  return static_cast< ::BaseballServer_UserGateServer_Type >(type_);
}
inline void BaseballServer_UserGateServer::set_type(::BaseballServer_UserGateServer_Type value) {
  GOOGLE_DCHECK(::BaseballServer_UserGateServer_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .s_bs2ug_set_cvar m_bs2ug_set_cvar = 2;
inline bool BaseballServer_UserGateServer::has_m_bs2ug_set_cvar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseballServer_UserGateServer::set_has_m_bs2ug_set_cvar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseballServer_UserGateServer::clear_has_m_bs2ug_set_cvar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseballServer_UserGateServer::clear_m_bs2ug_set_cvar() {
  if (m_bs2ug_set_cvar_ != NULL) m_bs2ug_set_cvar_->::s_bs2ug_set_cvar::Clear();
  clear_has_m_bs2ug_set_cvar();
}
inline const ::s_bs2ug_set_cvar& BaseballServer_UserGateServer::m_bs2ug_set_cvar() const {
  return m_bs2ug_set_cvar_ != NULL ? *m_bs2ug_set_cvar_ : *default_instance_->m_bs2ug_set_cvar_;
}
inline ::s_bs2ug_set_cvar* BaseballServer_UserGateServer::mutable_m_bs2ug_set_cvar() {
  set_has_m_bs2ug_set_cvar();
  if (m_bs2ug_set_cvar_ == NULL) m_bs2ug_set_cvar_ = new ::s_bs2ug_set_cvar;
  return m_bs2ug_set_cvar_;
}
inline ::s_bs2ug_set_cvar* BaseballServer_UserGateServer::release_m_bs2ug_set_cvar() {
  clear_has_m_bs2ug_set_cvar();
  ::s_bs2ug_set_cvar* temp = m_bs2ug_set_cvar_;
  m_bs2ug_set_cvar_ = NULL;
  return temp;
}

// optional .s_bs2ug_game_end m_bs2ug_game_end = 3;
inline bool BaseballServer_UserGateServer::has_m_bs2ug_game_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseballServer_UserGateServer::set_has_m_bs2ug_game_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseballServer_UserGateServer::clear_has_m_bs2ug_game_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseballServer_UserGateServer::clear_m_bs2ug_game_end() {
  if (m_bs2ug_game_end_ != NULL) m_bs2ug_game_end_->::s_bs2ug_game_end::Clear();
  clear_has_m_bs2ug_game_end();
}
inline const ::s_bs2ug_game_end& BaseballServer_UserGateServer::m_bs2ug_game_end() const {
  return m_bs2ug_game_end_ != NULL ? *m_bs2ug_game_end_ : *default_instance_->m_bs2ug_game_end_;
}
inline ::s_bs2ug_game_end* BaseballServer_UserGateServer::mutable_m_bs2ug_game_end() {
  set_has_m_bs2ug_game_end();
  if (m_bs2ug_game_end_ == NULL) m_bs2ug_game_end_ = new ::s_bs2ug_game_end;
  return m_bs2ug_game_end_;
}
inline ::s_bs2ug_game_end* BaseballServer_UserGateServer::release_m_bs2ug_game_end() {
  clear_has_m_bs2ug_game_end();
  ::s_bs2ug_game_end* temp = m_bs2ug_game_end_;
  m_bs2ug_game_end_ = NULL;
  return temp;
}

// optional .s_bs2ug_echo m_bs2ug_echo = 4;
inline bool BaseballServer_UserGateServer::has_m_bs2ug_echo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseballServer_UserGateServer::set_has_m_bs2ug_echo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseballServer_UserGateServer::clear_has_m_bs2ug_echo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseballServer_UserGateServer::clear_m_bs2ug_echo() {
  if (m_bs2ug_echo_ != NULL) m_bs2ug_echo_->::s_bs2ug_echo::Clear();
  clear_has_m_bs2ug_echo();
}
inline const ::s_bs2ug_echo& BaseballServer_UserGateServer::m_bs2ug_echo() const {
  return m_bs2ug_echo_ != NULL ? *m_bs2ug_echo_ : *default_instance_->m_bs2ug_echo_;
}
inline ::s_bs2ug_echo* BaseballServer_UserGateServer::mutable_m_bs2ug_echo() {
  set_has_m_bs2ug_echo();
  if (m_bs2ug_echo_ == NULL) m_bs2ug_echo_ = new ::s_bs2ug_echo;
  return m_bs2ug_echo_;
}
inline ::s_bs2ug_echo* BaseballServer_UserGateServer::release_m_bs2ug_echo() {
  clear_has_m_bs2ug_echo();
  ::s_bs2ug_echo* temp = m_bs2ug_echo_;
  m_bs2ug_echo_ = NULL;
  return temp;
}

// optional .s_bs2ug_error m_bs2ug_error = 5;
inline bool BaseballServer_UserGateServer::has_m_bs2ug_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseballServer_UserGateServer::set_has_m_bs2ug_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseballServer_UserGateServer::clear_has_m_bs2ug_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseballServer_UserGateServer::clear_m_bs2ug_error() {
  if (m_bs2ug_error_ != NULL) m_bs2ug_error_->::s_bs2ug_error::Clear();
  clear_has_m_bs2ug_error();
}
inline const ::s_bs2ug_error& BaseballServer_UserGateServer::m_bs2ug_error() const {
  return m_bs2ug_error_ != NULL ? *m_bs2ug_error_ : *default_instance_->m_bs2ug_error_;
}
inline ::s_bs2ug_error* BaseballServer_UserGateServer::mutable_m_bs2ug_error() {
  set_has_m_bs2ug_error();
  if (m_bs2ug_error_ == NULL) m_bs2ug_error_ = new ::s_bs2ug_error;
  return m_bs2ug_error_;
}
inline ::s_bs2ug_error* BaseballServer_UserGateServer::release_m_bs2ug_error() {
  clear_has_m_bs2ug_error();
  ::s_bs2ug_error* temp = m_bs2ug_error_;
  m_bs2ug_error_ = NULL;
  return temp;
}

// optional .s_bs2ug_add_discon_tot m_bs2ug_add_discon_tot = 6;
inline bool BaseballServer_UserGateServer::has_m_bs2ug_add_discon_tot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseballServer_UserGateServer::set_has_m_bs2ug_add_discon_tot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseballServer_UserGateServer::clear_has_m_bs2ug_add_discon_tot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseballServer_UserGateServer::clear_m_bs2ug_add_discon_tot() {
  if (m_bs2ug_add_discon_tot_ != NULL) m_bs2ug_add_discon_tot_->::s_bs2ug_add_discon_tot::Clear();
  clear_has_m_bs2ug_add_discon_tot();
}
inline const ::s_bs2ug_add_discon_tot& BaseballServer_UserGateServer::m_bs2ug_add_discon_tot() const {
  return m_bs2ug_add_discon_tot_ != NULL ? *m_bs2ug_add_discon_tot_ : *default_instance_->m_bs2ug_add_discon_tot_;
}
inline ::s_bs2ug_add_discon_tot* BaseballServer_UserGateServer::mutable_m_bs2ug_add_discon_tot() {
  set_has_m_bs2ug_add_discon_tot();
  if (m_bs2ug_add_discon_tot_ == NULL) m_bs2ug_add_discon_tot_ = new ::s_bs2ug_add_discon_tot;
  return m_bs2ug_add_discon_tot_;
}
inline ::s_bs2ug_add_discon_tot* BaseballServer_UserGateServer::release_m_bs2ug_add_discon_tot() {
  clear_has_m_bs2ug_add_discon_tot();
  ::s_bs2ug_add_discon_tot* temp = m_bs2ug_add_discon_tot_;
  m_bs2ug_add_discon_tot_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BaseballServer_Client

// required .BaseballServer_Client.Type type = 1;
inline bool BaseballServer_Client::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseballServer_Client::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseballServer_Client::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseballServer_Client::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::BaseballServer_Client_Type BaseballServer_Client::type() const {
  return static_cast< ::BaseballServer_Client_Type >(type_);
}
inline void BaseballServer_Client::set_type(::BaseballServer_Client_Type value) {
  GOOGLE_DCHECK(::BaseballServer_Client_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .s_ans_join_room m_ans_join_room = 2;
inline bool BaseballServer_Client::has_m_ans_join_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_join_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseballServer_Client::clear_has_m_ans_join_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseballServer_Client::clear_m_ans_join_room() {
  if (m_ans_join_room_ != NULL) m_ans_join_room_->::s_ans_join_room::Clear();
  clear_has_m_ans_join_room();
}
inline const ::s_ans_join_room& BaseballServer_Client::m_ans_join_room() const {
  return m_ans_join_room_ != NULL ? *m_ans_join_room_ : *default_instance_->m_ans_join_room_;
}
inline ::s_ans_join_room* BaseballServer_Client::mutable_m_ans_join_room() {
  set_has_m_ans_join_room();
  if (m_ans_join_room_ == NULL) m_ans_join_room_ = new ::s_ans_join_room;
  return m_ans_join_room_;
}
inline ::s_ans_join_room* BaseballServer_Client::release_m_ans_join_room() {
  clear_has_m_ans_join_room();
  ::s_ans_join_room* temp = m_ans_join_room_;
  m_ans_join_room_ = NULL;
  return temp;
}

// optional .s_ans_room_state m_ans_room_state = 3;
inline bool BaseballServer_Client::has_m_ans_room_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_room_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseballServer_Client::clear_has_m_ans_room_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseballServer_Client::clear_m_ans_room_state() {
  if (m_ans_room_state_ != NULL) m_ans_room_state_->::s_ans_room_state::Clear();
  clear_has_m_ans_room_state();
}
inline const ::s_ans_room_state& BaseballServer_Client::m_ans_room_state() const {
  return m_ans_room_state_ != NULL ? *m_ans_room_state_ : *default_instance_->m_ans_room_state_;
}
inline ::s_ans_room_state* BaseballServer_Client::mutable_m_ans_room_state() {
  set_has_m_ans_room_state();
  if (m_ans_room_state_ == NULL) m_ans_room_state_ = new ::s_ans_room_state;
  return m_ans_room_state_;
}
inline ::s_ans_room_state* BaseballServer_Client::release_m_ans_room_state() {
  clear_has_m_ans_room_state();
  ::s_ans_room_state* temp = m_ans_room_state_;
  m_ans_room_state_ = NULL;
  return temp;
}

// optional .s_bs2x_echo m_bs2x_echo = 4;
inline bool BaseballServer_Client::has_m_bs2x_echo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseballServer_Client::set_has_m_bs2x_echo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseballServer_Client::clear_has_m_bs2x_echo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseballServer_Client::clear_m_bs2x_echo() {
  if (m_bs2x_echo_ != NULL) m_bs2x_echo_->::s_bs2x_echo::Clear();
  clear_has_m_bs2x_echo();
}
inline const ::s_bs2x_echo& BaseballServer_Client::m_bs2x_echo() const {
  return m_bs2x_echo_ != NULL ? *m_bs2x_echo_ : *default_instance_->m_bs2x_echo_;
}
inline ::s_bs2x_echo* BaseballServer_Client::mutable_m_bs2x_echo() {
  set_has_m_bs2x_echo();
  if (m_bs2x_echo_ == NULL) m_bs2x_echo_ = new ::s_bs2x_echo;
  return m_bs2x_echo_;
}
inline ::s_bs2x_echo* BaseballServer_Client::release_m_bs2x_echo() {
  clear_has_m_bs2x_echo();
  ::s_bs2x_echo* temp = m_bs2x_echo_;
  m_bs2x_echo_ = NULL;
  return temp;
}

// optional .s_ans_chat m_ans_chat = 5;
inline bool BaseballServer_Client::has_m_ans_chat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_chat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseballServer_Client::clear_has_m_ans_chat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseballServer_Client::clear_m_ans_chat() {
  if (m_ans_chat_ != NULL) m_ans_chat_->::s_ans_chat::Clear();
  clear_has_m_ans_chat();
}
inline const ::s_ans_chat& BaseballServer_Client::m_ans_chat() const {
  return m_ans_chat_ != NULL ? *m_ans_chat_ : *default_instance_->m_ans_chat_;
}
inline ::s_ans_chat* BaseballServer_Client::mutable_m_ans_chat() {
  set_has_m_ans_chat();
  if (m_ans_chat_ == NULL) m_ans_chat_ = new ::s_ans_chat;
  return m_ans_chat_;
}
inline ::s_ans_chat* BaseballServer_Client::release_m_ans_chat() {
  clear_has_m_ans_chat();
  ::s_ans_chat* temp = m_ans_chat_;
  m_ans_chat_ = NULL;
  return temp;
}

// optional .s_ans_timer_start m_ans_timer_start = 6;
inline bool BaseballServer_Client::has_m_ans_timer_start() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_timer_start() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseballServer_Client::clear_has_m_ans_timer_start() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseballServer_Client::clear_m_ans_timer_start() {
  if (m_ans_timer_start_ != NULL) m_ans_timer_start_->::s_ans_timer_start::Clear();
  clear_has_m_ans_timer_start();
}
inline const ::s_ans_timer_start& BaseballServer_Client::m_ans_timer_start() const {
  return m_ans_timer_start_ != NULL ? *m_ans_timer_start_ : *default_instance_->m_ans_timer_start_;
}
inline ::s_ans_timer_start* BaseballServer_Client::mutable_m_ans_timer_start() {
  set_has_m_ans_timer_start();
  if (m_ans_timer_start_ == NULL) m_ans_timer_start_ = new ::s_ans_timer_start;
  return m_ans_timer_start_;
}
inline ::s_ans_timer_start* BaseballServer_Client::release_m_ans_timer_start() {
  clear_has_m_ans_timer_start();
  ::s_ans_timer_start* temp = m_ans_timer_start_;
  m_ans_timer_start_ = NULL;
  return temp;
}

// optional .s_bs2x_echo2 m_bs2x_echo2 = 7;
inline bool BaseballServer_Client::has_m_bs2x_echo2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseballServer_Client::set_has_m_bs2x_echo2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseballServer_Client::clear_has_m_bs2x_echo2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseballServer_Client::clear_m_bs2x_echo2() {
  if (m_bs2x_echo2_ != NULL) m_bs2x_echo2_->::s_bs2x_echo2::Clear();
  clear_has_m_bs2x_echo2();
}
inline const ::s_bs2x_echo2& BaseballServer_Client::m_bs2x_echo2() const {
  return m_bs2x_echo2_ != NULL ? *m_bs2x_echo2_ : *default_instance_->m_bs2x_echo2_;
}
inline ::s_bs2x_echo2* BaseballServer_Client::mutable_m_bs2x_echo2() {
  set_has_m_bs2x_echo2();
  if (m_bs2x_echo2_ == NULL) m_bs2x_echo2_ = new ::s_bs2x_echo2;
  return m_bs2x_echo2_;
}
inline ::s_bs2x_echo2* BaseballServer_Client::release_m_bs2x_echo2() {
  clear_has_m_bs2x_echo2();
  ::s_bs2x_echo2* temp = m_bs2x_echo2_;
  m_bs2x_echo2_ = NULL;
  return temp;
}

// optional .s_ans_bs_error m_ans_bs_error = 8;
inline bool BaseballServer_Client::has_m_ans_bs_error() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_bs_error() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BaseballServer_Client::clear_has_m_ans_bs_error() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BaseballServer_Client::clear_m_ans_bs_error() {
  if (m_ans_bs_error_ != NULL) m_ans_bs_error_->::s_ans_bs_error::Clear();
  clear_has_m_ans_bs_error();
}
inline const ::s_ans_bs_error& BaseballServer_Client::m_ans_bs_error() const {
  return m_ans_bs_error_ != NULL ? *m_ans_bs_error_ : *default_instance_->m_ans_bs_error_;
}
inline ::s_ans_bs_error* BaseballServer_Client::mutable_m_ans_bs_error() {
  set_has_m_ans_bs_error();
  if (m_ans_bs_error_ == NULL) m_ans_bs_error_ = new ::s_ans_bs_error;
  return m_ans_bs_error_;
}
inline ::s_ans_bs_error* BaseballServer_Client::release_m_ans_bs_error() {
  clear_has_m_ans_bs_error();
  ::s_ans_bs_error* temp = m_ans_bs_error_;
  m_ans_bs_error_ = NULL;
  return temp;
}

// optional .s_bs2x_auto_match_ready2 m_bs2x_auto_match_ready2 = 9;
inline bool BaseballServer_Client::has_m_bs2x_auto_match_ready2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BaseballServer_Client::set_has_m_bs2x_auto_match_ready2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BaseballServer_Client::clear_has_m_bs2x_auto_match_ready2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BaseballServer_Client::clear_m_bs2x_auto_match_ready2() {
  if (m_bs2x_auto_match_ready2_ != NULL) m_bs2x_auto_match_ready2_->::s_bs2x_auto_match_ready2::Clear();
  clear_has_m_bs2x_auto_match_ready2();
}
inline const ::s_bs2x_auto_match_ready2& BaseballServer_Client::m_bs2x_auto_match_ready2() const {
  return m_bs2x_auto_match_ready2_ != NULL ? *m_bs2x_auto_match_ready2_ : *default_instance_->m_bs2x_auto_match_ready2_;
}
inline ::s_bs2x_auto_match_ready2* BaseballServer_Client::mutable_m_bs2x_auto_match_ready2() {
  set_has_m_bs2x_auto_match_ready2();
  if (m_bs2x_auto_match_ready2_ == NULL) m_bs2x_auto_match_ready2_ = new ::s_bs2x_auto_match_ready2;
  return m_bs2x_auto_match_ready2_;
}
inline ::s_bs2x_auto_match_ready2* BaseballServer_Client::release_m_bs2x_auto_match_ready2() {
  clear_has_m_bs2x_auto_match_ready2();
  ::s_bs2x_auto_match_ready2* temp = m_bs2x_auto_match_ready2_;
  m_bs2x_auto_match_ready2_ = NULL;
  return temp;
}

// optional .s_ans_game_start m_ans_game_start = 10;
inline bool BaseballServer_Client::has_m_ans_game_start() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_game_start() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BaseballServer_Client::clear_has_m_ans_game_start() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BaseballServer_Client::clear_m_ans_game_start() {
  if (m_ans_game_start_ != NULL) m_ans_game_start_->::s_ans_game_start::Clear();
  clear_has_m_ans_game_start();
}
inline const ::s_ans_game_start& BaseballServer_Client::m_ans_game_start() const {
  return m_ans_game_start_ != NULL ? *m_ans_game_start_ : *default_instance_->m_ans_game_start_;
}
inline ::s_ans_game_start* BaseballServer_Client::mutable_m_ans_game_start() {
  set_has_m_ans_game_start();
  if (m_ans_game_start_ == NULL) m_ans_game_start_ = new ::s_ans_game_start;
  return m_ans_game_start_;
}
inline ::s_ans_game_start* BaseballServer_Client::release_m_ans_game_start() {
  clear_has_m_ans_game_start();
  ::s_ans_game_start* temp = m_ans_game_start_;
  m_ans_game_start_ = NULL;
  return temp;
}

// optional .s_ans_game_round_start m_ans_game_round_start = 11;
inline bool BaseballServer_Client::has_m_ans_game_round_start() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_game_round_start() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BaseballServer_Client::clear_has_m_ans_game_round_start() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BaseballServer_Client::clear_m_ans_game_round_start() {
  if (m_ans_game_round_start_ != NULL) m_ans_game_round_start_->::s_ans_game_round_start::Clear();
  clear_has_m_ans_game_round_start();
}
inline const ::s_ans_game_round_start& BaseballServer_Client::m_ans_game_round_start() const {
  return m_ans_game_round_start_ != NULL ? *m_ans_game_round_start_ : *default_instance_->m_ans_game_round_start_;
}
inline ::s_ans_game_round_start* BaseballServer_Client::mutable_m_ans_game_round_start() {
  set_has_m_ans_game_round_start();
  if (m_ans_game_round_start_ == NULL) m_ans_game_round_start_ = new ::s_ans_game_round_start;
  return m_ans_game_round_start_;
}
inline ::s_ans_game_round_start* BaseballServer_Client::release_m_ans_game_round_start() {
  clear_has_m_ans_game_round_start();
  ::s_ans_game_round_start* temp = m_ans_game_round_start_;
  m_ans_game_round_start_ = NULL;
  return temp;
}

// optional .s_bs2x_match_ready m_bs2x_match_ready = 12;
inline bool BaseballServer_Client::has_m_bs2x_match_ready() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BaseballServer_Client::set_has_m_bs2x_match_ready() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BaseballServer_Client::clear_has_m_bs2x_match_ready() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BaseballServer_Client::clear_m_bs2x_match_ready() {
  if (m_bs2x_match_ready_ != NULL) m_bs2x_match_ready_->::s_bs2x_match_ready::Clear();
  clear_has_m_bs2x_match_ready();
}
inline const ::s_bs2x_match_ready& BaseballServer_Client::m_bs2x_match_ready() const {
  return m_bs2x_match_ready_ != NULL ? *m_bs2x_match_ready_ : *default_instance_->m_bs2x_match_ready_;
}
inline ::s_bs2x_match_ready* BaseballServer_Client::mutable_m_bs2x_match_ready() {
  set_has_m_bs2x_match_ready();
  if (m_bs2x_match_ready_ == NULL) m_bs2x_match_ready_ = new ::s_bs2x_match_ready;
  return m_bs2x_match_ready_;
}
inline ::s_bs2x_match_ready* BaseballServer_Client::release_m_bs2x_match_ready() {
  clear_has_m_bs2x_match_ready();
  ::s_bs2x_match_ready* temp = m_bs2x_match_ready_;
  m_bs2x_match_ready_ = NULL;
  return temp;
}

// optional .s_ans_pitcher_throw m_ans_pitcher_throw = 13;
inline bool BaseballServer_Client::has_m_ans_pitcher_throw() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_pitcher_throw() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BaseballServer_Client::clear_has_m_ans_pitcher_throw() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BaseballServer_Client::clear_m_ans_pitcher_throw() {
  if (m_ans_pitcher_throw_ != NULL) m_ans_pitcher_throw_->::s_ans_pitcher_throw::Clear();
  clear_has_m_ans_pitcher_throw();
}
inline const ::s_ans_pitcher_throw& BaseballServer_Client::m_ans_pitcher_throw() const {
  return m_ans_pitcher_throw_ != NULL ? *m_ans_pitcher_throw_ : *default_instance_->m_ans_pitcher_throw_;
}
inline ::s_ans_pitcher_throw* BaseballServer_Client::mutable_m_ans_pitcher_throw() {
  set_has_m_ans_pitcher_throw();
  if (m_ans_pitcher_throw_ == NULL) m_ans_pitcher_throw_ = new ::s_ans_pitcher_throw;
  return m_ans_pitcher_throw_;
}
inline ::s_ans_pitcher_throw* BaseballServer_Client::release_m_ans_pitcher_throw() {
  clear_has_m_ans_pitcher_throw();
  ::s_ans_pitcher_throw* temp = m_ans_pitcher_throw_;
  m_ans_pitcher_throw_ = NULL;
  return temp;
}

// optional .s_ans_better_hit m_ans_better_hit = 14;
inline bool BaseballServer_Client::has_m_ans_better_hit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_better_hit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BaseballServer_Client::clear_has_m_ans_better_hit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BaseballServer_Client::clear_m_ans_better_hit() {
  if (m_ans_better_hit_ != NULL) m_ans_better_hit_->::s_ans_better_hit::Clear();
  clear_has_m_ans_better_hit();
}
inline const ::s_ans_better_hit& BaseballServer_Client::m_ans_better_hit() const {
  return m_ans_better_hit_ != NULL ? *m_ans_better_hit_ : *default_instance_->m_ans_better_hit_;
}
inline ::s_ans_better_hit* BaseballServer_Client::mutable_m_ans_better_hit() {
  set_has_m_ans_better_hit();
  if (m_ans_better_hit_ == NULL) m_ans_better_hit_ = new ::s_ans_better_hit;
  return m_ans_better_hit_;
}
inline ::s_ans_better_hit* BaseballServer_Client::release_m_ans_better_hit() {
  clear_has_m_ans_better_hit();
  ::s_ans_better_hit* temp = m_ans_better_hit_;
  m_ans_better_hit_ = NULL;
  return temp;
}

// optional .s_ans_result_better_hit m_ans_result_better_hit = 15;
inline bool BaseballServer_Client::has_m_ans_result_better_hit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_result_better_hit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BaseballServer_Client::clear_has_m_ans_result_better_hit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BaseballServer_Client::clear_m_ans_result_better_hit() {
  if (m_ans_result_better_hit_ != NULL) m_ans_result_better_hit_->::s_ans_result_better_hit::Clear();
  clear_has_m_ans_result_better_hit();
}
inline const ::s_ans_result_better_hit& BaseballServer_Client::m_ans_result_better_hit() const {
  return m_ans_result_better_hit_ != NULL ? *m_ans_result_better_hit_ : *default_instance_->m_ans_result_better_hit_;
}
inline ::s_ans_result_better_hit* BaseballServer_Client::mutable_m_ans_result_better_hit() {
  set_has_m_ans_result_better_hit();
  if (m_ans_result_better_hit_ == NULL) m_ans_result_better_hit_ = new ::s_ans_result_better_hit;
  return m_ans_result_better_hit_;
}
inline ::s_ans_result_better_hit* BaseballServer_Client::release_m_ans_result_better_hit() {
  clear_has_m_ans_result_better_hit();
  ::s_ans_result_better_hit* temp = m_ans_result_better_hit_;
  m_ans_result_better_hit_ = NULL;
  return temp;
}

// optional .s_bs2x_batter_ready m_bs2x_batter_ready = 16;
inline bool BaseballServer_Client::has_m_bs2x_batter_ready() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BaseballServer_Client::set_has_m_bs2x_batter_ready() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BaseballServer_Client::clear_has_m_bs2x_batter_ready() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BaseballServer_Client::clear_m_bs2x_batter_ready() {
  if (m_bs2x_batter_ready_ != NULL) m_bs2x_batter_ready_->::s_bs2x_batter_ready::Clear();
  clear_has_m_bs2x_batter_ready();
}
inline const ::s_bs2x_batter_ready& BaseballServer_Client::m_bs2x_batter_ready() const {
  return m_bs2x_batter_ready_ != NULL ? *m_bs2x_batter_ready_ : *default_instance_->m_bs2x_batter_ready_;
}
inline ::s_bs2x_batter_ready* BaseballServer_Client::mutable_m_bs2x_batter_ready() {
  set_has_m_bs2x_batter_ready();
  if (m_bs2x_batter_ready_ == NULL) m_bs2x_batter_ready_ = new ::s_bs2x_batter_ready;
  return m_bs2x_batter_ready_;
}
inline ::s_bs2x_batter_ready* BaseballServer_Client::release_m_bs2x_batter_ready() {
  clear_has_m_bs2x_batter_ready();
  ::s_bs2x_batter_ready* temp = m_bs2x_batter_ready_;
  m_bs2x_batter_ready_ = NULL;
  return temp;
}

// optional .s_ans_change_attack_team m_ans_change_attack_team = 17;
inline bool BaseballServer_Client::has_m_ans_change_attack_team() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_change_attack_team() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BaseballServer_Client::clear_has_m_ans_change_attack_team() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BaseballServer_Client::clear_m_ans_change_attack_team() {
  if (m_ans_change_attack_team_ != NULL) m_ans_change_attack_team_->::s_ans_change_attack_team::Clear();
  clear_has_m_ans_change_attack_team();
}
inline const ::s_ans_change_attack_team& BaseballServer_Client::m_ans_change_attack_team() const {
  return m_ans_change_attack_team_ != NULL ? *m_ans_change_attack_team_ : *default_instance_->m_ans_change_attack_team_;
}
inline ::s_ans_change_attack_team* BaseballServer_Client::mutable_m_ans_change_attack_team() {
  set_has_m_ans_change_attack_team();
  if (m_ans_change_attack_team_ == NULL) m_ans_change_attack_team_ = new ::s_ans_change_attack_team;
  return m_ans_change_attack_team_;
}
inline ::s_ans_change_attack_team* BaseballServer_Client::release_m_ans_change_attack_team() {
  clear_has_m_ans_change_attack_team();
  ::s_ans_change_attack_team* temp = m_ans_change_attack_team_;
  m_ans_change_attack_team_ = NULL;
  return temp;
}

// optional .s_ans_game_end m_ans_game_end = 18;
inline bool BaseballServer_Client::has_m_ans_game_end() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_game_end() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BaseballServer_Client::clear_has_m_ans_game_end() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BaseballServer_Client::clear_m_ans_game_end() {
  if (m_ans_game_end_ != NULL) m_ans_game_end_->::s_ans_game_end::Clear();
  clear_has_m_ans_game_end();
}
inline const ::s_ans_game_end& BaseballServer_Client::m_ans_game_end() const {
  return m_ans_game_end_ != NULL ? *m_ans_game_end_ : *default_instance_->m_ans_game_end_;
}
inline ::s_ans_game_end* BaseballServer_Client::mutable_m_ans_game_end() {
  set_has_m_ans_game_end();
  if (m_ans_game_end_ == NULL) m_ans_game_end_ = new ::s_ans_game_end;
  return m_ans_game_end_;
}
inline ::s_ans_game_end* BaseballServer_Client::release_m_ans_game_end() {
  clear_has_m_ans_game_end();
  ::s_ans_game_end* temp = m_ans_game_end_;
  m_ans_game_end_ = NULL;
  return temp;
}

// optional .s_bs2x_game_end_other_user_info m_bs2x_game_end_other_user_info = 19;
inline bool BaseballServer_Client::has_m_bs2x_game_end_other_user_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BaseballServer_Client::set_has_m_bs2x_game_end_other_user_info() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BaseballServer_Client::clear_has_m_bs2x_game_end_other_user_info() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BaseballServer_Client::clear_m_bs2x_game_end_other_user_info() {
  if (m_bs2x_game_end_other_user_info_ != NULL) m_bs2x_game_end_other_user_info_->::s_bs2x_game_end_other_user_info::Clear();
  clear_has_m_bs2x_game_end_other_user_info();
}
inline const ::s_bs2x_game_end_other_user_info& BaseballServer_Client::m_bs2x_game_end_other_user_info() const {
  return m_bs2x_game_end_other_user_info_ != NULL ? *m_bs2x_game_end_other_user_info_ : *default_instance_->m_bs2x_game_end_other_user_info_;
}
inline ::s_bs2x_game_end_other_user_info* BaseballServer_Client::mutable_m_bs2x_game_end_other_user_info() {
  set_has_m_bs2x_game_end_other_user_info();
  if (m_bs2x_game_end_other_user_info_ == NULL) m_bs2x_game_end_other_user_info_ = new ::s_bs2x_game_end_other_user_info;
  return m_bs2x_game_end_other_user_info_;
}
inline ::s_bs2x_game_end_other_user_info* BaseballServer_Client::release_m_bs2x_game_end_other_user_info() {
  clear_has_m_bs2x_game_end_other_user_info();
  ::s_bs2x_game_end_other_user_info* temp = m_bs2x_game_end_other_user_info_;
  m_bs2x_game_end_other_user_info_ = NULL;
  return temp;
}

// optional .s_ans_user_disconnect m_ans_user_disconnect = 20;
inline bool BaseballServer_Client::has_m_ans_user_disconnect() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_user_disconnect() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BaseballServer_Client::clear_has_m_ans_user_disconnect() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BaseballServer_Client::clear_m_ans_user_disconnect() {
  if (m_ans_user_disconnect_ != NULL) m_ans_user_disconnect_->::s_ans_user_disconnect::Clear();
  clear_has_m_ans_user_disconnect();
}
inline const ::s_ans_user_disconnect& BaseballServer_Client::m_ans_user_disconnect() const {
  return m_ans_user_disconnect_ != NULL ? *m_ans_user_disconnect_ : *default_instance_->m_ans_user_disconnect_;
}
inline ::s_ans_user_disconnect* BaseballServer_Client::mutable_m_ans_user_disconnect() {
  set_has_m_ans_user_disconnect();
  if (m_ans_user_disconnect_ == NULL) m_ans_user_disconnect_ = new ::s_ans_user_disconnect;
  return m_ans_user_disconnect_;
}
inline ::s_ans_user_disconnect* BaseballServer_Client::release_m_ans_user_disconnect() {
  clear_has_m_ans_user_disconnect();
  ::s_ans_user_disconnect* temp = m_ans_user_disconnect_;
  m_ans_user_disconnect_ = NULL;
  return temp;
}

// optional .s_ans_rematch m_ans_rematch = 21;
inline bool BaseballServer_Client::has_m_ans_rematch() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_rematch() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BaseballServer_Client::clear_has_m_ans_rematch() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BaseballServer_Client::clear_m_ans_rematch() {
  if (m_ans_rematch_ != NULL) m_ans_rematch_->::s_ans_rematch::Clear();
  clear_has_m_ans_rematch();
}
inline const ::s_ans_rematch& BaseballServer_Client::m_ans_rematch() const {
  return m_ans_rematch_ != NULL ? *m_ans_rematch_ : *default_instance_->m_ans_rematch_;
}
inline ::s_ans_rematch* BaseballServer_Client::mutable_m_ans_rematch() {
  set_has_m_ans_rematch();
  if (m_ans_rematch_ == NULL) m_ans_rematch_ = new ::s_ans_rematch;
  return m_ans_rematch_;
}
inline ::s_ans_rematch* BaseballServer_Client::release_m_ans_rematch() {
  clear_has_m_ans_rematch();
  ::s_ans_rematch* temp = m_ans_rematch_;
  m_ans_rematch_ = NULL;
  return temp;
}

// optional .s_ans_answer_restart_game m_ans_answer_restart_game = 22;
inline bool BaseballServer_Client::has_m_ans_answer_restart_game() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BaseballServer_Client::set_has_m_ans_answer_restart_game() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BaseballServer_Client::clear_has_m_ans_answer_restart_game() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BaseballServer_Client::clear_m_ans_answer_restart_game() {
  if (m_ans_answer_restart_game_ != NULL) m_ans_answer_restart_game_->::s_ans_answer_restart_game::Clear();
  clear_has_m_ans_answer_restart_game();
}
inline const ::s_ans_answer_restart_game& BaseballServer_Client::m_ans_answer_restart_game() const {
  return m_ans_answer_restart_game_ != NULL ? *m_ans_answer_restart_game_ : *default_instance_->m_ans_answer_restart_game_;
}
inline ::s_ans_answer_restart_game* BaseballServer_Client::mutable_m_ans_answer_restart_game() {
  set_has_m_ans_answer_restart_game();
  if (m_ans_answer_restart_game_ == NULL) m_ans_answer_restart_game_ = new ::s_ans_answer_restart_game;
  return m_ans_answer_restart_game_;
}
inline ::s_ans_answer_restart_game* BaseballServer_Client::release_m_ans_answer_restart_game() {
  clear_has_m_ans_answer_restart_game();
  ::s_ans_answer_restart_game* temp = m_ans_answer_restart_game_;
  m_ans_answer_restart_game_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UserGateServer_BaseballServer

// required .UserGateServer_BaseballServer.Type type = 1;
inline bool UserGateServer_BaseballServer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGateServer_BaseballServer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGateServer_BaseballServer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGateServer_BaseballServer::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::type() const {
  return static_cast< ::UserGateServer_BaseballServer_Type >(type_);
}
inline void UserGateServer_BaseballServer::set_type(::UserGateServer_BaseballServer_Type value) {
  GOOGLE_DCHECK(::UserGateServer_BaseballServer_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .s_ug2bs_ans_set_cvar m_ug2bs_ans_set_cvar = 2;
inline bool UserGateServer_BaseballServer::has_m_ug2bs_ans_set_cvar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserGateServer_BaseballServer::set_has_m_ug2bs_ans_set_cvar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserGateServer_BaseballServer::clear_has_m_ug2bs_ans_set_cvar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserGateServer_BaseballServer::clear_m_ug2bs_ans_set_cvar() {
  if (m_ug2bs_ans_set_cvar_ != NULL) m_ug2bs_ans_set_cvar_->::s_ug2bs_ans_set_cvar::Clear();
  clear_has_m_ug2bs_ans_set_cvar();
}
inline const ::s_ug2bs_ans_set_cvar& UserGateServer_BaseballServer::m_ug2bs_ans_set_cvar() const {
  return m_ug2bs_ans_set_cvar_ != NULL ? *m_ug2bs_ans_set_cvar_ : *default_instance_->m_ug2bs_ans_set_cvar_;
}
inline ::s_ug2bs_ans_set_cvar* UserGateServer_BaseballServer::mutable_m_ug2bs_ans_set_cvar() {
  set_has_m_ug2bs_ans_set_cvar();
  if (m_ug2bs_ans_set_cvar_ == NULL) m_ug2bs_ans_set_cvar_ = new ::s_ug2bs_ans_set_cvar;
  return m_ug2bs_ans_set_cvar_;
}
inline ::s_ug2bs_ans_set_cvar* UserGateServer_BaseballServer::release_m_ug2bs_ans_set_cvar() {
  clear_has_m_ug2bs_ans_set_cvar();
  ::s_ug2bs_ans_set_cvar* temp = m_ug2bs_ans_set_cvar_;
  m_ug2bs_ans_set_cvar_ = NULL;
  return temp;
}

// optional .s_ug2bs_game_end m_ug2bs_game_end = 3;
inline bool UserGateServer_BaseballServer::has_m_ug2bs_game_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserGateServer_BaseballServer::set_has_m_ug2bs_game_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserGateServer_BaseballServer::clear_has_m_ug2bs_game_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserGateServer_BaseballServer::clear_m_ug2bs_game_end() {
  if (m_ug2bs_game_end_ != NULL) m_ug2bs_game_end_->::s_ug2bs_game_end::Clear();
  clear_has_m_ug2bs_game_end();
}
inline const ::s_ug2bs_game_end& UserGateServer_BaseballServer::m_ug2bs_game_end() const {
  return m_ug2bs_game_end_ != NULL ? *m_ug2bs_game_end_ : *default_instance_->m_ug2bs_game_end_;
}
inline ::s_ug2bs_game_end* UserGateServer_BaseballServer::mutable_m_ug2bs_game_end() {
  set_has_m_ug2bs_game_end();
  if (m_ug2bs_game_end_ == NULL) m_ug2bs_game_end_ = new ::s_ug2bs_game_end;
  return m_ug2bs_game_end_;
}
inline ::s_ug2bs_game_end* UserGateServer_BaseballServer::release_m_ug2bs_game_end() {
  clear_has_m_ug2bs_game_end();
  ::s_ug2bs_game_end* temp = m_ug2bs_game_end_;
  m_ug2bs_game_end_ = NULL;
  return temp;
}

// optional .s_ug2bs_echo m_ug2bs_echo = 4;
inline bool UserGateServer_BaseballServer::has_m_ug2bs_echo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserGateServer_BaseballServer::set_has_m_ug2bs_echo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserGateServer_BaseballServer::clear_has_m_ug2bs_echo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserGateServer_BaseballServer::clear_m_ug2bs_echo() {
  if (m_ug2bs_echo_ != NULL) m_ug2bs_echo_->::s_ug2bs_echo::Clear();
  clear_has_m_ug2bs_echo();
}
inline const ::s_ug2bs_echo& UserGateServer_BaseballServer::m_ug2bs_echo() const {
  return m_ug2bs_echo_ != NULL ? *m_ug2bs_echo_ : *default_instance_->m_ug2bs_echo_;
}
inline ::s_ug2bs_echo* UserGateServer_BaseballServer::mutable_m_ug2bs_echo() {
  set_has_m_ug2bs_echo();
  if (m_ug2bs_echo_ == NULL) m_ug2bs_echo_ = new ::s_ug2bs_echo;
  return m_ug2bs_echo_;
}
inline ::s_ug2bs_echo* UserGateServer_BaseballServer::release_m_ug2bs_echo() {
  clear_has_m_ug2bs_echo();
  ::s_ug2bs_echo* temp = m_ug2bs_echo_;
  m_ug2bs_echo_ = NULL;
  return temp;
}

// optional .s_ug2bs_error m_ug2bs_error = 5;
inline bool UserGateServer_BaseballServer::has_m_ug2bs_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserGateServer_BaseballServer::set_has_m_ug2bs_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserGateServer_BaseballServer::clear_has_m_ug2bs_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserGateServer_BaseballServer::clear_m_ug2bs_error() {
  if (m_ug2bs_error_ != NULL) m_ug2bs_error_->::s_ug2bs_error::Clear();
  clear_has_m_ug2bs_error();
}
inline const ::s_ug2bs_error& UserGateServer_BaseballServer::m_ug2bs_error() const {
  return m_ug2bs_error_ != NULL ? *m_ug2bs_error_ : *default_instance_->m_ug2bs_error_;
}
inline ::s_ug2bs_error* UserGateServer_BaseballServer::mutable_m_ug2bs_error() {
  set_has_m_ug2bs_error();
  if (m_ug2bs_error_ == NULL) m_ug2bs_error_ = new ::s_ug2bs_error;
  return m_ug2bs_error_;
}
inline ::s_ug2bs_error* UserGateServer_BaseballServer::release_m_ug2bs_error() {
  clear_has_m_ug2bs_error();
  ::s_ug2bs_error* temp = m_ug2bs_error_;
  m_ug2bs_error_ = NULL;
  return temp;
}

// optional .s_ug2bs_add_discon_tot m_ug2bs_add_discon_tot = 6;
inline bool UserGateServer_BaseballServer::has_m_ug2bs_add_discon_tot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserGateServer_BaseballServer::set_has_m_ug2bs_add_discon_tot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserGateServer_BaseballServer::clear_has_m_ug2bs_add_discon_tot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserGateServer_BaseballServer::clear_m_ug2bs_add_discon_tot() {
  if (m_ug2bs_add_discon_tot_ != NULL) m_ug2bs_add_discon_tot_->::s_ug2bs_add_discon_tot::Clear();
  clear_has_m_ug2bs_add_discon_tot();
}
inline const ::s_ug2bs_add_discon_tot& UserGateServer_BaseballServer::m_ug2bs_add_discon_tot() const {
  return m_ug2bs_add_discon_tot_ != NULL ? *m_ug2bs_add_discon_tot_ : *default_instance_->m_ug2bs_add_discon_tot_;
}
inline ::s_ug2bs_add_discon_tot* UserGateServer_BaseballServer::mutable_m_ug2bs_add_discon_tot() {
  set_has_m_ug2bs_add_discon_tot();
  if (m_ug2bs_add_discon_tot_ == NULL) m_ug2bs_add_discon_tot_ = new ::s_ug2bs_add_discon_tot;
  return m_ug2bs_add_discon_tot_;
}
inline ::s_ug2bs_add_discon_tot* UserGateServer_BaseballServer::release_m_ug2bs_add_discon_tot() {
  clear_has_m_ug2bs_add_discon_tot();
  ::s_ug2bs_add_discon_tot* temp = m_ug2bs_add_discon_tot_;
  m_ug2bs_add_discon_tot_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Client_BaseballServer

// required .Client_BaseballServer.Type type = 1;
inline bool Client_BaseballServer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Client_BaseballServer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Client_BaseballServer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Client_BaseballServer::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Client_BaseballServer_Type Client_BaseballServer::type() const {
  return static_cast< ::Client_BaseballServer_Type >(type_);
}
inline void Client_BaseballServer::set_type(::Client_BaseballServer_Type value) {
  GOOGLE_DCHECK(::Client_BaseballServer_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .s_req_room_state m_req_room_state = 2;
inline bool Client_BaseballServer::has_m_req_room_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_room_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Client_BaseballServer::clear_has_m_req_room_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Client_BaseballServer::clear_m_req_room_state() {
  if (m_req_room_state_ != NULL) m_req_room_state_->::s_req_room_state::Clear();
  clear_has_m_req_room_state();
}
inline const ::s_req_room_state& Client_BaseballServer::m_req_room_state() const {
  return m_req_room_state_ != NULL ? *m_req_room_state_ : *default_instance_->m_req_room_state_;
}
inline ::s_req_room_state* Client_BaseballServer::mutable_m_req_room_state() {
  set_has_m_req_room_state();
  if (m_req_room_state_ == NULL) m_req_room_state_ = new ::s_req_room_state;
  return m_req_room_state_;
}
inline ::s_req_room_state* Client_BaseballServer::release_m_req_room_state() {
  clear_has_m_req_room_state();
  ::s_req_room_state* temp = m_req_room_state_;
  m_req_room_state_ = NULL;
  return temp;
}

// optional .s_x2bs_echo m_x2bs_echo = 3;
inline bool Client_BaseballServer::has_m_x2bs_echo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Client_BaseballServer::set_has_m_x2bs_echo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Client_BaseballServer::clear_has_m_x2bs_echo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Client_BaseballServer::clear_m_x2bs_echo() {
  if (m_x2bs_echo_ != NULL) m_x2bs_echo_->::s_x2bs_echo::Clear();
  clear_has_m_x2bs_echo();
}
inline const ::s_x2bs_echo& Client_BaseballServer::m_x2bs_echo() const {
  return m_x2bs_echo_ != NULL ? *m_x2bs_echo_ : *default_instance_->m_x2bs_echo_;
}
inline ::s_x2bs_echo* Client_BaseballServer::mutable_m_x2bs_echo() {
  set_has_m_x2bs_echo();
  if (m_x2bs_echo_ == NULL) m_x2bs_echo_ = new ::s_x2bs_echo;
  return m_x2bs_echo_;
}
inline ::s_x2bs_echo* Client_BaseballServer::release_m_x2bs_echo() {
  clear_has_m_x2bs_echo();
  ::s_x2bs_echo* temp = m_x2bs_echo_;
  m_x2bs_echo_ = NULL;
  return temp;
}

// optional .s_req_chat m_req_chat = 4;
inline bool Client_BaseballServer::has_m_req_chat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_chat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Client_BaseballServer::clear_has_m_req_chat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Client_BaseballServer::clear_m_req_chat() {
  if (m_req_chat_ != NULL) m_req_chat_->::s_req_chat::Clear();
  clear_has_m_req_chat();
}
inline const ::s_req_chat& Client_BaseballServer::m_req_chat() const {
  return m_req_chat_ != NULL ? *m_req_chat_ : *default_instance_->m_req_chat_;
}
inline ::s_req_chat* Client_BaseballServer::mutable_m_req_chat() {
  set_has_m_req_chat();
  if (m_req_chat_ == NULL) m_req_chat_ = new ::s_req_chat;
  return m_req_chat_;
}
inline ::s_req_chat* Client_BaseballServer::release_m_req_chat() {
  clear_has_m_req_chat();
  ::s_req_chat* temp = m_req_chat_;
  m_req_chat_ = NULL;
  return temp;
}

// optional .s_req_timer_start m_req_timer_start = 5;
inline bool Client_BaseballServer::has_m_req_timer_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_timer_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Client_BaseballServer::clear_has_m_req_timer_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Client_BaseballServer::clear_m_req_timer_start() {
  if (m_req_timer_start_ != NULL) m_req_timer_start_->::s_req_timer_start::Clear();
  clear_has_m_req_timer_start();
}
inline const ::s_req_timer_start& Client_BaseballServer::m_req_timer_start() const {
  return m_req_timer_start_ != NULL ? *m_req_timer_start_ : *default_instance_->m_req_timer_start_;
}
inline ::s_req_timer_start* Client_BaseballServer::mutable_m_req_timer_start() {
  set_has_m_req_timer_start();
  if (m_req_timer_start_ == NULL) m_req_timer_start_ = new ::s_req_timer_start;
  return m_req_timer_start_;
}
inline ::s_req_timer_start* Client_BaseballServer::release_m_req_timer_start() {
  clear_has_m_req_timer_start();
  ::s_req_timer_start* temp = m_req_timer_start_;
  m_req_timer_start_ = NULL;
  return temp;
}

// optional .s_req_do_disconnect m_req_do_disconnect = 6;
inline bool Client_BaseballServer::has_m_req_do_disconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_do_disconnect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Client_BaseballServer::clear_has_m_req_do_disconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Client_BaseballServer::clear_m_req_do_disconnect() {
  if (m_req_do_disconnect_ != NULL) m_req_do_disconnect_->::s_req_do_disconnect::Clear();
  clear_has_m_req_do_disconnect();
}
inline const ::s_req_do_disconnect& Client_BaseballServer::m_req_do_disconnect() const {
  return m_req_do_disconnect_ != NULL ? *m_req_do_disconnect_ : *default_instance_->m_req_do_disconnect_;
}
inline ::s_req_do_disconnect* Client_BaseballServer::mutable_m_req_do_disconnect() {
  set_has_m_req_do_disconnect();
  if (m_req_do_disconnect_ == NULL) m_req_do_disconnect_ = new ::s_req_do_disconnect;
  return m_req_do_disconnect_;
}
inline ::s_req_do_disconnect* Client_BaseballServer::release_m_req_do_disconnect() {
  clear_has_m_req_do_disconnect();
  ::s_req_do_disconnect* temp = m_req_do_disconnect_;
  m_req_do_disconnect_ = NULL;
  return temp;
}

// optional .s_x2bs_echo2 m_x2bs_echo2 = 7;
inline bool Client_BaseballServer::has_m_x2bs_echo2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Client_BaseballServer::set_has_m_x2bs_echo2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Client_BaseballServer::clear_has_m_x2bs_echo2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Client_BaseballServer::clear_m_x2bs_echo2() {
  if (m_x2bs_echo2_ != NULL) m_x2bs_echo2_->::s_x2bs_echo2::Clear();
  clear_has_m_x2bs_echo2();
}
inline const ::s_x2bs_echo2& Client_BaseballServer::m_x2bs_echo2() const {
  return m_x2bs_echo2_ != NULL ? *m_x2bs_echo2_ : *default_instance_->m_x2bs_echo2_;
}
inline ::s_x2bs_echo2* Client_BaseballServer::mutable_m_x2bs_echo2() {
  set_has_m_x2bs_echo2();
  if (m_x2bs_echo2_ == NULL) m_x2bs_echo2_ = new ::s_x2bs_echo2;
  return m_x2bs_echo2_;
}
inline ::s_x2bs_echo2* Client_BaseballServer::release_m_x2bs_echo2() {
  clear_has_m_x2bs_echo2();
  ::s_x2bs_echo2* temp = m_x2bs_echo2_;
  m_x2bs_echo2_ = NULL;
  return temp;
}

// optional .s_req_get_cvar m_req_get_cvar = 8;
inline bool Client_BaseballServer::has_m_req_get_cvar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_get_cvar() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Client_BaseballServer::clear_has_m_req_get_cvar() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Client_BaseballServer::clear_m_req_get_cvar() {
  if (m_req_get_cvar_ != NULL) m_req_get_cvar_->::s_req_get_cvar::Clear();
  clear_has_m_req_get_cvar();
}
inline const ::s_req_get_cvar& Client_BaseballServer::m_req_get_cvar() const {
  return m_req_get_cvar_ != NULL ? *m_req_get_cvar_ : *default_instance_->m_req_get_cvar_;
}
inline ::s_req_get_cvar* Client_BaseballServer::mutable_m_req_get_cvar() {
  set_has_m_req_get_cvar();
  if (m_req_get_cvar_ == NULL) m_req_get_cvar_ = new ::s_req_get_cvar;
  return m_req_get_cvar_;
}
inline ::s_req_get_cvar* Client_BaseballServer::release_m_req_get_cvar() {
  clear_has_m_req_get_cvar();
  ::s_req_get_cvar* temp = m_req_get_cvar_;
  m_req_get_cvar_ = NULL;
  return temp;
}

// optional .s_req_set_cvar m_req_set_cvar = 9;
inline bool Client_BaseballServer::has_m_req_set_cvar() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_set_cvar() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Client_BaseballServer::clear_has_m_req_set_cvar() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Client_BaseballServer::clear_m_req_set_cvar() {
  if (m_req_set_cvar_ != NULL) m_req_set_cvar_->::s_req_set_cvar::Clear();
  clear_has_m_req_set_cvar();
}
inline const ::s_req_set_cvar& Client_BaseballServer::m_req_set_cvar() const {
  return m_req_set_cvar_ != NULL ? *m_req_set_cvar_ : *default_instance_->m_req_set_cvar_;
}
inline ::s_req_set_cvar* Client_BaseballServer::mutable_m_req_set_cvar() {
  set_has_m_req_set_cvar();
  if (m_req_set_cvar_ == NULL) m_req_set_cvar_ = new ::s_req_set_cvar;
  return m_req_set_cvar_;
}
inline ::s_req_set_cvar* Client_BaseballServer::release_m_req_set_cvar() {
  clear_has_m_req_set_cvar();
  ::s_req_set_cvar* temp = m_req_set_cvar_;
  m_req_set_cvar_ = NULL;
  return temp;
}

// optional .s_x2bs_auto_match_ready2 m_x2bs_auto_match_ready2 = 10;
inline bool Client_BaseballServer::has_m_x2bs_auto_match_ready2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Client_BaseballServer::set_has_m_x2bs_auto_match_ready2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Client_BaseballServer::clear_has_m_x2bs_auto_match_ready2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Client_BaseballServer::clear_m_x2bs_auto_match_ready2() {
  if (m_x2bs_auto_match_ready2_ != NULL) m_x2bs_auto_match_ready2_->::s_x2bs_auto_match_ready2::Clear();
  clear_has_m_x2bs_auto_match_ready2();
}
inline const ::s_x2bs_auto_match_ready2& Client_BaseballServer::m_x2bs_auto_match_ready2() const {
  return m_x2bs_auto_match_ready2_ != NULL ? *m_x2bs_auto_match_ready2_ : *default_instance_->m_x2bs_auto_match_ready2_;
}
inline ::s_x2bs_auto_match_ready2* Client_BaseballServer::mutable_m_x2bs_auto_match_ready2() {
  set_has_m_x2bs_auto_match_ready2();
  if (m_x2bs_auto_match_ready2_ == NULL) m_x2bs_auto_match_ready2_ = new ::s_x2bs_auto_match_ready2;
  return m_x2bs_auto_match_ready2_;
}
inline ::s_x2bs_auto_match_ready2* Client_BaseballServer::release_m_x2bs_auto_match_ready2() {
  clear_has_m_x2bs_auto_match_ready2();
  ::s_x2bs_auto_match_ready2* temp = m_x2bs_auto_match_ready2_;
  m_x2bs_auto_match_ready2_ = NULL;
  return temp;
}

// optional .s_x2bs_match_ready m_x2bs_match_ready = 11;
inline bool Client_BaseballServer::has_m_x2bs_match_ready() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Client_BaseballServer::set_has_m_x2bs_match_ready() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Client_BaseballServer::clear_has_m_x2bs_match_ready() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Client_BaseballServer::clear_m_x2bs_match_ready() {
  if (m_x2bs_match_ready_ != NULL) m_x2bs_match_ready_->::s_x2bs_match_ready::Clear();
  clear_has_m_x2bs_match_ready();
}
inline const ::s_x2bs_match_ready& Client_BaseballServer::m_x2bs_match_ready() const {
  return m_x2bs_match_ready_ != NULL ? *m_x2bs_match_ready_ : *default_instance_->m_x2bs_match_ready_;
}
inline ::s_x2bs_match_ready* Client_BaseballServer::mutable_m_x2bs_match_ready() {
  set_has_m_x2bs_match_ready();
  if (m_x2bs_match_ready_ == NULL) m_x2bs_match_ready_ = new ::s_x2bs_match_ready;
  return m_x2bs_match_ready_;
}
inline ::s_x2bs_match_ready* Client_BaseballServer::release_m_x2bs_match_ready() {
  clear_has_m_x2bs_match_ready();
  ::s_x2bs_match_ready* temp = m_x2bs_match_ready_;
  m_x2bs_match_ready_ = NULL;
  return temp;
}

// optional .s_req_pitcher_throw m_req_pitcher_throw = 12;
inline bool Client_BaseballServer::has_m_req_pitcher_throw() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_pitcher_throw() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Client_BaseballServer::clear_has_m_req_pitcher_throw() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Client_BaseballServer::clear_m_req_pitcher_throw() {
  if (m_req_pitcher_throw_ != NULL) m_req_pitcher_throw_->::s_req_pitcher_throw::Clear();
  clear_has_m_req_pitcher_throw();
}
inline const ::s_req_pitcher_throw& Client_BaseballServer::m_req_pitcher_throw() const {
  return m_req_pitcher_throw_ != NULL ? *m_req_pitcher_throw_ : *default_instance_->m_req_pitcher_throw_;
}
inline ::s_req_pitcher_throw* Client_BaseballServer::mutable_m_req_pitcher_throw() {
  set_has_m_req_pitcher_throw();
  if (m_req_pitcher_throw_ == NULL) m_req_pitcher_throw_ = new ::s_req_pitcher_throw;
  return m_req_pitcher_throw_;
}
inline ::s_req_pitcher_throw* Client_BaseballServer::release_m_req_pitcher_throw() {
  clear_has_m_req_pitcher_throw();
  ::s_req_pitcher_throw* temp = m_req_pitcher_throw_;
  m_req_pitcher_throw_ = NULL;
  return temp;
}

// optional .s_req_better_hit m_req_better_hit = 13;
inline bool Client_BaseballServer::has_m_req_better_hit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_better_hit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Client_BaseballServer::clear_has_m_req_better_hit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Client_BaseballServer::clear_m_req_better_hit() {
  if (m_req_better_hit_ != NULL) m_req_better_hit_->::s_req_better_hit::Clear();
  clear_has_m_req_better_hit();
}
inline const ::s_req_better_hit& Client_BaseballServer::m_req_better_hit() const {
  return m_req_better_hit_ != NULL ? *m_req_better_hit_ : *default_instance_->m_req_better_hit_;
}
inline ::s_req_better_hit* Client_BaseballServer::mutable_m_req_better_hit() {
  set_has_m_req_better_hit();
  if (m_req_better_hit_ == NULL) m_req_better_hit_ = new ::s_req_better_hit;
  return m_req_better_hit_;
}
inline ::s_req_better_hit* Client_BaseballServer::release_m_req_better_hit() {
  clear_has_m_req_better_hit();
  ::s_req_better_hit* temp = m_req_better_hit_;
  m_req_better_hit_ = NULL;
  return temp;
}

// optional .s_req_result_better_hit m_req_result_better_hit = 14;
inline bool Client_BaseballServer::has_m_req_result_better_hit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_result_better_hit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Client_BaseballServer::clear_has_m_req_result_better_hit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Client_BaseballServer::clear_m_req_result_better_hit() {
  if (m_req_result_better_hit_ != NULL) m_req_result_better_hit_->::s_req_result_better_hit::Clear();
  clear_has_m_req_result_better_hit();
}
inline const ::s_req_result_better_hit& Client_BaseballServer::m_req_result_better_hit() const {
  return m_req_result_better_hit_ != NULL ? *m_req_result_better_hit_ : *default_instance_->m_req_result_better_hit_;
}
inline ::s_req_result_better_hit* Client_BaseballServer::mutable_m_req_result_better_hit() {
  set_has_m_req_result_better_hit();
  if (m_req_result_better_hit_ == NULL) m_req_result_better_hit_ = new ::s_req_result_better_hit;
  return m_req_result_better_hit_;
}
inline ::s_req_result_better_hit* Client_BaseballServer::release_m_req_result_better_hit() {
  clear_has_m_req_result_better_hit();
  ::s_req_result_better_hit* temp = m_req_result_better_hit_;
  m_req_result_better_hit_ = NULL;
  return temp;
}

// optional .s_x2bs_batter_ready m_x2bs_batter_ready = 15;
inline bool Client_BaseballServer::has_m_x2bs_batter_ready() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Client_BaseballServer::set_has_m_x2bs_batter_ready() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Client_BaseballServer::clear_has_m_x2bs_batter_ready() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Client_BaseballServer::clear_m_x2bs_batter_ready() {
  if (m_x2bs_batter_ready_ != NULL) m_x2bs_batter_ready_->::s_x2bs_batter_ready::Clear();
  clear_has_m_x2bs_batter_ready();
}
inline const ::s_x2bs_batter_ready& Client_BaseballServer::m_x2bs_batter_ready() const {
  return m_x2bs_batter_ready_ != NULL ? *m_x2bs_batter_ready_ : *default_instance_->m_x2bs_batter_ready_;
}
inline ::s_x2bs_batter_ready* Client_BaseballServer::mutable_m_x2bs_batter_ready() {
  set_has_m_x2bs_batter_ready();
  if (m_x2bs_batter_ready_ == NULL) m_x2bs_batter_ready_ = new ::s_x2bs_batter_ready;
  return m_x2bs_batter_ready_;
}
inline ::s_x2bs_batter_ready* Client_BaseballServer::release_m_x2bs_batter_ready() {
  clear_has_m_x2bs_batter_ready();
  ::s_x2bs_batter_ready* temp = m_x2bs_batter_ready_;
  m_x2bs_batter_ready_ = NULL;
  return temp;
}

// optional .s_req_rematch m_req_rematch = 16;
inline bool Client_BaseballServer::has_m_req_rematch() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_rematch() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Client_BaseballServer::clear_has_m_req_rematch() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Client_BaseballServer::clear_m_req_rematch() {
  if (m_req_rematch_ != NULL) m_req_rematch_->::s_req_rematch::Clear();
  clear_has_m_req_rematch();
}
inline const ::s_req_rematch& Client_BaseballServer::m_req_rematch() const {
  return m_req_rematch_ != NULL ? *m_req_rematch_ : *default_instance_->m_req_rematch_;
}
inline ::s_req_rematch* Client_BaseballServer::mutable_m_req_rematch() {
  set_has_m_req_rematch();
  if (m_req_rematch_ == NULL) m_req_rematch_ = new ::s_req_rematch;
  return m_req_rematch_;
}
inline ::s_req_rematch* Client_BaseballServer::release_m_req_rematch() {
  clear_has_m_req_rematch();
  ::s_req_rematch* temp = m_req_rematch_;
  m_req_rematch_ = NULL;
  return temp;
}

// optional .s_req_answer_restart_game m_req_answer_restart_game = 17;
inline bool Client_BaseballServer::has_m_req_answer_restart_game() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Client_BaseballServer::set_has_m_req_answer_restart_game() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Client_BaseballServer::clear_has_m_req_answer_restart_game() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Client_BaseballServer::clear_m_req_answer_restart_game() {
  if (m_req_answer_restart_game_ != NULL) m_req_answer_restart_game_->::s_req_answer_restart_game::Clear();
  clear_has_m_req_answer_restart_game();
}
inline const ::s_req_answer_restart_game& Client_BaseballServer::m_req_answer_restart_game() const {
  return m_req_answer_restart_game_ != NULL ? *m_req_answer_restart_game_ : *default_instance_->m_req_answer_restart_game_;
}
inline ::s_req_answer_restart_game* Client_BaseballServer::mutable_m_req_answer_restart_game() {
  set_has_m_req_answer_restart_game();
  if (m_req_answer_restart_game_ == NULL) m_req_answer_restart_game_ = new ::s_req_answer_restart_game;
  return m_req_answer_restart_game_;
}
inline ::s_req_answer_restart_game* Client_BaseballServer::release_m_req_answer_restart_game() {
  clear_has_m_req_answer_restart_game();
  ::s_req_answer_restart_game* temp = m_req_answer_restart_game_;
  m_req_answer_restart_game_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BaseballServer_UserGateServer_Type>() {
  return ::BaseballServer_UserGateServer_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BaseballServer_Client_Type>() {
  return ::BaseballServer_Client_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserGateServer_BaseballServer_Type>() {
  return ::UserGateServer_BaseballServer_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Client_BaseballServer_Type>() {
  return ::Client_BaseballServer_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< EUserGPS_notuse>() {
  return EUserGPS_notuse_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PT_5fBaseballServer_2eproto__INCLUDED
