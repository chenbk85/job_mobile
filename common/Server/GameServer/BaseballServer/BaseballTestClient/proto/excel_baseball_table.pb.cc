// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "excel_baseball_table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto() {
  delete Tbl__PlayerBase::default_instance_;
  delete Tbl_Item::default_instance_;
  delete Tbl_PlayerBetter::default_instance_;
  delete Tbl_PlayerPitcher::default_instance_;
  delete Tbl_Result::default_instance_;
  delete Tbl_RoundResult::default_instance_;
  delete Tbl_User::default_instance_;
}

void protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Tbl__PlayerBase::default_instance_ = new Tbl__PlayerBase();
  Tbl_Item::default_instance_ = new Tbl_Item();
  Tbl_PlayerBetter::default_instance_ = new Tbl_PlayerBetter();
  Tbl_PlayerPitcher::default_instance_ = new Tbl_PlayerPitcher();
  Tbl_Result::default_instance_ = new Tbl_Result();
  Tbl_RoundResult::default_instance_ = new Tbl_RoundResult();
  Tbl_User::default_instance_ = new Tbl_User();
  Tbl__PlayerBase::default_instance_->InitAsDefaultInstance();
  Tbl_Item::default_instance_->InitAsDefaultInstance();
  Tbl_PlayerBetter::default_instance_->InitAsDefaultInstance();
  Tbl_PlayerPitcher::default_instance_->InitAsDefaultInstance();
  Tbl_Result::default_instance_->InitAsDefaultInstance();
  Tbl_RoundResult::default_instance_->InitAsDefaultInstance();
  Tbl_User::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_excel_5fbaseball_5ftable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_excel_5fbaseball_5ftable_2eproto {
  StaticDescriptorInitializer_excel_5fbaseball_5ftable_2eproto() {
    protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();
  }
} static_descriptor_initializer_excel_5fbaseball_5ftable_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Tbl__PlayerBase::kPidFieldNumber;
const int Tbl__PlayerBase::kSidFieldNumber;
const int Tbl__PlayerBase::kPpidFieldNumber;
const int Tbl__PlayerBase::kPnameFieldNumber;
const int Tbl__PlayerBase::kCityFieldNumber;
const int Tbl__PlayerBase::kInitialNameFieldNumber;
const int Tbl__PlayerBase::kBackNumberFieldNumber;
const int Tbl__PlayerBase::kAgeFieldNumber;
const int Tbl__PlayerBase::kBadyTypeFieldNumber;
const int Tbl__PlayerBase::kLeftrightTypeFieldNumber;
const int Tbl__PlayerBase::kExpFieldNumber;
const int Tbl__PlayerBase::kQuestcompleteCountFieldNumber;
const int Tbl__PlayerBase::kWinContinueFieldNumber;
const int Tbl__PlayerBase::kLoseContinueFieldNumber;
const int Tbl__PlayerBase::kLastGameResultFieldNumber;
const int Tbl__PlayerBase::kWinTotFieldNumber;
const int Tbl__PlayerBase::kLoseTotFieldNumber;
const int Tbl__PlayerBase::kWinSeasonFieldNumber;
const int Tbl__PlayerBase::kLoseSeasonFieldNumber;
const int Tbl__PlayerBase::kSkillStickerFieldNumber;
const int Tbl__PlayerBase::kEloPointFieldNumber;
const int Tbl__PlayerBase::kOnoffTypeFieldNumber;
#endif  // !_MSC_VER

Tbl__PlayerBase::Tbl__PlayerBase()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Tbl__PlayerBase::InitAsDefaultInstance() {
}

Tbl__PlayerBase::Tbl__PlayerBase(const Tbl__PlayerBase& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Tbl__PlayerBase::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  sid_ = 0;
  ppid_ = 0;
  pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = 0;
  initial_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  back_number_ = 0;
  age_ = 0;
  bady_type_ = 0;
  leftright_type_ = false;
  exp_ = GOOGLE_LONGLONG(0);
  questcomplete_count_ = 0;
  win_continue_ = 0;
  lose_continue_ = 0;
  last_game_result_ = GOOGLE_LONGLONG(0);
  win_tot_ = 0;
  lose_tot_ = 0;
  win_season_ = 0;
  lose_season_ = 0;
  skill_sticker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elo_point_ = 0;
  onoff_type_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tbl__PlayerBase::~Tbl__PlayerBase() {
  SharedDtor();
}

void Tbl__PlayerBase::SharedDtor() {
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    delete pname_;
  }
  if (initial_name_ != &::google::protobuf::internal::kEmptyString) {
    delete initial_name_;
  }
  if (skill_sticker_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_sticker_;
  }
  if (this != default_instance_) {
  }
}

void Tbl__PlayerBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tbl__PlayerBase& Tbl__PlayerBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();  return *default_instance_;
}

Tbl__PlayerBase* Tbl__PlayerBase::default_instance_ = NULL;

Tbl__PlayerBase* Tbl__PlayerBase::New() const {
  return new Tbl__PlayerBase;
}

void Tbl__PlayerBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = GOOGLE_LONGLONG(0);
    sid_ = 0;
    ppid_ = 0;
    if (has_pname()) {
      if (pname_ != &::google::protobuf::internal::kEmptyString) {
        pname_->clear();
      }
    }
    city_ = 0;
    if (has_initial_name()) {
      if (initial_name_ != &::google::protobuf::internal::kEmptyString) {
        initial_name_->clear();
      }
    }
    back_number_ = 0;
    age_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bady_type_ = 0;
    leftright_type_ = false;
    exp_ = GOOGLE_LONGLONG(0);
    questcomplete_count_ = 0;
    win_continue_ = 0;
    lose_continue_ = 0;
    last_game_result_ = GOOGLE_LONGLONG(0);
    win_tot_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lose_tot_ = 0;
    win_season_ = 0;
    lose_season_ = 0;
    if (has_skill_sticker()) {
      if (skill_sticker_ != &::google::protobuf::internal::kEmptyString) {
        skill_sticker_->clear();
      }
    }
    elo_point_ = 0;
    onoff_type_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Tbl__PlayerBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }
      
      // required int32 sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ppid;
        break;
      }
      
      // required int32 ppid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppid_)));
          set_has_ppid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pname;
        break;
      }
      
      // required string pname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_city;
        break;
      }
      
      // required int32 city = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_initial_name;
        break;
      }
      
      // required string initial_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initial_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initial_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_back_number;
        break;
      }
      
      // required int32 back_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_number_)));
          set_has_back_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_age;
        break;
      }
      
      // required int32 age = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bady_type;
        break;
      }
      
      // required int32 bady_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bady_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bady_type_)));
          set_has_bady_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_leftright_type;
        break;
      }
      
      // required bool leftright_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftright_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leftright_type_)));
          set_has_leftright_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_exp;
        break;
      }
      
      // required int64 exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_questcomplete_count;
        break;
      }
      
      // required int32 questcomplete_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questcomplete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questcomplete_count_)));
          set_has_questcomplete_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_win_continue;
        break;
      }
      
      // required int32 win_continue = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_continue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_continue_)));
          set_has_win_continue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lose_continue;
        break;
      }
      
      // required int32 lose_continue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_continue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_continue_)));
          set_has_lose_continue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_last_game_result;
        break;
      }
      
      // required int64 last_game_result = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_game_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_game_result_)));
          set_has_last_game_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_win_tot;
        break;
      }
      
      // required int32 win_tot = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_tot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_tot_)));
          set_has_win_tot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lose_tot;
        break;
      }
      
      // required int32 lose_tot = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_tot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_tot_)));
          set_has_lose_tot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_win_season;
        break;
      }
      
      // required int32 win_season = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_season_)));
          set_has_win_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_lose_season;
        break;
      }
      
      // required int32 lose_season = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_season_)));
          set_has_lose_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_skill_sticker;
        break;
      }
      
      // required string skill_sticker = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_sticker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_sticker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_elo_point;
        break;
      }
      
      // required int32 elo_point = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elo_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elo_point_)));
          set_has_elo_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_onoff_type;
        break;
      }
      
      // required bool onoff_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onoff_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onoff_type_)));
          set_has_onoff_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tbl__PlayerBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }
  
  // required int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 ppid = 3;
  if (has_ppid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ppid(), output);
  }
  
  // required string pname = 4;
  if (has_pname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pname(), output);
  }
  
  // required int32 city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->city(), output);
  }
  
  // required string initial_name = 6;
  if (has_initial_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->initial_name(), output);
  }
  
  // required int32 back_number = 7;
  if (has_back_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->back_number(), output);
  }
  
  // required int32 age = 8;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->age(), output);
  }
  
  // required int32 bady_type = 9;
  if (has_bady_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bady_type(), output);
  }
  
  // required bool leftright_type = 10;
  if (has_leftright_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->leftright_type(), output);
  }
  
  // required int64 exp = 11;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->exp(), output);
  }
  
  // required int32 questcomplete_count = 12;
  if (has_questcomplete_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->questcomplete_count(), output);
  }
  
  // required int32 win_continue = 13;
  if (has_win_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->win_continue(), output);
  }
  
  // required int32 lose_continue = 14;
  if (has_lose_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lose_continue(), output);
  }
  
  // required int64 last_game_result = 15;
  if (has_last_game_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->last_game_result(), output);
  }
  
  // required int32 win_tot = 16;
  if (has_win_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->win_tot(), output);
  }
  
  // required int32 lose_tot = 17;
  if (has_lose_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->lose_tot(), output);
  }
  
  // required int32 win_season = 18;
  if (has_win_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->win_season(), output);
  }
  
  // required int32 lose_season = 19;
  if (has_lose_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->lose_season(), output);
  }
  
  // required string skill_sticker = 20;
  if (has_skill_sticker()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->skill_sticker(), output);
  }
  
  // required int32 elo_point = 21;
  if (has_elo_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->elo_point(), output);
  }
  
  // required bool onoff_type = 22;
  if (has_onoff_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->onoff_type(), output);
  }
  
}

int Tbl__PlayerBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }
    
    // required int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 ppid = 3;
    if (has_ppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppid());
    }
    
    // required string pname = 4;
    if (has_pname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pname());
    }
    
    // required int32 city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city());
    }
    
    // required string initial_name = 6;
    if (has_initial_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initial_name());
    }
    
    // required int32 back_number = 7;
    if (has_back_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back_number());
    }
    
    // required int32 age = 8;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 bady_type = 9;
    if (has_bady_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bady_type());
    }
    
    // required bool leftright_type = 10;
    if (has_leftright_type()) {
      total_size += 1 + 1;
    }
    
    // required int64 exp = 11;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // required int32 questcomplete_count = 12;
    if (has_questcomplete_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questcomplete_count());
    }
    
    // required int32 win_continue = 13;
    if (has_win_continue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_continue());
    }
    
    // required int32 lose_continue = 14;
    if (has_lose_continue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_continue());
    }
    
    // required int64 last_game_result = 15;
    if (has_last_game_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_game_result());
    }
    
    // required int32 win_tot = 16;
    if (has_win_tot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_tot());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 lose_tot = 17;
    if (has_lose_tot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_tot());
    }
    
    // required int32 win_season = 18;
    if (has_win_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_season());
    }
    
    // required int32 lose_season = 19;
    if (has_lose_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_season());
    }
    
    // required string skill_sticker = 20;
    if (has_skill_sticker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_sticker());
    }
    
    // required int32 elo_point = 21;
    if (has_elo_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elo_point());
    }
    
    // required bool onoff_type = 22;
    if (has_onoff_type()) {
      total_size += 2 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tbl__PlayerBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tbl__PlayerBase*>(&from));
}

void Tbl__PlayerBase::MergeFrom(const Tbl__PlayerBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_ppid()) {
      set_ppid(from.ppid());
    }
    if (from.has_pname()) {
      set_pname(from.pname());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_initial_name()) {
      set_initial_name(from.initial_name());
    }
    if (from.has_back_number()) {
      set_back_number(from.back_number());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bady_type()) {
      set_bady_type(from.bady_type());
    }
    if (from.has_leftright_type()) {
      set_leftright_type(from.leftright_type());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_questcomplete_count()) {
      set_questcomplete_count(from.questcomplete_count());
    }
    if (from.has_win_continue()) {
      set_win_continue(from.win_continue());
    }
    if (from.has_lose_continue()) {
      set_lose_continue(from.lose_continue());
    }
    if (from.has_last_game_result()) {
      set_last_game_result(from.last_game_result());
    }
    if (from.has_win_tot()) {
      set_win_tot(from.win_tot());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lose_tot()) {
      set_lose_tot(from.lose_tot());
    }
    if (from.has_win_season()) {
      set_win_season(from.win_season());
    }
    if (from.has_lose_season()) {
      set_lose_season(from.lose_season());
    }
    if (from.has_skill_sticker()) {
      set_skill_sticker(from.skill_sticker());
    }
    if (from.has_elo_point()) {
      set_elo_point(from.elo_point());
    }
    if (from.has_onoff_type()) {
      set_onoff_type(from.onoff_type());
    }
  }
}

void Tbl__PlayerBase::CopyFrom(const Tbl__PlayerBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbl__PlayerBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;
  
  return true;
}

void Tbl__PlayerBase::Swap(Tbl__PlayerBase* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(sid_, other->sid_);
    std::swap(ppid_, other->ppid_);
    std::swap(pname_, other->pname_);
    std::swap(city_, other->city_);
    std::swap(initial_name_, other->initial_name_);
    std::swap(back_number_, other->back_number_);
    std::swap(age_, other->age_);
    std::swap(bady_type_, other->bady_type_);
    std::swap(leftright_type_, other->leftright_type_);
    std::swap(exp_, other->exp_);
    std::swap(questcomplete_count_, other->questcomplete_count_);
    std::swap(win_continue_, other->win_continue_);
    std::swap(lose_continue_, other->lose_continue_);
    std::swap(last_game_result_, other->last_game_result_);
    std::swap(win_tot_, other->win_tot_);
    std::swap(lose_tot_, other->lose_tot_);
    std::swap(win_season_, other->win_season_);
    std::swap(lose_season_, other->lose_season_);
    std::swap(skill_sticker_, other->skill_sticker_);
    std::swap(elo_point_, other->elo_point_);
    std::swap(onoff_type_, other->onoff_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Tbl__PlayerBase::GetTypeName() const {
  return "Tbl__PlayerBase";
}


// ===================================================================

#ifndef _MSC_VER
const int Tbl_Item::kIidFieldNumber;
const int Tbl_Item::kSidFieldNumber;
const int Tbl_Item::kCategoryFieldNumber;
const int Tbl_Item::kPidFieldNumber;
const int Tbl_Item::kUpgradeLevelFieldNumber;
const int Tbl_Item::kEtcInfoFieldNumber;
const int Tbl_Item::kGradeFieldNumber;
const int Tbl_Item::kBoughtRealMoneyFieldNumber;
const int Tbl_Item::kBoughtPointMoneyFieldNumber;
const int Tbl_Item::kBoughtGameMoneyFieldNumber;
const int Tbl_Item::kIsUsedFieldNumber;
const int Tbl_Item::kIsConfirmedFieldNumber;
const int Tbl_Item::kUsableHourFieldNumber;
const int Tbl_Item::kUsedGameCountFieldNumber;
#endif  // !_MSC_VER

Tbl_Item::Tbl_Item()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Tbl_Item::InitAsDefaultInstance() {
}

Tbl_Item::Tbl_Item(const Tbl_Item& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Tbl_Item::SharedCtor() {
  _cached_size_ = 0;
  iid_ = GOOGLE_LONGLONG(0);
  sid_ = 0;
  category_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  upgrade_level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  etc_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bought_real_money_ = 0;
  bought_point_money_ = 0;
  bought_game_money_ = 0;
  is_used_ = false;
  is_confirmed_ = false;
  usable_hour_ = 0;
  used_game_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tbl_Item::~Tbl_Item() {
  SharedDtor();
}

void Tbl_Item::SharedDtor() {
  if (upgrade_level_ != &::google::protobuf::internal::kEmptyString) {
    delete upgrade_level_;
  }
  if (etc_info_ != &::google::protobuf::internal::kEmptyString) {
    delete etc_info_;
  }
  if (grade_ != &::google::protobuf::internal::kEmptyString) {
    delete grade_;
  }
  if (this != default_instance_) {
  }
}

void Tbl_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tbl_Item& Tbl_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();  return *default_instance_;
}

Tbl_Item* Tbl_Item::default_instance_ = NULL;

Tbl_Item* Tbl_Item::New() const {
  return new Tbl_Item;
}

void Tbl_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iid_ = GOOGLE_LONGLONG(0);
    sid_ = 0;
    category_ = 0;
    pid_ = GOOGLE_LONGLONG(0);
    if (has_upgrade_level()) {
      if (upgrade_level_ != &::google::protobuf::internal::kEmptyString) {
        upgrade_level_->clear();
      }
    }
    if (has_etc_info()) {
      if (etc_info_ != &::google::protobuf::internal::kEmptyString) {
        etc_info_->clear();
      }
    }
    if (has_grade()) {
      if (grade_ != &::google::protobuf::internal::kEmptyString) {
        grade_->clear();
      }
    }
    bought_real_money_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bought_point_money_ = 0;
    bought_game_money_ = 0;
    is_used_ = false;
    is_confirmed_ = false;
    usable_hour_ = 0;
    used_game_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Tbl_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 iid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }
      
      // required int32 sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }
      
      // required int32 category = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pid;
        break;
      }
      
      // required int64 pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_upgrade_level;
        break;
      }
      
      // required string upgrade_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upgrade_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upgrade_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_etc_info;
        break;
      }
      
      // required string etc_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_etc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_grade;
        break;
      }
      
      // required string grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bought_real_money;
        break;
      }
      
      // required int32 bought_real_money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bought_real_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bought_real_money_)));
          set_has_bought_real_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bought_point_money;
        break;
      }
      
      // required int32 bought_point_money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bought_point_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bought_point_money_)));
          set_has_bought_point_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bought_game_money;
        break;
      }
      
      // required int32 bought_game_money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bought_game_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bought_game_money_)));
          set_has_bought_game_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_used;
        break;
      }
      
      // required bool is_used = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_used_)));
          set_has_is_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_confirmed;
        break;
      }
      
      // required bool is_confirmed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_confirmed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_confirmed_)));
          set_has_is_confirmed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_usable_hour;
        break;
      }
      
      // required int32 usable_hour = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usable_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usable_hour_)));
          set_has_usable_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_used_game_count;
        break;
      }
      
      // required int32 used_game_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_game_count_)));
          set_has_used_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tbl_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 iid = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iid(), output);
  }
  
  // required int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 category = 3;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->category(), output);
  }
  
  // required int64 pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->pid(), output);
  }
  
  // required string upgrade_level = 5;
  if (has_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->upgrade_level(), output);
  }
  
  // required string etc_info = 6;
  if (has_etc_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->etc_info(), output);
  }
  
  // required string grade = 7;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->grade(), output);
  }
  
  // required int32 bought_real_money = 8;
  if (has_bought_real_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bought_real_money(), output);
  }
  
  // required int32 bought_point_money = 9;
  if (has_bought_point_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bought_point_money(), output);
  }
  
  // required int32 bought_game_money = 10;
  if (has_bought_game_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bought_game_money(), output);
  }
  
  // required bool is_used = 11;
  if (has_is_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_used(), output);
  }
  
  // required bool is_confirmed = 12;
  if (has_is_confirmed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_confirmed(), output);
  }
  
  // required int32 usable_hour = 13;
  if (has_usable_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->usable_hour(), output);
  }
  
  // required int32 used_game_count = 14;
  if (has_used_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->used_game_count(), output);
  }
  
}

int Tbl_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 iid = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iid());
    }
    
    // required int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 category = 3;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }
    
    // required int64 pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }
    
    // required string upgrade_level = 5;
    if (has_upgrade_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upgrade_level());
    }
    
    // required string etc_info = 6;
    if (has_etc_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etc_info());
    }
    
    // required string grade = 7;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grade());
    }
    
    // required int32 bought_real_money = 8;
    if (has_bought_real_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bought_real_money());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 bought_point_money = 9;
    if (has_bought_point_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bought_point_money());
    }
    
    // required int32 bought_game_money = 10;
    if (has_bought_game_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bought_game_money());
    }
    
    // required bool is_used = 11;
    if (has_is_used()) {
      total_size += 1 + 1;
    }
    
    // required bool is_confirmed = 12;
    if (has_is_confirmed()) {
      total_size += 1 + 1;
    }
    
    // required int32 usable_hour = 13;
    if (has_usable_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usable_hour());
    }
    
    // required int32 used_game_count = 14;
    if (has_used_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_game_count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tbl_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tbl_Item*>(&from));
}

void Tbl_Item::MergeFrom(const Tbl_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_upgrade_level()) {
      set_upgrade_level(from.upgrade_level());
    }
    if (from.has_etc_info()) {
      set_etc_info(from.etc_info());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_bought_real_money()) {
      set_bought_real_money(from.bought_real_money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bought_point_money()) {
      set_bought_point_money(from.bought_point_money());
    }
    if (from.has_bought_game_money()) {
      set_bought_game_money(from.bought_game_money());
    }
    if (from.has_is_used()) {
      set_is_used(from.is_used());
    }
    if (from.has_is_confirmed()) {
      set_is_confirmed(from.is_confirmed());
    }
    if (from.has_usable_hour()) {
      set_usable_hour(from.usable_hour());
    }
    if (from.has_used_game_count()) {
      set_used_game_count(from.used_game_count());
    }
  }
}

void Tbl_Item::CopyFrom(const Tbl_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbl_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  
  return true;
}

void Tbl_Item::Swap(Tbl_Item* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(sid_, other->sid_);
    std::swap(category_, other->category_);
    std::swap(pid_, other->pid_);
    std::swap(upgrade_level_, other->upgrade_level_);
    std::swap(etc_info_, other->etc_info_);
    std::swap(grade_, other->grade_);
    std::swap(bought_real_money_, other->bought_real_money_);
    std::swap(bought_point_money_, other->bought_point_money_);
    std::swap(bought_game_money_, other->bought_game_money_);
    std::swap(is_used_, other->is_used_);
    std::swap(is_confirmed_, other->is_confirmed_);
    std::swap(usable_hour_, other->usable_hour_);
    std::swap(used_game_count_, other->used_game_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Tbl_Item::GetTypeName() const {
  return "Tbl_Item";
}


// ===================================================================

#ifndef _MSC_VER
const int Tbl_PlayerBetter::kMTblPlayerBaseFieldNumber;
const int Tbl_PlayerBetter::kBattingAverageFieldNumber;
const int Tbl_PlayerBetter::kContinueHomerunCountFieldNumber;
const int Tbl_PlayerBetter::kHomeruntotalCountFieldNumber;
const int Tbl_PlayerBetter::kSingleHomerunCountFieldNumber;
const int Tbl_PlayerBetter::kTworunHomerunCountFieldNumber;
const int Tbl_PlayerBetter::kThreerunHomerunCountFieldNumber;
const int Tbl_PlayerBetter::kGrandslamHomerunCountFieldNumber;
const int Tbl_PlayerBetter::kOneHitCountFieldNumber;
const int Tbl_PlayerBetter::kDoubleHitCountFieldNumber;
const int Tbl_PlayerBetter::kTripleHitCountFieldNumber;
const int Tbl_PlayerBetter::kFoulHitCountFieldNumber;
const int Tbl_PlayerBetter::kOutHitCountFieldNumber;
const int Tbl_PlayerBetter::kScoreCountFieldNumber;
const int Tbl_PlayerBetter::kBettingTypeFieldNumber;
const int Tbl_PlayerBetter::kBetterPowerFieldNumber;
const int Tbl_PlayerBetter::kBetterFocusFieldNumber;
const int Tbl_PlayerBetter::kBetterPowerBuffFieldNumber;
const int Tbl_PlayerBetter::kBetterFocusBuffFieldNumber;
#endif  // !_MSC_VER

Tbl_PlayerBetter::Tbl_PlayerBetter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Tbl_PlayerBetter::InitAsDefaultInstance() {
  m_tbl__playerbase_ = const_cast< ::Tbl__PlayerBase*>(&::Tbl__PlayerBase::default_instance());
}

Tbl_PlayerBetter::Tbl_PlayerBetter(const Tbl_PlayerBetter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Tbl_PlayerBetter::SharedCtor() {
  _cached_size_ = 0;
  m_tbl__playerbase_ = NULL;
  batting_average_ = 0;
  continue_homerun_count_ = 0;
  homeruntotal_count_ = 0;
  single_homerun_count_ = 0;
  tworun_homerun_count_ = 0;
  threerun_homerun_count_ = 0;
  grandslam_homerun_count_ = 0;
  one_hit_count_ = 0;
  double_hit_count_ = 0;
  triple_hit_count_ = 0;
  foul_hit_count_ = 0;
  out_hit_count_ = 0;
  score_count_ = 0;
  betting_type_ = 0;
  better_power_ = 0;
  better_focus_ = 0;
  better_power_buff_ = 0;
  better_focus_buff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tbl_PlayerBetter::~Tbl_PlayerBetter() {
  SharedDtor();
}

void Tbl_PlayerBetter::SharedDtor() {
  if (this != default_instance_) {
    delete m_tbl__playerbase_;
  }
}

void Tbl_PlayerBetter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tbl_PlayerBetter& Tbl_PlayerBetter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();  return *default_instance_;
}

Tbl_PlayerBetter* Tbl_PlayerBetter::default_instance_ = NULL;

Tbl_PlayerBetter* Tbl_PlayerBetter::New() const {
  return new Tbl_PlayerBetter;
}

void Tbl_PlayerBetter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_tbl__playerbase()) {
      if (m_tbl__playerbase_ != NULL) m_tbl__playerbase_->::Tbl__PlayerBase::Clear();
    }
    batting_average_ = 0;
    continue_homerun_count_ = 0;
    homeruntotal_count_ = 0;
    single_homerun_count_ = 0;
    tworun_homerun_count_ = 0;
    threerun_homerun_count_ = 0;
    grandslam_homerun_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    one_hit_count_ = 0;
    double_hit_count_ = 0;
    triple_hit_count_ = 0;
    foul_hit_count_ = 0;
    out_hit_count_ = 0;
    score_count_ = 0;
    betting_type_ = 0;
    better_power_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    better_focus_ = 0;
    better_power_buff_ = 0;
    better_focus_buff_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Tbl_PlayerBetter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tbl__playerbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_batting_average;
        break;
      }
      
      // required int32 batting_average = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batting_average:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batting_average_)));
          set_has_batting_average();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_continue_homerun_count;
        break;
      }
      
      // required int32 continue_homerun_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue_homerun_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continue_homerun_count_)));
          set_has_continue_homerun_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_homeruntotal_count;
        break;
      }
      
      // required int32 homeruntotal_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_homeruntotal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &homeruntotal_count_)));
          set_has_homeruntotal_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_single_homerun_count;
        break;
      }
      
      // required int32 single_homerun_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_homerun_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_homerun_count_)));
          set_has_single_homerun_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tworun_homerun_count;
        break;
      }
      
      // required int32 tworun_homerun_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tworun_homerun_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tworun_homerun_count_)));
          set_has_tworun_homerun_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_threerun_homerun_count;
        break;
      }
      
      // required int32 threerun_homerun_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threerun_homerun_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threerun_homerun_count_)));
          set_has_threerun_homerun_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grandslam_homerun_count;
        break;
      }
      
      // required int32 grandslam_homerun_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grandslam_homerun_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grandslam_homerun_count_)));
          set_has_grandslam_homerun_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_one_hit_count;
        break;
      }
      
      // required int32 one_hit_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_one_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &one_hit_count_)));
          set_has_one_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_double_hit_count;
        break;
      }
      
      // required int32 double_hit_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double_hit_count_)));
          set_has_double_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_triple_hit_count;
        break;
      }
      
      // required int32 triple_hit_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triple_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triple_hit_count_)));
          set_has_triple_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_foul_hit_count;
        break;
      }
      
      // required int32 foul_hit_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_foul_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foul_hit_count_)));
          set_has_foul_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_out_hit_count;
        break;
      }
      
      // required int32 out_hit_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_hit_count_)));
          set_has_out_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_score_count;
        break;
      }
      
      // required int32 score_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_count_)));
          set_has_score_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_betting_type;
        break;
      }
      
      // required int32 betting_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betting_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betting_type_)));
          set_has_betting_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_better_power;
        break;
      }
      
      // required int32 better_power = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_better_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &better_power_)));
          set_has_better_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_better_focus;
        break;
      }
      
      // required int32 better_focus = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_better_focus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &better_focus_)));
          set_has_better_focus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_better_power_buff;
        break;
      }
      
      // required int32 better_power_buff = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_better_power_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &better_power_buff_)));
          set_has_better_power_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_better_focus_buff;
        break;
      }
      
      // required int32 better_focus_buff = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_better_focus_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &better_focus_buff_)));
          set_has_better_focus_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tbl_PlayerBetter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
  if (has_m_tbl__playerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_tbl__playerbase(), output);
  }
  
  // required int32 batting_average = 2;
  if (has_batting_average()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batting_average(), output);
  }
  
  // required int32 continue_homerun_count = 3;
  if (has_continue_homerun_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->continue_homerun_count(), output);
  }
  
  // required int32 homeruntotal_count = 4;
  if (has_homeruntotal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->homeruntotal_count(), output);
  }
  
  // required int32 single_homerun_count = 5;
  if (has_single_homerun_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->single_homerun_count(), output);
  }
  
  // required int32 tworun_homerun_count = 6;
  if (has_tworun_homerun_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tworun_homerun_count(), output);
  }
  
  // required int32 threerun_homerun_count = 7;
  if (has_threerun_homerun_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->threerun_homerun_count(), output);
  }
  
  // required int32 grandslam_homerun_count = 8;
  if (has_grandslam_homerun_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grandslam_homerun_count(), output);
  }
  
  // required int32 one_hit_count = 9;
  if (has_one_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->one_hit_count(), output);
  }
  
  // required int32 double_hit_count = 10;
  if (has_double_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->double_hit_count(), output);
  }
  
  // required int32 triple_hit_count = 11;
  if (has_triple_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->triple_hit_count(), output);
  }
  
  // required int32 foul_hit_count = 12;
  if (has_foul_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->foul_hit_count(), output);
  }
  
  // required int32 out_hit_count = 13;
  if (has_out_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->out_hit_count(), output);
  }
  
  // required int32 score_count = 14;
  if (has_score_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->score_count(), output);
  }
  
  // required int32 betting_type = 15;
  if (has_betting_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->betting_type(), output);
  }
  
  // required int32 better_power = 16;
  if (has_better_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->better_power(), output);
  }
  
  // required int32 better_focus = 17;
  if (has_better_focus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->better_focus(), output);
  }
  
  // required int32 better_power_buff = 18;
  if (has_better_power_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->better_power_buff(), output);
  }
  
  // required int32 better_focus_buff = 19;
  if (has_better_focus_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->better_focus_buff(), output);
  }
  
}

int Tbl_PlayerBetter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
    if (has_m_tbl__playerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tbl__playerbase());
    }
    
    // required int32 batting_average = 2;
    if (has_batting_average()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batting_average());
    }
    
    // required int32 continue_homerun_count = 3;
    if (has_continue_homerun_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continue_homerun_count());
    }
    
    // required int32 homeruntotal_count = 4;
    if (has_homeruntotal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->homeruntotal_count());
    }
    
    // required int32 single_homerun_count = 5;
    if (has_single_homerun_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->single_homerun_count());
    }
    
    // required int32 tworun_homerun_count = 6;
    if (has_tworun_homerun_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tworun_homerun_count());
    }
    
    // required int32 threerun_homerun_count = 7;
    if (has_threerun_homerun_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threerun_homerun_count());
    }
    
    // required int32 grandslam_homerun_count = 8;
    if (has_grandslam_homerun_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grandslam_homerun_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 one_hit_count = 9;
    if (has_one_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->one_hit_count());
    }
    
    // required int32 double_hit_count = 10;
    if (has_double_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->double_hit_count());
    }
    
    // required int32 triple_hit_count = 11;
    if (has_triple_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triple_hit_count());
    }
    
    // required int32 foul_hit_count = 12;
    if (has_foul_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->foul_hit_count());
    }
    
    // required int32 out_hit_count = 13;
    if (has_out_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_hit_count());
    }
    
    // required int32 score_count = 14;
    if (has_score_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_count());
    }
    
    // required int32 betting_type = 15;
    if (has_betting_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betting_type());
    }
    
    // required int32 better_power = 16;
    if (has_better_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->better_power());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 better_focus = 17;
    if (has_better_focus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->better_focus());
    }
    
    // required int32 better_power_buff = 18;
    if (has_better_power_buff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->better_power_buff());
    }
    
    // required int32 better_focus_buff = 19;
    if (has_better_focus_buff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->better_focus_buff());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tbl_PlayerBetter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tbl_PlayerBetter*>(&from));
}

void Tbl_PlayerBetter::MergeFrom(const Tbl_PlayerBetter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tbl__playerbase()) {
      mutable_m_tbl__playerbase()->::Tbl__PlayerBase::MergeFrom(from.m_tbl__playerbase());
    }
    if (from.has_batting_average()) {
      set_batting_average(from.batting_average());
    }
    if (from.has_continue_homerun_count()) {
      set_continue_homerun_count(from.continue_homerun_count());
    }
    if (from.has_homeruntotal_count()) {
      set_homeruntotal_count(from.homeruntotal_count());
    }
    if (from.has_single_homerun_count()) {
      set_single_homerun_count(from.single_homerun_count());
    }
    if (from.has_tworun_homerun_count()) {
      set_tworun_homerun_count(from.tworun_homerun_count());
    }
    if (from.has_threerun_homerun_count()) {
      set_threerun_homerun_count(from.threerun_homerun_count());
    }
    if (from.has_grandslam_homerun_count()) {
      set_grandslam_homerun_count(from.grandslam_homerun_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_one_hit_count()) {
      set_one_hit_count(from.one_hit_count());
    }
    if (from.has_double_hit_count()) {
      set_double_hit_count(from.double_hit_count());
    }
    if (from.has_triple_hit_count()) {
      set_triple_hit_count(from.triple_hit_count());
    }
    if (from.has_foul_hit_count()) {
      set_foul_hit_count(from.foul_hit_count());
    }
    if (from.has_out_hit_count()) {
      set_out_hit_count(from.out_hit_count());
    }
    if (from.has_score_count()) {
      set_score_count(from.score_count());
    }
    if (from.has_betting_type()) {
      set_betting_type(from.betting_type());
    }
    if (from.has_better_power()) {
      set_better_power(from.better_power());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_better_focus()) {
      set_better_focus(from.better_focus());
    }
    if (from.has_better_power_buff()) {
      set_better_power_buff(from.better_power_buff());
    }
    if (from.has_better_focus_buff()) {
      set_better_focus_buff(from.better_focus_buff());
    }
  }
}

void Tbl_PlayerBetter::CopyFrom(const Tbl_PlayerBetter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbl_PlayerBetter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;
  
  if (has_m_tbl__playerbase()) {
    if (!this->m_tbl__playerbase().IsInitialized()) return false;
  }
  return true;
}

void Tbl_PlayerBetter::Swap(Tbl_PlayerBetter* other) {
  if (other != this) {
    std::swap(m_tbl__playerbase_, other->m_tbl__playerbase_);
    std::swap(batting_average_, other->batting_average_);
    std::swap(continue_homerun_count_, other->continue_homerun_count_);
    std::swap(homeruntotal_count_, other->homeruntotal_count_);
    std::swap(single_homerun_count_, other->single_homerun_count_);
    std::swap(tworun_homerun_count_, other->tworun_homerun_count_);
    std::swap(threerun_homerun_count_, other->threerun_homerun_count_);
    std::swap(grandslam_homerun_count_, other->grandslam_homerun_count_);
    std::swap(one_hit_count_, other->one_hit_count_);
    std::swap(double_hit_count_, other->double_hit_count_);
    std::swap(triple_hit_count_, other->triple_hit_count_);
    std::swap(foul_hit_count_, other->foul_hit_count_);
    std::swap(out_hit_count_, other->out_hit_count_);
    std::swap(score_count_, other->score_count_);
    std::swap(betting_type_, other->betting_type_);
    std::swap(better_power_, other->better_power_);
    std::swap(better_focus_, other->better_focus_);
    std::swap(better_power_buff_, other->better_power_buff_);
    std::swap(better_focus_buff_, other->better_focus_buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Tbl_PlayerBetter::GetTypeName() const {
  return "Tbl_PlayerBetter";
}


// ===================================================================

#ifndef _MSC_VER
const int Tbl_PlayerPitcher::kMTblPlayerBaseFieldNumber;
const int Tbl_PlayerPitcher::kPitchingAverageFieldNumber;
const int Tbl_PlayerPitcher::kHitCountFieldNumber;
const int Tbl_PlayerPitcher::kStrikeoutCountFieldNumber;
const int Tbl_PlayerPitcher::kHomerunPitchingCountFieldNumber;
const int Tbl_PlayerPitcher::kContinueStrikeoutCountFieldNumber;
const int Tbl_PlayerPitcher::kContinueHomerunPitchingCountFieldNumber;
const int Tbl_PlayerPitcher::kPitchingTypeFieldNumber;
const int Tbl_PlayerPitcher::kPitcherControlFieldNumber;
const int Tbl_PlayerPitcher::kPitcherBallspeedFieldNumber;
const int Tbl_PlayerPitcher::kPitcherBreakingballValueFieldNumber;
const int Tbl_PlayerPitcher::kPitcherBreakingballTypeFieldNumber;
const int Tbl_PlayerPitcher::kPitcherControlBuffFieldNumber;
const int Tbl_PlayerPitcher::kPitcherBallspeedBuffFieldNumber;
const int Tbl_PlayerPitcher::kPitcherBreakingballValueBuffFieldNumber;
#endif  // !_MSC_VER

Tbl_PlayerPitcher::Tbl_PlayerPitcher()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Tbl_PlayerPitcher::InitAsDefaultInstance() {
  m_tbl__playerbase_ = const_cast< ::Tbl__PlayerBase*>(&::Tbl__PlayerBase::default_instance());
}

Tbl_PlayerPitcher::Tbl_PlayerPitcher(const Tbl_PlayerPitcher& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Tbl_PlayerPitcher::SharedCtor() {
  _cached_size_ = 0;
  m_tbl__playerbase_ = NULL;
  pitching_average_ = 0;
  hit_count_ = 0;
  strikeout_count_ = 0;
  homerun_pitching_count_ = 0;
  continue_strikeout_count_ = 0;
  continue_homerun_pitching_count_ = 0;
  pitching_type_ = 0;
  pitcher_control_ = 0;
  pitcher_ballspeed_ = 0;
  pitcher_breakingball_value_ = 0;
  pitcher_breakingball_type_ = 0;
  pitcher_control_buff_ = 0;
  pitcher_ballspeed_buff_ = 0;
  pitcher_breakingball_value_buff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tbl_PlayerPitcher::~Tbl_PlayerPitcher() {
  SharedDtor();
}

void Tbl_PlayerPitcher::SharedDtor() {
  if (this != default_instance_) {
    delete m_tbl__playerbase_;
  }
}

void Tbl_PlayerPitcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tbl_PlayerPitcher& Tbl_PlayerPitcher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();  return *default_instance_;
}

Tbl_PlayerPitcher* Tbl_PlayerPitcher::default_instance_ = NULL;

Tbl_PlayerPitcher* Tbl_PlayerPitcher::New() const {
  return new Tbl_PlayerPitcher;
}

void Tbl_PlayerPitcher::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_tbl__playerbase()) {
      if (m_tbl__playerbase_ != NULL) m_tbl__playerbase_->::Tbl__PlayerBase::Clear();
    }
    pitching_average_ = 0;
    hit_count_ = 0;
    strikeout_count_ = 0;
    homerun_pitching_count_ = 0;
    continue_strikeout_count_ = 0;
    continue_homerun_pitching_count_ = 0;
    pitching_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pitcher_control_ = 0;
    pitcher_ballspeed_ = 0;
    pitcher_breakingball_value_ = 0;
    pitcher_breakingball_type_ = 0;
    pitcher_control_buff_ = 0;
    pitcher_ballspeed_buff_ = 0;
    pitcher_breakingball_value_buff_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Tbl_PlayerPitcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tbl__playerbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pitching_average;
        break;
      }
      
      // required int32 pitching_average = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitching_average:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitching_average_)));
          set_has_pitching_average();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hit_count;
        break;
      }
      
      // required int32 hit_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_count_)));
          set_has_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strikeout_count;
        break;
      }
      
      // required int32 strikeout_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strikeout_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strikeout_count_)));
          set_has_strikeout_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_homerun_pitching_count;
        break;
      }
      
      // required int32 homerun_pitching_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_homerun_pitching_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &homerun_pitching_count_)));
          set_has_homerun_pitching_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_continue_strikeout_count;
        break;
      }
      
      // required int32 continue_strikeout_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue_strikeout_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continue_strikeout_count_)));
          set_has_continue_strikeout_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_continue_homerun_pitching_count;
        break;
      }
      
      // required int32 continue_homerun_pitching_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue_homerun_pitching_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continue_homerun_pitching_count_)));
          set_has_continue_homerun_pitching_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pitching_type;
        break;
      }
      
      // required int32 pitching_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitching_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitching_type_)));
          set_has_pitching_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pitcher_control;
        break;
      }
      
      // required int32 pitcher_control = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_control_)));
          set_has_pitcher_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pitcher_ballspeed;
        break;
      }
      
      // required int32 pitcher_ballspeed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_ballspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_ballspeed_)));
          set_has_pitcher_ballspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pitcher_breakingball_value;
        break;
      }
      
      // required int32 pitcher_breakingball_value = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_breakingball_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_breakingball_value_)));
          set_has_pitcher_breakingball_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_pitcher_breakingball_type;
        break;
      }
      
      // required int32 pitcher_breakingball_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_breakingball_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_breakingball_type_)));
          set_has_pitcher_breakingball_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pitcher_control_buff;
        break;
      }
      
      // required int32 pitcher_control_buff = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_control_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_control_buff_)));
          set_has_pitcher_control_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pitcher_ballspeed_buff;
        break;
      }
      
      // required int32 pitcher_ballspeed_buff = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_ballspeed_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_ballspeed_buff_)));
          set_has_pitcher_ballspeed_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pitcher_breakingball_value_buff;
        break;
      }
      
      // required int32 pitcher_breakingball_value_buff = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_breakingball_value_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_breakingball_value_buff_)));
          set_has_pitcher_breakingball_value_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tbl_PlayerPitcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
  if (has_m_tbl__playerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_tbl__playerbase(), output);
  }
  
  // required int32 pitching_average = 2;
  if (has_pitching_average()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pitching_average(), output);
  }
  
  // required int32 hit_count = 3;
  if (has_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hit_count(), output);
  }
  
  // required int32 strikeout_count = 4;
  if (has_strikeout_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->strikeout_count(), output);
  }
  
  // required int32 homerun_pitching_count = 5;
  if (has_homerun_pitching_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->homerun_pitching_count(), output);
  }
  
  // required int32 continue_strikeout_count = 6;
  if (has_continue_strikeout_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->continue_strikeout_count(), output);
  }
  
  // required int32 continue_homerun_pitching_count = 7;
  if (has_continue_homerun_pitching_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->continue_homerun_pitching_count(), output);
  }
  
  // required int32 pitching_type = 8;
  if (has_pitching_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pitching_type(), output);
  }
  
  // required int32 pitcher_control = 9;
  if (has_pitcher_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pitcher_control(), output);
  }
  
  // required int32 pitcher_ballspeed = 10;
  if (has_pitcher_ballspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pitcher_ballspeed(), output);
  }
  
  // required int32 pitcher_breakingball_value = 11;
  if (has_pitcher_breakingball_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pitcher_breakingball_value(), output);
  }
  
  // required int32 pitcher_breakingball_type = 12;
  if (has_pitcher_breakingball_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pitcher_breakingball_type(), output);
  }
  
  // required int32 pitcher_control_buff = 13;
  if (has_pitcher_control_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pitcher_control_buff(), output);
  }
  
  // required int32 pitcher_ballspeed_buff = 14;
  if (has_pitcher_ballspeed_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pitcher_ballspeed_buff(), output);
  }
  
  // required int32 pitcher_breakingball_value_buff = 15;
  if (has_pitcher_breakingball_value_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pitcher_breakingball_value_buff(), output);
  }
  
}

int Tbl_PlayerPitcher::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Tbl__PlayerBase m_Tbl__PlayerBase = 1;
    if (has_m_tbl__playerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tbl__playerbase());
    }
    
    // required int32 pitching_average = 2;
    if (has_pitching_average()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitching_average());
    }
    
    // required int32 hit_count = 3;
    if (has_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_count());
    }
    
    // required int32 strikeout_count = 4;
    if (has_strikeout_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strikeout_count());
    }
    
    // required int32 homerun_pitching_count = 5;
    if (has_homerun_pitching_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->homerun_pitching_count());
    }
    
    // required int32 continue_strikeout_count = 6;
    if (has_continue_strikeout_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continue_strikeout_count());
    }
    
    // required int32 continue_homerun_pitching_count = 7;
    if (has_continue_homerun_pitching_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continue_homerun_pitching_count());
    }
    
    // required int32 pitching_type = 8;
    if (has_pitching_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitching_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 pitcher_control = 9;
    if (has_pitcher_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_control());
    }
    
    // required int32 pitcher_ballspeed = 10;
    if (has_pitcher_ballspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_ballspeed());
    }
    
    // required int32 pitcher_breakingball_value = 11;
    if (has_pitcher_breakingball_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_breakingball_value());
    }
    
    // required int32 pitcher_breakingball_type = 12;
    if (has_pitcher_breakingball_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_breakingball_type());
    }
    
    // required int32 pitcher_control_buff = 13;
    if (has_pitcher_control_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_control_buff());
    }
    
    // required int32 pitcher_ballspeed_buff = 14;
    if (has_pitcher_ballspeed_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_ballspeed_buff());
    }
    
    // required int32 pitcher_breakingball_value_buff = 15;
    if (has_pitcher_breakingball_value_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_breakingball_value_buff());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tbl_PlayerPitcher::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tbl_PlayerPitcher*>(&from));
}

void Tbl_PlayerPitcher::MergeFrom(const Tbl_PlayerPitcher& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tbl__playerbase()) {
      mutable_m_tbl__playerbase()->::Tbl__PlayerBase::MergeFrom(from.m_tbl__playerbase());
    }
    if (from.has_pitching_average()) {
      set_pitching_average(from.pitching_average());
    }
    if (from.has_hit_count()) {
      set_hit_count(from.hit_count());
    }
    if (from.has_strikeout_count()) {
      set_strikeout_count(from.strikeout_count());
    }
    if (from.has_homerun_pitching_count()) {
      set_homerun_pitching_count(from.homerun_pitching_count());
    }
    if (from.has_continue_strikeout_count()) {
      set_continue_strikeout_count(from.continue_strikeout_count());
    }
    if (from.has_continue_homerun_pitching_count()) {
      set_continue_homerun_pitching_count(from.continue_homerun_pitching_count());
    }
    if (from.has_pitching_type()) {
      set_pitching_type(from.pitching_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pitcher_control()) {
      set_pitcher_control(from.pitcher_control());
    }
    if (from.has_pitcher_ballspeed()) {
      set_pitcher_ballspeed(from.pitcher_ballspeed());
    }
    if (from.has_pitcher_breakingball_value()) {
      set_pitcher_breakingball_value(from.pitcher_breakingball_value());
    }
    if (from.has_pitcher_breakingball_type()) {
      set_pitcher_breakingball_type(from.pitcher_breakingball_type());
    }
    if (from.has_pitcher_control_buff()) {
      set_pitcher_control_buff(from.pitcher_control_buff());
    }
    if (from.has_pitcher_ballspeed_buff()) {
      set_pitcher_ballspeed_buff(from.pitcher_ballspeed_buff());
    }
    if (from.has_pitcher_breakingball_value_buff()) {
      set_pitcher_breakingball_value_buff(from.pitcher_breakingball_value_buff());
    }
  }
}

void Tbl_PlayerPitcher::CopyFrom(const Tbl_PlayerPitcher& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbl_PlayerPitcher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  
  if (has_m_tbl__playerbase()) {
    if (!this->m_tbl__playerbase().IsInitialized()) return false;
  }
  return true;
}

void Tbl_PlayerPitcher::Swap(Tbl_PlayerPitcher* other) {
  if (other != this) {
    std::swap(m_tbl__playerbase_, other->m_tbl__playerbase_);
    std::swap(pitching_average_, other->pitching_average_);
    std::swap(hit_count_, other->hit_count_);
    std::swap(strikeout_count_, other->strikeout_count_);
    std::swap(homerun_pitching_count_, other->homerun_pitching_count_);
    std::swap(continue_strikeout_count_, other->continue_strikeout_count_);
    std::swap(continue_homerun_pitching_count_, other->continue_homerun_pitching_count_);
    std::swap(pitching_type_, other->pitching_type_);
    std::swap(pitcher_control_, other->pitcher_control_);
    std::swap(pitcher_ballspeed_, other->pitcher_ballspeed_);
    std::swap(pitcher_breakingball_value_, other->pitcher_breakingball_value_);
    std::swap(pitcher_breakingball_type_, other->pitcher_breakingball_type_);
    std::swap(pitcher_control_buff_, other->pitcher_control_buff_);
    std::swap(pitcher_ballspeed_buff_, other->pitcher_ballspeed_buff_);
    std::swap(pitcher_breakingball_value_buff_, other->pitcher_breakingball_value_buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Tbl_PlayerPitcher::GetTypeName() const {
  return "Tbl_PlayerPitcher";
}


// ===================================================================

#ifndef _MSC_VER
const int Tbl_Result::kGridFieldNumber;
const int Tbl_Result::kIsSinglemodeFieldNumber;
const int Tbl_Result::kPpid1FieldNumber;
const int Tbl_Result::kUid1FieldNumber;
const int Tbl_Result::kUname1FieldNumber;
const int Tbl_Result::kPidBetter1FieldNumber;
const int Tbl_Result::kPidPitcher1FieldNumber;
const int Tbl_Result::kPpid2FieldNumber;
const int Tbl_Result::kUid2FieldNumber;
const int Tbl_Result::kUname2FieldNumber;
const int Tbl_Result::kPidBetter2FieldNumber;
const int Tbl_Result::kPidPitcher2FieldNumber;
const int Tbl_Result::kTimeStartFieldNumber;
const int Tbl_Result::kTimeEndFieldNumber;
const int Tbl_Result::kWinnerFieldNumber;
const int Tbl_Result::kRewardExp1FieldNumber;
const int Tbl_Result::kRewardExp2FieldNumber;
const int Tbl_Result::kRewardItem1FieldNumber;
const int Tbl_Result::kRewardItem2FieldNumber;
const int Tbl_Result::kRewardGamemoney1FieldNumber;
const int Tbl_Result::kRewardGamemoney2FieldNumber;
const int Tbl_Result::kScore1FieldNumber;
const int Tbl_Result::kScore2FieldNumber;
#endif  // !_MSC_VER

Tbl_Result::Tbl_Result()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Tbl_Result::InitAsDefaultInstance() {
}

Tbl_Result::Tbl_Result(const Tbl_Result& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Tbl_Result::SharedCtor() {
  _cached_size_ = 0;
  grid_ = GOOGLE_LONGLONG(0);
  is_singlemode_ = false;
  ppid1_ = 0;
  uid1_ = GOOGLE_LONGLONG(0);
  uname1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_better1_ = GOOGLE_LONGLONG(0);
  pid_pitcher1_ = GOOGLE_LONGLONG(0);
  ppid2_ = 0;
  uid2_ = GOOGLE_LONGLONG(0);
  uname2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_better2_ = GOOGLE_LONGLONG(0);
  pid_pitcher2_ = GOOGLE_LONGLONG(0);
  time_start_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winner_ = GOOGLE_LONGLONG(0);
  reward_exp1_ = 0;
  reward_exp2_ = 0;
  reward_item1_ = GOOGLE_LONGLONG(0);
  reward_item2_ = GOOGLE_LONGLONG(0);
  reward_gamemoney1_ = 0;
  reward_gamemoney2_ = 0;
  score1_ = 0;
  score2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tbl_Result::~Tbl_Result() {
  SharedDtor();
}

void Tbl_Result::SharedDtor() {
  if (uname1_ != &::google::protobuf::internal::kEmptyString) {
    delete uname1_;
  }
  if (uname2_ != &::google::protobuf::internal::kEmptyString) {
    delete uname2_;
  }
  if (time_start_ != &::google::protobuf::internal::kEmptyString) {
    delete time_start_;
  }
  if (time_end_ != &::google::protobuf::internal::kEmptyString) {
    delete time_end_;
  }
  if (this != default_instance_) {
  }
}

void Tbl_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tbl_Result& Tbl_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();  return *default_instance_;
}

Tbl_Result* Tbl_Result::default_instance_ = NULL;

Tbl_Result* Tbl_Result::New() const {
  return new Tbl_Result;
}

void Tbl_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_ = GOOGLE_LONGLONG(0);
    is_singlemode_ = false;
    ppid1_ = 0;
    uid1_ = GOOGLE_LONGLONG(0);
    if (has_uname1()) {
      if (uname1_ != &::google::protobuf::internal::kEmptyString) {
        uname1_->clear();
      }
    }
    pid_better1_ = GOOGLE_LONGLONG(0);
    pid_pitcher1_ = GOOGLE_LONGLONG(0);
    ppid2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uid2_ = GOOGLE_LONGLONG(0);
    if (has_uname2()) {
      if (uname2_ != &::google::protobuf::internal::kEmptyString) {
        uname2_->clear();
      }
    }
    pid_better2_ = GOOGLE_LONGLONG(0);
    pid_pitcher2_ = GOOGLE_LONGLONG(0);
    if (has_time_start()) {
      if (time_start_ != &::google::protobuf::internal::kEmptyString) {
        time_start_->clear();
      }
    }
    if (has_time_end()) {
      if (time_end_ != &::google::protobuf::internal::kEmptyString) {
        time_end_->clear();
      }
    }
    winner_ = GOOGLE_LONGLONG(0);
    reward_exp1_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    reward_exp2_ = 0;
    reward_item1_ = GOOGLE_LONGLONG(0);
    reward_item2_ = GOOGLE_LONGLONG(0);
    reward_gamemoney1_ = 0;
    reward_gamemoney2_ = 0;
    score1_ = 0;
    score2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Tbl_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 grid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_singlemode;
        break;
      }
      
      // required bool is_singlemode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_singlemode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_singlemode_)));
          set_has_is_singlemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ppid1;
        break;
      }
      
      // required int32 ppid1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppid1_)));
          set_has_ppid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid1;
        break;
      }
      
      // required int64 uid1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid1_)));
          set_has_uid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_uname1;
        break;
      }
      
      // required string uname1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uname1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pid_better1;
        break;
      }
      
      // required int64 pid_better1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid_better1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_better1_)));
          set_has_pid_better1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pid_pitcher1;
        break;
      }
      
      // required int64 pid_pitcher1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid_pitcher1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_pitcher1_)));
          set_has_pid_pitcher1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ppid2;
        break;
      }
      
      // required int32 ppid2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppid2_)));
          set_has_ppid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uid2;
        break;
      }
      
      // required int64 uid2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid2_)));
          set_has_uid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_uname2;
        break;
      }
      
      // required string uname2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uname2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pid_better2;
        break;
      }
      
      // required int64 pid_better2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid_better2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_better2_)));
          set_has_pid_better2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_pid_pitcher2;
        break;
      }
      
      // required int64 pid_pitcher2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid_pitcher2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_pitcher2_)));
          set_has_pid_pitcher2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_time_start;
        break;
      }
      
      // required string time_start = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_time_end;
        break;
      }
      
      // required string time_end = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_winner;
        break;
      }
      
      // required int64 winner = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_reward_exp1;
        break;
      }
      
      // required int32 reward_exp1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_exp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_exp1_)));
          set_has_reward_exp1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_reward_exp2;
        break;
      }
      
      // required int32 reward_exp2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_exp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_exp2_)));
          set_has_reward_exp2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_reward_item1;
        break;
      }
      
      // required int64 reward_item1 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_item1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_item1_)));
          set_has_reward_item1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_reward_item2;
        break;
      }
      
      // required int64 reward_item2 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_item2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_item2_)));
          set_has_reward_item2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_reward_gamemoney1;
        break;
      }
      
      // required int32 reward_gamemoney1 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_gamemoney1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_gamemoney1_)));
          set_has_reward_gamemoney1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_reward_gamemoney2;
        break;
      }
      
      // required int32 reward_gamemoney2 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_gamemoney2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_gamemoney2_)));
          set_has_reward_gamemoney2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_score1;
        break;
      }
      
      // required int32 score1 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score1_)));
          set_has_score1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_score2;
        break;
      }
      
      // required int32 score2 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score2_)));
          set_has_score2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tbl_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 grid = 1;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->grid(), output);
  }
  
  // required bool is_singlemode = 2;
  if (has_is_singlemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_singlemode(), output);
  }
  
  // required int32 ppid1 = 3;
  if (has_ppid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ppid1(), output);
  }
  
  // required int64 uid1 = 4;
  if (has_uid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uid1(), output);
  }
  
  // required string uname1 = 5;
  if (has_uname1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->uname1(), output);
  }
  
  // required int64 pid_better1 = 6;
  if (has_pid_better1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->pid_better1(), output);
  }
  
  // required int64 pid_pitcher1 = 7;
  if (has_pid_pitcher1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->pid_pitcher1(), output);
  }
  
  // required int32 ppid2 = 8;
  if (has_ppid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ppid2(), output);
  }
  
  // required int64 uid2 = 9;
  if (has_uid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->uid2(), output);
  }
  
  // required string uname2 = 10;
  if (has_uname2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uname2(), output);
  }
  
  // required int64 pid_better2 = 11;
  if (has_pid_better2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->pid_better2(), output);
  }
  
  // required int64 pid_pitcher2 = 12;
  if (has_pid_pitcher2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->pid_pitcher2(), output);
  }
  
  // required string time_start = 13;
  if (has_time_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->time_start(), output);
  }
  
  // required string time_end = 14;
  if (has_time_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->time_end(), output);
  }
  
  // required int64 winner = 15;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->winner(), output);
  }
  
  // required int32 reward_exp1 = 16;
  if (has_reward_exp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->reward_exp1(), output);
  }
  
  // required int32 reward_exp2 = 17;
  if (has_reward_exp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->reward_exp2(), output);
  }
  
  // required int64 reward_item1 = 18;
  if (has_reward_item1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->reward_item1(), output);
  }
  
  // required int64 reward_item2 = 19;
  if (has_reward_item2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->reward_item2(), output);
  }
  
  // required int32 reward_gamemoney1 = 20;
  if (has_reward_gamemoney1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->reward_gamemoney1(), output);
  }
  
  // required int32 reward_gamemoney2 = 21;
  if (has_reward_gamemoney2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->reward_gamemoney2(), output);
  }
  
  // required int32 score1 = 22;
  if (has_score1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->score1(), output);
  }
  
  // required int32 score2 = 23;
  if (has_score2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->score2(), output);
  }
  
}

int Tbl_Result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 grid = 1;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grid());
    }
    
    // required bool is_singlemode = 2;
    if (has_is_singlemode()) {
      total_size += 1 + 1;
    }
    
    // required int32 ppid1 = 3;
    if (has_ppid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppid1());
    }
    
    // required int64 uid1 = 4;
    if (has_uid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid1());
    }
    
    // required string uname1 = 5;
    if (has_uname1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname1());
    }
    
    // required int64 pid_better1 = 6;
    if (has_pid_better1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid_better1());
    }
    
    // required int64 pid_pitcher1 = 7;
    if (has_pid_pitcher1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid_pitcher1());
    }
    
    // required int32 ppid2 = 8;
    if (has_ppid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppid2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 uid2 = 9;
    if (has_uid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid2());
    }
    
    // required string uname2 = 10;
    if (has_uname2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname2());
    }
    
    // required int64 pid_better2 = 11;
    if (has_pid_better2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid_better2());
    }
    
    // required int64 pid_pitcher2 = 12;
    if (has_pid_pitcher2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid_pitcher2());
    }
    
    // required string time_start = 13;
    if (has_time_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_start());
    }
    
    // required string time_end = 14;
    if (has_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_end());
    }
    
    // required int64 winner = 15;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winner());
    }
    
    // required int32 reward_exp1 = 16;
    if (has_reward_exp1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_exp1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 reward_exp2 = 17;
    if (has_reward_exp2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_exp2());
    }
    
    // required int64 reward_item1 = 18;
    if (has_reward_item1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_item1());
    }
    
    // required int64 reward_item2 = 19;
    if (has_reward_item2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_item2());
    }
    
    // required int32 reward_gamemoney1 = 20;
    if (has_reward_gamemoney1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_gamemoney1());
    }
    
    // required int32 reward_gamemoney2 = 21;
    if (has_reward_gamemoney2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_gamemoney2());
    }
    
    // required int32 score1 = 22;
    if (has_score1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score1());
    }
    
    // required int32 score2 = 23;
    if (has_score2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score2());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tbl_Result::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tbl_Result*>(&from));
}

void Tbl_Result::MergeFrom(const Tbl_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid()) {
      set_grid(from.grid());
    }
    if (from.has_is_singlemode()) {
      set_is_singlemode(from.is_singlemode());
    }
    if (from.has_ppid1()) {
      set_ppid1(from.ppid1());
    }
    if (from.has_uid1()) {
      set_uid1(from.uid1());
    }
    if (from.has_uname1()) {
      set_uname1(from.uname1());
    }
    if (from.has_pid_better1()) {
      set_pid_better1(from.pid_better1());
    }
    if (from.has_pid_pitcher1()) {
      set_pid_pitcher1(from.pid_pitcher1());
    }
    if (from.has_ppid2()) {
      set_ppid2(from.ppid2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uid2()) {
      set_uid2(from.uid2());
    }
    if (from.has_uname2()) {
      set_uname2(from.uname2());
    }
    if (from.has_pid_better2()) {
      set_pid_better2(from.pid_better2());
    }
    if (from.has_pid_pitcher2()) {
      set_pid_pitcher2(from.pid_pitcher2());
    }
    if (from.has_time_start()) {
      set_time_start(from.time_start());
    }
    if (from.has_time_end()) {
      set_time_end(from.time_end());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_reward_exp1()) {
      set_reward_exp1(from.reward_exp1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_reward_exp2()) {
      set_reward_exp2(from.reward_exp2());
    }
    if (from.has_reward_item1()) {
      set_reward_item1(from.reward_item1());
    }
    if (from.has_reward_item2()) {
      set_reward_item2(from.reward_item2());
    }
    if (from.has_reward_gamemoney1()) {
      set_reward_gamemoney1(from.reward_gamemoney1());
    }
    if (from.has_reward_gamemoney2()) {
      set_reward_gamemoney2(from.reward_gamemoney2());
    }
    if (from.has_score1()) {
      set_score1(from.score1());
    }
    if (from.has_score2()) {
      set_score2(from.score2());
    }
  }
}

void Tbl_Result::CopyFrom(const Tbl_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbl_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;
  
  return true;
}

void Tbl_Result::Swap(Tbl_Result* other) {
  if (other != this) {
    std::swap(grid_, other->grid_);
    std::swap(is_singlemode_, other->is_singlemode_);
    std::swap(ppid1_, other->ppid1_);
    std::swap(uid1_, other->uid1_);
    std::swap(uname1_, other->uname1_);
    std::swap(pid_better1_, other->pid_better1_);
    std::swap(pid_pitcher1_, other->pid_pitcher1_);
    std::swap(ppid2_, other->ppid2_);
    std::swap(uid2_, other->uid2_);
    std::swap(uname2_, other->uname2_);
    std::swap(pid_better2_, other->pid_better2_);
    std::swap(pid_pitcher2_, other->pid_pitcher2_);
    std::swap(time_start_, other->time_start_);
    std::swap(time_end_, other->time_end_);
    std::swap(winner_, other->winner_);
    std::swap(reward_exp1_, other->reward_exp1_);
    std::swap(reward_exp2_, other->reward_exp2_);
    std::swap(reward_item1_, other->reward_item1_);
    std::swap(reward_item2_, other->reward_item2_);
    std::swap(reward_gamemoney1_, other->reward_gamemoney1_);
    std::swap(reward_gamemoney2_, other->reward_gamemoney2_);
    std::swap(score1_, other->score1_);
    std::swap(score2_, other->score2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Tbl_Result::GetTypeName() const {
  return "Tbl_Result";
}


// ===================================================================

#ifndef _MSC_VER
const int Tbl_RoundResult::kGrid2FieldNumber;
const int Tbl_RoundResult::kGridFieldNumber;
const int Tbl_RoundResult::kRoundNumberFieldNumber;
const int Tbl_RoundResult::kPidBetterFieldNumber;
const int Tbl_RoundResult::kScoreFieldNumber;
const int Tbl_RoundResult::kBaseRunnerCountFieldNumber;
const int Tbl_RoundResult::kHitTypeFieldNumber;
const int Tbl_RoundResult::kStrikeFieldNumber;
const int Tbl_RoundResult::kFoulFieldNumber;
#endif  // !_MSC_VER

Tbl_RoundResult::Tbl_RoundResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Tbl_RoundResult::InitAsDefaultInstance() {
}

Tbl_RoundResult::Tbl_RoundResult(const Tbl_RoundResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Tbl_RoundResult::SharedCtor() {
  _cached_size_ = 0;
  grid2_ = GOOGLE_LONGLONG(0);
  grid_ = GOOGLE_LONGLONG(0);
  round_number_ = 0;
  pid_better_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  base_runner_count_ = 0;
  hit_type_ = 0;
  strike_ = 0;
  foul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tbl_RoundResult::~Tbl_RoundResult() {
  SharedDtor();
}

void Tbl_RoundResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tbl_RoundResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tbl_RoundResult& Tbl_RoundResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();  return *default_instance_;
}

Tbl_RoundResult* Tbl_RoundResult::default_instance_ = NULL;

Tbl_RoundResult* Tbl_RoundResult::New() const {
  return new Tbl_RoundResult;
}

void Tbl_RoundResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid2_ = GOOGLE_LONGLONG(0);
    grid_ = GOOGLE_LONGLONG(0);
    round_number_ = 0;
    pid_better_ = GOOGLE_LONGLONG(0);
    score_ = 0;
    base_runner_count_ = 0;
    hit_type_ = 0;
    strike_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    foul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Tbl_RoundResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 grid2 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grid2_)));
          set_has_grid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid;
        break;
      }
      
      // required int64 grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_round_number;
        break;
      }
      
      // required int32 round_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_number_)));
          set_has_round_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pid_better;
        break;
      }
      
      // required int64 pid_better = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid_better:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_better_)));
          set_has_pid_better();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // required int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_base_runner_count;
        break;
      }
      
      // required int32 base_runner_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_runner_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_runner_count_)));
          set_has_base_runner_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hit_type;
        break;
      }
      
      // required int32 hit_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_type_)));
          set_has_hit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_strike;
        break;
      }
      
      // required int32 strike = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strike_)));
          set_has_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_foul;
        break;
      }
      
      // required int32 foul = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_foul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foul_)));
          set_has_foul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tbl_RoundResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 grid2 = 1;
  if (has_grid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->grid2(), output);
  }
  
  // required int64 grid = 2;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->grid(), output);
  }
  
  // required int32 round_number = 3;
  if (has_round_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->round_number(), output);
  }
  
  // required int64 pid_better = 4;
  if (has_pid_better()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->pid_better(), output);
  }
  
  // required int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }
  
  // required int32 base_runner_count = 6;
  if (has_base_runner_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->base_runner_count(), output);
  }
  
  // required int32 hit_type = 7;
  if (has_hit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hit_type(), output);
  }
  
  // required int32 strike = 8;
  if (has_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->strike(), output);
  }
  
  // required int32 foul = 9;
  if (has_foul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->foul(), output);
  }
  
}

int Tbl_RoundResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 grid2 = 1;
    if (has_grid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grid2());
    }
    
    // required int64 grid = 2;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grid());
    }
    
    // required int32 round_number = 3;
    if (has_round_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_number());
    }
    
    // required int64 pid_better = 4;
    if (has_pid_better()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid_better());
    }
    
    // required int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // required int32 base_runner_count = 6;
    if (has_base_runner_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_runner_count());
    }
    
    // required int32 hit_type = 7;
    if (has_hit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_type());
    }
    
    // required int32 strike = 8;
    if (has_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strike());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 foul = 9;
    if (has_foul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->foul());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tbl_RoundResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tbl_RoundResult*>(&from));
}

void Tbl_RoundResult::MergeFrom(const Tbl_RoundResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid2()) {
      set_grid2(from.grid2());
    }
    if (from.has_grid()) {
      set_grid(from.grid());
    }
    if (from.has_round_number()) {
      set_round_number(from.round_number());
    }
    if (from.has_pid_better()) {
      set_pid_better(from.pid_better());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_base_runner_count()) {
      set_base_runner_count(from.base_runner_count());
    }
    if (from.has_hit_type()) {
      set_hit_type(from.hit_type());
    }
    if (from.has_strike()) {
      set_strike(from.strike());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_foul()) {
      set_foul(from.foul());
    }
  }
}

void Tbl_RoundResult::CopyFrom(const Tbl_RoundResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbl_RoundResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void Tbl_RoundResult::Swap(Tbl_RoundResult* other) {
  if (other != this) {
    std::swap(grid2_, other->grid2_);
    std::swap(grid_, other->grid_);
    std::swap(round_number_, other->round_number_);
    std::swap(pid_better_, other->pid_better_);
    std::swap(score_, other->score_);
    std::swap(base_runner_count_, other->base_runner_count_);
    std::swap(hit_type_, other->hit_type_);
    std::swap(strike_, other->strike_);
    std::swap(foul_, other->foul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Tbl_RoundResult::GetTypeName() const {
  return "Tbl_RoundResult";
}


// ===================================================================

#ifndef _MSC_VER
const int Tbl_User::kUidFieldNumber;
const int Tbl_User::kPpidFieldNumber;
const int Tbl_User::kUnameFieldNumber;
const int Tbl_User::kPitcherTotWinFieldNumber;
const int Tbl_User::kPitcherTotLoseFieldNumber;
const int Tbl_User::kPitcherTotStrikeoutFieldNumber;
const int Tbl_User::kPitcherTotAverageLevelFieldNumber;
const int Tbl_User::kBetterTotWinFieldNumber;
const int Tbl_User::kBetterTotLoseFieldNumber;
const int Tbl_User::kBetterTotHomerunFieldNumber;
const int Tbl_User::kBetterTotAverageLevelFieldNumber;
const int Tbl_User::kCashItemBuyCountFieldNumber;
const int Tbl_User::kPlaytimeFirstFieldNumber;
const int Tbl_User::kPlaytimeLastFieldNumber;
const int Tbl_User::kPlaytimeTotFieldNumber;
#endif  // !_MSC_VER

Tbl_User::Tbl_User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Tbl_User::InitAsDefaultInstance() {
}

Tbl_User::Tbl_User(const Tbl_User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Tbl_User::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ppid_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pitcher_tot_win_ = 0;
  pitcher_tot_lose_ = 0;
  pitcher_tot_strikeout_ = 0;
  pitcher_tot_average_level_ = 0;
  better_tot_win_ = 0;
  better_tot_lose_ = 0;
  better_tot_homerun_ = 0;
  better_tot__average_level_ = 0;
  cash_item_buy_count_ = 0;
  playtime_first_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playtime_last_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playtime_tot_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tbl_User::~Tbl_User() {
  SharedDtor();
}

void Tbl_User::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    delete uname_;
  }
  if (playtime_first_ != &::google::protobuf::internal::kEmptyString) {
    delete playtime_first_;
  }
  if (playtime_last_ != &::google::protobuf::internal::kEmptyString) {
    delete playtime_last_;
  }
  if (this != default_instance_) {
  }
}

void Tbl_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tbl_User& Tbl_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_excel_5fbaseball_5ftable_2eproto();  return *default_instance_;
}

Tbl_User* Tbl_User::default_instance_ = NULL;

Tbl_User* Tbl_User::New() const {
  return new Tbl_User;
}

void Tbl_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    ppid_ = 0;
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::kEmptyString) {
        uname_->clear();
      }
    }
    pitcher_tot_win_ = 0;
    pitcher_tot_lose_ = 0;
    pitcher_tot_strikeout_ = 0;
    pitcher_tot_average_level_ = 0;
    better_tot_win_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    better_tot_lose_ = 0;
    better_tot_homerun_ = 0;
    better_tot__average_level_ = 0;
    cash_item_buy_count_ = 0;
    if (has_playtime_first()) {
      if (playtime_first_ != &::google::protobuf::internal::kEmptyString) {
        playtime_first_->clear();
      }
    }
    if (has_playtime_last()) {
      if (playtime_last_ != &::google::protobuf::internal::kEmptyString) {
        playtime_last_->clear();
      }
    }
    playtime_tot_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Tbl_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ppid;
        break;
      }
      
      // required int32 ppid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppid_)));
          set_has_ppid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uname;
        break;
      }
      
      // required string uname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pitcher_tot_win;
        break;
      }
      
      // required int32 pitcher_tot_win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_tot_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_tot_win_)));
          set_has_pitcher_tot_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pitcher_tot_lose;
        break;
      }
      
      // required int32 pitcher_tot_lose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_tot_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_tot_lose_)));
          set_has_pitcher_tot_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pitcher_tot_strikeout;
        break;
      }
      
      // required int32 pitcher_tot_strikeout = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_tot_strikeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_tot_strikeout_)));
          set_has_pitcher_tot_strikeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pitcher_tot_average_level;
        break;
      }
      
      // required int32 pitcher_tot_average_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher_tot_average_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_tot_average_level_)));
          set_has_pitcher_tot_average_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_better_tot_win;
        break;
      }
      
      // required int32 better_tot_win = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_better_tot_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &better_tot_win_)));
          set_has_better_tot_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_better_tot_lose;
        break;
      }
      
      // required int32 better_tot_lose = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_better_tot_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &better_tot_lose_)));
          set_has_better_tot_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_better_tot_homerun;
        break;
      }
      
      // required int32 better_tot_homerun = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_better_tot_homerun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &better_tot_homerun_)));
          set_has_better_tot_homerun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_better_tot__average_level;
        break;
      }
      
      // required int32 better_tot__average_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_better_tot__average_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &better_tot__average_level_)));
          set_has_better_tot__average_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cash_item_buy_count;
        break;
      }
      
      // required int32 cash_item_buy_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash_item_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_item_buy_count_)));
          set_has_cash_item_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_playtime_first;
        break;
      }
      
      // required string playtime_first = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playtime_first:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playtime_first()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_playtime_last;
        break;
      }
      
      // required string playtime_last = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playtime_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playtime_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_playtime_tot;
        break;
      }
      
      // required int64 playtime_tot = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playtime_tot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playtime_tot_)));
          set_has_playtime_tot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tbl_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required int32 ppid = 2;
  if (has_ppid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ppid(), output);
  }
  
  // required string uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uname(), output);
  }
  
  // required int32 pitcher_tot_win = 4;
  if (has_pitcher_tot_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pitcher_tot_win(), output);
  }
  
  // required int32 pitcher_tot_lose = 5;
  if (has_pitcher_tot_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pitcher_tot_lose(), output);
  }
  
  // required int32 pitcher_tot_strikeout = 6;
  if (has_pitcher_tot_strikeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pitcher_tot_strikeout(), output);
  }
  
  // required int32 pitcher_tot_average_level = 7;
  if (has_pitcher_tot_average_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pitcher_tot_average_level(), output);
  }
  
  // required int32 better_tot_win = 8;
  if (has_better_tot_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->better_tot_win(), output);
  }
  
  // required int32 better_tot_lose = 9;
  if (has_better_tot_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->better_tot_lose(), output);
  }
  
  // required int32 better_tot_homerun = 10;
  if (has_better_tot_homerun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->better_tot_homerun(), output);
  }
  
  // required int32 better_tot__average_level = 11;
  if (has_better_tot__average_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->better_tot__average_level(), output);
  }
  
  // required int32 cash_item_buy_count = 12;
  if (has_cash_item_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cash_item_buy_count(), output);
  }
  
  // required string playtime_first = 13;
  if (has_playtime_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->playtime_first(), output);
  }
  
  // required string playtime_last = 14;
  if (has_playtime_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->playtime_last(), output);
  }
  
  // required int64 playtime_tot = 15;
  if (has_playtime_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->playtime_tot(), output);
  }
  
}

int Tbl_User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required int32 ppid = 2;
    if (has_ppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppid());
    }
    
    // required string uname = 3;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }
    
    // required int32 pitcher_tot_win = 4;
    if (has_pitcher_tot_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_tot_win());
    }
    
    // required int32 pitcher_tot_lose = 5;
    if (has_pitcher_tot_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_tot_lose());
    }
    
    // required int32 pitcher_tot_strikeout = 6;
    if (has_pitcher_tot_strikeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_tot_strikeout());
    }
    
    // required int32 pitcher_tot_average_level = 7;
    if (has_pitcher_tot_average_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher_tot_average_level());
    }
    
    // required int32 better_tot_win = 8;
    if (has_better_tot_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->better_tot_win());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 better_tot_lose = 9;
    if (has_better_tot_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->better_tot_lose());
    }
    
    // required int32 better_tot_homerun = 10;
    if (has_better_tot_homerun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->better_tot_homerun());
    }
    
    // required int32 better_tot__average_level = 11;
    if (has_better_tot__average_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->better_tot__average_level());
    }
    
    // required int32 cash_item_buy_count = 12;
    if (has_cash_item_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash_item_buy_count());
    }
    
    // required string playtime_first = 13;
    if (has_playtime_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playtime_first());
    }
    
    // required string playtime_last = 14;
    if (has_playtime_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playtime_last());
    }
    
    // required int64 playtime_tot = 15;
    if (has_playtime_tot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playtime_tot());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tbl_User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tbl_User*>(&from));
}

void Tbl_User::MergeFrom(const Tbl_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ppid()) {
      set_ppid(from.ppid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_pitcher_tot_win()) {
      set_pitcher_tot_win(from.pitcher_tot_win());
    }
    if (from.has_pitcher_tot_lose()) {
      set_pitcher_tot_lose(from.pitcher_tot_lose());
    }
    if (from.has_pitcher_tot_strikeout()) {
      set_pitcher_tot_strikeout(from.pitcher_tot_strikeout());
    }
    if (from.has_pitcher_tot_average_level()) {
      set_pitcher_tot_average_level(from.pitcher_tot_average_level());
    }
    if (from.has_better_tot_win()) {
      set_better_tot_win(from.better_tot_win());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_better_tot_lose()) {
      set_better_tot_lose(from.better_tot_lose());
    }
    if (from.has_better_tot_homerun()) {
      set_better_tot_homerun(from.better_tot_homerun());
    }
    if (from.has_better_tot__average_level()) {
      set_better_tot__average_level(from.better_tot__average_level());
    }
    if (from.has_cash_item_buy_count()) {
      set_cash_item_buy_count(from.cash_item_buy_count());
    }
    if (from.has_playtime_first()) {
      set_playtime_first(from.playtime_first());
    }
    if (from.has_playtime_last()) {
      set_playtime_last(from.playtime_last());
    }
    if (from.has_playtime_tot()) {
      set_playtime_tot(from.playtime_tot());
    }
  }
}

void Tbl_User::CopyFrom(const Tbl_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbl_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  
  return true;
}

void Tbl_User::Swap(Tbl_User* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(ppid_, other->ppid_);
    std::swap(uname_, other->uname_);
    std::swap(pitcher_tot_win_, other->pitcher_tot_win_);
    std::swap(pitcher_tot_lose_, other->pitcher_tot_lose_);
    std::swap(pitcher_tot_strikeout_, other->pitcher_tot_strikeout_);
    std::swap(pitcher_tot_average_level_, other->pitcher_tot_average_level_);
    std::swap(better_tot_win_, other->better_tot_win_);
    std::swap(better_tot_lose_, other->better_tot_lose_);
    std::swap(better_tot_homerun_, other->better_tot_homerun_);
    std::swap(better_tot__average_level_, other->better_tot__average_level_);
    std::swap(cash_item_buy_count_, other->cash_item_buy_count_);
    std::swap(playtime_first_, other->playtime_first_);
    std::swap(playtime_last_, other->playtime_last_);
    std::swap(playtime_tot_, other->playtime_tot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Tbl_User::GetTypeName() const {
  return "Tbl_User";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
