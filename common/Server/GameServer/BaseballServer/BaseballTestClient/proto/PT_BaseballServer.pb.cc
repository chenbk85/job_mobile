// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PT_BaseballServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* s_ans_join_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_join_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_room_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_room_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_room_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_room_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_x2bs_echo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_x2bs_echo_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2x_echo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2x_echo_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_timer_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_timer_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_timer_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_timer_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_do_disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_do_disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_x2bs_echo2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_x2bs_echo2_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2x_echo2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2x_echo2_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_bs_error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_bs_error_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_get_cvar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_get_cvar_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_set_cvar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_set_cvar_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2ug_set_cvar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2ug_set_cvar_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ug2bs_ans_set_cvar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ug2bs_ans_set_cvar_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_x2bs_auto_match_ready2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_x2bs_auto_match_ready2_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2x_auto_match_ready2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2x_auto_match_ready2_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_game_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_game_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_game_round_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_game_round_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_x2bs_match_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_x2bs_match_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2x_match_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2x_match_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_pitcher_throw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_pitcher_throw_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_pitcher_throw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_pitcher_throw_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_better_hit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_better_hit_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_better_hit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_better_hit_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_result_better_hit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_result_better_hit_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_result_better_hit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_result_better_hit_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_x2bs_batter_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_x2bs_batter_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2x_batter_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2x_batter_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_change_attack_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_change_attack_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2x_game_end_other_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2x_game_end_other_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2ug_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2ug_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ug2bs_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ug2bs_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_user_disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_user_disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_rematch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_rematch_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_rematch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_rematch_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_req_answer_restart_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_req_answer_restart_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ans_answer_restart_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ans_answer_restart_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ug2bs_echo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ug2bs_echo_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2ug_echo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2ug_echo_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ug2bs_error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ug2bs_error_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2ug_error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2ug_error_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_bs2ug_add_discon_tot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_bs2ug_add_discon_tot_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_ug2bs_add_discon_tot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_ug2bs_add_discon_tot_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseballServer_UserGateServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseballServer_UserGateServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BaseballServer_UserGateServer_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BaseballServer_Client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseballServer_Client_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BaseballServer_Client_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserGateServer_BaseballServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGateServer_BaseballServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserGateServer_BaseballServer_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Client_BaseballServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client_BaseballServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Client_BaseballServer_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserGPS_notuse_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PT_5fBaseballServer_2eproto() {
  protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PT_BaseballServer.proto");
  GOOGLE_CHECK(file != NULL);
  s_ans_join_room_descriptor_ = file->message_type(0);
  static const int s_ans_join_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_join_room, gri_),
  };
  s_ans_join_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_join_room_descriptor_,
      s_ans_join_room::default_instance_,
      s_ans_join_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_join_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_join_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_join_room));
  s_req_room_state_descriptor_ = file->message_type(1);
  static const int s_req_room_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_room_state, room_),
  };
  s_req_room_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_room_state_descriptor_,
      s_req_room_state::default_instance_,
      s_req_room_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_room_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_room_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_room_state));
  s_ans_room_state_descriptor_ = file->message_type(2);
  static const int s_ans_room_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_room_state, gri_),
  };
  s_ans_room_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_room_state_descriptor_,
      s_ans_room_state::default_instance_,
      s_ans_room_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_room_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_room_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_room_state));
  s_x2bs_echo_descriptor_ = file->message_type(3);
  static const int s_x2bs_echo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo, client_time_msec_),
  };
  s_x2bs_echo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_x2bs_echo_descriptor_,
      s_x2bs_echo::default_instance_,
      s_x2bs_echo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_x2bs_echo));
  s_bs2x_echo_descriptor_ = file->message_type(4);
  static const int s_bs2x_echo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo, client_time_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo, bs_time_msec_),
  };
  s_bs2x_echo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2x_echo_descriptor_,
      s_bs2x_echo::default_instance_,
      s_bs2x_echo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2x_echo));
  s_req_chat_descriptor_ = file->message_type(5);
  static const int s_req_chat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_chat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_chat, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_chat, etc_),
  };
  s_req_chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_chat_descriptor_,
      s_req_chat::default_instance_,
      s_req_chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_chat));
  s_ans_chat_descriptor_ = file->message_type(6);
  static const int s_ans_chat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_chat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_chat, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_chat, etc_),
  };
  s_ans_chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_chat_descriptor_,
      s_ans_chat::default_instance_,
      s_ans_chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_chat));
  s_ans_timer_start_descriptor_ = file->message_type(7);
  static const int s_ans_timer_start_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_timer_start, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_timer_start, msg_),
  };
  s_ans_timer_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_timer_start_descriptor_,
      s_ans_timer_start::default_instance_,
      s_ans_timer_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_timer_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_timer_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_timer_start));
  s_req_timer_start_descriptor_ = file->message_type(8);
  static const int s_req_timer_start_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_timer_start, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_timer_start, msg_),
  };
  s_req_timer_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_timer_start_descriptor_,
      s_req_timer_start::default_instance_,
      s_req_timer_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_timer_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_timer_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_timer_start));
  s_req_do_disconnect_descriptor_ = file->message_type(9);
  static const int s_req_do_disconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_do_disconnect, reason_),
  };
  s_req_do_disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_do_disconnect_descriptor_,
      s_req_do_disconnect::default_instance_,
      s_req_do_disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_do_disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_do_disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_do_disconnect));
  s_x2bs_echo2_descriptor_ = file->message_type(10);
  static const int s_x2bs_echo2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo2, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo2, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo2, client_time_msec_),
  };
  s_x2bs_echo2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_x2bs_echo2_descriptor_,
      s_x2bs_echo2::default_instance_,
      s_x2bs_echo2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_echo2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_x2bs_echo2));
  s_bs2x_echo2_descriptor_ = file->message_type(11);
  static const int s_bs2x_echo2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo2, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo2, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo2, client_time_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo2, bs_time_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo2, etc_),
  };
  s_bs2x_echo2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2x_echo2_descriptor_,
      s_bs2x_echo2::default_instance_,
      s_bs2x_echo2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_echo2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2x_echo2));
  s_ans_bs_error_descriptor_ = file->message_type(12);
  static const int s_ans_bs_error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_bs_error, sys_error_id_),
  };
  s_ans_bs_error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_bs_error_descriptor_,
      s_ans_bs_error::default_instance_,
      s_ans_bs_error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_bs_error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_bs_error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_bs_error));
  s_req_get_cvar_descriptor_ = file->message_type(13);
  static const int s_req_get_cvar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_get_cvar, name_),
  };
  s_req_get_cvar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_get_cvar_descriptor_,
      s_req_get_cvar::default_instance_,
      s_req_get_cvar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_get_cvar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_get_cvar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_get_cvar));
  s_req_set_cvar_descriptor_ = file->message_type(14);
  static const int s_req_set_cvar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_set_cvar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_set_cvar, val_),
  };
  s_req_set_cvar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_set_cvar_descriptor_,
      s_req_set_cvar::default_instance_,
      s_req_set_cvar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_set_cvar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_set_cvar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_set_cvar));
  s_bs2ug_set_cvar_descriptor_ = file->message_type(15);
  static const int s_bs2ug_set_cvar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_set_cvar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_set_cvar, val_),
  };
  s_bs2ug_set_cvar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2ug_set_cvar_descriptor_,
      s_bs2ug_set_cvar::default_instance_,
      s_bs2ug_set_cvar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_set_cvar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_set_cvar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2ug_set_cvar));
  s_ug2bs_ans_set_cvar_descriptor_ = file->message_type(16);
  static const int s_ug2bs_ans_set_cvar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_ans_set_cvar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_ans_set_cvar, val_),
  };
  s_ug2bs_ans_set_cvar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ug2bs_ans_set_cvar_descriptor_,
      s_ug2bs_ans_set_cvar::default_instance_,
      s_ug2bs_ans_set_cvar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_ans_set_cvar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_ans_set_cvar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ug2bs_ans_set_cvar));
  s_x2bs_auto_match_ready2_descriptor_ = file->message_type(17);
  static const int s_x2bs_auto_match_ready2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_auto_match_ready2, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_auto_match_ready2, batter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_auto_match_ready2, pitcher_),
  };
  s_x2bs_auto_match_ready2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_x2bs_auto_match_ready2_descriptor_,
      s_x2bs_auto_match_ready2::default_instance_,
      s_x2bs_auto_match_ready2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_auto_match_ready2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_auto_match_ready2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_x2bs_auto_match_ready2));
  s_bs2x_auto_match_ready2_descriptor_ = file->message_type(18);
  static const int s_bs2x_auto_match_ready2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_auto_match_ready2, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_auto_match_ready2, batter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_auto_match_ready2, pitcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_auto_match_ready2, other_batter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_auto_match_ready2, other_pitcher_),
  };
  s_bs2x_auto_match_ready2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2x_auto_match_ready2_descriptor_,
      s_bs2x_auto_match_ready2::default_instance_,
      s_bs2x_auto_match_ready2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_auto_match_ready2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_auto_match_ready2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2x_auto_match_ready2));
  s_ans_game_start_descriptor_ = file->message_type(19);
  static const int s_ans_game_start_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_start, attack_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_start, sid_sys_runner_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_start, baseball_park_),
  };
  s_ans_game_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_game_start_descriptor_,
      s_ans_game_start::default_instance_,
      s_ans_game_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_game_start));
  s_ans_game_round_start_descriptor_ = file->message_type(20);
  static const int s_ans_game_round_start_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_round_start, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_round_start, runner_state_),
  };
  s_ans_game_round_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_game_round_start_descriptor_,
      s_ans_game_round_start::default_instance_,
      s_ans_game_round_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_round_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_round_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_game_round_start));
  s_x2bs_match_ready_descriptor_ = file->message_type(21);
  static const int s_x2bs_match_ready_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_match_ready, uid_),
  };
  s_x2bs_match_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_x2bs_match_ready_descriptor_,
      s_x2bs_match_ready::default_instance_,
      s_x2bs_match_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_match_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_match_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_x2bs_match_ready));
  s_bs2x_match_ready_descriptor_ = file->message_type(22);
  static const int s_bs2x_match_ready_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_match_ready, uid_),
  };
  s_bs2x_match_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2x_match_ready_descriptor_,
      s_bs2x_match_ready::default_instance_,
      s_bs2x_match_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_match_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_match_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2x_match_ready));
  s_req_pitcher_throw_descriptor_ = file->message_type(23);
  static const int s_req_pitcher_throw_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_pitcher_throw, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_pitcher_throw, used_gesturetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_pitcher_throw, gesturetype_input_error_),
  };
  s_req_pitcher_throw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_pitcher_throw_descriptor_,
      s_req_pitcher_throw::default_instance_,
      s_req_pitcher_throw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_pitcher_throw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_pitcher_throw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_pitcher_throw));
  s_ans_pitcher_throw_descriptor_ = file->message_type(24);
  static const int s_ans_pitcher_throw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_pitcher_throw, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_pitcher_throw, is_auto_),
  };
  s_ans_pitcher_throw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_pitcher_throw_descriptor_,
      s_ans_pitcher_throw::default_instance_,
      s_ans_pitcher_throw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_pitcher_throw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_pitcher_throw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_pitcher_throw));
  s_req_better_hit_descriptor_ = file->message_type(25);
  static const int s_req_better_hit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_better_hit, info_),
  };
  s_req_better_hit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_better_hit_descriptor_,
      s_req_better_hit::default_instance_,
      s_req_better_hit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_better_hit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_better_hit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_better_hit));
  s_ans_better_hit_descriptor_ = file->message_type(26);
  static const int s_ans_better_hit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_better_hit, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_better_hit, is_auto_),
  };
  s_ans_better_hit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_better_hit_descriptor_,
      s_ans_better_hit::default_instance_,
      s_ans_better_hit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_better_hit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_better_hit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_better_hit));
  s_req_result_better_hit_descriptor_ = file->message_type(27);
  static const int s_req_result_better_hit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_result_better_hit, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_result_better_hit, test_),
  };
  s_req_result_better_hit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_result_better_hit_descriptor_,
      s_req_result_better_hit::default_instance_,
      s_req_result_better_hit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_result_better_hit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_result_better_hit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_result_better_hit));
  s_ans_result_better_hit_descriptor_ = file->message_type(28);
  static const int s_ans_result_better_hit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_result_better_hit, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_result_better_hit, end_type_),
  };
  s_ans_result_better_hit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_result_better_hit_descriptor_,
      s_ans_result_better_hit::default_instance_,
      s_ans_result_better_hit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_result_better_hit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_result_better_hit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_result_better_hit));
  s_x2bs_batter_ready_descriptor_ = file->message_type(29);
  static const int s_x2bs_batter_ready_offsets_[1] = {
  };
  s_x2bs_batter_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_x2bs_batter_ready_descriptor_,
      s_x2bs_batter_ready::default_instance_,
      s_x2bs_batter_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_batter_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_x2bs_batter_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_x2bs_batter_ready));
  s_bs2x_batter_ready_descriptor_ = file->message_type(30);
  static const int s_bs2x_batter_ready_offsets_[1] = {
  };
  s_bs2x_batter_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2x_batter_ready_descriptor_,
      s_bs2x_batter_ready::default_instance_,
      s_bs2x_batter_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_batter_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_batter_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2x_batter_ready));
  s_ans_change_attack_team_descriptor_ = file->message_type(31);
  static const int s_ans_change_attack_team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_change_attack_team, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_change_attack_team, attack_user_),
  };
  s_ans_change_attack_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_change_attack_team_descriptor_,
      s_ans_change_attack_team::default_instance_,
      s_ans_change_attack_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_change_attack_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_change_attack_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_change_attack_team));
  s_ans_game_end_descriptor_ = file->message_type(32);
  static const int s_ans_game_end_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_end, rg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_end, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_end, end_type_),
  };
  s_ans_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_game_end_descriptor_,
      s_ans_game_end::default_instance_,
      s_ans_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_game_end));
  s_bs2x_game_end_other_user_info_descriptor_ = file->message_type(33);
  static const int s_bs2x_game_end_other_user_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_game_end_other_user_info, other_user_),
  };
  s_bs2x_game_end_other_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2x_game_end_other_user_info_descriptor_,
      s_bs2x_game_end_other_user_info::default_instance_,
      s_bs2x_game_end_other_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_game_end_other_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2x_game_end_other_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2x_game_end_other_user_info));
  s_bs2ug_game_end_descriptor_ = file->message_type(34);
  static const int s_bs2ug_game_end_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_game_end, rg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_game_end, is_better_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_game_end, rr_),
  };
  s_bs2ug_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2ug_game_end_descriptor_,
      s_bs2ug_game_end::default_instance_,
      s_bs2ug_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2ug_game_end));
  s_ug2bs_game_end_descriptor_ = file->message_type(35);
  static const int s_ug2bs_game_end_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_game_end, rg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_game_end, user_),
  };
  s_ug2bs_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ug2bs_game_end_descriptor_,
      s_ug2bs_game_end::default_instance_,
      s_ug2bs_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ug2bs_game_end));
  s_ans_user_disconnect_descriptor_ = file->message_type(36);
  static const int s_ans_user_disconnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_user_disconnect, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_user_disconnect, sys_error_id_),
  };
  s_ans_user_disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_user_disconnect_descriptor_,
      s_ans_user_disconnect::default_instance_,
      s_ans_user_disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_user_disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_user_disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_user_disconnect));
  s_req_rematch_descriptor_ = file->message_type(37);
  static const int s_req_rematch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_rematch, uid_),
  };
  s_req_rematch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_rematch_descriptor_,
      s_req_rematch::default_instance_,
      s_req_rematch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_rematch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_rematch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_rematch));
  s_ans_rematch_descriptor_ = file->message_type(38);
  static const int s_ans_rematch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_rematch, uid_),
  };
  s_ans_rematch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_rematch_descriptor_,
      s_ans_rematch::default_instance_,
      s_ans_rematch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_rematch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_rematch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_rematch));
  s_req_answer_restart_game_descriptor_ = file->message_type(39);
  static const int s_req_answer_restart_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_answer_restart_game, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_answer_restart_game, ok_),
  };
  s_req_answer_restart_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_req_answer_restart_game_descriptor_,
      s_req_answer_restart_game::default_instance_,
      s_req_answer_restart_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_answer_restart_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_req_answer_restart_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_req_answer_restart_game));
  s_ans_answer_restart_game_descriptor_ = file->message_type(40);
  static const int s_ans_answer_restart_game_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_answer_restart_game, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_answer_restart_game, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_answer_restart_game, baseball_park_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_answer_restart_game, attack_user_),
  };
  s_ans_answer_restart_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ans_answer_restart_game_descriptor_,
      s_ans_answer_restart_game::default_instance_,
      s_ans_answer_restart_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_answer_restart_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ans_answer_restart_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ans_answer_restart_game));
  s_ug2bs_echo_descriptor_ = file->message_type(41);
  static const int s_ug2bs_echo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_echo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_echo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_echo, bs_time_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_echo, ug_time_msec_),
  };
  s_ug2bs_echo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ug2bs_echo_descriptor_,
      s_ug2bs_echo::default_instance_,
      s_ug2bs_echo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_echo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_echo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ug2bs_echo));
  s_bs2ug_echo_descriptor_ = file->message_type(42);
  static const int s_bs2ug_echo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_echo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_echo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_echo, bs_time_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_echo, ug_time_msec_),
  };
  s_bs2ug_echo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2ug_echo_descriptor_,
      s_bs2ug_echo::default_instance_,
      s_bs2ug_echo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_echo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_echo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2ug_echo));
  s_ug2bs_error_descriptor_ = file->message_type(43);
  static const int s_ug2bs_error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_error, sys_error_id_),
  };
  s_ug2bs_error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ug2bs_error_descriptor_,
      s_ug2bs_error::default_instance_,
      s_ug2bs_error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ug2bs_error));
  s_bs2ug_error_descriptor_ = file->message_type(44);
  static const int s_bs2ug_error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_error, sys_error_id_),
  };
  s_bs2ug_error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2ug_error_descriptor_,
      s_bs2ug_error::default_instance_,
      s_bs2ug_error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2ug_error));
  s_bs2ug_add_discon_tot_descriptor_ = file->message_type(45);
  static const int s_bs2ug_add_discon_tot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_add_discon_tot, discon_uid_),
  };
  s_bs2ug_add_discon_tot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_bs2ug_add_discon_tot_descriptor_,
      s_bs2ug_add_discon_tot::default_instance_,
      s_bs2ug_add_discon_tot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_add_discon_tot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_bs2ug_add_discon_tot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_bs2ug_add_discon_tot));
  s_ug2bs_add_discon_tot_descriptor_ = file->message_type(46);
  static const int s_ug2bs_add_discon_tot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_add_discon_tot, discon_uid_),
  };
  s_ug2bs_add_discon_tot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_ug2bs_add_discon_tot_descriptor_,
      s_ug2bs_add_discon_tot::default_instance_,
      s_ug2bs_add_discon_tot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_add_discon_tot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_ug2bs_add_discon_tot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_ug2bs_add_discon_tot));
  BaseballServer_UserGateServer_descriptor_ = file->message_type(47);
  static const int BaseballServer_UserGateServer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_UserGateServer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_UserGateServer, m_bs2ug_set_cvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_UserGateServer, m_bs2ug_game_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_UserGateServer, m_bs2ug_echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_UserGateServer, m_bs2ug_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_UserGateServer, m_bs2ug_add_discon_tot_),
  };
  BaseballServer_UserGateServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseballServer_UserGateServer_descriptor_,
      BaseballServer_UserGateServer::default_instance_,
      BaseballServer_UserGateServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_UserGateServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_UserGateServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseballServer_UserGateServer));
  BaseballServer_UserGateServer_Type_descriptor_ = BaseballServer_UserGateServer_descriptor_->enum_type(0);
  BaseballServer_Client_descriptor_ = file->message_type(48);
  static const int BaseballServer_Client_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_join_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_bs2x_echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_timer_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_bs2x_echo2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_bs_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_bs2x_auto_match_ready2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_game_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_game_round_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_bs2x_match_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_pitcher_throw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_better_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_result_better_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_bs2x_batter_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_change_attack_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_game_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_bs2x_game_end_other_user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_user_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_rematch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, m_ans_answer_restart_game_),
  };
  BaseballServer_Client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseballServer_Client_descriptor_,
      BaseballServer_Client::default_instance_,
      BaseballServer_Client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseballServer_Client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseballServer_Client));
  BaseballServer_Client_Type_descriptor_ = BaseballServer_Client_descriptor_->enum_type(0);
  UserGateServer_BaseballServer_descriptor_ = file->message_type(49);
  static const int UserGateServer_BaseballServer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_BaseballServer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_BaseballServer, m_ug2bs_ans_set_cvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_BaseballServer, m_ug2bs_game_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_BaseballServer, m_ug2bs_echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_BaseballServer, m_ug2bs_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_BaseballServer, m_ug2bs_add_discon_tot_),
  };
  UserGateServer_BaseballServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGateServer_BaseballServer_descriptor_,
      UserGateServer_BaseballServer::default_instance_,
      UserGateServer_BaseballServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_BaseballServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGateServer_BaseballServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGateServer_BaseballServer));
  UserGateServer_BaseballServer_Type_descriptor_ = UserGateServer_BaseballServer_descriptor_->enum_type(0);
  Client_BaseballServer_descriptor_ = file->message_type(50);
  static const int Client_BaseballServer_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_x2bs_echo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_timer_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_do_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_x2bs_echo2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_get_cvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_set_cvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_x2bs_auto_match_ready2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_x2bs_match_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_pitcher_throw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_better_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_result_better_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_x2bs_batter_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_rematch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, m_req_answer_restart_game_),
  };
  Client_BaseballServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client_BaseballServer_descriptor_,
      Client_BaseballServer::default_instance_,
      Client_BaseballServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_BaseballServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client_BaseballServer));
  Client_BaseballServer_Type_descriptor_ = Client_BaseballServer_descriptor_->enum_type(0);
  EUserGPS_notuse_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PT_5fBaseballServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_join_room_descriptor_, &s_ans_join_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_room_state_descriptor_, &s_req_room_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_room_state_descriptor_, &s_ans_room_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_x2bs_echo_descriptor_, &s_x2bs_echo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2x_echo_descriptor_, &s_bs2x_echo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_chat_descriptor_, &s_req_chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_chat_descriptor_, &s_ans_chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_timer_start_descriptor_, &s_ans_timer_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_timer_start_descriptor_, &s_req_timer_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_do_disconnect_descriptor_, &s_req_do_disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_x2bs_echo2_descriptor_, &s_x2bs_echo2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2x_echo2_descriptor_, &s_bs2x_echo2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_bs_error_descriptor_, &s_ans_bs_error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_get_cvar_descriptor_, &s_req_get_cvar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_set_cvar_descriptor_, &s_req_set_cvar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2ug_set_cvar_descriptor_, &s_bs2ug_set_cvar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ug2bs_ans_set_cvar_descriptor_, &s_ug2bs_ans_set_cvar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_x2bs_auto_match_ready2_descriptor_, &s_x2bs_auto_match_ready2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2x_auto_match_ready2_descriptor_, &s_bs2x_auto_match_ready2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_game_start_descriptor_, &s_ans_game_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_game_round_start_descriptor_, &s_ans_game_round_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_x2bs_match_ready_descriptor_, &s_x2bs_match_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2x_match_ready_descriptor_, &s_bs2x_match_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_pitcher_throw_descriptor_, &s_req_pitcher_throw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_pitcher_throw_descriptor_, &s_ans_pitcher_throw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_better_hit_descriptor_, &s_req_better_hit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_better_hit_descriptor_, &s_ans_better_hit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_result_better_hit_descriptor_, &s_req_result_better_hit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_result_better_hit_descriptor_, &s_ans_result_better_hit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_x2bs_batter_ready_descriptor_, &s_x2bs_batter_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2x_batter_ready_descriptor_, &s_bs2x_batter_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_change_attack_team_descriptor_, &s_ans_change_attack_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_game_end_descriptor_, &s_ans_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2x_game_end_other_user_info_descriptor_, &s_bs2x_game_end_other_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2ug_game_end_descriptor_, &s_bs2ug_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ug2bs_game_end_descriptor_, &s_ug2bs_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_user_disconnect_descriptor_, &s_ans_user_disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_rematch_descriptor_, &s_req_rematch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_rematch_descriptor_, &s_ans_rematch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_req_answer_restart_game_descriptor_, &s_req_answer_restart_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ans_answer_restart_game_descriptor_, &s_ans_answer_restart_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ug2bs_echo_descriptor_, &s_ug2bs_echo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2ug_echo_descriptor_, &s_bs2ug_echo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ug2bs_error_descriptor_, &s_ug2bs_error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2ug_error_descriptor_, &s_bs2ug_error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_bs2ug_add_discon_tot_descriptor_, &s_bs2ug_add_discon_tot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_ug2bs_add_discon_tot_descriptor_, &s_ug2bs_add_discon_tot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseballServer_UserGateServer_descriptor_, &BaseballServer_UserGateServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseballServer_Client_descriptor_, &BaseballServer_Client::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGateServer_BaseballServer_descriptor_, &UserGateServer_BaseballServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client_BaseballServer_descriptor_, &Client_BaseballServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PT_5fBaseballServer_2eproto() {
  delete s_ans_join_room::default_instance_;
  delete s_ans_join_room_reflection_;
  delete s_req_room_state::default_instance_;
  delete s_req_room_state_reflection_;
  delete s_ans_room_state::default_instance_;
  delete s_ans_room_state_reflection_;
  delete s_x2bs_echo::default_instance_;
  delete s_x2bs_echo_reflection_;
  delete s_bs2x_echo::default_instance_;
  delete s_bs2x_echo_reflection_;
  delete s_req_chat::default_instance_;
  delete s_req_chat_reflection_;
  delete s_ans_chat::default_instance_;
  delete s_ans_chat_reflection_;
  delete s_ans_timer_start::default_instance_;
  delete s_ans_timer_start_reflection_;
  delete s_req_timer_start::default_instance_;
  delete s_req_timer_start_reflection_;
  delete s_req_do_disconnect::default_instance_;
  delete s_req_do_disconnect_reflection_;
  delete s_x2bs_echo2::default_instance_;
  delete s_x2bs_echo2_reflection_;
  delete s_bs2x_echo2::default_instance_;
  delete s_bs2x_echo2_reflection_;
  delete s_ans_bs_error::default_instance_;
  delete s_ans_bs_error_reflection_;
  delete s_req_get_cvar::default_instance_;
  delete s_req_get_cvar_reflection_;
  delete s_req_set_cvar::default_instance_;
  delete s_req_set_cvar_reflection_;
  delete s_bs2ug_set_cvar::default_instance_;
  delete s_bs2ug_set_cvar_reflection_;
  delete s_ug2bs_ans_set_cvar::default_instance_;
  delete s_ug2bs_ans_set_cvar_reflection_;
  delete s_x2bs_auto_match_ready2::default_instance_;
  delete s_x2bs_auto_match_ready2_reflection_;
  delete s_bs2x_auto_match_ready2::default_instance_;
  delete s_bs2x_auto_match_ready2_reflection_;
  delete s_ans_game_start::default_instance_;
  delete s_ans_game_start_reflection_;
  delete s_ans_game_round_start::default_instance_;
  delete s_ans_game_round_start_reflection_;
  delete s_x2bs_match_ready::default_instance_;
  delete s_x2bs_match_ready_reflection_;
  delete s_bs2x_match_ready::default_instance_;
  delete s_bs2x_match_ready_reflection_;
  delete s_req_pitcher_throw::default_instance_;
  delete s_req_pitcher_throw_reflection_;
  delete s_ans_pitcher_throw::default_instance_;
  delete s_ans_pitcher_throw_reflection_;
  delete s_req_better_hit::default_instance_;
  delete s_req_better_hit_reflection_;
  delete s_ans_better_hit::default_instance_;
  delete s_ans_better_hit_reflection_;
  delete s_req_result_better_hit::default_instance_;
  delete s_req_result_better_hit_reflection_;
  delete s_ans_result_better_hit::default_instance_;
  delete s_ans_result_better_hit_reflection_;
  delete s_x2bs_batter_ready::default_instance_;
  delete s_x2bs_batter_ready_reflection_;
  delete s_bs2x_batter_ready::default_instance_;
  delete s_bs2x_batter_ready_reflection_;
  delete s_ans_change_attack_team::default_instance_;
  delete s_ans_change_attack_team_reflection_;
  delete s_ans_game_end::default_instance_;
  delete s_ans_game_end_reflection_;
  delete s_bs2x_game_end_other_user_info::default_instance_;
  delete s_bs2x_game_end_other_user_info_reflection_;
  delete s_bs2ug_game_end::default_instance_;
  delete s_bs2ug_game_end_reflection_;
  delete s_ug2bs_game_end::default_instance_;
  delete s_ug2bs_game_end_reflection_;
  delete s_ans_user_disconnect::default_instance_;
  delete s_ans_user_disconnect_reflection_;
  delete s_req_rematch::default_instance_;
  delete s_req_rematch_reflection_;
  delete s_ans_rematch::default_instance_;
  delete s_ans_rematch_reflection_;
  delete s_req_answer_restart_game::default_instance_;
  delete s_req_answer_restart_game_reflection_;
  delete s_ans_answer_restart_game::default_instance_;
  delete s_ans_answer_restart_game_reflection_;
  delete s_ug2bs_echo::default_instance_;
  delete s_ug2bs_echo_reflection_;
  delete s_bs2ug_echo::default_instance_;
  delete s_bs2ug_echo_reflection_;
  delete s_ug2bs_error::default_instance_;
  delete s_ug2bs_error_reflection_;
  delete s_bs2ug_error::default_instance_;
  delete s_bs2ug_error_reflection_;
  delete s_bs2ug_add_discon_tot::default_instance_;
  delete s_bs2ug_add_discon_tot_reflection_;
  delete s_ug2bs_add_discon_tot::default_instance_;
  delete s_ug2bs_add_discon_tot_reflection_;
  delete BaseballServer_UserGateServer::default_instance_;
  delete BaseballServer_UserGateServer_reflection_;
  delete BaseballServer_Client::default_instance_;
  delete BaseballServer_Client_reflection_;
  delete UserGateServer_BaseballServer::default_instance_;
  delete UserGateServer_BaseballServer_reflection_;
  delete Client_BaseballServer::default_instance_;
  delete Client_BaseballServer_reflection_;
}

void protobuf_AddDesc_PT_5fBaseballServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  ::protobuf_AddDesc_gameLogic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027PT_BaseballServer.proto\032\035excel_basebal"
    "l_table_db.proto\032\017gameLogic.proto\"-\n\017s_a"
    "ns_join_room\022\032\n\003gri\030\001 \001(\0132\r.GameRoomInfo"
    "\" \n\020s_req_room_state\022\014\n\004room\030\001 \001(\005\".\n\020s_"
    "ans_room_state\022\032\n\003gri\030\001 \001(\0132\r.GameRoomIn"
    "fo\"B\n\013s_x2bs_echo\022\014\n\004type\030\001 \001(\005\022\013\n\003msg\030\002"
    " \001(\t\022\030\n\020client_time_msec\030\003 \001(\005\"X\n\013s_bs2x"
    "_echo\022\014\n\004type\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\030\n\020clie"
    "nt_time_msec\030\003 \001(\005\022\024\n\014bs_time_msec\030\004 \001(\003"
    "\"4\n\ns_req_chat\022\014\n\004type\030\001 \001(\005\022\013\n\003msg\030\002 \001("
    "\t\022\013\n\003etc\030\003 \001(\t\"4\n\ns_ans_chat\022\014\n\004type\030\001 \001"
    "(\005\022\013\n\003msg\030\002 \001(\t\022\013\n\003etc\030\003 \001(\t\"/\n\021s_ans_ti"
    "mer_start\022\r\n\005count\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\".\n"
    "\021s_req_timer_start\022\014\n\004term\030\001 \001(\005\022\013\n\003msg\030"
    "\002 \001(\t\"%\n\023s_req_do_disconnect\022\016\n\006reason\030\001"
    " \001(\t\"C\n\014s_x2bs_echo2\022\014\n\004type\030\001 \001(\005\022\013\n\003ms"
    "g\030\002 \001(\t\022\030\n\020client_time_msec\030\003 \001(\005\"f\n\014s_b"
    "s2x_echo2\022\014\n\004type\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\030\n\020"
    "client_time_msec\030\003 \001(\005\022\024\n\014bs_time_msec\030\004"
    " \001(\003\022\013\n\003etc\030\005 \001(\005\"&\n\016s_ans_bs_error\022\024\n\014s"
    "ys_error_id\030\001 \001(\005\"\036\n\016s_req_get_cvar\022\014\n\004n"
    "ame\030\001 \001(\t\"+\n\016s_req_set_cvar\022\014\n\004name\030\001 \001("
    "\t\022\013\n\003val\030\002 \001(\t\"-\n\020s_bs2ug_set_cvar\022\014\n\004na"
    "me\030\001 \001(\t\022\013\n\003val\030\002 \001(\t\"1\n\024s_ug2bs_ans_set"
    "_cvar\022\014\n\004name\030\001 \001(\t\022\013\n\003val\030\002 \001(\t\"H\n\030s_x2"
    "bs_auto_match_ready2\022\013\n\003uid\030\001 \001(\003\022\016\n\006bat"
    "ter\030\002 \001(\005\022\017\n\007pitcher\030\003 \001(\005\"u\n\030s_bs2x_aut"
    "o_match_ready2\022\013\n\003uid\030\001 \001(\003\022\016\n\006batter\030\002 "
    "\001(\005\022\017\n\007pitcher\030\003 \001(\005\022\024\n\014other_batter\030\004 \001"
    "(\005\022\025\n\rother_pitcher\030\005 \001(\005\"\\\n\020s_ans_game_"
    "start\022\023\n\013attack_user\030\001 \001(\003\022\034\n\024sid_Sys_Ru"
    "nner_State\030\002 \001(\005\022\025\n\rbaseball_park\030\003 \001(\005\""
    "=\n\026s_ans_game_round_start\022\r\n\005round\030\001 \001(\005"
    "\022\024\n\014runner_state\030\002 \001(\005\"!\n\022s_x2bs_match_r"
    "eady\022\013\n\003uid\030\001 \001(\003\"!\n\022s_bs2x_match_ready\022"
    "\013\n\003uid\030\001 \001(\003\"u\n\023s_req_pitcher_throw\022#\n\004i"
    "nfo\030\001 \001(\0132\025.s_pitcher_throw_info\022\030\n\020used"
    "_gesturetype\030\002 \001(\005\022\037\n\027gesturetype_input_"
    "error\030\003 \001(\005\"K\n\023s_ans_pitcher_throw\022#\n\004in"
    "fo\030\001 \001(\0132\025.s_pitcher_throw_info\022\017\n\007is_au"
    "to\030\002 \001(\010\"4\n\020s_req_better_hit\022 \n\004info\030\001 \001"
    "(\0132\022.s_better_hit_info\"E\n\020s_ans_better_h"
    "it\022 \n\004info\030\001 \001(\0132\022.s_better_hit_info\022\017\n\007"
    "is_auto\030\002 \001(\010\"F\n\027s_req_result_better_hit"
    "\022\035\n\004info\030\001 \001(\0132\017.s_result_round\022\014\n\004test\030"
    "\002 \001(\005\"J\n\027s_ans_result_better_hit\022\035\n\004info"
    "\030\001 \001(\0132\017.s_result_round\022\020\n\010end_type\030\002 \001("
    "\005\"\025\n\023s_x2bs_batter_ready\"\025\n\023s_bs2x_batte"
    "r_ready\">\n\030s_ans_change_attack_team\022\r\n\005r"
    "ound\030\001 \001(\005\022\023\n\013attack_user\030\002 \001(\003\"Y\n\016s_ans"
    "_game_end\022\032\n\002rg\030\001 \001(\0132\016.s_result_game\022\031\n"
    "\004user\030\002 \001(\0132\013.s_tbl_user\022\020\n\010end_type\030\003 \001"
    "(\005\"B\n\037s_bs2x_game_end_other_user_info\022\037\n"
    "\nother_user\030\001 \001(\0132\013.s_tbl_user\"^\n\020s_bs2u"
    "g_game_end\022\032\n\002rg\030\001 \001(\0132\016.s_result_game\022\021"
    "\n\tis_better\030\002 \001(\010\022\033\n\002rr\030\003 \003(\0132\017.s_result"
    "_round\"I\n\020s_ug2bs_game_end\022\032\n\002rg\030\001 \001(\0132\016"
    ".s_result_game\022\031\n\004user\030\002 \001(\0132\013.s_tbl_use"
    "r\":\n\025s_ans_user_disconnect\022\013\n\003uid\030\001 \001(\003\022"
    "\024\n\014sys_error_id\030\002 \001(\005\"\034\n\rs_req_rematch\022\013"
    "\n\003uid\030\001 \001(\003\"\034\n\rs_ans_rematch\022\013\n\003uid\030\001 \001("
    "\003\"4\n\031s_req_answer_restart_game\022\013\n\003uid\030\001 "
    "\001(\003\022\n\n\002ok\030\002 \001(\010\"`\n\031s_ans_answer_restart_"
    "game\022\013\n\003uid\030\001 \003(\003\022\n\n\002ok\030\002 \003(\010\022\025\n\rbasebal"
    "l_park\030\003 \001(\005\022\023\n\013attack_user\030\004 \001(\003\"U\n\014s_u"
    "g2bs_echo\022\014\n\004type\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\024\n\014"
    "bs_time_msec\030\003 \001(\003\022\024\n\014ug_time_msec\030\004 \001(\003"
    "\"U\n\014s_bs2ug_echo\022\014\n\004type\030\001 \001(\005\022\013\n\003msg\030\002 "
    "\001(\t\022\024\n\014bs_time_msec\030\003 \001(\003\022\024\n\014ug_time_mse"
    "c\030\004 \001(\003\"%\n\rs_ug2bs_error\022\024\n\014sys_error_id"
    "\030\001 \001(\005\"%\n\rs_bs2ug_error\022\024\n\014sys_error_id\030"
    "\001 \001(\005\",\n\026s_bs2ug_add_discon_tot\022\022\n\ndisco"
    "n_uid\030\001 \001(\003\",\n\026s_ug2bs_add_discon_tot\022\022\n"
    "\ndiscon_uid\030\001 \001(\003\"\246\003\n\035BaseballServer_Use"
    "rGateServer\0221\n\004type\030\001 \002(\0162#.BaseballServ"
    "er_UserGateServer.Type\022+\n\020m_bs2ug_set_cv"
    "ar\030\002 \001(\0132\021.s_bs2ug_set_cvar\022+\n\020m_bs2ug_g"
    "ame_end\030\003 \001(\0132\021.s_bs2ug_game_end\022#\n\014m_bs"
    "2ug_echo\030\004 \001(\0132\r.s_bs2ug_echo\022%\n\rm_bs2ug"
    "_error\030\005 \001(\0132\016.s_bs2ug_error\0227\n\026m_bs2ug_"
    "add_discon_tot\030\006 \001(\0132\027.s_bs2ug_add_disco"
    "n_tot\"s\n\004Type\022\010\n\004NONE\020\001\022\022\n\016bs2ug_set_cva"
    "r\020\002\022\022\n\016bs2ug_game_end\020\003\022\016\n\nbs2ug_echo\020\004\022"
    "\017\n\013bs2ug_error\020\005\022\030\n\024bs2ug_add_discon_tot"
    "\020\006\"\256\014\n\025BaseballServer_Client\022)\n\004type\030\001 \002"
    "(\0162\033.BaseballServer_Client.Type\022)\n\017m_ans"
    "_join_room\030\002 \001(\0132\020.s_ans_join_room\022+\n\020m_"
    "ans_room_state\030\003 \001(\0132\021.s_ans_room_state\022"
    "!\n\013m_bs2x_echo\030\004 \001(\0132\014.s_bs2x_echo\022\037\n\nm_"
    "ans_chat\030\005 \001(\0132\013.s_ans_chat\022-\n\021m_ans_tim"
    "er_start\030\006 \001(\0132\022.s_ans_timer_start\022#\n\014m_"
    "bs2x_echo2\030\007 \001(\0132\r.s_bs2x_echo2\022\'\n\016m_ans"
    "_bs_error\030\010 \001(\0132\017.s_ans_bs_error\022;\n\030m_bs"
    "2x_auto_match_ready2\030\t \001(\0132\031.s_bs2x_auto"
    "_match_ready2\022+\n\020m_ans_game_start\030\n \001(\0132"
    "\021.s_ans_game_start\0227\n\026m_ans_game_round_s"
    "tart\030\013 \001(\0132\027.s_ans_game_round_start\022/\n\022m"
    "_bs2x_match_ready\030\014 \001(\0132\023.s_bs2x_match_r"
    "eady\0221\n\023m_ans_pitcher_throw\030\r \001(\0132\024.s_an"
    "s_pitcher_throw\022+\n\020m_ans_better_hit\030\016 \001("
    "\0132\021.s_ans_better_hit\0229\n\027m_ans_result_bet"
    "ter_hit\030\017 \001(\0132\030.s_ans_result_better_hit\022"
    "1\n\023m_bs2x_batter_ready\030\020 \001(\0132\024.s_bs2x_ba"
    "tter_ready\022;\n\030m_ans_change_attack_team\030\021"
    " \001(\0132\031.s_ans_change_attack_team\022\'\n\016m_ans"
    "_game_end\030\022 \001(\0132\017.s_ans_game_end\022I\n\037m_bs"
    "2x_game_end_other_user_info\030\023 \001(\0132 .s_bs"
    "2x_game_end_other_user_info\0225\n\025m_ans_use"
    "r_disconnect\030\024 \001(\0132\026.s_ans_user_disconne"
    "ct\022%\n\rm_ans_rematch\030\025 \001(\0132\016.s_ans_rematc"
    "h\022=\n\031m_ans_answer_restart_game\030\026 \001(\0132\032.s"
    "_ans_answer_restart_game\"\340\003\n\004Type\022\010\n\004NON"
    "E\020\001\022\021\n\rans_join_room\020\002\022\022\n\016ans_room_state"
    "\020\003\022\r\n\tbs2x_echo\020\004\022\014\n\010ans_chat\020\005\022\023\n\017ans_t"
    "imer_start\020\006\022\016\n\nbs2x_echo2\020\007\022\020\n\014ans_bs_e"
    "rror\020\010\022\032\n\026bs2x_auto_match_ready2\020\t\022\022\n\016an"
    "s_game_start\020\n\022\030\n\024ans_game_round_start\020\013"
    "\022\024\n\020bs2x_match_ready\020\014\022\025\n\021ans_pitcher_th"
    "row\020\r\022\022\n\016ans_better_hit\020\016\022\031\n\025ans_result_"
    "better_hit\020\017\022\025\n\021bs2x_batter_ready\020\020\022\032\n\026a"
    "ns_change_attack_team\020\021\022\020\n\014ans_game_end\020"
    "\022\022!\n\035bs2x_game_end_other_user_info\020\023\022\027\n\023"
    "ans_user_disconnect\020\024\022\017\n\013ans_rematch\020\025\022\033"
    "\n\027ans_answer_restart_game\020\026\"\262\003\n\035UserGate"
    "Server_BaseballServer\0221\n\004type\030\001 \002(\0162#.Us"
    "erGateServer_BaseballServer.Type\0223\n\024m_ug"
    "2bs_ans_set_cvar\030\002 \001(\0132\025.s_ug2bs_ans_set"
    "_cvar\022+\n\020m_ug2bs_game_end\030\003 \001(\0132\021.s_ug2b"
    "s_game_end\022#\n\014m_ug2bs_echo\030\004 \001(\0132\r.s_ug2"
    "bs_echo\022%\n\rm_ug2bs_error\030\005 \001(\0132\016.s_ug2bs"
    "_error\0227\n\026m_ug2bs_add_discon_tot\030\006 \001(\0132\027"
    ".s_ug2bs_add_discon_tot\"w\n\004Type\022\010\n\004NONE\020"
    "\001\022\026\n\022ug2bs_ans_set_cvar\020\002\022\022\n\016ug2bs_game_"
    "end\020\003\022\016\n\nug2bs_echo\020\004\022\017\n\013ug2bs_error\020\005\022\030"
    "\n\024ug2bs_add_discon_tot\020\006\"\217\t\n\025Client_Base"
    "ballServer\022)\n\004type\030\001 \002(\0162\033.Client_Baseba"
    "llServer.Type\022+\n\020m_req_room_state\030\002 \001(\0132"
    "\021.s_req_room_state\022!\n\013m_x2bs_echo\030\003 \001(\0132"
    "\014.s_x2bs_echo\022\037\n\nm_req_chat\030\004 \001(\0132\013.s_re"
    "q_chat\022-\n\021m_req_timer_start\030\005 \001(\0132\022.s_re"
    "q_timer_start\0221\n\023m_req_do_disconnect\030\006 \001"
    "(\0132\024.s_req_do_disconnect\022#\n\014m_x2bs_echo2"
    "\030\007 \001(\0132\r.s_x2bs_echo2\022\'\n\016m_req_get_cvar\030"
    "\010 \001(\0132\017.s_req_get_cvar\022\'\n\016m_req_set_cvar"
    "\030\t \001(\0132\017.s_req_set_cvar\022;\n\030m_x2bs_auto_m"
    "atch_ready2\030\n \001(\0132\031.s_x2bs_auto_match_re"
    "ady2\022/\n\022m_x2bs_match_ready\030\013 \001(\0132\023.s_x2b"
    "s_match_ready\0221\n\023m_req_pitcher_throw\030\014 \001"
    "(\0132\024.s_req_pitcher_throw\022+\n\020m_req_better"
    "_hit\030\r \001(\0132\021.s_req_better_hit\0229\n\027m_req_r"
    "esult_better_hit\030\016 \001(\0132\030.s_req_result_be"
    "tter_hit\0221\n\023m_x2bs_batter_ready\030\017 \001(\0132\024."
    "s_x2bs_batter_ready\022%\n\rm_req_rematch\030\020 \001"
    "(\0132\016.s_req_rematch\022=\n\031m_req_answer_resta"
    "rt_game\030\021 \001(\0132\032.s_req_answer_restart_gam"
    "e\"\336\002\n\004Type\022\010\n\004NONE\020\001\022\022\n\016req_room_state\020\002"
    "\022\r\n\tx2bs_echo\020\003\022\014\n\010req_chat\020\004\022\023\n\017req_tim"
    "er_start\020\005\022\025\n\021req_do_disconnect\020\006\022\016\n\nx2b"
    "s_echo2\020\007\022\020\n\014req_get_cvar\020\010\022\020\n\014req_set_c"
    "var\020\t\022\032\n\026x2bs_auto_match_ready2\020\n\022\024\n\020x2b"
    "s_match_ready\020\013\022\025\n\021req_pitcher_throw\020\014\022\022"
    "\n\016req_better_hit\020\r\022\031\n\025req_result_better_"
    "hit\020\016\022\025\n\021x2bs_batter_ready\020\017\022\017\n\013req_rema"
    "tch\020\020\022\033\n\027req_answer_restart_game\020\021*o\n\017EU"
    "serGPS_notuse\022\025\n\021_notuseGPS_LOGOUT\020\000\022\027\n\023"
    "_notuseGPS_LOGIN_OK\020\001\022\023\n\017_notuseGPS_SHOP"
    "\020\002\022\027\n\023_notuseGPS_GAMEROOM\020\003", 6667);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PT_BaseballServer.proto", &protobuf_RegisterTypes);
  s_ans_join_room::default_instance_ = new s_ans_join_room();
  s_req_room_state::default_instance_ = new s_req_room_state();
  s_ans_room_state::default_instance_ = new s_ans_room_state();
  s_x2bs_echo::default_instance_ = new s_x2bs_echo();
  s_bs2x_echo::default_instance_ = new s_bs2x_echo();
  s_req_chat::default_instance_ = new s_req_chat();
  s_ans_chat::default_instance_ = new s_ans_chat();
  s_ans_timer_start::default_instance_ = new s_ans_timer_start();
  s_req_timer_start::default_instance_ = new s_req_timer_start();
  s_req_do_disconnect::default_instance_ = new s_req_do_disconnect();
  s_x2bs_echo2::default_instance_ = new s_x2bs_echo2();
  s_bs2x_echo2::default_instance_ = new s_bs2x_echo2();
  s_ans_bs_error::default_instance_ = new s_ans_bs_error();
  s_req_get_cvar::default_instance_ = new s_req_get_cvar();
  s_req_set_cvar::default_instance_ = new s_req_set_cvar();
  s_bs2ug_set_cvar::default_instance_ = new s_bs2ug_set_cvar();
  s_ug2bs_ans_set_cvar::default_instance_ = new s_ug2bs_ans_set_cvar();
  s_x2bs_auto_match_ready2::default_instance_ = new s_x2bs_auto_match_ready2();
  s_bs2x_auto_match_ready2::default_instance_ = new s_bs2x_auto_match_ready2();
  s_ans_game_start::default_instance_ = new s_ans_game_start();
  s_ans_game_round_start::default_instance_ = new s_ans_game_round_start();
  s_x2bs_match_ready::default_instance_ = new s_x2bs_match_ready();
  s_bs2x_match_ready::default_instance_ = new s_bs2x_match_ready();
  s_req_pitcher_throw::default_instance_ = new s_req_pitcher_throw();
  s_ans_pitcher_throw::default_instance_ = new s_ans_pitcher_throw();
  s_req_better_hit::default_instance_ = new s_req_better_hit();
  s_ans_better_hit::default_instance_ = new s_ans_better_hit();
  s_req_result_better_hit::default_instance_ = new s_req_result_better_hit();
  s_ans_result_better_hit::default_instance_ = new s_ans_result_better_hit();
  s_x2bs_batter_ready::default_instance_ = new s_x2bs_batter_ready();
  s_bs2x_batter_ready::default_instance_ = new s_bs2x_batter_ready();
  s_ans_change_attack_team::default_instance_ = new s_ans_change_attack_team();
  s_ans_game_end::default_instance_ = new s_ans_game_end();
  s_bs2x_game_end_other_user_info::default_instance_ = new s_bs2x_game_end_other_user_info();
  s_bs2ug_game_end::default_instance_ = new s_bs2ug_game_end();
  s_ug2bs_game_end::default_instance_ = new s_ug2bs_game_end();
  s_ans_user_disconnect::default_instance_ = new s_ans_user_disconnect();
  s_req_rematch::default_instance_ = new s_req_rematch();
  s_ans_rematch::default_instance_ = new s_ans_rematch();
  s_req_answer_restart_game::default_instance_ = new s_req_answer_restart_game();
  s_ans_answer_restart_game::default_instance_ = new s_ans_answer_restart_game();
  s_ug2bs_echo::default_instance_ = new s_ug2bs_echo();
  s_bs2ug_echo::default_instance_ = new s_bs2ug_echo();
  s_ug2bs_error::default_instance_ = new s_ug2bs_error();
  s_bs2ug_error::default_instance_ = new s_bs2ug_error();
  s_bs2ug_add_discon_tot::default_instance_ = new s_bs2ug_add_discon_tot();
  s_ug2bs_add_discon_tot::default_instance_ = new s_ug2bs_add_discon_tot();
  BaseballServer_UserGateServer::default_instance_ = new BaseballServer_UserGateServer();
  BaseballServer_Client::default_instance_ = new BaseballServer_Client();
  UserGateServer_BaseballServer::default_instance_ = new UserGateServer_BaseballServer();
  Client_BaseballServer::default_instance_ = new Client_BaseballServer();
  s_ans_join_room::default_instance_->InitAsDefaultInstance();
  s_req_room_state::default_instance_->InitAsDefaultInstance();
  s_ans_room_state::default_instance_->InitAsDefaultInstance();
  s_x2bs_echo::default_instance_->InitAsDefaultInstance();
  s_bs2x_echo::default_instance_->InitAsDefaultInstance();
  s_req_chat::default_instance_->InitAsDefaultInstance();
  s_ans_chat::default_instance_->InitAsDefaultInstance();
  s_ans_timer_start::default_instance_->InitAsDefaultInstance();
  s_req_timer_start::default_instance_->InitAsDefaultInstance();
  s_req_do_disconnect::default_instance_->InitAsDefaultInstance();
  s_x2bs_echo2::default_instance_->InitAsDefaultInstance();
  s_bs2x_echo2::default_instance_->InitAsDefaultInstance();
  s_ans_bs_error::default_instance_->InitAsDefaultInstance();
  s_req_get_cvar::default_instance_->InitAsDefaultInstance();
  s_req_set_cvar::default_instance_->InitAsDefaultInstance();
  s_bs2ug_set_cvar::default_instance_->InitAsDefaultInstance();
  s_ug2bs_ans_set_cvar::default_instance_->InitAsDefaultInstance();
  s_x2bs_auto_match_ready2::default_instance_->InitAsDefaultInstance();
  s_bs2x_auto_match_ready2::default_instance_->InitAsDefaultInstance();
  s_ans_game_start::default_instance_->InitAsDefaultInstance();
  s_ans_game_round_start::default_instance_->InitAsDefaultInstance();
  s_x2bs_match_ready::default_instance_->InitAsDefaultInstance();
  s_bs2x_match_ready::default_instance_->InitAsDefaultInstance();
  s_req_pitcher_throw::default_instance_->InitAsDefaultInstance();
  s_ans_pitcher_throw::default_instance_->InitAsDefaultInstance();
  s_req_better_hit::default_instance_->InitAsDefaultInstance();
  s_ans_better_hit::default_instance_->InitAsDefaultInstance();
  s_req_result_better_hit::default_instance_->InitAsDefaultInstance();
  s_ans_result_better_hit::default_instance_->InitAsDefaultInstance();
  s_x2bs_batter_ready::default_instance_->InitAsDefaultInstance();
  s_bs2x_batter_ready::default_instance_->InitAsDefaultInstance();
  s_ans_change_attack_team::default_instance_->InitAsDefaultInstance();
  s_ans_game_end::default_instance_->InitAsDefaultInstance();
  s_bs2x_game_end_other_user_info::default_instance_->InitAsDefaultInstance();
  s_bs2ug_game_end::default_instance_->InitAsDefaultInstance();
  s_ug2bs_game_end::default_instance_->InitAsDefaultInstance();
  s_ans_user_disconnect::default_instance_->InitAsDefaultInstance();
  s_req_rematch::default_instance_->InitAsDefaultInstance();
  s_ans_rematch::default_instance_->InitAsDefaultInstance();
  s_req_answer_restart_game::default_instance_->InitAsDefaultInstance();
  s_ans_answer_restart_game::default_instance_->InitAsDefaultInstance();
  s_ug2bs_echo::default_instance_->InitAsDefaultInstance();
  s_bs2ug_echo::default_instance_->InitAsDefaultInstance();
  s_ug2bs_error::default_instance_->InitAsDefaultInstance();
  s_bs2ug_error::default_instance_->InitAsDefaultInstance();
  s_bs2ug_add_discon_tot::default_instance_->InitAsDefaultInstance();
  s_ug2bs_add_discon_tot::default_instance_->InitAsDefaultInstance();
  BaseballServer_UserGateServer::default_instance_->InitAsDefaultInstance();
  BaseballServer_Client::default_instance_->InitAsDefaultInstance();
  UserGateServer_BaseballServer::default_instance_->InitAsDefaultInstance();
  Client_BaseballServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PT_5fBaseballServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PT_5fBaseballServer_2eproto {
  StaticDescriptorInitializer_PT_5fBaseballServer_2eproto() {
    protobuf_AddDesc_PT_5fBaseballServer_2eproto();
  }
} static_descriptor_initializer_PT_5fBaseballServer_2eproto_;

const ::google::protobuf::EnumDescriptor* EUserGPS_notuse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserGPS_notuse_descriptor_;
}
bool EUserGPS_notuse_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_join_room::kGriFieldNumber;
#endif  // !_MSC_VER

s_ans_join_room::s_ans_join_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_join_room::InitAsDefaultInstance() {
  gri_ = const_cast< ::GameRoomInfo*>(&::GameRoomInfo::default_instance());
}

s_ans_join_room::s_ans_join_room(const s_ans_join_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_join_room::SharedCtor() {
  _cached_size_ = 0;
  gri_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_join_room::~s_ans_join_room() {
  SharedDtor();
}

void s_ans_join_room::SharedDtor() {
  if (this != default_instance_) {
    delete gri_;
  }
}

void s_ans_join_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_join_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_join_room_descriptor_;
}

const s_ans_join_room& s_ans_join_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_join_room* s_ans_join_room::default_instance_ = NULL;

s_ans_join_room* s_ans_join_room::New() const {
  return new s_ans_join_room;
}

void s_ans_join_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gri()) {
      if (gri_ != NULL) gri_->::GameRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_join_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameRoomInfo gri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_join_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GameRoomInfo gri = 1;
  if (has_gri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_join_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GameRoomInfo gri = 1;
  if (has_gri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_join_room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GameRoomInfo gri = 1;
    if (has_gri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_join_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_join_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_join_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_join_room::MergeFrom(const s_ans_join_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gri()) {
      mutable_gri()->::GameRoomInfo::MergeFrom(from.gri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_join_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_join_room::CopyFrom(const s_ans_join_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_join_room::IsInitialized() const {
  
  if (has_gri()) {
    if (!this->gri().IsInitialized()) return false;
  }
  return true;
}

void s_ans_join_room::Swap(s_ans_join_room* other) {
  if (other != this) {
    std::swap(gri_, other->gri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_join_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_join_room_descriptor_;
  metadata.reflection = s_ans_join_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_room_state::kRoomFieldNumber;
#endif  // !_MSC_VER

s_req_room_state::s_req_room_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_room_state::InitAsDefaultInstance() {
}

s_req_room_state::s_req_room_state(const s_req_room_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_room_state::SharedCtor() {
  _cached_size_ = 0;
  room_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_room_state::~s_req_room_state() {
  SharedDtor();
}

void s_req_room_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_room_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_room_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_room_state_descriptor_;
}

const s_req_room_state& s_req_room_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_room_state* s_req_room_state::default_instance_ = NULL;

s_req_room_state* s_req_room_state::New() const {
  return new s_req_room_state;
}

void s_req_room_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_room_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_)));
          set_has_room();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_room_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_room_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_room_state::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_room_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_room_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_room_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_room_state::MergeFrom(const s_req_room_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      set_room(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_room_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_room_state::CopyFrom(const s_req_room_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_room_state::IsInitialized() const {
  
  return true;
}

void s_req_room_state::Swap(s_req_room_state* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_room_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_room_state_descriptor_;
  metadata.reflection = s_req_room_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_room_state::kGriFieldNumber;
#endif  // !_MSC_VER

s_ans_room_state::s_ans_room_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_room_state::InitAsDefaultInstance() {
  gri_ = const_cast< ::GameRoomInfo*>(&::GameRoomInfo::default_instance());
}

s_ans_room_state::s_ans_room_state(const s_ans_room_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_room_state::SharedCtor() {
  _cached_size_ = 0;
  gri_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_room_state::~s_ans_room_state() {
  SharedDtor();
}

void s_ans_room_state::SharedDtor() {
  if (this != default_instance_) {
    delete gri_;
  }
}

void s_ans_room_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_room_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_room_state_descriptor_;
}

const s_ans_room_state& s_ans_room_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_room_state* s_ans_room_state::default_instance_ = NULL;

s_ans_room_state* s_ans_room_state::New() const {
  return new s_ans_room_state;
}

void s_ans_room_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gri()) {
      if (gri_ != NULL) gri_->::GameRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_room_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameRoomInfo gri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_room_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GameRoomInfo gri = 1;
  if (has_gri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_room_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GameRoomInfo gri = 1;
  if (has_gri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_room_state::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GameRoomInfo gri = 1;
    if (has_gri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_room_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_room_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_room_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_room_state::MergeFrom(const s_ans_room_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gri()) {
      mutable_gri()->::GameRoomInfo::MergeFrom(from.gri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_room_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_room_state::CopyFrom(const s_ans_room_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_room_state::IsInitialized() const {
  
  if (has_gri()) {
    if (!this->gri().IsInitialized()) return false;
  }
  return true;
}

void s_ans_room_state::Swap(s_ans_room_state* other) {
  if (other != this) {
    std::swap(gri_, other->gri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_room_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_room_state_descriptor_;
  metadata.reflection = s_ans_room_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_x2bs_echo::kTypeFieldNumber;
const int s_x2bs_echo::kMsgFieldNumber;
const int s_x2bs_echo::kClientTimeMsecFieldNumber;
#endif  // !_MSC_VER

s_x2bs_echo::s_x2bs_echo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_x2bs_echo::InitAsDefaultInstance() {
}

s_x2bs_echo::s_x2bs_echo(const s_x2bs_echo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_x2bs_echo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_time_msec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_x2bs_echo::~s_x2bs_echo() {
  SharedDtor();
}

void s_x2bs_echo::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_x2bs_echo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_x2bs_echo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_x2bs_echo_descriptor_;
}

const s_x2bs_echo& s_x2bs_echo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_x2bs_echo* s_x2bs_echo::default_instance_ = NULL;

s_x2bs_echo* s_x2bs_echo::New() const {
  return new s_x2bs_echo;
}

void s_x2bs_echo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    client_time_msec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_x2bs_echo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_time_msec;
        break;
      }
      
      // optional int32 client_time_msec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_time_msec_)));
          set_has_client_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_x2bs_echo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_time_msec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_x2bs_echo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_time_msec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_x2bs_echo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int32 client_time_msec = 3;
    if (has_client_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_time_msec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_x2bs_echo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_x2bs_echo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_x2bs_echo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_x2bs_echo::MergeFrom(const s_x2bs_echo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_client_time_msec()) {
      set_client_time_msec(from.client_time_msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_x2bs_echo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_x2bs_echo::CopyFrom(const s_x2bs_echo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_x2bs_echo::IsInitialized() const {
  
  return true;
}

void s_x2bs_echo::Swap(s_x2bs_echo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(client_time_msec_, other->client_time_msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_x2bs_echo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_x2bs_echo_descriptor_;
  metadata.reflection = s_x2bs_echo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2x_echo::kTypeFieldNumber;
const int s_bs2x_echo::kMsgFieldNumber;
const int s_bs2x_echo::kClientTimeMsecFieldNumber;
const int s_bs2x_echo::kBsTimeMsecFieldNumber;
#endif  // !_MSC_VER

s_bs2x_echo::s_bs2x_echo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2x_echo::InitAsDefaultInstance() {
}

s_bs2x_echo::s_bs2x_echo(const s_bs2x_echo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2x_echo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_time_msec_ = 0;
  bs_time_msec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2x_echo::~s_bs2x_echo() {
  SharedDtor();
}

void s_bs2x_echo::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_bs2x_echo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2x_echo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2x_echo_descriptor_;
}

const s_bs2x_echo& s_bs2x_echo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2x_echo* s_bs2x_echo::default_instance_ = NULL;

s_bs2x_echo* s_bs2x_echo::New() const {
  return new s_bs2x_echo;
}

void s_bs2x_echo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    client_time_msec_ = 0;
    bs_time_msec_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2x_echo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_time_msec;
        break;
      }
      
      // optional int32 client_time_msec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_time_msec_)));
          set_has_client_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bs_time_msec;
        break;
      }
      
      // optional int64 bs_time_msec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bs_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bs_time_msec_)));
          set_has_bs_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2x_echo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_time_msec(), output);
  }
  
  // optional int64 bs_time_msec = 4;
  if (has_bs_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bs_time_msec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2x_echo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_time_msec(), target);
  }
  
  // optional int64 bs_time_msec = 4;
  if (has_bs_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bs_time_msec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2x_echo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int32 client_time_msec = 3;
    if (has_client_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_time_msec());
    }
    
    // optional int64 bs_time_msec = 4;
    if (has_bs_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bs_time_msec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2x_echo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2x_echo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2x_echo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2x_echo::MergeFrom(const s_bs2x_echo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_client_time_msec()) {
      set_client_time_msec(from.client_time_msec());
    }
    if (from.has_bs_time_msec()) {
      set_bs_time_msec(from.bs_time_msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2x_echo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2x_echo::CopyFrom(const s_bs2x_echo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2x_echo::IsInitialized() const {
  
  return true;
}

void s_bs2x_echo::Swap(s_bs2x_echo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(client_time_msec_, other->client_time_msec_);
    std::swap(bs_time_msec_, other->bs_time_msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2x_echo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2x_echo_descriptor_;
  metadata.reflection = s_bs2x_echo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_chat::kTypeFieldNumber;
const int s_req_chat::kMsgFieldNumber;
const int s_req_chat::kEtcFieldNumber;
#endif  // !_MSC_VER

s_req_chat::s_req_chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_chat::InitAsDefaultInstance() {
}

s_req_chat::s_req_chat(const s_req_chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_chat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  etc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_chat::~s_req_chat() {
  SharedDtor();
}

void s_req_chat::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (etc_ != &::google::protobuf::internal::kEmptyString) {
    delete etc_;
  }
  if (this != default_instance_) {
  }
}

void s_req_chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_chat_descriptor_;
}

const s_req_chat& s_req_chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_chat* s_req_chat::default_instance_ = NULL;

s_req_chat* s_req_chat::New() const {
  return new s_req_chat;
}

void s_req_chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_etc()) {
      if (etc_ != &::google::protobuf::internal::kEmptyString) {
        etc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_etc;
        break;
      }
      
      // optional string etc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_etc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->etc().data(), this->etc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional string etc = 3;
  if (has_etc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etc().data(), this->etc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->etc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional string etc = 3;
  if (has_etc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etc().data(), this->etc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->etc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_chat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional string etc = 3;
    if (has_etc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_chat::MergeFrom(const s_req_chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_etc()) {
      set_etc(from.etc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_chat::CopyFrom(const s_req_chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_chat::IsInitialized() const {
  
  return true;
}

void s_req_chat::Swap(s_req_chat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(etc_, other->etc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_chat_descriptor_;
  metadata.reflection = s_req_chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_chat::kTypeFieldNumber;
const int s_ans_chat::kMsgFieldNumber;
const int s_ans_chat::kEtcFieldNumber;
#endif  // !_MSC_VER

s_ans_chat::s_ans_chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_chat::InitAsDefaultInstance() {
}

s_ans_chat::s_ans_chat(const s_ans_chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_chat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  etc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_chat::~s_ans_chat() {
  SharedDtor();
}

void s_ans_chat::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (etc_ != &::google::protobuf::internal::kEmptyString) {
    delete etc_;
  }
  if (this != default_instance_) {
  }
}

void s_ans_chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_chat_descriptor_;
}

const s_ans_chat& s_ans_chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_chat* s_ans_chat::default_instance_ = NULL;

s_ans_chat* s_ans_chat::New() const {
  return new s_ans_chat;
}

void s_ans_chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_etc()) {
      if (etc_ != &::google::protobuf::internal::kEmptyString) {
        etc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_etc;
        break;
      }
      
      // optional string etc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_etc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->etc().data(), this->etc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional string etc = 3;
  if (has_etc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etc().data(), this->etc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->etc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional string etc = 3;
  if (has_etc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etc().data(), this->etc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->etc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_chat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional string etc = 3;
    if (has_etc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_chat::MergeFrom(const s_ans_chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_etc()) {
      set_etc(from.etc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_chat::CopyFrom(const s_ans_chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_chat::IsInitialized() const {
  
  return true;
}

void s_ans_chat::Swap(s_ans_chat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(etc_, other->etc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_chat_descriptor_;
  metadata.reflection = s_ans_chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_timer_start::kCountFieldNumber;
const int s_ans_timer_start::kMsgFieldNumber;
#endif  // !_MSC_VER

s_ans_timer_start::s_ans_timer_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_timer_start::InitAsDefaultInstance() {
}

s_ans_timer_start::s_ans_timer_start(const s_ans_timer_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_timer_start::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_timer_start::~s_ans_timer_start() {
  SharedDtor();
}

void s_ans_timer_start::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_ans_timer_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_timer_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_timer_start_descriptor_;
}

const s_ans_timer_start& s_ans_timer_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_timer_start* s_ans_timer_start::default_instance_ = NULL;

s_ans_timer_start* s_ans_timer_start::New() const {
  return new s_ans_timer_start;
}

void s_ans_timer_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_timer_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_timer_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_timer_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_timer_start::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_timer_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_timer_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_timer_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_timer_start::MergeFrom(const s_ans_timer_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_timer_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_timer_start::CopyFrom(const s_ans_timer_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_timer_start::IsInitialized() const {
  
  return true;
}

void s_ans_timer_start::Swap(s_ans_timer_start* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_timer_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_timer_start_descriptor_;
  metadata.reflection = s_ans_timer_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_timer_start::kTermFieldNumber;
const int s_req_timer_start::kMsgFieldNumber;
#endif  // !_MSC_VER

s_req_timer_start::s_req_timer_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_timer_start::InitAsDefaultInstance() {
}

s_req_timer_start::s_req_timer_start(const s_req_timer_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_timer_start::SharedCtor() {
  _cached_size_ = 0;
  term_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_timer_start::~s_req_timer_start() {
  SharedDtor();
}

void s_req_timer_start::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_req_timer_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_timer_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_timer_start_descriptor_;
}

const s_req_timer_start& s_req_timer_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_timer_start* s_req_timer_start::default_instance_ = NULL;

s_req_timer_start* s_req_timer_start::New() const {
  return new s_req_timer_start;
}

void s_req_timer_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_timer_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_timer_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_timer_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_timer_start::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->term());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_timer_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_timer_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_timer_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_timer_start::MergeFrom(const s_req_timer_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_timer_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_timer_start::CopyFrom(const s_req_timer_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_timer_start::IsInitialized() const {
  
  return true;
}

void s_req_timer_start::Swap(s_req_timer_start* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_timer_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_timer_start_descriptor_;
  metadata.reflection = s_req_timer_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_do_disconnect::kReasonFieldNumber;
#endif  // !_MSC_VER

s_req_do_disconnect::s_req_do_disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_do_disconnect::InitAsDefaultInstance() {
}

s_req_do_disconnect::s_req_do_disconnect(const s_req_do_disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_do_disconnect::SharedCtor() {
  _cached_size_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_do_disconnect::~s_req_do_disconnect() {
  SharedDtor();
}

void s_req_do_disconnect::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void s_req_do_disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_do_disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_do_disconnect_descriptor_;
}

const s_req_do_disconnect& s_req_do_disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_do_disconnect* s_req_do_disconnect::default_instance_ = NULL;

s_req_do_disconnect* s_req_do_disconnect::New() const {
  return new s_req_do_disconnect;
}

void s_req_do_disconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_do_disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_do_disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_do_disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_do_disconnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_do_disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_do_disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_do_disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_do_disconnect::MergeFrom(const s_req_do_disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_do_disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_do_disconnect::CopyFrom(const s_req_do_disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_do_disconnect::IsInitialized() const {
  
  return true;
}

void s_req_do_disconnect::Swap(s_req_do_disconnect* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_do_disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_do_disconnect_descriptor_;
  metadata.reflection = s_req_do_disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_x2bs_echo2::kTypeFieldNumber;
const int s_x2bs_echo2::kMsgFieldNumber;
const int s_x2bs_echo2::kClientTimeMsecFieldNumber;
#endif  // !_MSC_VER

s_x2bs_echo2::s_x2bs_echo2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_x2bs_echo2::InitAsDefaultInstance() {
}

s_x2bs_echo2::s_x2bs_echo2(const s_x2bs_echo2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_x2bs_echo2::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_time_msec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_x2bs_echo2::~s_x2bs_echo2() {
  SharedDtor();
}

void s_x2bs_echo2::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_x2bs_echo2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_x2bs_echo2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_x2bs_echo2_descriptor_;
}

const s_x2bs_echo2& s_x2bs_echo2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_x2bs_echo2* s_x2bs_echo2::default_instance_ = NULL;

s_x2bs_echo2* s_x2bs_echo2::New() const {
  return new s_x2bs_echo2;
}

void s_x2bs_echo2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    client_time_msec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_x2bs_echo2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_time_msec;
        break;
      }
      
      // optional int32 client_time_msec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_time_msec_)));
          set_has_client_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_x2bs_echo2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_time_msec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_x2bs_echo2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_time_msec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_x2bs_echo2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int32 client_time_msec = 3;
    if (has_client_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_time_msec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_x2bs_echo2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_x2bs_echo2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_x2bs_echo2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_x2bs_echo2::MergeFrom(const s_x2bs_echo2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_client_time_msec()) {
      set_client_time_msec(from.client_time_msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_x2bs_echo2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_x2bs_echo2::CopyFrom(const s_x2bs_echo2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_x2bs_echo2::IsInitialized() const {
  
  return true;
}

void s_x2bs_echo2::Swap(s_x2bs_echo2* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(client_time_msec_, other->client_time_msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_x2bs_echo2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_x2bs_echo2_descriptor_;
  metadata.reflection = s_x2bs_echo2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2x_echo2::kTypeFieldNumber;
const int s_bs2x_echo2::kMsgFieldNumber;
const int s_bs2x_echo2::kClientTimeMsecFieldNumber;
const int s_bs2x_echo2::kBsTimeMsecFieldNumber;
const int s_bs2x_echo2::kEtcFieldNumber;
#endif  // !_MSC_VER

s_bs2x_echo2::s_bs2x_echo2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2x_echo2::InitAsDefaultInstance() {
}

s_bs2x_echo2::s_bs2x_echo2(const s_bs2x_echo2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2x_echo2::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_time_msec_ = 0;
  bs_time_msec_ = GOOGLE_LONGLONG(0);
  etc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2x_echo2::~s_bs2x_echo2() {
  SharedDtor();
}

void s_bs2x_echo2::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_bs2x_echo2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2x_echo2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2x_echo2_descriptor_;
}

const s_bs2x_echo2& s_bs2x_echo2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2x_echo2* s_bs2x_echo2::default_instance_ = NULL;

s_bs2x_echo2* s_bs2x_echo2::New() const {
  return new s_bs2x_echo2;
}

void s_bs2x_echo2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    client_time_msec_ = 0;
    bs_time_msec_ = GOOGLE_LONGLONG(0);
    etc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2x_echo2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_time_msec;
        break;
      }
      
      // optional int32 client_time_msec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_time_msec_)));
          set_has_client_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bs_time_msec;
        break;
      }
      
      // optional int64 bs_time_msec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bs_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bs_time_msec_)));
          set_has_bs_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_etc;
        break;
      }
      
      // optional int32 etc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_etc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &etc_)));
          set_has_etc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2x_echo2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_time_msec(), output);
  }
  
  // optional int64 bs_time_msec = 4;
  if (has_bs_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bs_time_msec(), output);
  }
  
  // optional int32 etc = 5;
  if (has_etc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->etc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2x_echo2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional int32 client_time_msec = 3;
  if (has_client_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_time_msec(), target);
  }
  
  // optional int64 bs_time_msec = 4;
  if (has_bs_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bs_time_msec(), target);
  }
  
  // optional int32 etc = 5;
  if (has_etc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->etc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2x_echo2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int32 client_time_msec = 3;
    if (has_client_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_time_msec());
    }
    
    // optional int64 bs_time_msec = 4;
    if (has_bs_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bs_time_msec());
    }
    
    // optional int32 etc = 5;
    if (has_etc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2x_echo2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2x_echo2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2x_echo2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2x_echo2::MergeFrom(const s_bs2x_echo2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_client_time_msec()) {
      set_client_time_msec(from.client_time_msec());
    }
    if (from.has_bs_time_msec()) {
      set_bs_time_msec(from.bs_time_msec());
    }
    if (from.has_etc()) {
      set_etc(from.etc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2x_echo2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2x_echo2::CopyFrom(const s_bs2x_echo2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2x_echo2::IsInitialized() const {
  
  return true;
}

void s_bs2x_echo2::Swap(s_bs2x_echo2* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(client_time_msec_, other->client_time_msec_);
    std::swap(bs_time_msec_, other->bs_time_msec_);
    std::swap(etc_, other->etc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2x_echo2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2x_echo2_descriptor_;
  metadata.reflection = s_bs2x_echo2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_bs_error::kSysErrorIdFieldNumber;
#endif  // !_MSC_VER

s_ans_bs_error::s_ans_bs_error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_bs_error::InitAsDefaultInstance() {
}

s_ans_bs_error::s_ans_bs_error(const s_ans_bs_error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_bs_error::SharedCtor() {
  _cached_size_ = 0;
  sys_error_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_bs_error::~s_ans_bs_error() {
  SharedDtor();
}

void s_ans_bs_error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_bs_error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_bs_error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_bs_error_descriptor_;
}

const s_ans_bs_error& s_ans_bs_error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_bs_error* s_ans_bs_error::default_instance_ = NULL;

s_ans_bs_error* s_ans_bs_error::New() const {
  return new s_ans_bs_error;
}

void s_ans_bs_error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sys_error_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_bs_error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sys_error_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_error_id_)));
          set_has_sys_error_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_bs_error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sys_error_id = 1;
  if (has_sys_error_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sys_error_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_bs_error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sys_error_id = 1;
  if (has_sys_error_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sys_error_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_bs_error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sys_error_id = 1;
    if (has_sys_error_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_error_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_bs_error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_bs_error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_bs_error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_bs_error::MergeFrom(const s_ans_bs_error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_error_id()) {
      set_sys_error_id(from.sys_error_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_bs_error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_bs_error::CopyFrom(const s_ans_bs_error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_bs_error::IsInitialized() const {
  
  return true;
}

void s_ans_bs_error::Swap(s_ans_bs_error* other) {
  if (other != this) {
    std::swap(sys_error_id_, other->sys_error_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_bs_error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_bs_error_descriptor_;
  metadata.reflection = s_ans_bs_error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_get_cvar::kNameFieldNumber;
#endif  // !_MSC_VER

s_req_get_cvar::s_req_get_cvar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_get_cvar::InitAsDefaultInstance() {
}

s_req_get_cvar::s_req_get_cvar(const s_req_get_cvar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_get_cvar::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_get_cvar::~s_req_get_cvar() {
  SharedDtor();
}

void s_req_get_cvar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void s_req_get_cvar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_get_cvar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_get_cvar_descriptor_;
}

const s_req_get_cvar& s_req_get_cvar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_get_cvar* s_req_get_cvar::default_instance_ = NULL;

s_req_get_cvar* s_req_get_cvar::New() const {
  return new s_req_get_cvar;
}

void s_req_get_cvar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_get_cvar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_get_cvar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_get_cvar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_get_cvar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_get_cvar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_get_cvar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_get_cvar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_get_cvar::MergeFrom(const s_req_get_cvar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_get_cvar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_get_cvar::CopyFrom(const s_req_get_cvar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_get_cvar::IsInitialized() const {
  
  return true;
}

void s_req_get_cvar::Swap(s_req_get_cvar* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_get_cvar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_get_cvar_descriptor_;
  metadata.reflection = s_req_get_cvar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_set_cvar::kNameFieldNumber;
const int s_req_set_cvar::kValFieldNumber;
#endif  // !_MSC_VER

s_req_set_cvar::s_req_set_cvar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_set_cvar::InitAsDefaultInstance() {
}

s_req_set_cvar::s_req_set_cvar(const s_req_set_cvar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_set_cvar::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_set_cvar::~s_req_set_cvar() {
  SharedDtor();
}

void s_req_set_cvar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void s_req_set_cvar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_set_cvar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_set_cvar_descriptor_;
}

const s_req_set_cvar& s_req_set_cvar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_set_cvar* s_req_set_cvar::default_instance_ = NULL;

s_req_set_cvar* s_req_set_cvar::New() const {
  return new s_req_set_cvar;
}

void s_req_set_cvar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_set_cvar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }
      
      // optional string val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_set_cvar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_set_cvar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_set_cvar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_set_cvar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_set_cvar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_set_cvar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_set_cvar::MergeFrom(const s_req_set_cvar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_set_cvar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_set_cvar::CopyFrom(const s_req_set_cvar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_set_cvar::IsInitialized() const {
  
  return true;
}

void s_req_set_cvar::Swap(s_req_set_cvar* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_set_cvar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_set_cvar_descriptor_;
  metadata.reflection = s_req_set_cvar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2ug_set_cvar::kNameFieldNumber;
const int s_bs2ug_set_cvar::kValFieldNumber;
#endif  // !_MSC_VER

s_bs2ug_set_cvar::s_bs2ug_set_cvar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2ug_set_cvar::InitAsDefaultInstance() {
}

s_bs2ug_set_cvar::s_bs2ug_set_cvar(const s_bs2ug_set_cvar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2ug_set_cvar::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2ug_set_cvar::~s_bs2ug_set_cvar() {
  SharedDtor();
}

void s_bs2ug_set_cvar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void s_bs2ug_set_cvar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2ug_set_cvar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2ug_set_cvar_descriptor_;
}

const s_bs2ug_set_cvar& s_bs2ug_set_cvar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2ug_set_cvar* s_bs2ug_set_cvar::default_instance_ = NULL;

s_bs2ug_set_cvar* s_bs2ug_set_cvar::New() const {
  return new s_bs2ug_set_cvar;
}

void s_bs2ug_set_cvar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2ug_set_cvar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }
      
      // optional string val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2ug_set_cvar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2ug_set_cvar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2ug_set_cvar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2ug_set_cvar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2ug_set_cvar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2ug_set_cvar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2ug_set_cvar::MergeFrom(const s_bs2ug_set_cvar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2ug_set_cvar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2ug_set_cvar::CopyFrom(const s_bs2ug_set_cvar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2ug_set_cvar::IsInitialized() const {
  
  return true;
}

void s_bs2ug_set_cvar::Swap(s_bs2ug_set_cvar* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2ug_set_cvar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2ug_set_cvar_descriptor_;
  metadata.reflection = s_bs2ug_set_cvar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ug2bs_ans_set_cvar::kNameFieldNumber;
const int s_ug2bs_ans_set_cvar::kValFieldNumber;
#endif  // !_MSC_VER

s_ug2bs_ans_set_cvar::s_ug2bs_ans_set_cvar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ug2bs_ans_set_cvar::InitAsDefaultInstance() {
}

s_ug2bs_ans_set_cvar::s_ug2bs_ans_set_cvar(const s_ug2bs_ans_set_cvar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ug2bs_ans_set_cvar::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ug2bs_ans_set_cvar::~s_ug2bs_ans_set_cvar() {
  SharedDtor();
}

void s_ug2bs_ans_set_cvar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void s_ug2bs_ans_set_cvar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ug2bs_ans_set_cvar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ug2bs_ans_set_cvar_descriptor_;
}

const s_ug2bs_ans_set_cvar& s_ug2bs_ans_set_cvar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ug2bs_ans_set_cvar* s_ug2bs_ans_set_cvar::default_instance_ = NULL;

s_ug2bs_ans_set_cvar* s_ug2bs_ans_set_cvar::New() const {
  return new s_ug2bs_ans_set_cvar;
}

void s_ug2bs_ans_set_cvar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ug2bs_ans_set_cvar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }
      
      // optional string val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ug2bs_ans_set_cvar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ug2bs_ans_set_cvar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ug2bs_ans_set_cvar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ug2bs_ans_set_cvar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ug2bs_ans_set_cvar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ug2bs_ans_set_cvar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ug2bs_ans_set_cvar::MergeFrom(const s_ug2bs_ans_set_cvar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ug2bs_ans_set_cvar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ug2bs_ans_set_cvar::CopyFrom(const s_ug2bs_ans_set_cvar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ug2bs_ans_set_cvar::IsInitialized() const {
  
  return true;
}

void s_ug2bs_ans_set_cvar::Swap(s_ug2bs_ans_set_cvar* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ug2bs_ans_set_cvar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ug2bs_ans_set_cvar_descriptor_;
  metadata.reflection = s_ug2bs_ans_set_cvar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_x2bs_auto_match_ready2::kUidFieldNumber;
const int s_x2bs_auto_match_ready2::kBatterFieldNumber;
const int s_x2bs_auto_match_ready2::kPitcherFieldNumber;
#endif  // !_MSC_VER

s_x2bs_auto_match_ready2::s_x2bs_auto_match_ready2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_x2bs_auto_match_ready2::InitAsDefaultInstance() {
}

s_x2bs_auto_match_ready2::s_x2bs_auto_match_ready2(const s_x2bs_auto_match_ready2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_x2bs_auto_match_ready2::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  batter_ = 0;
  pitcher_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_x2bs_auto_match_ready2::~s_x2bs_auto_match_ready2() {
  SharedDtor();
}

void s_x2bs_auto_match_ready2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_x2bs_auto_match_ready2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_x2bs_auto_match_ready2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_x2bs_auto_match_ready2_descriptor_;
}

const s_x2bs_auto_match_ready2& s_x2bs_auto_match_ready2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_x2bs_auto_match_ready2* s_x2bs_auto_match_ready2::default_instance_ = NULL;

s_x2bs_auto_match_ready2* s_x2bs_auto_match_ready2::New() const {
  return new s_x2bs_auto_match_ready2;
}

void s_x2bs_auto_match_ready2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    batter_ = 0;
    pitcher_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_x2bs_auto_match_ready2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_batter;
        break;
      }
      
      // optional int32 batter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batter_)));
          set_has_batter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pitcher;
        break;
      }
      
      // optional int32 pitcher = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_)));
          set_has_pitcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_x2bs_auto_match_ready2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int32 batter = 2;
  if (has_batter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batter(), output);
  }
  
  // optional int32 pitcher = 3;
  if (has_pitcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pitcher(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_x2bs_auto_match_ready2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int32 batter = 2;
  if (has_batter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batter(), target);
  }
  
  // optional int32 pitcher = 3;
  if (has_pitcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pitcher(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_x2bs_auto_match_ready2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 batter = 2;
    if (has_batter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batter());
    }
    
    // optional int32 pitcher = 3;
    if (has_pitcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_x2bs_auto_match_ready2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_x2bs_auto_match_ready2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_x2bs_auto_match_ready2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_x2bs_auto_match_ready2::MergeFrom(const s_x2bs_auto_match_ready2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_batter()) {
      set_batter(from.batter());
    }
    if (from.has_pitcher()) {
      set_pitcher(from.pitcher());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_x2bs_auto_match_ready2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_x2bs_auto_match_ready2::CopyFrom(const s_x2bs_auto_match_ready2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_x2bs_auto_match_ready2::IsInitialized() const {
  
  return true;
}

void s_x2bs_auto_match_ready2::Swap(s_x2bs_auto_match_ready2* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(batter_, other->batter_);
    std::swap(pitcher_, other->pitcher_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_x2bs_auto_match_ready2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_x2bs_auto_match_ready2_descriptor_;
  metadata.reflection = s_x2bs_auto_match_ready2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2x_auto_match_ready2::kUidFieldNumber;
const int s_bs2x_auto_match_ready2::kBatterFieldNumber;
const int s_bs2x_auto_match_ready2::kPitcherFieldNumber;
const int s_bs2x_auto_match_ready2::kOtherBatterFieldNumber;
const int s_bs2x_auto_match_ready2::kOtherPitcherFieldNumber;
#endif  // !_MSC_VER

s_bs2x_auto_match_ready2::s_bs2x_auto_match_ready2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2x_auto_match_ready2::InitAsDefaultInstance() {
}

s_bs2x_auto_match_ready2::s_bs2x_auto_match_ready2(const s_bs2x_auto_match_ready2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2x_auto_match_ready2::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  batter_ = 0;
  pitcher_ = 0;
  other_batter_ = 0;
  other_pitcher_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2x_auto_match_ready2::~s_bs2x_auto_match_ready2() {
  SharedDtor();
}

void s_bs2x_auto_match_ready2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_bs2x_auto_match_ready2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2x_auto_match_ready2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2x_auto_match_ready2_descriptor_;
}

const s_bs2x_auto_match_ready2& s_bs2x_auto_match_ready2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2x_auto_match_ready2* s_bs2x_auto_match_ready2::default_instance_ = NULL;

s_bs2x_auto_match_ready2* s_bs2x_auto_match_ready2::New() const {
  return new s_bs2x_auto_match_ready2;
}

void s_bs2x_auto_match_ready2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    batter_ = 0;
    pitcher_ = 0;
    other_batter_ = 0;
    other_pitcher_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2x_auto_match_ready2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_batter;
        break;
      }
      
      // optional int32 batter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batter_)));
          set_has_batter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pitcher;
        break;
      }
      
      // optional int32 pitcher = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitcher_)));
          set_has_pitcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_other_batter;
        break;
      }
      
      // optional int32 other_batter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_batter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_batter_)));
          set_has_other_batter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_other_pitcher;
        break;
      }
      
      // optional int32 other_pitcher = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_pitcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_pitcher_)));
          set_has_other_pitcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2x_auto_match_ready2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int32 batter = 2;
  if (has_batter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batter(), output);
  }
  
  // optional int32 pitcher = 3;
  if (has_pitcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pitcher(), output);
  }
  
  // optional int32 other_batter = 4;
  if (has_other_batter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->other_batter(), output);
  }
  
  // optional int32 other_pitcher = 5;
  if (has_other_pitcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->other_pitcher(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2x_auto_match_ready2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int32 batter = 2;
  if (has_batter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batter(), target);
  }
  
  // optional int32 pitcher = 3;
  if (has_pitcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pitcher(), target);
  }
  
  // optional int32 other_batter = 4;
  if (has_other_batter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->other_batter(), target);
  }
  
  // optional int32 other_pitcher = 5;
  if (has_other_pitcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->other_pitcher(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2x_auto_match_ready2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 batter = 2;
    if (has_batter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batter());
    }
    
    // optional int32 pitcher = 3;
    if (has_pitcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitcher());
    }
    
    // optional int32 other_batter = 4;
    if (has_other_batter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_batter());
    }
    
    // optional int32 other_pitcher = 5;
    if (has_other_pitcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_pitcher());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2x_auto_match_ready2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2x_auto_match_ready2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2x_auto_match_ready2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2x_auto_match_ready2::MergeFrom(const s_bs2x_auto_match_ready2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_batter()) {
      set_batter(from.batter());
    }
    if (from.has_pitcher()) {
      set_pitcher(from.pitcher());
    }
    if (from.has_other_batter()) {
      set_other_batter(from.other_batter());
    }
    if (from.has_other_pitcher()) {
      set_other_pitcher(from.other_pitcher());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2x_auto_match_ready2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2x_auto_match_ready2::CopyFrom(const s_bs2x_auto_match_ready2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2x_auto_match_ready2::IsInitialized() const {
  
  return true;
}

void s_bs2x_auto_match_ready2::Swap(s_bs2x_auto_match_ready2* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(batter_, other->batter_);
    std::swap(pitcher_, other->pitcher_);
    std::swap(other_batter_, other->other_batter_);
    std::swap(other_pitcher_, other->other_pitcher_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2x_auto_match_ready2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2x_auto_match_ready2_descriptor_;
  metadata.reflection = s_bs2x_auto_match_ready2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_game_start::kAttackUserFieldNumber;
const int s_ans_game_start::kSidSysRunnerStateFieldNumber;
const int s_ans_game_start::kBaseballParkFieldNumber;
#endif  // !_MSC_VER

s_ans_game_start::s_ans_game_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_game_start::InitAsDefaultInstance() {
}

s_ans_game_start::s_ans_game_start(const s_ans_game_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_game_start::SharedCtor() {
  _cached_size_ = 0;
  attack_user_ = GOOGLE_LONGLONG(0);
  sid_sys_runner_state_ = 0;
  baseball_park_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_game_start::~s_ans_game_start() {
  SharedDtor();
}

void s_ans_game_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_game_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_game_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_game_start_descriptor_;
}

const s_ans_game_start& s_ans_game_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_game_start* s_ans_game_start::default_instance_ = NULL;

s_ans_game_start* s_ans_game_start::New() const {
  return new s_ans_game_start;
}

void s_ans_game_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_user_ = GOOGLE_LONGLONG(0);
    sid_sys_runner_state_ = 0;
    baseball_park_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_game_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 attack_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_user_)));
          set_has_attack_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sid_Sys_Runner_State;
        break;
      }
      
      // optional int32 sid_Sys_Runner_State = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid_Sys_Runner_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_sys_runner_state_)));
          set_has_sid_sys_runner_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseball_park;
        break;
      }
      
      // optional int32 baseball_park = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseball_park:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseball_park_)));
          set_has_baseball_park();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_game_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 attack_user = 1;
  if (has_attack_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->attack_user(), output);
  }
  
  // optional int32 sid_Sys_Runner_State = 2;
  if (has_sid_sys_runner_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid_sys_runner_state(), output);
  }
  
  // optional int32 baseball_park = 3;
  if (has_baseball_park()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseball_park(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_game_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 attack_user = 1;
  if (has_attack_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->attack_user(), target);
  }
  
  // optional int32 sid_Sys_Runner_State = 2;
  if (has_sid_sys_runner_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid_sys_runner_state(), target);
  }
  
  // optional int32 baseball_park = 3;
  if (has_baseball_park()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseball_park(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_game_start::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 attack_user = 1;
    if (has_attack_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack_user());
    }
    
    // optional int32 sid_Sys_Runner_State = 2;
    if (has_sid_sys_runner_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid_sys_runner_state());
    }
    
    // optional int32 baseball_park = 3;
    if (has_baseball_park()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseball_park());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_game_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_game_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_game_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_game_start::MergeFrom(const s_ans_game_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_user()) {
      set_attack_user(from.attack_user());
    }
    if (from.has_sid_sys_runner_state()) {
      set_sid_sys_runner_state(from.sid_sys_runner_state());
    }
    if (from.has_baseball_park()) {
      set_baseball_park(from.baseball_park());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_game_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_game_start::CopyFrom(const s_ans_game_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_game_start::IsInitialized() const {
  
  return true;
}

void s_ans_game_start::Swap(s_ans_game_start* other) {
  if (other != this) {
    std::swap(attack_user_, other->attack_user_);
    std::swap(sid_sys_runner_state_, other->sid_sys_runner_state_);
    std::swap(baseball_park_, other->baseball_park_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_game_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_game_start_descriptor_;
  metadata.reflection = s_ans_game_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_game_round_start::kRoundFieldNumber;
const int s_ans_game_round_start::kRunnerStateFieldNumber;
#endif  // !_MSC_VER

s_ans_game_round_start::s_ans_game_round_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_game_round_start::InitAsDefaultInstance() {
}

s_ans_game_round_start::s_ans_game_round_start(const s_ans_game_round_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_game_round_start::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  runner_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_game_round_start::~s_ans_game_round_start() {
  SharedDtor();
}

void s_ans_game_round_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_game_round_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_game_round_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_game_round_start_descriptor_;
}

const s_ans_game_round_start& s_ans_game_round_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_game_round_start* s_ans_game_round_start::default_instance_ = NULL;

s_ans_game_round_start* s_ans_game_round_start::New() const {
  return new s_ans_game_round_start;
}

void s_ans_game_round_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_ = 0;
    runner_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_game_round_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_runner_state;
        break;
      }
      
      // optional int32 runner_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_runner_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runner_state_)));
          set_has_runner_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_game_round_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }
  
  // optional int32 runner_state = 2;
  if (has_runner_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->runner_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_game_round_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }
  
  // optional int32 runner_state = 2;
  if (has_runner_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->runner_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_game_round_start::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }
    
    // optional int32 runner_state = 2;
    if (has_runner_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->runner_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_game_round_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_game_round_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_game_round_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_game_round_start::MergeFrom(const s_ans_game_round_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_runner_state()) {
      set_runner_state(from.runner_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_game_round_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_game_round_start::CopyFrom(const s_ans_game_round_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_game_round_start::IsInitialized() const {
  
  return true;
}

void s_ans_game_round_start::Swap(s_ans_game_round_start* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(runner_state_, other->runner_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_game_round_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_game_round_start_descriptor_;
  metadata.reflection = s_ans_game_round_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_x2bs_match_ready::kUidFieldNumber;
#endif  // !_MSC_VER

s_x2bs_match_ready::s_x2bs_match_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_x2bs_match_ready::InitAsDefaultInstance() {
}

s_x2bs_match_ready::s_x2bs_match_ready(const s_x2bs_match_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_x2bs_match_ready::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_x2bs_match_ready::~s_x2bs_match_ready() {
  SharedDtor();
}

void s_x2bs_match_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_x2bs_match_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_x2bs_match_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_x2bs_match_ready_descriptor_;
}

const s_x2bs_match_ready& s_x2bs_match_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_x2bs_match_ready* s_x2bs_match_ready::default_instance_ = NULL;

s_x2bs_match_ready* s_x2bs_match_ready::New() const {
  return new s_x2bs_match_ready;
}

void s_x2bs_match_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_x2bs_match_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_x2bs_match_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_x2bs_match_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_x2bs_match_ready::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_x2bs_match_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_x2bs_match_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_x2bs_match_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_x2bs_match_ready::MergeFrom(const s_x2bs_match_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_x2bs_match_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_x2bs_match_ready::CopyFrom(const s_x2bs_match_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_x2bs_match_ready::IsInitialized() const {
  
  return true;
}

void s_x2bs_match_ready::Swap(s_x2bs_match_ready* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_x2bs_match_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_x2bs_match_ready_descriptor_;
  metadata.reflection = s_x2bs_match_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2x_match_ready::kUidFieldNumber;
#endif  // !_MSC_VER

s_bs2x_match_ready::s_bs2x_match_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2x_match_ready::InitAsDefaultInstance() {
}

s_bs2x_match_ready::s_bs2x_match_ready(const s_bs2x_match_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2x_match_ready::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2x_match_ready::~s_bs2x_match_ready() {
  SharedDtor();
}

void s_bs2x_match_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_bs2x_match_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2x_match_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2x_match_ready_descriptor_;
}

const s_bs2x_match_ready& s_bs2x_match_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2x_match_ready* s_bs2x_match_ready::default_instance_ = NULL;

s_bs2x_match_ready* s_bs2x_match_ready::New() const {
  return new s_bs2x_match_ready;
}

void s_bs2x_match_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2x_match_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2x_match_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2x_match_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2x_match_ready::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2x_match_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2x_match_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2x_match_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2x_match_ready::MergeFrom(const s_bs2x_match_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2x_match_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2x_match_ready::CopyFrom(const s_bs2x_match_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2x_match_ready::IsInitialized() const {
  
  return true;
}

void s_bs2x_match_ready::Swap(s_bs2x_match_ready* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2x_match_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2x_match_ready_descriptor_;
  metadata.reflection = s_bs2x_match_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_pitcher_throw::kInfoFieldNumber;
const int s_req_pitcher_throw::kUsedGesturetypeFieldNumber;
const int s_req_pitcher_throw::kGesturetypeInputErrorFieldNumber;
#endif  // !_MSC_VER

s_req_pitcher_throw::s_req_pitcher_throw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_pitcher_throw::InitAsDefaultInstance() {
  info_ = const_cast< ::s_pitcher_throw_info*>(&::s_pitcher_throw_info::default_instance());
}

s_req_pitcher_throw::s_req_pitcher_throw(const s_req_pitcher_throw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_pitcher_throw::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  used_gesturetype_ = 0;
  gesturetype_input_error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_pitcher_throw::~s_req_pitcher_throw() {
  SharedDtor();
}

void s_req_pitcher_throw::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void s_req_pitcher_throw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_pitcher_throw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_pitcher_throw_descriptor_;
}

const s_req_pitcher_throw& s_req_pitcher_throw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_pitcher_throw* s_req_pitcher_throw::default_instance_ = NULL;

s_req_pitcher_throw* s_req_pitcher_throw::New() const {
  return new s_req_pitcher_throw;
}

void s_req_pitcher_throw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::s_pitcher_throw_info::Clear();
    }
    used_gesturetype_ = 0;
    gesturetype_input_error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_pitcher_throw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_pitcher_throw_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_used_gesturetype;
        break;
      }
      
      // optional int32 used_gesturetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_gesturetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_gesturetype_)));
          set_has_used_gesturetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gesturetype_input_error;
        break;
      }
      
      // optional int32 gesturetype_input_error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gesturetype_input_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gesturetype_input_error_)));
          set_has_gesturetype_input_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_pitcher_throw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_pitcher_throw_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional int32 used_gesturetype = 2;
  if (has_used_gesturetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->used_gesturetype(), output);
  }
  
  // optional int32 gesturetype_input_error = 3;
  if (has_gesturetype_input_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gesturetype_input_error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_pitcher_throw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_pitcher_throw_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional int32 used_gesturetype = 2;
  if (has_used_gesturetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->used_gesturetype(), target);
  }
  
  // optional int32 gesturetype_input_error = 3;
  if (has_gesturetype_input_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gesturetype_input_error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_pitcher_throw::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_pitcher_throw_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int32 used_gesturetype = 2;
    if (has_used_gesturetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_gesturetype());
    }
    
    // optional int32 gesturetype_input_error = 3;
    if (has_gesturetype_input_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gesturetype_input_error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_pitcher_throw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_pitcher_throw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_pitcher_throw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_pitcher_throw::MergeFrom(const s_req_pitcher_throw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::s_pitcher_throw_info::MergeFrom(from.info());
    }
    if (from.has_used_gesturetype()) {
      set_used_gesturetype(from.used_gesturetype());
    }
    if (from.has_gesturetype_input_error()) {
      set_gesturetype_input_error(from.gesturetype_input_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_pitcher_throw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_pitcher_throw::CopyFrom(const s_req_pitcher_throw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_pitcher_throw::IsInitialized() const {
  
  return true;
}

void s_req_pitcher_throw::Swap(s_req_pitcher_throw* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(used_gesturetype_, other->used_gesturetype_);
    std::swap(gesturetype_input_error_, other->gesturetype_input_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_pitcher_throw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_pitcher_throw_descriptor_;
  metadata.reflection = s_req_pitcher_throw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_pitcher_throw::kInfoFieldNumber;
const int s_ans_pitcher_throw::kIsAutoFieldNumber;
#endif  // !_MSC_VER

s_ans_pitcher_throw::s_ans_pitcher_throw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_pitcher_throw::InitAsDefaultInstance() {
  info_ = const_cast< ::s_pitcher_throw_info*>(&::s_pitcher_throw_info::default_instance());
}

s_ans_pitcher_throw::s_ans_pitcher_throw(const s_ans_pitcher_throw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_pitcher_throw::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  is_auto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_pitcher_throw::~s_ans_pitcher_throw() {
  SharedDtor();
}

void s_ans_pitcher_throw::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void s_ans_pitcher_throw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_pitcher_throw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_pitcher_throw_descriptor_;
}

const s_ans_pitcher_throw& s_ans_pitcher_throw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_pitcher_throw* s_ans_pitcher_throw::default_instance_ = NULL;

s_ans_pitcher_throw* s_ans_pitcher_throw::New() const {
  return new s_ans_pitcher_throw;
}

void s_ans_pitcher_throw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::s_pitcher_throw_info::Clear();
    }
    is_auto_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_pitcher_throw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_pitcher_throw_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_auto;
        break;
      }
      
      // optional bool is_auto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_)));
          set_has_is_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_pitcher_throw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_pitcher_throw_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional bool is_auto = 2;
  if (has_is_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_auto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_pitcher_throw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_pitcher_throw_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional bool is_auto = 2;
  if (has_is_auto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_auto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_pitcher_throw::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_pitcher_throw_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional bool is_auto = 2;
    if (has_is_auto()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_pitcher_throw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_pitcher_throw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_pitcher_throw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_pitcher_throw::MergeFrom(const s_ans_pitcher_throw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::s_pitcher_throw_info::MergeFrom(from.info());
    }
    if (from.has_is_auto()) {
      set_is_auto(from.is_auto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_pitcher_throw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_pitcher_throw::CopyFrom(const s_ans_pitcher_throw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_pitcher_throw::IsInitialized() const {
  
  return true;
}

void s_ans_pitcher_throw::Swap(s_ans_pitcher_throw* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(is_auto_, other->is_auto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_pitcher_throw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_pitcher_throw_descriptor_;
  metadata.reflection = s_ans_pitcher_throw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_better_hit::kInfoFieldNumber;
#endif  // !_MSC_VER

s_req_better_hit::s_req_better_hit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_better_hit::InitAsDefaultInstance() {
  info_ = const_cast< ::s_better_hit_info*>(&::s_better_hit_info::default_instance());
}

s_req_better_hit::s_req_better_hit(const s_req_better_hit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_better_hit::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_better_hit::~s_req_better_hit() {
  SharedDtor();
}

void s_req_better_hit::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void s_req_better_hit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_better_hit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_better_hit_descriptor_;
}

const s_req_better_hit& s_req_better_hit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_better_hit* s_req_better_hit::default_instance_ = NULL;

s_req_better_hit* s_req_better_hit::New() const {
  return new s_req_better_hit;
}

void s_req_better_hit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::s_better_hit_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_better_hit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_better_hit_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_better_hit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_better_hit_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_better_hit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_better_hit_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_better_hit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_better_hit_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_better_hit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_better_hit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_better_hit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_better_hit::MergeFrom(const s_req_better_hit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::s_better_hit_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_better_hit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_better_hit::CopyFrom(const s_req_better_hit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_better_hit::IsInitialized() const {
  
  return true;
}

void s_req_better_hit::Swap(s_req_better_hit* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_better_hit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_better_hit_descriptor_;
  metadata.reflection = s_req_better_hit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_better_hit::kInfoFieldNumber;
const int s_ans_better_hit::kIsAutoFieldNumber;
#endif  // !_MSC_VER

s_ans_better_hit::s_ans_better_hit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_better_hit::InitAsDefaultInstance() {
  info_ = const_cast< ::s_better_hit_info*>(&::s_better_hit_info::default_instance());
}

s_ans_better_hit::s_ans_better_hit(const s_ans_better_hit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_better_hit::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  is_auto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_better_hit::~s_ans_better_hit() {
  SharedDtor();
}

void s_ans_better_hit::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void s_ans_better_hit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_better_hit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_better_hit_descriptor_;
}

const s_ans_better_hit& s_ans_better_hit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_better_hit* s_ans_better_hit::default_instance_ = NULL;

s_ans_better_hit* s_ans_better_hit::New() const {
  return new s_ans_better_hit;
}

void s_ans_better_hit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::s_better_hit_info::Clear();
    }
    is_auto_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_better_hit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_better_hit_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_auto;
        break;
      }
      
      // optional bool is_auto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_)));
          set_has_is_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_better_hit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_better_hit_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional bool is_auto = 2;
  if (has_is_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_auto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_better_hit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_better_hit_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional bool is_auto = 2;
  if (has_is_auto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_auto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_better_hit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_better_hit_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional bool is_auto = 2;
    if (has_is_auto()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_better_hit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_better_hit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_better_hit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_better_hit::MergeFrom(const s_ans_better_hit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::s_better_hit_info::MergeFrom(from.info());
    }
    if (from.has_is_auto()) {
      set_is_auto(from.is_auto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_better_hit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_better_hit::CopyFrom(const s_ans_better_hit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_better_hit::IsInitialized() const {
  
  return true;
}

void s_ans_better_hit::Swap(s_ans_better_hit* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(is_auto_, other->is_auto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_better_hit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_better_hit_descriptor_;
  metadata.reflection = s_ans_better_hit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_result_better_hit::kInfoFieldNumber;
const int s_req_result_better_hit::kTestFieldNumber;
#endif  // !_MSC_VER

s_req_result_better_hit::s_req_result_better_hit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_result_better_hit::InitAsDefaultInstance() {
  info_ = const_cast< ::s_result_round*>(&::s_result_round::default_instance());
}

s_req_result_better_hit::s_req_result_better_hit(const s_req_result_better_hit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_result_better_hit::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_result_better_hit::~s_req_result_better_hit() {
  SharedDtor();
}

void s_req_result_better_hit::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void s_req_result_better_hit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_result_better_hit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_result_better_hit_descriptor_;
}

const s_req_result_better_hit& s_req_result_better_hit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_result_better_hit* s_req_result_better_hit::default_instance_ = NULL;

s_req_result_better_hit* s_req_result_better_hit::New() const {
  return new s_req_result_better_hit;
}

void s_req_result_better_hit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::s_result_round::Clear();
    }
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_result_better_hit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_result_round info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_test;
        break;
      }
      
      // optional int32 test = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_result_better_hit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_result_round info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional int32 test = 2;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_result_better_hit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_result_round info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional int32 test = 2;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_result_better_hit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_result_round info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int32 test = 2;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_result_better_hit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_result_better_hit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_result_better_hit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_result_better_hit::MergeFrom(const s_req_result_better_hit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::s_result_round::MergeFrom(from.info());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_result_better_hit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_result_better_hit::CopyFrom(const s_req_result_better_hit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_result_better_hit::IsInitialized() const {
  
  return true;
}

void s_req_result_better_hit::Swap(s_req_result_better_hit* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_result_better_hit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_result_better_hit_descriptor_;
  metadata.reflection = s_req_result_better_hit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_result_better_hit::kInfoFieldNumber;
const int s_ans_result_better_hit::kEndTypeFieldNumber;
#endif  // !_MSC_VER

s_ans_result_better_hit::s_ans_result_better_hit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_result_better_hit::InitAsDefaultInstance() {
  info_ = const_cast< ::s_result_round*>(&::s_result_round::default_instance());
}

s_ans_result_better_hit::s_ans_result_better_hit(const s_ans_result_better_hit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_result_better_hit::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  end_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_result_better_hit::~s_ans_result_better_hit() {
  SharedDtor();
}

void s_ans_result_better_hit::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void s_ans_result_better_hit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_result_better_hit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_result_better_hit_descriptor_;
}

const s_ans_result_better_hit& s_ans_result_better_hit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_result_better_hit* s_ans_result_better_hit::default_instance_ = NULL;

s_ans_result_better_hit* s_ans_result_better_hit::New() const {
  return new s_ans_result_better_hit;
}

void s_ans_result_better_hit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::s_result_round::Clear();
    }
    end_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_result_better_hit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_result_round info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_type;
        break;
      }
      
      // optional int32 end_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_type_)));
          set_has_end_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_result_better_hit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_result_round info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional int32 end_type = 2;
  if (has_end_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_result_better_hit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_result_round info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional int32 end_type = 2;
  if (has_end_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_result_better_hit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_result_round info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int32 end_type = 2;
    if (has_end_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_result_better_hit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_result_better_hit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_result_better_hit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_result_better_hit::MergeFrom(const s_ans_result_better_hit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::s_result_round::MergeFrom(from.info());
    }
    if (from.has_end_type()) {
      set_end_type(from.end_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_result_better_hit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_result_better_hit::CopyFrom(const s_ans_result_better_hit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_result_better_hit::IsInitialized() const {
  
  return true;
}

void s_ans_result_better_hit::Swap(s_ans_result_better_hit* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(end_type_, other->end_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_result_better_hit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_result_better_hit_descriptor_;
  metadata.reflection = s_ans_result_better_hit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

s_x2bs_batter_ready::s_x2bs_batter_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_x2bs_batter_ready::InitAsDefaultInstance() {
}

s_x2bs_batter_ready::s_x2bs_batter_ready(const s_x2bs_batter_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_x2bs_batter_ready::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_x2bs_batter_ready::~s_x2bs_batter_ready() {
  SharedDtor();
}

void s_x2bs_batter_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_x2bs_batter_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_x2bs_batter_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_x2bs_batter_ready_descriptor_;
}

const s_x2bs_batter_ready& s_x2bs_batter_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_x2bs_batter_ready* s_x2bs_batter_ready::default_instance_ = NULL;

s_x2bs_batter_ready* s_x2bs_batter_ready::New() const {
  return new s_x2bs_batter_ready;
}

void s_x2bs_batter_ready::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_x2bs_batter_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void s_x2bs_batter_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_x2bs_batter_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_x2bs_batter_ready::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_x2bs_batter_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_x2bs_batter_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_x2bs_batter_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_x2bs_batter_ready::MergeFrom(const s_x2bs_batter_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_x2bs_batter_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_x2bs_batter_ready::CopyFrom(const s_x2bs_batter_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_x2bs_batter_ready::IsInitialized() const {
  
  return true;
}

void s_x2bs_batter_ready::Swap(s_x2bs_batter_ready* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_x2bs_batter_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_x2bs_batter_ready_descriptor_;
  metadata.reflection = s_x2bs_batter_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

s_bs2x_batter_ready::s_bs2x_batter_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2x_batter_ready::InitAsDefaultInstance() {
}

s_bs2x_batter_ready::s_bs2x_batter_ready(const s_bs2x_batter_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2x_batter_ready::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2x_batter_ready::~s_bs2x_batter_ready() {
  SharedDtor();
}

void s_bs2x_batter_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_bs2x_batter_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2x_batter_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2x_batter_ready_descriptor_;
}

const s_bs2x_batter_ready& s_bs2x_batter_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2x_batter_ready* s_bs2x_batter_ready::default_instance_ = NULL;

s_bs2x_batter_ready* s_bs2x_batter_ready::New() const {
  return new s_bs2x_batter_ready;
}

void s_bs2x_batter_ready::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2x_batter_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void s_bs2x_batter_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2x_batter_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2x_batter_ready::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2x_batter_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2x_batter_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2x_batter_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2x_batter_ready::MergeFrom(const s_bs2x_batter_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2x_batter_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2x_batter_ready::CopyFrom(const s_bs2x_batter_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2x_batter_ready::IsInitialized() const {
  
  return true;
}

void s_bs2x_batter_ready::Swap(s_bs2x_batter_ready* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2x_batter_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2x_batter_ready_descriptor_;
  metadata.reflection = s_bs2x_batter_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_change_attack_team::kRoundFieldNumber;
const int s_ans_change_attack_team::kAttackUserFieldNumber;
#endif  // !_MSC_VER

s_ans_change_attack_team::s_ans_change_attack_team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_change_attack_team::InitAsDefaultInstance() {
}

s_ans_change_attack_team::s_ans_change_attack_team(const s_ans_change_attack_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_change_attack_team::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  attack_user_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_change_attack_team::~s_ans_change_attack_team() {
  SharedDtor();
}

void s_ans_change_attack_team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_change_attack_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_change_attack_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_change_attack_team_descriptor_;
}

const s_ans_change_attack_team& s_ans_change_attack_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_change_attack_team* s_ans_change_attack_team::default_instance_ = NULL;

s_ans_change_attack_team* s_ans_change_attack_team::New() const {
  return new s_ans_change_attack_team;
}

void s_ans_change_attack_team::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_ = 0;
    attack_user_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_change_attack_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attack_user;
        break;
      }
      
      // optional int64 attack_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_user_)));
          set_has_attack_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_change_attack_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }
  
  // optional int64 attack_user = 2;
  if (has_attack_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->attack_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_change_attack_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }
  
  // optional int64 attack_user = 2;
  if (has_attack_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->attack_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_change_attack_team::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }
    
    // optional int64 attack_user = 2;
    if (has_attack_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_change_attack_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_change_attack_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_change_attack_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_change_attack_team::MergeFrom(const s_ans_change_attack_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_attack_user()) {
      set_attack_user(from.attack_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_change_attack_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_change_attack_team::CopyFrom(const s_ans_change_attack_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_change_attack_team::IsInitialized() const {
  
  return true;
}

void s_ans_change_attack_team::Swap(s_ans_change_attack_team* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(attack_user_, other->attack_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_change_attack_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_change_attack_team_descriptor_;
  metadata.reflection = s_ans_change_attack_team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_game_end::kRgFieldNumber;
const int s_ans_game_end::kUserFieldNumber;
const int s_ans_game_end::kEndTypeFieldNumber;
#endif  // !_MSC_VER

s_ans_game_end::s_ans_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_game_end::InitAsDefaultInstance() {
  rg_ = const_cast< ::s_result_game*>(&::s_result_game::default_instance());
  user_ = const_cast< ::s_tbl_user*>(&::s_tbl_user::default_instance());
}

s_ans_game_end::s_ans_game_end(const s_ans_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_game_end::SharedCtor() {
  _cached_size_ = 0;
  rg_ = NULL;
  user_ = NULL;
  end_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_game_end::~s_ans_game_end() {
  SharedDtor();
}

void s_ans_game_end::SharedDtor() {
  if (this != default_instance_) {
    delete rg_;
    delete user_;
  }
}

void s_ans_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_game_end_descriptor_;
}

const s_ans_game_end& s_ans_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_game_end* s_ans_game_end::default_instance_ = NULL;

s_ans_game_end* s_ans_game_end::New() const {
  return new s_ans_game_end;
}

void s_ans_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rg()) {
      if (rg_ != NULL) rg_->::s_result_game::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::s_tbl_user::Clear();
    }
    end_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_result_game rg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .s_tbl_user user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_type;
        break;
      }
      
      // optional int32 end_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_type_)));
          set_has_end_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_result_game rg = 1;
  if (has_rg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rg(), output);
  }
  
  // optional .s_tbl_user user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  // optional int32 end_type = 3;
  if (has_end_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_result_game rg = 1;
  if (has_rg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rg(), target);
  }
  
  // optional .s_tbl_user user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  // optional int32 end_type = 3;
  if (has_end_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_game_end::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_result_game rg = 1;
    if (has_rg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rg());
    }
    
    // optional .s_tbl_user user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional int32 end_type = 3;
    if (has_end_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_game_end::MergeFrom(const s_ans_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rg()) {
      mutable_rg()->::s_result_game::MergeFrom(from.rg());
    }
    if (from.has_user()) {
      mutable_user()->::s_tbl_user::MergeFrom(from.user());
    }
    if (from.has_end_type()) {
      set_end_type(from.end_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_game_end::CopyFrom(const s_ans_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_game_end::IsInitialized() const {
  
  return true;
}

void s_ans_game_end::Swap(s_ans_game_end* other) {
  if (other != this) {
    std::swap(rg_, other->rg_);
    std::swap(user_, other->user_);
    std::swap(end_type_, other->end_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_game_end_descriptor_;
  metadata.reflection = s_ans_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2x_game_end_other_user_info::kOtherUserFieldNumber;
#endif  // !_MSC_VER

s_bs2x_game_end_other_user_info::s_bs2x_game_end_other_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2x_game_end_other_user_info::InitAsDefaultInstance() {
  other_user_ = const_cast< ::s_tbl_user*>(&::s_tbl_user::default_instance());
}

s_bs2x_game_end_other_user_info::s_bs2x_game_end_other_user_info(const s_bs2x_game_end_other_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2x_game_end_other_user_info::SharedCtor() {
  _cached_size_ = 0;
  other_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2x_game_end_other_user_info::~s_bs2x_game_end_other_user_info() {
  SharedDtor();
}

void s_bs2x_game_end_other_user_info::SharedDtor() {
  if (this != default_instance_) {
    delete other_user_;
  }
}

void s_bs2x_game_end_other_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2x_game_end_other_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2x_game_end_other_user_info_descriptor_;
}

const s_bs2x_game_end_other_user_info& s_bs2x_game_end_other_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2x_game_end_other_user_info* s_bs2x_game_end_other_user_info::default_instance_ = NULL;

s_bs2x_game_end_other_user_info* s_bs2x_game_end_other_user_info::New() const {
  return new s_bs2x_game_end_other_user_info;
}

void s_bs2x_game_end_other_user_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_other_user()) {
      if (other_user_ != NULL) other_user_->::s_tbl_user::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2x_game_end_other_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_tbl_user other_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2x_game_end_other_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_tbl_user other_user = 1;
  if (has_other_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->other_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2x_game_end_other_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_tbl_user other_user = 1;
  if (has_other_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->other_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2x_game_end_other_user_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_tbl_user other_user = 1;
    if (has_other_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2x_game_end_other_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2x_game_end_other_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2x_game_end_other_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2x_game_end_other_user_info::MergeFrom(const s_bs2x_game_end_other_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other_user()) {
      mutable_other_user()->::s_tbl_user::MergeFrom(from.other_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2x_game_end_other_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2x_game_end_other_user_info::CopyFrom(const s_bs2x_game_end_other_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2x_game_end_other_user_info::IsInitialized() const {
  
  return true;
}

void s_bs2x_game_end_other_user_info::Swap(s_bs2x_game_end_other_user_info* other) {
  if (other != this) {
    std::swap(other_user_, other->other_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2x_game_end_other_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2x_game_end_other_user_info_descriptor_;
  metadata.reflection = s_bs2x_game_end_other_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2ug_game_end::kRgFieldNumber;
const int s_bs2ug_game_end::kIsBetterFieldNumber;
const int s_bs2ug_game_end::kRrFieldNumber;
#endif  // !_MSC_VER

s_bs2ug_game_end::s_bs2ug_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2ug_game_end::InitAsDefaultInstance() {
  rg_ = const_cast< ::s_result_game*>(&::s_result_game::default_instance());
}

s_bs2ug_game_end::s_bs2ug_game_end(const s_bs2ug_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2ug_game_end::SharedCtor() {
  _cached_size_ = 0;
  rg_ = NULL;
  is_better_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2ug_game_end::~s_bs2ug_game_end() {
  SharedDtor();
}

void s_bs2ug_game_end::SharedDtor() {
  if (this != default_instance_) {
    delete rg_;
  }
}

void s_bs2ug_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2ug_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2ug_game_end_descriptor_;
}

const s_bs2ug_game_end& s_bs2ug_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2ug_game_end* s_bs2ug_game_end::default_instance_ = NULL;

s_bs2ug_game_end* s_bs2ug_game_end::New() const {
  return new s_bs2ug_game_end;
}

void s_bs2ug_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rg()) {
      if (rg_ != NULL) rg_->::s_result_game::Clear();
    }
    is_better_ = false;
  }
  rr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2ug_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_result_game rg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_better;
        break;
      }
      
      // optional bool is_better = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_better:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_better_)));
          set_has_is_better();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rr;
        break;
      }
      
      // repeated .s_result_round rr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rr;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2ug_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_result_game rg = 1;
  if (has_rg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rg(), output);
  }
  
  // optional bool is_better = 2;
  if (has_is_better()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_better(), output);
  }
  
  // repeated .s_result_round rr = 3;
  for (int i = 0; i < this->rr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rr(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2ug_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_result_game rg = 1;
  if (has_rg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rg(), target);
  }
  
  // optional bool is_better = 2;
  if (has_is_better()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_better(), target);
  }
  
  // repeated .s_result_round rr = 3;
  for (int i = 0; i < this->rr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rr(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2ug_game_end::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_result_game rg = 1;
    if (has_rg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rg());
    }
    
    // optional bool is_better = 2;
    if (has_is_better()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .s_result_round rr = 3;
  total_size += 1 * this->rr_size();
  for (int i = 0; i < this->rr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rr(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2ug_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2ug_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2ug_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2ug_game_end::MergeFrom(const s_bs2ug_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  rr_.MergeFrom(from.rr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rg()) {
      mutable_rg()->::s_result_game::MergeFrom(from.rg());
    }
    if (from.has_is_better()) {
      set_is_better(from.is_better());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2ug_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2ug_game_end::CopyFrom(const s_bs2ug_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2ug_game_end::IsInitialized() const {
  
  return true;
}

void s_bs2ug_game_end::Swap(s_bs2ug_game_end* other) {
  if (other != this) {
    std::swap(rg_, other->rg_);
    std::swap(is_better_, other->is_better_);
    rr_.Swap(&other->rr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2ug_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2ug_game_end_descriptor_;
  metadata.reflection = s_bs2ug_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ug2bs_game_end::kRgFieldNumber;
const int s_ug2bs_game_end::kUserFieldNumber;
#endif  // !_MSC_VER

s_ug2bs_game_end::s_ug2bs_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ug2bs_game_end::InitAsDefaultInstance() {
  rg_ = const_cast< ::s_result_game*>(&::s_result_game::default_instance());
  user_ = const_cast< ::s_tbl_user*>(&::s_tbl_user::default_instance());
}

s_ug2bs_game_end::s_ug2bs_game_end(const s_ug2bs_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ug2bs_game_end::SharedCtor() {
  _cached_size_ = 0;
  rg_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ug2bs_game_end::~s_ug2bs_game_end() {
  SharedDtor();
}

void s_ug2bs_game_end::SharedDtor() {
  if (this != default_instance_) {
    delete rg_;
    delete user_;
  }
}

void s_ug2bs_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ug2bs_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ug2bs_game_end_descriptor_;
}

const s_ug2bs_game_end& s_ug2bs_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ug2bs_game_end* s_ug2bs_game_end::default_instance_ = NULL;

s_ug2bs_game_end* s_ug2bs_game_end::New() const {
  return new s_ug2bs_game_end;
}

void s_ug2bs_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rg()) {
      if (rg_ != NULL) rg_->::s_result_game::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::s_tbl_user::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ug2bs_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_result_game rg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .s_tbl_user user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ug2bs_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_result_game rg = 1;
  if (has_rg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rg(), output);
  }
  
  // optional .s_tbl_user user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ug2bs_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_result_game rg = 1;
  if (has_rg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rg(), target);
  }
  
  // optional .s_tbl_user user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ug2bs_game_end::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_result_game rg = 1;
    if (has_rg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rg());
    }
    
    // optional .s_tbl_user user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ug2bs_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ug2bs_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ug2bs_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ug2bs_game_end::MergeFrom(const s_ug2bs_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rg()) {
      mutable_rg()->::s_result_game::MergeFrom(from.rg());
    }
    if (from.has_user()) {
      mutable_user()->::s_tbl_user::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ug2bs_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ug2bs_game_end::CopyFrom(const s_ug2bs_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ug2bs_game_end::IsInitialized() const {
  
  return true;
}

void s_ug2bs_game_end::Swap(s_ug2bs_game_end* other) {
  if (other != this) {
    std::swap(rg_, other->rg_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ug2bs_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ug2bs_game_end_descriptor_;
  metadata.reflection = s_ug2bs_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_user_disconnect::kUidFieldNumber;
const int s_ans_user_disconnect::kSysErrorIdFieldNumber;
#endif  // !_MSC_VER

s_ans_user_disconnect::s_ans_user_disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_user_disconnect::InitAsDefaultInstance() {
}

s_ans_user_disconnect::s_ans_user_disconnect(const s_ans_user_disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_user_disconnect::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  sys_error_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_user_disconnect::~s_ans_user_disconnect() {
  SharedDtor();
}

void s_ans_user_disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_user_disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_user_disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_user_disconnect_descriptor_;
}

const s_ans_user_disconnect& s_ans_user_disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_user_disconnect* s_ans_user_disconnect::default_instance_ = NULL;

s_ans_user_disconnect* s_ans_user_disconnect::New() const {
  return new s_ans_user_disconnect;
}

void s_ans_user_disconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    sys_error_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_user_disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sys_error_id;
        break;
      }
      
      // optional int32 sys_error_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_error_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_error_id_)));
          set_has_sys_error_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_user_disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional int32 sys_error_id = 2;
  if (has_sys_error_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sys_error_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_user_disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional int32 sys_error_id = 2;
  if (has_sys_error_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sys_error_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_user_disconnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 sys_error_id = 2;
    if (has_sys_error_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_error_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_user_disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_user_disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_user_disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_user_disconnect::MergeFrom(const s_ans_user_disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sys_error_id()) {
      set_sys_error_id(from.sys_error_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_user_disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_user_disconnect::CopyFrom(const s_ans_user_disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_user_disconnect::IsInitialized() const {
  
  return true;
}

void s_ans_user_disconnect::Swap(s_ans_user_disconnect* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(sys_error_id_, other->sys_error_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_user_disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_user_disconnect_descriptor_;
  metadata.reflection = s_ans_user_disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_rematch::kUidFieldNumber;
#endif  // !_MSC_VER

s_req_rematch::s_req_rematch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_rematch::InitAsDefaultInstance() {
}

s_req_rematch::s_req_rematch(const s_req_rematch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_rematch::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_rematch::~s_req_rematch() {
  SharedDtor();
}

void s_req_rematch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_rematch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_rematch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_rematch_descriptor_;
}

const s_req_rematch& s_req_rematch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_rematch* s_req_rematch::default_instance_ = NULL;

s_req_rematch* s_req_rematch::New() const {
  return new s_req_rematch;
}

void s_req_rematch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_rematch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_rematch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_rematch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_rematch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_rematch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_rematch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_rematch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_rematch::MergeFrom(const s_req_rematch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_rematch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_rematch::CopyFrom(const s_req_rematch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_rematch::IsInitialized() const {
  
  return true;
}

void s_req_rematch::Swap(s_req_rematch* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_rematch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_rematch_descriptor_;
  metadata.reflection = s_req_rematch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_rematch::kUidFieldNumber;
#endif  // !_MSC_VER

s_ans_rematch::s_ans_rematch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_rematch::InitAsDefaultInstance() {
}

s_ans_rematch::s_ans_rematch(const s_ans_rematch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_rematch::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_rematch::~s_ans_rematch() {
  SharedDtor();
}

void s_ans_rematch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_rematch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_rematch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_rematch_descriptor_;
}

const s_ans_rematch& s_ans_rematch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_rematch* s_ans_rematch::default_instance_ = NULL;

s_ans_rematch* s_ans_rematch::New() const {
  return new s_ans_rematch;
}

void s_ans_rematch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_rematch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_rematch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_rematch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_rematch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_rematch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_rematch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_rematch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_rematch::MergeFrom(const s_ans_rematch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_rematch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_rematch::CopyFrom(const s_ans_rematch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_rematch::IsInitialized() const {
  
  return true;
}

void s_ans_rematch::Swap(s_ans_rematch* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_rematch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_rematch_descriptor_;
  metadata.reflection = s_ans_rematch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_answer_restart_game::kUidFieldNumber;
const int s_req_answer_restart_game::kOkFieldNumber;
#endif  // !_MSC_VER

s_req_answer_restart_game::s_req_answer_restart_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_req_answer_restart_game::InitAsDefaultInstance() {
}

s_req_answer_restart_game::s_req_answer_restart_game(const s_req_answer_restart_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_answer_restart_game::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_answer_restart_game::~s_req_answer_restart_game() {
  SharedDtor();
}

void s_req_answer_restart_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_answer_restart_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_req_answer_restart_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_req_answer_restart_game_descriptor_;
}

const s_req_answer_restart_game& s_req_answer_restart_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_req_answer_restart_game* s_req_answer_restart_game::default_instance_ = NULL;

s_req_answer_restart_game* s_req_answer_restart_game::New() const {
  return new s_req_answer_restart_game;
}

void s_req_answer_restart_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    ok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_req_answer_restart_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ok;
        break;
      }
      
      // optional bool ok = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_answer_restart_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional bool ok = 2;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_req_answer_restart_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional bool ok = 2;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_req_answer_restart_game::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional bool ok = 2;
    if (has_ok()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_answer_restart_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_req_answer_restart_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_req_answer_restart_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_req_answer_restart_game::MergeFrom(const s_req_answer_restart_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ok()) {
      set_ok(from.ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_req_answer_restart_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_req_answer_restart_game::CopyFrom(const s_req_answer_restart_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_answer_restart_game::IsInitialized() const {
  
  return true;
}

void s_req_answer_restart_game::Swap(s_req_answer_restart_game* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(ok_, other->ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_req_answer_restart_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_req_answer_restart_game_descriptor_;
  metadata.reflection = s_req_answer_restart_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_answer_restart_game::kUidFieldNumber;
const int s_ans_answer_restart_game::kOkFieldNumber;
const int s_ans_answer_restart_game::kBaseballParkFieldNumber;
const int s_ans_answer_restart_game::kAttackUserFieldNumber;
#endif  // !_MSC_VER

s_ans_answer_restart_game::s_ans_answer_restart_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ans_answer_restart_game::InitAsDefaultInstance() {
}

s_ans_answer_restart_game::s_ans_answer_restart_game(const s_ans_answer_restart_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_answer_restart_game::SharedCtor() {
  _cached_size_ = 0;
  baseball_park_ = 0;
  attack_user_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_answer_restart_game::~s_ans_answer_restart_game() {
  SharedDtor();
}

void s_ans_answer_restart_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_answer_restart_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ans_answer_restart_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ans_answer_restart_game_descriptor_;
}

const s_ans_answer_restart_game& s_ans_answer_restart_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ans_answer_restart_game* s_ans_answer_restart_game::default_instance_ = NULL;

s_ans_answer_restart_game* s_ans_answer_restart_game::New() const {
  return new s_ans_answer_restart_game;
}

void s_ans_answer_restart_game::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    baseball_park_ = 0;
    attack_user_ = GOOGLE_LONGLONG(0);
  }
  uid_.Clear();
  ok_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ans_answer_restart_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uid;
        if (input->ExpectTag(16)) goto parse_ok;
        break;
      }
      
      // repeated bool ok = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_ok())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_ok())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ok;
        if (input->ExpectTag(24)) goto parse_baseball_park;
        break;
      }
      
      // optional int32 baseball_park = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseball_park:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseball_park_)));
          set_has_baseball_park();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack_user;
        break;
      }
      
      // optional int64 attack_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_user_)));
          set_has_attack_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_answer_restart_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 uid = 1;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->uid(i), output);
  }
  
  // repeated bool ok = 2;
  for (int i = 0; i < this->ok_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->ok(i), output);
  }
  
  // optional int32 baseball_park = 3;
  if (has_baseball_park()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseball_park(), output);
  }
  
  // optional int64 attack_user = 4;
  if (has_attack_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->attack_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ans_answer_restart_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 uid = 1;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->uid(i), target);
  }
  
  // repeated bool ok = 2;
  for (int i = 0; i < this->ok_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->ok(i), target);
  }
  
  // optional int32 baseball_park = 3;
  if (has_baseball_park()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseball_park(), target);
  }
  
  // optional int64 attack_user = 4;
  if (has_attack_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->attack_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ans_answer_restart_game::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 baseball_park = 3;
    if (has_baseball_park()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseball_park());
    }
    
    // optional int64 attack_user = 4;
    if (has_attack_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack_user());
    }
    
  }
  // repeated int64 uid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->uid(i));
    }
    total_size += 1 * this->uid_size() + data_size;
  }
  
  // repeated bool ok = 2;
  {
    int data_size = 0;
    data_size = 1 * this->ok_size();
    total_size += 1 * this->ok_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_answer_restart_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ans_answer_restart_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ans_answer_restart_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ans_answer_restart_game::MergeFrom(const s_ans_answer_restart_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  uid_.MergeFrom(from.uid_);
  ok_.MergeFrom(from.ok_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_baseball_park()) {
      set_baseball_park(from.baseball_park());
    }
    if (from.has_attack_user()) {
      set_attack_user(from.attack_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ans_answer_restart_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ans_answer_restart_game::CopyFrom(const s_ans_answer_restart_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_answer_restart_game::IsInitialized() const {
  
  return true;
}

void s_ans_answer_restart_game::Swap(s_ans_answer_restart_game* other) {
  if (other != this) {
    uid_.Swap(&other->uid_);
    ok_.Swap(&other->ok_);
    std::swap(baseball_park_, other->baseball_park_);
    std::swap(attack_user_, other->attack_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ans_answer_restart_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ans_answer_restart_game_descriptor_;
  metadata.reflection = s_ans_answer_restart_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ug2bs_echo::kTypeFieldNumber;
const int s_ug2bs_echo::kMsgFieldNumber;
const int s_ug2bs_echo::kBsTimeMsecFieldNumber;
const int s_ug2bs_echo::kUgTimeMsecFieldNumber;
#endif  // !_MSC_VER

s_ug2bs_echo::s_ug2bs_echo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ug2bs_echo::InitAsDefaultInstance() {
}

s_ug2bs_echo::s_ug2bs_echo(const s_ug2bs_echo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ug2bs_echo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bs_time_msec_ = GOOGLE_LONGLONG(0);
  ug_time_msec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ug2bs_echo::~s_ug2bs_echo() {
  SharedDtor();
}

void s_ug2bs_echo::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_ug2bs_echo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ug2bs_echo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ug2bs_echo_descriptor_;
}

const s_ug2bs_echo& s_ug2bs_echo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ug2bs_echo* s_ug2bs_echo::default_instance_ = NULL;

s_ug2bs_echo* s_ug2bs_echo::New() const {
  return new s_ug2bs_echo;
}

void s_ug2bs_echo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    bs_time_msec_ = GOOGLE_LONGLONG(0);
    ug_time_msec_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ug2bs_echo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bs_time_msec;
        break;
      }
      
      // optional int64 bs_time_msec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bs_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bs_time_msec_)));
          set_has_bs_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ug_time_msec;
        break;
      }
      
      // optional int64 ug_time_msec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ug_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ug_time_msec_)));
          set_has_ug_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ug2bs_echo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional int64 bs_time_msec = 3;
  if (has_bs_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bs_time_msec(), output);
  }
  
  // optional int64 ug_time_msec = 4;
  if (has_ug_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ug_time_msec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ug2bs_echo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional int64 bs_time_msec = 3;
  if (has_bs_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bs_time_msec(), target);
  }
  
  // optional int64 ug_time_msec = 4;
  if (has_ug_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ug_time_msec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ug2bs_echo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int64 bs_time_msec = 3;
    if (has_bs_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bs_time_msec());
    }
    
    // optional int64 ug_time_msec = 4;
    if (has_ug_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ug_time_msec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ug2bs_echo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ug2bs_echo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ug2bs_echo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ug2bs_echo::MergeFrom(const s_ug2bs_echo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_bs_time_msec()) {
      set_bs_time_msec(from.bs_time_msec());
    }
    if (from.has_ug_time_msec()) {
      set_ug_time_msec(from.ug_time_msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ug2bs_echo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ug2bs_echo::CopyFrom(const s_ug2bs_echo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ug2bs_echo::IsInitialized() const {
  
  return true;
}

void s_ug2bs_echo::Swap(s_ug2bs_echo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(bs_time_msec_, other->bs_time_msec_);
    std::swap(ug_time_msec_, other->ug_time_msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ug2bs_echo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ug2bs_echo_descriptor_;
  metadata.reflection = s_ug2bs_echo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2ug_echo::kTypeFieldNumber;
const int s_bs2ug_echo::kMsgFieldNumber;
const int s_bs2ug_echo::kBsTimeMsecFieldNumber;
const int s_bs2ug_echo::kUgTimeMsecFieldNumber;
#endif  // !_MSC_VER

s_bs2ug_echo::s_bs2ug_echo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2ug_echo::InitAsDefaultInstance() {
}

s_bs2ug_echo::s_bs2ug_echo(const s_bs2ug_echo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2ug_echo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bs_time_msec_ = GOOGLE_LONGLONG(0);
  ug_time_msec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2ug_echo::~s_bs2ug_echo() {
  SharedDtor();
}

void s_bs2ug_echo::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void s_bs2ug_echo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2ug_echo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2ug_echo_descriptor_;
}

const s_bs2ug_echo& s_bs2ug_echo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2ug_echo* s_bs2ug_echo::default_instance_ = NULL;

s_bs2ug_echo* s_bs2ug_echo::New() const {
  return new s_bs2ug_echo;
}

void s_bs2ug_echo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    bs_time_msec_ = GOOGLE_LONGLONG(0);
    ug_time_msec_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2ug_echo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bs_time_msec;
        break;
      }
      
      // optional int64 bs_time_msec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bs_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bs_time_msec_)));
          set_has_bs_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ug_time_msec;
        break;
      }
      
      // optional int64 ug_time_msec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ug_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ug_time_msec_)));
          set_has_ug_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2ug_echo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional int64 bs_time_msec = 3;
  if (has_bs_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bs_time_msec(), output);
  }
  
  // optional int64 ug_time_msec = 4;
  if (has_ug_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ug_time_msec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2ug_echo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional int64 bs_time_msec = 3;
  if (has_bs_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bs_time_msec(), target);
  }
  
  // optional int64 ug_time_msec = 4;
  if (has_ug_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ug_time_msec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2ug_echo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int64 bs_time_msec = 3;
    if (has_bs_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bs_time_msec());
    }
    
    // optional int64 ug_time_msec = 4;
    if (has_ug_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ug_time_msec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2ug_echo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2ug_echo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2ug_echo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2ug_echo::MergeFrom(const s_bs2ug_echo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_bs_time_msec()) {
      set_bs_time_msec(from.bs_time_msec());
    }
    if (from.has_ug_time_msec()) {
      set_ug_time_msec(from.ug_time_msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2ug_echo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2ug_echo::CopyFrom(const s_bs2ug_echo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2ug_echo::IsInitialized() const {
  
  return true;
}

void s_bs2ug_echo::Swap(s_bs2ug_echo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(bs_time_msec_, other->bs_time_msec_);
    std::swap(ug_time_msec_, other->ug_time_msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2ug_echo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2ug_echo_descriptor_;
  metadata.reflection = s_bs2ug_echo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ug2bs_error::kSysErrorIdFieldNumber;
#endif  // !_MSC_VER

s_ug2bs_error::s_ug2bs_error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ug2bs_error::InitAsDefaultInstance() {
}

s_ug2bs_error::s_ug2bs_error(const s_ug2bs_error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ug2bs_error::SharedCtor() {
  _cached_size_ = 0;
  sys_error_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ug2bs_error::~s_ug2bs_error() {
  SharedDtor();
}

void s_ug2bs_error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ug2bs_error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ug2bs_error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ug2bs_error_descriptor_;
}

const s_ug2bs_error& s_ug2bs_error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ug2bs_error* s_ug2bs_error::default_instance_ = NULL;

s_ug2bs_error* s_ug2bs_error::New() const {
  return new s_ug2bs_error;
}

void s_ug2bs_error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sys_error_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ug2bs_error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sys_error_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_error_id_)));
          set_has_sys_error_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ug2bs_error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sys_error_id = 1;
  if (has_sys_error_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sys_error_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ug2bs_error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sys_error_id = 1;
  if (has_sys_error_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sys_error_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ug2bs_error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sys_error_id = 1;
    if (has_sys_error_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_error_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ug2bs_error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ug2bs_error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ug2bs_error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ug2bs_error::MergeFrom(const s_ug2bs_error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_error_id()) {
      set_sys_error_id(from.sys_error_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ug2bs_error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ug2bs_error::CopyFrom(const s_ug2bs_error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ug2bs_error::IsInitialized() const {
  
  return true;
}

void s_ug2bs_error::Swap(s_ug2bs_error* other) {
  if (other != this) {
    std::swap(sys_error_id_, other->sys_error_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ug2bs_error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ug2bs_error_descriptor_;
  metadata.reflection = s_ug2bs_error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2ug_error::kSysErrorIdFieldNumber;
#endif  // !_MSC_VER

s_bs2ug_error::s_bs2ug_error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2ug_error::InitAsDefaultInstance() {
}

s_bs2ug_error::s_bs2ug_error(const s_bs2ug_error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2ug_error::SharedCtor() {
  _cached_size_ = 0;
  sys_error_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2ug_error::~s_bs2ug_error() {
  SharedDtor();
}

void s_bs2ug_error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_bs2ug_error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2ug_error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2ug_error_descriptor_;
}

const s_bs2ug_error& s_bs2ug_error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2ug_error* s_bs2ug_error::default_instance_ = NULL;

s_bs2ug_error* s_bs2ug_error::New() const {
  return new s_bs2ug_error;
}

void s_bs2ug_error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sys_error_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2ug_error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sys_error_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_error_id_)));
          set_has_sys_error_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2ug_error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sys_error_id = 1;
  if (has_sys_error_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sys_error_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2ug_error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sys_error_id = 1;
  if (has_sys_error_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sys_error_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2ug_error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sys_error_id = 1;
    if (has_sys_error_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_error_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2ug_error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2ug_error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2ug_error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2ug_error::MergeFrom(const s_bs2ug_error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_error_id()) {
      set_sys_error_id(from.sys_error_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2ug_error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2ug_error::CopyFrom(const s_bs2ug_error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2ug_error::IsInitialized() const {
  
  return true;
}

void s_bs2ug_error::Swap(s_bs2ug_error* other) {
  if (other != this) {
    std::swap(sys_error_id_, other->sys_error_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2ug_error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2ug_error_descriptor_;
  metadata.reflection = s_bs2ug_error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_bs2ug_add_discon_tot::kDisconUidFieldNumber;
#endif  // !_MSC_VER

s_bs2ug_add_discon_tot::s_bs2ug_add_discon_tot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_bs2ug_add_discon_tot::InitAsDefaultInstance() {
}

s_bs2ug_add_discon_tot::s_bs2ug_add_discon_tot(const s_bs2ug_add_discon_tot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_bs2ug_add_discon_tot::SharedCtor() {
  _cached_size_ = 0;
  discon_uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bs2ug_add_discon_tot::~s_bs2ug_add_discon_tot() {
  SharedDtor();
}

void s_bs2ug_add_discon_tot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_bs2ug_add_discon_tot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_bs2ug_add_discon_tot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_bs2ug_add_discon_tot_descriptor_;
}

const s_bs2ug_add_discon_tot& s_bs2ug_add_discon_tot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_bs2ug_add_discon_tot* s_bs2ug_add_discon_tot::default_instance_ = NULL;

s_bs2ug_add_discon_tot* s_bs2ug_add_discon_tot::New() const {
  return new s_bs2ug_add_discon_tot;
}

void s_bs2ug_add_discon_tot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    discon_uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_bs2ug_add_discon_tot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 discon_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &discon_uid_)));
          set_has_discon_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bs2ug_add_discon_tot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 discon_uid = 1;
  if (has_discon_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->discon_uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_bs2ug_add_discon_tot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 discon_uid = 1;
  if (has_discon_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->discon_uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_bs2ug_add_discon_tot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 discon_uid = 1;
    if (has_discon_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->discon_uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bs2ug_add_discon_tot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_bs2ug_add_discon_tot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_bs2ug_add_discon_tot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_bs2ug_add_discon_tot::MergeFrom(const s_bs2ug_add_discon_tot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_discon_uid()) {
      set_discon_uid(from.discon_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_bs2ug_add_discon_tot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_bs2ug_add_discon_tot::CopyFrom(const s_bs2ug_add_discon_tot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bs2ug_add_discon_tot::IsInitialized() const {
  
  return true;
}

void s_bs2ug_add_discon_tot::Swap(s_bs2ug_add_discon_tot* other) {
  if (other != this) {
    std::swap(discon_uid_, other->discon_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_bs2ug_add_discon_tot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_bs2ug_add_discon_tot_descriptor_;
  metadata.reflection = s_bs2ug_add_discon_tot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_ug2bs_add_discon_tot::kDisconUidFieldNumber;
#endif  // !_MSC_VER

s_ug2bs_add_discon_tot::s_ug2bs_add_discon_tot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_ug2bs_add_discon_tot::InitAsDefaultInstance() {
}

s_ug2bs_add_discon_tot::s_ug2bs_add_discon_tot(const s_ug2bs_add_discon_tot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_ug2bs_add_discon_tot::SharedCtor() {
  _cached_size_ = 0;
  discon_uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ug2bs_add_discon_tot::~s_ug2bs_add_discon_tot() {
  SharedDtor();
}

void s_ug2bs_add_discon_tot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ug2bs_add_discon_tot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_ug2bs_add_discon_tot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_ug2bs_add_discon_tot_descriptor_;
}

const s_ug2bs_add_discon_tot& s_ug2bs_add_discon_tot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

s_ug2bs_add_discon_tot* s_ug2bs_add_discon_tot::default_instance_ = NULL;

s_ug2bs_add_discon_tot* s_ug2bs_add_discon_tot::New() const {
  return new s_ug2bs_add_discon_tot;
}

void s_ug2bs_add_discon_tot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    discon_uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_ug2bs_add_discon_tot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 discon_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &discon_uid_)));
          set_has_discon_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ug2bs_add_discon_tot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 discon_uid = 1;
  if (has_discon_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->discon_uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_ug2bs_add_discon_tot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 discon_uid = 1;
  if (has_discon_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->discon_uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_ug2bs_add_discon_tot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 discon_uid = 1;
    if (has_discon_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->discon_uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ug2bs_add_discon_tot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_ug2bs_add_discon_tot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_ug2bs_add_discon_tot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_ug2bs_add_discon_tot::MergeFrom(const s_ug2bs_add_discon_tot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_discon_uid()) {
      set_discon_uid(from.discon_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_ug2bs_add_discon_tot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_ug2bs_add_discon_tot::CopyFrom(const s_ug2bs_add_discon_tot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ug2bs_add_discon_tot::IsInitialized() const {
  
  return true;
}

void s_ug2bs_add_discon_tot::Swap(s_ug2bs_add_discon_tot* other) {
  if (other != this) {
    std::swap(discon_uid_, other->discon_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_ug2bs_add_discon_tot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_ug2bs_add_discon_tot_descriptor_;
  metadata.reflection = s_ug2bs_add_discon_tot_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BaseballServer_UserGateServer_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseballServer_UserGateServer_Type_descriptor_;
}
bool BaseballServer_UserGateServer_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::NONE;
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::bs2ug_set_cvar;
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::bs2ug_game_end;
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::bs2ug_echo;
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::bs2ug_error;
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::bs2ug_add_discon_tot;
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::Type_MIN;
const BaseballServer_UserGateServer_Type BaseballServer_UserGateServer::Type_MAX;
const int BaseballServer_UserGateServer::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BaseballServer_UserGateServer::kTypeFieldNumber;
const int BaseballServer_UserGateServer::kMBs2UgSetCvarFieldNumber;
const int BaseballServer_UserGateServer::kMBs2UgGameEndFieldNumber;
const int BaseballServer_UserGateServer::kMBs2UgEchoFieldNumber;
const int BaseballServer_UserGateServer::kMBs2UgErrorFieldNumber;
const int BaseballServer_UserGateServer::kMBs2UgAddDisconTotFieldNumber;
#endif  // !_MSC_VER

BaseballServer_UserGateServer::BaseballServer_UserGateServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseballServer_UserGateServer::InitAsDefaultInstance() {
  m_bs2ug_set_cvar_ = const_cast< ::s_bs2ug_set_cvar*>(&::s_bs2ug_set_cvar::default_instance());
  m_bs2ug_game_end_ = const_cast< ::s_bs2ug_game_end*>(&::s_bs2ug_game_end::default_instance());
  m_bs2ug_echo_ = const_cast< ::s_bs2ug_echo*>(&::s_bs2ug_echo::default_instance());
  m_bs2ug_error_ = const_cast< ::s_bs2ug_error*>(&::s_bs2ug_error::default_instance());
  m_bs2ug_add_discon_tot_ = const_cast< ::s_bs2ug_add_discon_tot*>(&::s_bs2ug_add_discon_tot::default_instance());
}

BaseballServer_UserGateServer::BaseballServer_UserGateServer(const BaseballServer_UserGateServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseballServer_UserGateServer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_bs2ug_set_cvar_ = NULL;
  m_bs2ug_game_end_ = NULL;
  m_bs2ug_echo_ = NULL;
  m_bs2ug_error_ = NULL;
  m_bs2ug_add_discon_tot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseballServer_UserGateServer::~BaseballServer_UserGateServer() {
  SharedDtor();
}

void BaseballServer_UserGateServer::SharedDtor() {
  if (this != default_instance_) {
    delete m_bs2ug_set_cvar_;
    delete m_bs2ug_game_end_;
    delete m_bs2ug_echo_;
    delete m_bs2ug_error_;
    delete m_bs2ug_add_discon_tot_;
  }
}

void BaseballServer_UserGateServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseballServer_UserGateServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseballServer_UserGateServer_descriptor_;
}

const BaseballServer_UserGateServer& BaseballServer_UserGateServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

BaseballServer_UserGateServer* BaseballServer_UserGateServer::default_instance_ = NULL;

BaseballServer_UserGateServer* BaseballServer_UserGateServer::New() const {
  return new BaseballServer_UserGateServer;
}

void BaseballServer_UserGateServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_bs2ug_set_cvar()) {
      if (m_bs2ug_set_cvar_ != NULL) m_bs2ug_set_cvar_->::s_bs2ug_set_cvar::Clear();
    }
    if (has_m_bs2ug_game_end()) {
      if (m_bs2ug_game_end_ != NULL) m_bs2ug_game_end_->::s_bs2ug_game_end::Clear();
    }
    if (has_m_bs2ug_echo()) {
      if (m_bs2ug_echo_ != NULL) m_bs2ug_echo_->::s_bs2ug_echo::Clear();
    }
    if (has_m_bs2ug_error()) {
      if (m_bs2ug_error_ != NULL) m_bs2ug_error_->::s_bs2ug_error::Clear();
    }
    if (has_m_bs2ug_add_discon_tot()) {
      if (m_bs2ug_add_discon_tot_ != NULL) m_bs2ug_add_discon_tot_->::s_bs2ug_add_discon_tot::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseballServer_UserGateServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BaseballServer_UserGateServer.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BaseballServer_UserGateServer_Type_IsValid(value)) {
            set_type(static_cast< ::BaseballServer_UserGateServer_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_bs2ug_set_cvar;
        break;
      }
      
      // optional .s_bs2ug_set_cvar m_bs2ug_set_cvar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2ug_set_cvar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2ug_set_cvar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_bs2ug_game_end;
        break;
      }
      
      // optional .s_bs2ug_game_end m_bs2ug_game_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2ug_game_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2ug_game_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_bs2ug_echo;
        break;
      }
      
      // optional .s_bs2ug_echo m_bs2ug_echo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2ug_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2ug_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_bs2ug_error;
        break;
      }
      
      // optional .s_bs2ug_error m_bs2ug_error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2ug_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2ug_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_bs2ug_add_discon_tot;
        break;
      }
      
      // optional .s_bs2ug_add_discon_tot m_bs2ug_add_discon_tot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2ug_add_discon_tot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2ug_add_discon_tot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseballServer_UserGateServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BaseballServer_UserGateServer.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_bs2ug_set_cvar m_bs2ug_set_cvar = 2;
  if (has_m_bs2ug_set_cvar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_bs2ug_set_cvar(), output);
  }
  
  // optional .s_bs2ug_game_end m_bs2ug_game_end = 3;
  if (has_m_bs2ug_game_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_bs2ug_game_end(), output);
  }
  
  // optional .s_bs2ug_echo m_bs2ug_echo = 4;
  if (has_m_bs2ug_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_bs2ug_echo(), output);
  }
  
  // optional .s_bs2ug_error m_bs2ug_error = 5;
  if (has_m_bs2ug_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_bs2ug_error(), output);
  }
  
  // optional .s_bs2ug_add_discon_tot m_bs2ug_add_discon_tot = 6;
  if (has_m_bs2ug_add_discon_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_bs2ug_add_discon_tot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseballServer_UserGateServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BaseballServer_UserGateServer.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .s_bs2ug_set_cvar m_bs2ug_set_cvar = 2;
  if (has_m_bs2ug_set_cvar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_bs2ug_set_cvar(), target);
  }
  
  // optional .s_bs2ug_game_end m_bs2ug_game_end = 3;
  if (has_m_bs2ug_game_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_bs2ug_game_end(), target);
  }
  
  // optional .s_bs2ug_echo m_bs2ug_echo = 4;
  if (has_m_bs2ug_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_bs2ug_echo(), target);
  }
  
  // optional .s_bs2ug_error m_bs2ug_error = 5;
  if (has_m_bs2ug_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_bs2ug_error(), target);
  }
  
  // optional .s_bs2ug_add_discon_tot m_bs2ug_add_discon_tot = 6;
  if (has_m_bs2ug_add_discon_tot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_bs2ug_add_discon_tot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseballServer_UserGateServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BaseballServer_UserGateServer.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_bs2ug_set_cvar m_bs2ug_set_cvar = 2;
    if (has_m_bs2ug_set_cvar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2ug_set_cvar());
    }
    
    // optional .s_bs2ug_game_end m_bs2ug_game_end = 3;
    if (has_m_bs2ug_game_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2ug_game_end());
    }
    
    // optional .s_bs2ug_echo m_bs2ug_echo = 4;
    if (has_m_bs2ug_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2ug_echo());
    }
    
    // optional .s_bs2ug_error m_bs2ug_error = 5;
    if (has_m_bs2ug_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2ug_error());
    }
    
    // optional .s_bs2ug_add_discon_tot m_bs2ug_add_discon_tot = 6;
    if (has_m_bs2ug_add_discon_tot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2ug_add_discon_tot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseballServer_UserGateServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseballServer_UserGateServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseballServer_UserGateServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseballServer_UserGateServer::MergeFrom(const BaseballServer_UserGateServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_bs2ug_set_cvar()) {
      mutable_m_bs2ug_set_cvar()->::s_bs2ug_set_cvar::MergeFrom(from.m_bs2ug_set_cvar());
    }
    if (from.has_m_bs2ug_game_end()) {
      mutable_m_bs2ug_game_end()->::s_bs2ug_game_end::MergeFrom(from.m_bs2ug_game_end());
    }
    if (from.has_m_bs2ug_echo()) {
      mutable_m_bs2ug_echo()->::s_bs2ug_echo::MergeFrom(from.m_bs2ug_echo());
    }
    if (from.has_m_bs2ug_error()) {
      mutable_m_bs2ug_error()->::s_bs2ug_error::MergeFrom(from.m_bs2ug_error());
    }
    if (from.has_m_bs2ug_add_discon_tot()) {
      mutable_m_bs2ug_add_discon_tot()->::s_bs2ug_add_discon_tot::MergeFrom(from.m_bs2ug_add_discon_tot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseballServer_UserGateServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseballServer_UserGateServer::CopyFrom(const BaseballServer_UserGateServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseballServer_UserGateServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BaseballServer_UserGateServer::Swap(BaseballServer_UserGateServer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_bs2ug_set_cvar_, other->m_bs2ug_set_cvar_);
    std::swap(m_bs2ug_game_end_, other->m_bs2ug_game_end_);
    std::swap(m_bs2ug_echo_, other->m_bs2ug_echo_);
    std::swap(m_bs2ug_error_, other->m_bs2ug_error_);
    std::swap(m_bs2ug_add_discon_tot_, other->m_bs2ug_add_discon_tot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseballServer_UserGateServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseballServer_UserGateServer_descriptor_;
  metadata.reflection = BaseballServer_UserGateServer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BaseballServer_Client_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseballServer_Client_Type_descriptor_;
}
bool BaseballServer_Client_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BaseballServer_Client_Type BaseballServer_Client::NONE;
const BaseballServer_Client_Type BaseballServer_Client::ans_join_room;
const BaseballServer_Client_Type BaseballServer_Client::ans_room_state;
const BaseballServer_Client_Type BaseballServer_Client::bs2x_echo;
const BaseballServer_Client_Type BaseballServer_Client::ans_chat;
const BaseballServer_Client_Type BaseballServer_Client::ans_timer_start;
const BaseballServer_Client_Type BaseballServer_Client::bs2x_echo2;
const BaseballServer_Client_Type BaseballServer_Client::ans_bs_error;
const BaseballServer_Client_Type BaseballServer_Client::bs2x_auto_match_ready2;
const BaseballServer_Client_Type BaseballServer_Client::ans_game_start;
const BaseballServer_Client_Type BaseballServer_Client::ans_game_round_start;
const BaseballServer_Client_Type BaseballServer_Client::bs2x_match_ready;
const BaseballServer_Client_Type BaseballServer_Client::ans_pitcher_throw;
const BaseballServer_Client_Type BaseballServer_Client::ans_better_hit;
const BaseballServer_Client_Type BaseballServer_Client::ans_result_better_hit;
const BaseballServer_Client_Type BaseballServer_Client::bs2x_batter_ready;
const BaseballServer_Client_Type BaseballServer_Client::ans_change_attack_team;
const BaseballServer_Client_Type BaseballServer_Client::ans_game_end;
const BaseballServer_Client_Type BaseballServer_Client::bs2x_game_end_other_user_info;
const BaseballServer_Client_Type BaseballServer_Client::ans_user_disconnect;
const BaseballServer_Client_Type BaseballServer_Client::ans_rematch;
const BaseballServer_Client_Type BaseballServer_Client::ans_answer_restart_game;
const BaseballServer_Client_Type BaseballServer_Client::Type_MIN;
const BaseballServer_Client_Type BaseballServer_Client::Type_MAX;
const int BaseballServer_Client::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BaseballServer_Client::kTypeFieldNumber;
const int BaseballServer_Client::kMAnsJoinRoomFieldNumber;
const int BaseballServer_Client::kMAnsRoomStateFieldNumber;
const int BaseballServer_Client::kMBs2XEchoFieldNumber;
const int BaseballServer_Client::kMAnsChatFieldNumber;
const int BaseballServer_Client::kMAnsTimerStartFieldNumber;
const int BaseballServer_Client::kMBs2XEcho2FieldNumber;
const int BaseballServer_Client::kMAnsBsErrorFieldNumber;
const int BaseballServer_Client::kMBs2XAutoMatchReady2FieldNumber;
const int BaseballServer_Client::kMAnsGameStartFieldNumber;
const int BaseballServer_Client::kMAnsGameRoundStartFieldNumber;
const int BaseballServer_Client::kMBs2XMatchReadyFieldNumber;
const int BaseballServer_Client::kMAnsPitcherThrowFieldNumber;
const int BaseballServer_Client::kMAnsBetterHitFieldNumber;
const int BaseballServer_Client::kMAnsResultBetterHitFieldNumber;
const int BaseballServer_Client::kMBs2XBatterReadyFieldNumber;
const int BaseballServer_Client::kMAnsChangeAttackTeamFieldNumber;
const int BaseballServer_Client::kMAnsGameEndFieldNumber;
const int BaseballServer_Client::kMBs2XGameEndOtherUserInfoFieldNumber;
const int BaseballServer_Client::kMAnsUserDisconnectFieldNumber;
const int BaseballServer_Client::kMAnsRematchFieldNumber;
const int BaseballServer_Client::kMAnsAnswerRestartGameFieldNumber;
#endif  // !_MSC_VER

BaseballServer_Client::BaseballServer_Client()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseballServer_Client::InitAsDefaultInstance() {
  m_ans_join_room_ = const_cast< ::s_ans_join_room*>(&::s_ans_join_room::default_instance());
  m_ans_room_state_ = const_cast< ::s_ans_room_state*>(&::s_ans_room_state::default_instance());
  m_bs2x_echo_ = const_cast< ::s_bs2x_echo*>(&::s_bs2x_echo::default_instance());
  m_ans_chat_ = const_cast< ::s_ans_chat*>(&::s_ans_chat::default_instance());
  m_ans_timer_start_ = const_cast< ::s_ans_timer_start*>(&::s_ans_timer_start::default_instance());
  m_bs2x_echo2_ = const_cast< ::s_bs2x_echo2*>(&::s_bs2x_echo2::default_instance());
  m_ans_bs_error_ = const_cast< ::s_ans_bs_error*>(&::s_ans_bs_error::default_instance());
  m_bs2x_auto_match_ready2_ = const_cast< ::s_bs2x_auto_match_ready2*>(&::s_bs2x_auto_match_ready2::default_instance());
  m_ans_game_start_ = const_cast< ::s_ans_game_start*>(&::s_ans_game_start::default_instance());
  m_ans_game_round_start_ = const_cast< ::s_ans_game_round_start*>(&::s_ans_game_round_start::default_instance());
  m_bs2x_match_ready_ = const_cast< ::s_bs2x_match_ready*>(&::s_bs2x_match_ready::default_instance());
  m_ans_pitcher_throw_ = const_cast< ::s_ans_pitcher_throw*>(&::s_ans_pitcher_throw::default_instance());
  m_ans_better_hit_ = const_cast< ::s_ans_better_hit*>(&::s_ans_better_hit::default_instance());
  m_ans_result_better_hit_ = const_cast< ::s_ans_result_better_hit*>(&::s_ans_result_better_hit::default_instance());
  m_bs2x_batter_ready_ = const_cast< ::s_bs2x_batter_ready*>(&::s_bs2x_batter_ready::default_instance());
  m_ans_change_attack_team_ = const_cast< ::s_ans_change_attack_team*>(&::s_ans_change_attack_team::default_instance());
  m_ans_game_end_ = const_cast< ::s_ans_game_end*>(&::s_ans_game_end::default_instance());
  m_bs2x_game_end_other_user_info_ = const_cast< ::s_bs2x_game_end_other_user_info*>(&::s_bs2x_game_end_other_user_info::default_instance());
  m_ans_user_disconnect_ = const_cast< ::s_ans_user_disconnect*>(&::s_ans_user_disconnect::default_instance());
  m_ans_rematch_ = const_cast< ::s_ans_rematch*>(&::s_ans_rematch::default_instance());
  m_ans_answer_restart_game_ = const_cast< ::s_ans_answer_restart_game*>(&::s_ans_answer_restart_game::default_instance());
}

BaseballServer_Client::BaseballServer_Client(const BaseballServer_Client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseballServer_Client::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_ans_join_room_ = NULL;
  m_ans_room_state_ = NULL;
  m_bs2x_echo_ = NULL;
  m_ans_chat_ = NULL;
  m_ans_timer_start_ = NULL;
  m_bs2x_echo2_ = NULL;
  m_ans_bs_error_ = NULL;
  m_bs2x_auto_match_ready2_ = NULL;
  m_ans_game_start_ = NULL;
  m_ans_game_round_start_ = NULL;
  m_bs2x_match_ready_ = NULL;
  m_ans_pitcher_throw_ = NULL;
  m_ans_better_hit_ = NULL;
  m_ans_result_better_hit_ = NULL;
  m_bs2x_batter_ready_ = NULL;
  m_ans_change_attack_team_ = NULL;
  m_ans_game_end_ = NULL;
  m_bs2x_game_end_other_user_info_ = NULL;
  m_ans_user_disconnect_ = NULL;
  m_ans_rematch_ = NULL;
  m_ans_answer_restart_game_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseballServer_Client::~BaseballServer_Client() {
  SharedDtor();
}

void BaseballServer_Client::SharedDtor() {
  if (this != default_instance_) {
    delete m_ans_join_room_;
    delete m_ans_room_state_;
    delete m_bs2x_echo_;
    delete m_ans_chat_;
    delete m_ans_timer_start_;
    delete m_bs2x_echo2_;
    delete m_ans_bs_error_;
    delete m_bs2x_auto_match_ready2_;
    delete m_ans_game_start_;
    delete m_ans_game_round_start_;
    delete m_bs2x_match_ready_;
    delete m_ans_pitcher_throw_;
    delete m_ans_better_hit_;
    delete m_ans_result_better_hit_;
    delete m_bs2x_batter_ready_;
    delete m_ans_change_attack_team_;
    delete m_ans_game_end_;
    delete m_bs2x_game_end_other_user_info_;
    delete m_ans_user_disconnect_;
    delete m_ans_rematch_;
    delete m_ans_answer_restart_game_;
  }
}

void BaseballServer_Client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseballServer_Client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseballServer_Client_descriptor_;
}

const BaseballServer_Client& BaseballServer_Client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

BaseballServer_Client* BaseballServer_Client::default_instance_ = NULL;

BaseballServer_Client* BaseballServer_Client::New() const {
  return new BaseballServer_Client;
}

void BaseballServer_Client::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_ans_join_room()) {
      if (m_ans_join_room_ != NULL) m_ans_join_room_->::s_ans_join_room::Clear();
    }
    if (has_m_ans_room_state()) {
      if (m_ans_room_state_ != NULL) m_ans_room_state_->::s_ans_room_state::Clear();
    }
    if (has_m_bs2x_echo()) {
      if (m_bs2x_echo_ != NULL) m_bs2x_echo_->::s_bs2x_echo::Clear();
    }
    if (has_m_ans_chat()) {
      if (m_ans_chat_ != NULL) m_ans_chat_->::s_ans_chat::Clear();
    }
    if (has_m_ans_timer_start()) {
      if (m_ans_timer_start_ != NULL) m_ans_timer_start_->::s_ans_timer_start::Clear();
    }
    if (has_m_bs2x_echo2()) {
      if (m_bs2x_echo2_ != NULL) m_bs2x_echo2_->::s_bs2x_echo2::Clear();
    }
    if (has_m_ans_bs_error()) {
      if (m_ans_bs_error_ != NULL) m_ans_bs_error_->::s_ans_bs_error::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_bs2x_auto_match_ready2()) {
      if (m_bs2x_auto_match_ready2_ != NULL) m_bs2x_auto_match_ready2_->::s_bs2x_auto_match_ready2::Clear();
    }
    if (has_m_ans_game_start()) {
      if (m_ans_game_start_ != NULL) m_ans_game_start_->::s_ans_game_start::Clear();
    }
    if (has_m_ans_game_round_start()) {
      if (m_ans_game_round_start_ != NULL) m_ans_game_round_start_->::s_ans_game_round_start::Clear();
    }
    if (has_m_bs2x_match_ready()) {
      if (m_bs2x_match_ready_ != NULL) m_bs2x_match_ready_->::s_bs2x_match_ready::Clear();
    }
    if (has_m_ans_pitcher_throw()) {
      if (m_ans_pitcher_throw_ != NULL) m_ans_pitcher_throw_->::s_ans_pitcher_throw::Clear();
    }
    if (has_m_ans_better_hit()) {
      if (m_ans_better_hit_ != NULL) m_ans_better_hit_->::s_ans_better_hit::Clear();
    }
    if (has_m_ans_result_better_hit()) {
      if (m_ans_result_better_hit_ != NULL) m_ans_result_better_hit_->::s_ans_result_better_hit::Clear();
    }
    if (has_m_bs2x_batter_ready()) {
      if (m_bs2x_batter_ready_ != NULL) m_bs2x_batter_ready_->::s_bs2x_batter_ready::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_ans_change_attack_team()) {
      if (m_ans_change_attack_team_ != NULL) m_ans_change_attack_team_->::s_ans_change_attack_team::Clear();
    }
    if (has_m_ans_game_end()) {
      if (m_ans_game_end_ != NULL) m_ans_game_end_->::s_ans_game_end::Clear();
    }
    if (has_m_bs2x_game_end_other_user_info()) {
      if (m_bs2x_game_end_other_user_info_ != NULL) m_bs2x_game_end_other_user_info_->::s_bs2x_game_end_other_user_info::Clear();
    }
    if (has_m_ans_user_disconnect()) {
      if (m_ans_user_disconnect_ != NULL) m_ans_user_disconnect_->::s_ans_user_disconnect::Clear();
    }
    if (has_m_ans_rematch()) {
      if (m_ans_rematch_ != NULL) m_ans_rematch_->::s_ans_rematch::Clear();
    }
    if (has_m_ans_answer_restart_game()) {
      if (m_ans_answer_restart_game_ != NULL) m_ans_answer_restart_game_->::s_ans_answer_restart_game::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseballServer_Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BaseballServer_Client.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BaseballServer_Client_Type_IsValid(value)) {
            set_type(static_cast< ::BaseballServer_Client_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ans_join_room;
        break;
      }
      
      // optional .s_ans_join_room m_ans_join_room = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_join_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_join_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_ans_room_state;
        break;
      }
      
      // optional .s_ans_room_state m_ans_room_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_room_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_room_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_bs2x_echo;
        break;
      }
      
      // optional .s_bs2x_echo m_bs2x_echo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2x_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2x_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_ans_chat;
        break;
      }
      
      // optional .s_ans_chat m_ans_chat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_chat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_ans_timer_start;
        break;
      }
      
      // optional .s_ans_timer_start m_ans_timer_start = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_timer_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_timer_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_bs2x_echo2;
        break;
      }
      
      // optional .s_bs2x_echo2 m_bs2x_echo2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2x_echo2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2x_echo2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_ans_bs_error;
        break;
      }
      
      // optional .s_ans_bs_error m_ans_bs_error = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_bs_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_bs_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_bs2x_auto_match_ready2;
        break;
      }
      
      // optional .s_bs2x_auto_match_ready2 m_bs2x_auto_match_ready2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2x_auto_match_ready2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2x_auto_match_ready2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_ans_game_start;
        break;
      }
      
      // optional .s_ans_game_start m_ans_game_start = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_game_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_game_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_ans_game_round_start;
        break;
      }
      
      // optional .s_ans_game_round_start m_ans_game_round_start = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_game_round_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_game_round_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_bs2x_match_ready;
        break;
      }
      
      // optional .s_bs2x_match_ready m_bs2x_match_ready = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2x_match_ready:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2x_match_ready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_ans_pitcher_throw;
        break;
      }
      
      // optional .s_ans_pitcher_throw m_ans_pitcher_throw = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_pitcher_throw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_pitcher_throw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_ans_better_hit;
        break;
      }
      
      // optional .s_ans_better_hit m_ans_better_hit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_better_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_better_hit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_ans_result_better_hit;
        break;
      }
      
      // optional .s_ans_result_better_hit m_ans_result_better_hit = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_result_better_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_result_better_hit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_bs2x_batter_ready;
        break;
      }
      
      // optional .s_bs2x_batter_ready m_bs2x_batter_ready = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2x_batter_ready:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2x_batter_ready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_ans_change_attack_team;
        break;
      }
      
      // optional .s_ans_change_attack_team m_ans_change_attack_team = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_change_attack_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_change_attack_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_m_ans_game_end;
        break;
      }
      
      // optional .s_ans_game_end m_ans_game_end = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_game_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_game_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_bs2x_game_end_other_user_info;
        break;
      }
      
      // optional .s_bs2x_game_end_other_user_info m_bs2x_game_end_other_user_info = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bs2x_game_end_other_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bs2x_game_end_other_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_ans_user_disconnect;
        break;
      }
      
      // optional .s_ans_user_disconnect m_ans_user_disconnect = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_user_disconnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_user_disconnect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_m_ans_rematch;
        break;
      }
      
      // optional .s_ans_rematch m_ans_rematch = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_rematch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_rematch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_m_ans_answer_restart_game;
        break;
      }
      
      // optional .s_ans_answer_restart_game m_ans_answer_restart_game = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_answer_restart_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_answer_restart_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseballServer_Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BaseballServer_Client.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_ans_join_room m_ans_join_room = 2;
  if (has_m_ans_join_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_ans_join_room(), output);
  }
  
  // optional .s_ans_room_state m_ans_room_state = 3;
  if (has_m_ans_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_ans_room_state(), output);
  }
  
  // optional .s_bs2x_echo m_bs2x_echo = 4;
  if (has_m_bs2x_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_bs2x_echo(), output);
  }
  
  // optional .s_ans_chat m_ans_chat = 5;
  if (has_m_ans_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_ans_chat(), output);
  }
  
  // optional .s_ans_timer_start m_ans_timer_start = 6;
  if (has_m_ans_timer_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_ans_timer_start(), output);
  }
  
  // optional .s_bs2x_echo2 m_bs2x_echo2 = 7;
  if (has_m_bs2x_echo2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_bs2x_echo2(), output);
  }
  
  // optional .s_ans_bs_error m_ans_bs_error = 8;
  if (has_m_ans_bs_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_ans_bs_error(), output);
  }
  
  // optional .s_bs2x_auto_match_ready2 m_bs2x_auto_match_ready2 = 9;
  if (has_m_bs2x_auto_match_ready2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_bs2x_auto_match_ready2(), output);
  }
  
  // optional .s_ans_game_start m_ans_game_start = 10;
  if (has_m_ans_game_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_ans_game_start(), output);
  }
  
  // optional .s_ans_game_round_start m_ans_game_round_start = 11;
  if (has_m_ans_game_round_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_ans_game_round_start(), output);
  }
  
  // optional .s_bs2x_match_ready m_bs2x_match_ready = 12;
  if (has_m_bs2x_match_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_bs2x_match_ready(), output);
  }
  
  // optional .s_ans_pitcher_throw m_ans_pitcher_throw = 13;
  if (has_m_ans_pitcher_throw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_ans_pitcher_throw(), output);
  }
  
  // optional .s_ans_better_hit m_ans_better_hit = 14;
  if (has_m_ans_better_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m_ans_better_hit(), output);
  }
  
  // optional .s_ans_result_better_hit m_ans_result_better_hit = 15;
  if (has_m_ans_result_better_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_ans_result_better_hit(), output);
  }
  
  // optional .s_bs2x_batter_ready m_bs2x_batter_ready = 16;
  if (has_m_bs2x_batter_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_bs2x_batter_ready(), output);
  }
  
  // optional .s_ans_change_attack_team m_ans_change_attack_team = 17;
  if (has_m_ans_change_attack_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->m_ans_change_attack_team(), output);
  }
  
  // optional .s_ans_game_end m_ans_game_end = 18;
  if (has_m_ans_game_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->m_ans_game_end(), output);
  }
  
  // optional .s_bs2x_game_end_other_user_info m_bs2x_game_end_other_user_info = 19;
  if (has_m_bs2x_game_end_other_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->m_bs2x_game_end_other_user_info(), output);
  }
  
  // optional .s_ans_user_disconnect m_ans_user_disconnect = 20;
  if (has_m_ans_user_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->m_ans_user_disconnect(), output);
  }
  
  // optional .s_ans_rematch m_ans_rematch = 21;
  if (has_m_ans_rematch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->m_ans_rematch(), output);
  }
  
  // optional .s_ans_answer_restart_game m_ans_answer_restart_game = 22;
  if (has_m_ans_answer_restart_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->m_ans_answer_restart_game(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseballServer_Client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BaseballServer_Client.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .s_ans_join_room m_ans_join_room = 2;
  if (has_m_ans_join_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_ans_join_room(), target);
  }
  
  // optional .s_ans_room_state m_ans_room_state = 3;
  if (has_m_ans_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_ans_room_state(), target);
  }
  
  // optional .s_bs2x_echo m_bs2x_echo = 4;
  if (has_m_bs2x_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_bs2x_echo(), target);
  }
  
  // optional .s_ans_chat m_ans_chat = 5;
  if (has_m_ans_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_ans_chat(), target);
  }
  
  // optional .s_ans_timer_start m_ans_timer_start = 6;
  if (has_m_ans_timer_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_ans_timer_start(), target);
  }
  
  // optional .s_bs2x_echo2 m_bs2x_echo2 = 7;
  if (has_m_bs2x_echo2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_bs2x_echo2(), target);
  }
  
  // optional .s_ans_bs_error m_ans_bs_error = 8;
  if (has_m_ans_bs_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_ans_bs_error(), target);
  }
  
  // optional .s_bs2x_auto_match_ready2 m_bs2x_auto_match_ready2 = 9;
  if (has_m_bs2x_auto_match_ready2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_bs2x_auto_match_ready2(), target);
  }
  
  // optional .s_ans_game_start m_ans_game_start = 10;
  if (has_m_ans_game_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_ans_game_start(), target);
  }
  
  // optional .s_ans_game_round_start m_ans_game_round_start = 11;
  if (has_m_ans_game_round_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_ans_game_round_start(), target);
  }
  
  // optional .s_bs2x_match_ready m_bs2x_match_ready = 12;
  if (has_m_bs2x_match_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_bs2x_match_ready(), target);
  }
  
  // optional .s_ans_pitcher_throw m_ans_pitcher_throw = 13;
  if (has_m_ans_pitcher_throw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_ans_pitcher_throw(), target);
  }
  
  // optional .s_ans_better_hit m_ans_better_hit = 14;
  if (has_m_ans_better_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m_ans_better_hit(), target);
  }
  
  // optional .s_ans_result_better_hit m_ans_result_better_hit = 15;
  if (has_m_ans_result_better_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_ans_result_better_hit(), target);
  }
  
  // optional .s_bs2x_batter_ready m_bs2x_batter_ready = 16;
  if (has_m_bs2x_batter_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_bs2x_batter_ready(), target);
  }
  
  // optional .s_ans_change_attack_team m_ans_change_attack_team = 17;
  if (has_m_ans_change_attack_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->m_ans_change_attack_team(), target);
  }
  
  // optional .s_ans_game_end m_ans_game_end = 18;
  if (has_m_ans_game_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->m_ans_game_end(), target);
  }
  
  // optional .s_bs2x_game_end_other_user_info m_bs2x_game_end_other_user_info = 19;
  if (has_m_bs2x_game_end_other_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->m_bs2x_game_end_other_user_info(), target);
  }
  
  // optional .s_ans_user_disconnect m_ans_user_disconnect = 20;
  if (has_m_ans_user_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->m_ans_user_disconnect(), target);
  }
  
  // optional .s_ans_rematch m_ans_rematch = 21;
  if (has_m_ans_rematch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->m_ans_rematch(), target);
  }
  
  // optional .s_ans_answer_restart_game m_ans_answer_restart_game = 22;
  if (has_m_ans_answer_restart_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->m_ans_answer_restart_game(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseballServer_Client::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BaseballServer_Client.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_ans_join_room m_ans_join_room = 2;
    if (has_m_ans_join_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_join_room());
    }
    
    // optional .s_ans_room_state m_ans_room_state = 3;
    if (has_m_ans_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_room_state());
    }
    
    // optional .s_bs2x_echo m_bs2x_echo = 4;
    if (has_m_bs2x_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2x_echo());
    }
    
    // optional .s_ans_chat m_ans_chat = 5;
    if (has_m_ans_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_chat());
    }
    
    // optional .s_ans_timer_start m_ans_timer_start = 6;
    if (has_m_ans_timer_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_timer_start());
    }
    
    // optional .s_bs2x_echo2 m_bs2x_echo2 = 7;
    if (has_m_bs2x_echo2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2x_echo2());
    }
    
    // optional .s_ans_bs_error m_ans_bs_error = 8;
    if (has_m_ans_bs_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_bs_error());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .s_bs2x_auto_match_ready2 m_bs2x_auto_match_ready2 = 9;
    if (has_m_bs2x_auto_match_ready2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2x_auto_match_ready2());
    }
    
    // optional .s_ans_game_start m_ans_game_start = 10;
    if (has_m_ans_game_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_game_start());
    }
    
    // optional .s_ans_game_round_start m_ans_game_round_start = 11;
    if (has_m_ans_game_round_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_game_round_start());
    }
    
    // optional .s_bs2x_match_ready m_bs2x_match_ready = 12;
    if (has_m_bs2x_match_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2x_match_ready());
    }
    
    // optional .s_ans_pitcher_throw m_ans_pitcher_throw = 13;
    if (has_m_ans_pitcher_throw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_pitcher_throw());
    }
    
    // optional .s_ans_better_hit m_ans_better_hit = 14;
    if (has_m_ans_better_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_better_hit());
    }
    
    // optional .s_ans_result_better_hit m_ans_result_better_hit = 15;
    if (has_m_ans_result_better_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_result_better_hit());
    }
    
    // optional .s_bs2x_batter_ready m_bs2x_batter_ready = 16;
    if (has_m_bs2x_batter_ready()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2x_batter_ready());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .s_ans_change_attack_team m_ans_change_attack_team = 17;
    if (has_m_ans_change_attack_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_change_attack_team());
    }
    
    // optional .s_ans_game_end m_ans_game_end = 18;
    if (has_m_ans_game_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_game_end());
    }
    
    // optional .s_bs2x_game_end_other_user_info m_bs2x_game_end_other_user_info = 19;
    if (has_m_bs2x_game_end_other_user_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bs2x_game_end_other_user_info());
    }
    
    // optional .s_ans_user_disconnect m_ans_user_disconnect = 20;
    if (has_m_ans_user_disconnect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_user_disconnect());
    }
    
    // optional .s_ans_rematch m_ans_rematch = 21;
    if (has_m_ans_rematch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_rematch());
    }
    
    // optional .s_ans_answer_restart_game m_ans_answer_restart_game = 22;
    if (has_m_ans_answer_restart_game()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_answer_restart_game());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseballServer_Client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseballServer_Client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseballServer_Client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseballServer_Client::MergeFrom(const BaseballServer_Client& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_ans_join_room()) {
      mutable_m_ans_join_room()->::s_ans_join_room::MergeFrom(from.m_ans_join_room());
    }
    if (from.has_m_ans_room_state()) {
      mutable_m_ans_room_state()->::s_ans_room_state::MergeFrom(from.m_ans_room_state());
    }
    if (from.has_m_bs2x_echo()) {
      mutable_m_bs2x_echo()->::s_bs2x_echo::MergeFrom(from.m_bs2x_echo());
    }
    if (from.has_m_ans_chat()) {
      mutable_m_ans_chat()->::s_ans_chat::MergeFrom(from.m_ans_chat());
    }
    if (from.has_m_ans_timer_start()) {
      mutable_m_ans_timer_start()->::s_ans_timer_start::MergeFrom(from.m_ans_timer_start());
    }
    if (from.has_m_bs2x_echo2()) {
      mutable_m_bs2x_echo2()->::s_bs2x_echo2::MergeFrom(from.m_bs2x_echo2());
    }
    if (from.has_m_ans_bs_error()) {
      mutable_m_ans_bs_error()->::s_ans_bs_error::MergeFrom(from.m_ans_bs_error());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_bs2x_auto_match_ready2()) {
      mutable_m_bs2x_auto_match_ready2()->::s_bs2x_auto_match_ready2::MergeFrom(from.m_bs2x_auto_match_ready2());
    }
    if (from.has_m_ans_game_start()) {
      mutable_m_ans_game_start()->::s_ans_game_start::MergeFrom(from.m_ans_game_start());
    }
    if (from.has_m_ans_game_round_start()) {
      mutable_m_ans_game_round_start()->::s_ans_game_round_start::MergeFrom(from.m_ans_game_round_start());
    }
    if (from.has_m_bs2x_match_ready()) {
      mutable_m_bs2x_match_ready()->::s_bs2x_match_ready::MergeFrom(from.m_bs2x_match_ready());
    }
    if (from.has_m_ans_pitcher_throw()) {
      mutable_m_ans_pitcher_throw()->::s_ans_pitcher_throw::MergeFrom(from.m_ans_pitcher_throw());
    }
    if (from.has_m_ans_better_hit()) {
      mutable_m_ans_better_hit()->::s_ans_better_hit::MergeFrom(from.m_ans_better_hit());
    }
    if (from.has_m_ans_result_better_hit()) {
      mutable_m_ans_result_better_hit()->::s_ans_result_better_hit::MergeFrom(from.m_ans_result_better_hit());
    }
    if (from.has_m_bs2x_batter_ready()) {
      mutable_m_bs2x_batter_ready()->::s_bs2x_batter_ready::MergeFrom(from.m_bs2x_batter_ready());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_ans_change_attack_team()) {
      mutable_m_ans_change_attack_team()->::s_ans_change_attack_team::MergeFrom(from.m_ans_change_attack_team());
    }
    if (from.has_m_ans_game_end()) {
      mutable_m_ans_game_end()->::s_ans_game_end::MergeFrom(from.m_ans_game_end());
    }
    if (from.has_m_bs2x_game_end_other_user_info()) {
      mutable_m_bs2x_game_end_other_user_info()->::s_bs2x_game_end_other_user_info::MergeFrom(from.m_bs2x_game_end_other_user_info());
    }
    if (from.has_m_ans_user_disconnect()) {
      mutable_m_ans_user_disconnect()->::s_ans_user_disconnect::MergeFrom(from.m_ans_user_disconnect());
    }
    if (from.has_m_ans_rematch()) {
      mutable_m_ans_rematch()->::s_ans_rematch::MergeFrom(from.m_ans_rematch());
    }
    if (from.has_m_ans_answer_restart_game()) {
      mutable_m_ans_answer_restart_game()->::s_ans_answer_restart_game::MergeFrom(from.m_ans_answer_restart_game());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseballServer_Client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseballServer_Client::CopyFrom(const BaseballServer_Client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseballServer_Client::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_m_ans_join_room()) {
    if (!this->m_ans_join_room().IsInitialized()) return false;
  }
  if (has_m_ans_room_state()) {
    if (!this->m_ans_room_state().IsInitialized()) return false;
  }
  return true;
}

void BaseballServer_Client::Swap(BaseballServer_Client* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_ans_join_room_, other->m_ans_join_room_);
    std::swap(m_ans_room_state_, other->m_ans_room_state_);
    std::swap(m_bs2x_echo_, other->m_bs2x_echo_);
    std::swap(m_ans_chat_, other->m_ans_chat_);
    std::swap(m_ans_timer_start_, other->m_ans_timer_start_);
    std::swap(m_bs2x_echo2_, other->m_bs2x_echo2_);
    std::swap(m_ans_bs_error_, other->m_ans_bs_error_);
    std::swap(m_bs2x_auto_match_ready2_, other->m_bs2x_auto_match_ready2_);
    std::swap(m_ans_game_start_, other->m_ans_game_start_);
    std::swap(m_ans_game_round_start_, other->m_ans_game_round_start_);
    std::swap(m_bs2x_match_ready_, other->m_bs2x_match_ready_);
    std::swap(m_ans_pitcher_throw_, other->m_ans_pitcher_throw_);
    std::swap(m_ans_better_hit_, other->m_ans_better_hit_);
    std::swap(m_ans_result_better_hit_, other->m_ans_result_better_hit_);
    std::swap(m_bs2x_batter_ready_, other->m_bs2x_batter_ready_);
    std::swap(m_ans_change_attack_team_, other->m_ans_change_attack_team_);
    std::swap(m_ans_game_end_, other->m_ans_game_end_);
    std::swap(m_bs2x_game_end_other_user_info_, other->m_bs2x_game_end_other_user_info_);
    std::swap(m_ans_user_disconnect_, other->m_ans_user_disconnect_);
    std::swap(m_ans_rematch_, other->m_ans_rematch_);
    std::swap(m_ans_answer_restart_game_, other->m_ans_answer_restart_game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseballServer_Client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseballServer_Client_descriptor_;
  metadata.reflection = BaseballServer_Client_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserGateServer_BaseballServer_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGateServer_BaseballServer_Type_descriptor_;
}
bool UserGateServer_BaseballServer_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::NONE;
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::ug2bs_ans_set_cvar;
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::ug2bs_game_end;
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::ug2bs_echo;
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::ug2bs_error;
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::ug2bs_add_discon_tot;
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::Type_MIN;
const UserGateServer_BaseballServer_Type UserGateServer_BaseballServer::Type_MAX;
const int UserGateServer_BaseballServer::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserGateServer_BaseballServer::kTypeFieldNumber;
const int UserGateServer_BaseballServer::kMUg2BsAnsSetCvarFieldNumber;
const int UserGateServer_BaseballServer::kMUg2BsGameEndFieldNumber;
const int UserGateServer_BaseballServer::kMUg2BsEchoFieldNumber;
const int UserGateServer_BaseballServer::kMUg2BsErrorFieldNumber;
const int UserGateServer_BaseballServer::kMUg2BsAddDisconTotFieldNumber;
#endif  // !_MSC_VER

UserGateServer_BaseballServer::UserGateServer_BaseballServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserGateServer_BaseballServer::InitAsDefaultInstance() {
  m_ug2bs_ans_set_cvar_ = const_cast< ::s_ug2bs_ans_set_cvar*>(&::s_ug2bs_ans_set_cvar::default_instance());
  m_ug2bs_game_end_ = const_cast< ::s_ug2bs_game_end*>(&::s_ug2bs_game_end::default_instance());
  m_ug2bs_echo_ = const_cast< ::s_ug2bs_echo*>(&::s_ug2bs_echo::default_instance());
  m_ug2bs_error_ = const_cast< ::s_ug2bs_error*>(&::s_ug2bs_error::default_instance());
  m_ug2bs_add_discon_tot_ = const_cast< ::s_ug2bs_add_discon_tot*>(&::s_ug2bs_add_discon_tot::default_instance());
}

UserGateServer_BaseballServer::UserGateServer_BaseballServer(const UserGateServer_BaseballServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserGateServer_BaseballServer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_ug2bs_ans_set_cvar_ = NULL;
  m_ug2bs_game_end_ = NULL;
  m_ug2bs_echo_ = NULL;
  m_ug2bs_error_ = NULL;
  m_ug2bs_add_discon_tot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGateServer_BaseballServer::~UserGateServer_BaseballServer() {
  SharedDtor();
}

void UserGateServer_BaseballServer::SharedDtor() {
  if (this != default_instance_) {
    delete m_ug2bs_ans_set_cvar_;
    delete m_ug2bs_game_end_;
    delete m_ug2bs_echo_;
    delete m_ug2bs_error_;
    delete m_ug2bs_add_discon_tot_;
  }
}

void UserGateServer_BaseballServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGateServer_BaseballServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGateServer_BaseballServer_descriptor_;
}

const UserGateServer_BaseballServer& UserGateServer_BaseballServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

UserGateServer_BaseballServer* UserGateServer_BaseballServer::default_instance_ = NULL;

UserGateServer_BaseballServer* UserGateServer_BaseballServer::New() const {
  return new UserGateServer_BaseballServer;
}

void UserGateServer_BaseballServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_ug2bs_ans_set_cvar()) {
      if (m_ug2bs_ans_set_cvar_ != NULL) m_ug2bs_ans_set_cvar_->::s_ug2bs_ans_set_cvar::Clear();
    }
    if (has_m_ug2bs_game_end()) {
      if (m_ug2bs_game_end_ != NULL) m_ug2bs_game_end_->::s_ug2bs_game_end::Clear();
    }
    if (has_m_ug2bs_echo()) {
      if (m_ug2bs_echo_ != NULL) m_ug2bs_echo_->::s_ug2bs_echo::Clear();
    }
    if (has_m_ug2bs_error()) {
      if (m_ug2bs_error_ != NULL) m_ug2bs_error_->::s_ug2bs_error::Clear();
    }
    if (has_m_ug2bs_add_discon_tot()) {
      if (m_ug2bs_add_discon_tot_ != NULL) m_ug2bs_add_discon_tot_->::s_ug2bs_add_discon_tot::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGateServer_BaseballServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserGateServer_BaseballServer.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UserGateServer_BaseballServer_Type_IsValid(value)) {
            set_type(static_cast< ::UserGateServer_BaseballServer_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ug2bs_ans_set_cvar;
        break;
      }
      
      // optional .s_ug2bs_ans_set_cvar m_ug2bs_ans_set_cvar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ug2bs_ans_set_cvar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ug2bs_ans_set_cvar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_ug2bs_game_end;
        break;
      }
      
      // optional .s_ug2bs_game_end m_ug2bs_game_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ug2bs_game_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ug2bs_game_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_ug2bs_echo;
        break;
      }
      
      // optional .s_ug2bs_echo m_ug2bs_echo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ug2bs_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ug2bs_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_ug2bs_error;
        break;
      }
      
      // optional .s_ug2bs_error m_ug2bs_error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ug2bs_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ug2bs_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_ug2bs_add_discon_tot;
        break;
      }
      
      // optional .s_ug2bs_add_discon_tot m_ug2bs_add_discon_tot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ug2bs_add_discon_tot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ug2bs_add_discon_tot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserGateServer_BaseballServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UserGateServer_BaseballServer.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_ug2bs_ans_set_cvar m_ug2bs_ans_set_cvar = 2;
  if (has_m_ug2bs_ans_set_cvar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_ug2bs_ans_set_cvar(), output);
  }
  
  // optional .s_ug2bs_game_end m_ug2bs_game_end = 3;
  if (has_m_ug2bs_game_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_ug2bs_game_end(), output);
  }
  
  // optional .s_ug2bs_echo m_ug2bs_echo = 4;
  if (has_m_ug2bs_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_ug2bs_echo(), output);
  }
  
  // optional .s_ug2bs_error m_ug2bs_error = 5;
  if (has_m_ug2bs_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_ug2bs_error(), output);
  }
  
  // optional .s_ug2bs_add_discon_tot m_ug2bs_add_discon_tot = 6;
  if (has_m_ug2bs_add_discon_tot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_ug2bs_add_discon_tot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserGateServer_BaseballServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UserGateServer_BaseballServer.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .s_ug2bs_ans_set_cvar m_ug2bs_ans_set_cvar = 2;
  if (has_m_ug2bs_ans_set_cvar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_ug2bs_ans_set_cvar(), target);
  }
  
  // optional .s_ug2bs_game_end m_ug2bs_game_end = 3;
  if (has_m_ug2bs_game_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_ug2bs_game_end(), target);
  }
  
  // optional .s_ug2bs_echo m_ug2bs_echo = 4;
  if (has_m_ug2bs_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_ug2bs_echo(), target);
  }
  
  // optional .s_ug2bs_error m_ug2bs_error = 5;
  if (has_m_ug2bs_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_ug2bs_error(), target);
  }
  
  // optional .s_ug2bs_add_discon_tot m_ug2bs_add_discon_tot = 6;
  if (has_m_ug2bs_add_discon_tot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_ug2bs_add_discon_tot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserGateServer_BaseballServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserGateServer_BaseballServer.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_ug2bs_ans_set_cvar m_ug2bs_ans_set_cvar = 2;
    if (has_m_ug2bs_ans_set_cvar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ug2bs_ans_set_cvar());
    }
    
    // optional .s_ug2bs_game_end m_ug2bs_game_end = 3;
    if (has_m_ug2bs_game_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ug2bs_game_end());
    }
    
    // optional .s_ug2bs_echo m_ug2bs_echo = 4;
    if (has_m_ug2bs_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ug2bs_echo());
    }
    
    // optional .s_ug2bs_error m_ug2bs_error = 5;
    if (has_m_ug2bs_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ug2bs_error());
    }
    
    // optional .s_ug2bs_add_discon_tot m_ug2bs_add_discon_tot = 6;
    if (has_m_ug2bs_add_discon_tot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ug2bs_add_discon_tot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGateServer_BaseballServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGateServer_BaseballServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGateServer_BaseballServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGateServer_BaseballServer::MergeFrom(const UserGateServer_BaseballServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_ug2bs_ans_set_cvar()) {
      mutable_m_ug2bs_ans_set_cvar()->::s_ug2bs_ans_set_cvar::MergeFrom(from.m_ug2bs_ans_set_cvar());
    }
    if (from.has_m_ug2bs_game_end()) {
      mutable_m_ug2bs_game_end()->::s_ug2bs_game_end::MergeFrom(from.m_ug2bs_game_end());
    }
    if (from.has_m_ug2bs_echo()) {
      mutable_m_ug2bs_echo()->::s_ug2bs_echo::MergeFrom(from.m_ug2bs_echo());
    }
    if (from.has_m_ug2bs_error()) {
      mutable_m_ug2bs_error()->::s_ug2bs_error::MergeFrom(from.m_ug2bs_error());
    }
    if (from.has_m_ug2bs_add_discon_tot()) {
      mutable_m_ug2bs_add_discon_tot()->::s_ug2bs_add_discon_tot::MergeFrom(from.m_ug2bs_add_discon_tot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGateServer_BaseballServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGateServer_BaseballServer::CopyFrom(const UserGateServer_BaseballServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGateServer_BaseballServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserGateServer_BaseballServer::Swap(UserGateServer_BaseballServer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_ug2bs_ans_set_cvar_, other->m_ug2bs_ans_set_cvar_);
    std::swap(m_ug2bs_game_end_, other->m_ug2bs_game_end_);
    std::swap(m_ug2bs_echo_, other->m_ug2bs_echo_);
    std::swap(m_ug2bs_error_, other->m_ug2bs_error_);
    std::swap(m_ug2bs_add_discon_tot_, other->m_ug2bs_add_discon_tot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGateServer_BaseballServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGateServer_BaseballServer_descriptor_;
  metadata.reflection = UserGateServer_BaseballServer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Client_BaseballServer_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_BaseballServer_Type_descriptor_;
}
bool Client_BaseballServer_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Client_BaseballServer_Type Client_BaseballServer::NONE;
const Client_BaseballServer_Type Client_BaseballServer::req_room_state;
const Client_BaseballServer_Type Client_BaseballServer::x2bs_echo;
const Client_BaseballServer_Type Client_BaseballServer::req_chat;
const Client_BaseballServer_Type Client_BaseballServer::req_timer_start;
const Client_BaseballServer_Type Client_BaseballServer::req_do_disconnect;
const Client_BaseballServer_Type Client_BaseballServer::x2bs_echo2;
const Client_BaseballServer_Type Client_BaseballServer::req_get_cvar;
const Client_BaseballServer_Type Client_BaseballServer::req_set_cvar;
const Client_BaseballServer_Type Client_BaseballServer::x2bs_auto_match_ready2;
const Client_BaseballServer_Type Client_BaseballServer::x2bs_match_ready;
const Client_BaseballServer_Type Client_BaseballServer::req_pitcher_throw;
const Client_BaseballServer_Type Client_BaseballServer::req_better_hit;
const Client_BaseballServer_Type Client_BaseballServer::req_result_better_hit;
const Client_BaseballServer_Type Client_BaseballServer::x2bs_batter_ready;
const Client_BaseballServer_Type Client_BaseballServer::req_rematch;
const Client_BaseballServer_Type Client_BaseballServer::req_answer_restart_game;
const Client_BaseballServer_Type Client_BaseballServer::Type_MIN;
const Client_BaseballServer_Type Client_BaseballServer::Type_MAX;
const int Client_BaseballServer::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Client_BaseballServer::kTypeFieldNumber;
const int Client_BaseballServer::kMReqRoomStateFieldNumber;
const int Client_BaseballServer::kMX2BsEchoFieldNumber;
const int Client_BaseballServer::kMReqChatFieldNumber;
const int Client_BaseballServer::kMReqTimerStartFieldNumber;
const int Client_BaseballServer::kMReqDoDisconnectFieldNumber;
const int Client_BaseballServer::kMX2BsEcho2FieldNumber;
const int Client_BaseballServer::kMReqGetCvarFieldNumber;
const int Client_BaseballServer::kMReqSetCvarFieldNumber;
const int Client_BaseballServer::kMX2BsAutoMatchReady2FieldNumber;
const int Client_BaseballServer::kMX2BsMatchReadyFieldNumber;
const int Client_BaseballServer::kMReqPitcherThrowFieldNumber;
const int Client_BaseballServer::kMReqBetterHitFieldNumber;
const int Client_BaseballServer::kMReqResultBetterHitFieldNumber;
const int Client_BaseballServer::kMX2BsBatterReadyFieldNumber;
const int Client_BaseballServer::kMReqRematchFieldNumber;
const int Client_BaseballServer::kMReqAnswerRestartGameFieldNumber;
#endif  // !_MSC_VER

Client_BaseballServer::Client_BaseballServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client_BaseballServer::InitAsDefaultInstance() {
  m_req_room_state_ = const_cast< ::s_req_room_state*>(&::s_req_room_state::default_instance());
  m_x2bs_echo_ = const_cast< ::s_x2bs_echo*>(&::s_x2bs_echo::default_instance());
  m_req_chat_ = const_cast< ::s_req_chat*>(&::s_req_chat::default_instance());
  m_req_timer_start_ = const_cast< ::s_req_timer_start*>(&::s_req_timer_start::default_instance());
  m_req_do_disconnect_ = const_cast< ::s_req_do_disconnect*>(&::s_req_do_disconnect::default_instance());
  m_x2bs_echo2_ = const_cast< ::s_x2bs_echo2*>(&::s_x2bs_echo2::default_instance());
  m_req_get_cvar_ = const_cast< ::s_req_get_cvar*>(&::s_req_get_cvar::default_instance());
  m_req_set_cvar_ = const_cast< ::s_req_set_cvar*>(&::s_req_set_cvar::default_instance());
  m_x2bs_auto_match_ready2_ = const_cast< ::s_x2bs_auto_match_ready2*>(&::s_x2bs_auto_match_ready2::default_instance());
  m_x2bs_match_ready_ = const_cast< ::s_x2bs_match_ready*>(&::s_x2bs_match_ready::default_instance());
  m_req_pitcher_throw_ = const_cast< ::s_req_pitcher_throw*>(&::s_req_pitcher_throw::default_instance());
  m_req_better_hit_ = const_cast< ::s_req_better_hit*>(&::s_req_better_hit::default_instance());
  m_req_result_better_hit_ = const_cast< ::s_req_result_better_hit*>(&::s_req_result_better_hit::default_instance());
  m_x2bs_batter_ready_ = const_cast< ::s_x2bs_batter_ready*>(&::s_x2bs_batter_ready::default_instance());
  m_req_rematch_ = const_cast< ::s_req_rematch*>(&::s_req_rematch::default_instance());
  m_req_answer_restart_game_ = const_cast< ::s_req_answer_restart_game*>(&::s_req_answer_restart_game::default_instance());
}

Client_BaseballServer::Client_BaseballServer(const Client_BaseballServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client_BaseballServer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_req_room_state_ = NULL;
  m_x2bs_echo_ = NULL;
  m_req_chat_ = NULL;
  m_req_timer_start_ = NULL;
  m_req_do_disconnect_ = NULL;
  m_x2bs_echo2_ = NULL;
  m_req_get_cvar_ = NULL;
  m_req_set_cvar_ = NULL;
  m_x2bs_auto_match_ready2_ = NULL;
  m_x2bs_match_ready_ = NULL;
  m_req_pitcher_throw_ = NULL;
  m_req_better_hit_ = NULL;
  m_req_result_better_hit_ = NULL;
  m_x2bs_batter_ready_ = NULL;
  m_req_rematch_ = NULL;
  m_req_answer_restart_game_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client_BaseballServer::~Client_BaseballServer() {
  SharedDtor();
}

void Client_BaseballServer::SharedDtor() {
  if (this != default_instance_) {
    delete m_req_room_state_;
    delete m_x2bs_echo_;
    delete m_req_chat_;
    delete m_req_timer_start_;
    delete m_req_do_disconnect_;
    delete m_x2bs_echo2_;
    delete m_req_get_cvar_;
    delete m_req_set_cvar_;
    delete m_x2bs_auto_match_ready2_;
    delete m_x2bs_match_ready_;
    delete m_req_pitcher_throw_;
    delete m_req_better_hit_;
    delete m_req_result_better_hit_;
    delete m_x2bs_batter_ready_;
    delete m_req_rematch_;
    delete m_req_answer_restart_game_;
  }
}

void Client_BaseballServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client_BaseballServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_BaseballServer_descriptor_;
}

const Client_BaseballServer& Client_BaseballServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PT_5fBaseballServer_2eproto();  return *default_instance_;
}

Client_BaseballServer* Client_BaseballServer::default_instance_ = NULL;

Client_BaseballServer* Client_BaseballServer::New() const {
  return new Client_BaseballServer;
}

void Client_BaseballServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_req_room_state()) {
      if (m_req_room_state_ != NULL) m_req_room_state_->::s_req_room_state::Clear();
    }
    if (has_m_x2bs_echo()) {
      if (m_x2bs_echo_ != NULL) m_x2bs_echo_->::s_x2bs_echo::Clear();
    }
    if (has_m_req_chat()) {
      if (m_req_chat_ != NULL) m_req_chat_->::s_req_chat::Clear();
    }
    if (has_m_req_timer_start()) {
      if (m_req_timer_start_ != NULL) m_req_timer_start_->::s_req_timer_start::Clear();
    }
    if (has_m_req_do_disconnect()) {
      if (m_req_do_disconnect_ != NULL) m_req_do_disconnect_->::s_req_do_disconnect::Clear();
    }
    if (has_m_x2bs_echo2()) {
      if (m_x2bs_echo2_ != NULL) m_x2bs_echo2_->::s_x2bs_echo2::Clear();
    }
    if (has_m_req_get_cvar()) {
      if (m_req_get_cvar_ != NULL) m_req_get_cvar_->::s_req_get_cvar::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_req_set_cvar()) {
      if (m_req_set_cvar_ != NULL) m_req_set_cvar_->::s_req_set_cvar::Clear();
    }
    if (has_m_x2bs_auto_match_ready2()) {
      if (m_x2bs_auto_match_ready2_ != NULL) m_x2bs_auto_match_ready2_->::s_x2bs_auto_match_ready2::Clear();
    }
    if (has_m_x2bs_match_ready()) {
      if (m_x2bs_match_ready_ != NULL) m_x2bs_match_ready_->::s_x2bs_match_ready::Clear();
    }
    if (has_m_req_pitcher_throw()) {
      if (m_req_pitcher_throw_ != NULL) m_req_pitcher_throw_->::s_req_pitcher_throw::Clear();
    }
    if (has_m_req_better_hit()) {
      if (m_req_better_hit_ != NULL) m_req_better_hit_->::s_req_better_hit::Clear();
    }
    if (has_m_req_result_better_hit()) {
      if (m_req_result_better_hit_ != NULL) m_req_result_better_hit_->::s_req_result_better_hit::Clear();
    }
    if (has_m_x2bs_batter_ready()) {
      if (m_x2bs_batter_ready_ != NULL) m_x2bs_batter_ready_->::s_x2bs_batter_ready::Clear();
    }
    if (has_m_req_rematch()) {
      if (m_req_rematch_ != NULL) m_req_rematch_->::s_req_rematch::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_req_answer_restart_game()) {
      if (m_req_answer_restart_game_ != NULL) m_req_answer_restart_game_->::s_req_answer_restart_game::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client_BaseballServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Client_BaseballServer.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Client_BaseballServer_Type_IsValid(value)) {
            set_type(static_cast< ::Client_BaseballServer_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_req_room_state;
        break;
      }
      
      // optional .s_req_room_state m_req_room_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_room_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_room_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_x2bs_echo;
        break;
      }
      
      // optional .s_x2bs_echo m_x2bs_echo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_x2bs_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_x2bs_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_req_chat;
        break;
      }
      
      // optional .s_req_chat m_req_chat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_chat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_req_timer_start;
        break;
      }
      
      // optional .s_req_timer_start m_req_timer_start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_timer_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_timer_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_req_do_disconnect;
        break;
      }
      
      // optional .s_req_do_disconnect m_req_do_disconnect = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_do_disconnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_do_disconnect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_x2bs_echo2;
        break;
      }
      
      // optional .s_x2bs_echo2 m_x2bs_echo2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_x2bs_echo2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_x2bs_echo2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_req_get_cvar;
        break;
      }
      
      // optional .s_req_get_cvar m_req_get_cvar = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_get_cvar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_get_cvar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_req_set_cvar;
        break;
      }
      
      // optional .s_req_set_cvar m_req_set_cvar = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_set_cvar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_set_cvar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_x2bs_auto_match_ready2;
        break;
      }
      
      // optional .s_x2bs_auto_match_ready2 m_x2bs_auto_match_ready2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_x2bs_auto_match_ready2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_x2bs_auto_match_ready2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_x2bs_match_ready;
        break;
      }
      
      // optional .s_x2bs_match_ready m_x2bs_match_ready = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_x2bs_match_ready:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_x2bs_match_ready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_req_pitcher_throw;
        break;
      }
      
      // optional .s_req_pitcher_throw m_req_pitcher_throw = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_pitcher_throw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_pitcher_throw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_req_better_hit;
        break;
      }
      
      // optional .s_req_better_hit m_req_better_hit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_better_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_better_hit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_req_result_better_hit;
        break;
      }
      
      // optional .s_req_result_better_hit m_req_result_better_hit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_result_better_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_result_better_hit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_x2bs_batter_ready;
        break;
      }
      
      // optional .s_x2bs_batter_ready m_x2bs_batter_ready = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_x2bs_batter_ready:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_x2bs_batter_ready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_req_rematch;
        break;
      }
      
      // optional .s_req_rematch m_req_rematch = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_rematch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_rematch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_req_answer_restart_game;
        break;
      }
      
      // optional .s_req_answer_restart_game m_req_answer_restart_game = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_answer_restart_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_answer_restart_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client_BaseballServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Client_BaseballServer.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_req_room_state m_req_room_state = 2;
  if (has_m_req_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_req_room_state(), output);
  }
  
  // optional .s_x2bs_echo m_x2bs_echo = 3;
  if (has_m_x2bs_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_x2bs_echo(), output);
  }
  
  // optional .s_req_chat m_req_chat = 4;
  if (has_m_req_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_req_chat(), output);
  }
  
  // optional .s_req_timer_start m_req_timer_start = 5;
  if (has_m_req_timer_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_req_timer_start(), output);
  }
  
  // optional .s_req_do_disconnect m_req_do_disconnect = 6;
  if (has_m_req_do_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_req_do_disconnect(), output);
  }
  
  // optional .s_x2bs_echo2 m_x2bs_echo2 = 7;
  if (has_m_x2bs_echo2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_x2bs_echo2(), output);
  }
  
  // optional .s_req_get_cvar m_req_get_cvar = 8;
  if (has_m_req_get_cvar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_req_get_cvar(), output);
  }
  
  // optional .s_req_set_cvar m_req_set_cvar = 9;
  if (has_m_req_set_cvar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_req_set_cvar(), output);
  }
  
  // optional .s_x2bs_auto_match_ready2 m_x2bs_auto_match_ready2 = 10;
  if (has_m_x2bs_auto_match_ready2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_x2bs_auto_match_ready2(), output);
  }
  
  // optional .s_x2bs_match_ready m_x2bs_match_ready = 11;
  if (has_m_x2bs_match_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_x2bs_match_ready(), output);
  }
  
  // optional .s_req_pitcher_throw m_req_pitcher_throw = 12;
  if (has_m_req_pitcher_throw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_req_pitcher_throw(), output);
  }
  
  // optional .s_req_better_hit m_req_better_hit = 13;
  if (has_m_req_better_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_req_better_hit(), output);
  }
  
  // optional .s_req_result_better_hit m_req_result_better_hit = 14;
  if (has_m_req_result_better_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m_req_result_better_hit(), output);
  }
  
  // optional .s_x2bs_batter_ready m_x2bs_batter_ready = 15;
  if (has_m_x2bs_batter_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_x2bs_batter_ready(), output);
  }
  
  // optional .s_req_rematch m_req_rematch = 16;
  if (has_m_req_rematch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_req_rematch(), output);
  }
  
  // optional .s_req_answer_restart_game m_req_answer_restart_game = 17;
  if (has_m_req_answer_restart_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->m_req_answer_restart_game(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client_BaseballServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Client_BaseballServer.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .s_req_room_state m_req_room_state = 2;
  if (has_m_req_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_req_room_state(), target);
  }
  
  // optional .s_x2bs_echo m_x2bs_echo = 3;
  if (has_m_x2bs_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_x2bs_echo(), target);
  }
  
  // optional .s_req_chat m_req_chat = 4;
  if (has_m_req_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_req_chat(), target);
  }
  
  // optional .s_req_timer_start m_req_timer_start = 5;
  if (has_m_req_timer_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_req_timer_start(), target);
  }
  
  // optional .s_req_do_disconnect m_req_do_disconnect = 6;
  if (has_m_req_do_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_req_do_disconnect(), target);
  }
  
  // optional .s_x2bs_echo2 m_x2bs_echo2 = 7;
  if (has_m_x2bs_echo2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_x2bs_echo2(), target);
  }
  
  // optional .s_req_get_cvar m_req_get_cvar = 8;
  if (has_m_req_get_cvar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_req_get_cvar(), target);
  }
  
  // optional .s_req_set_cvar m_req_set_cvar = 9;
  if (has_m_req_set_cvar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_req_set_cvar(), target);
  }
  
  // optional .s_x2bs_auto_match_ready2 m_x2bs_auto_match_ready2 = 10;
  if (has_m_x2bs_auto_match_ready2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_x2bs_auto_match_ready2(), target);
  }
  
  // optional .s_x2bs_match_ready m_x2bs_match_ready = 11;
  if (has_m_x2bs_match_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_x2bs_match_ready(), target);
  }
  
  // optional .s_req_pitcher_throw m_req_pitcher_throw = 12;
  if (has_m_req_pitcher_throw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_req_pitcher_throw(), target);
  }
  
  // optional .s_req_better_hit m_req_better_hit = 13;
  if (has_m_req_better_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_req_better_hit(), target);
  }
  
  // optional .s_req_result_better_hit m_req_result_better_hit = 14;
  if (has_m_req_result_better_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m_req_result_better_hit(), target);
  }
  
  // optional .s_x2bs_batter_ready m_x2bs_batter_ready = 15;
  if (has_m_x2bs_batter_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_x2bs_batter_ready(), target);
  }
  
  // optional .s_req_rematch m_req_rematch = 16;
  if (has_m_req_rematch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_req_rematch(), target);
  }
  
  // optional .s_req_answer_restart_game m_req_answer_restart_game = 17;
  if (has_m_req_answer_restart_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->m_req_answer_restart_game(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client_BaseballServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Client_BaseballServer.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_req_room_state m_req_room_state = 2;
    if (has_m_req_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_room_state());
    }
    
    // optional .s_x2bs_echo m_x2bs_echo = 3;
    if (has_m_x2bs_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_x2bs_echo());
    }
    
    // optional .s_req_chat m_req_chat = 4;
    if (has_m_req_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_chat());
    }
    
    // optional .s_req_timer_start m_req_timer_start = 5;
    if (has_m_req_timer_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_timer_start());
    }
    
    // optional .s_req_do_disconnect m_req_do_disconnect = 6;
    if (has_m_req_do_disconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_do_disconnect());
    }
    
    // optional .s_x2bs_echo2 m_x2bs_echo2 = 7;
    if (has_m_x2bs_echo2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_x2bs_echo2());
    }
    
    // optional .s_req_get_cvar m_req_get_cvar = 8;
    if (has_m_req_get_cvar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_get_cvar());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .s_req_set_cvar m_req_set_cvar = 9;
    if (has_m_req_set_cvar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_set_cvar());
    }
    
    // optional .s_x2bs_auto_match_ready2 m_x2bs_auto_match_ready2 = 10;
    if (has_m_x2bs_auto_match_ready2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_x2bs_auto_match_ready2());
    }
    
    // optional .s_x2bs_match_ready m_x2bs_match_ready = 11;
    if (has_m_x2bs_match_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_x2bs_match_ready());
    }
    
    // optional .s_req_pitcher_throw m_req_pitcher_throw = 12;
    if (has_m_req_pitcher_throw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_pitcher_throw());
    }
    
    // optional .s_req_better_hit m_req_better_hit = 13;
    if (has_m_req_better_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_better_hit());
    }
    
    // optional .s_req_result_better_hit m_req_result_better_hit = 14;
    if (has_m_req_result_better_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_result_better_hit());
    }
    
    // optional .s_x2bs_batter_ready m_x2bs_batter_ready = 15;
    if (has_m_x2bs_batter_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_x2bs_batter_ready());
    }
    
    // optional .s_req_rematch m_req_rematch = 16;
    if (has_m_req_rematch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_rematch());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .s_req_answer_restart_game m_req_answer_restart_game = 17;
    if (has_m_req_answer_restart_game()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_answer_restart_game());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client_BaseballServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client_BaseballServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client_BaseballServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client_BaseballServer::MergeFrom(const Client_BaseballServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_req_room_state()) {
      mutable_m_req_room_state()->::s_req_room_state::MergeFrom(from.m_req_room_state());
    }
    if (from.has_m_x2bs_echo()) {
      mutable_m_x2bs_echo()->::s_x2bs_echo::MergeFrom(from.m_x2bs_echo());
    }
    if (from.has_m_req_chat()) {
      mutable_m_req_chat()->::s_req_chat::MergeFrom(from.m_req_chat());
    }
    if (from.has_m_req_timer_start()) {
      mutable_m_req_timer_start()->::s_req_timer_start::MergeFrom(from.m_req_timer_start());
    }
    if (from.has_m_req_do_disconnect()) {
      mutable_m_req_do_disconnect()->::s_req_do_disconnect::MergeFrom(from.m_req_do_disconnect());
    }
    if (from.has_m_x2bs_echo2()) {
      mutable_m_x2bs_echo2()->::s_x2bs_echo2::MergeFrom(from.m_x2bs_echo2());
    }
    if (from.has_m_req_get_cvar()) {
      mutable_m_req_get_cvar()->::s_req_get_cvar::MergeFrom(from.m_req_get_cvar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_req_set_cvar()) {
      mutable_m_req_set_cvar()->::s_req_set_cvar::MergeFrom(from.m_req_set_cvar());
    }
    if (from.has_m_x2bs_auto_match_ready2()) {
      mutable_m_x2bs_auto_match_ready2()->::s_x2bs_auto_match_ready2::MergeFrom(from.m_x2bs_auto_match_ready2());
    }
    if (from.has_m_x2bs_match_ready()) {
      mutable_m_x2bs_match_ready()->::s_x2bs_match_ready::MergeFrom(from.m_x2bs_match_ready());
    }
    if (from.has_m_req_pitcher_throw()) {
      mutable_m_req_pitcher_throw()->::s_req_pitcher_throw::MergeFrom(from.m_req_pitcher_throw());
    }
    if (from.has_m_req_better_hit()) {
      mutable_m_req_better_hit()->::s_req_better_hit::MergeFrom(from.m_req_better_hit());
    }
    if (from.has_m_req_result_better_hit()) {
      mutable_m_req_result_better_hit()->::s_req_result_better_hit::MergeFrom(from.m_req_result_better_hit());
    }
    if (from.has_m_x2bs_batter_ready()) {
      mutable_m_x2bs_batter_ready()->::s_x2bs_batter_ready::MergeFrom(from.m_x2bs_batter_ready());
    }
    if (from.has_m_req_rematch()) {
      mutable_m_req_rematch()->::s_req_rematch::MergeFrom(from.m_req_rematch());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_req_answer_restart_game()) {
      mutable_m_req_answer_restart_game()->::s_req_answer_restart_game::MergeFrom(from.m_req_answer_restart_game());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client_BaseballServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client_BaseballServer::CopyFrom(const Client_BaseballServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client_BaseballServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Client_BaseballServer::Swap(Client_BaseballServer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_req_room_state_, other->m_req_room_state_);
    std::swap(m_x2bs_echo_, other->m_x2bs_echo_);
    std::swap(m_req_chat_, other->m_req_chat_);
    std::swap(m_req_timer_start_, other->m_req_timer_start_);
    std::swap(m_req_do_disconnect_, other->m_req_do_disconnect_);
    std::swap(m_x2bs_echo2_, other->m_x2bs_echo2_);
    std::swap(m_req_get_cvar_, other->m_req_get_cvar_);
    std::swap(m_req_set_cvar_, other->m_req_set_cvar_);
    std::swap(m_x2bs_auto_match_ready2_, other->m_x2bs_auto_match_ready2_);
    std::swap(m_x2bs_match_ready_, other->m_x2bs_match_ready_);
    std::swap(m_req_pitcher_throw_, other->m_req_pitcher_throw_);
    std::swap(m_req_better_hit_, other->m_req_better_hit_);
    std::swap(m_req_result_better_hit_, other->m_req_result_better_hit_);
    std::swap(m_x2bs_batter_ready_, other->m_x2bs_batter_ready_);
    std::swap(m_req_rematch_, other->m_req_rematch_);
    std::swap(m_req_answer_restart_game_, other->m_req_answer_restart_game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client_BaseballServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client_BaseballServer_descriptor_;
  metadata.reflection = Client_BaseballServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
