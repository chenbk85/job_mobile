// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameLogic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_game_play_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_game_play_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_result_round_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_result_round_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_result_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_result_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_vector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_vector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_pitcher_throw_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_pitcher_throw_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* s_better_hit_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_better_hit_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLReqGameProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLReqGameProtocol_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLAnsGameProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLAnsGameProtocol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameLogic_2eproto() {
  protobuf_AddDesc_gameLogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameLogic.proto");
  GOOGLE_CHECK(file != NULL);
  GameUserInfo_descriptor_ = file->message_type(0);
  static const int GameUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, game_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, member_info_),
  };
  GameUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameUserInfo_descriptor_,
      GameUserInfo::default_instance_,
      GameUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameUserInfo));
  GameInfo_descriptor_ = file->message_type(1);
  static const int GameInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, m_tbl_user_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  s_game_play_info_descriptor_ = file->message_type(2);
  static const int s_game_play_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_game_play_info, m_tbl_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_game_play_info, m_e_user_gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_game_play_info, m_pitcher_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_game_play_info, m_batter_sid_),
  };
  s_game_play_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_game_play_info_descriptor_,
      s_game_play_info::default_instance_,
      s_game_play_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_game_play_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_game_play_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_game_play_info));
  s_result_round_descriptor_ = file->message_type(3);
  static const int s_result_round_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_result_round, m_tbl_roundresult_),
  };
  s_result_round_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_result_round_descriptor_,
      s_result_round::default_instance_,
      s_result_round_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_result_round, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_result_round, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_result_round));
  s_result_game_descriptor_ = file->message_type(4);
  static const int s_result_game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_result_game, m_tbl_result_),
  };
  s_result_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_result_game_descriptor_,
      s_result_game::default_instance_,
      s_result_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_result_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_result_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_result_game));
  GameRoomInfo_descriptor_ = file->message_type(5);
  static const int GameRoomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, m_game_play_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, m_attack_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, m_round_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, m_result_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, m_result_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, m_is_auto_play_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, m_baseball_park_),
  };
  GameRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomInfo_descriptor_,
      GameRoomInfo::default_instance_,
      GameRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomInfo));
  s_vector3_descriptor_ = file->message_type(6);
  static const int s_vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector3, z_),
  };
  s_vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_vector3_descriptor_,
      s_vector3::default_instance_,
      s_vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_vector3));
  s_vector2_descriptor_ = file->message_type(7);
  static const int s_vector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector2, y_),
  };
  s_vector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_vector2_descriptor_,
      s_vector2::default_instance_,
      s_vector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_vector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_vector2));
  s_pitcher_throw_info_descriptor_ = file->message_type(8);
  static const int s_pitcher_throw_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, screen_to_world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, ball_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, scale_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, ball_breaking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, rhythm_judge_verifi_),
  };
  s_pitcher_throw_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_pitcher_throw_info_descriptor_,
      s_pitcher_throw_info::default_instance_,
      s_pitcher_throw_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_pitcher_throw_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_pitcher_throw_info));
  s_better_hit_info_descriptor_ = file->message_type(9);
  static const int s_better_hit_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, screen_to_world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, force_xy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, hit_info_),
  };
  s_better_hit_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_better_hit_info_descriptor_,
      s_better_hit_info::default_instance_,
      s_better_hit_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_better_hit_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_better_hit_info));
  GLReqGameProtocol_descriptor_ = file->message_type(10);
  static const int GLReqGameProtocol_offsets_[1] = {
  };
  GLReqGameProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLReqGameProtocol_descriptor_,
      GLReqGameProtocol::default_instance_,
      GLReqGameProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLReqGameProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLReqGameProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLReqGameProtocol));
  GLAnsGameProtocol_descriptor_ = file->message_type(11);
  static const int GLAnsGameProtocol_offsets_[1] = {
  };
  GLAnsGameProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLAnsGameProtocol_descriptor_,
      GLAnsGameProtocol::default_instance_,
      GLAnsGameProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLAnsGameProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLAnsGameProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLAnsGameProtocol));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameLogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameUserInfo_descriptor_, &GameUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_game_play_info_descriptor_, &s_game_play_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_result_round_descriptor_, &s_result_round::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_result_game_descriptor_, &s_result_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomInfo_descriptor_, &GameRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_vector3_descriptor_, &s_vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_vector2_descriptor_, &s_vector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_pitcher_throw_info_descriptor_, &s_pitcher_throw_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_better_hit_info_descriptor_, &s_better_hit_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLReqGameProtocol_descriptor_, &GLReqGameProtocol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLAnsGameProtocol_descriptor_, &GLAnsGameProtocol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameLogic_2eproto() {
  delete GameUserInfo::default_instance_;
  delete GameUserInfo_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete s_game_play_info::default_instance_;
  delete s_game_play_info_reflection_;
  delete s_result_round::default_instance_;
  delete s_result_round_reflection_;
  delete s_result_game::default_instance_;
  delete s_result_game_reflection_;
  delete GameRoomInfo::default_instance_;
  delete GameRoomInfo_reflection_;
  delete s_vector3::default_instance_;
  delete s_vector3_reflection_;
  delete s_vector2::default_instance_;
  delete s_vector2_reflection_;
  delete s_pitcher_throw_info::default_instance_;
  delete s_pitcher_throw_info_reflection_;
  delete s_better_hit_info::default_instance_;
  delete s_better_hit_info_reflection_;
  delete GLReqGameProtocol::default_instance_;
  delete GLReqGameProtocol_reflection_;
  delete GLAnsGameProtocol::default_instance_;
  delete GLAnsGameProtocol_reflection_;
}

void protobuf_AddDesc_gameLogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_excel_5fbaseball_5ftable_5fdb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017gameLogic.proto\032\035excel_baseball_table_"
    "db.proto\"A\n\014GameUserInfo\022\034\n\tgame_info\030\001 "
    "\002(\0132\t.GameInfo\022\023\n\013member_info\030\002 \002(\014\"+\n\010G"
    "ameInfo\022\037\n\nm_tbl_user\030\001 \003(\0132\013.s_tbl_user"
    "\"v\n\020s_game_play_info\022\037\n\nm_tbl_user\030\001 \002(\013"
    "2\013.s_tbl_user\022\024\n\014m_e_user_gps\030\002 \001(\005\022\025\n\rm"
    "_pitcher_sid\030\003 \001(\005\022\024\n\014m_batter_sid\030\004 \001(\005"
    "\"\?\n\016s_result_round\022-\n\021m_tbl_roundresult\030"
    "\001 \001(\0132\022.s_tbl_roundresult\"4\n\rs_result_ga"
    "me\022#\n\014m_tbl_result\030\001 \001(\0132\r.s_tbl_result\""
    "\373\001\n\014GameRoomInfo\022\017\n\007room_id\030\001 \002(\005\022+\n\020m_g"
    "ame_play_info\030\002 \003(\0132\021.s_game_play_info\022\025"
    "\n\rm_attack_user\030\003 \001(\003\022\025\n\rm_round_count\030\004"
    " \001(\005\022\'\n\016m_result_round\030\005 \003(\0132\017.s_result_"
    "round\022%\n\rm_result_game\030\006 \001(\0132\016.s_result_"
    "game\022\026\n\016m_is_auto_play\030\007 \001(\010\022\027\n\017m_baseba"
    "ll_park\030\010 \001(\005\",\n\ts_vector3\022\t\n\001x\030\001 \001(\002\022\t\n"
    "\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"!\n\ts_vector2\022\t\n\001x\030\001 "
    "\001(\002\022\t\n\001y\030\002 \001(\002\"\301\001\n\024s_pitcher_throw_info\022"
    "#\n\017screen_to_world\030\001 \001(\0132\n.s_vector3\022\021\n\t"
    "ball_type\030\002 \001(\005\022\022\n\nscale_rate\030\003 \001(\002\022\025\n\rb"
    "all_breaking\030\004 \001(\002\022\r\n\005angle\030\005 \001(\002\022\013\n\003uid"
    "\030\006 \001(\003\022\r\n\005round\030\007 \001(\005\022\033\n\023rhythm_judge_ve"
    "rifi\030\010 \001(\005\"\267\001\n\021s_better_hit_info\022#\n\017scre"
    "en_to_world\030\001 \001(\0132\n.s_vector3\022\034\n\010force_x"
    "y\030\002 \001(\0132\n.s_vector2\022\r\n\005force\030\003 \001(\002\022\016\n\006to"
    "rque\030\004 \001(\002\022\022\n\nvelocity_x\030\005 \001(\002\022\013\n\003uid\030\006 "
    "\001(\003\022\r\n\005round\030\007 \001(\005\022\020\n\010hit_info\030\010 \001(\005\"\023\n\021"
    "GLReqGameProtocol\"\023\n\021GLAnsGameProtocol", 1158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameLogic.proto", &protobuf_RegisterTypes);
  GameUserInfo::default_instance_ = new GameUserInfo();
  GameInfo::default_instance_ = new GameInfo();
  s_game_play_info::default_instance_ = new s_game_play_info();
  s_result_round::default_instance_ = new s_result_round();
  s_result_game::default_instance_ = new s_result_game();
  GameRoomInfo::default_instance_ = new GameRoomInfo();
  s_vector3::default_instance_ = new s_vector3();
  s_vector2::default_instance_ = new s_vector2();
  s_pitcher_throw_info::default_instance_ = new s_pitcher_throw_info();
  s_better_hit_info::default_instance_ = new s_better_hit_info();
  GLReqGameProtocol::default_instance_ = new GLReqGameProtocol();
  GLAnsGameProtocol::default_instance_ = new GLAnsGameProtocol();
  GameUserInfo::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  s_game_play_info::default_instance_->InitAsDefaultInstance();
  s_result_round::default_instance_->InitAsDefaultInstance();
  s_result_game::default_instance_->InitAsDefaultInstance();
  GameRoomInfo::default_instance_->InitAsDefaultInstance();
  s_vector3::default_instance_->InitAsDefaultInstance();
  s_vector2::default_instance_->InitAsDefaultInstance();
  s_pitcher_throw_info::default_instance_->InitAsDefaultInstance();
  s_better_hit_info::default_instance_->InitAsDefaultInstance();
  GLReqGameProtocol::default_instance_->InitAsDefaultInstance();
  GLAnsGameProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameLogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameLogic_2eproto {
  StaticDescriptorInitializer_gameLogic_2eproto() {
    protobuf_AddDesc_gameLogic_2eproto();
  }
} static_descriptor_initializer_gameLogic_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GameUserInfo::kGameInfoFieldNumber;
const int GameUserInfo::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

GameUserInfo::GameUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameUserInfo::InitAsDefaultInstance() {
  game_info_ = const_cast< ::GameInfo*>(&::GameInfo::default_instance());
}

GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameUserInfo::SharedCtor() {
  _cached_size_ = 0;
  game_info_ = NULL;
  member_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUserInfo::~GameUserInfo() {
  SharedDtor();
}

void GameUserInfo::SharedDtor() {
  if (member_info_ != &::google::protobuf::internal::kEmptyString) {
    delete member_info_;
  }
  if (this != default_instance_) {
    delete game_info_;
  }
}

void GameUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameUserInfo_descriptor_;
}

const GameUserInfo& GameUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameUserInfo* GameUserInfo::default_instance_ = NULL;

GameUserInfo* GameUserInfo::New() const {
  return new GameUserInfo;
}

void GameUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_info()) {
      if (game_info_ != NULL) game_info_->::GameInfo::Clear();
    }
    if (has_member_info()) {
      if (member_info_ != &::google::protobuf::internal::kEmptyString) {
        member_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameInfo game_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_info;
        break;
      }
      
      // required bytes member_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_member_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameInfo game_info = 1;
  if (has_game_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_info(), output);
  }
  
  // required bytes member_info = 2;
  if (has_member_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->member_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GameInfo game_info = 1;
  if (has_game_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_info(), target);
  }
  
  // required bytes member_info = 2;
  if (has_member_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->member_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameInfo game_info = 1;
    if (has_game_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_info());
    }
    
    // required bytes member_info = 2;
    if (has_member_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->member_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameUserInfo::MergeFrom(const GameUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_info()) {
      mutable_game_info()->::GameInfo::MergeFrom(from.game_info());
    }
    if (from.has_member_info()) {
      set_member_info(from.member_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameUserInfo::Swap(GameUserInfo* other) {
  if (other != this) {
    std::swap(game_info_, other->game_info_);
    std::swap(member_info_, other->member_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameUserInfo_descriptor_;
  metadata.reflection = GameUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kMTblUserFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  m_tbl_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .s_tbl_user m_tbl_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tbl_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tbl_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_tbl_user;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .s_tbl_user m_tbl_user = 1;
  for (int i = 0; i < this->m_tbl_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_tbl_user(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .s_tbl_user m_tbl_user = 1;
  for (int i = 0; i < this->m_tbl_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_tbl_user(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .s_tbl_user m_tbl_user = 1;
  total_size += 1 * this->m_tbl_user_size();
  for (int i = 0; i < this->m_tbl_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tbl_user(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tbl_user_.MergeFrom(from.m_tbl_user_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    m_tbl_user_.Swap(&other->m_tbl_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_game_play_info::kMTblUserFieldNumber;
const int s_game_play_info::kMEUserGpsFieldNumber;
const int s_game_play_info::kMPitcherSidFieldNumber;
const int s_game_play_info::kMBatterSidFieldNumber;
#endif  // !_MSC_VER

s_game_play_info::s_game_play_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_game_play_info::InitAsDefaultInstance() {
  m_tbl_user_ = const_cast< ::s_tbl_user*>(&::s_tbl_user::default_instance());
}

s_game_play_info::s_game_play_info(const s_game_play_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_game_play_info::SharedCtor() {
  _cached_size_ = 0;
  m_tbl_user_ = NULL;
  m_e_user_gps_ = 0;
  m_pitcher_sid_ = 0;
  m_batter_sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_game_play_info::~s_game_play_info() {
  SharedDtor();
}

void s_game_play_info::SharedDtor() {
  if (this != default_instance_) {
    delete m_tbl_user_;
  }
}

void s_game_play_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_game_play_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_game_play_info_descriptor_;
}

const s_game_play_info& s_game_play_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_game_play_info* s_game_play_info::default_instance_ = NULL;

s_game_play_info* s_game_play_info::New() const {
  return new s_game_play_info;
}

void s_game_play_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_tbl_user()) {
      if (m_tbl_user_ != NULL) m_tbl_user_->::s_tbl_user::Clear();
    }
    m_e_user_gps_ = 0;
    m_pitcher_sid_ = 0;
    m_batter_sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_game_play_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .s_tbl_user m_tbl_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tbl_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_e_user_gps;
        break;
      }
      
      // optional int32 m_e_user_gps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_e_user_gps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_e_user_gps_)));
          set_has_m_e_user_gps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_pitcher_sid;
        break;
      }
      
      // optional int32 m_pitcher_sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pitcher_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pitcher_sid_)));
          set_has_m_pitcher_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_batter_sid;
        break;
      }
      
      // optional int32 m_batter_sid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_batter_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_batter_sid_)));
          set_has_m_batter_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_game_play_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .s_tbl_user m_tbl_user = 1;
  if (has_m_tbl_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_tbl_user(), output);
  }
  
  // optional int32 m_e_user_gps = 2;
  if (has_m_e_user_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_e_user_gps(), output);
  }
  
  // optional int32 m_pitcher_sid = 3;
  if (has_m_pitcher_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_pitcher_sid(), output);
  }
  
  // optional int32 m_batter_sid = 4;
  if (has_m_batter_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_batter_sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_game_play_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .s_tbl_user m_tbl_user = 1;
  if (has_m_tbl_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_tbl_user(), target);
  }
  
  // optional int32 m_e_user_gps = 2;
  if (has_m_e_user_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_e_user_gps(), target);
  }
  
  // optional int32 m_pitcher_sid = 3;
  if (has_m_pitcher_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_pitcher_sid(), target);
  }
  
  // optional int32 m_batter_sid = 4;
  if (has_m_batter_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_batter_sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_game_play_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .s_tbl_user m_tbl_user = 1;
    if (has_m_tbl_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tbl_user());
    }
    
    // optional int32 m_e_user_gps = 2;
    if (has_m_e_user_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_e_user_gps());
    }
    
    // optional int32 m_pitcher_sid = 3;
    if (has_m_pitcher_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pitcher_sid());
    }
    
    // optional int32 m_batter_sid = 4;
    if (has_m_batter_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_batter_sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_game_play_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_game_play_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_game_play_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_game_play_info::MergeFrom(const s_game_play_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tbl_user()) {
      mutable_m_tbl_user()->::s_tbl_user::MergeFrom(from.m_tbl_user());
    }
    if (from.has_m_e_user_gps()) {
      set_m_e_user_gps(from.m_e_user_gps());
    }
    if (from.has_m_pitcher_sid()) {
      set_m_pitcher_sid(from.m_pitcher_sid());
    }
    if (from.has_m_batter_sid()) {
      set_m_batter_sid(from.m_batter_sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_game_play_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_game_play_info::CopyFrom(const s_game_play_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_game_play_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_game_play_info::Swap(s_game_play_info* other) {
  if (other != this) {
    std::swap(m_tbl_user_, other->m_tbl_user_);
    std::swap(m_e_user_gps_, other->m_e_user_gps_);
    std::swap(m_pitcher_sid_, other->m_pitcher_sid_);
    std::swap(m_batter_sid_, other->m_batter_sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_game_play_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_game_play_info_descriptor_;
  metadata.reflection = s_game_play_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_result_round::kMTblRoundresultFieldNumber;
#endif  // !_MSC_VER

s_result_round::s_result_round()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_result_round::InitAsDefaultInstance() {
  m_tbl_roundresult_ = const_cast< ::s_tbl_roundresult*>(&::s_tbl_roundresult::default_instance());
}

s_result_round::s_result_round(const s_result_round& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_result_round::SharedCtor() {
  _cached_size_ = 0;
  m_tbl_roundresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_result_round::~s_result_round() {
  SharedDtor();
}

void s_result_round::SharedDtor() {
  if (this != default_instance_) {
    delete m_tbl_roundresult_;
  }
}

void s_result_round::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_result_round::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_result_round_descriptor_;
}

const s_result_round& s_result_round::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_result_round* s_result_round::default_instance_ = NULL;

s_result_round* s_result_round::New() const {
  return new s_result_round;
}

void s_result_round::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_tbl_roundresult()) {
      if (m_tbl_roundresult_ != NULL) m_tbl_roundresult_->::s_tbl_roundresult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_result_round::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_tbl_roundresult m_tbl_roundresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tbl_roundresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_result_round::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_tbl_roundresult m_tbl_roundresult = 1;
  if (has_m_tbl_roundresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_tbl_roundresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_result_round::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_tbl_roundresult m_tbl_roundresult = 1;
  if (has_m_tbl_roundresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_tbl_roundresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_result_round::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_tbl_roundresult m_tbl_roundresult = 1;
    if (has_m_tbl_roundresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tbl_roundresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_result_round::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_result_round* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_result_round*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_result_round::MergeFrom(const s_result_round& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tbl_roundresult()) {
      mutable_m_tbl_roundresult()->::s_tbl_roundresult::MergeFrom(from.m_tbl_roundresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_result_round::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_result_round::CopyFrom(const s_result_round& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_result_round::IsInitialized() const {
  
  return true;
}

void s_result_round::Swap(s_result_round* other) {
  if (other != this) {
    std::swap(m_tbl_roundresult_, other->m_tbl_roundresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_result_round::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_result_round_descriptor_;
  metadata.reflection = s_result_round_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_result_game::kMTblResultFieldNumber;
#endif  // !_MSC_VER

s_result_game::s_result_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_result_game::InitAsDefaultInstance() {
  m_tbl_result_ = const_cast< ::s_tbl_result*>(&::s_tbl_result::default_instance());
}

s_result_game::s_result_game(const s_result_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_result_game::SharedCtor() {
  _cached_size_ = 0;
  m_tbl_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_result_game::~s_result_game() {
  SharedDtor();
}

void s_result_game::SharedDtor() {
  if (this != default_instance_) {
    delete m_tbl_result_;
  }
}

void s_result_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_result_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_result_game_descriptor_;
}

const s_result_game& s_result_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_result_game* s_result_game::default_instance_ = NULL;

s_result_game* s_result_game::New() const {
  return new s_result_game;
}

void s_result_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_tbl_result()) {
      if (m_tbl_result_ != NULL) m_tbl_result_->::s_tbl_result::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_result_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_tbl_result m_tbl_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tbl_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_result_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_tbl_result m_tbl_result = 1;
  if (has_m_tbl_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_tbl_result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_result_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_tbl_result m_tbl_result = 1;
  if (has_m_tbl_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_tbl_result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_result_game::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_tbl_result m_tbl_result = 1;
    if (has_m_tbl_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tbl_result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_result_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_result_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_result_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_result_game::MergeFrom(const s_result_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tbl_result()) {
      mutable_m_tbl_result()->::s_tbl_result::MergeFrom(from.m_tbl_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_result_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_result_game::CopyFrom(const s_result_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_result_game::IsInitialized() const {
  
  return true;
}

void s_result_game::Swap(s_result_game* other) {
  if (other != this) {
    std::swap(m_tbl_result_, other->m_tbl_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_result_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_result_game_descriptor_;
  metadata.reflection = s_result_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomInfo::kRoomIdFieldNumber;
const int GameRoomInfo::kMGamePlayInfoFieldNumber;
const int GameRoomInfo::kMAttackUserFieldNumber;
const int GameRoomInfo::kMRoundCountFieldNumber;
const int GameRoomInfo::kMResultRoundFieldNumber;
const int GameRoomInfo::kMResultGameFieldNumber;
const int GameRoomInfo::kMIsAutoPlayFieldNumber;
const int GameRoomInfo::kMBaseballParkFieldNumber;
#endif  // !_MSC_VER

GameRoomInfo::GameRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomInfo::InitAsDefaultInstance() {
  m_result_game_ = const_cast< ::s_result_game*>(&::s_result_game::default_instance());
}

GameRoomInfo::GameRoomInfo(const GameRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  m_attack_user_ = GOOGLE_LONGLONG(0);
  m_round_count_ = 0;
  m_result_game_ = NULL;
  m_is_auto_play_ = false;
  m_baseball_park_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomInfo::~GameRoomInfo() {
  SharedDtor();
}

void GameRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete m_result_game_;
  }
}

void GameRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomInfo_descriptor_;
}

const GameRoomInfo& GameRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameRoomInfo* GameRoomInfo::default_instance_ = NULL;

GameRoomInfo* GameRoomInfo::New() const {
  return new GameRoomInfo;
}

void GameRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    m_attack_user_ = GOOGLE_LONGLONG(0);
    m_round_count_ = 0;
    if (has_m_result_game()) {
      if (m_result_game_ != NULL) m_result_game_->::s_result_game::Clear();
    }
    m_is_auto_play_ = false;
    m_baseball_park_ = 0;
  }
  m_game_play_info_.Clear();
  m_result_round_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_game_play_info;
        break;
      }
      
      // repeated .s_game_play_info m_game_play_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_game_play_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_game_play_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_game_play_info;
        if (input->ExpectTag(24)) goto parse_m_attack_user;
        break;
      }
      
      // optional int64 m_attack_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attack_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_attack_user_)));
          set_has_m_attack_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_round_count;
        break;
      }
      
      // optional int32 m_round_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_round_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_round_count_)));
          set_has_m_round_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_result_round;
        break;
      }
      
      // repeated .s_result_round m_result_round = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_result_round:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_result_round()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_result_round;
        if (input->ExpectTag(50)) goto parse_m_result_game;
        break;
      }
      
      // optional .s_result_game m_result_game = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_result_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_result_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_is_auto_play;
        break;
      }
      
      // optional bool m_is_auto_play = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_is_auto_play:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_is_auto_play_)));
          set_has_m_is_auto_play();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_baseball_park;
        break;
      }
      
      // optional int32 m_baseball_park = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_baseball_park:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_baseball_park_)));
          set_has_m_baseball_park();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }
  
  // repeated .s_game_play_info m_game_play_info = 2;
  for (int i = 0; i < this->m_game_play_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_game_play_info(i), output);
  }
  
  // optional int64 m_attack_user = 3;
  if (has_m_attack_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_attack_user(), output);
  }
  
  // optional int32 m_round_count = 4;
  if (has_m_round_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_round_count(), output);
  }
  
  // repeated .s_result_round m_result_round = 5;
  for (int i = 0; i < this->m_result_round_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_result_round(i), output);
  }
  
  // optional .s_result_game m_result_game = 6;
  if (has_m_result_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_result_game(), output);
  }
  
  // optional bool m_is_auto_play = 7;
  if (has_m_is_auto_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->m_is_auto_play(), output);
  }
  
  // optional int32 m_baseball_park = 8;
  if (has_m_baseball_park()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_baseball_park(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }
  
  // repeated .s_game_play_info m_game_play_info = 2;
  for (int i = 0; i < this->m_game_play_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_game_play_info(i), target);
  }
  
  // optional int64 m_attack_user = 3;
  if (has_m_attack_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_attack_user(), target);
  }
  
  // optional int32 m_round_count = 4;
  if (has_m_round_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_round_count(), target);
  }
  
  // repeated .s_result_round m_result_round = 5;
  for (int i = 0; i < this->m_result_round_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_result_round(i), target);
  }
  
  // optional .s_result_game m_result_game = 6;
  if (has_m_result_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_result_game(), target);
  }
  
  // optional bool m_is_auto_play = 7;
  if (has_m_is_auto_play()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->m_is_auto_play(), target);
  }
  
  // optional int32 m_baseball_park = 8;
  if (has_m_baseball_park()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_baseball_park(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // optional int64 m_attack_user = 3;
    if (has_m_attack_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_attack_user());
    }
    
    // optional int32 m_round_count = 4;
    if (has_m_round_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_round_count());
    }
    
    // optional .s_result_game m_result_game = 6;
    if (has_m_result_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_result_game());
    }
    
    // optional bool m_is_auto_play = 7;
    if (has_m_is_auto_play()) {
      total_size += 1 + 1;
    }
    
    // optional int32 m_baseball_park = 8;
    if (has_m_baseball_park()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_baseball_park());
    }
    
  }
  // repeated .s_game_play_info m_game_play_info = 2;
  total_size += 1 * this->m_game_play_info_size();
  for (int i = 0; i < this->m_game_play_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_game_play_info(i));
  }
  
  // repeated .s_result_round m_result_round = 5;
  total_size += 1 * this->m_result_round_size();
  for (int i = 0; i < this->m_result_round_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_result_round(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomInfo::MergeFrom(const GameRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_game_play_info_.MergeFrom(from.m_game_play_info_);
  m_result_round_.MergeFrom(from.m_result_round_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_m_attack_user()) {
      set_m_attack_user(from.m_attack_user());
    }
    if (from.has_m_round_count()) {
      set_m_round_count(from.m_round_count());
    }
    if (from.has_m_result_game()) {
      mutable_m_result_game()->::s_result_game::MergeFrom(from.m_result_game());
    }
    if (from.has_m_is_auto_play()) {
      set_m_is_auto_play(from.m_is_auto_play());
    }
    if (from.has_m_baseball_park()) {
      set_m_baseball_park(from.m_baseball_park());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomInfo::CopyFrom(const GameRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < m_game_play_info_size(); i++) {
    if (!this->m_game_play_info(i).IsInitialized()) return false;
  }
  return true;
}

void GameRoomInfo::Swap(GameRoomInfo* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    m_game_play_info_.Swap(&other->m_game_play_info_);
    std::swap(m_attack_user_, other->m_attack_user_);
    std::swap(m_round_count_, other->m_round_count_);
    m_result_round_.Swap(&other->m_result_round_);
    std::swap(m_result_game_, other->m_result_game_);
    std::swap(m_is_auto_play_, other->m_is_auto_play_);
    std::swap(m_baseball_park_, other->m_baseball_park_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomInfo_descriptor_;
  metadata.reflection = GameRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_vector3::kXFieldNumber;
const int s_vector3::kYFieldNumber;
const int s_vector3::kZFieldNumber;
#endif  // !_MSC_VER

s_vector3::s_vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_vector3::InitAsDefaultInstance() {
}

s_vector3::s_vector3(const s_vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_vector3::~s_vector3() {
  SharedDtor();
}

void s_vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_vector3_descriptor_;
}

const s_vector3& s_vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_vector3* s_vector3::default_instance_ = NULL;

s_vector3* s_vector3::New() const {
  return new s_vector3;
}

void s_vector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_vector3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_vector3::MergeFrom(const s_vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_vector3::CopyFrom(const s_vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_vector3::IsInitialized() const {
  
  return true;
}

void s_vector3::Swap(s_vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_vector3_descriptor_;
  metadata.reflection = s_vector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_vector2::kXFieldNumber;
const int s_vector2::kYFieldNumber;
#endif  // !_MSC_VER

s_vector2::s_vector2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_vector2::InitAsDefaultInstance() {
}

s_vector2::s_vector2(const s_vector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_vector2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_vector2::~s_vector2() {
  SharedDtor();
}

void s_vector2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_vector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_vector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_vector2_descriptor_;
}

const s_vector2& s_vector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_vector2* s_vector2::default_instance_ = NULL;

s_vector2* s_vector2::New() const {
  return new s_vector2;
}

void s_vector2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_vector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_vector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_vector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_vector2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_vector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_vector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_vector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_vector2::MergeFrom(const s_vector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_vector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_vector2::CopyFrom(const s_vector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_vector2::IsInitialized() const {
  
  return true;
}

void s_vector2::Swap(s_vector2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_vector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_vector2_descriptor_;
  metadata.reflection = s_vector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_pitcher_throw_info::kScreenToWorldFieldNumber;
const int s_pitcher_throw_info::kBallTypeFieldNumber;
const int s_pitcher_throw_info::kScaleRateFieldNumber;
const int s_pitcher_throw_info::kBallBreakingFieldNumber;
const int s_pitcher_throw_info::kAngleFieldNumber;
const int s_pitcher_throw_info::kUidFieldNumber;
const int s_pitcher_throw_info::kRoundFieldNumber;
const int s_pitcher_throw_info::kRhythmJudgeVerifiFieldNumber;
#endif  // !_MSC_VER

s_pitcher_throw_info::s_pitcher_throw_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_pitcher_throw_info::InitAsDefaultInstance() {
  screen_to_world_ = const_cast< ::s_vector3*>(&::s_vector3::default_instance());
}

s_pitcher_throw_info::s_pitcher_throw_info(const s_pitcher_throw_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_pitcher_throw_info::SharedCtor() {
  _cached_size_ = 0;
  screen_to_world_ = NULL;
  ball_type_ = 0;
  scale_rate_ = 0;
  ball_breaking_ = 0;
  angle_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  round_ = 0;
  rhythm_judge_verifi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_pitcher_throw_info::~s_pitcher_throw_info() {
  SharedDtor();
}

void s_pitcher_throw_info::SharedDtor() {
  if (this != default_instance_) {
    delete screen_to_world_;
  }
}

void s_pitcher_throw_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_pitcher_throw_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_pitcher_throw_info_descriptor_;
}

const s_pitcher_throw_info& s_pitcher_throw_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_pitcher_throw_info* s_pitcher_throw_info::default_instance_ = NULL;

s_pitcher_throw_info* s_pitcher_throw_info::New() const {
  return new s_pitcher_throw_info;
}

void s_pitcher_throw_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_screen_to_world()) {
      if (screen_to_world_ != NULL) screen_to_world_->::s_vector3::Clear();
    }
    ball_type_ = 0;
    scale_rate_ = 0;
    ball_breaking_ = 0;
    angle_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    round_ = 0;
    rhythm_judge_verifi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_pitcher_throw_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_vector3 screen_to_world = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_to_world()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ball_type;
        break;
      }
      
      // optional int32 ball_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ball_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_type_)));
          set_has_ball_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_scale_rate;
        break;
      }
      
      // optional float scale_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_rate_)));
          set_has_scale_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ball_breaking;
        break;
      }
      
      // optional float ball_breaking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ball_breaking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ball_breaking_)));
          set_has_ball_breaking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_angle;
        break;
      }
      
      // optional float angle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_round;
        break;
      }
      
      // optional int32 round = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rhythm_judge_verifi;
        break;
      }
      
      // optional int32 rhythm_judge_verifi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rhythm_judge_verifi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rhythm_judge_verifi_)));
          set_has_rhythm_judge_verifi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_pitcher_throw_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_vector3 screen_to_world = 1;
  if (has_screen_to_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->screen_to_world(), output);
  }
  
  // optional int32 ball_type = 2;
  if (has_ball_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ball_type(), output);
  }
  
  // optional float scale_rate = 3;
  if (has_scale_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale_rate(), output);
  }
  
  // optional float ball_breaking = 4;
  if (has_ball_breaking()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ball_breaking(), output);
  }
  
  // optional float angle = 5;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angle(), output);
  }
  
  // optional int64 uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->uid(), output);
  }
  
  // optional int32 round = 7;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->round(), output);
  }
  
  // optional int32 rhythm_judge_verifi = 8;
  if (has_rhythm_judge_verifi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rhythm_judge_verifi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_pitcher_throw_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_vector3 screen_to_world = 1;
  if (has_screen_to_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->screen_to_world(), target);
  }
  
  // optional int32 ball_type = 2;
  if (has_ball_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ball_type(), target);
  }
  
  // optional float scale_rate = 3;
  if (has_scale_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale_rate(), target);
  }
  
  // optional float ball_breaking = 4;
  if (has_ball_breaking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ball_breaking(), target);
  }
  
  // optional float angle = 5;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angle(), target);
  }
  
  // optional int64 uid = 6;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->uid(), target);
  }
  
  // optional int32 round = 7;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->round(), target);
  }
  
  // optional int32 rhythm_judge_verifi = 8;
  if (has_rhythm_judge_verifi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rhythm_judge_verifi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_pitcher_throw_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_vector3 screen_to_world = 1;
    if (has_screen_to_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screen_to_world());
    }
    
    // optional int32 ball_type = 2;
    if (has_ball_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ball_type());
    }
    
    // optional float scale_rate = 3;
    if (has_scale_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float ball_breaking = 4;
    if (has_ball_breaking()) {
      total_size += 1 + 4;
    }
    
    // optional float angle = 5;
    if (has_angle()) {
      total_size += 1 + 4;
    }
    
    // optional int64 uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 round = 7;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }
    
    // optional int32 rhythm_judge_verifi = 8;
    if (has_rhythm_judge_verifi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rhythm_judge_verifi());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_pitcher_throw_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_pitcher_throw_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_pitcher_throw_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_pitcher_throw_info::MergeFrom(const s_pitcher_throw_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screen_to_world()) {
      mutable_screen_to_world()->::s_vector3::MergeFrom(from.screen_to_world());
    }
    if (from.has_ball_type()) {
      set_ball_type(from.ball_type());
    }
    if (from.has_scale_rate()) {
      set_scale_rate(from.scale_rate());
    }
    if (from.has_ball_breaking()) {
      set_ball_breaking(from.ball_breaking());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_rhythm_judge_verifi()) {
      set_rhythm_judge_verifi(from.rhythm_judge_verifi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_pitcher_throw_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_pitcher_throw_info::CopyFrom(const s_pitcher_throw_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_pitcher_throw_info::IsInitialized() const {
  
  return true;
}

void s_pitcher_throw_info::Swap(s_pitcher_throw_info* other) {
  if (other != this) {
    std::swap(screen_to_world_, other->screen_to_world_);
    std::swap(ball_type_, other->ball_type_);
    std::swap(scale_rate_, other->scale_rate_);
    std::swap(ball_breaking_, other->ball_breaking_);
    std::swap(angle_, other->angle_);
    std::swap(uid_, other->uid_);
    std::swap(round_, other->round_);
    std::swap(rhythm_judge_verifi_, other->rhythm_judge_verifi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_pitcher_throw_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_pitcher_throw_info_descriptor_;
  metadata.reflection = s_pitcher_throw_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s_better_hit_info::kScreenToWorldFieldNumber;
const int s_better_hit_info::kForceXyFieldNumber;
const int s_better_hit_info::kForceFieldNumber;
const int s_better_hit_info::kTorqueFieldNumber;
const int s_better_hit_info::kVelocityXFieldNumber;
const int s_better_hit_info::kUidFieldNumber;
const int s_better_hit_info::kRoundFieldNumber;
const int s_better_hit_info::kHitInfoFieldNumber;
#endif  // !_MSC_VER

s_better_hit_info::s_better_hit_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_better_hit_info::InitAsDefaultInstance() {
  screen_to_world_ = const_cast< ::s_vector3*>(&::s_vector3::default_instance());
  force_xy_ = const_cast< ::s_vector2*>(&::s_vector2::default_instance());
}

s_better_hit_info::s_better_hit_info(const s_better_hit_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_better_hit_info::SharedCtor() {
  _cached_size_ = 0;
  screen_to_world_ = NULL;
  force_xy_ = NULL;
  force_ = 0;
  torque_ = 0;
  velocity_x_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  round_ = 0;
  hit_info_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_better_hit_info::~s_better_hit_info() {
  SharedDtor();
}

void s_better_hit_info::SharedDtor() {
  if (this != default_instance_) {
    delete screen_to_world_;
    delete force_xy_;
  }
}

void s_better_hit_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_better_hit_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_better_hit_info_descriptor_;
}

const s_better_hit_info& s_better_hit_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_better_hit_info* s_better_hit_info::default_instance_ = NULL;

s_better_hit_info* s_better_hit_info::New() const {
  return new s_better_hit_info;
}

void s_better_hit_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_screen_to_world()) {
      if (screen_to_world_ != NULL) screen_to_world_->::s_vector3::Clear();
    }
    if (has_force_xy()) {
      if (force_xy_ != NULL) force_xy_->::s_vector2::Clear();
    }
    force_ = 0;
    torque_ = 0;
    velocity_x_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    round_ = 0;
    hit_info_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_better_hit_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .s_vector3 screen_to_world = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_to_world()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_force_xy;
        break;
      }
      
      // optional .s_vector2 force_xy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_force_xy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force_xy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_force;
        break;
      }
      
      // optional float force = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_torque;
        break;
      }
      
      // optional float torque = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
          set_has_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_velocity_x;
        break;
      }
      
      // optional float velocity_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uid;
        break;
      }
      
      // optional int64 uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_round;
        break;
      }
      
      // optional int32 round = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hit_info;
        break;
      }
      
      // optional int32 hit_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_info_)));
          set_has_hit_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_better_hit_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .s_vector3 screen_to_world = 1;
  if (has_screen_to_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->screen_to_world(), output);
  }
  
  // optional .s_vector2 force_xy = 2;
  if (has_force_xy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->force_xy(), output);
  }
  
  // optional float force = 3;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->force(), output);
  }
  
  // optional float torque = 4;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->torque(), output);
  }
  
  // optional float velocity_x = 5;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity_x(), output);
  }
  
  // optional int64 uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->uid(), output);
  }
  
  // optional int32 round = 7;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->round(), output);
  }
  
  // optional int32 hit_info = 8;
  if (has_hit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hit_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_better_hit_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .s_vector3 screen_to_world = 1;
  if (has_screen_to_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->screen_to_world(), target);
  }
  
  // optional .s_vector2 force_xy = 2;
  if (has_force_xy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->force_xy(), target);
  }
  
  // optional float force = 3;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->force(), target);
  }
  
  // optional float torque = 4;
  if (has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->torque(), target);
  }
  
  // optional float velocity_x = 5;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity_x(), target);
  }
  
  // optional int64 uid = 6;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->uid(), target);
  }
  
  // optional int32 round = 7;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->round(), target);
  }
  
  // optional int32 hit_info = 8;
  if (has_hit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hit_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_better_hit_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .s_vector3 screen_to_world = 1;
    if (has_screen_to_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screen_to_world());
    }
    
    // optional .s_vector2 force_xy = 2;
    if (has_force_xy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->force_xy());
    }
    
    // optional float force = 3;
    if (has_force()) {
      total_size += 1 + 4;
    }
    
    // optional float torque = 4;
    if (has_torque()) {
      total_size += 1 + 4;
    }
    
    // optional float velocity_x = 5;
    if (has_velocity_x()) {
      total_size += 1 + 4;
    }
    
    // optional int64 uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional int32 round = 7;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }
    
    // optional int32 hit_info = 8;
    if (has_hit_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_better_hit_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_better_hit_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_better_hit_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_better_hit_info::MergeFrom(const s_better_hit_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screen_to_world()) {
      mutable_screen_to_world()->::s_vector3::MergeFrom(from.screen_to_world());
    }
    if (from.has_force_xy()) {
      mutable_force_xy()->::s_vector2::MergeFrom(from.force_xy());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_torque()) {
      set_torque(from.torque());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_hit_info()) {
      set_hit_info(from.hit_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_better_hit_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_better_hit_info::CopyFrom(const s_better_hit_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_better_hit_info::IsInitialized() const {
  
  return true;
}

void s_better_hit_info::Swap(s_better_hit_info* other) {
  if (other != this) {
    std::swap(screen_to_world_, other->screen_to_world_);
    std::swap(force_xy_, other->force_xy_);
    std::swap(force_, other->force_);
    std::swap(torque_, other->torque_);
    std::swap(velocity_x_, other->velocity_x_);
    std::swap(uid_, other->uid_);
    std::swap(round_, other->round_);
    std::swap(hit_info_, other->hit_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_better_hit_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_better_hit_info_descriptor_;
  metadata.reflection = s_better_hit_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GLReqGameProtocol::GLReqGameProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLReqGameProtocol::InitAsDefaultInstance() {
}

GLReqGameProtocol::GLReqGameProtocol(const GLReqGameProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameProtocol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameProtocol::~GLReqGameProtocol() {
  SharedDtor();
}

void GLReqGameProtocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLReqGameProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLReqGameProtocol_descriptor_;
}

const GLReqGameProtocol& GLReqGameProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameProtocol* GLReqGameProtocol::default_instance_ = NULL;

GLReqGameProtocol* GLReqGameProtocol::New() const {
  return new GLReqGameProtocol;
}

void GLReqGameProtocol::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLReqGameProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GLReqGameProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLReqGameProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLReqGameProtocol::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLReqGameProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLReqGameProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLReqGameProtocol::MergeFrom(const GLReqGameProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLReqGameProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLReqGameProtocol::CopyFrom(const GLReqGameProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameProtocol::IsInitialized() const {
  
  return true;
}

void GLReqGameProtocol::Swap(GLReqGameProtocol* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLReqGameProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLReqGameProtocol_descriptor_;
  metadata.reflection = GLReqGameProtocol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GLAnsGameProtocol::GLAnsGameProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLAnsGameProtocol::InitAsDefaultInstance() {
}

GLAnsGameProtocol::GLAnsGameProtocol(const GLAnsGameProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameProtocol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameProtocol::~GLAnsGameProtocol() {
  SharedDtor();
}

void GLAnsGameProtocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLAnsGameProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLAnsGameProtocol_descriptor_;
}

const GLAnsGameProtocol& GLAnsGameProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameProtocol* GLAnsGameProtocol::default_instance_ = NULL;

GLAnsGameProtocol* GLAnsGameProtocol::New() const {
  return new GLAnsGameProtocol;
}

void GLAnsGameProtocol::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLAnsGameProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GLAnsGameProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLAnsGameProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLAnsGameProtocol::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLAnsGameProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLAnsGameProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLAnsGameProtocol::MergeFrom(const GLAnsGameProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLAnsGameProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLAnsGameProtocol::CopyFrom(const GLAnsGameProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameProtocol::IsInitialized() const {
  
  return true;
}

void GLAnsGameProtocol::Swap(GLAnsGameProtocol* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLAnsGameProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLAnsGameProtocol_descriptor_;
  metadata.reflection = GLAnsGameProtocol_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
