// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_db_2eproto__INCLUDED
#define PROTOBUF_db_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_2eproto();
void protobuf_AssignDesc_db_2eproto();
void protobuf_ShutdownFile_db_2eproto();

class DBIn;
class ReqDB;
class AnsDB;

enum DBIn_Type {
  DBIn_Type_INT = 1,
  DBIn_Type_INT64 = 2,
  DBIn_Type_STR = 3
};
bool DBIn_Type_IsValid(int value);
const DBIn_Type DBIn_Type_Type_MIN = DBIn_Type_INT;
const DBIn_Type DBIn_Type_Type_MAX = DBIn_Type_STR;
const int DBIn_Type_Type_ARRAYSIZE = DBIn_Type_Type_MAX + 1;

// ===================================================================

class DBIn : public ::google::protobuf::MessageLite {
 public:
  DBIn();
  virtual ~DBIn();
  
  DBIn(const DBIn& from);
  
  inline DBIn& operator=(const DBIn& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DBIn& default_instance();
  
  void Swap(DBIn* other);
  
  // implements Message ----------------------------------------------
  
  DBIn* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DBIn& from);
  void MergeFrom(const DBIn& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef DBIn_Type Type;
  static const Type INT = DBIn_Type_INT;
  static const Type INT64 = DBIn_Type_INT64;
  static const Type STR = DBIn_Type_STR;
  static inline bool Type_IsValid(int value) {
    return DBIn_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DBIn_Type_Type_MIN;
  static const Type Type_MAX =
    DBIn_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DBIn_Type_Type_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // required .DBIn.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::DBIn_Type type() const;
  inline void set_type(::DBIn_Type value);
  
  // required string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // @@protoc_insertion_point(class_scope:DBIn)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_val();
  inline void clear_has_val();
  
  ::std::string* val_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static DBIn* default_instance_;
};
// -------------------------------------------------------------------

class ReqDB : public ::google::protobuf::MessageLite {
 public:
  ReqDB();
  virtual ~ReqDB();
  
  ReqDB(const ReqDB& from);
  
  inline ReqDB& operator=(const ReqDB& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ReqDB& default_instance();
  
  void Swap(ReqDB* other);
  
  // implements Message ----------------------------------------------
  
  ReqDB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ReqDB& from);
  void MergeFrom(const ReqDB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);
  
  // required string query = 2;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 2;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  
  // repeated .DBIn params = 3;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 3;
  inline const ::DBIn& params(int index) const;
  inline ::DBIn* mutable_params(int index);
  inline ::DBIn* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::DBIn >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBIn >*
      mutable_params();
  
  // @@protoc_insertion_point(class_scope:ReqDB)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_query();
  inline void clear_has_query();
  
  ::std::string* query_;
  ::google::protobuf::RepeatedPtrField< ::DBIn > params_;
  ::google::protobuf::int32 seq_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static ReqDB* default_instance_;
};
// -------------------------------------------------------------------

class AnsDB : public ::google::protobuf::MessageLite {
 public:
  AnsDB();
  virtual ~AnsDB();
  
  AnsDB(const AnsDB& from);
  
  inline AnsDB& operator=(const AnsDB& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AnsDB& default_instance();
  
  void Swap(AnsDB* other);
  
  // implements Message ----------------------------------------------
  
  AnsDB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AnsDB& from);
  void MergeFrom(const AnsDB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);
  
  // required string query = 2;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 2;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  
  // required int32 retCode = 3;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 3;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);
  
  // required bytes result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const void* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  
  // @@protoc_insertion_point(class_scope:AnsDB)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::std::string* query_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::int32 retcode_;
  ::std::string* result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static AnsDB* default_instance_;
};
// ===================================================================


// ===================================================================

// DBIn

// required .DBIn.Type type = 1;
inline bool DBIn::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBIn::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBIn::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBIn::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DBIn_Type DBIn::type() const {
  return static_cast< ::DBIn_Type >(type_);
}
inline void DBIn::set_type(::DBIn_Type value) {
  GOOGLE_DCHECK(::DBIn_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string val = 2;
inline bool DBIn::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBIn::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBIn::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBIn::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& DBIn::val() const {
  return *val_;
}
inline void DBIn::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void DBIn::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void DBIn::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBIn::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* DBIn::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqDB

// required int32 seq = 1;
inline bool ReqDB::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDB::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDB::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDB::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 ReqDB::seq() const {
  return seq_;
}
inline void ReqDB::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
}

// required string query = 2;
inline bool ReqDB::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDB::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDB::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDB::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& ReqDB::query() const {
  return *query_;
}
inline void ReqDB::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void ReqDB::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void ReqDB::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqDB::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* ReqDB::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .DBIn params = 3;
inline int ReqDB::params_size() const {
  return params_.size();
}
inline void ReqDB::clear_params() {
  params_.Clear();
}
inline const ::DBIn& ReqDB::params(int index) const {
  return params_.Get(index);
}
inline ::DBIn* ReqDB::mutable_params(int index) {
  return params_.Mutable(index);
}
inline ::DBIn* ReqDB::add_params() {
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBIn >&
ReqDB::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBIn >*
ReqDB::mutable_params() {
  return &params_;
}

// -------------------------------------------------------------------

// AnsDB

// required int32 seq = 1;
inline bool AnsDB::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnsDB::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnsDB::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnsDB::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 AnsDB::seq() const {
  return seq_;
}
inline void AnsDB::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
}

// required string query = 2;
inline bool AnsDB::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnsDB::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnsDB::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnsDB::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& AnsDB::query() const {
  return *query_;
}
inline void AnsDB::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void AnsDB::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void AnsDB::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnsDB::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* AnsDB::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 retCode = 3;
inline bool AnsDB::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnsDB::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnsDB::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnsDB::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 AnsDB::retcode() const {
  return retcode_;
}
inline void AnsDB::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required bytes result = 4;
inline bool AnsDB::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnsDB::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnsDB::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnsDB::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& AnsDB::result() const {
  return *result_;
}
inline void AnsDB::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void AnsDB::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void AnsDB::set_result(const void* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnsDB::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* AnsDB::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2eproto__INCLUDED
