// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameLogic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_gameLogic_2eproto() {
  delete GameUserInfo::default_instance_;
  delete GameRoomInfo::default_instance_;
  delete GameInfo::default_instance_;
  delete MemberInfo::default_instance_;
  delete s_req_game_test_packet::default_instance_;
  delete s_req_send_cmd::default_instance_;
  delete GLReqGameProtocol::default_instance_;
  delete s_ans_game_test_packet::default_instance_;
  delete GLAnsGameProtocol::default_instance_;
}

void protobuf_AddDesc_gameLogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  GameUserInfo::default_instance_ = new GameUserInfo();
  GameRoomInfo::default_instance_ = new GameRoomInfo();
  GameInfo::default_instance_ = new GameInfo();
  MemberInfo::default_instance_ = new MemberInfo();
  s_req_game_test_packet::default_instance_ = new s_req_game_test_packet();
  s_req_send_cmd::default_instance_ = new s_req_send_cmd();
  GLReqGameProtocol::default_instance_ = new GLReqGameProtocol();
  s_ans_game_test_packet::default_instance_ = new s_ans_game_test_packet();
  GLAnsGameProtocol::default_instance_ = new GLAnsGameProtocol();
  GameUserInfo::default_instance_->InitAsDefaultInstance();
  GameRoomInfo::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  MemberInfo::default_instance_->InitAsDefaultInstance();
  s_req_game_test_packet::default_instance_->InitAsDefaultInstance();
  s_req_send_cmd::default_instance_->InitAsDefaultInstance();
  GLReqGameProtocol::default_instance_->InitAsDefaultInstance();
  s_ans_game_test_packet::default_instance_->InitAsDefaultInstance();
  GLAnsGameProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameLogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameLogic_2eproto {
  StaticDescriptorInitializer_gameLogic_2eproto() {
    protobuf_AddDesc_gameLogic_2eproto();
  }
} static_descriptor_initializer_gameLogic_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GameUserInfo::kGameInfoFieldNumber;
const int GameUserInfo::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

GameUserInfo::GameUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameUserInfo::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::GameInfo*>(&::GameInfo::default_instance());
  memberinfo_ = const_cast< ::MemberInfo*>(&::MemberInfo::default_instance());
}

GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameUserInfo::SharedCtor() {
  _cached_size_ = 0;
  gameinfo_ = NULL;
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUserInfo::~GameUserInfo() {
  SharedDtor();
}

void GameUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
    delete memberinfo_;
  }
}

void GameUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameUserInfo& GameUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameUserInfo* GameUserInfo::default_instance_ = NULL;

GameUserInfo* GameUserInfo::New() const {
  return new GameUserInfo;
}

void GameUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::GameInfo::Clear();
    }
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::MemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameInfo gameInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberInfo;
        break;
      }
      
      // required .MemberInfo memberInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameInfo gameInfo = 1;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->gameinfo(), output);
  }
  
  // required .MemberInfo memberInfo = 2;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->memberinfo(), output);
  }
  
}

int GameUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameInfo gameInfo = 1;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }
    
    // required .MemberInfo memberInfo = 2;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameUserInfo*>(&from));
}

void GameUserInfo::MergeFrom(const GameUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::GameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::MemberInfo::MergeFrom(from.memberinfo());
    }
  }
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  if (has_memberinfo()) {
    if (!this->memberinfo().IsInitialized()) return false;
  }
  return true;
}

void GameUserInfo::Swap(GameUserInfo* other) {
  if (other != this) {
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameUserInfo::GetTypeName() const {
  return "GameUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomInfo::kRoomIDFieldNumber;
const int GameRoomInfo::kPointMoneyFieldNumber;
const int GameRoomInfo::kGameUserInfoFieldNumber;
#endif  // !_MSC_VER

GameRoomInfo::GameRoomInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameRoomInfo::InitAsDefaultInstance() {
}

GameRoomInfo::GameRoomInfo(const GameRoomInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  pointmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomInfo::~GameRoomInfo() {
  SharedDtor();
}

void GameRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameRoomInfo& GameRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameRoomInfo* GameRoomInfo::default_instance_ = NULL;

GameRoomInfo* GameRoomInfo::New() const {
  return new GameRoomInfo;
}

void GameRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    pointmoney_ = 0;
  }
  gameuserinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointMoney;
        break;
      }
      
      // required int32 pointMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointmoney_)));
          set_has_pointmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameUserInfo;
        break;
      }
      
      // repeated .GameUserInfo gameUserInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameUserInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }
  
  // required int32 pointMoney = 2;
  if (has_pointmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pointmoney(), output);
  }
  
  // repeated .GameUserInfo gameUserInfo = 3;
  for (int i = 0; i < this->gameuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gameuserinfo(i), output);
  }
  
}

int GameRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // required int32 pointMoney = 2;
    if (has_pointmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointmoney());
    }
    
  }
  // repeated .GameUserInfo gameUserInfo = 3;
  total_size += 1 * this->gameuserinfo_size();
  for (int i = 0; i < this->gameuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameuserinfo(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameRoomInfo*>(&from));
}

void GameRoomInfo::MergeFrom(const GameRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameuserinfo_.MergeFrom(from.gameuserinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pointmoney()) {
      set_pointmoney(from.pointmoney());
    }
  }
}

void GameRoomInfo::CopyFrom(const GameRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < gameuserinfo_size(); i++) {
    if (!this->gameuserinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GameRoomInfo::Swap(GameRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(pointmoney_, other->pointmoney_);
    gameuserinfo_.Swap(&other->gameuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameRoomInfo::GetTypeName() const {
  return "GameRoomInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kGameIDFieldNumber;
const int GameInfo::kGameIndexFieldNumber;
const int GameInfo::kLevelFieldNumber;
const int GameInfo::kMoneyFieldNumber;
const int GameInfo::kWinCntFieldNumber;
const int GameInfo::kLoseCntFieldNumber;
const int GameInfo::kAllInCntFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wincnt_ = 0;
  losecnt_ = 0;
  allincnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (level_ != &::google::protobuf::internal::kEmptyString) {
    delete level_;
  }
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    if (has_level()) {
      if (level_ != &::google::protobuf::internal::kEmptyString) {
        level_->clear();
      }
    }
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    wincnt_ = 0;
    losecnt_ = 0;
    allincnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_level;
        break;
      }
      
      // required string level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_money;
        break;
      }
      
      // required string money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winCnt;
        break;
      }
      
      // required int32 winCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincnt_)));
          set_has_wincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loseCnt;
        break;
      }
      
      // required int32 loseCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losecnt_)));
          set_has_losecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_allInCnt;
        break;
      }
      
      // required int32 allInCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allInCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allincnt_)));
          set_has_allincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required string level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->level(), output);
  }
  
  // required string money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->money(), output);
  }
  
  // required int32 winCnt = 5;
  if (has_wincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wincnt(), output);
  }
  
  // required int32 loseCnt = 6;
  if (has_losecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->losecnt(), output);
  }
  
  // required int32 allInCnt = 7;
  if (has_allincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->allincnt(), output);
  }
  
}

int GameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required string level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level());
    }
    
    // required string money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
    // required int32 winCnt = 5;
    if (has_wincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincnt());
    }
    
    // required int32 loseCnt = 6;
    if (has_losecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losecnt());
    }
    
    // required int32 allInCnt = 7;
    if (has_allincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allincnt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameInfo*>(&from));
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_wincnt()) {
      set_wincnt(from.wincnt());
    }
    if (from.has_losecnt()) {
      set_losecnt(from.losecnt());
    }
    if (from.has_allincnt()) {
      set_allincnt(from.allincnt());
    }
  }
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(wincnt_, other->wincnt_);
    std::swap(losecnt_, other->losecnt_);
    std::swap(allincnt_, other->allincnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameInfo::GetTypeName() const {
  return "GameInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MemberInfo::kGameIDFieldNumber;
const int MemberInfo::kAvatarUrlFieldNumber;
const int MemberInfo::kNickNameFieldNumber;
#endif  // !_MSC_VER

MemberInfo::MemberInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MemberInfo::InitAsDefaultInstance() {
}

MemberInfo::MemberInfo(const MemberInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  avatarurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberInfo::~MemberInfo() {
  SharedDtor();
}

void MemberInfo::SharedDtor() {
  if (avatarurl_ != &::google::protobuf::internal::kEmptyString) {
    delete avatarurl_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemberInfo& MemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

MemberInfo* MemberInfo::default_instance_ = NULL;

MemberInfo* MemberInfo::New() const {
  return new MemberInfo;
}

void MemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_avatarurl()) {
      if (avatarurl_ != &::google::protobuf::internal::kEmptyString) {
        avatarurl_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatarUrl;
        break;
      }
      
      // required string avatarUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatarurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }
      
      // required string nickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required string avatarUrl = 2;
  if (has_avatarurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->avatarurl(), output);
  }
  
  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }
  
}

int MemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string avatarUrl = 2;
    if (has_avatarurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatarurl());
    }
    
    // required string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemberInfo*>(&from));
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_avatarurl()) {
      set_avatarurl(from.avatarurl());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MemberInfo::Swap(MemberInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(avatarurl_, other->avatarurl_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MemberInfo::GetTypeName() const {
  return "MemberInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_game_test_packet::kTestIntFieldNumber;
const int s_req_game_test_packet::kTestStringFieldNumber;
#endif  // !_MSC_VER

s_req_game_test_packet::s_req_game_test_packet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_game_test_packet::InitAsDefaultInstance() {
}

s_req_game_test_packet::s_req_game_test_packet(const s_req_game_test_packet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_game_test_packet::SharedCtor() {
  _cached_size_ = 0;
  test_int_ = 0;
  test_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_game_test_packet::~s_req_game_test_packet() {
  SharedDtor();
}

void s_req_game_test_packet::SharedDtor() {
  if (test_string_ != &::google::protobuf::internal::kEmptyString) {
    delete test_string_;
  }
  if (this != default_instance_) {
  }
}

void s_req_game_test_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_game_test_packet& s_req_game_test_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_game_test_packet* s_req_game_test_packet::default_instance_ = NULL;

s_req_game_test_packet* s_req_game_test_packet::New() const {
  return new s_req_game_test_packet;
}

void s_req_game_test_packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_int_ = 0;
    if (has_test_string()) {
      if (test_string_ != &::google::protobuf::internal::kEmptyString) {
        test_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_game_test_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 test_int = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_int_)));
          set_has_test_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_test_string;
        break;
      }
      
      // required string test_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_game_test_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 test_int = 2;
  if (has_test_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->test_int(), output);
  }
  
  // required string test_string = 3;
  if (has_test_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->test_string(), output);
  }
  
}

int s_req_game_test_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 test_int = 2;
    if (has_test_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_int());
    }
    
    // required string test_string = 3;
    if (has_test_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_string());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_game_test_packet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_game_test_packet*>(&from));
}

void s_req_game_test_packet::MergeFrom(const s_req_game_test_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_int()) {
      set_test_int(from.test_int());
    }
    if (from.has_test_string()) {
      set_test_string(from.test_string());
    }
  }
}

void s_req_game_test_packet::CopyFrom(const s_req_game_test_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_game_test_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_game_test_packet::Swap(s_req_game_test_packet* other) {
  if (other != this) {
    std::swap(test_int_, other->test_int_);
    std::swap(test_string_, other->test_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_game_test_packet::GetTypeName() const {
  return "s_req_game_test_packet";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_send_cmd::kCmdTypeFieldNumber;
const int s_req_send_cmd::kCmdFieldNumber;
#endif  // !_MSC_VER

s_req_send_cmd::s_req_send_cmd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_send_cmd::InitAsDefaultInstance() {
}

s_req_send_cmd::s_req_send_cmd(const s_req_send_cmd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_send_cmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_send_cmd::~s_req_send_cmd() {
  SharedDtor();
}

void s_req_send_cmd::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void s_req_send_cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_send_cmd& s_req_send_cmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_send_cmd* s_req_send_cmd::default_instance_ = NULL;

s_req_send_cmd* s_req_send_cmd::New() const {
  return new s_req_send_cmd;
}

void s_req_send_cmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_type_ = 0;
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_send_cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }
      
      // required string cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_send_cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd_type(), output);
  }
  
  // required string cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cmd(), output);
  }
  
}

int s_req_send_cmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_type());
    }
    
    // required string cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_send_cmd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_send_cmd*>(&from));
}

void s_req_send_cmd::MergeFrom(const s_req_send_cmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
}

void s_req_send_cmd::CopyFrom(const s_req_send_cmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_send_cmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_send_cmd::Swap(s_req_send_cmd* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_send_cmd::GetTypeName() const {
  return "s_req_send_cmd";
}


// ===================================================================

bool GLReqGameProtocol_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLReqGameProtocol_Type GLReqGameProtocol::NONE;
const GLReqGameProtocol_Type GLReqGameProtocol::req_game_test_packet;
const GLReqGameProtocol_Type GLReqGameProtocol::req_send_cmd;
const GLReqGameProtocol_Type GLReqGameProtocol::Type_MIN;
const GLReqGameProtocol_Type GLReqGameProtocol::Type_MAX;
const int GLReqGameProtocol::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLReqGameProtocol::kTypeFieldNumber;
const int GLReqGameProtocol::kMReqGameTestPacketFieldNumber;
const int GLReqGameProtocol::kMReqSendCmdFieldNumber;
#endif  // !_MSC_VER

GLReqGameProtocol::GLReqGameProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameProtocol::InitAsDefaultInstance() {
  m_req_game_test_packet_ = const_cast< ::s_req_game_test_packet*>(&::s_req_game_test_packet::default_instance());
  m_req_send_cmd_ = const_cast< ::s_req_send_cmd*>(&::s_req_send_cmd::default_instance());
}

GLReqGameProtocol::GLReqGameProtocol(const GLReqGameProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameProtocol::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_req_game_test_packet_ = NULL;
  m_req_send_cmd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameProtocol::~GLReqGameProtocol() {
  SharedDtor();
}

void GLReqGameProtocol::SharedDtor() {
  if (this != default_instance_) {
    delete m_req_game_test_packet_;
    delete m_req_send_cmd_;
  }
}

void GLReqGameProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameProtocol& GLReqGameProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameProtocol* GLReqGameProtocol::default_instance_ = NULL;

GLReqGameProtocol* GLReqGameProtocol::New() const {
  return new GLReqGameProtocol;
}

void GLReqGameProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_req_game_test_packet()) {
      if (m_req_game_test_packet_ != NULL) m_req_game_test_packet_->::s_req_game_test_packet::Clear();
    }
    if (has_m_req_send_cmd()) {
      if (m_req_send_cmd_ != NULL) m_req_send_cmd_->::s_req_send_cmd::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GLReqGameProtocol.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLReqGameProtocol_Type_IsValid(value)) {
            set_type(static_cast< ::GLReqGameProtocol_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_req_game_test_packet;
        break;
      }
      
      // optional .s_req_game_test_packet m_req_game_test_packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_game_test_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_game_test_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_req_send_cmd;
        break;
      }
      
      // optional .s_req_send_cmd m_req_send_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_send_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_send_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GLReqGameProtocol.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_req_game_test_packet m_req_game_test_packet = 2;
  if (has_m_req_game_test_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_req_game_test_packet(), output);
  }
  
  // optional .s_req_send_cmd m_req_send_cmd = 3;
  if (has_m_req_send_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_req_send_cmd(), output);
  }
  
}

int GLReqGameProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GLReqGameProtocol.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_req_game_test_packet m_req_game_test_packet = 2;
    if (has_m_req_game_test_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_game_test_packet());
    }
    
    // optional .s_req_send_cmd m_req_send_cmd = 3;
    if (has_m_req_send_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_send_cmd());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameProtocol*>(&from));
}

void GLReqGameProtocol::MergeFrom(const GLReqGameProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_req_game_test_packet()) {
      mutable_m_req_game_test_packet()->::s_req_game_test_packet::MergeFrom(from.m_req_game_test_packet());
    }
    if (from.has_m_req_send_cmd()) {
      mutable_m_req_send_cmd()->::s_req_send_cmd::MergeFrom(from.m_req_send_cmd());
    }
  }
}

void GLReqGameProtocol::CopyFrom(const GLReqGameProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_m_req_game_test_packet()) {
    if (!this->m_req_game_test_packet().IsInitialized()) return false;
  }
  if (has_m_req_send_cmd()) {
    if (!this->m_req_send_cmd().IsInitialized()) return false;
  }
  return true;
}

void GLReqGameProtocol::Swap(GLReqGameProtocol* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_req_game_test_packet_, other->m_req_game_test_packet_);
    std::swap(m_req_send_cmd_, other->m_req_send_cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameProtocol::GetTypeName() const {
  return "GLReqGameProtocol";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_game_test_packet::kTestIntFieldNumber;
const int s_ans_game_test_packet::kTestStringFieldNumber;
#endif  // !_MSC_VER

s_ans_game_test_packet::s_ans_game_test_packet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_game_test_packet::InitAsDefaultInstance() {
}

s_ans_game_test_packet::s_ans_game_test_packet(const s_ans_game_test_packet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_game_test_packet::SharedCtor() {
  _cached_size_ = 0;
  test_int_ = 0;
  test_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_game_test_packet::~s_ans_game_test_packet() {
  SharedDtor();
}

void s_ans_game_test_packet::SharedDtor() {
  if (test_string_ != &::google::protobuf::internal::kEmptyString) {
    delete test_string_;
  }
  if (this != default_instance_) {
  }
}

void s_ans_game_test_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_game_test_packet& s_ans_game_test_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_game_test_packet* s_ans_game_test_packet::default_instance_ = NULL;

s_ans_game_test_packet* s_ans_game_test_packet::New() const {
  return new s_ans_game_test_packet;
}

void s_ans_game_test_packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_int_ = 0;
    if (has_test_string()) {
      if (test_string_ != &::google::protobuf::internal::kEmptyString) {
        test_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_game_test_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 test_int = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_int_)));
          set_has_test_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_test_string;
        break;
      }
      
      // required string test_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_game_test_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 test_int = 2;
  if (has_test_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->test_int(), output);
  }
  
  // required string test_string = 3;
  if (has_test_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->test_string(), output);
  }
  
}

int s_ans_game_test_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 test_int = 2;
    if (has_test_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_int());
    }
    
    // required string test_string = 3;
    if (has_test_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_string());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_game_test_packet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_game_test_packet*>(&from));
}

void s_ans_game_test_packet::MergeFrom(const s_ans_game_test_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_int()) {
      set_test_int(from.test_int());
    }
    if (from.has_test_string()) {
      set_test_string(from.test_string());
    }
  }
}

void s_ans_game_test_packet::CopyFrom(const s_ans_game_test_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_game_test_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_ans_game_test_packet::Swap(s_ans_game_test_packet* other) {
  if (other != this) {
    std::swap(test_int_, other->test_int_);
    std::swap(test_string_, other->test_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_game_test_packet::GetTypeName() const {
  return "s_ans_game_test_packet";
}


// ===================================================================

bool GLAnsGameProtocol_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameProtocol_Type GLAnsGameProtocol::NONE;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_game_test_packet;
const GLAnsGameProtocol_Type GLAnsGameProtocol::Type_MIN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::Type_MAX;
const int GLAnsGameProtocol::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameProtocol::kTypeFieldNumber;
const int GLAnsGameProtocol::kMAnsGameTestPacketFieldNumber;
#endif  // !_MSC_VER

GLAnsGameProtocol::GLAnsGameProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameProtocol::InitAsDefaultInstance() {
  m_ans_game_test_packet_ = const_cast< ::s_ans_game_test_packet*>(&::s_ans_game_test_packet::default_instance());
}

GLAnsGameProtocol::GLAnsGameProtocol(const GLAnsGameProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameProtocol::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_ans_game_test_packet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameProtocol::~GLAnsGameProtocol() {
  SharedDtor();
}

void GLAnsGameProtocol::SharedDtor() {
  if (this != default_instance_) {
    delete m_ans_game_test_packet_;
  }
}

void GLAnsGameProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameProtocol& GLAnsGameProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameProtocol* GLAnsGameProtocol::default_instance_ = NULL;

GLAnsGameProtocol* GLAnsGameProtocol::New() const {
  return new GLAnsGameProtocol;
}

void GLAnsGameProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_ans_game_test_packet()) {
      if (m_ans_game_test_packet_ != NULL) m_ans_game_test_packet_->::s_ans_game_test_packet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GLAnsGameProtocol.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameProtocol_Type_IsValid(value)) {
            set_type(static_cast< ::GLAnsGameProtocol_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ans_game_test_packet;
        break;
      }
      
      // optional .s_ans_game_test_packet m_ans_game_test_packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_game_test_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_game_test_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GLAnsGameProtocol.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_ans_game_test_packet m_ans_game_test_packet = 2;
  if (has_m_ans_game_test_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_ans_game_test_packet(), output);
  }
  
}

int GLAnsGameProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GLAnsGameProtocol.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_ans_game_test_packet m_ans_game_test_packet = 2;
    if (has_m_ans_game_test_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_game_test_packet());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameProtocol*>(&from));
}

void GLAnsGameProtocol::MergeFrom(const GLAnsGameProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_ans_game_test_packet()) {
      mutable_m_ans_game_test_packet()->::s_ans_game_test_packet::MergeFrom(from.m_ans_game_test_packet());
    }
  }
}

void GLAnsGameProtocol::CopyFrom(const GLAnsGameProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_m_ans_game_test_packet()) {
    if (!this->m_ans_game_test_packet().IsInitialized()) return false;
  }
  return true;
}

void GLAnsGameProtocol::Swap(GLAnsGameProtocol* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_ans_game_test_packet_, other->m_ans_game_test_packet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameProtocol::GetTypeName() const {
  return "GLAnsGameProtocol";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
