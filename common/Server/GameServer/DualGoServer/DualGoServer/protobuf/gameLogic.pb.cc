// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameLogic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_gameLogic_2eproto() {
  delete GameUserInfo::default_instance_;
  delete GameRoomInfo::default_instance_;
  delete GameInfo::default_instance_;
  delete MoneyInfo::default_instance_;
  delete GameUpdateInfo::default_instance_;
  delete SafeEventMoneyUpdate::default_instance_;
  delete RefillMoneyUpdate::default_instance_;
  delete MissionDBInfo::default_instance_;
  delete MemberInfo::default_instance_;
  delete GLAnsGameRelayInfo::default_instance_;
  delete GLReqGameInitGameTan::default_instance_;
  delete GLAnsGameStartReady::default_instance_;
  delete GLAnsGameResetReady::default_instance_;
  delete GLAnsGameStart::default_instance_;
  delete GLAnsGameReset::default_instance_;
  delete GLAnsGameNotiSun::default_instance_;
  delete GLReqGameSelectSun::default_instance_;
  delete GLAnsGameSelectSun::default_instance_;
  delete GLAnsGameNotiSelectSun::default_instance_;
  delete GLAnsGameSharing::default_instance_;
  delete GLAnsGameNagari::default_instance_;
  delete GLAnsGameChongTong::default_instance_;
  delete GLAnsGameSelectCard::default_instance_;
  delete GLAnsGameBonus::default_instance_;
  delete GLAnsGameTakePee::default_instance_;
  delete GLAnsGameBbuck::default_instance_;
  delete GLAnsGameSeriseBbuck::default_instance_;
  delete GLAnsGameBbuckEat::default_instance_;
  delete GLAnsGameBomb::default_instance_;
  delete GLAnsGamePan::default_instance_;
  delete GLAnsGameDadak::default_instance_;
  delete GLAnsGameJjok::default_instance_;
  delete GLAnsGameUpset::default_instance_;
  delete GLAnsGameAllEatUp::default_instance_;
  delete GLAnsGameNotiTurn::default_instance_;
  delete GLAnsGameMoveTen::default_instance_;
  delete GLAnsGameMoveTenAns::default_instance_;
  delete GLAnsGameChoiceCard::default_instance_;
  delete GLAnsGameShake::default_instance_;
  delete GLAnsGameShakeAns::default_instance_;
  delete GLAnsGameShakeCount::default_instance_;
  delete GLAnsGameCapType::default_instance_;
  delete GLAnsGameGodori::default_instance_;
  delete GLAnsGameKusa::default_instance_;
  delete GLAnsGameRed::default_instance_;
  delete GLAnsGameBlue::default_instance_;
  delete GLAnsGameBak::default_instance_;
  delete GLAnsGameBakFail::default_instance_;
  delete GLAnsGameNotiMission::default_instance_;
  delete GLAnsGameNotiMissionCard::default_instance_;
  delete GLAnsGameMissionState::default_instance_;
  delete GLAnsGameGostop::default_instance_;
  delete GLAnsGameGostopAns::default_instance_;
  delete GLAnsGameStopAns::default_instance_;
  delete GLAnsGameResult::default_instance_;
  delete GLAnsGameNotiPoint::default_instance_;
  delete GLAnsGameEnd::default_instance_;
  delete GLAnsGameKick::default_instance_;
  delete GLAnsGameEmoti::default_instance_;
  delete GLAnsGameInit::default_instance_;
  delete GLAnsGameAutoPlay::default_instance_;
  delete GLAnsExitReservation::default_instance_;
  delete GLReqGameReady::default_instance_;
  delete GLReqResetReady::default_instance_;
  delete GLReqGameInitGame::default_instance_;
  delete GLReqGameReset::default_instance_;
  delete GLReqGameStart::default_instance_;
  delete GLReqGameSelectSunCard::default_instance_;
  delete GLReqGameSelectCard::default_instance_;
  delete GLReqGameAskGoStopAns::default_instance_;
  delete GLReqGameAskShakeAns::default_instance_;
  delete GLReqGameChoiceCardAns::default_instance_;
  delete GLReqGameMoveTen::default_instance_;
  delete GLReqGameChongTong::default_instance_;
  delete GLReqGameEnd::default_instance_;
  delete GLReqResultOk::default_instance_;
  delete GLReqGameAutoPlay::default_instance_;
  delete GLReqGameEmoti::default_instance_;
  delete GLReqExitReservation::default_instance_;
  delete GLReqRelayInfo::default_instance_;
  delete G_REQ_GAME_TEST_PACKET::default_instance_;
  delete GLAnsGameProtocol::default_instance_;
  delete GLReqGameProtocol::default_instance_;
}

void protobuf_AddDesc_gameLogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  GameUserInfo::default_instance_ = new GameUserInfo();
  GameRoomInfo::default_instance_ = new GameRoomInfo();
  GameInfo::default_instance_ = new GameInfo();
  MoneyInfo::default_instance_ = new MoneyInfo();
  GameUpdateInfo::default_instance_ = new GameUpdateInfo();
  SafeEventMoneyUpdate::default_instance_ = new SafeEventMoneyUpdate();
  RefillMoneyUpdate::default_instance_ = new RefillMoneyUpdate();
  MissionDBInfo::default_instance_ = new MissionDBInfo();
  MemberInfo::default_instance_ = new MemberInfo();
  GLAnsGameRelayInfo::default_instance_ = new GLAnsGameRelayInfo();
  GLReqGameInitGameTan::default_instance_ = new GLReqGameInitGameTan();
  GLAnsGameStartReady::default_instance_ = new GLAnsGameStartReady();
  GLAnsGameResetReady::default_instance_ = new GLAnsGameResetReady();
  GLAnsGameStart::default_instance_ = new GLAnsGameStart();
  GLAnsGameReset::default_instance_ = new GLAnsGameReset();
  GLAnsGameNotiSun::default_instance_ = new GLAnsGameNotiSun();
  GLReqGameSelectSun::default_instance_ = new GLReqGameSelectSun();
  GLAnsGameSelectSun::default_instance_ = new GLAnsGameSelectSun();
  GLAnsGameNotiSelectSun::default_instance_ = new GLAnsGameNotiSelectSun();
  GLAnsGameSharing::default_instance_ = new GLAnsGameSharing();
  GLAnsGameNagari::default_instance_ = new GLAnsGameNagari();
  GLAnsGameChongTong::default_instance_ = new GLAnsGameChongTong();
  GLAnsGameSelectCard::default_instance_ = new GLAnsGameSelectCard();
  GLAnsGameBonus::default_instance_ = new GLAnsGameBonus();
  GLAnsGameTakePee::default_instance_ = new GLAnsGameTakePee();
  GLAnsGameBbuck::default_instance_ = new GLAnsGameBbuck();
  GLAnsGameSeriseBbuck::default_instance_ = new GLAnsGameSeriseBbuck();
  GLAnsGameBbuckEat::default_instance_ = new GLAnsGameBbuckEat();
  GLAnsGameBomb::default_instance_ = new GLAnsGameBomb();
  GLAnsGamePan::default_instance_ = new GLAnsGamePan();
  GLAnsGameDadak::default_instance_ = new GLAnsGameDadak();
  GLAnsGameJjok::default_instance_ = new GLAnsGameJjok();
  GLAnsGameUpset::default_instance_ = new GLAnsGameUpset();
  GLAnsGameAllEatUp::default_instance_ = new GLAnsGameAllEatUp();
  GLAnsGameNotiTurn::default_instance_ = new GLAnsGameNotiTurn();
  GLAnsGameMoveTen::default_instance_ = new GLAnsGameMoveTen();
  GLAnsGameMoveTenAns::default_instance_ = new GLAnsGameMoveTenAns();
  GLAnsGameChoiceCard::default_instance_ = new GLAnsGameChoiceCard();
  GLAnsGameShake::default_instance_ = new GLAnsGameShake();
  GLAnsGameShakeAns::default_instance_ = new GLAnsGameShakeAns();
  GLAnsGameShakeCount::default_instance_ = new GLAnsGameShakeCount();
  GLAnsGameCapType::default_instance_ = new GLAnsGameCapType();
  GLAnsGameGodori::default_instance_ = new GLAnsGameGodori();
  GLAnsGameKusa::default_instance_ = new GLAnsGameKusa();
  GLAnsGameRed::default_instance_ = new GLAnsGameRed();
  GLAnsGameBlue::default_instance_ = new GLAnsGameBlue();
  GLAnsGameBak::default_instance_ = new GLAnsGameBak();
  GLAnsGameBakFail::default_instance_ = new GLAnsGameBakFail();
  GLAnsGameNotiMission::default_instance_ = new GLAnsGameNotiMission();
  GLAnsGameNotiMissionCard::default_instance_ = new GLAnsGameNotiMissionCard();
  GLAnsGameMissionState::default_instance_ = new GLAnsGameMissionState();
  GLAnsGameGostop::default_instance_ = new GLAnsGameGostop();
  GLAnsGameGostopAns::default_instance_ = new GLAnsGameGostopAns();
  GLAnsGameStopAns::default_instance_ = new GLAnsGameStopAns();
  GLAnsGameResult::default_instance_ = new GLAnsGameResult();
  GLAnsGameNotiPoint::default_instance_ = new GLAnsGameNotiPoint();
  GLAnsGameEnd::default_instance_ = new GLAnsGameEnd();
  GLAnsGameKick::default_instance_ = new GLAnsGameKick();
  GLAnsGameEmoti::default_instance_ = new GLAnsGameEmoti();
  GLAnsGameInit::default_instance_ = new GLAnsGameInit();
  GLAnsGameAutoPlay::default_instance_ = new GLAnsGameAutoPlay();
  GLAnsExitReservation::default_instance_ = new GLAnsExitReservation();
  GLReqGameReady::default_instance_ = new GLReqGameReady();
  GLReqResetReady::default_instance_ = new GLReqResetReady();
  GLReqGameInitGame::default_instance_ = new GLReqGameInitGame();
  GLReqGameReset::default_instance_ = new GLReqGameReset();
  GLReqGameStart::default_instance_ = new GLReqGameStart();
  GLReqGameSelectSunCard::default_instance_ = new GLReqGameSelectSunCard();
  GLReqGameSelectCard::default_instance_ = new GLReqGameSelectCard();
  GLReqGameAskGoStopAns::default_instance_ = new GLReqGameAskGoStopAns();
  GLReqGameAskShakeAns::default_instance_ = new GLReqGameAskShakeAns();
  GLReqGameChoiceCardAns::default_instance_ = new GLReqGameChoiceCardAns();
  GLReqGameMoveTen::default_instance_ = new GLReqGameMoveTen();
  GLReqGameChongTong::default_instance_ = new GLReqGameChongTong();
  GLReqGameEnd::default_instance_ = new GLReqGameEnd();
  GLReqResultOk::default_instance_ = new GLReqResultOk();
  GLReqGameAutoPlay::default_instance_ = new GLReqGameAutoPlay();
  GLReqGameEmoti::default_instance_ = new GLReqGameEmoti();
  GLReqExitReservation::default_instance_ = new GLReqExitReservation();
  GLReqRelayInfo::default_instance_ = new GLReqRelayInfo();
  G_REQ_GAME_TEST_PACKET::default_instance_ = new G_REQ_GAME_TEST_PACKET();
  GLAnsGameProtocol::default_instance_ = new GLAnsGameProtocol();
  GLReqGameProtocol::default_instance_ = new GLReqGameProtocol();
  GameUserInfo::default_instance_->InitAsDefaultInstance();
  GameRoomInfo::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  MoneyInfo::default_instance_->InitAsDefaultInstance();
  GameUpdateInfo::default_instance_->InitAsDefaultInstance();
  SafeEventMoneyUpdate::default_instance_->InitAsDefaultInstance();
  RefillMoneyUpdate::default_instance_->InitAsDefaultInstance();
  MissionDBInfo::default_instance_->InitAsDefaultInstance();
  MemberInfo::default_instance_->InitAsDefaultInstance();
  GLAnsGameRelayInfo::default_instance_->InitAsDefaultInstance();
  GLReqGameInitGameTan::default_instance_->InitAsDefaultInstance();
  GLAnsGameStartReady::default_instance_->InitAsDefaultInstance();
  GLAnsGameResetReady::default_instance_->InitAsDefaultInstance();
  GLAnsGameStart::default_instance_->InitAsDefaultInstance();
  GLAnsGameReset::default_instance_->InitAsDefaultInstance();
  GLAnsGameNotiSun::default_instance_->InitAsDefaultInstance();
  GLReqGameSelectSun::default_instance_->InitAsDefaultInstance();
  GLAnsGameSelectSun::default_instance_->InitAsDefaultInstance();
  GLAnsGameNotiSelectSun::default_instance_->InitAsDefaultInstance();
  GLAnsGameSharing::default_instance_->InitAsDefaultInstance();
  GLAnsGameNagari::default_instance_->InitAsDefaultInstance();
  GLAnsGameChongTong::default_instance_->InitAsDefaultInstance();
  GLAnsGameSelectCard::default_instance_->InitAsDefaultInstance();
  GLAnsGameBonus::default_instance_->InitAsDefaultInstance();
  GLAnsGameTakePee::default_instance_->InitAsDefaultInstance();
  GLAnsGameBbuck::default_instance_->InitAsDefaultInstance();
  GLAnsGameSeriseBbuck::default_instance_->InitAsDefaultInstance();
  GLAnsGameBbuckEat::default_instance_->InitAsDefaultInstance();
  GLAnsGameBomb::default_instance_->InitAsDefaultInstance();
  GLAnsGamePan::default_instance_->InitAsDefaultInstance();
  GLAnsGameDadak::default_instance_->InitAsDefaultInstance();
  GLAnsGameJjok::default_instance_->InitAsDefaultInstance();
  GLAnsGameUpset::default_instance_->InitAsDefaultInstance();
  GLAnsGameAllEatUp::default_instance_->InitAsDefaultInstance();
  GLAnsGameNotiTurn::default_instance_->InitAsDefaultInstance();
  GLAnsGameMoveTen::default_instance_->InitAsDefaultInstance();
  GLAnsGameMoveTenAns::default_instance_->InitAsDefaultInstance();
  GLAnsGameChoiceCard::default_instance_->InitAsDefaultInstance();
  GLAnsGameShake::default_instance_->InitAsDefaultInstance();
  GLAnsGameShakeAns::default_instance_->InitAsDefaultInstance();
  GLAnsGameShakeCount::default_instance_->InitAsDefaultInstance();
  GLAnsGameCapType::default_instance_->InitAsDefaultInstance();
  GLAnsGameGodori::default_instance_->InitAsDefaultInstance();
  GLAnsGameKusa::default_instance_->InitAsDefaultInstance();
  GLAnsGameRed::default_instance_->InitAsDefaultInstance();
  GLAnsGameBlue::default_instance_->InitAsDefaultInstance();
  GLAnsGameBak::default_instance_->InitAsDefaultInstance();
  GLAnsGameBakFail::default_instance_->InitAsDefaultInstance();
  GLAnsGameNotiMission::default_instance_->InitAsDefaultInstance();
  GLAnsGameNotiMissionCard::default_instance_->InitAsDefaultInstance();
  GLAnsGameMissionState::default_instance_->InitAsDefaultInstance();
  GLAnsGameGostop::default_instance_->InitAsDefaultInstance();
  GLAnsGameGostopAns::default_instance_->InitAsDefaultInstance();
  GLAnsGameStopAns::default_instance_->InitAsDefaultInstance();
  GLAnsGameResult::default_instance_->InitAsDefaultInstance();
  GLAnsGameNotiPoint::default_instance_->InitAsDefaultInstance();
  GLAnsGameEnd::default_instance_->InitAsDefaultInstance();
  GLAnsGameKick::default_instance_->InitAsDefaultInstance();
  GLAnsGameEmoti::default_instance_->InitAsDefaultInstance();
  GLAnsGameInit::default_instance_->InitAsDefaultInstance();
  GLAnsGameAutoPlay::default_instance_->InitAsDefaultInstance();
  GLAnsExitReservation::default_instance_->InitAsDefaultInstance();
  GLReqGameReady::default_instance_->InitAsDefaultInstance();
  GLReqResetReady::default_instance_->InitAsDefaultInstance();
  GLReqGameInitGame::default_instance_->InitAsDefaultInstance();
  GLReqGameReset::default_instance_->InitAsDefaultInstance();
  GLReqGameStart::default_instance_->InitAsDefaultInstance();
  GLReqGameSelectSunCard::default_instance_->InitAsDefaultInstance();
  GLReqGameSelectCard::default_instance_->InitAsDefaultInstance();
  GLReqGameAskGoStopAns::default_instance_->InitAsDefaultInstance();
  GLReqGameAskShakeAns::default_instance_->InitAsDefaultInstance();
  GLReqGameChoiceCardAns::default_instance_->InitAsDefaultInstance();
  GLReqGameMoveTen::default_instance_->InitAsDefaultInstance();
  GLReqGameChongTong::default_instance_->InitAsDefaultInstance();
  GLReqGameEnd::default_instance_->InitAsDefaultInstance();
  GLReqResultOk::default_instance_->InitAsDefaultInstance();
  GLReqGameAutoPlay::default_instance_->InitAsDefaultInstance();
  GLReqGameEmoti::default_instance_->InitAsDefaultInstance();
  GLReqExitReservation::default_instance_->InitAsDefaultInstance();
  GLReqRelayInfo::default_instance_->InitAsDefaultInstance();
  G_REQ_GAME_TEST_PACKET::default_instance_->InitAsDefaultInstance();
  GLAnsGameProtocol::default_instance_->InitAsDefaultInstance();
  GLReqGameProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameLogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameLogic_2eproto {
  StaticDescriptorInitializer_gameLogic_2eproto() {
    protobuf_AddDesc_gameLogic_2eproto();
  }
} static_descriptor_initializer_gameLogic_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GameUserInfo::kGameInfoFieldNumber;
const int GameUserInfo::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

GameUserInfo::GameUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameUserInfo::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::GameInfo*>(&::GameInfo::default_instance());
  memberinfo_ = const_cast< ::MemberInfo*>(&::MemberInfo::default_instance());
}

GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameUserInfo::SharedCtor() {
  _cached_size_ = 0;
  gameinfo_ = NULL;
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUserInfo::~GameUserInfo() {
  SharedDtor();
}

void GameUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
    delete memberinfo_;
  }
}

void GameUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameUserInfo& GameUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameUserInfo* GameUserInfo::default_instance_ = NULL;

GameUserInfo* GameUserInfo::New() const {
  return new GameUserInfo;
}

void GameUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::GameInfo::Clear();
    }
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::MemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameInfo gameInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberInfo;
        break;
      }
      
      // required .MemberInfo memberInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameInfo gameInfo = 1;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->gameinfo(), output);
  }
  
  // required .MemberInfo memberInfo = 2;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->memberinfo(), output);
  }
  
}

int GameUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameInfo gameInfo = 1;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }
    
    // required .MemberInfo memberInfo = 2;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameUserInfo*>(&from));
}

void GameUserInfo::MergeFrom(const GameUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::GameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::MemberInfo::MergeFrom(from.memberinfo());
    }
  }
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  if (has_memberinfo()) {
    if (!this->memberinfo().IsInitialized()) return false;
  }
  return true;
}

void GameUserInfo::Swap(GameUserInfo* other) {
  if (other != this) {
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameUserInfo::GetTypeName() const {
  return "GameUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomInfo::kRoomIDFieldNumber;
const int GameRoomInfo::kPointMoneyFieldNumber;
const int GameRoomInfo::kGameUserInfoFieldNumber;
#endif  // !_MSC_VER

GameRoomInfo::GameRoomInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameRoomInfo::InitAsDefaultInstance() {
}

GameRoomInfo::GameRoomInfo(const GameRoomInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  pointmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomInfo::~GameRoomInfo() {
  SharedDtor();
}

void GameRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameRoomInfo& GameRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameRoomInfo* GameRoomInfo::default_instance_ = NULL;

GameRoomInfo* GameRoomInfo::New() const {
  return new GameRoomInfo;
}

void GameRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    pointmoney_ = 0;
  }
  gameuserinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointMoney;
        break;
      }
      
      // required int32 pointMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointmoney_)));
          set_has_pointmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameUserInfo;
        break;
      }
      
      // repeated .GameUserInfo gameUserInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameUserInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }
  
  // required int32 pointMoney = 2;
  if (has_pointmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pointmoney(), output);
  }
  
  // repeated .GameUserInfo gameUserInfo = 3;
  for (int i = 0; i < this->gameuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gameuserinfo(i), output);
  }
  
}

int GameRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // required int32 pointMoney = 2;
    if (has_pointmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointmoney());
    }
    
  }
  // repeated .GameUserInfo gameUserInfo = 3;
  total_size += 1 * this->gameuserinfo_size();
  for (int i = 0; i < this->gameuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameuserinfo(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameRoomInfo*>(&from));
}

void GameRoomInfo::MergeFrom(const GameRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameuserinfo_.MergeFrom(from.gameuserinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pointmoney()) {
      set_pointmoney(from.pointmoney());
    }
  }
}

void GameRoomInfo::CopyFrom(const GameRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < gameuserinfo_size(); i++) {
    if (!this->gameuserinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GameRoomInfo::Swap(GameRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(pointmoney_, other->pointmoney_);
    gameuserinfo_.Swap(&other->gameuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameRoomInfo::GetTypeName() const {
  return "GameRoomInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kGameIDFieldNumber;
const int GameInfo::kGameIndexFieldNumber;
const int GameInfo::kLevelFieldNumber;
const int GameInfo::kExpFieldNumber;
const int GameInfo::kMoneyFieldNumber;
const int GameInfo::kWinCntFieldNumber;
const int GameInfo::kLoseCntFieldNumber;
const int GameInfo::kAllInCntFieldNumber;
const int GameInfo::kHighMoneyFieldNumber;
const int GameInfo::kHighPointFieldNumber;
const int GameInfo::kTodayWinFieldNumber;
const int GameInfo::kTodayLoseFieldNumber;
const int GameInfo::kTodayHighPointFieldNumber;
const int GameInfo::kTodayHighMoneyFieldNumber;
const int GameInfo::kTodayAllinCntFieldNumber;
const int GameInfo::kTodayRefillFieldNumber;
const int GameInfo::kSafeMoneyFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  level_ = 0;
  exp_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wincnt_ = 0;
  losecnt_ = 0;
  allincnt_ = 0;
  highmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  highpoint_ = 0;
  todaywin_ = 0;
  todaylose_ = 0;
  todayhighpoint_ = 0;
  todayhighmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  todayallincnt_ = 0;
  todayrefill_ = 0;
  safemoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (highmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete highmoney_;
  }
  if (todayhighmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete todayhighmoney_;
  }
  if (safemoney_ != &::google::protobuf::internal::kEmptyString) {
    delete safemoney_;
  }
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    level_ = 0;
    exp_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    wincnt_ = 0;
    losecnt_ = 0;
    allincnt_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_highmoney()) {
      if (highmoney_ != &::google::protobuf::internal::kEmptyString) {
        highmoney_->clear();
      }
    }
    highpoint_ = 0;
    todaywin_ = 0;
    todaylose_ = 0;
    todayhighpoint_ = 0;
    if (has_todayhighmoney()) {
      if (todayhighmoney_ != &::google::protobuf::internal::kEmptyString) {
        todayhighmoney_->clear();
      }
    }
    todayallincnt_ = 0;
    todayrefill_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_safemoney()) {
      if (safemoney_ != &::google::protobuf::internal::kEmptyString) {
        safemoney_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // required int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_money;
        break;
      }
      
      // required string money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winCnt;
        break;
      }
      
      // required int32 winCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincnt_)));
          set_has_wincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loseCnt;
        break;
      }
      
      // required int32 loseCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losecnt_)));
          set_has_losecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allInCnt;
        break;
      }
      
      // required int32 allInCnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allInCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allincnt_)));
          set_has_allincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_highMoney;
        break;
      }
      
      // required string highMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_highMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_highmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_highPoint;
        break;
      }
      
      // required int32 highPoint = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highpoint_)));
          set_has_highpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_todayWin;
        break;
      }
      
      // required int32 todayWin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaywin_)));
          set_has_todaywin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_todayLose;
        break;
      }
      
      // required int32 todayLose = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaylose_)));
          set_has_todaylose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_todayHighPoint;
        break;
      }
      
      // required int32 todayHighPoint = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayHighPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayhighpoint_)));
          set_has_todayhighpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_todayHighMoney;
        break;
      }
      
      // required string todayHighMoney = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_todayHighMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todayhighmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_todayAllinCnt;
        break;
      }
      
      // required int32 todayAllinCnt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayAllinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayallincnt_)));
          set_has_todayallincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_todayRefill;
        break;
      }
      
      // required int32 todayRefill = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayRefill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayrefill_)));
          set_has_todayrefill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_safeMoney;
        break;
      }
      
      // required string safeMoney = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safeMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safemoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // required int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  // required string money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->money(), output);
  }
  
  // required int32 winCnt = 6;
  if (has_wincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wincnt(), output);
  }
  
  // required int32 loseCnt = 7;
  if (has_losecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->losecnt(), output);
  }
  
  // required int32 allInCnt = 8;
  if (has_allincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->allincnt(), output);
  }
  
  // required string highMoney = 9;
  if (has_highmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->highmoney(), output);
  }
  
  // required int32 highPoint = 10;
  if (has_highpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->highpoint(), output);
  }
  
  // required int32 todayWin = 11;
  if (has_todaywin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->todaywin(), output);
  }
  
  // required int32 todayLose = 12;
  if (has_todaylose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->todaylose(), output);
  }
  
  // required int32 todayHighPoint = 13;
  if (has_todayhighpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->todayhighpoint(), output);
  }
  
  // required string todayHighMoney = 14;
  if (has_todayhighmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->todayhighmoney(), output);
  }
  
  // required int32 todayAllinCnt = 15;
  if (has_todayallincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->todayallincnt(), output);
  }
  
  // required int32 todayRefill = 16;
  if (has_todayrefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->todayrefill(), output);
  }
  
  // required string safeMoney = 17;
  if (has_safemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->safemoney(), output);
  }
  
}

int GameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // required string money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
    // required int32 winCnt = 6;
    if (has_wincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincnt());
    }
    
    // required int32 loseCnt = 7;
    if (has_losecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losecnt());
    }
    
    // required int32 allInCnt = 8;
    if (has_allincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allincnt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string highMoney = 9;
    if (has_highmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->highmoney());
    }
    
    // required int32 highPoint = 10;
    if (has_highpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highpoint());
    }
    
    // required int32 todayWin = 11;
    if (has_todaywin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todaywin());
    }
    
    // required int32 todayLose = 12;
    if (has_todaylose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todaylose());
    }
    
    // required int32 todayHighPoint = 13;
    if (has_todayhighpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayhighpoint());
    }
    
    // required string todayHighMoney = 14;
    if (has_todayhighmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todayhighmoney());
    }
    
    // required int32 todayAllinCnt = 15;
    if (has_todayallincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayallincnt());
    }
    
    // required int32 todayRefill = 16;
    if (has_todayrefill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayrefill());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string safeMoney = 17;
    if (has_safemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safemoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameInfo*>(&from));
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_wincnt()) {
      set_wincnt(from.wincnt());
    }
    if (from.has_losecnt()) {
      set_losecnt(from.losecnt());
    }
    if (from.has_allincnt()) {
      set_allincnt(from.allincnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_highmoney()) {
      set_highmoney(from.highmoney());
    }
    if (from.has_highpoint()) {
      set_highpoint(from.highpoint());
    }
    if (from.has_todaywin()) {
      set_todaywin(from.todaywin());
    }
    if (from.has_todaylose()) {
      set_todaylose(from.todaylose());
    }
    if (from.has_todayhighpoint()) {
      set_todayhighpoint(from.todayhighpoint());
    }
    if (from.has_todayhighmoney()) {
      set_todayhighmoney(from.todayhighmoney());
    }
    if (from.has_todayallincnt()) {
      set_todayallincnt(from.todayallincnt());
    }
    if (from.has_todayrefill()) {
      set_todayrefill(from.todayrefill());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_safemoney()) {
      set_safemoney(from.safemoney());
    }
  }
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;
  
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(money_, other->money_);
    std::swap(wincnt_, other->wincnt_);
    std::swap(losecnt_, other->losecnt_);
    std::swap(allincnt_, other->allincnt_);
    std::swap(highmoney_, other->highmoney_);
    std::swap(highpoint_, other->highpoint_);
    std::swap(todaywin_, other->todaywin_);
    std::swap(todaylose_, other->todaylose_);
    std::swap(todayhighpoint_, other->todayhighpoint_);
    std::swap(todayhighmoney_, other->todayhighmoney_);
    std::swap(todayallincnt_, other->todayallincnt_);
    std::swap(todayrefill_, other->todayrefill_);
    std::swap(safemoney_, other->safemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameInfo::GetTypeName() const {
  return "GameInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyInfo::kGameIDFieldNumber;
const int MoneyInfo::kMoneyFieldNumber;
#endif  // !_MSC_VER

MoneyInfo::MoneyInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MoneyInfo::InitAsDefaultInstance() {
}

MoneyInfo::MoneyInfo(const MoneyInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyInfo::~MoneyInfo() {
  SharedDtor();
}

void MoneyInfo::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (this != default_instance_) {
  }
}

void MoneyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MoneyInfo& MoneyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

MoneyInfo* MoneyInfo::default_instance_ = NULL;

MoneyInfo* MoneyInfo::New() const {
  return new MoneyInfo;
}

void MoneyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MoneyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_money;
        break;
      }
      
      // required string money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required string money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->money(), output);
  }
  
}

int MoneyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MoneyInfo*>(&from));
}

void MoneyInfo::MergeFrom(const MoneyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
}

void MoneyInfo::CopyFrom(const MoneyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MoneyInfo::Swap(MoneyInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MoneyInfo::GetTypeName() const {
  return "MoneyInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GameUpdateInfo::kGameInfoFieldNumber;
const int GameUpdateInfo::kMoneyInfoFieldNumber;
#endif  // !_MSC_VER

GameUpdateInfo::GameUpdateInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameUpdateInfo::InitAsDefaultInstance() {
}

GameUpdateInfo::GameUpdateInfo(const GameUpdateInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUpdateInfo::~GameUpdateInfo() {
  SharedDtor();
}

void GameUpdateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameUpdateInfo& GameUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameUpdateInfo* GameUpdateInfo::default_instance_ = NULL;

GameUpdateInfo* GameUpdateInfo::New() const {
  return new GameUpdateInfo;
}

void GameUpdateInfo::Clear() {
  gameinfo_.Clear();
  moneyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameInfo gameInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gameInfo;
        if (input->ExpectTag(18)) goto parse_moneyInfo;
        break;
      }
      
      // repeated .MoneyInfo moneyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_moneyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GameInfo gameInfo = 1;
  for (int i = 0; i < this->gameinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->gameinfo(i), output);
  }
  
  // repeated .MoneyInfo moneyInfo = 2;
  for (int i = 0; i < this->moneyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->moneyinfo(i), output);
  }
  
}

int GameUpdateInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .GameInfo gameInfo = 1;
  total_size += 1 * this->gameinfo_size();
  for (int i = 0; i < this->gameinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameinfo(i));
  }
  
  // repeated .MoneyInfo moneyInfo = 2;
  total_size += 1 * this->moneyinfo_size();
  for (int i = 0; i < this->moneyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneyinfo(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUpdateInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameUpdateInfo*>(&from));
}

void GameUpdateInfo::MergeFrom(const GameUpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameinfo_.MergeFrom(from.gameinfo_);
  moneyinfo_.MergeFrom(from.moneyinfo_);
}

void GameUpdateInfo::CopyFrom(const GameUpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUpdateInfo::IsInitialized() const {
  
  for (int i = 0; i < gameinfo_size(); i++) {
    if (!this->gameinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < moneyinfo_size(); i++) {
    if (!this->moneyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GameUpdateInfo::Swap(GameUpdateInfo* other) {
  if (other != this) {
    gameinfo_.Swap(&other->gameinfo_);
    moneyinfo_.Swap(&other->moneyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameUpdateInfo::GetTypeName() const {
  return "GameUpdateInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SafeEventMoneyUpdate::kTotalMoneyFieldNumber;
const int SafeEventMoneyUpdate::kDeltaMoneyFieldNumber;
const int SafeEventMoneyUpdate::kDealMoneyFieldNumber;
#endif  // !_MSC_VER

SafeEventMoneyUpdate::SafeEventMoneyUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SafeEventMoneyUpdate::InitAsDefaultInstance() {
}

SafeEventMoneyUpdate::SafeEventMoneyUpdate(const SafeEventMoneyUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SafeEventMoneyUpdate::SharedCtor() {
  _cached_size_ = 0;
  totalmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deltamoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dealmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SafeEventMoneyUpdate::~SafeEventMoneyUpdate() {
  SharedDtor();
}

void SafeEventMoneyUpdate::SharedDtor() {
  if (totalmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete totalmoney_;
  }
  if (deltamoney_ != &::google::protobuf::internal::kEmptyString) {
    delete deltamoney_;
  }
  if (dealmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete dealmoney_;
  }
  if (this != default_instance_) {
  }
}

void SafeEventMoneyUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SafeEventMoneyUpdate& SafeEventMoneyUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

SafeEventMoneyUpdate* SafeEventMoneyUpdate::default_instance_ = NULL;

SafeEventMoneyUpdate* SafeEventMoneyUpdate::New() const {
  return new SafeEventMoneyUpdate;
}

void SafeEventMoneyUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_totalmoney()) {
      if (totalmoney_ != &::google::protobuf::internal::kEmptyString) {
        totalmoney_->clear();
      }
    }
    if (has_deltamoney()) {
      if (deltamoney_ != &::google::protobuf::internal::kEmptyString) {
        deltamoney_->clear();
      }
    }
    if (has_dealmoney()) {
      if (dealmoney_ != &::google::protobuf::internal::kEmptyString) {
        dealmoney_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SafeEventMoneyUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string totalMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deltaMoney;
        break;
      }
      
      // required string deltaMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deltaMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deltamoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dealMoney;
        break;
      }
      
      // required string dealMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SafeEventMoneyUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string totalMoney = 1;
  if (has_totalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->totalmoney(), output);
  }
  
  // required string deltaMoney = 2;
  if (has_deltamoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deltamoney(), output);
  }
  
  // required string dealMoney = 3;
  if (has_dealmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dealmoney(), output);
  }
  
}

int SafeEventMoneyUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string totalMoney = 1;
    if (has_totalmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalmoney());
    }
    
    // required string deltaMoney = 2;
    if (has_deltamoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deltamoney());
    }
    
    // required string dealMoney = 3;
    if (has_dealmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeEventMoneyUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SafeEventMoneyUpdate*>(&from));
}

void SafeEventMoneyUpdate::MergeFrom(const SafeEventMoneyUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalmoney()) {
      set_totalmoney(from.totalmoney());
    }
    if (from.has_deltamoney()) {
      set_deltamoney(from.deltamoney());
    }
    if (from.has_dealmoney()) {
      set_dealmoney(from.dealmoney());
    }
  }
}

void SafeEventMoneyUpdate::CopyFrom(const SafeEventMoneyUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeEventMoneyUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SafeEventMoneyUpdate::Swap(SafeEventMoneyUpdate* other) {
  if (other != this) {
    std::swap(totalmoney_, other->totalmoney_);
    std::swap(deltamoney_, other->deltamoney_);
    std::swap(dealmoney_, other->dealmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SafeEventMoneyUpdate::GetTypeName() const {
  return "SafeEventMoneyUpdate";
}


// ===================================================================

#ifndef _MSC_VER
const int RefillMoneyUpdate::kTotalMoneyFieldNumber;
const int RefillMoneyUpdate::kRefillMoneyFieldNumber;
const int RefillMoneyUpdate::kBonusMoneyFieldNumber;
const int RefillMoneyUpdate::kRefillCountFieldNumber;
const int RefillMoneyUpdate::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

RefillMoneyUpdate::RefillMoneyUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RefillMoneyUpdate::InitAsDefaultInstance() {
}

RefillMoneyUpdate::RefillMoneyUpdate(const RefillMoneyUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RefillMoneyUpdate::SharedCtor() {
  _cached_size_ = 0;
  totalmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refillmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bonusmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refillcount_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefillMoneyUpdate::~RefillMoneyUpdate() {
  SharedDtor();
}

void RefillMoneyUpdate::SharedDtor() {
  if (totalmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete totalmoney_;
  }
  if (refillmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete refillmoney_;
  }
  if (bonusmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete bonusmoney_;
  }
  if (this != default_instance_) {
  }
}

void RefillMoneyUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RefillMoneyUpdate& RefillMoneyUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

RefillMoneyUpdate* RefillMoneyUpdate::default_instance_ = NULL;

RefillMoneyUpdate* RefillMoneyUpdate::New() const {
  return new RefillMoneyUpdate;
}

void RefillMoneyUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_totalmoney()) {
      if (totalmoney_ != &::google::protobuf::internal::kEmptyString) {
        totalmoney_->clear();
      }
    }
    if (has_refillmoney()) {
      if (refillmoney_ != &::google::protobuf::internal::kEmptyString) {
        refillmoney_->clear();
      }
    }
    if (has_bonusmoney()) {
      if (bonusmoney_ != &::google::protobuf::internal::kEmptyString) {
        bonusmoney_->clear();
      }
    }
    refillcount_ = 0;
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RefillMoneyUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string totalMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_refillMoney;
        break;
      }
      
      // required string refillMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refillMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refillmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bonusMoney;
        break;
      }
      
      // required string bonusMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonusMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bonusmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refillCount;
        break;
      }
      
      // required int32 refillCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refillCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refillcount_)));
          set_has_refillcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_errorCode;
        break;
      }
      
      // required int32 errorCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefillMoneyUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string totalMoney = 1;
  if (has_totalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->totalmoney(), output);
  }
  
  // required string refillMoney = 2;
  if (has_refillmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->refillmoney(), output);
  }
  
  // required string bonusMoney = 3;
  if (has_bonusmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bonusmoney(), output);
  }
  
  // required int32 refillCount = 4;
  if (has_refillcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refillcount(), output);
  }
  
  // required int32 errorCode = 5;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->errorcode(), output);
  }
  
}

int RefillMoneyUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string totalMoney = 1;
    if (has_totalmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalmoney());
    }
    
    // required string refillMoney = 2;
    if (has_refillmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refillmoney());
    }
    
    // required string bonusMoney = 3;
    if (has_bonusmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bonusmoney());
    }
    
    // required int32 refillCount = 4;
    if (has_refillcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refillcount());
    }
    
    // required int32 errorCode = 5;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefillMoneyUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RefillMoneyUpdate*>(&from));
}

void RefillMoneyUpdate::MergeFrom(const RefillMoneyUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalmoney()) {
      set_totalmoney(from.totalmoney());
    }
    if (from.has_refillmoney()) {
      set_refillmoney(from.refillmoney());
    }
    if (from.has_bonusmoney()) {
      set_bonusmoney(from.bonusmoney());
    }
    if (from.has_refillcount()) {
      set_refillcount(from.refillcount());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
}

void RefillMoneyUpdate::CopyFrom(const RefillMoneyUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefillMoneyUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void RefillMoneyUpdate::Swap(RefillMoneyUpdate* other) {
  if (other != this) {
    std::swap(totalmoney_, other->totalmoney_);
    std::swap(refillmoney_, other->refillmoney_);
    std::swap(bonusmoney_, other->bonusmoney_);
    std::swap(refillcount_, other->refillcount_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RefillMoneyUpdate::GetTypeName() const {
  return "RefillMoneyUpdate";
}


// ===================================================================

bool MissionDBInfo_EVENT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionDBInfo_EVENT_TYPE MissionDBInfo::EVENT_MISSION;
const MissionDBInfo_EVENT_TYPE MissionDBInfo::EVENT_SERISEBBUCK;
const MissionDBInfo_EVENT_TYPE MissionDBInfo::EVENT_TYPE_MIN;
const MissionDBInfo_EVENT_TYPE MissionDBInfo::EVENT_TYPE_MAX;
const int MissionDBInfo::EVENT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionDBInfo::kGameIDFieldNumber;
const int MissionDBInfo::kTotalMoneyFieldNumber;
const int MissionDBInfo::kNTypeFieldNumber;
#endif  // !_MSC_VER

MissionDBInfo::MissionDBInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MissionDBInfo::InitAsDefaultInstance() {
}

MissionDBInfo::MissionDBInfo(const MissionDBInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MissionDBInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  totalmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionDBInfo::~MissionDBInfo() {
  SharedDtor();
}

void MissionDBInfo::SharedDtor() {
  if (totalmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete totalmoney_;
  }
  if (this != default_instance_) {
  }
}

void MissionDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MissionDBInfo& MissionDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

MissionDBInfo* MissionDBInfo::default_instance_ = NULL;

MissionDBInfo* MissionDBInfo::New() const {
  return new MissionDBInfo;
}

void MissionDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_totalmoney()) {
      if (totalmoney_ != &::google::protobuf::internal::kEmptyString) {
        totalmoney_->clear();
      }
    }
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MissionDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_totalMoney;
        break;
      }
      
      // required string totalMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totalMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .MissionDBInfo.EVENT_TYPE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MissionDBInfo_EVENT_TYPE_IsValid(value)) {
            set_ntype(static_cast< ::MissionDBInfo_EVENT_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required string totalMoney = 2;
  if (has_totalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->totalmoney(), output);
  }
  
  // required .MissionDBInfo.EVENT_TYPE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int MissionDBInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string totalMoney = 2;
    if (has_totalmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalmoney());
    }
    
    // required .MissionDBInfo.EVENT_TYPE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionDBInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MissionDBInfo*>(&from));
}

void MissionDBInfo::MergeFrom(const MissionDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_totalmoney()) {
      set_totalmoney(from.totalmoney());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void MissionDBInfo::CopyFrom(const MissionDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MissionDBInfo::Swap(MissionDBInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(totalmoney_, other->totalmoney_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MissionDBInfo::GetTypeName() const {
  return "MissionDBInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MemberInfo::kGameIDFieldNumber;
const int MemberInfo::kAvatarUrlFieldNumber;
const int MemberInfo::kNickNameFieldNumber;
const int MemberInfo::kSexOptionFieldNumber;
#endif  // !_MSC_VER

MemberInfo::MemberInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MemberInfo::InitAsDefaultInstance() {
}

MemberInfo::MemberInfo(const MemberInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  avatarurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sexoption_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberInfo::~MemberInfo() {
  SharedDtor();
}

void MemberInfo::SharedDtor() {
  if (avatarurl_ != &::google::protobuf::internal::kEmptyString) {
    delete avatarurl_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemberInfo& MemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

MemberInfo* MemberInfo::default_instance_ = NULL;

MemberInfo* MemberInfo::New() const {
  return new MemberInfo;
}

void MemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_avatarurl()) {
      if (avatarurl_ != &::google::protobuf::internal::kEmptyString) {
        avatarurl_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    sexoption_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatarUrl;
        break;
      }
      
      // required string avatarUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatarurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }
      
      // required string nickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sexOption;
        break;
      }
      
      // required bool sexOption = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sexOption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sexoption_)));
          set_has_sexoption();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required string avatarUrl = 2;
  if (has_avatarurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->avatarurl(), output);
  }
  
  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }
  
  // required bool sexOption = 4;
  if (has_sexoption()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sexoption(), output);
  }
  
}

int MemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string avatarUrl = 2;
    if (has_avatarurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatarurl());
    }
    
    // required string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // required bool sexOption = 4;
    if (has_sexoption()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemberInfo*>(&from));
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_avatarurl()) {
      set_avatarurl(from.avatarurl());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_sexoption()) {
      set_sexoption(from.sexoption());
    }
  }
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MemberInfo::Swap(MemberInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(avatarurl_, other->avatarurl_);
    std::swap(nickname_, other->nickname_);
    std::swap(sexoption_, other->sexoption_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MemberInfo::GetTypeName() const {
  return "MemberInfo";
}


// ===================================================================

bool GLAnsGameRelayInfo_JOKBO_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameRelayInfo_JOKBO_STATE GLAnsGameRelayInfo::JOKBO_WARNNING;
const GLAnsGameRelayInfo_JOKBO_STATE GLAnsGameRelayInfo::JOKBO_COMPLETE;
const GLAnsGameRelayInfo_JOKBO_STATE GLAnsGameRelayInfo::JOKBO_FAIL;
const GLAnsGameRelayInfo_JOKBO_STATE GLAnsGameRelayInfo::JOKBO_ZERO;
const GLAnsGameRelayInfo_JOKBO_STATE GLAnsGameRelayInfo::JOKBO_STATE_MIN;
const GLAnsGameRelayInfo_JOKBO_STATE GLAnsGameRelayInfo::JOKBO_STATE_MAX;
const int GLAnsGameRelayInfo::JOKBO_STATE_ARRAYSIZE;
#endif  // _MSC_VER
bool GLAnsGameRelayInfo_MISSION_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameRelayInfo_MISSION_TYPE GLAnsGameRelayInfo::CARD;
const GLAnsGameRelayInfo_MISSION_TYPE GLAnsGameRelayInfo::NONE;
const GLAnsGameRelayInfo_MISSION_TYPE GLAnsGameRelayInfo::UNCONDITION;
const GLAnsGameRelayInfo_MISSION_TYPE GLAnsGameRelayInfo::TWOBBUCK;
const GLAnsGameRelayInfo_MISSION_TYPE GLAnsGameRelayInfo::MISSION_ZERO;
const GLAnsGameRelayInfo_MISSION_TYPE GLAnsGameRelayInfo::MISSION_TYPE_MIN;
const GLAnsGameRelayInfo_MISSION_TYPE GLAnsGameRelayInfo::MISSION_TYPE_MAX;
const int GLAnsGameRelayInfo::MISSION_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
bool GLAnsGameRelayInfo_MISSION_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameRelayInfo_MISSION_STATE GLAnsGameRelayInfo::FAIL;
const GLAnsGameRelayInfo_MISSION_STATE GLAnsGameRelayInfo::SUCCESS;
const GLAnsGameRelayInfo_MISSION_STATE GLAnsGameRelayInfo::STATE_ZERO;
const GLAnsGameRelayInfo_MISSION_STATE GLAnsGameRelayInfo::MISSION_STATE_MIN;
const GLAnsGameRelayInfo_MISSION_STATE GLAnsGameRelayInfo::MISSION_STATE_MAX;
const int GLAnsGameRelayInfo::MISSION_STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameRelayInfo::kGameIDFieldNumber;
const int GLAnsGameRelayInfo::kGameIndexFieldNumber;
const int GLAnsGameRelayInfo::kGameInfoFieldNumber;
const int GLAnsGameRelayInfo::kYouGameInfoFieldNumber;
const int GLAnsGameRelayInfo::kMyHoldCardFieldNumber;
const int GLAnsGameRelayInfo::kMyHaveCardFieldNumber;
const int GLAnsGameRelayInfo::kOpenCardFieldNumber;
const int GLAnsGameRelayInfo::kYouHoldCountFieldNumber;
const int GLAnsGameRelayInfo::kYouHaveCardFieldNumber;
const int GLAnsGameRelayInfo::kMyGodoriTypeFieldNumber;
const int GLAnsGameRelayInfo::kMyRedTypeFieldNumber;
const int GLAnsGameRelayInfo::kMyBlueTypeFieldNumber;
const int GLAnsGameRelayInfo::kMyKusaTypeFieldNumber;
const int GLAnsGameRelayInfo::kYouGodoriTypeFieldNumber;
const int GLAnsGameRelayInfo::kYouRedTypeFieldNumber;
const int GLAnsGameRelayInfo::kYouBlueTypeFieldNumber;
const int GLAnsGameRelayInfo::kYouKusaTypeFieldNumber;
const int GLAnsGameRelayInfo::kMyPointFieldNumber;
const int GLAnsGameRelayInfo::kMyGoPointFieldNumber;
const int GLAnsGameRelayInfo::kMyShakeCountFieldNumber;
const int GLAnsGameRelayInfo::kMyBuckCountFieldNumber;
const int GLAnsGameRelayInfo::kYouPointFieldNumber;
const int GLAnsGameRelayInfo::kYouGoPointFieldNumber;
const int GLAnsGameRelayInfo::kYouShakeCountFieldNumber;
const int GLAnsGameRelayInfo::kYouBuckCountFieldNumber;
const int GLAnsGameRelayInfo::kGameSunFieldNumber;
const int GLAnsGameRelayInfo::kCurrenTurnFieldNumber;
const int GLAnsGameRelayInfo::kTurnCountFieldNumber;
const int GLAnsGameRelayInfo::kMissionMulNumFieldNumber;
const int GLAnsGameRelayInfo::kMissionCardFieldNumber;
const int GLAnsGameRelayInfo::kMissionTitleFieldNumber;
const int GLAnsGameRelayInfo::kMissionTypeFieldNumber;
const int GLAnsGameRelayInfo::kMissionUserIDFieldNumber;
const int GLAnsGameRelayInfo::kMissionStateTypeFieldNumber;
const int GLAnsGameRelayInfo::kMissionGetCardFieldNumber;
const int GLAnsGameRelayInfo::kYouMissionGetCardFieldNumber;
const int GLAnsGameRelayInfo::kNineMovedFieldNumber;
#endif  // !_MSC_VER

GLAnsGameRelayInfo::GLAnsGameRelayInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameRelayInfo::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::GameUserInfo*>(&::GameUserInfo::default_instance());
  yougameinfo_ = const_cast< ::GameUserInfo*>(&::GameUserInfo::default_instance());
}

GLAnsGameRelayInfo::GLAnsGameRelayInfo(const GLAnsGameRelayInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameRelayInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  gameinfo_ = NULL;
  yougameinfo_ = NULL;
  youholdcount_ = 0;
  mygodoritype_ = 1;
  myredtype_ = 1;
  mybluetype_ = 1;
  mykusatype_ = 1;
  yougodoritype_ = 1;
  youredtype_ = 1;
  youbluetype_ = 1;
  youkusatype_ = 1;
  mypoint_ = 0;
  mygopoint_ = 0;
  myshakecount_ = 0;
  mybuckcount_ = 0;
  youpoint_ = 0;
  yougopoint_ = 0;
  youshakecount_ = 0;
  youbuckcount_ = 0;
  gamesun_ = 0;
  currenturn_ = 0;
  turncount_ = 0;
  missionmulnum_ = 0;
  missiontitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  missiontype_ = 1;
  missionuserid_ = 0;
  missionstatetype_ = 1;
  ninemoved_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameRelayInfo::~GLAnsGameRelayInfo() {
  SharedDtor();
}

void GLAnsGameRelayInfo::SharedDtor() {
  if (missiontitle_ != &::google::protobuf::internal::kEmptyString) {
    delete missiontitle_;
  }
  if (this != default_instance_) {
    delete gameinfo_;
    delete yougameinfo_;
  }
}

void GLAnsGameRelayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameRelayInfo& GLAnsGameRelayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameRelayInfo* GLAnsGameRelayInfo::default_instance_ = NULL;

GLAnsGameRelayInfo* GLAnsGameRelayInfo::New() const {
  return new GLAnsGameRelayInfo;
}

void GLAnsGameRelayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::GameUserInfo::Clear();
    }
    if (has_yougameinfo()) {
      if (yougameinfo_ != NULL) yougameinfo_->::GameUserInfo::Clear();
    }
    youholdcount_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    mygodoritype_ = 1;
    myredtype_ = 1;
    mybluetype_ = 1;
    mykusatype_ = 1;
    yougodoritype_ = 1;
    youredtype_ = 1;
    youbluetype_ = 1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    youkusatype_ = 1;
    mypoint_ = 0;
    mygopoint_ = 0;
    myshakecount_ = 0;
    mybuckcount_ = 0;
    youpoint_ = 0;
    yougopoint_ = 0;
    youshakecount_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    youbuckcount_ = 0;
    gamesun_ = 0;
    currenturn_ = 0;
    turncount_ = 0;
    missionmulnum_ = 0;
    if (has_missiontitle()) {
      if (missiontitle_ != &::google::protobuf::internal::kEmptyString) {
        missiontitle_->clear();
      }
    }
    missiontype_ = 1;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    missionuserid_ = 0;
    missionstatetype_ = 1;
    ninemoved_ = false;
  }
  myholdcard_.Clear();
  myhavecard_.Clear();
  opencard_.Clear();
  youhavecard_.Clear();
  missioncard_.Clear();
  missiongetcard_.Clear();
  youmissiongetcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameRelayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameInfo;
        break;
      }
      
      // required .GameUserInfo gameInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_youGameInfo;
        break;
      }
      
      // required .GameUserInfo youGameInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_youGameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yougameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_myHoldCard;
        break;
      }
      
      // repeated int32 myHoldCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myHoldCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_myholdcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_myholdcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_myHoldCard;
        if (input->ExpectTag(48)) goto parse_myHaveCard;
        break;
      }
      
      // repeated int32 myHaveCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myHaveCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_myhavecard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_myhavecard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_myHaveCard;
        if (input->ExpectTag(56)) goto parse_OpenCard;
        break;
      }
      
      // repeated int32 OpenCard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_opencard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opencard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_OpenCard;
        if (input->ExpectTag(64)) goto parse_youHoldCount;
        break;
      }
      
      // required int32 youHoldCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youHoldCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youholdcount_)));
          set_has_youholdcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_youHaveCard;
        break;
      }
      
      // repeated int32 youHaveCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youHaveCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_youhavecard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_youhavecard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_youHaveCard;
        if (input->ExpectTag(80)) goto parse_myGodoriType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.JOKBO_STATE myGodoriType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myGodoriType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_JOKBO_STATE_IsValid(value)) {
            set_mygodoritype(static_cast< ::GLAnsGameRelayInfo_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_myRedType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.JOKBO_STATE myRedType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRedType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_JOKBO_STATE_IsValid(value)) {
            set_myredtype(static_cast< ::GLAnsGameRelayInfo_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_myBlueType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.JOKBO_STATE myBlueType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myBlueType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_JOKBO_STATE_IsValid(value)) {
            set_mybluetype(static_cast< ::GLAnsGameRelayInfo_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_myKusaType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.JOKBO_STATE myKusaType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myKusaType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_JOKBO_STATE_IsValid(value)) {
            set_mykusatype(static_cast< ::GLAnsGameRelayInfo_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_youGodoriType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.JOKBO_STATE youGodoriType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youGodoriType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_JOKBO_STATE_IsValid(value)) {
            set_yougodoritype(static_cast< ::GLAnsGameRelayInfo_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_youRedType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.JOKBO_STATE youRedType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youRedType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_JOKBO_STATE_IsValid(value)) {
            set_youredtype(static_cast< ::GLAnsGameRelayInfo_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_youBlueType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.JOKBO_STATE youBlueType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youBlueType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_JOKBO_STATE_IsValid(value)) {
            set_youbluetype(static_cast< ::GLAnsGameRelayInfo_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_youKusaType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.JOKBO_STATE youKusaType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youKusaType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_JOKBO_STATE_IsValid(value)) {
            set_youkusatype(static_cast< ::GLAnsGameRelayInfo_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_myPoint;
        break;
      }
      
      // required int32 myPoint = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mypoint_)));
          set_has_mypoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_myGoPoint;
        break;
      }
      
      // required int32 myGoPoint = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myGoPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mygopoint_)));
          set_has_mygopoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_myShakeCount;
        break;
      }
      
      // required int32 myShakeCount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myShakeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myshakecount_)));
          set_has_myshakecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_myBuckCount;
        break;
      }
      
      // required int32 myBuckCount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myBuckCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mybuckcount_)));
          set_has_mybuckcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_youPoint;
        break;
      }
      
      // required int32 youPoint = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youpoint_)));
          set_has_youpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_youGoPoint;
        break;
      }
      
      // required int32 youGoPoint = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youGoPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yougopoint_)));
          set_has_yougopoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_youShakeCount;
        break;
      }
      
      // required int32 youShakeCount = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youShakeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youshakecount_)));
          set_has_youshakecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_youBuckCount;
        break;
      }
      
      // required int32 youBuckCount = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youBuckCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youbuckcount_)));
          set_has_youbuckcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_gameSun;
        break;
      }
      
      // required int32 gameSun = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameSun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamesun_)));
          set_has_gamesun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_currenTurn;
        break;
      }
      
      // required int32 currenTurn = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currenTurn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenturn_)));
          set_has_currenturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_turnCount;
        break;
      }
      
      // required int32 turnCount = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turncount_)));
          set_has_turncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_missionMulNum;
        break;
      }
      
      // required int32 missionMulNum = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionMulNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionmulnum_)));
          set_has_missionmulnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_missionCard;
        break;
      }
      
      // repeated int32 missionCard = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 240, input, this->mutable_missioncard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_missioncard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_missionCard;
        if (input->ExpectTag(250)) goto parse_missionTitle;
        break;
      }
      
      // required string missionTitle = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_missiontitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_missionType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.MISSION_TYPE missionType = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_MISSION_TYPE_IsValid(value)) {
            set_missiontype(static_cast< ::GLAnsGameRelayInfo_MISSION_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_missionUserID;
        break;
      }
      
      // optional int32 missionUserID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionuserid_)));
          set_has_missionuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_missionStateType;
        break;
      }
      
      // required .GLAnsGameRelayInfo.MISSION_STATE missionStateType = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionStateType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRelayInfo_MISSION_STATE_IsValid(value)) {
            set_missionstatetype(static_cast< ::GLAnsGameRelayInfo_MISSION_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_missionGetCard;
        break;
      }
      
      // repeated int32 missionGetCard = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionGetCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 280, input, this->mutable_missiongetcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_missiongetcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_missionGetCard;
        if (input->ExpectTag(288)) goto parse_youMissionGetCard;
        break;
      }
      
      // repeated int32 youMissionGetCard = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youMissionGetCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 288, input, this->mutable_youmissiongetcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_youmissiongetcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_youMissionGetCard;
        if (input->ExpectTag(296)) goto parse_nineMoved;
        break;
      }
      
      // required bool nineMoved = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nineMoved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ninemoved_)));
          set_has_ninemoved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameRelayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GameUserInfo gameInfo = 3;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gameinfo(), output);
  }
  
  // required .GameUserInfo youGameInfo = 4;
  if (has_yougameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->yougameinfo(), output);
  }
  
  // repeated int32 myHoldCard = 5;
  for (int i = 0; i < this->myholdcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->myholdcard(i), output);
  }
  
  // repeated int32 myHaveCard = 6;
  for (int i = 0; i < this->myhavecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->myhavecard(i), output);
  }
  
  // repeated int32 OpenCard = 7;
  for (int i = 0; i < this->opencard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->opencard(i), output);
  }
  
  // required int32 youHoldCount = 8;
  if (has_youholdcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->youholdcount(), output);
  }
  
  // repeated int32 youHaveCard = 9;
  for (int i = 0; i < this->youhavecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->youhavecard(i), output);
  }
  
  // required .GLAnsGameRelayInfo.JOKBO_STATE myGodoriType = 10;
  if (has_mygodoritype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->mygodoritype(), output);
  }
  
  // required .GLAnsGameRelayInfo.JOKBO_STATE myRedType = 11;
  if (has_myredtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->myredtype(), output);
  }
  
  // required .GLAnsGameRelayInfo.JOKBO_STATE myBlueType = 12;
  if (has_mybluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->mybluetype(), output);
  }
  
  // required .GLAnsGameRelayInfo.JOKBO_STATE myKusaType = 13;
  if (has_mykusatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->mykusatype(), output);
  }
  
  // required .GLAnsGameRelayInfo.JOKBO_STATE youGodoriType = 14;
  if (has_yougodoritype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->yougodoritype(), output);
  }
  
  // required .GLAnsGameRelayInfo.JOKBO_STATE youRedType = 15;
  if (has_youredtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->youredtype(), output);
  }
  
  // required .GLAnsGameRelayInfo.JOKBO_STATE youBlueType = 16;
  if (has_youbluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->youbluetype(), output);
  }
  
  // required .GLAnsGameRelayInfo.JOKBO_STATE youKusaType = 17;
  if (has_youkusatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->youkusatype(), output);
  }
  
  // required int32 myPoint = 18;
  if (has_mypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->mypoint(), output);
  }
  
  // required int32 myGoPoint = 19;
  if (has_mygopoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->mygopoint(), output);
  }
  
  // required int32 myShakeCount = 20;
  if (has_myshakecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->myshakecount(), output);
  }
  
  // required int32 myBuckCount = 21;
  if (has_mybuckcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->mybuckcount(), output);
  }
  
  // required int32 youPoint = 22;
  if (has_youpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->youpoint(), output);
  }
  
  // required int32 youGoPoint = 23;
  if (has_yougopoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->yougopoint(), output);
  }
  
  // required int32 youShakeCount = 24;
  if (has_youshakecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->youshakecount(), output);
  }
  
  // required int32 youBuckCount = 25;
  if (has_youbuckcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->youbuckcount(), output);
  }
  
  // required int32 gameSun = 26;
  if (has_gamesun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->gamesun(), output);
  }
  
  // required int32 currenTurn = 27;
  if (has_currenturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->currenturn(), output);
  }
  
  // required int32 turnCount = 28;
  if (has_turncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->turncount(), output);
  }
  
  // required int32 missionMulNum = 29;
  if (has_missionmulnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->missionmulnum(), output);
  }
  
  // repeated int32 missionCard = 30;
  for (int i = 0; i < this->missioncard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      30, this->missioncard(i), output);
  }
  
  // required string missionTitle = 31;
  if (has_missiontitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->missiontitle(), output);
  }
  
  // required .GLAnsGameRelayInfo.MISSION_TYPE missionType = 32;
  if (has_missiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->missiontype(), output);
  }
  
  // optional int32 missionUserID = 33;
  if (has_missionuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->missionuserid(), output);
  }
  
  // required .GLAnsGameRelayInfo.MISSION_STATE missionStateType = 34;
  if (has_missionstatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->missionstatetype(), output);
  }
  
  // repeated int32 missionGetCard = 35;
  for (int i = 0; i < this->missiongetcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      35, this->missiongetcard(i), output);
  }
  
  // repeated int32 youMissionGetCard = 36;
  for (int i = 0; i < this->youmissiongetcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      36, this->youmissiongetcard(i), output);
  }
  
  // required bool nineMoved = 37;
  if (has_ninemoved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->ninemoved(), output);
  }
  
}

int GLAnsGameRelayInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GameUserInfo gameInfo = 3;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }
    
    // required .GameUserInfo youGameInfo = 4;
    if (has_yougameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yougameinfo());
    }
    
    // required int32 youHoldCount = 8;
    if (has_youholdcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youholdcount());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required .GLAnsGameRelayInfo.JOKBO_STATE myGodoriType = 10;
    if (has_mygodoritype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mygodoritype());
    }
    
    // required .GLAnsGameRelayInfo.JOKBO_STATE myRedType = 11;
    if (has_myredtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->myredtype());
    }
    
    // required .GLAnsGameRelayInfo.JOKBO_STATE myBlueType = 12;
    if (has_mybluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mybluetype());
    }
    
    // required .GLAnsGameRelayInfo.JOKBO_STATE myKusaType = 13;
    if (has_mykusatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mykusatype());
    }
    
    // required .GLAnsGameRelayInfo.JOKBO_STATE youGodoriType = 14;
    if (has_yougodoritype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->yougodoritype());
    }
    
    // required .GLAnsGameRelayInfo.JOKBO_STATE youRedType = 15;
    if (has_youredtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->youredtype());
    }
    
    // required .GLAnsGameRelayInfo.JOKBO_STATE youBlueType = 16;
    if (has_youbluetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->youbluetype());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .GLAnsGameRelayInfo.JOKBO_STATE youKusaType = 17;
    if (has_youkusatype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->youkusatype());
    }
    
    // required int32 myPoint = 18;
    if (has_mypoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mypoint());
    }
    
    // required int32 myGoPoint = 19;
    if (has_mygopoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mygopoint());
    }
    
    // required int32 myShakeCount = 20;
    if (has_myshakecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myshakecount());
    }
    
    // required int32 myBuckCount = 21;
    if (has_mybuckcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mybuckcount());
    }
    
    // required int32 youPoint = 22;
    if (has_youpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youpoint());
    }
    
    // required int32 youGoPoint = 23;
    if (has_yougopoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yougopoint());
    }
    
    // required int32 youShakeCount = 24;
    if (has_youshakecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youshakecount());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 youBuckCount = 25;
    if (has_youbuckcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youbuckcount());
    }
    
    // required int32 gameSun = 26;
    if (has_gamesun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamesun());
    }
    
    // required int32 currenTurn = 27;
    if (has_currenturn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenturn());
    }
    
    // required int32 turnCount = 28;
    if (has_turncount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turncount());
    }
    
    // required int32 missionMulNum = 29;
    if (has_missionmulnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionmulnum());
    }
    
    // required string missionTitle = 31;
    if (has_missiontitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->missiontitle());
    }
    
    // required .GLAnsGameRelayInfo.MISSION_TYPE missionType = 32;
    if (has_missiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->missiontype());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 missionUserID = 33;
    if (has_missionuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionuserid());
    }
    
    // required .GLAnsGameRelayInfo.MISSION_STATE missionStateType = 34;
    if (has_missionstatetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->missionstatetype());
    }
    
    // required bool nineMoved = 37;
    if (has_ninemoved()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated int32 myHoldCard = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->myholdcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->myholdcard(i));
    }
    total_size += 1 * this->myholdcard_size() + data_size;
  }
  
  // repeated int32 myHaveCard = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->myhavecard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->myhavecard(i));
    }
    total_size += 1 * this->myhavecard_size() + data_size;
  }
  
  // repeated int32 OpenCard = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->opencard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->opencard(i));
    }
    total_size += 1 * this->opencard_size() + data_size;
  }
  
  // repeated int32 youHaveCard = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->youhavecard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->youhavecard(i));
    }
    total_size += 1 * this->youhavecard_size() + data_size;
  }
  
  // repeated int32 missionCard = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->missioncard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->missioncard(i));
    }
    total_size += 2 * this->missioncard_size() + data_size;
  }
  
  // repeated int32 missionGetCard = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->missiongetcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->missiongetcard(i));
    }
    total_size += 2 * this->missiongetcard_size() + data_size;
  }
  
  // repeated int32 youMissionGetCard = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->youmissiongetcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->youmissiongetcard(i));
    }
    total_size += 2 * this->youmissiongetcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameRelayInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameRelayInfo*>(&from));
}

void GLAnsGameRelayInfo::MergeFrom(const GLAnsGameRelayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  myholdcard_.MergeFrom(from.myholdcard_);
  myhavecard_.MergeFrom(from.myhavecard_);
  opencard_.MergeFrom(from.opencard_);
  youhavecard_.MergeFrom(from.youhavecard_);
  missioncard_.MergeFrom(from.missioncard_);
  missiongetcard_.MergeFrom(from.missiongetcard_);
  youmissiongetcard_.MergeFrom(from.youmissiongetcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::GameUserInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_yougameinfo()) {
      mutable_yougameinfo()->::GameUserInfo::MergeFrom(from.yougameinfo());
    }
    if (from.has_youholdcount()) {
      set_youholdcount(from.youholdcount());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_mygodoritype()) {
      set_mygodoritype(from.mygodoritype());
    }
    if (from.has_myredtype()) {
      set_myredtype(from.myredtype());
    }
    if (from.has_mybluetype()) {
      set_mybluetype(from.mybluetype());
    }
    if (from.has_mykusatype()) {
      set_mykusatype(from.mykusatype());
    }
    if (from.has_yougodoritype()) {
      set_yougodoritype(from.yougodoritype());
    }
    if (from.has_youredtype()) {
      set_youredtype(from.youredtype());
    }
    if (from.has_youbluetype()) {
      set_youbluetype(from.youbluetype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_youkusatype()) {
      set_youkusatype(from.youkusatype());
    }
    if (from.has_mypoint()) {
      set_mypoint(from.mypoint());
    }
    if (from.has_mygopoint()) {
      set_mygopoint(from.mygopoint());
    }
    if (from.has_myshakecount()) {
      set_myshakecount(from.myshakecount());
    }
    if (from.has_mybuckcount()) {
      set_mybuckcount(from.mybuckcount());
    }
    if (from.has_youpoint()) {
      set_youpoint(from.youpoint());
    }
    if (from.has_yougopoint()) {
      set_yougopoint(from.yougopoint());
    }
    if (from.has_youshakecount()) {
      set_youshakecount(from.youshakecount());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_youbuckcount()) {
      set_youbuckcount(from.youbuckcount());
    }
    if (from.has_gamesun()) {
      set_gamesun(from.gamesun());
    }
    if (from.has_currenturn()) {
      set_currenturn(from.currenturn());
    }
    if (from.has_turncount()) {
      set_turncount(from.turncount());
    }
    if (from.has_missionmulnum()) {
      set_missionmulnum(from.missionmulnum());
    }
    if (from.has_missiontitle()) {
      set_missiontitle(from.missiontitle());
    }
    if (from.has_missiontype()) {
      set_missiontype(from.missiontype());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_missionuserid()) {
      set_missionuserid(from.missionuserid());
    }
    if (from.has_missionstatetype()) {
      set_missionstatetype(from.missionstatetype());
    }
    if (from.has_ninemoved()) {
      set_ninemoved(from.ninemoved());
    }
  }
}

void GLAnsGameRelayInfo::CopyFrom(const GLAnsGameRelayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameRelayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xdffffe8e) != 0xdffffe8e) return false;
  if ((_has_bits_[1] & 0x00000012) != 0x00000012) return false;
  
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  if (has_yougameinfo()) {
    if (!this->yougameinfo().IsInitialized()) return false;
  }
  return true;
}

void GLAnsGameRelayInfo::Swap(GLAnsGameRelayInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(yougameinfo_, other->yougameinfo_);
    myholdcard_.Swap(&other->myholdcard_);
    myhavecard_.Swap(&other->myhavecard_);
    opencard_.Swap(&other->opencard_);
    std::swap(youholdcount_, other->youholdcount_);
    youhavecard_.Swap(&other->youhavecard_);
    std::swap(mygodoritype_, other->mygodoritype_);
    std::swap(myredtype_, other->myredtype_);
    std::swap(mybluetype_, other->mybluetype_);
    std::swap(mykusatype_, other->mykusatype_);
    std::swap(yougodoritype_, other->yougodoritype_);
    std::swap(youredtype_, other->youredtype_);
    std::swap(youbluetype_, other->youbluetype_);
    std::swap(youkusatype_, other->youkusatype_);
    std::swap(mypoint_, other->mypoint_);
    std::swap(mygopoint_, other->mygopoint_);
    std::swap(myshakecount_, other->myshakecount_);
    std::swap(mybuckcount_, other->mybuckcount_);
    std::swap(youpoint_, other->youpoint_);
    std::swap(yougopoint_, other->yougopoint_);
    std::swap(youshakecount_, other->youshakecount_);
    std::swap(youbuckcount_, other->youbuckcount_);
    std::swap(gamesun_, other->gamesun_);
    std::swap(currenturn_, other->currenturn_);
    std::swap(turncount_, other->turncount_);
    std::swap(missionmulnum_, other->missionmulnum_);
    missioncard_.Swap(&other->missioncard_);
    std::swap(missiontitle_, other->missiontitle_);
    std::swap(missiontype_, other->missiontype_);
    std::swap(missionuserid_, other->missionuserid_);
    std::swap(missionstatetype_, other->missionstatetype_);
    missiongetcard_.Swap(&other->missiongetcard_);
    youmissiongetcard_.Swap(&other->youmissiongetcard_);
    std::swap(ninemoved_, other->ninemoved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameRelayInfo::GetTypeName() const {
  return "GLAnsGameRelayInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameInitGameTan::kGameIDFieldNumber;
const int GLReqGameInitGameTan::kTanTypeFieldNumber;
const int GLReqGameInitGameTan::kMissionTypeFieldNumber;
const int GLReqGameInitGameTan::kMissionMulFieldNumber;
#endif  // !_MSC_VER

GLReqGameInitGameTan::GLReqGameInitGameTan()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameInitGameTan::InitAsDefaultInstance() {
}

GLReqGameInitGameTan::GLReqGameInitGameTan(const GLReqGameInitGameTan& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameInitGameTan::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  tantype_ = 0;
  missiontype_ = 0;
  missionmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameInitGameTan::~GLReqGameInitGameTan() {
  SharedDtor();
}

void GLReqGameInitGameTan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameInitGameTan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameInitGameTan& GLReqGameInitGameTan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameInitGameTan* GLReqGameInitGameTan::default_instance_ = NULL;

GLReqGameInitGameTan* GLReqGameInitGameTan::New() const {
  return new GLReqGameInitGameTan;
}

void GLReqGameInitGameTan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    tantype_ = 0;
    missiontype_ = 0;
    missionmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameInitGameTan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tanType;
        break;
      }
      
      // required int32 tanType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tanType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tantype_)));
          set_has_tantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_missionType;
        break;
      }
      
      // required int32 missionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missiontype_)));
          set_has_missiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_missionMul;
        break;
      }
      
      // required int32 missionMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionmul_)));
          set_has_missionmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameInitGameTan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 tanType = 2;
  if (has_tantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tantype(), output);
  }
  
  // required int32 missionType = 3;
  if (has_missiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->missiontype(), output);
  }
  
  // required int32 missionMul = 4;
  if (has_missionmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->missionmul(), output);
  }
  
}

int GLReqGameInitGameTan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 tanType = 2;
    if (has_tantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tantype());
    }
    
    // required int32 missionType = 3;
    if (has_missiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missiontype());
    }
    
    // required int32 missionMul = 4;
    if (has_missionmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionmul());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameInitGameTan::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameInitGameTan*>(&from));
}

void GLReqGameInitGameTan::MergeFrom(const GLReqGameInitGameTan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_tantype()) {
      set_tantype(from.tantype());
    }
    if (from.has_missiontype()) {
      set_missiontype(from.missiontype());
    }
    if (from.has_missionmul()) {
      set_missionmul(from.missionmul());
    }
  }
}

void GLReqGameInitGameTan::CopyFrom(const GLReqGameInitGameTan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameInitGameTan::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void GLReqGameInitGameTan::Swap(GLReqGameInitGameTan* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(tantype_, other->tantype_);
    std::swap(missiontype_, other->missiontype_);
    std::swap(missionmul_, other->missionmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameInitGameTan::GetTypeName() const {
  return "GLReqGameInitGameTan";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameStartReady::kGameIDFieldNumber;
const int GLAnsGameStartReady::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameStartReady::GLAnsGameStartReady()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameStartReady::InitAsDefaultInstance() {
}

GLAnsGameStartReady::GLAnsGameStartReady(const GLAnsGameStartReady& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameStartReady::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameStartReady::~GLAnsGameStartReady() {
  SharedDtor();
}

void GLAnsGameStartReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameStartReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameStartReady& GLAnsGameStartReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameStartReady* GLAnsGameStartReady::default_instance_ = NULL;

GLAnsGameStartReady* GLAnsGameStartReady::New() const {
  return new GLAnsGameStartReady;
}

void GLAnsGameStartReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameStartReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameStartReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameStartReady::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameStartReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameStartReady*>(&from));
}

void GLAnsGameStartReady::MergeFrom(const GLAnsGameStartReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameStartReady::CopyFrom(const GLAnsGameStartReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameStartReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GLAnsGameStartReady::Swap(GLAnsGameStartReady* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameStartReady::GetTypeName() const {
  return "GLAnsGameStartReady";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameResetReady::kGameIDFieldNumber;
const int GLAnsGameResetReady::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameResetReady::GLAnsGameResetReady()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameResetReady::InitAsDefaultInstance() {
}

GLAnsGameResetReady::GLAnsGameResetReady(const GLAnsGameResetReady& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameResetReady::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameResetReady::~GLAnsGameResetReady() {
  SharedDtor();
}

void GLAnsGameResetReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameResetReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameResetReady& GLAnsGameResetReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameResetReady* GLAnsGameResetReady::default_instance_ = NULL;

GLAnsGameResetReady* GLAnsGameResetReady::New() const {
  return new GLAnsGameResetReady;
}

void GLAnsGameResetReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameResetReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameResetReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameResetReady::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameResetReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameResetReady*>(&from));
}

void GLAnsGameResetReady::MergeFrom(const GLAnsGameResetReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameResetReady::CopyFrom(const GLAnsGameResetReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameResetReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameResetReady::Swap(GLAnsGameResetReady* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameResetReady::GetTypeName() const {
  return "GLAnsGameResetReady";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameStart::kGameIDFieldNumber;
const int GLAnsGameStart::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameStart::GLAnsGameStart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameStart::InitAsDefaultInstance() {
}

GLAnsGameStart::GLAnsGameStart(const GLAnsGameStart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameStart::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameStart::~GLAnsGameStart() {
  SharedDtor();
}

void GLAnsGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameStart& GLAnsGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameStart* GLAnsGameStart::default_instance_ = NULL;

GLAnsGameStart* GLAnsGameStart::New() const {
  return new GLAnsGameStart;
}

void GLAnsGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // optional int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // optional int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameStart*>(&from));
}

void GLAnsGameStart::MergeFrom(const GLAnsGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameStart::CopyFrom(const GLAnsGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameStart::IsInitialized() const {
  
  return true;
}

void GLAnsGameStart::Swap(GLAnsGameStart* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameStart::GetTypeName() const {
  return "GLAnsGameStart";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameReset::kGameIDFieldNumber;
const int GLAnsGameReset::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameReset::GLAnsGameReset()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameReset::InitAsDefaultInstance() {
}

GLAnsGameReset::GLAnsGameReset(const GLAnsGameReset& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameReset::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameReset::~GLAnsGameReset() {
  SharedDtor();
}

void GLAnsGameReset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameReset& GLAnsGameReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameReset* GLAnsGameReset::default_instance_ = NULL;

GLAnsGameReset* GLAnsGameReset::New() const {
  return new GLAnsGameReset;
}

void GLAnsGameReset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // optional int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // optional int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameReset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameReset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameReset*>(&from));
}

void GLAnsGameReset::MergeFrom(const GLAnsGameReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameReset::CopyFrom(const GLAnsGameReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameReset::IsInitialized() const {
  
  return true;
}

void GLAnsGameReset::Swap(GLAnsGameReset* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameReset::GetTypeName() const {
  return "GLAnsGameReset";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameNotiSun::kGameIDFieldNumber;
const int GLAnsGameNotiSun::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameNotiSun::GLAnsGameNotiSun()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameNotiSun::InitAsDefaultInstance() {
}

GLAnsGameNotiSun::GLAnsGameNotiSun(const GLAnsGameNotiSun& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameNotiSun::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameNotiSun::~GLAnsGameNotiSun() {
  SharedDtor();
}

void GLAnsGameNotiSun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameNotiSun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameNotiSun& GLAnsGameNotiSun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameNotiSun* GLAnsGameNotiSun::default_instance_ = NULL;

GLAnsGameNotiSun* GLAnsGameNotiSun::New() const {
  return new GLAnsGameNotiSun;
}

void GLAnsGameNotiSun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameNotiSun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameNotiSun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameNotiSun::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameNotiSun::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameNotiSun*>(&from));
}

void GLAnsGameNotiSun::MergeFrom(const GLAnsGameNotiSun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameNotiSun::CopyFrom(const GLAnsGameNotiSun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameNotiSun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameNotiSun::Swap(GLAnsGameNotiSun* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameNotiSun::GetTypeName() const {
  return "GLAnsGameNotiSun";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameSelectSun::kGameIDFieldNumber;
const int GLReqGameSelectSun::kGameIndexFieldNumber;
const int GLReqGameSelectSun::kSelectIndexFieldNumber;
#endif  // !_MSC_VER

GLReqGameSelectSun::GLReqGameSelectSun()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameSelectSun::InitAsDefaultInstance() {
}

GLReqGameSelectSun::GLReqGameSelectSun(const GLReqGameSelectSun& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameSelectSun::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  selectindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameSelectSun::~GLReqGameSelectSun() {
  SharedDtor();
}

void GLReqGameSelectSun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameSelectSun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameSelectSun& GLReqGameSelectSun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameSelectSun* GLReqGameSelectSun::default_instance_ = NULL;

GLReqGameSelectSun* GLReqGameSelectSun::New() const {
  return new GLReqGameSelectSun;
}

void GLReqGameSelectSun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    selectindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameSelectSun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selectIndex;
        break;
      }
      
      // required int32 selectIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selectindex_)));
          set_has_selectindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameSelectSun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 selectIndex = 3;
  if (has_selectindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selectindex(), output);
  }
  
}

int GLReqGameSelectSun::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 selectIndex = 3;
    if (has_selectindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selectindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameSelectSun::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameSelectSun*>(&from));
}

void GLReqGameSelectSun::MergeFrom(const GLReqGameSelectSun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_selectindex()) {
      set_selectindex(from.selectindex());
    }
  }
}

void GLReqGameSelectSun::CopyFrom(const GLReqGameSelectSun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameSelectSun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GLReqGameSelectSun::Swap(GLReqGameSelectSun* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(selectindex_, other->selectindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameSelectSun::GetTypeName() const {
  return "GLReqGameSelectSun";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameSelectSun::kGameIDFieldNumber;
const int GLAnsGameSelectSun::kGameIndexFieldNumber;
const int GLAnsGameSelectSun::kSelectIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameSelectSun::GLAnsGameSelectSun()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameSelectSun::InitAsDefaultInstance() {
}

GLAnsGameSelectSun::GLAnsGameSelectSun(const GLAnsGameSelectSun& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameSelectSun::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  selectindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameSelectSun::~GLAnsGameSelectSun() {
  SharedDtor();
}

void GLAnsGameSelectSun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameSelectSun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameSelectSun& GLAnsGameSelectSun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameSelectSun* GLAnsGameSelectSun::default_instance_ = NULL;

GLAnsGameSelectSun* GLAnsGameSelectSun::New() const {
  return new GLAnsGameSelectSun;
}

void GLAnsGameSelectSun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    selectindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameSelectSun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selectIndex;
        break;
      }
      
      // required int32 selectIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selectindex_)));
          set_has_selectindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameSelectSun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 selectIndex = 3;
  if (has_selectindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selectindex(), output);
  }
  
}

int GLAnsGameSelectSun::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 selectIndex = 3;
    if (has_selectindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selectindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameSelectSun::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameSelectSun*>(&from));
}

void GLAnsGameSelectSun::MergeFrom(const GLAnsGameSelectSun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_selectindex()) {
      set_selectindex(from.selectindex());
    }
  }
}

void GLAnsGameSelectSun::CopyFrom(const GLAnsGameSelectSun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameSelectSun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GLAnsGameSelectSun::Swap(GLAnsGameSelectSun* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(selectindex_, other->selectindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameSelectSun::GetTypeName() const {
  return "GLAnsGameSelectSun";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameNotiSelectSun::kGameIDFieldNumber;
const int GLAnsGameNotiSelectSun::kGameIndexFieldNumber;
const int GLAnsGameNotiSelectSun::kNCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameNotiSelectSun::GLAnsGameNotiSelectSun()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameNotiSelectSun::InitAsDefaultInstance() {
}

GLAnsGameNotiSelectSun::GLAnsGameNotiSelectSun(const GLAnsGameNotiSelectSun& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameNotiSelectSun::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameNotiSelectSun::~GLAnsGameNotiSelectSun() {
  SharedDtor();
}

void GLAnsGameNotiSelectSun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameNotiSelectSun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameNotiSelectSun& GLAnsGameNotiSelectSun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameNotiSelectSun* GLAnsGameNotiSelectSun::default_instance_ = NULL;

GLAnsGameNotiSelectSun* GLAnsGameNotiSelectSun::New() const {
  return new GLAnsGameNotiSelectSun;
}

void GLAnsGameNotiSelectSun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ncard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameNotiSelectSun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCard;
        break;
      }
      
      // repeated int32 nCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_ncard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ncard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameNotiSelectSun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 nCard = 3;
  for (int i = 0; i < this->ncard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->ncard(i), output);
  }
  
}

int GLAnsGameNotiSelectSun::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  // repeated int32 nCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ncard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ncard(i));
    }
    total_size += 1 * this->ncard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameNotiSelectSun::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameNotiSelectSun*>(&from));
}

void GLAnsGameNotiSelectSun::MergeFrom(const GLAnsGameNotiSelectSun& from) {
  GOOGLE_CHECK_NE(&from, this);
  ncard_.MergeFrom(from.ncard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameNotiSelectSun::CopyFrom(const GLAnsGameNotiSelectSun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameNotiSelectSun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GLAnsGameNotiSelectSun::Swap(GLAnsGameNotiSelectSun* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    ncard_.Swap(&other->ncard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameNotiSelectSun::GetTypeName() const {
  return "GLAnsGameNotiSelectSun";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameSharing::kGameIDFieldNumber;
const int GLAnsGameSharing::kGameIndexFieldNumber;
const int GLAnsGameSharing::kLstOpenCardFieldNumber;
const int GLAnsGameSharing::kLstHoldCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameSharing::GLAnsGameSharing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameSharing::InitAsDefaultInstance() {
}

GLAnsGameSharing::GLAnsGameSharing(const GLAnsGameSharing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameSharing::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameSharing::~GLAnsGameSharing() {
  SharedDtor();
}

void GLAnsGameSharing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameSharing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameSharing& GLAnsGameSharing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameSharing* GLAnsGameSharing::default_instance_ = NULL;

GLAnsGameSharing* GLAnsGameSharing::New() const {
  return new GLAnsGameSharing;
}

void GLAnsGameSharing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  lstopencard_.Clear();
  lstholdcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameSharing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstOpenCard;
        break;
      }
      
      // repeated int32 lstOpenCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstOpenCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstopencard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstopencard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstOpenCard;
        if (input->ExpectTag(32)) goto parse_lstHoldCard;
        break;
      }
      
      // repeated int32 lstHoldCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstHoldCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lstholdcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstholdcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lstHoldCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameSharing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstOpenCard = 3;
  for (int i = 0; i < this->lstopencard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstopencard(i), output);
  }
  
  // repeated int32 lstHoldCard = 4;
  for (int i = 0; i < this->lstholdcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lstholdcard(i), output);
  }
  
}

int GLAnsGameSharing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  // repeated int32 lstOpenCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstopencard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstopencard(i));
    }
    total_size += 1 * this->lstopencard_size() + data_size;
  }
  
  // repeated int32 lstHoldCard = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstholdcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstholdcard(i));
    }
    total_size += 1 * this->lstholdcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameSharing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameSharing*>(&from));
}

void GLAnsGameSharing::MergeFrom(const GLAnsGameSharing& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstopencard_.MergeFrom(from.lstopencard_);
  lstholdcard_.MergeFrom(from.lstholdcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameSharing::CopyFrom(const GLAnsGameSharing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameSharing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameSharing::Swap(GLAnsGameSharing* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstopencard_.Swap(&other->lstopencard_);
    lstholdcard_.Swap(&other->lstholdcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameSharing::GetTypeName() const {
  return "GLAnsGameSharing";
}


// ===================================================================

bool GLAnsGameNagari_NAGARI_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameNagari_NAGARI_TYPE GLAnsGameNagari::CHONGTONG_NAGARI;
const GLAnsGameNagari_NAGARI_TYPE GLAnsGameNagari::CHONGTONG_DOUBLE;
const GLAnsGameNagari_NAGARI_TYPE GLAnsGameNagari::NAGARI_ZERO;
const GLAnsGameNagari_NAGARI_TYPE GLAnsGameNagari::NAGARI_TYPE_MIN;
const GLAnsGameNagari_NAGARI_TYPE GLAnsGameNagari::NAGARI_TYPE_MAX;
const int GLAnsGameNagari::NAGARI_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameNagari::kNTypeFieldNumber;
const int GLAnsGameNagari::kLstCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameNagari::GLAnsGameNagari()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameNagari::InitAsDefaultInstance() {
}

GLAnsGameNagari::GLAnsGameNagari(const GLAnsGameNagari& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameNagari::SharedCtor() {
  _cached_size_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameNagari::~GLAnsGameNagari() {
  SharedDtor();
}

void GLAnsGameNagari::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameNagari::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameNagari& GLAnsGameNagari::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameNagari* GLAnsGameNagari::default_instance_ = NULL;

GLAnsGameNagari* GLAnsGameNagari::New() const {
  return new GLAnsGameNagari;
}

void GLAnsGameNagari::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntype_ = 1;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameNagari::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GLAnsGameNagari.NAGARI_TYPE nType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameNagari_NAGARI_TYPE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameNagari_NAGARI_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameNagari::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GLAnsGameNagari.NAGARI_TYPE nType = 1;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ntype(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
}

int GLAnsGameNagari::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GLAnsGameNagari.NAGARI_TYPE nType = 1;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameNagari::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameNagari*>(&from));
}

void GLAnsGameNagari::MergeFrom(const GLAnsGameNagari& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameNagari::CopyFrom(const GLAnsGameNagari& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameNagari::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GLAnsGameNagari::Swap(GLAnsGameNagari* other) {
  if (other != this) {
    std::swap(ntype_, other->ntype_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameNagari::GetTypeName() const {
  return "GLAnsGameNagari";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameChongTong::kGameIDFieldNumber;
const int GLAnsGameChongTong::kGameIndexFieldNumber;
const int GLAnsGameChongTong::kLstCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameChongTong::GLAnsGameChongTong()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameChongTong::InitAsDefaultInstance() {
}

GLAnsGameChongTong::GLAnsGameChongTong(const GLAnsGameChongTong& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameChongTong::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameChongTong::~GLAnsGameChongTong() {
  SharedDtor();
}

void GLAnsGameChongTong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameChongTong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameChongTong& GLAnsGameChongTong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameChongTong* GLAnsGameChongTong::default_instance_ = NULL;

GLAnsGameChongTong* GLAnsGameChongTong::New() const {
  return new GLAnsGameChongTong;
}

void GLAnsGameChongTong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameChongTong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameChongTong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
}

int GLAnsGameChongTong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameChongTong::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameChongTong*>(&from));
}

void GLAnsGameChongTong::MergeFrom(const GLAnsGameChongTong& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameChongTong::CopyFrom(const GLAnsGameChongTong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameChongTong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameChongTong::Swap(GLAnsGameChongTong* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameChongTong::GetTypeName() const {
  return "GLAnsGameChongTong";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameSelectCard::kGameIDFieldNumber;
const int GLAnsGameSelectCard::kGameIndexFieldNumber;
const int GLAnsGameSelectCard::kLstCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameSelectCard::GLAnsGameSelectCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameSelectCard::InitAsDefaultInstance() {
}

GLAnsGameSelectCard::GLAnsGameSelectCard(const GLAnsGameSelectCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameSelectCard::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameSelectCard::~GLAnsGameSelectCard() {
  SharedDtor();
}

void GLAnsGameSelectCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameSelectCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameSelectCard& GLAnsGameSelectCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameSelectCard* GLAnsGameSelectCard::default_instance_ = NULL;

GLAnsGameSelectCard* GLAnsGameSelectCard::New() const {
  return new GLAnsGameSelectCard;
}

void GLAnsGameSelectCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameSelectCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameSelectCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
}

int GLAnsGameSelectCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameSelectCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameSelectCard*>(&from));
}

void GLAnsGameSelectCard::MergeFrom(const GLAnsGameSelectCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameSelectCard::CopyFrom(const GLAnsGameSelectCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameSelectCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameSelectCard::Swap(GLAnsGameSelectCard* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameSelectCard::GetTypeName() const {
  return "GLAnsGameSelectCard";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameBonus::kGameIDFieldNumber;
const int GLAnsGameBonus::kGameIndexFieldNumber;
const int GLAnsGameBonus::kNCardFieldNumber;
const int GLAnsGameBonus::kNCard2FieldNumber;
#endif  // !_MSC_VER

GLAnsGameBonus::GLAnsGameBonus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameBonus::InitAsDefaultInstance() {
}

GLAnsGameBonus::GLAnsGameBonus(const GLAnsGameBonus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameBonus::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncard_ = 0;
  ncard2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameBonus::~GLAnsGameBonus() {
  SharedDtor();
}

void GLAnsGameBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameBonus& GLAnsGameBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameBonus* GLAnsGameBonus::default_instance_ = NULL;

GLAnsGameBonus* GLAnsGameBonus::New() const {
  return new GLAnsGameBonus;
}

void GLAnsGameBonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncard_ = 0;
    ncard2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCard;
        break;
      }
      
      // required int32 nCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncard_)));
          set_has_ncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nCard2;
        break;
      }
      
      // required int32 nCard2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncard2_)));
          set_has_ncard2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCard = 3;
  if (has_ncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncard(), output);
  }
  
  // required int32 nCard2 = 4;
  if (has_ncard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncard2(), output);
  }
  
}

int GLAnsGameBonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCard = 3;
    if (has_ncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncard());
    }
    
    // required int32 nCard2 = 4;
    if (has_ncard2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncard2());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameBonus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameBonus*>(&from));
}

void GLAnsGameBonus::MergeFrom(const GLAnsGameBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncard()) {
      set_ncard(from.ncard());
    }
    if (from.has_ncard2()) {
      set_ncard2(from.ncard2());
    }
  }
}

void GLAnsGameBonus::CopyFrom(const GLAnsGameBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameBonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void GLAnsGameBonus::Swap(GLAnsGameBonus* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncard_, other->ncard_);
    std::swap(ncard2_, other->ncard2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameBonus::GetTypeName() const {
  return "GLAnsGameBonus";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameTakePee::kGameIDFieldNumber;
const int GLAnsGameTakePee::kGameIndexFieldNumber;
const int GLAnsGameTakePee::kNCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameTakePee::GLAnsGameTakePee()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameTakePee::InitAsDefaultInstance() {
}

GLAnsGameTakePee::GLAnsGameTakePee(const GLAnsGameTakePee& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameTakePee::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameTakePee::~GLAnsGameTakePee() {
  SharedDtor();
}

void GLAnsGameTakePee::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameTakePee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameTakePee& GLAnsGameTakePee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameTakePee* GLAnsGameTakePee::default_instance_ = NULL;

GLAnsGameTakePee* GLAnsGameTakePee::New() const {
  return new GLAnsGameTakePee;
}

void GLAnsGameTakePee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameTakePee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCard;
        break;
      }
      
      // required int32 nCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncard_)));
          set_has_ncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameTakePee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCard = 3;
  if (has_ncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncard(), output);
  }
  
}

int GLAnsGameTakePee::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCard = 3;
    if (has_ncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncard());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameTakePee::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameTakePee*>(&from));
}

void GLAnsGameTakePee::MergeFrom(const GLAnsGameTakePee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncard()) {
      set_ncard(from.ncard());
    }
  }
}

void GLAnsGameTakePee::CopyFrom(const GLAnsGameTakePee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameTakePee::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameTakePee::Swap(GLAnsGameTakePee* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncard_, other->ncard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameTakePee::GetTypeName() const {
  return "GLAnsGameTakePee";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameBbuck::kGameIDFieldNumber;
const int GLAnsGameBbuck::kGameIndexFieldNumber;
const int GLAnsGameBbuck::kLstCardFieldNumber;
const int GLAnsGameBbuck::kNCntFieldNumber;
#endif  // !_MSC_VER

GLAnsGameBbuck::GLAnsGameBbuck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameBbuck::InitAsDefaultInstance() {
}

GLAnsGameBbuck::GLAnsGameBbuck(const GLAnsGameBbuck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameBbuck::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameBbuck::~GLAnsGameBbuck() {
  SharedDtor();
}

void GLAnsGameBbuck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameBbuck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameBbuck& GLAnsGameBbuck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameBbuck* GLAnsGameBbuck::default_instance_ = NULL;

GLAnsGameBbuck* GLAnsGameBbuck::New() const {
  return new GLAnsGameBbuck;
}

void GLAnsGameBbuck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncnt_ = 0;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameBbuck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectTag(32)) goto parse_nCnt;
        break;
      }
      
      // required int32 nCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncnt_)));
          set_has_ncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameBbuck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
  // required int32 nCnt = 4;
  if (has_ncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncnt(), output);
  }
  
}

int GLAnsGameBbuck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCnt = 4;
    if (has_ncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncnt());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameBbuck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameBbuck*>(&from));
}

void GLAnsGameBbuck::MergeFrom(const GLAnsGameBbuck& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncnt()) {
      set_ncnt(from.ncnt());
    }
  }
}

void GLAnsGameBbuck::CopyFrom(const GLAnsGameBbuck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameBbuck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  
  return true;
}

void GLAnsGameBbuck::Swap(GLAnsGameBbuck* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(ncnt_, other->ncnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameBbuck::GetTypeName() const {
  return "GLAnsGameBbuck";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameSeriseBbuck::kGameIDFieldNumber;
const int GLAnsGameSeriseBbuck::kGameIndexFieldNumber;
const int GLAnsGameSeriseBbuck::kLstCardFieldNumber;
const int GLAnsGameSeriseBbuck::kNCntFieldNumber;
const int GLAnsGameSeriseBbuck::kMoneyFieldNumber;
#endif  // !_MSC_VER

GLAnsGameSeriseBbuck::GLAnsGameSeriseBbuck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameSeriseBbuck::InitAsDefaultInstance() {
}

GLAnsGameSeriseBbuck::GLAnsGameSeriseBbuck(const GLAnsGameSeriseBbuck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameSeriseBbuck::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncnt_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameSeriseBbuck::~GLAnsGameSeriseBbuck() {
  SharedDtor();
}

void GLAnsGameSeriseBbuck::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (this != default_instance_) {
  }
}

void GLAnsGameSeriseBbuck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameSeriseBbuck& GLAnsGameSeriseBbuck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameSeriseBbuck* GLAnsGameSeriseBbuck::default_instance_ = NULL;

GLAnsGameSeriseBbuck* GLAnsGameSeriseBbuck::New() const {
  return new GLAnsGameSeriseBbuck;
}

void GLAnsGameSeriseBbuck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncnt_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameSeriseBbuck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectTag(32)) goto parse_nCnt;
        break;
      }
      
      // required int32 nCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncnt_)));
          set_has_ncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_money;
        break;
      }
      
      // required string money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameSeriseBbuck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
  // required int32 nCnt = 4;
  if (has_ncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncnt(), output);
  }
  
  // required string money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->money(), output);
  }
  
}

int GLAnsGameSeriseBbuck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCnt = 4;
    if (has_ncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncnt());
    }
    
    // required string money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameSeriseBbuck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameSeriseBbuck*>(&from));
}

void GLAnsGameSeriseBbuck::MergeFrom(const GLAnsGameSeriseBbuck& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncnt()) {
      set_ncnt(from.ncnt());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
}

void GLAnsGameSeriseBbuck::CopyFrom(const GLAnsGameSeriseBbuck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameSeriseBbuck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;
  
  return true;
}

void GLAnsGameSeriseBbuck::Swap(GLAnsGameSeriseBbuck* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(ncnt_, other->ncnt_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameSeriseBbuck::GetTypeName() const {
  return "GLAnsGameSeriseBbuck";
}


// ===================================================================

bool GLAnsGameBbuckEat_CARD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::JANUARY;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::FEBUARY;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::MARCH;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::APRIL;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::MAY;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::JUNE;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::JULY;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::AUGUST;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::SEPTEMBER;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::OCTOBER;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::NOVEMBER;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::DECEMBER;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::CARDTYPE_ZERO;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::CARD_TYPE_MIN;
const GLAnsGameBbuckEat_CARD_TYPE GLAnsGameBbuckEat::CARD_TYPE_MAX;
const int GLAnsGameBbuckEat::CARD_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
bool GLAnsGameBbuckEat_BBUCK_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameBbuckEat_BBUCK_TYPE GLAnsGameBbuckEat::SELF_BBUCK;
const GLAnsGameBbuckEat_BBUCK_TYPE GLAnsGameBbuckEat::YOU_BBUCK;
const GLAnsGameBbuckEat_BBUCK_TYPE GLAnsGameBbuckEat::BBUCK_ZERO;
const GLAnsGameBbuckEat_BBUCK_TYPE GLAnsGameBbuckEat::BBUCK_TYPE_MIN;
const GLAnsGameBbuckEat_BBUCK_TYPE GLAnsGameBbuckEat::BBUCK_TYPE_MAX;
const int GLAnsGameBbuckEat::BBUCK_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameBbuckEat::kGameIDFieldNumber;
const int GLAnsGameBbuckEat::kGameIndexFieldNumber;
const int GLAnsGameBbuckEat::kNCardTypeFieldNumber;
const int GLAnsGameBbuckEat::kNBBuckTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameBbuckEat::GLAnsGameBbuckEat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameBbuckEat::InitAsDefaultInstance() {
}

GLAnsGameBbuckEat::GLAnsGameBbuckEat(const GLAnsGameBbuckEat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameBbuckEat::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncardtype_ = 1;
  nbbucktype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameBbuckEat::~GLAnsGameBbuckEat() {
  SharedDtor();
}

void GLAnsGameBbuckEat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameBbuckEat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameBbuckEat& GLAnsGameBbuckEat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameBbuckEat* GLAnsGameBbuckEat::default_instance_ = NULL;

GLAnsGameBbuckEat* GLAnsGameBbuckEat::New() const {
  return new GLAnsGameBbuckEat;
}

void GLAnsGameBbuckEat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncardtype_ = 1;
    nbbucktype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameBbuckEat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCardType;
        break;
      }
      
      // required .GLAnsGameBbuckEat.CARD_TYPE nCardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCardType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameBbuckEat_CARD_TYPE_IsValid(value)) {
            set_ncardtype(static_cast< ::GLAnsGameBbuckEat_CARD_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nBBuckType;
        break;
      }
      
      // required .GLAnsGameBbuckEat.BBUCK_TYPE nBBuckType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBBuckType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameBbuckEat_BBUCK_TYPE_IsValid(value)) {
            set_nbbucktype(static_cast< ::GLAnsGameBbuckEat_BBUCK_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameBbuckEat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameBbuckEat.CARD_TYPE nCardType = 3;
  if (has_ncardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ncardtype(), output);
  }
  
  // required .GLAnsGameBbuckEat.BBUCK_TYPE nBBuckType = 4;
  if (has_nbbucktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->nbbucktype(), output);
  }
  
}

int GLAnsGameBbuckEat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameBbuckEat.CARD_TYPE nCardType = 3;
    if (has_ncardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncardtype());
    }
    
    // required .GLAnsGameBbuckEat.BBUCK_TYPE nBBuckType = 4;
    if (has_nbbucktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nbbucktype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameBbuckEat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameBbuckEat*>(&from));
}

void GLAnsGameBbuckEat::MergeFrom(const GLAnsGameBbuckEat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncardtype()) {
      set_ncardtype(from.ncardtype());
    }
    if (from.has_nbbucktype()) {
      set_nbbucktype(from.nbbucktype());
    }
  }
}

void GLAnsGameBbuckEat::CopyFrom(const GLAnsGameBbuckEat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameBbuckEat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void GLAnsGameBbuckEat::Swap(GLAnsGameBbuckEat* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncardtype_, other->ncardtype_);
    std::swap(nbbucktype_, other->nbbucktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameBbuckEat::GetTypeName() const {
  return "GLAnsGameBbuckEat";
}


// ===================================================================

bool GLAnsGameBomb_CARD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::JANUARY;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::FEBUARY;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::MARCH;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::APRIL;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::MAY;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::JUNE;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::JULY;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::AUGUST;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::SEPTEMBER;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::OCTOBER;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::NOVEMBER;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::DECEMBER;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::CARDTYPE_ZERO;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::CARD_TYPE_MIN;
const GLAnsGameBomb_CARD_TYPE GLAnsGameBomb::CARD_TYPE_MAX;
const int GLAnsGameBomb::CARD_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameBomb::kGameIDFieldNumber;
const int GLAnsGameBomb::kGameIndexFieldNumber;
const int GLAnsGameBomb::kNCardTypeFieldNumber;
const int GLAnsGameBomb::kNCntFieldNumber;
#endif  // !_MSC_VER

GLAnsGameBomb::GLAnsGameBomb()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameBomb::InitAsDefaultInstance() {
}

GLAnsGameBomb::GLAnsGameBomb(const GLAnsGameBomb& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameBomb::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncardtype_ = 1;
  ncnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameBomb::~GLAnsGameBomb() {
  SharedDtor();
}

void GLAnsGameBomb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameBomb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameBomb& GLAnsGameBomb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameBomb* GLAnsGameBomb::default_instance_ = NULL;

GLAnsGameBomb* GLAnsGameBomb::New() const {
  return new GLAnsGameBomb;
}

void GLAnsGameBomb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncardtype_ = 1;
    ncnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameBomb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCardType;
        break;
      }
      
      // required .GLAnsGameBomb.CARD_TYPE nCardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCardType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameBomb_CARD_TYPE_IsValid(value)) {
            set_ncardtype(static_cast< ::GLAnsGameBomb_CARD_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nCnt;
        break;
      }
      
      // required int32 nCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncnt_)));
          set_has_ncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameBomb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameBomb.CARD_TYPE nCardType = 3;
  if (has_ncardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ncardtype(), output);
  }
  
  // required int32 nCnt = 4;
  if (has_ncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncnt(), output);
  }
  
}

int GLAnsGameBomb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameBomb.CARD_TYPE nCardType = 3;
    if (has_ncardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncardtype());
    }
    
    // required int32 nCnt = 4;
    if (has_ncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncnt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameBomb::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameBomb*>(&from));
}

void GLAnsGameBomb::MergeFrom(const GLAnsGameBomb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncardtype()) {
      set_ncardtype(from.ncardtype());
    }
    if (from.has_ncnt()) {
      set_ncnt(from.ncnt());
    }
  }
}

void GLAnsGameBomb::CopyFrom(const GLAnsGameBomb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameBomb::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void GLAnsGameBomb::Swap(GLAnsGameBomb* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncardtype_, other->ncardtype_);
    std::swap(ncnt_, other->ncnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameBomb::GetTypeName() const {
  return "GLAnsGameBomb";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGamePan::kGameIDFieldNumber;
const int GLAnsGamePan::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGamePan::GLAnsGamePan()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGamePan::InitAsDefaultInstance() {
}

GLAnsGamePan::GLAnsGamePan(const GLAnsGamePan& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGamePan::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGamePan::~GLAnsGamePan() {
  SharedDtor();
}

void GLAnsGamePan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGamePan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGamePan& GLAnsGamePan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGamePan* GLAnsGamePan::default_instance_ = NULL;

GLAnsGamePan* GLAnsGamePan::New() const {
  return new GLAnsGamePan;
}

void GLAnsGamePan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGamePan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGamePan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGamePan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGamePan::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGamePan*>(&from));
}

void GLAnsGamePan::MergeFrom(const GLAnsGamePan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGamePan::CopyFrom(const GLAnsGamePan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGamePan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGamePan::Swap(GLAnsGamePan* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGamePan::GetTypeName() const {
  return "GLAnsGamePan";
}


// ===================================================================

bool GLAnsGameDadak_CARD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::JANUARY;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::FEBUARY;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::MARCH;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::APRIL;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::MAY;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::JUNE;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::JULY;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::AUGUST;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::SEPTEMBER;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::OCTOBER;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::NOVEMBER;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::DECEMBER;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::CARDTYPE_ZERO;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::CARD_TYPE_MIN;
const GLAnsGameDadak_CARD_TYPE GLAnsGameDadak::CARD_TYPE_MAX;
const int GLAnsGameDadak::CARD_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameDadak::kGameIDFieldNumber;
const int GLAnsGameDadak::kGameIndexFieldNumber;
const int GLAnsGameDadak::kNCardTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameDadak::GLAnsGameDadak()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameDadak::InitAsDefaultInstance() {
}

GLAnsGameDadak::GLAnsGameDadak(const GLAnsGameDadak& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameDadak::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncardtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameDadak::~GLAnsGameDadak() {
  SharedDtor();
}

void GLAnsGameDadak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameDadak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameDadak& GLAnsGameDadak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameDadak* GLAnsGameDadak::default_instance_ = NULL;

GLAnsGameDadak* GLAnsGameDadak::New() const {
  return new GLAnsGameDadak;
}

void GLAnsGameDadak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncardtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameDadak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCardType;
        break;
      }
      
      // required .GLAnsGameDadak.CARD_TYPE nCardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCardType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameDadak_CARD_TYPE_IsValid(value)) {
            set_ncardtype(static_cast< ::GLAnsGameDadak_CARD_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameDadak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameDadak.CARD_TYPE nCardType = 3;
  if (has_ncardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ncardtype(), output);
  }
  
}

int GLAnsGameDadak::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameDadak.CARD_TYPE nCardType = 3;
    if (has_ncardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncardtype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameDadak::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameDadak*>(&from));
}

void GLAnsGameDadak::MergeFrom(const GLAnsGameDadak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncardtype()) {
      set_ncardtype(from.ncardtype());
    }
  }
}

void GLAnsGameDadak::CopyFrom(const GLAnsGameDadak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameDadak::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameDadak::Swap(GLAnsGameDadak* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncardtype_, other->ncardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameDadak::GetTypeName() const {
  return "GLAnsGameDadak";
}


// ===================================================================

bool GLAnsGameJjok_CARD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::JANUARY;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::FEBUARY;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::MARCH;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::APRIL;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::MAY;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::JUNE;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::JULY;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::AUGUST;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::SEPTEMBER;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::OCTOBER;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::NOVEMBER;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::DECEMBER;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::CARDTYPE_ZERO;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::CARD_TYPE_MIN;
const GLAnsGameJjok_CARD_TYPE GLAnsGameJjok::CARD_TYPE_MAX;
const int GLAnsGameJjok::CARD_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameJjok::kGameIDFieldNumber;
const int GLAnsGameJjok::kGameIndexFieldNumber;
const int GLAnsGameJjok::kNCardTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameJjok::GLAnsGameJjok()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameJjok::InitAsDefaultInstance() {
}

GLAnsGameJjok::GLAnsGameJjok(const GLAnsGameJjok& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameJjok::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncardtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameJjok::~GLAnsGameJjok() {
  SharedDtor();
}

void GLAnsGameJjok::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameJjok::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameJjok& GLAnsGameJjok::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameJjok* GLAnsGameJjok::default_instance_ = NULL;

GLAnsGameJjok* GLAnsGameJjok::New() const {
  return new GLAnsGameJjok;
}

void GLAnsGameJjok::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncardtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameJjok::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCardType;
        break;
      }
      
      // required .GLAnsGameJjok.CARD_TYPE nCardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCardType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameJjok_CARD_TYPE_IsValid(value)) {
            set_ncardtype(static_cast< ::GLAnsGameJjok_CARD_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameJjok::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameJjok.CARD_TYPE nCardType = 3;
  if (has_ncardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ncardtype(), output);
  }
  
}

int GLAnsGameJjok::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameJjok.CARD_TYPE nCardType = 3;
    if (has_ncardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncardtype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameJjok::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameJjok*>(&from));
}

void GLAnsGameJjok::MergeFrom(const GLAnsGameJjok& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncardtype()) {
      set_ncardtype(from.ncardtype());
    }
  }
}

void GLAnsGameJjok::CopyFrom(const GLAnsGameJjok& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameJjok::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameJjok::Swap(GLAnsGameJjok* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncardtype_, other->ncardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameJjok::GetTypeName() const {
  return "GLAnsGameJjok";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameUpset::kGameIDFieldNumber;
const int GLAnsGameUpset::kGameIndexFieldNumber;
const int GLAnsGameUpset::kNCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameUpset::GLAnsGameUpset()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameUpset::InitAsDefaultInstance() {
}

GLAnsGameUpset::GLAnsGameUpset(const GLAnsGameUpset& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameUpset::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameUpset::~GLAnsGameUpset() {
  SharedDtor();
}

void GLAnsGameUpset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameUpset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameUpset& GLAnsGameUpset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameUpset* GLAnsGameUpset::default_instance_ = NULL;

GLAnsGameUpset* GLAnsGameUpset::New() const {
  return new GLAnsGameUpset;
}

void GLAnsGameUpset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameUpset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCard;
        break;
      }
      
      // required int32 nCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncard_)));
          set_has_ncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameUpset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCard = 3;
  if (has_ncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncard(), output);
  }
  
}

int GLAnsGameUpset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCard = 3;
    if (has_ncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncard());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameUpset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameUpset*>(&from));
}

void GLAnsGameUpset::MergeFrom(const GLAnsGameUpset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncard()) {
      set_ncard(from.ncard());
    }
  }
}

void GLAnsGameUpset::CopyFrom(const GLAnsGameUpset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameUpset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameUpset::Swap(GLAnsGameUpset* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncard_, other->ncard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameUpset::GetTypeName() const {
  return "GLAnsGameUpset";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameAllEatUp::kGameIDFieldNumber;
const int GLAnsGameAllEatUp::kGameIndexFieldNumber;
const int GLAnsGameAllEatUp::kLstCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameAllEatUp::GLAnsGameAllEatUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameAllEatUp::InitAsDefaultInstance() {
}

GLAnsGameAllEatUp::GLAnsGameAllEatUp(const GLAnsGameAllEatUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameAllEatUp::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameAllEatUp::~GLAnsGameAllEatUp() {
  SharedDtor();
}

void GLAnsGameAllEatUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameAllEatUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameAllEatUp& GLAnsGameAllEatUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameAllEatUp* GLAnsGameAllEatUp::default_instance_ = NULL;

GLAnsGameAllEatUp* GLAnsGameAllEatUp::New() const {
  return new GLAnsGameAllEatUp;
}

void GLAnsGameAllEatUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameAllEatUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameAllEatUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
}

int GLAnsGameAllEatUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameAllEatUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameAllEatUp*>(&from));
}

void GLAnsGameAllEatUp::MergeFrom(const GLAnsGameAllEatUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameAllEatUp::CopyFrom(const GLAnsGameAllEatUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameAllEatUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameAllEatUp::Swap(GLAnsGameAllEatUp* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameAllEatUp::GetTypeName() const {
  return "GLAnsGameAllEatUp";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameNotiTurn::kGameIDFieldNumber;
const int GLAnsGameNotiTurn::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameNotiTurn::GLAnsGameNotiTurn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameNotiTurn::InitAsDefaultInstance() {
}

GLAnsGameNotiTurn::GLAnsGameNotiTurn(const GLAnsGameNotiTurn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameNotiTurn::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameNotiTurn::~GLAnsGameNotiTurn() {
  SharedDtor();
}

void GLAnsGameNotiTurn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameNotiTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameNotiTurn& GLAnsGameNotiTurn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameNotiTurn* GLAnsGameNotiTurn::default_instance_ = NULL;

GLAnsGameNotiTurn* GLAnsGameNotiTurn::New() const {
  return new GLAnsGameNotiTurn;
}

void GLAnsGameNotiTurn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameNotiTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameNotiTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameNotiTurn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameNotiTurn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameNotiTurn*>(&from));
}

void GLAnsGameNotiTurn::MergeFrom(const GLAnsGameNotiTurn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameNotiTurn::CopyFrom(const GLAnsGameNotiTurn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameNotiTurn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameNotiTurn::Swap(GLAnsGameNotiTurn* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameNotiTurn::GetTypeName() const {
  return "GLAnsGameNotiTurn";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameMoveTen::kGameIDFieldNumber;
const int GLAnsGameMoveTen::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameMoveTen::GLAnsGameMoveTen()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameMoveTen::InitAsDefaultInstance() {
}

GLAnsGameMoveTen::GLAnsGameMoveTen(const GLAnsGameMoveTen& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameMoveTen::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameMoveTen::~GLAnsGameMoveTen() {
  SharedDtor();
}

void GLAnsGameMoveTen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameMoveTen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameMoveTen& GLAnsGameMoveTen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameMoveTen* GLAnsGameMoveTen::default_instance_ = NULL;

GLAnsGameMoveTen* GLAnsGameMoveTen::New() const {
  return new GLAnsGameMoveTen;
}

void GLAnsGameMoveTen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameMoveTen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameMoveTen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameMoveTen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameMoveTen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameMoveTen*>(&from));
}

void GLAnsGameMoveTen::MergeFrom(const GLAnsGameMoveTen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameMoveTen::CopyFrom(const GLAnsGameMoveTen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameMoveTen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameMoveTen::Swap(GLAnsGameMoveTen* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameMoveTen::GetTypeName() const {
  return "GLAnsGameMoveTen";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameMoveTenAns::kGameIDFieldNumber;
const int GLAnsGameMoveTenAns::kGameIndexFieldNumber;
const int GLAnsGameMoveTenAns::kBMoveFieldNumber;
#endif  // !_MSC_VER

GLAnsGameMoveTenAns::GLAnsGameMoveTenAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameMoveTenAns::InitAsDefaultInstance() {
}

GLAnsGameMoveTenAns::GLAnsGameMoveTenAns(const GLAnsGameMoveTenAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameMoveTenAns::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bmove_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameMoveTenAns::~GLAnsGameMoveTenAns() {
  SharedDtor();
}

void GLAnsGameMoveTenAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameMoveTenAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameMoveTenAns& GLAnsGameMoveTenAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameMoveTenAns* GLAnsGameMoveTenAns::default_instance_ = NULL;

GLAnsGameMoveTenAns* GLAnsGameMoveTenAns::New() const {
  return new GLAnsGameMoveTenAns;
}

void GLAnsGameMoveTenAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bmove_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameMoveTenAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bMove;
        break;
      }
      
      // required bool bMove = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bMove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmove_)));
          set_has_bmove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameMoveTenAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bMove = 3;
  if (has_bmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bmove(), output);
  }
  
}

int GLAnsGameMoveTenAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bMove = 3;
    if (has_bmove()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameMoveTenAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameMoveTenAns*>(&from));
}

void GLAnsGameMoveTenAns::MergeFrom(const GLAnsGameMoveTenAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bmove()) {
      set_bmove(from.bmove());
    }
  }
}

void GLAnsGameMoveTenAns::CopyFrom(const GLAnsGameMoveTenAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameMoveTenAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameMoveTenAns::Swap(GLAnsGameMoveTenAns* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(bmove_, other->bmove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameMoveTenAns::GetTypeName() const {
  return "GLAnsGameMoveTenAns";
}


// ===================================================================

bool GLAnsGameChoiceCard_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameChoiceCard_Type GLAnsGameChoiceCard::SELECT;
const GLAnsGameChoiceCard_Type GLAnsGameChoiceCard::UPSET;
const GLAnsGameChoiceCard_Type GLAnsGameChoiceCard::Type_MIN;
const GLAnsGameChoiceCard_Type GLAnsGameChoiceCard::Type_MAX;
const int GLAnsGameChoiceCard::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameChoiceCard::kGameIDFieldNumber;
const int GLAnsGameChoiceCard::kGameIndexFieldNumber;
const int GLAnsGameChoiceCard::kLstCardFieldNumber;
const int GLAnsGameChoiceCard::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameChoiceCard::GLAnsGameChoiceCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameChoiceCard::InitAsDefaultInstance() {
}

GLAnsGameChoiceCard::GLAnsGameChoiceCard(const GLAnsGameChoiceCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameChoiceCard::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameChoiceCard::~GLAnsGameChoiceCard() {
  SharedDtor();
}

void GLAnsGameChoiceCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameChoiceCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameChoiceCard& GLAnsGameChoiceCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameChoiceCard* GLAnsGameChoiceCard::default_instance_ = NULL;

GLAnsGameChoiceCard* GLAnsGameChoiceCard::New() const {
  return new GLAnsGameChoiceCard;
}

void GLAnsGameChoiceCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameChoiceCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameChoiceCard.Type nType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameChoiceCard_Type_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameChoiceCard_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameChoiceCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
  // required .GLAnsGameChoiceCard.Type nType = 4;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ntype(), output);
  }
  
}

int GLAnsGameChoiceCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameChoiceCard.Type nType = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameChoiceCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameChoiceCard*>(&from));
}

void GLAnsGameChoiceCard::MergeFrom(const GLAnsGameChoiceCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameChoiceCard::CopyFrom(const GLAnsGameChoiceCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameChoiceCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  
  return true;
}

void GLAnsGameChoiceCard::Swap(GLAnsGameChoiceCard* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameChoiceCard::GetTypeName() const {
  return "GLAnsGameChoiceCard";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameShake::kGameIDFieldNumber;
const int GLAnsGameShake::kGameIndexFieldNumber;
const int GLAnsGameShake::kLstCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameShake::GLAnsGameShake()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameShake::InitAsDefaultInstance() {
}

GLAnsGameShake::GLAnsGameShake(const GLAnsGameShake& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameShake::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameShake::~GLAnsGameShake() {
  SharedDtor();
}

void GLAnsGameShake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameShake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameShake& GLAnsGameShake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameShake* GLAnsGameShake::default_instance_ = NULL;

GLAnsGameShake* GLAnsGameShake::New() const {
  return new GLAnsGameShake;
}

void GLAnsGameShake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameShake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameShake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
}

int GLAnsGameShake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameShake::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameShake*>(&from));
}

void GLAnsGameShake::MergeFrom(const GLAnsGameShake& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameShake::CopyFrom(const GLAnsGameShake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameShake::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameShake::Swap(GLAnsGameShake* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameShake::GetTypeName() const {
  return "GLAnsGameShake";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameShakeAns::kGameIDFieldNumber;
const int GLAnsGameShakeAns::kGameIndexFieldNumber;
const int GLAnsGameShakeAns::kLstCardFieldNumber;
const int GLAnsGameShakeAns::kBShakeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameShakeAns::GLAnsGameShakeAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameShakeAns::InitAsDefaultInstance() {
}

GLAnsGameShakeAns::GLAnsGameShakeAns(const GLAnsGameShakeAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameShakeAns::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bshake_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameShakeAns::~GLAnsGameShakeAns() {
  SharedDtor();
}

void GLAnsGameShakeAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameShakeAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameShakeAns& GLAnsGameShakeAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameShakeAns* GLAnsGameShakeAns::default_instance_ = NULL;

GLAnsGameShakeAns* GLAnsGameShakeAns::New() const {
  return new GLAnsGameShakeAns;
}

void GLAnsGameShakeAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bshake_ = false;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameShakeAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectTag(32)) goto parse_bShake;
        break;
      }
      
      // required bool bShake = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bShake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshake_)));
          set_has_bshake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameShakeAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
  // required bool bShake = 4;
  if (has_bshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bshake(), output);
  }
  
}

int GLAnsGameShakeAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bShake = 4;
    if (has_bshake()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameShakeAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameShakeAns*>(&from));
}

void GLAnsGameShakeAns::MergeFrom(const GLAnsGameShakeAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bshake()) {
      set_bshake(from.bshake());
    }
  }
}

void GLAnsGameShakeAns::CopyFrom(const GLAnsGameShakeAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameShakeAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  
  return true;
}

void GLAnsGameShakeAns::Swap(GLAnsGameShakeAns* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(bshake_, other->bshake_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameShakeAns::GetTypeName() const {
  return "GLAnsGameShakeAns";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameShakeCount::kGameIDFieldNumber;
const int GLAnsGameShakeCount::kGameIndexFieldNumber;
const int GLAnsGameShakeCount::kNCntFieldNumber;
#endif  // !_MSC_VER

GLAnsGameShakeCount::GLAnsGameShakeCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameShakeCount::InitAsDefaultInstance() {
}

GLAnsGameShakeCount::GLAnsGameShakeCount(const GLAnsGameShakeCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameShakeCount::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameShakeCount::~GLAnsGameShakeCount() {
  SharedDtor();
}

void GLAnsGameShakeCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameShakeCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameShakeCount& GLAnsGameShakeCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameShakeCount* GLAnsGameShakeCount::default_instance_ = NULL;

GLAnsGameShakeCount* GLAnsGameShakeCount::New() const {
  return new GLAnsGameShakeCount;
}

void GLAnsGameShakeCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameShakeCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCnt;
        break;
      }
      
      // required int32 nCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncnt_)));
          set_has_ncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameShakeCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCnt = 3;
  if (has_ncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncnt(), output);
  }
  
}

int GLAnsGameShakeCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCnt = 3;
    if (has_ncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncnt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameShakeCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameShakeCount*>(&from));
}

void GLAnsGameShakeCount::MergeFrom(const GLAnsGameShakeCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncnt()) {
      set_ncnt(from.ncnt());
    }
  }
}

void GLAnsGameShakeCount::CopyFrom(const GLAnsGameShakeCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameShakeCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameShakeCount::Swap(GLAnsGameShakeCount* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncnt_, other->ncnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameShakeCount::GetTypeName() const {
  return "GLAnsGameShakeCount";
}


// ===================================================================

bool GLAnsGameCapType_CAP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameCapType_CAP_TYPE GLAnsGameCapType::CAP_THREE;
const GLAnsGameCapType_CAP_TYPE GLAnsGameCapType::CAP_DEC;
const GLAnsGameCapType_CAP_TYPE GLAnsGameCapType::CAP_FOUR;
const GLAnsGameCapType_CAP_TYPE GLAnsGameCapType::CAP_FIVE;
const GLAnsGameCapType_CAP_TYPE GLAnsGameCapType::CAP_ZERO;
const GLAnsGameCapType_CAP_TYPE GLAnsGameCapType::CAP_TYPE_MIN;
const GLAnsGameCapType_CAP_TYPE GLAnsGameCapType::CAP_TYPE_MAX;
const int GLAnsGameCapType::CAP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameCapType::kGameIDFieldNumber;
const int GLAnsGameCapType::kGameIndexFieldNumber;
const int GLAnsGameCapType::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameCapType::GLAnsGameCapType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameCapType::InitAsDefaultInstance() {
}

GLAnsGameCapType::GLAnsGameCapType(const GLAnsGameCapType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameCapType::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameCapType::~GLAnsGameCapType() {
  SharedDtor();
}

void GLAnsGameCapType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameCapType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameCapType& GLAnsGameCapType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameCapType* GLAnsGameCapType::default_instance_ = NULL;

GLAnsGameCapType* GLAnsGameCapType::New() const {
  return new GLAnsGameCapType;
}

void GLAnsGameCapType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameCapType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameCapType.CAP_TYPE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameCapType_CAP_TYPE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameCapType_CAP_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameCapType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameCapType.CAP_TYPE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int GLAnsGameCapType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameCapType.CAP_TYPE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameCapType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameCapType*>(&from));
}

void GLAnsGameCapType::MergeFrom(const GLAnsGameCapType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameCapType::CopyFrom(const GLAnsGameCapType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameCapType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameCapType::Swap(GLAnsGameCapType* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameCapType::GetTypeName() const {
  return "GLAnsGameCapType";
}


// ===================================================================

bool GLAnsGameGodori_JOKBO_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameGodori_JOKBO_STATE GLAnsGameGodori::JOKBO_WARNNING;
const GLAnsGameGodori_JOKBO_STATE GLAnsGameGodori::JOKBO_COMPLETE;
const GLAnsGameGodori_JOKBO_STATE GLAnsGameGodori::JOKBO_FAIL;
const GLAnsGameGodori_JOKBO_STATE GLAnsGameGodori::JOKBO_ZERO;
const GLAnsGameGodori_JOKBO_STATE GLAnsGameGodori::JOKBO_STATE_MIN;
const GLAnsGameGodori_JOKBO_STATE GLAnsGameGodori::JOKBO_STATE_MAX;
const int GLAnsGameGodori::JOKBO_STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameGodori::kGameIDFieldNumber;
const int GLAnsGameGodori::kGameIndexFieldNumber;
const int GLAnsGameGodori::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameGodori::GLAnsGameGodori()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameGodori::InitAsDefaultInstance() {
}

GLAnsGameGodori::GLAnsGameGodori(const GLAnsGameGodori& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameGodori::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameGodori::~GLAnsGameGodori() {
  SharedDtor();
}

void GLAnsGameGodori::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameGodori::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameGodori& GLAnsGameGodori::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameGodori* GLAnsGameGodori::default_instance_ = NULL;

GLAnsGameGodori* GLAnsGameGodori::New() const {
  return new GLAnsGameGodori;
}

void GLAnsGameGodori::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameGodori::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameGodori.JOKBO_STATE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameGodori_JOKBO_STATE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameGodori_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameGodori::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameGodori.JOKBO_STATE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int GLAnsGameGodori::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameGodori.JOKBO_STATE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameGodori::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameGodori*>(&from));
}

void GLAnsGameGodori::MergeFrom(const GLAnsGameGodori& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameGodori::CopyFrom(const GLAnsGameGodori& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameGodori::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameGodori::Swap(GLAnsGameGodori* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameGodori::GetTypeName() const {
  return "GLAnsGameGodori";
}


// ===================================================================

bool GLAnsGameKusa_JOKBO_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameKusa_JOKBO_STATE GLAnsGameKusa::JOKBO_WARNNING;
const GLAnsGameKusa_JOKBO_STATE GLAnsGameKusa::JOKBO_COMPLETE;
const GLAnsGameKusa_JOKBO_STATE GLAnsGameKusa::JOKBO_FAIL;
const GLAnsGameKusa_JOKBO_STATE GLAnsGameKusa::JOKBO_ZERO;
const GLAnsGameKusa_JOKBO_STATE GLAnsGameKusa::JOKBO_STATE_MIN;
const GLAnsGameKusa_JOKBO_STATE GLAnsGameKusa::JOKBO_STATE_MAX;
const int GLAnsGameKusa::JOKBO_STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameKusa::kGameIDFieldNumber;
const int GLAnsGameKusa::kGameIndexFieldNumber;
const int GLAnsGameKusa::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameKusa::GLAnsGameKusa()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameKusa::InitAsDefaultInstance() {
}

GLAnsGameKusa::GLAnsGameKusa(const GLAnsGameKusa& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameKusa::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameKusa::~GLAnsGameKusa() {
  SharedDtor();
}

void GLAnsGameKusa::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameKusa::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameKusa& GLAnsGameKusa::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameKusa* GLAnsGameKusa::default_instance_ = NULL;

GLAnsGameKusa* GLAnsGameKusa::New() const {
  return new GLAnsGameKusa;
}

void GLAnsGameKusa::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameKusa::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameKusa.JOKBO_STATE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameKusa_JOKBO_STATE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameKusa_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameKusa::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameKusa.JOKBO_STATE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int GLAnsGameKusa::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameKusa.JOKBO_STATE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameKusa::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameKusa*>(&from));
}

void GLAnsGameKusa::MergeFrom(const GLAnsGameKusa& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameKusa::CopyFrom(const GLAnsGameKusa& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameKusa::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameKusa::Swap(GLAnsGameKusa* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameKusa::GetTypeName() const {
  return "GLAnsGameKusa";
}


// ===================================================================

bool GLAnsGameRed_JOKBO_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameRed_JOKBO_STATE GLAnsGameRed::JOKBO_WARNNING;
const GLAnsGameRed_JOKBO_STATE GLAnsGameRed::JOKBO_COMPLETE;
const GLAnsGameRed_JOKBO_STATE GLAnsGameRed::JOKBO_FAIL;
const GLAnsGameRed_JOKBO_STATE GLAnsGameRed::JOKBO_ZERO;
const GLAnsGameRed_JOKBO_STATE GLAnsGameRed::JOKBO_STATE_MIN;
const GLAnsGameRed_JOKBO_STATE GLAnsGameRed::JOKBO_STATE_MAX;
const int GLAnsGameRed::JOKBO_STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameRed::kGameIDFieldNumber;
const int GLAnsGameRed::kGameIndexFieldNumber;
const int GLAnsGameRed::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameRed::GLAnsGameRed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameRed::InitAsDefaultInstance() {
}

GLAnsGameRed::GLAnsGameRed(const GLAnsGameRed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameRed::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameRed::~GLAnsGameRed() {
  SharedDtor();
}

void GLAnsGameRed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameRed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameRed& GLAnsGameRed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameRed* GLAnsGameRed::default_instance_ = NULL;

GLAnsGameRed* GLAnsGameRed::New() const {
  return new GLAnsGameRed;
}

void GLAnsGameRed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameRed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameRed.JOKBO_STATE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameRed_JOKBO_STATE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameRed_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameRed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameRed.JOKBO_STATE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int GLAnsGameRed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameRed.JOKBO_STATE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameRed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameRed*>(&from));
}

void GLAnsGameRed::MergeFrom(const GLAnsGameRed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameRed::CopyFrom(const GLAnsGameRed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameRed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameRed::Swap(GLAnsGameRed* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameRed::GetTypeName() const {
  return "GLAnsGameRed";
}


// ===================================================================

bool GLAnsGameBlue_JOKBO_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameBlue_JOKBO_STATE GLAnsGameBlue::JOKBO_WARNNING;
const GLAnsGameBlue_JOKBO_STATE GLAnsGameBlue::JOKBO_COMPLETE;
const GLAnsGameBlue_JOKBO_STATE GLAnsGameBlue::JOKBO_FAIL;
const GLAnsGameBlue_JOKBO_STATE GLAnsGameBlue::JOKBO_ZERO;
const GLAnsGameBlue_JOKBO_STATE GLAnsGameBlue::JOKBO_STATE_MIN;
const GLAnsGameBlue_JOKBO_STATE GLAnsGameBlue::JOKBO_STATE_MAX;
const int GLAnsGameBlue::JOKBO_STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameBlue::kGameIDFieldNumber;
const int GLAnsGameBlue::kGameIndexFieldNumber;
const int GLAnsGameBlue::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameBlue::GLAnsGameBlue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameBlue::InitAsDefaultInstance() {
}

GLAnsGameBlue::GLAnsGameBlue(const GLAnsGameBlue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameBlue::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameBlue::~GLAnsGameBlue() {
  SharedDtor();
}

void GLAnsGameBlue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameBlue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameBlue& GLAnsGameBlue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameBlue* GLAnsGameBlue::default_instance_ = NULL;

GLAnsGameBlue* GLAnsGameBlue::New() const {
  return new GLAnsGameBlue;
}

void GLAnsGameBlue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameBlue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameBlue.JOKBO_STATE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameBlue_JOKBO_STATE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameBlue_JOKBO_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameBlue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameBlue.JOKBO_STATE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int GLAnsGameBlue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameBlue.JOKBO_STATE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameBlue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameBlue*>(&from));
}

void GLAnsGameBlue::MergeFrom(const GLAnsGameBlue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameBlue::CopyFrom(const GLAnsGameBlue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameBlue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameBlue::Swap(GLAnsGameBlue* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameBlue::GetTypeName() const {
  return "GLAnsGameBlue";
}


// ===================================================================

bool GLAnsGameBak_BAK_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameBak_BAK_TYPE GLAnsGameBak::CAPBAK;
const GLAnsGameBak_BAK_TYPE GLAnsGameBak::ONEBAK;
const GLAnsGameBak_BAK_TYPE GLAnsGameBak::GOBAK;
const GLAnsGameBak_BAK_TYPE GLAnsGameBak::MUNGBAK;
const GLAnsGameBak_BAK_TYPE GLAnsGameBak::BAK_CANCEL;
const GLAnsGameBak_BAK_TYPE GLAnsGameBak::BAK_ZERO;
const GLAnsGameBak_BAK_TYPE GLAnsGameBak::BAK_TYPE_MIN;
const GLAnsGameBak_BAK_TYPE GLAnsGameBak::BAK_TYPE_MAX;
const int GLAnsGameBak::BAK_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameBak::kGameIDFieldNumber;
const int GLAnsGameBak::kGameIndexFieldNumber;
const int GLAnsGameBak::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameBak::GLAnsGameBak()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameBak::InitAsDefaultInstance() {
}

GLAnsGameBak::GLAnsGameBak(const GLAnsGameBak& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameBak::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameBak::~GLAnsGameBak() {
  SharedDtor();
}

void GLAnsGameBak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameBak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameBak& GLAnsGameBak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameBak* GLAnsGameBak::default_instance_ = NULL;

GLAnsGameBak* GLAnsGameBak::New() const {
  return new GLAnsGameBak;
}

void GLAnsGameBak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameBak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameBak.BAK_TYPE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameBak_BAK_TYPE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameBak_BAK_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameBak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameBak.BAK_TYPE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int GLAnsGameBak::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameBak.BAK_TYPE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameBak::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameBak*>(&from));
}

void GLAnsGameBak::MergeFrom(const GLAnsGameBak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameBak::CopyFrom(const GLAnsGameBak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameBak::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameBak::Swap(GLAnsGameBak* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameBak::GetTypeName() const {
  return "GLAnsGameBak";
}


// ===================================================================

bool GLAnsGameBakFail_BAK_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameBakFail_BAK_TYPE GLAnsGameBakFail::CAPBAK;
const GLAnsGameBakFail_BAK_TYPE GLAnsGameBakFail::ONEBAK;
const GLAnsGameBakFail_BAK_TYPE GLAnsGameBakFail::GOBAK;
const GLAnsGameBakFail_BAK_TYPE GLAnsGameBakFail::MUNGBAK;
const GLAnsGameBakFail_BAK_TYPE GLAnsGameBakFail::BAK_CANCEL;
const GLAnsGameBakFail_BAK_TYPE GLAnsGameBakFail::BAK_ZERO;
const GLAnsGameBakFail_BAK_TYPE GLAnsGameBakFail::BAK_TYPE_MIN;
const GLAnsGameBakFail_BAK_TYPE GLAnsGameBakFail::BAK_TYPE_MAX;
const int GLAnsGameBakFail::BAK_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameBakFail::kGameIDFieldNumber;
const int GLAnsGameBakFail::kGameIndexFieldNumber;
const int GLAnsGameBakFail::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameBakFail::GLAnsGameBakFail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameBakFail::InitAsDefaultInstance() {
}

GLAnsGameBakFail::GLAnsGameBakFail(const GLAnsGameBakFail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameBakFail::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameBakFail::~GLAnsGameBakFail() {
  SharedDtor();
}

void GLAnsGameBakFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameBakFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameBakFail& GLAnsGameBakFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameBakFail* GLAnsGameBakFail::default_instance_ = NULL;

GLAnsGameBakFail* GLAnsGameBakFail::New() const {
  return new GLAnsGameBakFail;
}

void GLAnsGameBakFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameBakFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameBakFail.BAK_TYPE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameBakFail_BAK_TYPE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameBakFail_BAK_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameBakFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameBakFail.BAK_TYPE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int GLAnsGameBakFail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameBakFail.BAK_TYPE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameBakFail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameBakFail*>(&from));
}

void GLAnsGameBakFail::MergeFrom(const GLAnsGameBakFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameBakFail::CopyFrom(const GLAnsGameBakFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameBakFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameBakFail::Swap(GLAnsGameBakFail* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameBakFail::GetTypeName() const {
  return "GLAnsGameBakFail";
}


// ===================================================================

bool GLAnsGameNotiMission_MISSION_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::CARD;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::NONE;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::UNCONDITION;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::TWOBBUCK;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_38;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_13;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_18;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_ali_15;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_ali_16;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_ali_25;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_ali_26;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_doksa_113;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_doksa_114;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_doksa_213;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_doksa_214;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_kubbing_133;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_kubbing_134;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_kubbing_233;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_kubbing_234;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_jangbbing_137;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_jangbbing_138;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_jangbbing_237;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_jangbbing_238;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_jangsa_3713;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_jangsa_3814;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_jangsa_3714;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_jangsa_3813;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_seroulk_1321;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_seroulk_1422;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_seroulk_1322;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_seroulk_1421;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_47;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_TWO_37;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_godori;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_blue;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_red;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_cho;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_1_3_8;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_1_11_12;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_3_8_12;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_1_3_11;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_THREE_8_11_12;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_1;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_2;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_3;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_4;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_5;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_6;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_7;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_8;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_9;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_10;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_11;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::kMI_MONTH_12;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::MISSION_ZERO;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::MISSION_TYPE_MIN;
const GLAnsGameNotiMission_MISSION_TYPE GLAnsGameNotiMission::MISSION_TYPE_MAX;
const int GLAnsGameNotiMission::MISSION_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameNotiMission::kNMulNumFieldNumber;
const int GLAnsGameNotiMission::kLstCardFieldNumber;
const int GLAnsGameNotiMission::kTitleFieldNumber;
const int GLAnsGameNotiMission::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameNotiMission::GLAnsGameNotiMission()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameNotiMission::InitAsDefaultInstance() {
}

GLAnsGameNotiMission::GLAnsGameNotiMission(const GLAnsGameNotiMission& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameNotiMission::SharedCtor() {
  _cached_size_ = 0;
  nmulnum_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameNotiMission::~GLAnsGameNotiMission() {
  SharedDtor();
}

void GLAnsGameNotiMission::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void GLAnsGameNotiMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameNotiMission& GLAnsGameNotiMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameNotiMission* GLAnsGameNotiMission::default_instance_ = NULL;

GLAnsGameNotiMission* GLAnsGameNotiMission::New() const {
  return new GLAnsGameNotiMission;
}

void GLAnsGameNotiMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nmulnum_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    ntype_ = 1;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameNotiMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nMulNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulnum_)));
          set_has_nmulnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lstCard;
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameNotiMission.MISSION_TYPE nType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameNotiMission_MISSION_TYPE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameNotiMission_MISSION_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameNotiMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nMulNum = 1;
  if (has_nmulnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nmulnum(), output);
  }
  
  // repeated int32 lstCard = 2;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lstcard(i), output);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // required .GLAnsGameNotiMission.MISSION_TYPE nType = 4;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ntype(), output);
  }
  
}

int GLAnsGameNotiMission::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nMulNum = 1;
    if (has_nmulnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulnum());
    }
    
    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required .GLAnsGameNotiMission.MISSION_TYPE nType = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  // repeated int32 lstCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameNotiMission::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameNotiMission*>(&from));
}

void GLAnsGameNotiMission::MergeFrom(const GLAnsGameNotiMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nmulnum()) {
      set_nmulnum(from.nmulnum());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameNotiMission::CopyFrom(const GLAnsGameNotiMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameNotiMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void GLAnsGameNotiMission::Swap(GLAnsGameNotiMission* other) {
  if (other != this) {
    std::swap(nmulnum_, other->nmulnum_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(title_, other->title_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameNotiMission::GetTypeName() const {
  return "GLAnsGameNotiMission";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameNotiMissionCard::kGameIDFieldNumber;
const int GLAnsGameNotiMissionCard::kGameIndexFieldNumber;
const int GLAnsGameNotiMissionCard::kLstCardFieldNumber;
#endif  // !_MSC_VER

GLAnsGameNotiMissionCard::GLAnsGameNotiMissionCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameNotiMissionCard::InitAsDefaultInstance() {
}

GLAnsGameNotiMissionCard::GLAnsGameNotiMissionCard(const GLAnsGameNotiMissionCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameNotiMissionCard::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameNotiMissionCard::~GLAnsGameNotiMissionCard() {
  SharedDtor();
}

void GLAnsGameNotiMissionCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameNotiMissionCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameNotiMissionCard& GLAnsGameNotiMissionCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameNotiMissionCard* GLAnsGameNotiMissionCard::default_instance_ = NULL;

GLAnsGameNotiMissionCard* GLAnsGameNotiMissionCard::New() const {
  return new GLAnsGameNotiMissionCard;
}

void GLAnsGameNotiMissionCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  lstcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameNotiMissionCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        break;
      }
      
      // repeated int32 lstCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lstCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lstcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lstCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameNotiMissionCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 lstCard = 3;
  for (int i = 0; i < this->lstcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lstcard(i), output);
  }
  
}

int GLAnsGameNotiMissionCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  // repeated int32 lstCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lstcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lstcard(i));
    }
    total_size += 1 * this->lstcard_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameNotiMissionCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameNotiMissionCard*>(&from));
}

void GLAnsGameNotiMissionCard::MergeFrom(const GLAnsGameNotiMissionCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  lstcard_.MergeFrom(from.lstcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameNotiMissionCard::CopyFrom(const GLAnsGameNotiMissionCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameNotiMissionCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameNotiMissionCard::Swap(GLAnsGameNotiMissionCard* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    lstcard_.Swap(&other->lstcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameNotiMissionCard::GetTypeName() const {
  return "GLAnsGameNotiMissionCard";
}


// ===================================================================

bool GLAnsGameMissionState_MISSION_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameMissionState_MISSION_STATE GLAnsGameMissionState::FAIL;
const GLAnsGameMissionState_MISSION_STATE GLAnsGameMissionState::SUCCESS;
const GLAnsGameMissionState_MISSION_STATE GLAnsGameMissionState::STATE_ZERO;
const GLAnsGameMissionState_MISSION_STATE GLAnsGameMissionState::MISSION_STATE_MIN;
const GLAnsGameMissionState_MISSION_STATE GLAnsGameMissionState::MISSION_STATE_MAX;
const int GLAnsGameMissionState::MISSION_STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameMissionState::kGameIDFieldNumber;
const int GLAnsGameMissionState::kGameIndexFieldNumber;
const int GLAnsGameMissionState::kMoneyFieldNumber;
const int GLAnsGameMissionState::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameMissionState::GLAnsGameMissionState()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameMissionState::InitAsDefaultInstance() {
}

GLAnsGameMissionState::GLAnsGameMissionState(const GLAnsGameMissionState& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameMissionState::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameMissionState::~GLAnsGameMissionState() {
  SharedDtor();
}

void GLAnsGameMissionState::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (this != default_instance_) {
  }
}

void GLAnsGameMissionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameMissionState& GLAnsGameMissionState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameMissionState* GLAnsGameMissionState::default_instance_ = NULL;

GLAnsGameMissionState* GLAnsGameMissionState::New() const {
  return new GLAnsGameMissionState;
}

void GLAnsGameMissionState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameMissionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_money;
        break;
      }
      
      // required string money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameMissionState.MISSION_STATE nType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameMissionState_MISSION_STATE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameMissionState_MISSION_STATE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameMissionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required string money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->money(), output);
  }
  
  // required .GLAnsGameMissionState.MISSION_STATE nType = 4;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ntype(), output);
  }
  
}

int GLAnsGameMissionState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required string money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
    // required .GLAnsGameMissionState.MISSION_STATE nType = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameMissionState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameMissionState*>(&from));
}

void GLAnsGameMissionState::MergeFrom(const GLAnsGameMissionState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameMissionState::CopyFrom(const GLAnsGameMissionState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameMissionState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void GLAnsGameMissionState::Swap(GLAnsGameMissionState* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(money_, other->money_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameMissionState::GetTypeName() const {
  return "GLAnsGameMissionState";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameGostop::kGameIDFieldNumber;
const int GLAnsGameGostop::kGameIndexFieldNumber;
const int GLAnsGameGostop::kNCntFieldNumber;
const int GLAnsGameGostop::kMoneyFieldNumber;
#endif  // !_MSC_VER

GLAnsGameGostop::GLAnsGameGostop()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameGostop::InitAsDefaultInstance() {
}

GLAnsGameGostop::GLAnsGameGostop(const GLAnsGameGostop& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameGostop::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncnt_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameGostop::~GLAnsGameGostop() {
  SharedDtor();
}

void GLAnsGameGostop::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (this != default_instance_) {
  }
}

void GLAnsGameGostop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameGostop& GLAnsGameGostop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameGostop* GLAnsGameGostop::default_instance_ = NULL;

GLAnsGameGostop* GLAnsGameGostop::New() const {
  return new GLAnsGameGostop;
}

void GLAnsGameGostop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncnt_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameGostop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCnt;
        break;
      }
      
      // required int32 nCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncnt_)));
          set_has_ncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_money;
        break;
      }
      
      // required string money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameGostop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCnt = 3;
  if (has_ncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncnt(), output);
  }
  
  // required string money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->money(), output);
  }
  
}

int GLAnsGameGostop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCnt = 3;
    if (has_ncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncnt());
    }
    
    // required string money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameGostop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameGostop*>(&from));
}

void GLAnsGameGostop::MergeFrom(const GLAnsGameGostop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncnt()) {
      set_ncnt(from.ncnt());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
}

void GLAnsGameGostop::CopyFrom(const GLAnsGameGostop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameGostop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void GLAnsGameGostop::Swap(GLAnsGameGostop* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncnt_, other->ncnt_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameGostop::GetTypeName() const {
  return "GLAnsGameGostop";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameGostopAns::kGameIDFieldNumber;
const int GLAnsGameGostopAns::kGameIndexFieldNumber;
const int GLAnsGameGostopAns::kNCntFieldNumber;
#endif  // !_MSC_VER

GLAnsGameGostopAns::GLAnsGameGostopAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameGostopAns::InitAsDefaultInstance() {
}

GLAnsGameGostopAns::GLAnsGameGostopAns(const GLAnsGameGostopAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameGostopAns::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameGostopAns::~GLAnsGameGostopAns() {
  SharedDtor();
}

void GLAnsGameGostopAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameGostopAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameGostopAns& GLAnsGameGostopAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameGostopAns* GLAnsGameGostopAns::default_instance_ = NULL;

GLAnsGameGostopAns* GLAnsGameGostopAns::New() const {
  return new GLAnsGameGostopAns;
}

void GLAnsGameGostopAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameGostopAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCnt;
        break;
      }
      
      // required int32 nCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncnt_)));
          set_has_ncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameGostopAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCnt = 3;
  if (has_ncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncnt(), output);
  }
  
}

int GLAnsGameGostopAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCnt = 3;
    if (has_ncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncnt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameGostopAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameGostopAns*>(&from));
}

void GLAnsGameGostopAns::MergeFrom(const GLAnsGameGostopAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncnt()) {
      set_ncnt(from.ncnt());
    }
  }
}

void GLAnsGameGostopAns::CopyFrom(const GLAnsGameGostopAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameGostopAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameGostopAns::Swap(GLAnsGameGostopAns* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncnt_, other->ncnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameGostopAns::GetTypeName() const {
  return "GLAnsGameGostopAns";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameStopAns::kGameIDFieldNumber;
const int GLAnsGameStopAns::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameStopAns::GLAnsGameStopAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameStopAns::InitAsDefaultInstance() {
}

GLAnsGameStopAns::GLAnsGameStopAns(const GLAnsGameStopAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameStopAns::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameStopAns::~GLAnsGameStopAns() {
  SharedDtor();
}

void GLAnsGameStopAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameStopAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameStopAns& GLAnsGameStopAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameStopAns* GLAnsGameStopAns::default_instance_ = NULL;

GLAnsGameStopAns* GLAnsGameStopAns::New() const {
  return new GLAnsGameStopAns;
}

void GLAnsGameStopAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameStopAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameStopAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameStopAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameStopAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameStopAns*>(&from));
}

void GLAnsGameStopAns::MergeFrom(const GLAnsGameStopAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameStopAns::CopyFrom(const GLAnsGameStopAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameStopAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameStopAns::Swap(GLAnsGameStopAns* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameStopAns::GetTypeName() const {
  return "GLAnsGameStopAns";
}


// ===================================================================

bool GLAnsGameResult_GAME_RESULT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameResult_GAME_RESULT_TYPE GLAnsGameResult::RESULT_NORMAL;
const GLAnsGameResult_GAME_RESULT_TYPE GLAnsGameResult::RESULT_3BBUK;
const GLAnsGameResult_GAME_RESULT_TYPE GLAnsGameResult::RESULT_CHONGTONG;
const GLAnsGameResult_GAME_RESULT_TYPE GLAnsGameResult::RESULT_NAGARI;
const GLAnsGameResult_GAME_RESULT_TYPE GLAnsGameResult::RESULT_ZERO;
const GLAnsGameResult_GAME_RESULT_TYPE GLAnsGameResult::GAME_RESULT_TYPE_MIN;
const GLAnsGameResult_GAME_RESULT_TYPE GLAnsGameResult::GAME_RESULT_TYPE_MAX;
const int GLAnsGameResult::GAME_RESULT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameResult::kGameIDFieldNumber;
const int GLAnsGameResult::kGameIndexFieldNumber;
const int GLAnsGameResult::kLevelFieldNumber;
const int GLAnsGameResult::kMoneyFieldNumber;
const int GLAnsGameResult::kDealPointFieldNumber;
const int GLAnsGameResult::kCapPointFieldNumber;
const int GLAnsGameResult::kTenPointFieldNumber;
const int GLAnsGameResult::kFivePointFieldNumber;
const int GLAnsGameResult::kOnePointFieldNumber;
const int GLAnsGameResult::kGodoriPointFieldNumber;
const int GLAnsGameResult::kRedPointFieldNumber;
const int GLAnsGameResult::kBluePointFieldNumber;
const int GLAnsGameResult::kKusaPointFieldNumber;
const int GLAnsGameResult::kGoCntFieldNumber;
const int GLAnsGameResult::kBasicPointFieldNumber;
const int GLAnsGameResult::kNagariCntFieldNumber;
const int GLAnsGameResult::kNMulGoFieldNumber;
const int GLAnsGameResult::kNMulMissionFieldNumber;
const int GLAnsGameResult::kNMulShakeFieldNumber;
const int GLAnsGameResult::kNMulOneBakFieldNumber;
const int GLAnsGameResult::kNMulCapBakFieldNumber;
const int GLAnsGameResult::kNMulGoBakFieldNumber;
const int GLAnsGameResult::kNMulMungBakFieldNumber;
const int GLAnsGameResult::kNMulNagariFieldNumber;
const int GLAnsGameResult::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameResult::GLAnsGameResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameResult::InitAsDefaultInstance() {
}

GLAnsGameResult::GLAnsGameResult(const GLAnsGameResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameResult::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dealpoint_ = 0;
  cappoint_ = 0;
  tenpoint_ = 0;
  fivepoint_ = 0;
  onepoint_ = 0;
  godoripoint_ = 0;
  redpoint_ = 0;
  bluepoint_ = 0;
  kusapoint_ = 0;
  gocnt_ = 0;
  basicpoint_ = 0;
  nagaricnt_ = 0;
  nmulgo_ = 0;
  nmulmission_ = 0;
  nmulshake_ = 0;
  nmulonebak_ = 0;
  nmulcapbak_ = 0;
  nmulgobak_ = 0;
  nmulmungbak_ = 0;
  nmulnagari_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameResult::~GLAnsGameResult() {
  SharedDtor();
}

void GLAnsGameResult::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (this != default_instance_) {
  }
}

void GLAnsGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameResult& GLAnsGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameResult* GLAnsGameResult::default_instance_ = NULL;

GLAnsGameResult* GLAnsGameResult::New() const {
  return new GLAnsGameResult;
}

void GLAnsGameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    dealpoint_ = 0;
    cappoint_ = 0;
    tenpoint_ = 0;
    fivepoint_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    onepoint_ = 0;
    godoripoint_ = 0;
    redpoint_ = 0;
    bluepoint_ = 0;
    kusapoint_ = 0;
    gocnt_ = 0;
    basicpoint_ = 0;
    nagaricnt_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nmulgo_ = 0;
    nmulmission_ = 0;
    nmulshake_ = 0;
    nmulonebak_ = 0;
    nmulcapbak_ = 0;
    nmulgobak_ = 0;
    nmulmungbak_ = 0;
    nmulnagari_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ntype_ = 1;
  }
  level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // repeated int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        if (input->ExpectTag(34)) goto parse_money;
        break;
      }
      
      // required string money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dealPoint;
        break;
      }
      
      // required int32 dealPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealpoint_)));
          set_has_dealpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_capPoint;
        break;
      }
      
      // required int32 capPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cappoint_)));
          set_has_cappoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tenPoint;
        break;
      }
      
      // required int32 tenPoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenpoint_)));
          set_has_tenpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fivePoint;
        break;
      }
      
      // required int32 fivePoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fivePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fivepoint_)));
          set_has_fivepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_onePoint;
        break;
      }
      
      // required int32 onePoint = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onepoint_)));
          set_has_onepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_godoriPoint;
        break;
      }
      
      // required int32 godoriPoint = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godoriPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godoripoint_)));
          set_has_godoripoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_redPoint;
        break;
      }
      
      // required int32 redPoint = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redpoint_)));
          set_has_redpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bluePoint;
        break;
      }
      
      // required int32 bluePoint = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bluePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluepoint_)));
          set_has_bluepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_kusaPoint;
        break;
      }
      
      // required int32 kusaPoint = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kusaPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kusapoint_)));
          set_has_kusapoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_goCnt;
        break;
      }
      
      // required int32 goCnt = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gocnt_)));
          set_has_gocnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_basicPoint;
        break;
      }
      
      // required int32 basicPoint = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basicPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basicpoint_)));
          set_has_basicpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_nagariCnt;
        break;
      }
      
      // required int32 nagariCnt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nagariCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nagaricnt_)));
          set_has_nagaricnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_nMulGo;
        break;
      }
      
      // required int32 nMulGo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMulGo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulgo_)));
          set_has_nmulgo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_nMulMission;
        break;
      }
      
      // required int32 nMulMission = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMulMission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulmission_)));
          set_has_nmulmission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_nMulShake;
        break;
      }
      
      // required int32 nMulShake = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMulShake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulshake_)));
          set_has_nmulshake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_nMulOneBak;
        break;
      }
      
      // required int32 nMulOneBak = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMulOneBak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulonebak_)));
          set_has_nmulonebak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_nMulCapBak;
        break;
      }
      
      // required int32 nMulCapBak = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMulCapBak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulcapbak_)));
          set_has_nmulcapbak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_nMulGoBak;
        break;
      }
      
      // required int32 nMulGoBak = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMulGoBak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulgobak_)));
          set_has_nmulgobak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_nMulMungBak;
        break;
      }
      
      // required int32 nMulMungBak = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMulMungBak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulmungbak_)));
          set_has_nmulmungbak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nMulNagari;
        break;
      }
      
      // required int32 nMulNagari = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMulNagari:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmulnagari_)));
          set_has_nmulnagari();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameResult.GAME_RESULT_TYPE nType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameResult_GAME_RESULT_TYPE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameResult_GAME_RESULT_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // repeated int32 level = 3;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->level(i), output);
  }
  
  // required string money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->money(), output);
  }
  
  // required int32 dealPoint = 5;
  if (has_dealpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dealpoint(), output);
  }
  
  // required int32 capPoint = 6;
  if (has_cappoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cappoint(), output);
  }
  
  // required int32 tenPoint = 7;
  if (has_tenpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tenpoint(), output);
  }
  
  // required int32 fivePoint = 8;
  if (has_fivepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fivepoint(), output);
  }
  
  // required int32 onePoint = 9;
  if (has_onepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->onepoint(), output);
  }
  
  // required int32 godoriPoint = 10;
  if (has_godoripoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->godoripoint(), output);
  }
  
  // required int32 redPoint = 11;
  if (has_redpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->redpoint(), output);
  }
  
  // required int32 bluePoint = 12;
  if (has_bluepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bluepoint(), output);
  }
  
  // required int32 kusaPoint = 13;
  if (has_kusapoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->kusapoint(), output);
  }
  
  // required int32 goCnt = 14;
  if (has_gocnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gocnt(), output);
  }
  
  // required int32 basicPoint = 15;
  if (has_basicpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->basicpoint(), output);
  }
  
  // required int32 nagariCnt = 16;
  if (has_nagaricnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->nagaricnt(), output);
  }
  
  // required int32 nMulGo = 17;
  if (has_nmulgo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->nmulgo(), output);
  }
  
  // required int32 nMulMission = 18;
  if (has_nmulmission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->nmulmission(), output);
  }
  
  // required int32 nMulShake = 19;
  if (has_nmulshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nmulshake(), output);
  }
  
  // required int32 nMulOneBak = 20;
  if (has_nmulonebak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->nmulonebak(), output);
  }
  
  // required int32 nMulCapBak = 21;
  if (has_nmulcapbak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->nmulcapbak(), output);
  }
  
  // required int32 nMulGoBak = 22;
  if (has_nmulgobak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->nmulgobak(), output);
  }
  
  // required int32 nMulMungBak = 23;
  if (has_nmulmungbak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nmulmungbak(), output);
  }
  
  // required int32 nMulNagari = 24;
  if (has_nmulnagari()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nmulnagari(), output);
  }
  
  // required .GLAnsGameResult.GAME_RESULT_TYPE nType = 25;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->ntype(), output);
  }
  
}

int GLAnsGameResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required string money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
    // required int32 dealPoint = 5;
    if (has_dealpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealpoint());
    }
    
    // required int32 capPoint = 6;
    if (has_cappoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cappoint());
    }
    
    // required int32 tenPoint = 7;
    if (has_tenpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenpoint());
    }
    
    // required int32 fivePoint = 8;
    if (has_fivepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fivepoint());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 onePoint = 9;
    if (has_onepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onepoint());
    }
    
    // required int32 godoriPoint = 10;
    if (has_godoripoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godoripoint());
    }
    
    // required int32 redPoint = 11;
    if (has_redpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redpoint());
    }
    
    // required int32 bluePoint = 12;
    if (has_bluepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluepoint());
    }
    
    // required int32 kusaPoint = 13;
    if (has_kusapoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kusapoint());
    }
    
    // required int32 goCnt = 14;
    if (has_gocnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gocnt());
    }
    
    // required int32 basicPoint = 15;
    if (has_basicpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basicpoint());
    }
    
    // required int32 nagariCnt = 16;
    if (has_nagaricnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nagaricnt());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 nMulGo = 17;
    if (has_nmulgo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulgo());
    }
    
    // required int32 nMulMission = 18;
    if (has_nmulmission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulmission());
    }
    
    // required int32 nMulShake = 19;
    if (has_nmulshake()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulshake());
    }
    
    // required int32 nMulOneBak = 20;
    if (has_nmulonebak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulonebak());
    }
    
    // required int32 nMulCapBak = 21;
    if (has_nmulcapbak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulcapbak());
    }
    
    // required int32 nMulGoBak = 22;
    if (has_nmulgobak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulgobak());
    }
    
    // required int32 nMulMungBak = 23;
    if (has_nmulmungbak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulmungbak());
    }
    
    // required int32 nMulNagari = 24;
    if (has_nmulnagari()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmulnagari());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required .GLAnsGameResult.GAME_RESULT_TYPE nType = 25;
    if (has_ntype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  // repeated int32 level = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameResult*>(&from));
}

void GLAnsGameResult::MergeFrom(const GLAnsGameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_dealpoint()) {
      set_dealpoint(from.dealpoint());
    }
    if (from.has_cappoint()) {
      set_cappoint(from.cappoint());
    }
    if (from.has_tenpoint()) {
      set_tenpoint(from.tenpoint());
    }
    if (from.has_fivepoint()) {
      set_fivepoint(from.fivepoint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_onepoint()) {
      set_onepoint(from.onepoint());
    }
    if (from.has_godoripoint()) {
      set_godoripoint(from.godoripoint());
    }
    if (from.has_redpoint()) {
      set_redpoint(from.redpoint());
    }
    if (from.has_bluepoint()) {
      set_bluepoint(from.bluepoint());
    }
    if (from.has_kusapoint()) {
      set_kusapoint(from.kusapoint());
    }
    if (from.has_gocnt()) {
      set_gocnt(from.gocnt());
    }
    if (from.has_basicpoint()) {
      set_basicpoint(from.basicpoint());
    }
    if (from.has_nagaricnt()) {
      set_nagaricnt(from.nagaricnt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nmulgo()) {
      set_nmulgo(from.nmulgo());
    }
    if (from.has_nmulmission()) {
      set_nmulmission(from.nmulmission());
    }
    if (from.has_nmulshake()) {
      set_nmulshake(from.nmulshake());
    }
    if (from.has_nmulonebak()) {
      set_nmulonebak(from.nmulonebak());
    }
    if (from.has_nmulcapbak()) {
      set_nmulcapbak(from.nmulcapbak());
    }
    if (from.has_nmulgobak()) {
      set_nmulgobak(from.nmulgobak());
    }
    if (from.has_nmulmungbak()) {
      set_nmulmungbak(from.nmulmungbak());
    }
    if (from.has_nmulnagari()) {
      set_nmulnagari(from.nmulnagari());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameResult::CopyFrom(const GLAnsGameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x01fffffa) != 0x01fffffa) return false;
  
  return true;
}

void GLAnsGameResult::Swap(GLAnsGameResult* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    level_.Swap(&other->level_);
    std::swap(money_, other->money_);
    std::swap(dealpoint_, other->dealpoint_);
    std::swap(cappoint_, other->cappoint_);
    std::swap(tenpoint_, other->tenpoint_);
    std::swap(fivepoint_, other->fivepoint_);
    std::swap(onepoint_, other->onepoint_);
    std::swap(godoripoint_, other->godoripoint_);
    std::swap(redpoint_, other->redpoint_);
    std::swap(bluepoint_, other->bluepoint_);
    std::swap(kusapoint_, other->kusapoint_);
    std::swap(gocnt_, other->gocnt_);
    std::swap(basicpoint_, other->basicpoint_);
    std::swap(nagaricnt_, other->nagaricnt_);
    std::swap(nmulgo_, other->nmulgo_);
    std::swap(nmulmission_, other->nmulmission_);
    std::swap(nmulshake_, other->nmulshake_);
    std::swap(nmulonebak_, other->nmulonebak_);
    std::swap(nmulcapbak_, other->nmulcapbak_);
    std::swap(nmulgobak_, other->nmulgobak_);
    std::swap(nmulmungbak_, other->nmulmungbak_);
    std::swap(nmulnagari_, other->nmulnagari_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameResult::GetTypeName() const {
  return "GLAnsGameResult";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameNotiPoint::kGameIDFieldNumber;
const int GLAnsGameNotiPoint::kGameIndexFieldNumber;
const int GLAnsGameNotiPoint::kPointFieldNumber;
#endif  // !_MSC_VER

GLAnsGameNotiPoint::GLAnsGameNotiPoint()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameNotiPoint::InitAsDefaultInstance() {
}

GLAnsGameNotiPoint::GLAnsGameNotiPoint(const GLAnsGameNotiPoint& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameNotiPoint::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameNotiPoint::~GLAnsGameNotiPoint() {
  SharedDtor();
}

void GLAnsGameNotiPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameNotiPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameNotiPoint& GLAnsGameNotiPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameNotiPoint* GLAnsGameNotiPoint::default_instance_ = NULL;

GLAnsGameNotiPoint* GLAnsGameNotiPoint::New() const {
  return new GLAnsGameNotiPoint;
}

void GLAnsGameNotiPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameNotiPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }
      
      // required int32 point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameNotiPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }
  
}

int GLAnsGameNotiPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameNotiPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameNotiPoint*>(&from));
}

void GLAnsGameNotiPoint::MergeFrom(const GLAnsGameNotiPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
}

void GLAnsGameNotiPoint::CopyFrom(const GLAnsGameNotiPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameNotiPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameNotiPoint::Swap(GLAnsGameNotiPoint* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameNotiPoint::GetTypeName() const {
  return "GLAnsGameNotiPoint";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GLAnsGameEnd::GLAnsGameEnd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameEnd::InitAsDefaultInstance() {
}

GLAnsGameEnd::GLAnsGameEnd(const GLAnsGameEnd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameEnd::~GLAnsGameEnd() {
  SharedDtor();
}

void GLAnsGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameEnd& GLAnsGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameEnd* GLAnsGameEnd::default_instance_ = NULL;

GLAnsGameEnd* GLAnsGameEnd::New() const {
  return new GLAnsGameEnd;
}

void GLAnsGameEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void GLAnsGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int GLAnsGameEnd::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameEnd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameEnd*>(&from));
}

void GLAnsGameEnd::MergeFrom(const GLAnsGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void GLAnsGameEnd::CopyFrom(const GLAnsGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameEnd::IsInitialized() const {
  
  return true;
}

void GLAnsGameEnd::Swap(GLAnsGameEnd* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameEnd::GetTypeName() const {
  return "GLAnsGameEnd";
}


// ===================================================================

bool GLAnsGameKick_KICK_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameKick_KICK_TYPE GLAnsGameKick::EXIT_RESERVATION;
const GLAnsGameKick_KICK_TYPE GLAnsGameKick::LIMITMONEY;
const GLAnsGameKick_KICK_TYPE GLAnsGameKick::ALLIN;
const GLAnsGameKick_KICK_TYPE GLAnsGameKick::KICK_ZERO;
const GLAnsGameKick_KICK_TYPE GLAnsGameKick::KICK_TYPE_MIN;
const GLAnsGameKick_KICK_TYPE GLAnsGameKick::KICK_TYPE_MAX;
const int GLAnsGameKick::KICK_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameKick::kGameIDFieldNumber;
const int GLAnsGameKick::kGameIndexFieldNumber;
const int GLAnsGameKick::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameKick::GLAnsGameKick()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameKick::InitAsDefaultInstance() {
}

GLAnsGameKick::GLAnsGameKick(const GLAnsGameKick& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameKick::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameKick::~GLAnsGameKick() {
  SharedDtor();
}

void GLAnsGameKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameKick& GLAnsGameKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameKick* GLAnsGameKick::default_instance_ = NULL;

GLAnsGameKick* GLAnsGameKick::New() const {
  return new GLAnsGameKick;
}

void GLAnsGameKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required .GLAnsGameKick.KICK_TYPE nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameKick_KICK_TYPE_IsValid(value)) {
            set_ntype(static_cast< ::GLAnsGameKick_KICK_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required .GLAnsGameKick.KICK_TYPE nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }
  
}

int GLAnsGameKick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required .GLAnsGameKick.KICK_TYPE nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameKick::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameKick*>(&from));
}

void GLAnsGameKick::MergeFrom(const GLAnsGameKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameKick::CopyFrom(const GLAnsGameKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameKick::Swap(GLAnsGameKick* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameKick::GetTypeName() const {
  return "GLAnsGameKick";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameEmoti::kGameIDFieldNumber;
const int GLAnsGameEmoti::kGameIndexFieldNumber;
const int GLAnsGameEmoti::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLAnsGameEmoti::GLAnsGameEmoti()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameEmoti::InitAsDefaultInstance() {
}

GLAnsGameEmoti::GLAnsGameEmoti(const GLAnsGameEmoti& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameEmoti::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameEmoti::~GLAnsGameEmoti() {
  SharedDtor();
}

void GLAnsGameEmoti::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameEmoti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameEmoti& GLAnsGameEmoti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameEmoti* GLAnsGameEmoti::default_instance_ = NULL;

GLAnsGameEmoti* GLAnsGameEmoti::New() const {
  return new GLAnsGameEmoti;
}

void GLAnsGameEmoti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameEmoti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required int32 nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameEmoti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ntype(), output);
  }
  
}

int GLAnsGameEmoti::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameEmoti::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameEmoti*>(&from));
}

void GLAnsGameEmoti::MergeFrom(const GLAnsGameEmoti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLAnsGameEmoti::CopyFrom(const GLAnsGameEmoti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameEmoti::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameEmoti::Swap(GLAnsGameEmoti* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameEmoti::GetTypeName() const {
  return "GLAnsGameEmoti";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameInit::kGameIDFieldNumber;
const int GLAnsGameInit::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLAnsGameInit::GLAnsGameInit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameInit::InitAsDefaultInstance() {
}

GLAnsGameInit::GLAnsGameInit(const GLAnsGameInit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameInit::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameInit::~GLAnsGameInit() {
  SharedDtor();
}

void GLAnsGameInit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameInit& GLAnsGameInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameInit* GLAnsGameInit::default_instance_ = NULL;

GLAnsGameInit* GLAnsGameInit::New() const {
  return new GLAnsGameInit;
}

void GLAnsGameInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLAnsGameInit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameInit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameInit*>(&from));
}

void GLAnsGameInit::MergeFrom(const GLAnsGameInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLAnsGameInit::CopyFrom(const GLAnsGameInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLAnsGameInit::Swap(GLAnsGameInit* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameInit::GetTypeName() const {
  return "GLAnsGameInit";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsGameAutoPlay::kGameIDFieldNumber;
const int GLAnsGameAutoPlay::kGameIndexFieldNumber;
const int GLAnsGameAutoPlay::kBAutoFieldNumber;
#endif  // !_MSC_VER

GLAnsGameAutoPlay::GLAnsGameAutoPlay()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameAutoPlay::InitAsDefaultInstance() {
}

GLAnsGameAutoPlay::GLAnsGameAutoPlay(const GLAnsGameAutoPlay& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameAutoPlay::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bauto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameAutoPlay::~GLAnsGameAutoPlay() {
  SharedDtor();
}

void GLAnsGameAutoPlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsGameAutoPlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameAutoPlay& GLAnsGameAutoPlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameAutoPlay* GLAnsGameAutoPlay::default_instance_ = NULL;

GLAnsGameAutoPlay* GLAnsGameAutoPlay::New() const {
  return new GLAnsGameAutoPlay;
}

void GLAnsGameAutoPlay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bauto_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameAutoPlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bAuto;
        break;
      }
      
      // required bool bAuto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bauto_)));
          set_has_bauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameAutoPlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bAuto = 3;
  if (has_bauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bauto(), output);
  }
  
}

int GLAnsGameAutoPlay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bAuto = 3;
    if (has_bauto()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameAutoPlay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameAutoPlay*>(&from));
}

void GLAnsGameAutoPlay::MergeFrom(const GLAnsGameAutoPlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bauto()) {
      set_bauto(from.bauto());
    }
  }
}

void GLAnsGameAutoPlay::CopyFrom(const GLAnsGameAutoPlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameAutoPlay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsGameAutoPlay::Swap(GLAnsGameAutoPlay* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(bauto_, other->bauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameAutoPlay::GetTypeName() const {
  return "GLAnsGameAutoPlay";
}


// ===================================================================

#ifndef _MSC_VER
const int GLAnsExitReservation::kGameIDFieldNumber;
const int GLAnsExitReservation::kGameIndexFieldNumber;
const int GLAnsExitReservation::kBExitFieldNumber;
#endif  // !_MSC_VER

GLAnsExitReservation::GLAnsExitReservation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsExitReservation::InitAsDefaultInstance() {
}

GLAnsExitReservation::GLAnsExitReservation(const GLAnsExitReservation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsExitReservation::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bexit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsExitReservation::~GLAnsExitReservation() {
  SharedDtor();
}

void GLAnsExitReservation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLAnsExitReservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsExitReservation& GLAnsExitReservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsExitReservation* GLAnsExitReservation::default_instance_ = NULL;

GLAnsExitReservation* GLAnsExitReservation::New() const {
  return new GLAnsExitReservation;
}

void GLAnsExitReservation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bexit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsExitReservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bExit;
        break;
      }
      
      // required bool bExit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bexit_)));
          set_has_bexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsExitReservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bExit = 3;
  if (has_bexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bexit(), output);
  }
  
}

int GLAnsExitReservation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bExit = 3;
    if (has_bexit()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsExitReservation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsExitReservation*>(&from));
}

void GLAnsExitReservation::MergeFrom(const GLAnsExitReservation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bexit()) {
      set_bexit(from.bexit());
    }
  }
}

void GLAnsExitReservation::CopyFrom(const GLAnsExitReservation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsExitReservation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLAnsExitReservation::Swap(GLAnsExitReservation* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(bexit_, other->bexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsExitReservation::GetTypeName() const {
  return "GLAnsExitReservation";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameReady::kGameIDFieldNumber;
const int GLReqGameReady::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLReqGameReady::GLReqGameReady()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameReady::InitAsDefaultInstance() {
}

GLReqGameReady::GLReqGameReady(const GLReqGameReady& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameReady::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameReady::~GLReqGameReady() {
  SharedDtor();
}

void GLReqGameReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameReady& GLReqGameReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameReady* GLReqGameReady::default_instance_ = NULL;

GLReqGameReady* GLReqGameReady::New() const {
  return new GLReqGameReady;
}

void GLReqGameReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLReqGameReady::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameReady*>(&from));
}

void GLReqGameReady::MergeFrom(const GLReqGameReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLReqGameReady::CopyFrom(const GLReqGameReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GLReqGameReady::Swap(GLReqGameReady* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameReady::GetTypeName() const {
  return "GLReqGameReady";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqResetReady::kGameIDFieldNumber;
const int GLReqResetReady::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLReqResetReady::GLReqResetReady()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqResetReady::InitAsDefaultInstance() {
}

GLReqResetReady::GLReqResetReady(const GLReqResetReady& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqResetReady::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqResetReady::~GLReqResetReady() {
  SharedDtor();
}

void GLReqResetReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqResetReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqResetReady& GLReqResetReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqResetReady* GLReqResetReady::default_instance_ = NULL;

GLReqResetReady* GLReqResetReady::New() const {
  return new GLReqResetReady;
}

void GLReqResetReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqResetReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqResetReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLReqResetReady::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqResetReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqResetReady*>(&from));
}

void GLReqResetReady::MergeFrom(const GLReqResetReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLReqResetReady::CopyFrom(const GLReqResetReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqResetReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLReqResetReady::Swap(GLReqResetReady* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqResetReady::GetTypeName() const {
  return "GLReqResetReady";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameInitGame::kGameIDFieldNumber;
const int GLReqGameInitGame::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLReqGameInitGame::GLReqGameInitGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameInitGame::InitAsDefaultInstance() {
}

GLReqGameInitGame::GLReqGameInitGame(const GLReqGameInitGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameInitGame::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameInitGame::~GLReqGameInitGame() {
  SharedDtor();
}

void GLReqGameInitGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameInitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameInitGame& GLReqGameInitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameInitGame* GLReqGameInitGame::default_instance_ = NULL;

GLReqGameInitGame* GLReqGameInitGame::New() const {
  return new GLReqGameInitGame;
}

void GLReqGameInitGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameInitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameInitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLReqGameInitGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameInitGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameInitGame*>(&from));
}

void GLReqGameInitGame::MergeFrom(const GLReqGameInitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLReqGameInitGame::CopyFrom(const GLReqGameInitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameInitGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLReqGameInitGame::Swap(GLReqGameInitGame* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameInitGame::GetTypeName() const {
  return "GLReqGameInitGame";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameReset::kGameIDFieldNumber;
const int GLReqGameReset::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLReqGameReset::GLReqGameReset()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameReset::InitAsDefaultInstance() {
}

GLReqGameReset::GLReqGameReset(const GLReqGameReset& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameReset::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameReset::~GLReqGameReset() {
  SharedDtor();
}

void GLReqGameReset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameReset& GLReqGameReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameReset* GLReqGameReset::default_instance_ = NULL;

GLReqGameReset* GLReqGameReset::New() const {
  return new GLReqGameReset;
}

void GLReqGameReset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLReqGameReset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameReset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameReset*>(&from));
}

void GLReqGameReset::MergeFrom(const GLReqGameReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLReqGameReset::CopyFrom(const GLReqGameReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameReset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLReqGameReset::Swap(GLReqGameReset* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameReset::GetTypeName() const {
  return "GLReqGameReset";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameStart::kGameIDFieldNumber;
const int GLReqGameStart::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLReqGameStart::GLReqGameStart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameStart::InitAsDefaultInstance() {
}

GLReqGameStart::GLReqGameStart(const GLReqGameStart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameStart::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameStart::~GLReqGameStart() {
  SharedDtor();
}

void GLReqGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameStart& GLReqGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameStart* GLReqGameStart::default_instance_ = NULL;

GLReqGameStart* GLReqGameStart::New() const {
  return new GLReqGameStart;
}

void GLReqGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // optional int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // optional int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLReqGameStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameStart*>(&from));
}

void GLReqGameStart::MergeFrom(const GLReqGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLReqGameStart::CopyFrom(const GLReqGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameStart::IsInitialized() const {
  
  return true;
}

void GLReqGameStart::Swap(GLReqGameStart* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameStart::GetTypeName() const {
  return "GLReqGameStart";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameSelectSunCard::kGameIDFieldNumber;
const int GLReqGameSelectSunCard::kGameIndexFieldNumber;
const int GLReqGameSelectSunCard::kNCardFieldNumber;
#endif  // !_MSC_VER

GLReqGameSelectSunCard::GLReqGameSelectSunCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameSelectSunCard::InitAsDefaultInstance() {
}

GLReqGameSelectSunCard::GLReqGameSelectSunCard(const GLReqGameSelectSunCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameSelectSunCard::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameSelectSunCard::~GLReqGameSelectSunCard() {
  SharedDtor();
}

void GLReqGameSelectSunCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameSelectSunCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameSelectSunCard& GLReqGameSelectSunCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameSelectSunCard* GLReqGameSelectSunCard::default_instance_ = NULL;

GLReqGameSelectSunCard* GLReqGameSelectSunCard::New() const {
  return new GLReqGameSelectSunCard;
}

void GLReqGameSelectSunCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameSelectSunCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCard;
        break;
      }
      
      // required int32 nCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncard_)));
          set_has_ncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameSelectSunCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCard = 3;
  if (has_ncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncard(), output);
  }
  
}

int GLReqGameSelectSunCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCard = 3;
    if (has_ncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncard());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameSelectSunCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameSelectSunCard*>(&from));
}

void GLReqGameSelectSunCard::MergeFrom(const GLReqGameSelectSunCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncard()) {
      set_ncard(from.ncard());
    }
  }
}

void GLReqGameSelectSunCard::CopyFrom(const GLReqGameSelectSunCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameSelectSunCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqGameSelectSunCard::Swap(GLReqGameSelectSunCard* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncard_, other->ncard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameSelectSunCard::GetTypeName() const {
  return "GLReqGameSelectSunCard";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameSelectCard::kGameIDFieldNumber;
const int GLReqGameSelectCard::kGameIndexFieldNumber;
const int GLReqGameSelectCard::kNCardFieldNumber;
#endif  // !_MSC_VER

GLReqGameSelectCard::GLReqGameSelectCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameSelectCard::InitAsDefaultInstance() {
}

GLReqGameSelectCard::GLReqGameSelectCard(const GLReqGameSelectCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameSelectCard::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameSelectCard::~GLReqGameSelectCard() {
  SharedDtor();
}

void GLReqGameSelectCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameSelectCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameSelectCard& GLReqGameSelectCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameSelectCard* GLReqGameSelectCard::default_instance_ = NULL;

GLReqGameSelectCard* GLReqGameSelectCard::New() const {
  return new GLReqGameSelectCard;
}

void GLReqGameSelectCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameSelectCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCard;
        break;
      }
      
      // required int32 nCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncard_)));
          set_has_ncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameSelectCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCard = 3;
  if (has_ncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncard(), output);
  }
  
}

int GLReqGameSelectCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCard = 3;
    if (has_ncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncard());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameSelectCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameSelectCard*>(&from));
}

void GLReqGameSelectCard::MergeFrom(const GLReqGameSelectCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncard()) {
      set_ncard(from.ncard());
    }
  }
}

void GLReqGameSelectCard::CopyFrom(const GLReqGameSelectCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameSelectCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqGameSelectCard::Swap(GLReqGameSelectCard* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncard_, other->ncard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameSelectCard::GetTypeName() const {
  return "GLReqGameSelectCard";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameAskGoStopAns::kGameIDFieldNumber;
const int GLReqGameAskGoStopAns::kGameIndexFieldNumber;
const int GLReqGameAskGoStopAns::kBGoFieldNumber;
#endif  // !_MSC_VER

GLReqGameAskGoStopAns::GLReqGameAskGoStopAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameAskGoStopAns::InitAsDefaultInstance() {
}

GLReqGameAskGoStopAns::GLReqGameAskGoStopAns(const GLReqGameAskGoStopAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameAskGoStopAns::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bgo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameAskGoStopAns::~GLReqGameAskGoStopAns() {
  SharedDtor();
}

void GLReqGameAskGoStopAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameAskGoStopAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameAskGoStopAns& GLReqGameAskGoStopAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameAskGoStopAns* GLReqGameAskGoStopAns::default_instance_ = NULL;

GLReqGameAskGoStopAns* GLReqGameAskGoStopAns::New() const {
  return new GLReqGameAskGoStopAns;
}

void GLReqGameAskGoStopAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bgo_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameAskGoStopAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bGo;
        break;
      }
      
      // required bool bGo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bGo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgo_)));
          set_has_bgo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameAskGoStopAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bGo = 3;
  if (has_bgo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bgo(), output);
  }
  
}

int GLReqGameAskGoStopAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bGo = 3;
    if (has_bgo()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameAskGoStopAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameAskGoStopAns*>(&from));
}

void GLReqGameAskGoStopAns::MergeFrom(const GLReqGameAskGoStopAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bgo()) {
      set_bgo(from.bgo());
    }
  }
}

void GLReqGameAskGoStopAns::CopyFrom(const GLReqGameAskGoStopAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameAskGoStopAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqGameAskGoStopAns::Swap(GLReqGameAskGoStopAns* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(bgo_, other->bgo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameAskGoStopAns::GetTypeName() const {
  return "GLReqGameAskGoStopAns";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameAskShakeAns::kGameIDFieldNumber;
const int GLReqGameAskShakeAns::kGameIndexFieldNumber;
const int GLReqGameAskShakeAns::kBShakeFieldNumber;
#endif  // !_MSC_VER

GLReqGameAskShakeAns::GLReqGameAskShakeAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameAskShakeAns::InitAsDefaultInstance() {
}

GLReqGameAskShakeAns::GLReqGameAskShakeAns(const GLReqGameAskShakeAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameAskShakeAns::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bshake_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameAskShakeAns::~GLReqGameAskShakeAns() {
  SharedDtor();
}

void GLReqGameAskShakeAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameAskShakeAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameAskShakeAns& GLReqGameAskShakeAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameAskShakeAns* GLReqGameAskShakeAns::default_instance_ = NULL;

GLReqGameAskShakeAns* GLReqGameAskShakeAns::New() const {
  return new GLReqGameAskShakeAns;
}

void GLReqGameAskShakeAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bshake_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameAskShakeAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bShake;
        break;
      }
      
      // required bool bShake = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bShake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshake_)));
          set_has_bshake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameAskShakeAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bShake = 3;
  if (has_bshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bshake(), output);
  }
  
}

int GLReqGameAskShakeAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bShake = 3;
    if (has_bshake()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameAskShakeAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameAskShakeAns*>(&from));
}

void GLReqGameAskShakeAns::MergeFrom(const GLReqGameAskShakeAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bshake()) {
      set_bshake(from.bshake());
    }
  }
}

void GLReqGameAskShakeAns::CopyFrom(const GLReqGameAskShakeAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameAskShakeAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqGameAskShakeAns::Swap(GLReqGameAskShakeAns* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(bshake_, other->bshake_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameAskShakeAns::GetTypeName() const {
  return "GLReqGameAskShakeAns";
}


// ===================================================================

bool GLReqGameChoiceCardAns_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLReqGameChoiceCardAns_Type GLReqGameChoiceCardAns::SELECT;
const GLReqGameChoiceCardAns_Type GLReqGameChoiceCardAns::UPSET;
const GLReqGameChoiceCardAns_Type GLReqGameChoiceCardAns::Type_MIN;
const GLReqGameChoiceCardAns_Type GLReqGameChoiceCardAns::Type_MAX;
const int GLReqGameChoiceCardAns::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLReqGameChoiceCardAns::kGameIDFieldNumber;
const int GLReqGameChoiceCardAns::kGameIndexFieldNumber;
const int GLReqGameChoiceCardAns::kNCardFieldNumber;
const int GLReqGameChoiceCardAns::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLReqGameChoiceCardAns::GLReqGameChoiceCardAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameChoiceCardAns::InitAsDefaultInstance() {
}

GLReqGameChoiceCardAns::GLReqGameChoiceCardAns(const GLReqGameChoiceCardAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameChoiceCardAns::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ncard_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameChoiceCardAns::~GLReqGameChoiceCardAns() {
  SharedDtor();
}

void GLReqGameChoiceCardAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameChoiceCardAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameChoiceCardAns& GLReqGameChoiceCardAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameChoiceCardAns* GLReqGameChoiceCardAns::default_instance_ = NULL;

GLReqGameChoiceCardAns* GLReqGameChoiceCardAns::New() const {
  return new GLReqGameChoiceCardAns;
}

void GLReqGameChoiceCardAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ncard_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameChoiceCardAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCard;
        break;
      }
      
      // required int32 nCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncard_)));
          set_has_ncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }
      
      // required .GLReqGameChoiceCardAns.Type nType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLReqGameChoiceCardAns_Type_IsValid(value)) {
            set_ntype(static_cast< ::GLReqGameChoiceCardAns_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameChoiceCardAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nCard = 3;
  if (has_ncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncard(), output);
  }
  
  // required .GLReqGameChoiceCardAns.Type nType = 4;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ntype(), output);
  }
  
}

int GLReqGameChoiceCardAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nCard = 3;
    if (has_ncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncard());
    }
    
    // required .GLReqGameChoiceCardAns.Type nType = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameChoiceCardAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameChoiceCardAns*>(&from));
}

void GLReqGameChoiceCardAns::MergeFrom(const GLReqGameChoiceCardAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ncard()) {
      set_ncard(from.ncard());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLReqGameChoiceCardAns::CopyFrom(const GLReqGameChoiceCardAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameChoiceCardAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void GLReqGameChoiceCardAns::Swap(GLReqGameChoiceCardAns* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ncard_, other->ncard_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameChoiceCardAns::GetTypeName() const {
  return "GLReqGameChoiceCardAns";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameMoveTen::kGameIDFieldNumber;
const int GLReqGameMoveTen::kGameIndexFieldNumber;
const int GLReqGameMoveTen::kBMoveFieldNumber;
#endif  // !_MSC_VER

GLReqGameMoveTen::GLReqGameMoveTen()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameMoveTen::InitAsDefaultInstance() {
}

GLReqGameMoveTen::GLReqGameMoveTen(const GLReqGameMoveTen& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameMoveTen::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bmove_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameMoveTen::~GLReqGameMoveTen() {
  SharedDtor();
}

void GLReqGameMoveTen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameMoveTen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameMoveTen& GLReqGameMoveTen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameMoveTen* GLReqGameMoveTen::default_instance_ = NULL;

GLReqGameMoveTen* GLReqGameMoveTen::New() const {
  return new GLReqGameMoveTen;
}

void GLReqGameMoveTen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bmove_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameMoveTen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bMove;
        break;
      }
      
      // required bool bMove = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bMove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmove_)));
          set_has_bmove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameMoveTen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bMove = 3;
  if (has_bmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bmove(), output);
  }
  
}

int GLReqGameMoveTen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bMove = 3;
    if (has_bmove()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameMoveTen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameMoveTen*>(&from));
}

void GLReqGameMoveTen::MergeFrom(const GLReqGameMoveTen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bmove()) {
      set_bmove(from.bmove());
    }
  }
}

void GLReqGameMoveTen::CopyFrom(const GLReqGameMoveTen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameMoveTen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqGameMoveTen::Swap(GLReqGameMoveTen* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(bmove_, other->bmove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameMoveTen::GetTypeName() const {
  return "GLReqGameMoveTen";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameChongTong::kGameIDFieldNumber;
const int GLReqGameChongTong::kGameIndexFieldNumber;
const int GLReqGameChongTong::kBYesFieldNumber;
#endif  // !_MSC_VER

GLReqGameChongTong::GLReqGameChongTong()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameChongTong::InitAsDefaultInstance() {
}

GLReqGameChongTong::GLReqGameChongTong(const GLReqGameChongTong& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameChongTong::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  byes_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameChongTong::~GLReqGameChongTong() {
  SharedDtor();
}

void GLReqGameChongTong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameChongTong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameChongTong& GLReqGameChongTong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameChongTong* GLReqGameChongTong::default_instance_ = NULL;

GLReqGameChongTong* GLReqGameChongTong::New() const {
  return new GLReqGameChongTong;
}

void GLReqGameChongTong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    byes_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameChongTong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bYes;
        break;
      }
      
      // required bool bYes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bYes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &byes_)));
          set_has_byes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameChongTong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bYes = 3;
  if (has_byes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->byes(), output);
  }
  
}

int GLReqGameChongTong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bYes = 3;
    if (has_byes()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameChongTong::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameChongTong*>(&from));
}

void GLReqGameChongTong::MergeFrom(const GLReqGameChongTong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_byes()) {
      set_byes(from.byes());
    }
  }
}

void GLReqGameChongTong::CopyFrom(const GLReqGameChongTong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameChongTong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqGameChongTong::Swap(GLReqGameChongTong* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(byes_, other->byes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameChongTong::GetTypeName() const {
  return "GLReqGameChongTong";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameEnd::kGameIDFieldNumber;
const int GLReqGameEnd::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLReqGameEnd::GLReqGameEnd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameEnd::InitAsDefaultInstance() {
}

GLReqGameEnd::GLReqGameEnd(const GLReqGameEnd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameEnd::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameEnd::~GLReqGameEnd() {
  SharedDtor();
}

void GLReqGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameEnd& GLReqGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameEnd* GLReqGameEnd::default_instance_ = NULL;

GLReqGameEnd* GLReqGameEnd::New() const {
  return new GLReqGameEnd;
}

void GLReqGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLReqGameEnd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameEnd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameEnd*>(&from));
}

void GLReqGameEnd::MergeFrom(const GLReqGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLReqGameEnd::CopyFrom(const GLReqGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLReqGameEnd::Swap(GLReqGameEnd* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameEnd::GetTypeName() const {
  return "GLReqGameEnd";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqResultOk::kGameIDFieldNumber;
const int GLReqResultOk::kGameIndexFieldNumber;
#endif  // !_MSC_VER

GLReqResultOk::GLReqResultOk()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqResultOk::InitAsDefaultInstance() {
}

GLReqResultOk::GLReqResultOk(const GLReqResultOk& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqResultOk::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqResultOk::~GLReqResultOk() {
  SharedDtor();
}

void GLReqResultOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqResultOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqResultOk& GLReqResultOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqResultOk* GLReqResultOk::default_instance_ = NULL;

GLReqResultOk* GLReqResultOk::New() const {
  return new GLReqResultOk;
}

void GLReqResultOk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqResultOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqResultOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
}

int GLReqResultOk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqResultOk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqResultOk*>(&from));
}

void GLReqResultOk::MergeFrom(const GLReqResultOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
  }
}

void GLReqResultOk::CopyFrom(const GLReqResultOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqResultOk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void GLReqResultOk::Swap(GLReqResultOk* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqResultOk::GetTypeName() const {
  return "GLReqResultOk";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameAutoPlay::kGameIDFieldNumber;
const int GLReqGameAutoPlay::kGameIndexFieldNumber;
const int GLReqGameAutoPlay::kBAutoFieldNumber;
#endif  // !_MSC_VER

GLReqGameAutoPlay::GLReqGameAutoPlay()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameAutoPlay::InitAsDefaultInstance() {
}

GLReqGameAutoPlay::GLReqGameAutoPlay(const GLReqGameAutoPlay& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameAutoPlay::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bauto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameAutoPlay::~GLReqGameAutoPlay() {
  SharedDtor();
}

void GLReqGameAutoPlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameAutoPlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameAutoPlay& GLReqGameAutoPlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameAutoPlay* GLReqGameAutoPlay::default_instance_ = NULL;

GLReqGameAutoPlay* GLReqGameAutoPlay::New() const {
  return new GLReqGameAutoPlay;
}

void GLReqGameAutoPlay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bauto_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameAutoPlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bAuto;
        break;
      }
      
      // required bool bAuto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bauto_)));
          set_has_bauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameAutoPlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bAuto = 3;
  if (has_bauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bauto(), output);
  }
  
}

int GLReqGameAutoPlay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bAuto = 3;
    if (has_bauto()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameAutoPlay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameAutoPlay*>(&from));
}

void GLReqGameAutoPlay::MergeFrom(const GLReqGameAutoPlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bauto()) {
      set_bauto(from.bauto());
    }
  }
}

void GLReqGameAutoPlay::CopyFrom(const GLReqGameAutoPlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameAutoPlay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqGameAutoPlay::Swap(GLReqGameAutoPlay* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(bauto_, other->bauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameAutoPlay::GetTypeName() const {
  return "GLReqGameAutoPlay";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqGameEmoti::kGameIDFieldNumber;
const int GLReqGameEmoti::kGameIndexFieldNumber;
const int GLReqGameEmoti::kNTypeFieldNumber;
#endif  // !_MSC_VER

GLReqGameEmoti::GLReqGameEmoti()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameEmoti::InitAsDefaultInstance() {
}

GLReqGameEmoti::GLReqGameEmoti(const GLReqGameEmoti& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameEmoti::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  ntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameEmoti::~GLReqGameEmoti() {
  SharedDtor();
}

void GLReqGameEmoti::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqGameEmoti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameEmoti& GLReqGameEmoti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameEmoti* GLReqGameEmoti::default_instance_ = NULL;

GLReqGameEmoti* GLReqGameEmoti::New() const {
  return new GLReqGameEmoti;
}

void GLReqGameEmoti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    ntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameEmoti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // required int32 nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameEmoti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required int32 nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ntype(), output);
  }
  
}

int GLReqGameEmoti::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required int32 nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameEmoti::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameEmoti*>(&from));
}

void GLReqGameEmoti::MergeFrom(const GLReqGameEmoti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
}

void GLReqGameEmoti::CopyFrom(const GLReqGameEmoti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameEmoti::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqGameEmoti::Swap(GLReqGameEmoti* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameEmoti::GetTypeName() const {
  return "GLReqGameEmoti";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqExitReservation::kGameIDFieldNumber;
const int GLReqExitReservation::kGameIndexFieldNumber;
const int GLReqExitReservation::kBExitFieldNumber;
#endif  // !_MSC_VER

GLReqExitReservation::GLReqExitReservation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqExitReservation::InitAsDefaultInstance() {
}

GLReqExitReservation::GLReqExitReservation(const GLReqExitReservation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqExitReservation::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  bexit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqExitReservation::~GLReqExitReservation() {
  SharedDtor();
}

void GLReqExitReservation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqExitReservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqExitReservation& GLReqExitReservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqExitReservation* GLReqExitReservation::default_instance_ = NULL;

GLReqExitReservation* GLReqExitReservation::New() const {
  return new GLReqExitReservation;
}

void GLReqExitReservation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    bexit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqExitReservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bExit;
        break;
      }
      
      // required bool bExit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bexit_)));
          set_has_bexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqExitReservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required bool bExit = 3;
  if (has_bexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bexit(), output);
  }
  
}

int GLReqExitReservation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required bool bExit = 3;
    if (has_bexit()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqExitReservation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqExitReservation*>(&from));
}

void GLReqExitReservation::MergeFrom(const GLReqExitReservation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_bexit()) {
      set_bexit(from.bexit());
    }
  }
}

void GLReqExitReservation::CopyFrom(const GLReqExitReservation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqExitReservation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GLReqExitReservation::Swap(GLReqExitReservation* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(bexit_, other->bexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqExitReservation::GetTypeName() const {
  return "GLReqExitReservation";
}


// ===================================================================

#ifndef _MSC_VER
const int GLReqRelayInfo::kGameIDFieldNumber;
#endif  // !_MSC_VER

GLReqRelayInfo::GLReqRelayInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqRelayInfo::InitAsDefaultInstance() {
}

GLReqRelayInfo::GLReqRelayInfo(const GLReqRelayInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqRelayInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqRelayInfo::~GLReqRelayInfo() {
  SharedDtor();
}

void GLReqRelayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLReqRelayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqRelayInfo& GLReqRelayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqRelayInfo* GLReqRelayInfo::default_instance_ = NULL;

GLReqRelayInfo* GLReqRelayInfo::New() const {
  return new GLReqRelayInfo;
}

void GLReqRelayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqRelayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqRelayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
}

int GLReqRelayInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqRelayInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqRelayInfo*>(&from));
}

void GLReqRelayInfo::MergeFrom(const GLReqRelayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
}

void GLReqRelayInfo::CopyFrom(const GLReqRelayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqRelayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GLReqRelayInfo::Swap(GLReqRelayInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqRelayInfo::GetTypeName() const {
  return "GLReqRelayInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int G_REQ_GAME_TEST_PACKET::kGameIDFieldNumber;
const int G_REQ_GAME_TEST_PACKET::kTestIntFieldNumber;
const int G_REQ_GAME_TEST_PACKET::kTestStringFieldNumber;
#endif  // !_MSC_VER

G_REQ_GAME_TEST_PACKET::G_REQ_GAME_TEST_PACKET()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void G_REQ_GAME_TEST_PACKET::InitAsDefaultInstance() {
}

G_REQ_GAME_TEST_PACKET::G_REQ_GAME_TEST_PACKET(const G_REQ_GAME_TEST_PACKET& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void G_REQ_GAME_TEST_PACKET::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  test_int_ = 0;
  test_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

G_REQ_GAME_TEST_PACKET::~G_REQ_GAME_TEST_PACKET() {
  SharedDtor();
}

void G_REQ_GAME_TEST_PACKET::SharedDtor() {
  if (test_string_ != &::google::protobuf::internal::kEmptyString) {
    delete test_string_;
  }
  if (this != default_instance_) {
  }
}

void G_REQ_GAME_TEST_PACKET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const G_REQ_GAME_TEST_PACKET& G_REQ_GAME_TEST_PACKET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

G_REQ_GAME_TEST_PACKET* G_REQ_GAME_TEST_PACKET::default_instance_ = NULL;

G_REQ_GAME_TEST_PACKET* G_REQ_GAME_TEST_PACKET::New() const {
  return new G_REQ_GAME_TEST_PACKET;
}

void G_REQ_GAME_TEST_PACKET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    test_int_ = 0;
    if (has_test_string()) {
      if (test_string_ != &::google::protobuf::internal::kEmptyString) {
        test_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool G_REQ_GAME_TEST_PACKET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_test_int;
        break;
      }
      
      // required int32 test_int = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_int_)));
          set_has_test_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_test_string;
        break;
      }
      
      // required string test_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void G_REQ_GAME_TEST_PACKET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 test_int = 2;
  if (has_test_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->test_int(), output);
  }
  
  // required string test_string = 3;
  if (has_test_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->test_string(), output);
  }
  
}

int G_REQ_GAME_TEST_PACKET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 test_int = 2;
    if (has_test_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_int());
    }
    
    // required string test_string = 3;
    if (has_test_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_string());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void G_REQ_GAME_TEST_PACKET::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const G_REQ_GAME_TEST_PACKET*>(&from));
}

void G_REQ_GAME_TEST_PACKET::MergeFrom(const G_REQ_GAME_TEST_PACKET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_test_int()) {
      set_test_int(from.test_int());
    }
    if (from.has_test_string()) {
      set_test_string(from.test_string());
    }
  }
}

void G_REQ_GAME_TEST_PACKET::CopyFrom(const G_REQ_GAME_TEST_PACKET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool G_REQ_GAME_TEST_PACKET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void G_REQ_GAME_TEST_PACKET::Swap(G_REQ_GAME_TEST_PACKET* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(test_int_, other->test_int_);
    std::swap(test_string_, other->test_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string G_REQ_GAME_TEST_PACKET::GetTypeName() const {
  return "G_REQ_GAME_TEST_PACKET";
}


// ===================================================================

bool GLAnsGameProtocol_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameProtocol_Type GLAnsGameProtocol::NONE;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_STARTREADY;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_RESETREADY;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_INIT;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_START;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_RESET;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_NOTISUN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_SELECTSUN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_NOTISELECTSUN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_SHARING;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_NAGARI;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_CHONGTONG;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_SELECTCARD;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_BONUS;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_TAKEPEE;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_BBUCK;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_SERISEBBUK;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_BBUCKEAT;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_BOMB;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_PAN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_DADAK;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_JJOK;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_UPSET;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_ALLEATUP;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_NOTITURN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_MOVETEN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_MOVETENANS;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_CHOICECARD;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_SHAKE;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_SHAKEANS;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_SHAKECOUNT;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_CAPTYPE;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_GODORI;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_KUSA;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_RED;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_BLUE;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_BAK;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_BAKFAIL;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_NOTYMISSION;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_NOTIMISSIONCARD;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_MISSIONSTATE;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_GOSTOP;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_GOSTOPANS;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_STOPANS;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_RESULT;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_NOTIPOINT;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_END;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_KICK;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_EMOTI;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_AUTOPLAY;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_RELAYINFO;
const GLAnsGameProtocol_Type GLAnsGameProtocol::GAME_EXITRESERVATION;
const GLAnsGameProtocol_Type GLAnsGameProtocol::Type_MIN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::Type_MAX;
const int GLAnsGameProtocol::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameProtocol::kTypeFieldNumber;
const int GLAnsGameProtocol::kGameStartReadyFieldNumber;
const int GLAnsGameProtocol::kGameResetReadyFieldNumber;
const int GLAnsGameProtocol::kGameinitFieldNumber;
const int GLAnsGameProtocol::kGameStartFieldNumber;
const int GLAnsGameProtocol::kGameResetFieldNumber;
const int GLAnsGameProtocol::kGameNotiSunFieldNumber;
const int GLAnsGameProtocol::kGameSelectSunFieldNumber;
const int GLAnsGameProtocol::kGameNotiSelectSunFieldNumber;
const int GLAnsGameProtocol::kGameSharingFieldNumber;
const int GLAnsGameProtocol::kGameNagariFieldNumber;
const int GLAnsGameProtocol::kGameChongTongFieldNumber;
const int GLAnsGameProtocol::kGameSelectCardFieldNumber;
const int GLAnsGameProtocol::kGameBonusFieldNumber;
const int GLAnsGameProtocol::kGameTakePeeFieldNumber;
const int GLAnsGameProtocol::kGameBbuckFieldNumber;
const int GLAnsGameProtocol::kGameSeriseBbuckFieldNumber;
const int GLAnsGameProtocol::kGameBbuckEatFieldNumber;
const int GLAnsGameProtocol::kGameBombFieldNumber;
const int GLAnsGameProtocol::kGamePanFieldNumber;
const int GLAnsGameProtocol::kGameDadakFieldNumber;
const int GLAnsGameProtocol::kGameJjokFieldNumber;
const int GLAnsGameProtocol::kGameUpsetFieldNumber;
const int GLAnsGameProtocol::kGameAllEatUpFieldNumber;
const int GLAnsGameProtocol::kGameNotiTurnFieldNumber;
const int GLAnsGameProtocol::kGameMoveTenFieldNumber;
const int GLAnsGameProtocol::kGameMoveTenAnsFieldNumber;
const int GLAnsGameProtocol::kGameChoiceCardFieldNumber;
const int GLAnsGameProtocol::kGameShakeFieldNumber;
const int GLAnsGameProtocol::kGameShakeAnsFieldNumber;
const int GLAnsGameProtocol::kGameShakeCountFieldNumber;
const int GLAnsGameProtocol::kGameCapTypeFieldNumber;
const int GLAnsGameProtocol::kGameGodoriFieldNumber;
const int GLAnsGameProtocol::kGameKusaFieldNumber;
const int GLAnsGameProtocol::kGameRedFieldNumber;
const int GLAnsGameProtocol::kGameBlueFieldNumber;
const int GLAnsGameProtocol::kGameBakFieldNumber;
const int GLAnsGameProtocol::kGameBakFailFieldNumber;
const int GLAnsGameProtocol::kGameNotiMissionFieldNumber;
const int GLAnsGameProtocol::kGameNotiMissionCardFieldNumber;
const int GLAnsGameProtocol::kGameMissionStateFieldNumber;
const int GLAnsGameProtocol::kGameGostopFieldNumber;
const int GLAnsGameProtocol::kGameGostopAnsFieldNumber;
const int GLAnsGameProtocol::kGameStopAnsFieldNumber;
const int GLAnsGameProtocol::kGameResultFieldNumber;
const int GLAnsGameProtocol::kGameNotiPointFieldNumber;
const int GLAnsGameProtocol::kGameEndFieldNumber;
const int GLAnsGameProtocol::kGameKickFieldNumber;
const int GLAnsGameProtocol::kAnsGameEmotiFieldNumber;
const int GLAnsGameProtocol::kAnsGameAutoPlayFieldNumber;
const int GLAnsGameProtocol::kAnsGameRelayInfoFieldNumber;
const int GLAnsGameProtocol::kAnsExitReservationFieldNumber;
#endif  // !_MSC_VER

GLAnsGameProtocol::GLAnsGameProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameProtocol::InitAsDefaultInstance() {
  gamestartready_ = const_cast< ::GLAnsGameStartReady*>(&::GLAnsGameStartReady::default_instance());
  gameresetready_ = const_cast< ::GLAnsGameResetReady*>(&::GLAnsGameResetReady::default_instance());
  gameinit_ = const_cast< ::GLAnsGameInit*>(&::GLAnsGameInit::default_instance());
  gamestart_ = const_cast< ::GLAnsGameStart*>(&::GLAnsGameStart::default_instance());
  gamereset_ = const_cast< ::GLAnsGameReset*>(&::GLAnsGameReset::default_instance());
  gamenotisun_ = const_cast< ::GLAnsGameNotiSun*>(&::GLAnsGameNotiSun::default_instance());
  gameselectsun_ = const_cast< ::GLAnsGameSelectSun*>(&::GLAnsGameSelectSun::default_instance());
  gamenotiselectsun_ = const_cast< ::GLAnsGameNotiSelectSun*>(&::GLAnsGameNotiSelectSun::default_instance());
  gamesharing_ = const_cast< ::GLAnsGameSharing*>(&::GLAnsGameSharing::default_instance());
  gamenagari_ = const_cast< ::GLAnsGameNagari*>(&::GLAnsGameNagari::default_instance());
  gamechongtong_ = const_cast< ::GLAnsGameChongTong*>(&::GLAnsGameChongTong::default_instance());
  gameselectcard_ = const_cast< ::GLAnsGameSelectCard*>(&::GLAnsGameSelectCard::default_instance());
  gamebonus_ = const_cast< ::GLAnsGameBonus*>(&::GLAnsGameBonus::default_instance());
  gametakepee_ = const_cast< ::GLAnsGameTakePee*>(&::GLAnsGameTakePee::default_instance());
  gamebbuck_ = const_cast< ::GLAnsGameBbuck*>(&::GLAnsGameBbuck::default_instance());
  gameserisebbuck_ = const_cast< ::GLAnsGameSeriseBbuck*>(&::GLAnsGameSeriseBbuck::default_instance());
  gamebbuckeat_ = const_cast< ::GLAnsGameBbuckEat*>(&::GLAnsGameBbuckEat::default_instance());
  gamebomb_ = const_cast< ::GLAnsGameBomb*>(&::GLAnsGameBomb::default_instance());
  gamepan_ = const_cast< ::GLAnsGamePan*>(&::GLAnsGamePan::default_instance());
  gamedadak_ = const_cast< ::GLAnsGameDadak*>(&::GLAnsGameDadak::default_instance());
  gamejjok_ = const_cast< ::GLAnsGameJjok*>(&::GLAnsGameJjok::default_instance());
  gameupset_ = const_cast< ::GLAnsGameUpset*>(&::GLAnsGameUpset::default_instance());
  gamealleatup_ = const_cast< ::GLAnsGameAllEatUp*>(&::GLAnsGameAllEatUp::default_instance());
  gamenotiturn_ = const_cast< ::GLAnsGameNotiTurn*>(&::GLAnsGameNotiTurn::default_instance());
  gamemoveten_ = const_cast< ::GLAnsGameMoveTen*>(&::GLAnsGameMoveTen::default_instance());
  gamemovetenans_ = const_cast< ::GLAnsGameMoveTenAns*>(&::GLAnsGameMoveTenAns::default_instance());
  gamechoicecard_ = const_cast< ::GLAnsGameChoiceCard*>(&::GLAnsGameChoiceCard::default_instance());
  gameshake_ = const_cast< ::GLAnsGameShake*>(&::GLAnsGameShake::default_instance());
  gameshakeans_ = const_cast< ::GLAnsGameShakeAns*>(&::GLAnsGameShakeAns::default_instance());
  gameshakecount_ = const_cast< ::GLAnsGameShakeCount*>(&::GLAnsGameShakeCount::default_instance());
  gamecaptype_ = const_cast< ::GLAnsGameCapType*>(&::GLAnsGameCapType::default_instance());
  gamegodori_ = const_cast< ::GLAnsGameGodori*>(&::GLAnsGameGodori::default_instance());
  gamekusa_ = const_cast< ::GLAnsGameKusa*>(&::GLAnsGameKusa::default_instance());
  gamered_ = const_cast< ::GLAnsGameRed*>(&::GLAnsGameRed::default_instance());
  gameblue_ = const_cast< ::GLAnsGameBlue*>(&::GLAnsGameBlue::default_instance());
  gamebak_ = const_cast< ::GLAnsGameBak*>(&::GLAnsGameBak::default_instance());
  gamebakfail_ = const_cast< ::GLAnsGameBakFail*>(&::GLAnsGameBakFail::default_instance());
  gamenotimission_ = const_cast< ::GLAnsGameNotiMission*>(&::GLAnsGameNotiMission::default_instance());
  gamenotimissioncard_ = const_cast< ::GLAnsGameNotiMissionCard*>(&::GLAnsGameNotiMissionCard::default_instance());
  gamemissionstate_ = const_cast< ::GLAnsGameMissionState*>(&::GLAnsGameMissionState::default_instance());
  gamegostop_ = const_cast< ::GLAnsGameGostop*>(&::GLAnsGameGostop::default_instance());
  gamegostopans_ = const_cast< ::GLAnsGameGostopAns*>(&::GLAnsGameGostopAns::default_instance());
  gamestopans_ = const_cast< ::GLAnsGameStopAns*>(&::GLAnsGameStopAns::default_instance());
  gameresult_ = const_cast< ::GLAnsGameResult*>(&::GLAnsGameResult::default_instance());
  gamenotipoint_ = const_cast< ::GLAnsGameNotiPoint*>(&::GLAnsGameNotiPoint::default_instance());
  gameend_ = const_cast< ::GLAnsGameEnd*>(&::GLAnsGameEnd::default_instance());
  gamekick_ = const_cast< ::GLAnsGameKick*>(&::GLAnsGameKick::default_instance());
  ansgameemoti_ = const_cast< ::GLAnsGameEmoti*>(&::GLAnsGameEmoti::default_instance());
  ansgameautoplay_ = const_cast< ::GLAnsGameAutoPlay*>(&::GLAnsGameAutoPlay::default_instance());
  ansgamerelayinfo_ = const_cast< ::GLAnsGameRelayInfo*>(&::GLAnsGameRelayInfo::default_instance());
  ansexitreservation_ = const_cast< ::GLAnsExitReservation*>(&::GLAnsExitReservation::default_instance());
}

GLAnsGameProtocol::GLAnsGameProtocol(const GLAnsGameProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameProtocol::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  gamestartready_ = NULL;
  gameresetready_ = NULL;
  gameinit_ = NULL;
  gamestart_ = NULL;
  gamereset_ = NULL;
  gamenotisun_ = NULL;
  gameselectsun_ = NULL;
  gamenotiselectsun_ = NULL;
  gamesharing_ = NULL;
  gamenagari_ = NULL;
  gamechongtong_ = NULL;
  gameselectcard_ = NULL;
  gamebonus_ = NULL;
  gametakepee_ = NULL;
  gamebbuck_ = NULL;
  gameserisebbuck_ = NULL;
  gamebbuckeat_ = NULL;
  gamebomb_ = NULL;
  gamepan_ = NULL;
  gamedadak_ = NULL;
  gamejjok_ = NULL;
  gameupset_ = NULL;
  gamealleatup_ = NULL;
  gamenotiturn_ = NULL;
  gamemoveten_ = NULL;
  gamemovetenans_ = NULL;
  gamechoicecard_ = NULL;
  gameshake_ = NULL;
  gameshakeans_ = NULL;
  gameshakecount_ = NULL;
  gamecaptype_ = NULL;
  gamegodori_ = NULL;
  gamekusa_ = NULL;
  gamered_ = NULL;
  gameblue_ = NULL;
  gamebak_ = NULL;
  gamebakfail_ = NULL;
  gamenotimission_ = NULL;
  gamenotimissioncard_ = NULL;
  gamemissionstate_ = NULL;
  gamegostop_ = NULL;
  gamegostopans_ = NULL;
  gamestopans_ = NULL;
  gameresult_ = NULL;
  gamenotipoint_ = NULL;
  gameend_ = NULL;
  gamekick_ = NULL;
  ansgameemoti_ = NULL;
  ansgameautoplay_ = NULL;
  ansgamerelayinfo_ = NULL;
  ansexitreservation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameProtocol::~GLAnsGameProtocol() {
  SharedDtor();
}

void GLAnsGameProtocol::SharedDtor() {
  if (this != default_instance_) {
    delete gamestartready_;
    delete gameresetready_;
    delete gameinit_;
    delete gamestart_;
    delete gamereset_;
    delete gamenotisun_;
    delete gameselectsun_;
    delete gamenotiselectsun_;
    delete gamesharing_;
    delete gamenagari_;
    delete gamechongtong_;
    delete gameselectcard_;
    delete gamebonus_;
    delete gametakepee_;
    delete gamebbuck_;
    delete gameserisebbuck_;
    delete gamebbuckeat_;
    delete gamebomb_;
    delete gamepan_;
    delete gamedadak_;
    delete gamejjok_;
    delete gameupset_;
    delete gamealleatup_;
    delete gamenotiturn_;
    delete gamemoveten_;
    delete gamemovetenans_;
    delete gamechoicecard_;
    delete gameshake_;
    delete gameshakeans_;
    delete gameshakecount_;
    delete gamecaptype_;
    delete gamegodori_;
    delete gamekusa_;
    delete gamered_;
    delete gameblue_;
    delete gamebak_;
    delete gamebakfail_;
    delete gamenotimission_;
    delete gamenotimissioncard_;
    delete gamemissionstate_;
    delete gamegostop_;
    delete gamegostopans_;
    delete gamestopans_;
    delete gameresult_;
    delete gamenotipoint_;
    delete gameend_;
    delete gamekick_;
    delete ansgameemoti_;
    delete ansgameautoplay_;
    delete ansgamerelayinfo_;
    delete ansexitreservation_;
  }
}

void GLAnsGameProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameProtocol& GLAnsGameProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameProtocol* GLAnsGameProtocol::default_instance_ = NULL;

GLAnsGameProtocol* GLAnsGameProtocol::New() const {
  return new GLAnsGameProtocol;
}

void GLAnsGameProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_gamestartready()) {
      if (gamestartready_ != NULL) gamestartready_->::GLAnsGameStartReady::Clear();
    }
    if (has_gameresetready()) {
      if (gameresetready_ != NULL) gameresetready_->::GLAnsGameResetReady::Clear();
    }
    if (has_gameinit()) {
      if (gameinit_ != NULL) gameinit_->::GLAnsGameInit::Clear();
    }
    if (has_gamestart()) {
      if (gamestart_ != NULL) gamestart_->::GLAnsGameStart::Clear();
    }
    if (has_gamereset()) {
      if (gamereset_ != NULL) gamereset_->::GLAnsGameReset::Clear();
    }
    if (has_gamenotisun()) {
      if (gamenotisun_ != NULL) gamenotisun_->::GLAnsGameNotiSun::Clear();
    }
    if (has_gameselectsun()) {
      if (gameselectsun_ != NULL) gameselectsun_->::GLAnsGameSelectSun::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_gamenotiselectsun()) {
      if (gamenotiselectsun_ != NULL) gamenotiselectsun_->::GLAnsGameNotiSelectSun::Clear();
    }
    if (has_gamesharing()) {
      if (gamesharing_ != NULL) gamesharing_->::GLAnsGameSharing::Clear();
    }
    if (has_gamenagari()) {
      if (gamenagari_ != NULL) gamenagari_->::GLAnsGameNagari::Clear();
    }
    if (has_gamechongtong()) {
      if (gamechongtong_ != NULL) gamechongtong_->::GLAnsGameChongTong::Clear();
    }
    if (has_gameselectcard()) {
      if (gameselectcard_ != NULL) gameselectcard_->::GLAnsGameSelectCard::Clear();
    }
    if (has_gamebonus()) {
      if (gamebonus_ != NULL) gamebonus_->::GLAnsGameBonus::Clear();
    }
    if (has_gametakepee()) {
      if (gametakepee_ != NULL) gametakepee_->::GLAnsGameTakePee::Clear();
    }
    if (has_gamebbuck()) {
      if (gamebbuck_ != NULL) gamebbuck_->::GLAnsGameBbuck::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_gameserisebbuck()) {
      if (gameserisebbuck_ != NULL) gameserisebbuck_->::GLAnsGameSeriseBbuck::Clear();
    }
    if (has_gamebbuckeat()) {
      if (gamebbuckeat_ != NULL) gamebbuckeat_->::GLAnsGameBbuckEat::Clear();
    }
    if (has_gamebomb()) {
      if (gamebomb_ != NULL) gamebomb_->::GLAnsGameBomb::Clear();
    }
    if (has_gamepan()) {
      if (gamepan_ != NULL) gamepan_->::GLAnsGamePan::Clear();
    }
    if (has_gamedadak()) {
      if (gamedadak_ != NULL) gamedadak_->::GLAnsGameDadak::Clear();
    }
    if (has_gamejjok()) {
      if (gamejjok_ != NULL) gamejjok_->::GLAnsGameJjok::Clear();
    }
    if (has_gameupset()) {
      if (gameupset_ != NULL) gameupset_->::GLAnsGameUpset::Clear();
    }
    if (has_gamealleatup()) {
      if (gamealleatup_ != NULL) gamealleatup_->::GLAnsGameAllEatUp::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_gamenotiturn()) {
      if (gamenotiturn_ != NULL) gamenotiturn_->::GLAnsGameNotiTurn::Clear();
    }
    if (has_gamemoveten()) {
      if (gamemoveten_ != NULL) gamemoveten_->::GLAnsGameMoveTen::Clear();
    }
    if (has_gamemovetenans()) {
      if (gamemovetenans_ != NULL) gamemovetenans_->::GLAnsGameMoveTenAns::Clear();
    }
    if (has_gamechoicecard()) {
      if (gamechoicecard_ != NULL) gamechoicecard_->::GLAnsGameChoiceCard::Clear();
    }
    if (has_gameshake()) {
      if (gameshake_ != NULL) gameshake_->::GLAnsGameShake::Clear();
    }
    if (has_gameshakeans()) {
      if (gameshakeans_ != NULL) gameshakeans_->::GLAnsGameShakeAns::Clear();
    }
    if (has_gameshakecount()) {
      if (gameshakecount_ != NULL) gameshakecount_->::GLAnsGameShakeCount::Clear();
    }
    if (has_gamecaptype()) {
      if (gamecaptype_ != NULL) gamecaptype_->::GLAnsGameCapType::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_gamegodori()) {
      if (gamegodori_ != NULL) gamegodori_->::GLAnsGameGodori::Clear();
    }
    if (has_gamekusa()) {
      if (gamekusa_ != NULL) gamekusa_->::GLAnsGameKusa::Clear();
    }
    if (has_gamered()) {
      if (gamered_ != NULL) gamered_->::GLAnsGameRed::Clear();
    }
    if (has_gameblue()) {
      if (gameblue_ != NULL) gameblue_->::GLAnsGameBlue::Clear();
    }
    if (has_gamebak()) {
      if (gamebak_ != NULL) gamebak_->::GLAnsGameBak::Clear();
    }
    if (has_gamebakfail()) {
      if (gamebakfail_ != NULL) gamebakfail_->::GLAnsGameBakFail::Clear();
    }
    if (has_gamenotimission()) {
      if (gamenotimission_ != NULL) gamenotimission_->::GLAnsGameNotiMission::Clear();
    }
    if (has_gamenotimissioncard()) {
      if (gamenotimissioncard_ != NULL) gamenotimissioncard_->::GLAnsGameNotiMissionCard::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_gamemissionstate()) {
      if (gamemissionstate_ != NULL) gamemissionstate_->::GLAnsGameMissionState::Clear();
    }
    if (has_gamegostop()) {
      if (gamegostop_ != NULL) gamegostop_->::GLAnsGameGostop::Clear();
    }
    if (has_gamegostopans()) {
      if (gamegostopans_ != NULL) gamegostopans_->::GLAnsGameGostopAns::Clear();
    }
    if (has_gamestopans()) {
      if (gamestopans_ != NULL) gamestopans_->::GLAnsGameStopAns::Clear();
    }
    if (has_gameresult()) {
      if (gameresult_ != NULL) gameresult_->::GLAnsGameResult::Clear();
    }
    if (has_gamenotipoint()) {
      if (gamenotipoint_ != NULL) gamenotipoint_->::GLAnsGameNotiPoint::Clear();
    }
    if (has_gameend()) {
      if (gameend_ != NULL) gameend_->::GLAnsGameEnd::Clear();
    }
    if (has_gamekick()) {
      if (gamekick_ != NULL) gamekick_->::GLAnsGameKick::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_ansgameemoti()) {
      if (ansgameemoti_ != NULL) ansgameemoti_->::GLAnsGameEmoti::Clear();
    }
    if (has_ansgameautoplay()) {
      if (ansgameautoplay_ != NULL) ansgameautoplay_->::GLAnsGameAutoPlay::Clear();
    }
    if (has_ansgamerelayinfo()) {
      if (ansgamerelayinfo_ != NULL) ansgamerelayinfo_->::GLAnsGameRelayInfo::Clear();
    }
    if (has_ansexitreservation()) {
      if (ansexitreservation_ != NULL) ansexitreservation_->::GLAnsExitReservation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GLAnsGameProtocol.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameProtocol_Type_IsValid(value)) {
            set_type(static_cast< ::GLAnsGameProtocol_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameStartReady;
        break;
      }
      
      // optional .GLAnsGameStartReady gameStartReady = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameStartReady:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestartready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameResetReady;
        break;
      }
      
      // optional .GLAnsGameResetReady gameResetReady = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameResetReady:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameresetready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gameinit;
        break;
      }
      
      // optional .GLAnsGameInit gameinit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameinit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gameStart;
        break;
      }
      
      // optional .GLAnsGameStart gameStart = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameStart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gameReset;
        break;
      }
      
      // optional .GLAnsGameReset gameReset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameReset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamereset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gameNotiSun;
        break;
      }
      
      // optional .GLAnsGameNotiSun gameNotiSun = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameNotiSun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenotisun()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_gameSelectSun;
        break;
      }
      
      // optional .GLAnsGameSelectSun gameSelectSun = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameSelectSun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameselectsun()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_gameNotiSelectSun;
        break;
      }
      
      // optional .GLAnsGameNotiSelectSun gameNotiSelectSun = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameNotiSelectSun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenotiselectsun()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gameSharing;
        break;
      }
      
      // optional .GLAnsGameSharing gameSharing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameSharing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesharing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_gameNagari;
        break;
      }
      
      // optional .GLAnsGameNagari gameNagari = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameNagari:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenagari()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_gameChongTong;
        break;
      }
      
      // optional .GLAnsGameChongTong gameChongTong = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameChongTong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamechongtong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_gameSelectCard;
        break;
      }
      
      // optional .GLAnsGameSelectCard gameSelectCard = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameSelectCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameselectcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_gameBonus;
        break;
      }
      
      // optional .GLAnsGameBonus gameBonus = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameBonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamebonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_gameTakePee;
        break;
      }
      
      // optional .GLAnsGameTakePee gameTakePee = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameTakePee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gametakepee()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_gameBbuck;
        break;
      }
      
      // optional .GLAnsGameBbuck gameBbuck = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameBbuck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamebbuck()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_gameSeriseBbuck;
        break;
      }
      
      // optional .GLAnsGameSeriseBbuck gameSeriseBbuck = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameSeriseBbuck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameserisebbuck()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_gameBbuckEat;
        break;
      }
      
      // optional .GLAnsGameBbuckEat gameBbuckEat = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameBbuckEat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamebbuckeat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_gameBomb;
        break;
      }
      
      // optional .GLAnsGameBomb gameBomb = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameBomb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamebomb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_gamePan;
        break;
      }
      
      // optional .GLAnsGamePan gamePan = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamePan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamepan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_gameDadak;
        break;
      }
      
      // optional .GLAnsGameDadak gameDadak = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameDadak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamedadak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_gameJjok;
        break;
      }
      
      // optional .GLAnsGameJjok gameJjok = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameJjok:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamejjok()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_gameUpset;
        break;
      }
      
      // optional .GLAnsGameUpset gameUpset = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameUpset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameupset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_gameAllEatUp;
        break;
      }
      
      // optional .GLAnsGameAllEatUp gameAllEatUp = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameAllEatUp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamealleatup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_gameNotiTurn;
        break;
      }
      
      // optional .GLAnsGameNotiTurn gameNotiTurn = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameNotiTurn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenotiturn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_gameMoveTen;
        break;
      }
      
      // optional .GLAnsGameMoveTen gameMoveTen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameMoveTen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamemoveten()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_gameMoveTenAns;
        break;
      }
      
      // optional .GLAnsGameMoveTenAns gameMoveTenAns = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameMoveTenAns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamemovetenans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_gameChoiceCard;
        break;
      }
      
      // optional .GLAnsGameChoiceCard gameChoiceCard = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameChoiceCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamechoicecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_gameShake;
        break;
      }
      
      // optional .GLAnsGameShake gameShake = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameShake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameshake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_gameShakeAns;
        break;
      }
      
      // optional .GLAnsGameShakeAns gameShakeAns = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameShakeAns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameshakeans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_gameShakeCount;
        break;
      }
      
      // optional .GLAnsGameShakeCount gameShakeCount = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameShakeCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameshakecount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_gameCapType;
        break;
      }
      
      // optional .GLAnsGameCapType gameCapType = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameCapType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamecaptype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_gameGodori;
        break;
      }
      
      // optional .GLAnsGameGodori gameGodori = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameGodori:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamegodori()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_gameKusa;
        break;
      }
      
      // optional .GLAnsGameKusa gameKusa = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameKusa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamekusa()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_gameRed;
        break;
      }
      
      // optional .GLAnsGameRed gameRed = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamered()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_gameBlue;
        break;
      }
      
      // optional .GLAnsGameBlue gameBlue = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameBlue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameblue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_gameBak;
        break;
      }
      
      // optional .GLAnsGameBak gameBak = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameBak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamebak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_gameBakFail;
        break;
      }
      
      // optional .GLAnsGameBakFail gameBakFail = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameBakFail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamebakfail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_gameNotiMission;
        break;
      }
      
      // optional .GLAnsGameNotiMission gameNotiMission = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameNotiMission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenotimission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_gameNotiMissionCard;
        break;
      }
      
      // optional .GLAnsGameNotiMissionCard gameNotiMissionCard = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameNotiMissionCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenotimissioncard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_gameMissionState;
        break;
      }
      
      // optional .GLAnsGameMissionState gameMissionState = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameMissionState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamemissionstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_gameGostop;
        break;
      }
      
      // optional .GLAnsGameGostop gameGostop = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameGostop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamegostop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_gameGostopAns;
        break;
      }
      
      // optional .GLAnsGameGostopAns gameGostopAns = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameGostopAns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamegostopans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_gameStopAns;
        break;
      }
      
      // optional .GLAnsGameStopAns gameStopAns = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameStopAns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestopans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_gameResult;
        break;
      }
      
      // optional .GLAnsGameResult gameResult = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_gameNotiPoint;
        break;
      }
      
      // optional .GLAnsGameNotiPoint gameNotiPoint = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameNotiPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenotipoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_gameEnd;
        break;
      }
      
      // optional .GLAnsGameEnd gameEnd = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_gameKick;
        break;
      }
      
      // optional .GLAnsGameKick gameKick = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameKick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamekick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_ansGameEmoti;
        break;
      }
      
      // optional .GLAnsGameEmoti ansGameEmoti = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ansGameEmoti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ansgameemoti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_ansGameAutoPlay;
        break;
      }
      
      // optional .GLAnsGameAutoPlay ansGameAutoPlay = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ansGameAutoPlay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ansgameautoplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_ansGameRelayInfo;
        break;
      }
      
      // optional .GLAnsGameRelayInfo ansGameRelayInfo = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ansGameRelayInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ansgamerelayinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_ansExitReservation;
        break;
      }
      
      // optional .GLAnsExitReservation ansExitReservation = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ansExitReservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ansexitreservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GLAnsGameProtocol.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .GLAnsGameStartReady gameStartReady = 2;
  if (has_gamestartready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->gamestartready(), output);
  }
  
  // optional .GLAnsGameResetReady gameResetReady = 3;
  if (has_gameresetready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gameresetready(), output);
  }
  
  // optional .GLAnsGameInit gameinit = 4;
  if (has_gameinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->gameinit(), output);
  }
  
  // optional .GLAnsGameStart gameStart = 5;
  if (has_gamestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->gamestart(), output);
  }
  
  // optional .GLAnsGameReset gameReset = 6;
  if (has_gamereset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->gamereset(), output);
  }
  
  // optional .GLAnsGameNotiSun gameNotiSun = 7;
  if (has_gamenotisun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->gamenotisun(), output);
  }
  
  // optional .GLAnsGameSelectSun gameSelectSun = 8;
  if (has_gameselectsun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->gameselectsun(), output);
  }
  
  // optional .GLAnsGameNotiSelectSun gameNotiSelectSun = 9;
  if (has_gamenotiselectsun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->gamenotiselectsun(), output);
  }
  
  // optional .GLAnsGameSharing gameSharing = 10;
  if (has_gamesharing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->gamesharing(), output);
  }
  
  // optional .GLAnsGameNagari gameNagari = 11;
  if (has_gamenagari()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->gamenagari(), output);
  }
  
  // optional .GLAnsGameChongTong gameChongTong = 12;
  if (has_gamechongtong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->gamechongtong(), output);
  }
  
  // optional .GLAnsGameSelectCard gameSelectCard = 13;
  if (has_gameselectcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->gameselectcard(), output);
  }
  
  // optional .GLAnsGameBonus gameBonus = 14;
  if (has_gamebonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->gamebonus(), output);
  }
  
  // optional .GLAnsGameTakePee gameTakePee = 15;
  if (has_gametakepee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->gametakepee(), output);
  }
  
  // optional .GLAnsGameBbuck gameBbuck = 16;
  if (has_gamebbuck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->gamebbuck(), output);
  }
  
  // optional .GLAnsGameSeriseBbuck gameSeriseBbuck = 17;
  if (has_gameserisebbuck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->gameserisebbuck(), output);
  }
  
  // optional .GLAnsGameBbuckEat gameBbuckEat = 18;
  if (has_gamebbuckeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->gamebbuckeat(), output);
  }
  
  // optional .GLAnsGameBomb gameBomb = 19;
  if (has_gamebomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->gamebomb(), output);
  }
  
  // optional .GLAnsGamePan gamePan = 20;
  if (has_gamepan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->gamepan(), output);
  }
  
  // optional .GLAnsGameDadak gameDadak = 21;
  if (has_gamedadak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->gamedadak(), output);
  }
  
  // optional .GLAnsGameJjok gameJjok = 22;
  if (has_gamejjok()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->gamejjok(), output);
  }
  
  // optional .GLAnsGameUpset gameUpset = 23;
  if (has_gameupset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->gameupset(), output);
  }
  
  // optional .GLAnsGameAllEatUp gameAllEatUp = 24;
  if (has_gamealleatup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->gamealleatup(), output);
  }
  
  // optional .GLAnsGameNotiTurn gameNotiTurn = 25;
  if (has_gamenotiturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->gamenotiturn(), output);
  }
  
  // optional .GLAnsGameMoveTen gameMoveTen = 26;
  if (has_gamemoveten()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->gamemoveten(), output);
  }
  
  // optional .GLAnsGameMoveTenAns gameMoveTenAns = 27;
  if (has_gamemovetenans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->gamemovetenans(), output);
  }
  
  // optional .GLAnsGameChoiceCard gameChoiceCard = 28;
  if (has_gamechoicecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->gamechoicecard(), output);
  }
  
  // optional .GLAnsGameShake gameShake = 29;
  if (has_gameshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->gameshake(), output);
  }
  
  // optional .GLAnsGameShakeAns gameShakeAns = 30;
  if (has_gameshakeans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->gameshakeans(), output);
  }
  
  // optional .GLAnsGameShakeCount gameShakeCount = 31;
  if (has_gameshakecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->gameshakecount(), output);
  }
  
  // optional .GLAnsGameCapType gameCapType = 32;
  if (has_gamecaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->gamecaptype(), output);
  }
  
  // optional .GLAnsGameGodori gameGodori = 33;
  if (has_gamegodori()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->gamegodori(), output);
  }
  
  // optional .GLAnsGameKusa gameKusa = 34;
  if (has_gamekusa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->gamekusa(), output);
  }
  
  // optional .GLAnsGameRed gameRed = 35;
  if (has_gamered()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->gamered(), output);
  }
  
  // optional .GLAnsGameBlue gameBlue = 36;
  if (has_gameblue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->gameblue(), output);
  }
  
  // optional .GLAnsGameBak gameBak = 37;
  if (has_gamebak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->gamebak(), output);
  }
  
  // optional .GLAnsGameBakFail gameBakFail = 38;
  if (has_gamebakfail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->gamebakfail(), output);
  }
  
  // optional .GLAnsGameNotiMission gameNotiMission = 39;
  if (has_gamenotimission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, this->gamenotimission(), output);
  }
  
  // optional .GLAnsGameNotiMissionCard gameNotiMissionCard = 40;
  if (has_gamenotimissioncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->gamenotimissioncard(), output);
  }
  
  // optional .GLAnsGameMissionState gameMissionState = 41;
  if (has_gamemissionstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->gamemissionstate(), output);
  }
  
  // optional .GLAnsGameGostop gameGostop = 42;
  if (has_gamegostop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, this->gamegostop(), output);
  }
  
  // optional .GLAnsGameGostopAns gameGostopAns = 43;
  if (has_gamegostopans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, this->gamegostopans(), output);
  }
  
  // optional .GLAnsGameStopAns gameStopAns = 44;
  if (has_gamestopans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, this->gamestopans(), output);
  }
  
  // optional .GLAnsGameResult gameResult = 45;
  if (has_gameresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->gameresult(), output);
  }
  
  // optional .GLAnsGameNotiPoint gameNotiPoint = 46;
  if (has_gamenotipoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->gamenotipoint(), output);
  }
  
  // optional .GLAnsGameEnd gameEnd = 47;
  if (has_gameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->gameend(), output);
  }
  
  // optional .GLAnsGameKick gameKick = 48;
  if (has_gamekick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->gamekick(), output);
  }
  
  // optional .GLAnsGameEmoti ansGameEmoti = 49;
  if (has_ansgameemoti()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->ansgameemoti(), output);
  }
  
  // optional .GLAnsGameAutoPlay ansGameAutoPlay = 50;
  if (has_ansgameautoplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, this->ansgameautoplay(), output);
  }
  
  // optional .GLAnsGameRelayInfo ansGameRelayInfo = 51;
  if (has_ansgamerelayinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, this->ansgamerelayinfo(), output);
  }
  
  // optional .GLAnsExitReservation ansExitReservation = 52;
  if (has_ansexitreservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      52, this->ansexitreservation(), output);
  }
  
}

int GLAnsGameProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GLAnsGameProtocol.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .GLAnsGameStartReady gameStartReady = 2;
    if (has_gamestartready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestartready());
    }
    
    // optional .GLAnsGameResetReady gameResetReady = 3;
    if (has_gameresetready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameresetready());
    }
    
    // optional .GLAnsGameInit gameinit = 4;
    if (has_gameinit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinit());
    }
    
    // optional .GLAnsGameStart gameStart = 5;
    if (has_gamestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestart());
    }
    
    // optional .GLAnsGameReset gameReset = 6;
    if (has_gamereset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamereset());
    }
    
    // optional .GLAnsGameNotiSun gameNotiSun = 7;
    if (has_gamenotisun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenotisun());
    }
    
    // optional .GLAnsGameSelectSun gameSelectSun = 8;
    if (has_gameselectsun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameselectsun());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .GLAnsGameNotiSelectSun gameNotiSelectSun = 9;
    if (has_gamenotiselectsun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenotiselectsun());
    }
    
    // optional .GLAnsGameSharing gameSharing = 10;
    if (has_gamesharing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamesharing());
    }
    
    // optional .GLAnsGameNagari gameNagari = 11;
    if (has_gamenagari()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenagari());
    }
    
    // optional .GLAnsGameChongTong gameChongTong = 12;
    if (has_gamechongtong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamechongtong());
    }
    
    // optional .GLAnsGameSelectCard gameSelectCard = 13;
    if (has_gameselectcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameselectcard());
    }
    
    // optional .GLAnsGameBonus gameBonus = 14;
    if (has_gamebonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamebonus());
    }
    
    // optional .GLAnsGameTakePee gameTakePee = 15;
    if (has_gametakepee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gametakepee());
    }
    
    // optional .GLAnsGameBbuck gameBbuck = 16;
    if (has_gamebbuck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamebbuck());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .GLAnsGameSeriseBbuck gameSeriseBbuck = 17;
    if (has_gameserisebbuck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameserisebbuck());
    }
    
    // optional .GLAnsGameBbuckEat gameBbuckEat = 18;
    if (has_gamebbuckeat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamebbuckeat());
    }
    
    // optional .GLAnsGameBomb gameBomb = 19;
    if (has_gamebomb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamebomb());
    }
    
    // optional .GLAnsGamePan gamePan = 20;
    if (has_gamepan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamepan());
    }
    
    // optional .GLAnsGameDadak gameDadak = 21;
    if (has_gamedadak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamedadak());
    }
    
    // optional .GLAnsGameJjok gameJjok = 22;
    if (has_gamejjok()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamejjok());
    }
    
    // optional .GLAnsGameUpset gameUpset = 23;
    if (has_gameupset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameupset());
    }
    
    // optional .GLAnsGameAllEatUp gameAllEatUp = 24;
    if (has_gamealleatup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamealleatup());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .GLAnsGameNotiTurn gameNotiTurn = 25;
    if (has_gamenotiturn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenotiturn());
    }
    
    // optional .GLAnsGameMoveTen gameMoveTen = 26;
    if (has_gamemoveten()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamemoveten());
    }
    
    // optional .GLAnsGameMoveTenAns gameMoveTenAns = 27;
    if (has_gamemovetenans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamemovetenans());
    }
    
    // optional .GLAnsGameChoiceCard gameChoiceCard = 28;
    if (has_gamechoicecard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamechoicecard());
    }
    
    // optional .GLAnsGameShake gameShake = 29;
    if (has_gameshake()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameshake());
    }
    
    // optional .GLAnsGameShakeAns gameShakeAns = 30;
    if (has_gameshakeans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameshakeans());
    }
    
    // optional .GLAnsGameShakeCount gameShakeCount = 31;
    if (has_gameshakecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameshakecount());
    }
    
    // optional .GLAnsGameCapType gameCapType = 32;
    if (has_gamecaptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamecaptype());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .GLAnsGameGodori gameGodori = 33;
    if (has_gamegodori()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamegodori());
    }
    
    // optional .GLAnsGameKusa gameKusa = 34;
    if (has_gamekusa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamekusa());
    }
    
    // optional .GLAnsGameRed gameRed = 35;
    if (has_gamered()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamered());
    }
    
    // optional .GLAnsGameBlue gameBlue = 36;
    if (has_gameblue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameblue());
    }
    
    // optional .GLAnsGameBak gameBak = 37;
    if (has_gamebak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamebak());
    }
    
    // optional .GLAnsGameBakFail gameBakFail = 38;
    if (has_gamebakfail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamebakfail());
    }
    
    // optional .GLAnsGameNotiMission gameNotiMission = 39;
    if (has_gamenotimission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenotimission());
    }
    
    // optional .GLAnsGameNotiMissionCard gameNotiMissionCard = 40;
    if (has_gamenotimissioncard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenotimissioncard());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .GLAnsGameMissionState gameMissionState = 41;
    if (has_gamemissionstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamemissionstate());
    }
    
    // optional .GLAnsGameGostop gameGostop = 42;
    if (has_gamegostop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamegostop());
    }
    
    // optional .GLAnsGameGostopAns gameGostopAns = 43;
    if (has_gamegostopans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamegostopans());
    }
    
    // optional .GLAnsGameStopAns gameStopAns = 44;
    if (has_gamestopans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestopans());
    }
    
    // optional .GLAnsGameResult gameResult = 45;
    if (has_gameresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameresult());
    }
    
    // optional .GLAnsGameNotiPoint gameNotiPoint = 46;
    if (has_gamenotipoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenotipoint());
    }
    
    // optional .GLAnsGameEnd gameEnd = 47;
    if (has_gameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameend());
    }
    
    // optional .GLAnsGameKick gameKick = 48;
    if (has_gamekick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamekick());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .GLAnsGameEmoti ansGameEmoti = 49;
    if (has_ansgameemoti()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ansgameemoti());
    }
    
    // optional .GLAnsGameAutoPlay ansGameAutoPlay = 50;
    if (has_ansgameautoplay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ansgameautoplay());
    }
    
    // optional .GLAnsGameRelayInfo ansGameRelayInfo = 51;
    if (has_ansgamerelayinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ansgamerelayinfo());
    }
    
    // optional .GLAnsExitReservation ansExitReservation = 52;
    if (has_ansexitreservation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ansexitreservation());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameProtocol*>(&from));
}

void GLAnsGameProtocol::MergeFrom(const GLAnsGameProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gamestartready()) {
      mutable_gamestartready()->::GLAnsGameStartReady::MergeFrom(from.gamestartready());
    }
    if (from.has_gameresetready()) {
      mutable_gameresetready()->::GLAnsGameResetReady::MergeFrom(from.gameresetready());
    }
    if (from.has_gameinit()) {
      mutable_gameinit()->::GLAnsGameInit::MergeFrom(from.gameinit());
    }
    if (from.has_gamestart()) {
      mutable_gamestart()->::GLAnsGameStart::MergeFrom(from.gamestart());
    }
    if (from.has_gamereset()) {
      mutable_gamereset()->::GLAnsGameReset::MergeFrom(from.gamereset());
    }
    if (from.has_gamenotisun()) {
      mutable_gamenotisun()->::GLAnsGameNotiSun::MergeFrom(from.gamenotisun());
    }
    if (from.has_gameselectsun()) {
      mutable_gameselectsun()->::GLAnsGameSelectSun::MergeFrom(from.gameselectsun());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gamenotiselectsun()) {
      mutable_gamenotiselectsun()->::GLAnsGameNotiSelectSun::MergeFrom(from.gamenotiselectsun());
    }
    if (from.has_gamesharing()) {
      mutable_gamesharing()->::GLAnsGameSharing::MergeFrom(from.gamesharing());
    }
    if (from.has_gamenagari()) {
      mutable_gamenagari()->::GLAnsGameNagari::MergeFrom(from.gamenagari());
    }
    if (from.has_gamechongtong()) {
      mutable_gamechongtong()->::GLAnsGameChongTong::MergeFrom(from.gamechongtong());
    }
    if (from.has_gameselectcard()) {
      mutable_gameselectcard()->::GLAnsGameSelectCard::MergeFrom(from.gameselectcard());
    }
    if (from.has_gamebonus()) {
      mutable_gamebonus()->::GLAnsGameBonus::MergeFrom(from.gamebonus());
    }
    if (from.has_gametakepee()) {
      mutable_gametakepee()->::GLAnsGameTakePee::MergeFrom(from.gametakepee());
    }
    if (from.has_gamebbuck()) {
      mutable_gamebbuck()->::GLAnsGameBbuck::MergeFrom(from.gamebbuck());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gameserisebbuck()) {
      mutable_gameserisebbuck()->::GLAnsGameSeriseBbuck::MergeFrom(from.gameserisebbuck());
    }
    if (from.has_gamebbuckeat()) {
      mutable_gamebbuckeat()->::GLAnsGameBbuckEat::MergeFrom(from.gamebbuckeat());
    }
    if (from.has_gamebomb()) {
      mutable_gamebomb()->::GLAnsGameBomb::MergeFrom(from.gamebomb());
    }
    if (from.has_gamepan()) {
      mutable_gamepan()->::GLAnsGamePan::MergeFrom(from.gamepan());
    }
    if (from.has_gamedadak()) {
      mutable_gamedadak()->::GLAnsGameDadak::MergeFrom(from.gamedadak());
    }
    if (from.has_gamejjok()) {
      mutable_gamejjok()->::GLAnsGameJjok::MergeFrom(from.gamejjok());
    }
    if (from.has_gameupset()) {
      mutable_gameupset()->::GLAnsGameUpset::MergeFrom(from.gameupset());
    }
    if (from.has_gamealleatup()) {
      mutable_gamealleatup()->::GLAnsGameAllEatUp::MergeFrom(from.gamealleatup());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gamenotiturn()) {
      mutable_gamenotiturn()->::GLAnsGameNotiTurn::MergeFrom(from.gamenotiturn());
    }
    if (from.has_gamemoveten()) {
      mutable_gamemoveten()->::GLAnsGameMoveTen::MergeFrom(from.gamemoveten());
    }
    if (from.has_gamemovetenans()) {
      mutable_gamemovetenans()->::GLAnsGameMoveTenAns::MergeFrom(from.gamemovetenans());
    }
    if (from.has_gamechoicecard()) {
      mutable_gamechoicecard()->::GLAnsGameChoiceCard::MergeFrom(from.gamechoicecard());
    }
    if (from.has_gameshake()) {
      mutable_gameshake()->::GLAnsGameShake::MergeFrom(from.gameshake());
    }
    if (from.has_gameshakeans()) {
      mutable_gameshakeans()->::GLAnsGameShakeAns::MergeFrom(from.gameshakeans());
    }
    if (from.has_gameshakecount()) {
      mutable_gameshakecount()->::GLAnsGameShakeCount::MergeFrom(from.gameshakecount());
    }
    if (from.has_gamecaptype()) {
      mutable_gamecaptype()->::GLAnsGameCapType::MergeFrom(from.gamecaptype());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_gamegodori()) {
      mutable_gamegodori()->::GLAnsGameGodori::MergeFrom(from.gamegodori());
    }
    if (from.has_gamekusa()) {
      mutable_gamekusa()->::GLAnsGameKusa::MergeFrom(from.gamekusa());
    }
    if (from.has_gamered()) {
      mutable_gamered()->::GLAnsGameRed::MergeFrom(from.gamered());
    }
    if (from.has_gameblue()) {
      mutable_gameblue()->::GLAnsGameBlue::MergeFrom(from.gameblue());
    }
    if (from.has_gamebak()) {
      mutable_gamebak()->::GLAnsGameBak::MergeFrom(from.gamebak());
    }
    if (from.has_gamebakfail()) {
      mutable_gamebakfail()->::GLAnsGameBakFail::MergeFrom(from.gamebakfail());
    }
    if (from.has_gamenotimission()) {
      mutable_gamenotimission()->::GLAnsGameNotiMission::MergeFrom(from.gamenotimission());
    }
    if (from.has_gamenotimissioncard()) {
      mutable_gamenotimissioncard()->::GLAnsGameNotiMissionCard::MergeFrom(from.gamenotimissioncard());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_gamemissionstate()) {
      mutable_gamemissionstate()->::GLAnsGameMissionState::MergeFrom(from.gamemissionstate());
    }
    if (from.has_gamegostop()) {
      mutable_gamegostop()->::GLAnsGameGostop::MergeFrom(from.gamegostop());
    }
    if (from.has_gamegostopans()) {
      mutable_gamegostopans()->::GLAnsGameGostopAns::MergeFrom(from.gamegostopans());
    }
    if (from.has_gamestopans()) {
      mutable_gamestopans()->::GLAnsGameStopAns::MergeFrom(from.gamestopans());
    }
    if (from.has_gameresult()) {
      mutable_gameresult()->::GLAnsGameResult::MergeFrom(from.gameresult());
    }
    if (from.has_gamenotipoint()) {
      mutable_gamenotipoint()->::GLAnsGameNotiPoint::MergeFrom(from.gamenotipoint());
    }
    if (from.has_gameend()) {
      mutable_gameend()->::GLAnsGameEnd::MergeFrom(from.gameend());
    }
    if (from.has_gamekick()) {
      mutable_gamekick()->::GLAnsGameKick::MergeFrom(from.gamekick());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_ansgameemoti()) {
      mutable_ansgameemoti()->::GLAnsGameEmoti::MergeFrom(from.ansgameemoti());
    }
    if (from.has_ansgameautoplay()) {
      mutable_ansgameautoplay()->::GLAnsGameAutoPlay::MergeFrom(from.ansgameautoplay());
    }
    if (from.has_ansgamerelayinfo()) {
      mutable_ansgamerelayinfo()->::GLAnsGameRelayInfo::MergeFrom(from.ansgamerelayinfo());
    }
    if (from.has_ansexitreservation()) {
      mutable_ansexitreservation()->::GLAnsExitReservation::MergeFrom(from.ansexitreservation());
    }
  }
}

void GLAnsGameProtocol::CopyFrom(const GLAnsGameProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_gamestartready()) {
    if (!this->gamestartready().IsInitialized()) return false;
  }
  if (has_gameresetready()) {
    if (!this->gameresetready().IsInitialized()) return false;
  }
  if (has_gameinit()) {
    if (!this->gameinit().IsInitialized()) return false;
  }
  if (has_gamenotisun()) {
    if (!this->gamenotisun().IsInitialized()) return false;
  }
  if (has_gameselectsun()) {
    if (!this->gameselectsun().IsInitialized()) return false;
  }
  if (has_gamenotiselectsun()) {
    if (!this->gamenotiselectsun().IsInitialized()) return false;
  }
  if (has_gamesharing()) {
    if (!this->gamesharing().IsInitialized()) return false;
  }
  if (has_gamenagari()) {
    if (!this->gamenagari().IsInitialized()) return false;
  }
  if (has_gamechongtong()) {
    if (!this->gamechongtong().IsInitialized()) return false;
  }
  if (has_gameselectcard()) {
    if (!this->gameselectcard().IsInitialized()) return false;
  }
  if (has_gamebonus()) {
    if (!this->gamebonus().IsInitialized()) return false;
  }
  if (has_gametakepee()) {
    if (!this->gametakepee().IsInitialized()) return false;
  }
  if (has_gamebbuck()) {
    if (!this->gamebbuck().IsInitialized()) return false;
  }
  if (has_gameserisebbuck()) {
    if (!this->gameserisebbuck().IsInitialized()) return false;
  }
  if (has_gamebbuckeat()) {
    if (!this->gamebbuckeat().IsInitialized()) return false;
  }
  if (has_gamebomb()) {
    if (!this->gamebomb().IsInitialized()) return false;
  }
  if (has_gamepan()) {
    if (!this->gamepan().IsInitialized()) return false;
  }
  if (has_gamedadak()) {
    if (!this->gamedadak().IsInitialized()) return false;
  }
  if (has_gamejjok()) {
    if (!this->gamejjok().IsInitialized()) return false;
  }
  if (has_gameupset()) {
    if (!this->gameupset().IsInitialized()) return false;
  }
  if (has_gamealleatup()) {
    if (!this->gamealleatup().IsInitialized()) return false;
  }
  if (has_gamenotiturn()) {
    if (!this->gamenotiturn().IsInitialized()) return false;
  }
  if (has_gamemoveten()) {
    if (!this->gamemoveten().IsInitialized()) return false;
  }
  if (has_gamemovetenans()) {
    if (!this->gamemovetenans().IsInitialized()) return false;
  }
  if (has_gamechoicecard()) {
    if (!this->gamechoicecard().IsInitialized()) return false;
  }
  if (has_gameshake()) {
    if (!this->gameshake().IsInitialized()) return false;
  }
  if (has_gameshakeans()) {
    if (!this->gameshakeans().IsInitialized()) return false;
  }
  if (has_gameshakecount()) {
    if (!this->gameshakecount().IsInitialized()) return false;
  }
  if (has_gamecaptype()) {
    if (!this->gamecaptype().IsInitialized()) return false;
  }
  if (has_gamegodori()) {
    if (!this->gamegodori().IsInitialized()) return false;
  }
  if (has_gamekusa()) {
    if (!this->gamekusa().IsInitialized()) return false;
  }
  if (has_gamered()) {
    if (!this->gamered().IsInitialized()) return false;
  }
  if (has_gameblue()) {
    if (!this->gameblue().IsInitialized()) return false;
  }
  if (has_gamebak()) {
    if (!this->gamebak().IsInitialized()) return false;
  }
  if (has_gamebakfail()) {
    if (!this->gamebakfail().IsInitialized()) return false;
  }
  if (has_gamenotimission()) {
    if (!this->gamenotimission().IsInitialized()) return false;
  }
  if (has_gamenotimissioncard()) {
    if (!this->gamenotimissioncard().IsInitialized()) return false;
  }
  if (has_gamemissionstate()) {
    if (!this->gamemissionstate().IsInitialized()) return false;
  }
  if (has_gamegostop()) {
    if (!this->gamegostop().IsInitialized()) return false;
  }
  if (has_gamegostopans()) {
    if (!this->gamegostopans().IsInitialized()) return false;
  }
  if (has_gamestopans()) {
    if (!this->gamestopans().IsInitialized()) return false;
  }
  if (has_gameresult()) {
    if (!this->gameresult().IsInitialized()) return false;
  }
  if (has_gamenotipoint()) {
    if (!this->gamenotipoint().IsInitialized()) return false;
  }
  if (has_gamekick()) {
    if (!this->gamekick().IsInitialized()) return false;
  }
  if (has_ansgameemoti()) {
    if (!this->ansgameemoti().IsInitialized()) return false;
  }
  if (has_ansgameautoplay()) {
    if (!this->ansgameautoplay().IsInitialized()) return false;
  }
  if (has_ansgamerelayinfo()) {
    if (!this->ansgamerelayinfo().IsInitialized()) return false;
  }
  if (has_ansexitreservation()) {
    if (!this->ansexitreservation().IsInitialized()) return false;
  }
  return true;
}

void GLAnsGameProtocol::Swap(GLAnsGameProtocol* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gamestartready_, other->gamestartready_);
    std::swap(gameresetready_, other->gameresetready_);
    std::swap(gameinit_, other->gameinit_);
    std::swap(gamestart_, other->gamestart_);
    std::swap(gamereset_, other->gamereset_);
    std::swap(gamenotisun_, other->gamenotisun_);
    std::swap(gameselectsun_, other->gameselectsun_);
    std::swap(gamenotiselectsun_, other->gamenotiselectsun_);
    std::swap(gamesharing_, other->gamesharing_);
    std::swap(gamenagari_, other->gamenagari_);
    std::swap(gamechongtong_, other->gamechongtong_);
    std::swap(gameselectcard_, other->gameselectcard_);
    std::swap(gamebonus_, other->gamebonus_);
    std::swap(gametakepee_, other->gametakepee_);
    std::swap(gamebbuck_, other->gamebbuck_);
    std::swap(gameserisebbuck_, other->gameserisebbuck_);
    std::swap(gamebbuckeat_, other->gamebbuckeat_);
    std::swap(gamebomb_, other->gamebomb_);
    std::swap(gamepan_, other->gamepan_);
    std::swap(gamedadak_, other->gamedadak_);
    std::swap(gamejjok_, other->gamejjok_);
    std::swap(gameupset_, other->gameupset_);
    std::swap(gamealleatup_, other->gamealleatup_);
    std::swap(gamenotiturn_, other->gamenotiturn_);
    std::swap(gamemoveten_, other->gamemoveten_);
    std::swap(gamemovetenans_, other->gamemovetenans_);
    std::swap(gamechoicecard_, other->gamechoicecard_);
    std::swap(gameshake_, other->gameshake_);
    std::swap(gameshakeans_, other->gameshakeans_);
    std::swap(gameshakecount_, other->gameshakecount_);
    std::swap(gamecaptype_, other->gamecaptype_);
    std::swap(gamegodori_, other->gamegodori_);
    std::swap(gamekusa_, other->gamekusa_);
    std::swap(gamered_, other->gamered_);
    std::swap(gameblue_, other->gameblue_);
    std::swap(gamebak_, other->gamebak_);
    std::swap(gamebakfail_, other->gamebakfail_);
    std::swap(gamenotimission_, other->gamenotimission_);
    std::swap(gamenotimissioncard_, other->gamenotimissioncard_);
    std::swap(gamemissionstate_, other->gamemissionstate_);
    std::swap(gamegostop_, other->gamegostop_);
    std::swap(gamegostopans_, other->gamegostopans_);
    std::swap(gamestopans_, other->gamestopans_);
    std::swap(gameresult_, other->gameresult_);
    std::swap(gamenotipoint_, other->gamenotipoint_);
    std::swap(gameend_, other->gameend_);
    std::swap(gamekick_, other->gamekick_);
    std::swap(ansgameemoti_, other->ansgameemoti_);
    std::swap(ansgameautoplay_, other->ansgameautoplay_);
    std::swap(ansgamerelayinfo_, other->ansgamerelayinfo_);
    std::swap(ansexitreservation_, other->ansexitreservation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameProtocol::GetTypeName() const {
  return "GLAnsGameProtocol";
}


// ===================================================================

bool GLReqGameProtocol_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLReqGameProtocol_Type GLReqGameProtocol::NONE;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_READY;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_RESETREADY;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_INITGAME;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_RESET;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_START;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_SELECTSUNCARD;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_SELECTCARD;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_ASKGOSTOPANS;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_ASKSHAKEANS;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_CHOICECARDANS;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_MOVETEN;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_CHONGTONG;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_END;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_RESULTOK;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_AUTOPLAY;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_EMOTI;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_EXITRESERVATION;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_RELAYINFO;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_INITGAMETAN;
const GLReqGameProtocol_Type GLReqGameProtocol::REQ_GAME_TEST_PACKET;
const GLReqGameProtocol_Type GLReqGameProtocol::Type_MIN;
const GLReqGameProtocol_Type GLReqGameProtocol::Type_MAX;
const int GLReqGameProtocol::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLReqGameProtocol::kTypeFieldNumber;
const int GLReqGameProtocol::kReqGameReadyFieldNumber;
const int GLReqGameProtocol::kReqResetReadyFieldNumber;
const int GLReqGameProtocol::kReqInitGameFieldNumber;
const int GLReqGameProtocol::kReqResetFieldNumber;
const int GLReqGameProtocol::kReqStartFieldNumber;
const int GLReqGameProtocol::kReqSelectSunCardFieldNumber;
const int GLReqGameProtocol::kReqSelectCardFieldNumber;
const int GLReqGameProtocol::kReqAskGoStopAnsFieldNumber;
const int GLReqGameProtocol::kReqAskShakeAnsFieldNumber;
const int GLReqGameProtocol::kReqChoiceCardAnsFieldNumber;
const int GLReqGameProtocol::kReqMoveTenFieldNumber;
const int GLReqGameProtocol::kReqChongTongFieldNumber;
const int GLReqGameProtocol::kReqGameEndFieldNumber;
const int GLReqGameProtocol::kReqResultOkFieldNumber;
const int GLReqGameProtocol::kReqGameAutoPlayFieldNumber;
const int GLReqGameProtocol::kReqGameEmotiFieldNumber;
const int GLReqGameProtocol::kReqExitReservationFieldNumber;
const int GLReqGameProtocol::kReqRelayInfoFieldNumber;
const int GLReqGameProtocol::kReqTanInitFieldNumber;
const int GLReqGameProtocol::kGREQGAMETESTPACKETFieldNumber;
#endif  // !_MSC_VER

GLReqGameProtocol::GLReqGameProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameProtocol::InitAsDefaultInstance() {
  reqgameready_ = const_cast< ::GLReqGameReady*>(&::GLReqGameReady::default_instance());
  reqresetready_ = const_cast< ::GLReqResetReady*>(&::GLReqResetReady::default_instance());
  reqinitgame_ = const_cast< ::GLReqGameInitGame*>(&::GLReqGameInitGame::default_instance());
  reqreset_ = const_cast< ::GLReqGameReset*>(&::GLReqGameReset::default_instance());
  reqstart_ = const_cast< ::GLReqGameStart*>(&::GLReqGameStart::default_instance());
  reqselectsuncard_ = const_cast< ::GLReqGameSelectSunCard*>(&::GLReqGameSelectSunCard::default_instance());
  reqselectcard_ = const_cast< ::GLReqGameSelectCard*>(&::GLReqGameSelectCard::default_instance());
  reqaskgostopans_ = const_cast< ::GLReqGameAskGoStopAns*>(&::GLReqGameAskGoStopAns::default_instance());
  reqaskshakeans_ = const_cast< ::GLReqGameAskShakeAns*>(&::GLReqGameAskShakeAns::default_instance());
  reqchoicecardans_ = const_cast< ::GLReqGameChoiceCardAns*>(&::GLReqGameChoiceCardAns::default_instance());
  reqmoveten_ = const_cast< ::GLReqGameMoveTen*>(&::GLReqGameMoveTen::default_instance());
  reqchongtong_ = const_cast< ::GLReqGameChongTong*>(&::GLReqGameChongTong::default_instance());
  reqgameend_ = const_cast< ::GLReqGameEnd*>(&::GLReqGameEnd::default_instance());
  reqresultok_ = const_cast< ::GLReqResultOk*>(&::GLReqResultOk::default_instance());
  reqgameautoplay_ = const_cast< ::GLReqGameAutoPlay*>(&::GLReqGameAutoPlay::default_instance());
  reqgameemoti_ = const_cast< ::GLReqGameEmoti*>(&::GLReqGameEmoti::default_instance());
  reqexitreservation_ = const_cast< ::GLReqExitReservation*>(&::GLReqExitReservation::default_instance());
  reqrelayinfo_ = const_cast< ::GLReqRelayInfo*>(&::GLReqRelayInfo::default_instance());
  reqtaninit_ = const_cast< ::GLReqGameInitGameTan*>(&::GLReqGameInitGameTan::default_instance());
  g_req_game_test_packet_ = const_cast< ::G_REQ_GAME_TEST_PACKET*>(&::G_REQ_GAME_TEST_PACKET::default_instance());
}

GLReqGameProtocol::GLReqGameProtocol(const GLReqGameProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameProtocol::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  reqgameready_ = NULL;
  reqresetready_ = NULL;
  reqinitgame_ = NULL;
  reqreset_ = NULL;
  reqstart_ = NULL;
  reqselectsuncard_ = NULL;
  reqselectcard_ = NULL;
  reqaskgostopans_ = NULL;
  reqaskshakeans_ = NULL;
  reqchoicecardans_ = NULL;
  reqmoveten_ = NULL;
  reqchongtong_ = NULL;
  reqgameend_ = NULL;
  reqresultok_ = NULL;
  reqgameautoplay_ = NULL;
  reqgameemoti_ = NULL;
  reqexitreservation_ = NULL;
  reqrelayinfo_ = NULL;
  reqtaninit_ = NULL;
  g_req_game_test_packet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameProtocol::~GLReqGameProtocol() {
  SharedDtor();
}

void GLReqGameProtocol::SharedDtor() {
  if (this != default_instance_) {
    delete reqgameready_;
    delete reqresetready_;
    delete reqinitgame_;
    delete reqreset_;
    delete reqstart_;
    delete reqselectsuncard_;
    delete reqselectcard_;
    delete reqaskgostopans_;
    delete reqaskshakeans_;
    delete reqchoicecardans_;
    delete reqmoveten_;
    delete reqchongtong_;
    delete reqgameend_;
    delete reqresultok_;
    delete reqgameautoplay_;
    delete reqgameemoti_;
    delete reqexitreservation_;
    delete reqrelayinfo_;
    delete reqtaninit_;
    delete g_req_game_test_packet_;
  }
}

void GLReqGameProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameProtocol& GLReqGameProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameProtocol* GLReqGameProtocol::default_instance_ = NULL;

GLReqGameProtocol* GLReqGameProtocol::New() const {
  return new GLReqGameProtocol;
}

void GLReqGameProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_reqgameready()) {
      if (reqgameready_ != NULL) reqgameready_->::GLReqGameReady::Clear();
    }
    if (has_reqresetready()) {
      if (reqresetready_ != NULL) reqresetready_->::GLReqResetReady::Clear();
    }
    if (has_reqinitgame()) {
      if (reqinitgame_ != NULL) reqinitgame_->::GLReqGameInitGame::Clear();
    }
    if (has_reqreset()) {
      if (reqreset_ != NULL) reqreset_->::GLReqGameReset::Clear();
    }
    if (has_reqstart()) {
      if (reqstart_ != NULL) reqstart_->::GLReqGameStart::Clear();
    }
    if (has_reqselectsuncard()) {
      if (reqselectsuncard_ != NULL) reqselectsuncard_->::GLReqGameSelectSunCard::Clear();
    }
    if (has_reqselectcard()) {
      if (reqselectcard_ != NULL) reqselectcard_->::GLReqGameSelectCard::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_reqaskgostopans()) {
      if (reqaskgostopans_ != NULL) reqaskgostopans_->::GLReqGameAskGoStopAns::Clear();
    }
    if (has_reqaskshakeans()) {
      if (reqaskshakeans_ != NULL) reqaskshakeans_->::GLReqGameAskShakeAns::Clear();
    }
    if (has_reqchoicecardans()) {
      if (reqchoicecardans_ != NULL) reqchoicecardans_->::GLReqGameChoiceCardAns::Clear();
    }
    if (has_reqmoveten()) {
      if (reqmoveten_ != NULL) reqmoveten_->::GLReqGameMoveTen::Clear();
    }
    if (has_reqchongtong()) {
      if (reqchongtong_ != NULL) reqchongtong_->::GLReqGameChongTong::Clear();
    }
    if (has_reqgameend()) {
      if (reqgameend_ != NULL) reqgameend_->::GLReqGameEnd::Clear();
    }
    if (has_reqresultok()) {
      if (reqresultok_ != NULL) reqresultok_->::GLReqResultOk::Clear();
    }
    if (has_reqgameautoplay()) {
      if (reqgameautoplay_ != NULL) reqgameautoplay_->::GLReqGameAutoPlay::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_reqgameemoti()) {
      if (reqgameemoti_ != NULL) reqgameemoti_->::GLReqGameEmoti::Clear();
    }
    if (has_reqexitreservation()) {
      if (reqexitreservation_ != NULL) reqexitreservation_->::GLReqExitReservation::Clear();
    }
    if (has_reqrelayinfo()) {
      if (reqrelayinfo_ != NULL) reqrelayinfo_->::GLReqRelayInfo::Clear();
    }
    if (has_reqtaninit()) {
      if (reqtaninit_ != NULL) reqtaninit_->::GLReqGameInitGameTan::Clear();
    }
    if (has_g_req_game_test_packet()) {
      if (g_req_game_test_packet_ != NULL) g_req_game_test_packet_->::G_REQ_GAME_TEST_PACKET::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GLReqGameProtocol.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLReqGameProtocol_Type_IsValid(value)) {
            set_type(static_cast< ::GLReqGameProtocol_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqGameReady;
        break;
      }
      
      // optional .GLReqGameReady reqGameReady = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqGameReady:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqgameready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reqResetReady;
        break;
      }
      
      // optional .GLReqResetReady reqResetReady = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqResetReady:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqresetready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reqInitGame;
        break;
      }
      
      // optional .GLReqGameInitGame reqInitGame = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqInitGame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqinitgame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reqReset;
        break;
      }
      
      // optional .GLReqGameReset reqReset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqReset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqreset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reqStart;
        break;
      }
      
      // optional .GLReqGameStart reqStart = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqStart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqstart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reqSelectSunCard;
        break;
      }
      
      // optional .GLReqGameSelectSunCard reqSelectSunCard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqSelectSunCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqselectsuncard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reqSelectCard;
        break;
      }
      
      // optional .GLReqGameSelectCard reqSelectCard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqSelectCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqselectcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_reqAskGoStopAns;
        break;
      }
      
      // optional .GLReqGameAskGoStopAns reqAskGoStopAns = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqAskGoStopAns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqaskgostopans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_reqAskShakeAns;
        break;
      }
      
      // optional .GLReqGameAskShakeAns reqAskShakeAns = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqAskShakeAns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqaskshakeans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_reqChoiceCardAns;
        break;
      }
      
      // optional .GLReqGameChoiceCardAns reqChoiceCardAns = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqChoiceCardAns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqchoicecardans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_reqMoveTen;
        break;
      }
      
      // optional .GLReqGameMoveTen reqMoveTen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqMoveTen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqmoveten()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_reqChongTong;
        break;
      }
      
      // optional .GLReqGameChongTong reqChongTong = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqChongTong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqchongtong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_reqGameEnd;
        break;
      }
      
      // optional .GLReqGameEnd reqGameEnd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqGameEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqgameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_reqResultOk;
        break;
      }
      
      // optional .GLReqResultOk reqResultOk = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqResultOk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqresultok()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_reqGameAutoPlay;
        break;
      }
      
      // optional .GLReqGameAutoPlay reqGameAutoPlay = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqGameAutoPlay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqgameautoplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_reqGameEmoti;
        break;
      }
      
      // optional .GLReqGameEmoti reqGameEmoti = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqGameEmoti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqgameemoti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_reqExitReservation;
        break;
      }
      
      // optional .GLReqExitReservation reqExitReservation = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqExitReservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqexitreservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_reqRelayInfo;
        break;
      }
      
      // optional .GLReqRelayInfo reqRelayInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqRelayInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqrelayinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_reqTanInit;
        break;
      }
      
      // optional .GLReqGameInitGameTan reqTanInit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqTanInit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqtaninit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_g_REQ_GAME_TEST_PACKET;
        break;
      }
      
      // optional .G_REQ_GAME_TEST_PACKET g_REQ_GAME_TEST_PACKET = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_g_REQ_GAME_TEST_PACKET:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g_req_game_test_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GLReqGameProtocol.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .GLReqGameReady reqGameReady = 2;
  if (has_reqgameready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->reqgameready(), output);
  }
  
  // optional .GLReqResetReady reqResetReady = 3;
  if (has_reqresetready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->reqresetready(), output);
  }
  
  // optional .GLReqGameInitGame reqInitGame = 4;
  if (has_reqinitgame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->reqinitgame(), output);
  }
  
  // optional .GLReqGameReset reqReset = 5;
  if (has_reqreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->reqreset(), output);
  }
  
  // optional .GLReqGameStart reqStart = 6;
  if (has_reqstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->reqstart(), output);
  }
  
  // optional .GLReqGameSelectSunCard reqSelectSunCard = 7;
  if (has_reqselectsuncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->reqselectsuncard(), output);
  }
  
  // optional .GLReqGameSelectCard reqSelectCard = 8;
  if (has_reqselectcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->reqselectcard(), output);
  }
  
  // optional .GLReqGameAskGoStopAns reqAskGoStopAns = 9;
  if (has_reqaskgostopans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->reqaskgostopans(), output);
  }
  
  // optional .GLReqGameAskShakeAns reqAskShakeAns = 10;
  if (has_reqaskshakeans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->reqaskshakeans(), output);
  }
  
  // optional .GLReqGameChoiceCardAns reqChoiceCardAns = 11;
  if (has_reqchoicecardans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->reqchoicecardans(), output);
  }
  
  // optional .GLReqGameMoveTen reqMoveTen = 12;
  if (has_reqmoveten()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->reqmoveten(), output);
  }
  
  // optional .GLReqGameChongTong reqChongTong = 13;
  if (has_reqchongtong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->reqchongtong(), output);
  }
  
  // optional .GLReqGameEnd reqGameEnd = 14;
  if (has_reqgameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->reqgameend(), output);
  }
  
  // optional .GLReqResultOk reqResultOk = 15;
  if (has_reqresultok()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->reqresultok(), output);
  }
  
  // optional .GLReqGameAutoPlay reqGameAutoPlay = 16;
  if (has_reqgameautoplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->reqgameautoplay(), output);
  }
  
  // optional .GLReqGameEmoti reqGameEmoti = 17;
  if (has_reqgameemoti()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->reqgameemoti(), output);
  }
  
  // optional .GLReqExitReservation reqExitReservation = 18;
  if (has_reqexitreservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->reqexitreservation(), output);
  }
  
  // optional .GLReqRelayInfo reqRelayInfo = 19;
  if (has_reqrelayinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->reqrelayinfo(), output);
  }
  
  // optional .GLReqGameInitGameTan reqTanInit = 20;
  if (has_reqtaninit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->reqtaninit(), output);
  }
  
  // optional .G_REQ_GAME_TEST_PACKET g_REQ_GAME_TEST_PACKET = 21;
  if (has_g_req_game_test_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->g_req_game_test_packet(), output);
  }
  
}

int GLReqGameProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GLReqGameProtocol.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .GLReqGameReady reqGameReady = 2;
    if (has_reqgameready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqgameready());
    }
    
    // optional .GLReqResetReady reqResetReady = 3;
    if (has_reqresetready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqresetready());
    }
    
    // optional .GLReqGameInitGame reqInitGame = 4;
    if (has_reqinitgame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqinitgame());
    }
    
    // optional .GLReqGameReset reqReset = 5;
    if (has_reqreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqreset());
    }
    
    // optional .GLReqGameStart reqStart = 6;
    if (has_reqstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqstart());
    }
    
    // optional .GLReqGameSelectSunCard reqSelectSunCard = 7;
    if (has_reqselectsuncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqselectsuncard());
    }
    
    // optional .GLReqGameSelectCard reqSelectCard = 8;
    if (has_reqselectcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqselectcard());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .GLReqGameAskGoStopAns reqAskGoStopAns = 9;
    if (has_reqaskgostopans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqaskgostopans());
    }
    
    // optional .GLReqGameAskShakeAns reqAskShakeAns = 10;
    if (has_reqaskshakeans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqaskshakeans());
    }
    
    // optional .GLReqGameChoiceCardAns reqChoiceCardAns = 11;
    if (has_reqchoicecardans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqchoicecardans());
    }
    
    // optional .GLReqGameMoveTen reqMoveTen = 12;
    if (has_reqmoveten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqmoveten());
    }
    
    // optional .GLReqGameChongTong reqChongTong = 13;
    if (has_reqchongtong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqchongtong());
    }
    
    // optional .GLReqGameEnd reqGameEnd = 14;
    if (has_reqgameend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqgameend());
    }
    
    // optional .GLReqResultOk reqResultOk = 15;
    if (has_reqresultok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqresultok());
    }
    
    // optional .GLReqGameAutoPlay reqGameAutoPlay = 16;
    if (has_reqgameautoplay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqgameautoplay());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .GLReqGameEmoti reqGameEmoti = 17;
    if (has_reqgameemoti()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqgameemoti());
    }
    
    // optional .GLReqExitReservation reqExitReservation = 18;
    if (has_reqexitreservation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqexitreservation());
    }
    
    // optional .GLReqRelayInfo reqRelayInfo = 19;
    if (has_reqrelayinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqrelayinfo());
    }
    
    // optional .GLReqGameInitGameTan reqTanInit = 20;
    if (has_reqtaninit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqtaninit());
    }
    
    // optional .G_REQ_GAME_TEST_PACKET g_REQ_GAME_TEST_PACKET = 21;
    if (has_g_req_game_test_packet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->g_req_game_test_packet());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameProtocol*>(&from));
}

void GLReqGameProtocol::MergeFrom(const GLReqGameProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reqgameready()) {
      mutable_reqgameready()->::GLReqGameReady::MergeFrom(from.reqgameready());
    }
    if (from.has_reqresetready()) {
      mutable_reqresetready()->::GLReqResetReady::MergeFrom(from.reqresetready());
    }
    if (from.has_reqinitgame()) {
      mutable_reqinitgame()->::GLReqGameInitGame::MergeFrom(from.reqinitgame());
    }
    if (from.has_reqreset()) {
      mutable_reqreset()->::GLReqGameReset::MergeFrom(from.reqreset());
    }
    if (from.has_reqstart()) {
      mutable_reqstart()->::GLReqGameStart::MergeFrom(from.reqstart());
    }
    if (from.has_reqselectsuncard()) {
      mutable_reqselectsuncard()->::GLReqGameSelectSunCard::MergeFrom(from.reqselectsuncard());
    }
    if (from.has_reqselectcard()) {
      mutable_reqselectcard()->::GLReqGameSelectCard::MergeFrom(from.reqselectcard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reqaskgostopans()) {
      mutable_reqaskgostopans()->::GLReqGameAskGoStopAns::MergeFrom(from.reqaskgostopans());
    }
    if (from.has_reqaskshakeans()) {
      mutable_reqaskshakeans()->::GLReqGameAskShakeAns::MergeFrom(from.reqaskshakeans());
    }
    if (from.has_reqchoicecardans()) {
      mutable_reqchoicecardans()->::GLReqGameChoiceCardAns::MergeFrom(from.reqchoicecardans());
    }
    if (from.has_reqmoveten()) {
      mutable_reqmoveten()->::GLReqGameMoveTen::MergeFrom(from.reqmoveten());
    }
    if (from.has_reqchongtong()) {
      mutable_reqchongtong()->::GLReqGameChongTong::MergeFrom(from.reqchongtong());
    }
    if (from.has_reqgameend()) {
      mutable_reqgameend()->::GLReqGameEnd::MergeFrom(from.reqgameend());
    }
    if (from.has_reqresultok()) {
      mutable_reqresultok()->::GLReqResultOk::MergeFrom(from.reqresultok());
    }
    if (from.has_reqgameautoplay()) {
      mutable_reqgameautoplay()->::GLReqGameAutoPlay::MergeFrom(from.reqgameautoplay());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_reqgameemoti()) {
      mutable_reqgameemoti()->::GLReqGameEmoti::MergeFrom(from.reqgameemoti());
    }
    if (from.has_reqexitreservation()) {
      mutable_reqexitreservation()->::GLReqExitReservation::MergeFrom(from.reqexitreservation());
    }
    if (from.has_reqrelayinfo()) {
      mutable_reqrelayinfo()->::GLReqRelayInfo::MergeFrom(from.reqrelayinfo());
    }
    if (from.has_reqtaninit()) {
      mutable_reqtaninit()->::GLReqGameInitGameTan::MergeFrom(from.reqtaninit());
    }
    if (from.has_g_req_game_test_packet()) {
      mutable_g_req_game_test_packet()->::G_REQ_GAME_TEST_PACKET::MergeFrom(from.g_req_game_test_packet());
    }
  }
}

void GLReqGameProtocol::CopyFrom(const GLReqGameProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_reqgameready()) {
    if (!this->reqgameready().IsInitialized()) return false;
  }
  if (has_reqresetready()) {
    if (!this->reqresetready().IsInitialized()) return false;
  }
  if (has_reqinitgame()) {
    if (!this->reqinitgame().IsInitialized()) return false;
  }
  if (has_reqreset()) {
    if (!this->reqreset().IsInitialized()) return false;
  }
  if (has_reqselectsuncard()) {
    if (!this->reqselectsuncard().IsInitialized()) return false;
  }
  if (has_reqselectcard()) {
    if (!this->reqselectcard().IsInitialized()) return false;
  }
  if (has_reqaskgostopans()) {
    if (!this->reqaskgostopans().IsInitialized()) return false;
  }
  if (has_reqaskshakeans()) {
    if (!this->reqaskshakeans().IsInitialized()) return false;
  }
  if (has_reqchoicecardans()) {
    if (!this->reqchoicecardans().IsInitialized()) return false;
  }
  if (has_reqmoveten()) {
    if (!this->reqmoveten().IsInitialized()) return false;
  }
  if (has_reqchongtong()) {
    if (!this->reqchongtong().IsInitialized()) return false;
  }
  if (has_reqgameend()) {
    if (!this->reqgameend().IsInitialized()) return false;
  }
  if (has_reqresultok()) {
    if (!this->reqresultok().IsInitialized()) return false;
  }
  if (has_reqgameautoplay()) {
    if (!this->reqgameautoplay().IsInitialized()) return false;
  }
  if (has_reqgameemoti()) {
    if (!this->reqgameemoti().IsInitialized()) return false;
  }
  if (has_reqexitreservation()) {
    if (!this->reqexitreservation().IsInitialized()) return false;
  }
  if (has_reqrelayinfo()) {
    if (!this->reqrelayinfo().IsInitialized()) return false;
  }
  if (has_reqtaninit()) {
    if (!this->reqtaninit().IsInitialized()) return false;
  }
  if (has_g_req_game_test_packet()) {
    if (!this->g_req_game_test_packet().IsInitialized()) return false;
  }
  return true;
}

void GLReqGameProtocol::Swap(GLReqGameProtocol* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(reqgameready_, other->reqgameready_);
    std::swap(reqresetready_, other->reqresetready_);
    std::swap(reqinitgame_, other->reqinitgame_);
    std::swap(reqreset_, other->reqreset_);
    std::swap(reqstart_, other->reqstart_);
    std::swap(reqselectsuncard_, other->reqselectsuncard_);
    std::swap(reqselectcard_, other->reqselectcard_);
    std::swap(reqaskgostopans_, other->reqaskgostopans_);
    std::swap(reqaskshakeans_, other->reqaskshakeans_);
    std::swap(reqchoicecardans_, other->reqchoicecardans_);
    std::swap(reqmoveten_, other->reqmoveten_);
    std::swap(reqchongtong_, other->reqchongtong_);
    std::swap(reqgameend_, other->reqgameend_);
    std::swap(reqresultok_, other->reqresultok_);
    std::swap(reqgameautoplay_, other->reqgameautoplay_);
    std::swap(reqgameemoti_, other->reqgameemoti_);
    std::swap(reqexitreservation_, other->reqexitreservation_);
    std::swap(reqrelayinfo_, other->reqrelayinfo_);
    std::swap(reqtaninit_, other->reqtaninit_);
    std::swap(g_req_game_test_packet_, other->g_req_game_test_packet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameProtocol::GetTypeName() const {
  return "GLReqGameProtocol";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
