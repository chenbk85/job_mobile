// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameLogic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_gameLogic_2eproto() {
  delete GameUserInfo::default_instance_;
  delete GameRoomInfo::default_instance_;
  delete GameInfo::default_instance_;
  delete MemberInfo::default_instance_;
  delete s_req_game_test_packet::default_instance_;
  delete s_req_send_cmd::default_instance_;
  delete s_req_join_room::default_instance_;
  delete s_req_send_start::default_instance_;
  delete s_req_send_select_card::default_instance_;
  delete s_req_betting::default_instance_;
  delete s_req_ping::default_instance_;
  delete s_req_entry::default_instance_;
  delete s_req_continue::default_instance_;
  delete s_req_ruleset::default_instance_;
  delete s_req_jokboset::default_instance_;
  delete s_req_ack::default_instance_;
  delete s_req_choiceremovecard::default_instance_;
  delete s_req_purge::default_instance_;
  delete s_req_exitque::default_instance_;
  delete s_req_soundtype::default_instance_;
  delete s_req_abuse::default_instance_;
  delete s_req_observe::default_instance_;
  delete GLReqGameProtocol::default_instance_;
  delete s_ans_game_test_packet::default_instance_;
  delete s_ans_join_room::default_instance_;
  delete s_ans_deal_card::default_instance_;
  delete s_ans_deal_cards::default_instance_;
  delete s_ans_send_ante::default_instance_;
  delete s_ans_select_card::default_instance_;
  delete s_ans_opencard::default_instance_;
  delete s_ans_boss::default_instance_;
  delete s_ans_deal_hiddencard::default_instance_;
  delete s_ans_betting::default_instance_;
  delete s_ans_pong::default_instance_;
  delete s_ans_entry::default_instance_;
  delete s_betting_msg::default_instance_;
  delete s_finished::default_instance_;
  delete s_jackpotmoneyntf::default_instance_;
  delete s_ans_continue::default_instance_;
  delete s_ans_ruleset::default_instance_;
  delete s_ans_start::default_instance_;
  delete s_carddata::default_instance_;
  delete s_entryreject::default_instance_;
  delete s_nostart::default_instance_;
  delete s_newgame::default_instance_;
  delete s_ans_purge::default_instance_;
  delete s_purgeinfo::default_instance_;
  delete s_systemmsg::default_instance_;
  delete s_exitntf::default_instance_;
  delete s_refillmoneyntf::default_instance_;
  delete s_bonus::default_instance_;
  delete s_userjoinerr::default_instance_;
  delete s_userdisconnect::default_instance_;
  delete s_soundtypeans::default_instance_;
  delete s_userjoinans::default_instance_;
  delete s_startreq::default_instance_;
  delete s_ans_abuse::default_instance_;
  delete s_continue_msg::default_instance_;
  delete s_ans_observe::default_instance_;
  delete s_observercnt::default_instance_;
  delete GLAnsGameProtocol::default_instance_;
  delete PKCards::default_instance_;
  delete PKMoney::default_instance_;
  delete UserMoney::default_instance_;
  delete PKCWinLose::default_instance_;
  delete PKUserInfo::default_instance_;
  delete PKOneCard::default_instance_;
  delete PKVecMoney::default_instance_;
  delete PKWinLoseInfo::default_instance_;
  delete PKVecUSN::default_instance_;
  delete PKWAITINGUSERDATA::default_instance_;
  delete CRefill::default_instance_;
  delete PKItemList::default_instance_;
  delete PKItem::default_instance_;
  delete PKRCUserData::default_instance_;
  delete PKOption::default_instance_;
  delete PKRCUser::default_instance_;
  delete PKBettingMsg::default_instance_;
  delete PKBettingMsgTable::default_instance_;
  delete PKMoneyTable::default_instance_;
  delete PKCardTable::default_instance_;
  delete PKUITable::default_instance_;
  delete PKRCRoomData::default_instance_;
  delete PKSPUserBaseInfo::default_instance_;
  delete PKMsgCS_Entry::default_instance_;
  delete PKMsgCS_Observe::default_instance_;
  delete PKMsgCS_Start::default_instance_;
  delete PKMsgCS_SelectedCardReq::default_instance_;
  delete PKMsgCS_BettingReq::default_instance_;
  delete PKMsgCS_ChoiceRemoveCard::default_instance_;
  delete PKMsgCS_Purge::default_instance_;
  delete PKMsgCS_Abuse::default_instance_;
  delete PKMsgCS_AskPurgeVote::default_instance_;
  delete PKMsgCS_AnswerPurgeVote::default_instance_;
  delete PKMsgCS_WaitingUserTicketReq::default_instance_;
  delete PKMsgCS_UpdateWaitingUserInfoReq::default_instance_;
  delete PKMsgCS_SoundType::default_instance_;
  delete PKMsgCS_ExitQue::default_instance_;
  delete PKMsgCS_Continue::default_instance_;
  delete PKMsgCS_RuleSet::default_instance_;
  delete PKMsgCS_GameMasterCall::default_instance_;
  delete PKMsgCS_FieldReserved::default_instance_;
  delete PKMsgCS_JokboSet::default_instance_;
  delete PKMsgCS_TestKeySetting::default_instance_;
  delete PKMsgCS_CheckNotice::default_instance_;
  delete PKMsgCS_Ack::default_instance_;
  delete PKMsgCS_Ping::default_instance_;
  delete PKMsgSC_UserJoinAns::default_instance_;
  delete PKMsgSC_UserJoinErr::default_instance_;
  delete PKMsgSC_UserDisconnect::default_instance_;
  delete PKMsgSC_CardData::default_instance_;
  delete PKMsgSC_EntryAns::default_instance_;
  delete PKMsgSC_EntryReject::default_instance_;
  delete PKMsgSC_ObserveAns::default_instance_;
  delete PKMsgSC_StartReq::default_instance_;
  delete PKMsgSC_StartAns::default_instance_;
  delete PKMsgSC_NoStart::default_instance_;
  delete PKMsgSC_DealCards::default_instance_;
  delete PKMsgSC_SelectedCardAns::default_instance_;
  delete PKMsgSC_DealOpenCard::default_instance_;
  delete PKMsgSC_DealCard::default_instance_;
  delete PKMsgSC_Boss::default_instance_;
  delete PKMsgSC_Betting::default_instance_;
  delete PKMsgSC_BettingAns::default_instance_;
  delete PKMsgSC_BettingAnsMsg::default_instance_;
  delete PKMsgSC_DealHiddenCard::default_instance_;
  delete PKMsgSC_AnteMoney::default_instance_;
  delete PKMsgSC_RuleQuaterHalf::default_instance_;
  delete PKMsgSC_Finished::default_instance_;
  delete PKMsgSC_NewGame::default_instance_;
  delete PKMsgSC_ContinueAns::default_instance_;
  delete PKMsgSC_Continue::default_instance_;
  delete PKMsgSC_SystemMsg::default_instance_;
  delete PKMsgSC_PurgeAns::default_instance_;
  delete PKMsgSC_PurgeInfo::default_instance_;
  delete PKMsgSC_SetPurgeMoney::default_instance_;
  delete PKMsgSC_AssaItemNotify::default_instance_;
  delete PKMsgSC_ThankYouItemNotify::default_instance_;
  delete PKMsgSC_MadeItemNotify::default_instance_;
  delete PKMsgSC_ExtMoneyNotify::default_instance_;
  delete PKMsgSC_GameEndSystemMsg::default_instance_;
  delete PKMsgSC_ChangeAvatarNotify::default_instance_;
  delete PKMsgSC_AbuseAns::default_instance_;
  delete PKMsgSC_SoundTypeAns::default_instance_;
  delete PKMsgSC_FMoney::default_instance_;
  delete PKMsgSC_ItemNotify::default_instance_;
  delete PKMsgSC_DisconnectMoneyNotify::default_instance_;
  delete PKMsgSC_ExitNtf::default_instance_;
  delete PKMsgSC_RematchOKAns::default_instance_;
  delete PKMsgSC_RuleNotify::default_instance_;
  delete PKMsgSC_AllowEntryWaitingUser::default_instance_;
  delete PKMsgSC_AllWaitingUserDataNtf::default_instance_;
  delete PKMsgSC_UserDataChangeNtf::default_instance_;
  delete PKMsgSC_RefillMoneyNtf::default_instance_;
  delete PKMsgSC_JackpotMoneyNtf::default_instance_;
  delete PKMsgSC_GuardianAngelMoney::default_instance_;
  delete PKMsgSC_GameMasterCallNtf::default_instance_;
  delete PKMsgSC_ObserverCnt::default_instance_;
  delete PKMsgSC_Bonus::default_instance_;
  delete PKMsgSC_PoliceNotify::default_instance_;
}

void protobuf_AddDesc_gameLogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  GameUserInfo::default_instance_ = new GameUserInfo();
  GameRoomInfo::default_instance_ = new GameRoomInfo();
  GameInfo::default_instance_ = new GameInfo();
  MemberInfo::default_instance_ = new MemberInfo();
  s_req_game_test_packet::default_instance_ = new s_req_game_test_packet();
  s_req_send_cmd::default_instance_ = new s_req_send_cmd();
  s_req_join_room::default_instance_ = new s_req_join_room();
  s_req_send_start::default_instance_ = new s_req_send_start();
  s_req_send_select_card::default_instance_ = new s_req_send_select_card();
  s_req_betting::default_instance_ = new s_req_betting();
  s_req_ping::default_instance_ = new s_req_ping();
  s_req_entry::default_instance_ = new s_req_entry();
  s_req_continue::default_instance_ = new s_req_continue();
  s_req_ruleset::default_instance_ = new s_req_ruleset();
  s_req_jokboset::default_instance_ = new s_req_jokboset();
  s_req_ack::default_instance_ = new s_req_ack();
  s_req_choiceremovecard::default_instance_ = new s_req_choiceremovecard();
  s_req_purge::default_instance_ = new s_req_purge();
  s_req_exitque::default_instance_ = new s_req_exitque();
  s_req_soundtype::default_instance_ = new s_req_soundtype();
  s_req_abuse::default_instance_ = new s_req_abuse();
  s_req_observe::default_instance_ = new s_req_observe();
  GLReqGameProtocol::default_instance_ = new GLReqGameProtocol();
  s_ans_game_test_packet::default_instance_ = new s_ans_game_test_packet();
  s_ans_join_room::default_instance_ = new s_ans_join_room();
  s_ans_deal_card::default_instance_ = new s_ans_deal_card();
  s_ans_deal_cards::default_instance_ = new s_ans_deal_cards();
  s_ans_send_ante::default_instance_ = new s_ans_send_ante();
  s_ans_select_card::default_instance_ = new s_ans_select_card();
  s_ans_opencard::default_instance_ = new s_ans_opencard();
  s_ans_boss::default_instance_ = new s_ans_boss();
  s_ans_deal_hiddencard::default_instance_ = new s_ans_deal_hiddencard();
  s_ans_betting::default_instance_ = new s_ans_betting();
  s_ans_pong::default_instance_ = new s_ans_pong();
  s_ans_entry::default_instance_ = new s_ans_entry();
  s_betting_msg::default_instance_ = new s_betting_msg();
  s_finished::default_instance_ = new s_finished();
  s_jackpotmoneyntf::default_instance_ = new s_jackpotmoneyntf();
  s_ans_continue::default_instance_ = new s_ans_continue();
  s_ans_ruleset::default_instance_ = new s_ans_ruleset();
  s_ans_start::default_instance_ = new s_ans_start();
  s_carddata::default_instance_ = new s_carddata();
  s_entryreject::default_instance_ = new s_entryreject();
  s_nostart::default_instance_ = new s_nostart();
  s_newgame::default_instance_ = new s_newgame();
  s_ans_purge::default_instance_ = new s_ans_purge();
  s_purgeinfo::default_instance_ = new s_purgeinfo();
  s_systemmsg::default_instance_ = new s_systemmsg();
  s_exitntf::default_instance_ = new s_exitntf();
  s_refillmoneyntf::default_instance_ = new s_refillmoneyntf();
  s_bonus::default_instance_ = new s_bonus();
  s_userjoinerr::default_instance_ = new s_userjoinerr();
  s_userdisconnect::default_instance_ = new s_userdisconnect();
  s_soundtypeans::default_instance_ = new s_soundtypeans();
  s_userjoinans::default_instance_ = new s_userjoinans();
  s_startreq::default_instance_ = new s_startreq();
  s_ans_abuse::default_instance_ = new s_ans_abuse();
  s_continue_msg::default_instance_ = new s_continue_msg();
  s_ans_observe::default_instance_ = new s_ans_observe();
  s_observercnt::default_instance_ = new s_observercnt();
  GLAnsGameProtocol::default_instance_ = new GLAnsGameProtocol();
  PKCards::default_instance_ = new PKCards();
  PKMoney::default_instance_ = new PKMoney();
  UserMoney::default_instance_ = new UserMoney();
  PKCWinLose::default_instance_ = new PKCWinLose();
  PKUserInfo::default_instance_ = new PKUserInfo();
  PKOneCard::default_instance_ = new PKOneCard();
  PKVecMoney::default_instance_ = new PKVecMoney();
  PKWinLoseInfo::default_instance_ = new PKWinLoseInfo();
  PKVecUSN::default_instance_ = new PKVecUSN();
  PKWAITINGUSERDATA::default_instance_ = new PKWAITINGUSERDATA();
  CRefill::default_instance_ = new CRefill();
  PKItemList::default_instance_ = new PKItemList();
  PKItem::default_instance_ = new PKItem();
  PKRCUserData::default_instance_ = new PKRCUserData();
  PKOption::default_instance_ = new PKOption();
  PKRCUser::default_instance_ = new PKRCUser();
  PKBettingMsg::default_instance_ = new PKBettingMsg();
  PKBettingMsgTable::default_instance_ = new PKBettingMsgTable();
  PKMoneyTable::default_instance_ = new PKMoneyTable();
  PKCardTable::default_instance_ = new PKCardTable();
  PKUITable::default_instance_ = new PKUITable();
  PKRCRoomData::default_instance_ = new PKRCRoomData();
  PKSPUserBaseInfo::default_instance_ = new PKSPUserBaseInfo();
  PKMsgCS_Entry::default_instance_ = new PKMsgCS_Entry();
  PKMsgCS_Observe::default_instance_ = new PKMsgCS_Observe();
  PKMsgCS_Start::default_instance_ = new PKMsgCS_Start();
  PKMsgCS_SelectedCardReq::default_instance_ = new PKMsgCS_SelectedCardReq();
  PKMsgCS_BettingReq::default_instance_ = new PKMsgCS_BettingReq();
  PKMsgCS_ChoiceRemoveCard::default_instance_ = new PKMsgCS_ChoiceRemoveCard();
  PKMsgCS_Purge::default_instance_ = new PKMsgCS_Purge();
  PKMsgCS_Abuse::default_instance_ = new PKMsgCS_Abuse();
  PKMsgCS_AskPurgeVote::default_instance_ = new PKMsgCS_AskPurgeVote();
  PKMsgCS_AnswerPurgeVote::default_instance_ = new PKMsgCS_AnswerPurgeVote();
  PKMsgCS_WaitingUserTicketReq::default_instance_ = new PKMsgCS_WaitingUserTicketReq();
  PKMsgCS_UpdateWaitingUserInfoReq::default_instance_ = new PKMsgCS_UpdateWaitingUserInfoReq();
  PKMsgCS_SoundType::default_instance_ = new PKMsgCS_SoundType();
  PKMsgCS_ExitQue::default_instance_ = new PKMsgCS_ExitQue();
  PKMsgCS_Continue::default_instance_ = new PKMsgCS_Continue();
  PKMsgCS_RuleSet::default_instance_ = new PKMsgCS_RuleSet();
  PKMsgCS_GameMasterCall::default_instance_ = new PKMsgCS_GameMasterCall();
  PKMsgCS_FieldReserved::default_instance_ = new PKMsgCS_FieldReserved();
  PKMsgCS_JokboSet::default_instance_ = new PKMsgCS_JokboSet();
  PKMsgCS_TestKeySetting::default_instance_ = new PKMsgCS_TestKeySetting();
  PKMsgCS_CheckNotice::default_instance_ = new PKMsgCS_CheckNotice();
  PKMsgCS_Ack::default_instance_ = new PKMsgCS_Ack();
  PKMsgCS_Ping::default_instance_ = new PKMsgCS_Ping();
  PKMsgSC_UserJoinAns::default_instance_ = new PKMsgSC_UserJoinAns();
  PKMsgSC_UserJoinErr::default_instance_ = new PKMsgSC_UserJoinErr();
  PKMsgSC_UserDisconnect::default_instance_ = new PKMsgSC_UserDisconnect();
  PKMsgSC_CardData::default_instance_ = new PKMsgSC_CardData();
  PKMsgSC_EntryAns::default_instance_ = new PKMsgSC_EntryAns();
  PKMsgSC_EntryReject::default_instance_ = new PKMsgSC_EntryReject();
  PKMsgSC_ObserveAns::default_instance_ = new PKMsgSC_ObserveAns();
  PKMsgSC_StartReq::default_instance_ = new PKMsgSC_StartReq();
  PKMsgSC_StartAns::default_instance_ = new PKMsgSC_StartAns();
  PKMsgSC_NoStart::default_instance_ = new PKMsgSC_NoStart();
  PKMsgSC_DealCards::default_instance_ = new PKMsgSC_DealCards();
  PKMsgSC_SelectedCardAns::default_instance_ = new PKMsgSC_SelectedCardAns();
  PKMsgSC_DealOpenCard::default_instance_ = new PKMsgSC_DealOpenCard();
  PKMsgSC_DealCard::default_instance_ = new PKMsgSC_DealCard();
  PKMsgSC_Boss::default_instance_ = new PKMsgSC_Boss();
  PKMsgSC_Betting::default_instance_ = new PKMsgSC_Betting();
  PKMsgSC_BettingAns::default_instance_ = new PKMsgSC_BettingAns();
  PKMsgSC_BettingAnsMsg::default_instance_ = new PKMsgSC_BettingAnsMsg();
  PKMsgSC_DealHiddenCard::default_instance_ = new PKMsgSC_DealHiddenCard();
  PKMsgSC_AnteMoney::default_instance_ = new PKMsgSC_AnteMoney();
  PKMsgSC_RuleQuaterHalf::default_instance_ = new PKMsgSC_RuleQuaterHalf();
  PKMsgSC_Finished::default_instance_ = new PKMsgSC_Finished();
  PKMsgSC_NewGame::default_instance_ = new PKMsgSC_NewGame();
  PKMsgSC_ContinueAns::default_instance_ = new PKMsgSC_ContinueAns();
  PKMsgSC_Continue::default_instance_ = new PKMsgSC_Continue();
  PKMsgSC_SystemMsg::default_instance_ = new PKMsgSC_SystemMsg();
  PKMsgSC_PurgeAns::default_instance_ = new PKMsgSC_PurgeAns();
  PKMsgSC_PurgeInfo::default_instance_ = new PKMsgSC_PurgeInfo();
  PKMsgSC_SetPurgeMoney::default_instance_ = new PKMsgSC_SetPurgeMoney();
  PKMsgSC_AssaItemNotify::default_instance_ = new PKMsgSC_AssaItemNotify();
  PKMsgSC_ThankYouItemNotify::default_instance_ = new PKMsgSC_ThankYouItemNotify();
  PKMsgSC_MadeItemNotify::default_instance_ = new PKMsgSC_MadeItemNotify();
  PKMsgSC_ExtMoneyNotify::default_instance_ = new PKMsgSC_ExtMoneyNotify();
  PKMsgSC_GameEndSystemMsg::default_instance_ = new PKMsgSC_GameEndSystemMsg();
  PKMsgSC_ChangeAvatarNotify::default_instance_ = new PKMsgSC_ChangeAvatarNotify();
  PKMsgSC_AbuseAns::default_instance_ = new PKMsgSC_AbuseAns();
  PKMsgSC_SoundTypeAns::default_instance_ = new PKMsgSC_SoundTypeAns();
  PKMsgSC_FMoney::default_instance_ = new PKMsgSC_FMoney();
  PKMsgSC_ItemNotify::default_instance_ = new PKMsgSC_ItemNotify();
  PKMsgSC_DisconnectMoneyNotify::default_instance_ = new PKMsgSC_DisconnectMoneyNotify();
  PKMsgSC_ExitNtf::default_instance_ = new PKMsgSC_ExitNtf();
  PKMsgSC_RematchOKAns::default_instance_ = new PKMsgSC_RematchOKAns();
  PKMsgSC_RuleNotify::default_instance_ = new PKMsgSC_RuleNotify();
  PKMsgSC_AllowEntryWaitingUser::default_instance_ = new PKMsgSC_AllowEntryWaitingUser();
  PKMsgSC_AllWaitingUserDataNtf::default_instance_ = new PKMsgSC_AllWaitingUserDataNtf();
  PKMsgSC_UserDataChangeNtf::default_instance_ = new PKMsgSC_UserDataChangeNtf();
  PKMsgSC_RefillMoneyNtf::default_instance_ = new PKMsgSC_RefillMoneyNtf();
  PKMsgSC_JackpotMoneyNtf::default_instance_ = new PKMsgSC_JackpotMoneyNtf();
  PKMsgSC_GuardianAngelMoney::default_instance_ = new PKMsgSC_GuardianAngelMoney();
  PKMsgSC_GameMasterCallNtf::default_instance_ = new PKMsgSC_GameMasterCallNtf();
  PKMsgSC_ObserverCnt::default_instance_ = new PKMsgSC_ObserverCnt();
  PKMsgSC_Bonus::default_instance_ = new PKMsgSC_Bonus();
  PKMsgSC_PoliceNotify::default_instance_ = new PKMsgSC_PoliceNotify();
  GameUserInfo::default_instance_->InitAsDefaultInstance();
  GameRoomInfo::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  MemberInfo::default_instance_->InitAsDefaultInstance();
  s_req_game_test_packet::default_instance_->InitAsDefaultInstance();
  s_req_send_cmd::default_instance_->InitAsDefaultInstance();
  s_req_join_room::default_instance_->InitAsDefaultInstance();
  s_req_send_start::default_instance_->InitAsDefaultInstance();
  s_req_send_select_card::default_instance_->InitAsDefaultInstance();
  s_req_betting::default_instance_->InitAsDefaultInstance();
  s_req_ping::default_instance_->InitAsDefaultInstance();
  s_req_entry::default_instance_->InitAsDefaultInstance();
  s_req_continue::default_instance_->InitAsDefaultInstance();
  s_req_ruleset::default_instance_->InitAsDefaultInstance();
  s_req_jokboset::default_instance_->InitAsDefaultInstance();
  s_req_ack::default_instance_->InitAsDefaultInstance();
  s_req_choiceremovecard::default_instance_->InitAsDefaultInstance();
  s_req_purge::default_instance_->InitAsDefaultInstance();
  s_req_exitque::default_instance_->InitAsDefaultInstance();
  s_req_soundtype::default_instance_->InitAsDefaultInstance();
  s_req_abuse::default_instance_->InitAsDefaultInstance();
  s_req_observe::default_instance_->InitAsDefaultInstance();
  GLReqGameProtocol::default_instance_->InitAsDefaultInstance();
  s_ans_game_test_packet::default_instance_->InitAsDefaultInstance();
  s_ans_join_room::default_instance_->InitAsDefaultInstance();
  s_ans_deal_card::default_instance_->InitAsDefaultInstance();
  s_ans_deal_cards::default_instance_->InitAsDefaultInstance();
  s_ans_send_ante::default_instance_->InitAsDefaultInstance();
  s_ans_select_card::default_instance_->InitAsDefaultInstance();
  s_ans_opencard::default_instance_->InitAsDefaultInstance();
  s_ans_boss::default_instance_->InitAsDefaultInstance();
  s_ans_deal_hiddencard::default_instance_->InitAsDefaultInstance();
  s_ans_betting::default_instance_->InitAsDefaultInstance();
  s_ans_pong::default_instance_->InitAsDefaultInstance();
  s_ans_entry::default_instance_->InitAsDefaultInstance();
  s_betting_msg::default_instance_->InitAsDefaultInstance();
  s_finished::default_instance_->InitAsDefaultInstance();
  s_jackpotmoneyntf::default_instance_->InitAsDefaultInstance();
  s_ans_continue::default_instance_->InitAsDefaultInstance();
  s_ans_ruleset::default_instance_->InitAsDefaultInstance();
  s_ans_start::default_instance_->InitAsDefaultInstance();
  s_carddata::default_instance_->InitAsDefaultInstance();
  s_entryreject::default_instance_->InitAsDefaultInstance();
  s_nostart::default_instance_->InitAsDefaultInstance();
  s_newgame::default_instance_->InitAsDefaultInstance();
  s_ans_purge::default_instance_->InitAsDefaultInstance();
  s_purgeinfo::default_instance_->InitAsDefaultInstance();
  s_systemmsg::default_instance_->InitAsDefaultInstance();
  s_exitntf::default_instance_->InitAsDefaultInstance();
  s_refillmoneyntf::default_instance_->InitAsDefaultInstance();
  s_bonus::default_instance_->InitAsDefaultInstance();
  s_userjoinerr::default_instance_->InitAsDefaultInstance();
  s_userdisconnect::default_instance_->InitAsDefaultInstance();
  s_soundtypeans::default_instance_->InitAsDefaultInstance();
  s_userjoinans::default_instance_->InitAsDefaultInstance();
  s_startreq::default_instance_->InitAsDefaultInstance();
  s_ans_abuse::default_instance_->InitAsDefaultInstance();
  s_continue_msg::default_instance_->InitAsDefaultInstance();
  s_ans_observe::default_instance_->InitAsDefaultInstance();
  s_observercnt::default_instance_->InitAsDefaultInstance();
  GLAnsGameProtocol::default_instance_->InitAsDefaultInstance();
  PKCards::default_instance_->InitAsDefaultInstance();
  PKMoney::default_instance_->InitAsDefaultInstance();
  UserMoney::default_instance_->InitAsDefaultInstance();
  PKCWinLose::default_instance_->InitAsDefaultInstance();
  PKUserInfo::default_instance_->InitAsDefaultInstance();
  PKOneCard::default_instance_->InitAsDefaultInstance();
  PKVecMoney::default_instance_->InitAsDefaultInstance();
  PKWinLoseInfo::default_instance_->InitAsDefaultInstance();
  PKVecUSN::default_instance_->InitAsDefaultInstance();
  PKWAITINGUSERDATA::default_instance_->InitAsDefaultInstance();
  CRefill::default_instance_->InitAsDefaultInstance();
  PKItemList::default_instance_->InitAsDefaultInstance();
  PKItem::default_instance_->InitAsDefaultInstance();
  PKRCUserData::default_instance_->InitAsDefaultInstance();
  PKOption::default_instance_->InitAsDefaultInstance();
  PKRCUser::default_instance_->InitAsDefaultInstance();
  PKBettingMsg::default_instance_->InitAsDefaultInstance();
  PKBettingMsgTable::default_instance_->InitAsDefaultInstance();
  PKMoneyTable::default_instance_->InitAsDefaultInstance();
  PKCardTable::default_instance_->InitAsDefaultInstance();
  PKUITable::default_instance_->InitAsDefaultInstance();
  PKRCRoomData::default_instance_->InitAsDefaultInstance();
  PKSPUserBaseInfo::default_instance_->InitAsDefaultInstance();
  PKMsgCS_Entry::default_instance_->InitAsDefaultInstance();
  PKMsgCS_Observe::default_instance_->InitAsDefaultInstance();
  PKMsgCS_Start::default_instance_->InitAsDefaultInstance();
  PKMsgCS_SelectedCardReq::default_instance_->InitAsDefaultInstance();
  PKMsgCS_BettingReq::default_instance_->InitAsDefaultInstance();
  PKMsgCS_ChoiceRemoveCard::default_instance_->InitAsDefaultInstance();
  PKMsgCS_Purge::default_instance_->InitAsDefaultInstance();
  PKMsgCS_Abuse::default_instance_->InitAsDefaultInstance();
  PKMsgCS_AskPurgeVote::default_instance_->InitAsDefaultInstance();
  PKMsgCS_AnswerPurgeVote::default_instance_->InitAsDefaultInstance();
  PKMsgCS_WaitingUserTicketReq::default_instance_->InitAsDefaultInstance();
  PKMsgCS_UpdateWaitingUserInfoReq::default_instance_->InitAsDefaultInstance();
  PKMsgCS_SoundType::default_instance_->InitAsDefaultInstance();
  PKMsgCS_ExitQue::default_instance_->InitAsDefaultInstance();
  PKMsgCS_Continue::default_instance_->InitAsDefaultInstance();
  PKMsgCS_RuleSet::default_instance_->InitAsDefaultInstance();
  PKMsgCS_GameMasterCall::default_instance_->InitAsDefaultInstance();
  PKMsgCS_FieldReserved::default_instance_->InitAsDefaultInstance();
  PKMsgCS_JokboSet::default_instance_->InitAsDefaultInstance();
  PKMsgCS_TestKeySetting::default_instance_->InitAsDefaultInstance();
  PKMsgCS_CheckNotice::default_instance_->InitAsDefaultInstance();
  PKMsgCS_Ack::default_instance_->InitAsDefaultInstance();
  PKMsgCS_Ping::default_instance_->InitAsDefaultInstance();
  PKMsgSC_UserJoinAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_UserJoinErr::default_instance_->InitAsDefaultInstance();
  PKMsgSC_UserDisconnect::default_instance_->InitAsDefaultInstance();
  PKMsgSC_CardData::default_instance_->InitAsDefaultInstance();
  PKMsgSC_EntryAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_EntryReject::default_instance_->InitAsDefaultInstance();
  PKMsgSC_ObserveAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_StartReq::default_instance_->InitAsDefaultInstance();
  PKMsgSC_StartAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_NoStart::default_instance_->InitAsDefaultInstance();
  PKMsgSC_DealCards::default_instance_->InitAsDefaultInstance();
  PKMsgSC_SelectedCardAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_DealOpenCard::default_instance_->InitAsDefaultInstance();
  PKMsgSC_DealCard::default_instance_->InitAsDefaultInstance();
  PKMsgSC_Boss::default_instance_->InitAsDefaultInstance();
  PKMsgSC_Betting::default_instance_->InitAsDefaultInstance();
  PKMsgSC_BettingAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_BettingAnsMsg::default_instance_->InitAsDefaultInstance();
  PKMsgSC_DealHiddenCard::default_instance_->InitAsDefaultInstance();
  PKMsgSC_AnteMoney::default_instance_->InitAsDefaultInstance();
  PKMsgSC_RuleQuaterHalf::default_instance_->InitAsDefaultInstance();
  PKMsgSC_Finished::default_instance_->InitAsDefaultInstance();
  PKMsgSC_NewGame::default_instance_->InitAsDefaultInstance();
  PKMsgSC_ContinueAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_Continue::default_instance_->InitAsDefaultInstance();
  PKMsgSC_SystemMsg::default_instance_->InitAsDefaultInstance();
  PKMsgSC_PurgeAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_PurgeInfo::default_instance_->InitAsDefaultInstance();
  PKMsgSC_SetPurgeMoney::default_instance_->InitAsDefaultInstance();
  PKMsgSC_AssaItemNotify::default_instance_->InitAsDefaultInstance();
  PKMsgSC_ThankYouItemNotify::default_instance_->InitAsDefaultInstance();
  PKMsgSC_MadeItemNotify::default_instance_->InitAsDefaultInstance();
  PKMsgSC_ExtMoneyNotify::default_instance_->InitAsDefaultInstance();
  PKMsgSC_GameEndSystemMsg::default_instance_->InitAsDefaultInstance();
  PKMsgSC_ChangeAvatarNotify::default_instance_->InitAsDefaultInstance();
  PKMsgSC_AbuseAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_SoundTypeAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_FMoney::default_instance_->InitAsDefaultInstance();
  PKMsgSC_ItemNotify::default_instance_->InitAsDefaultInstance();
  PKMsgSC_DisconnectMoneyNotify::default_instance_->InitAsDefaultInstance();
  PKMsgSC_ExitNtf::default_instance_->InitAsDefaultInstance();
  PKMsgSC_RematchOKAns::default_instance_->InitAsDefaultInstance();
  PKMsgSC_RuleNotify::default_instance_->InitAsDefaultInstance();
  PKMsgSC_AllowEntryWaitingUser::default_instance_->InitAsDefaultInstance();
  PKMsgSC_AllWaitingUserDataNtf::default_instance_->InitAsDefaultInstance();
  PKMsgSC_UserDataChangeNtf::default_instance_->InitAsDefaultInstance();
  PKMsgSC_RefillMoneyNtf::default_instance_->InitAsDefaultInstance();
  PKMsgSC_JackpotMoneyNtf::default_instance_->InitAsDefaultInstance();
  PKMsgSC_GuardianAngelMoney::default_instance_->InitAsDefaultInstance();
  PKMsgSC_GameMasterCallNtf::default_instance_->InitAsDefaultInstance();
  PKMsgSC_ObserverCnt::default_instance_->InitAsDefaultInstance();
  PKMsgSC_Bonus::default_instance_->InitAsDefaultInstance();
  PKMsgSC_PoliceNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameLogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameLogic_2eproto {
  StaticDescriptorInitializer_gameLogic_2eproto() {
    protobuf_AddDesc_gameLogic_2eproto();
  }
} static_descriptor_initializer_gameLogic_2eproto_;

bool ITEM_IsValid(int value) {
  switch(value) {
    case 1030:
    case 1049:
    case 1063:
    case 1064:
    case 1075:
    case 1080:
    case 1081:
    case 1901:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
      return true;
    default:
      return false;
  }
}

bool BETTING_RULE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ADD_RULE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool FIRST_RULE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool SECOND_RULE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool GAMETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool USER_STATE_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool GAMESTATE_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool SYSMSG_TYPE_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 12:
    case 100:
    case 101:
    case 102:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 1000:
      return true;
    default:
      return false;
  }
}

bool BET_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

bool BET_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

bool BET_TURN_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
    case 12:
    case 13:
    case 21:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

bool _EXIT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool MSG_ERRORCODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

bool ENTRY_ERRORCODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

bool RankPrecedence_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

bool Timer_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameUserInfo::kGameInfoFieldNumber;
const int GameUserInfo::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

GameUserInfo::GameUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameUserInfo::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::GameInfo*>(&::GameInfo::default_instance());
  memberinfo_ = const_cast< ::MemberInfo*>(&::MemberInfo::default_instance());
}

GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameUserInfo::SharedCtor() {
  _cached_size_ = 0;
  gameinfo_ = NULL;
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUserInfo::~GameUserInfo() {
  SharedDtor();
}

void GameUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
    delete memberinfo_;
  }
}

void GameUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameUserInfo& GameUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameUserInfo* GameUserInfo::default_instance_ = NULL;

GameUserInfo* GameUserInfo::New() const {
  return new GameUserInfo;
}

void GameUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::GameInfo::Clear();
    }
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::MemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameInfo gameInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberInfo;
        break;
      }
      
      // required .MemberInfo memberInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameInfo gameInfo = 1;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->gameinfo(), output);
  }
  
  // required .MemberInfo memberInfo = 2;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->memberinfo(), output);
  }
  
}

int GameUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameInfo gameInfo = 1;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }
    
    // required .MemberInfo memberInfo = 2;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameUserInfo*>(&from));
}

void GameUserInfo::MergeFrom(const GameUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::GameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::MemberInfo::MergeFrom(from.memberinfo());
    }
  }
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  if (has_memberinfo()) {
    if (!this->memberinfo().IsInitialized()) return false;
  }
  return true;
}

void GameUserInfo::Swap(GameUserInfo* other) {
  if (other != this) {
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameUserInfo::GetTypeName() const {
  return "GameUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomInfo::kRoomIDFieldNumber;
const int GameRoomInfo::kPointMoneyFieldNumber;
const int GameRoomInfo::kGameUserInfoFieldNumber;
const int GameRoomInfo::kEnablestartFieldNumber;
#endif  // !_MSC_VER

GameRoomInfo::GameRoomInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameRoomInfo::InitAsDefaultInstance() {
}

GameRoomInfo::GameRoomInfo(const GameRoomInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  pointmoney_ = 0;
  enablestart_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomInfo::~GameRoomInfo() {
  SharedDtor();
}

void GameRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameRoomInfo& GameRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameRoomInfo* GameRoomInfo::default_instance_ = NULL;

GameRoomInfo* GameRoomInfo::New() const {
  return new GameRoomInfo;
}

void GameRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    pointmoney_ = 0;
    enablestart_ = false;
  }
  gameuserinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointMoney;
        break;
      }
      
      // required int32 pointMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointmoney_)));
          set_has_pointmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameUserInfo;
        break;
      }
      
      // repeated .GameUserInfo gameUserInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameUserInfo;
        if (input->ExpectTag(32)) goto parse_enablestart;
        break;
      }
      
      // optional bool enablestart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enablestart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablestart_)));
          set_has_enablestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }
  
  // required int32 pointMoney = 2;
  if (has_pointmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pointmoney(), output);
  }
  
  // repeated .GameUserInfo gameUserInfo = 3;
  for (int i = 0; i < this->gameuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gameuserinfo(i), output);
  }
  
  // optional bool enablestart = 4;
  if (has_enablestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enablestart(), output);
  }
  
}

int GameRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // required int32 pointMoney = 2;
    if (has_pointmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointmoney());
    }
    
    // optional bool enablestart = 4;
    if (has_enablestart()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .GameUserInfo gameUserInfo = 3;
  total_size += 1 * this->gameuserinfo_size();
  for (int i = 0; i < this->gameuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameuserinfo(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameRoomInfo*>(&from));
}

void GameRoomInfo::MergeFrom(const GameRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameuserinfo_.MergeFrom(from.gameuserinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pointmoney()) {
      set_pointmoney(from.pointmoney());
    }
    if (from.has_enablestart()) {
      set_enablestart(from.enablestart());
    }
  }
}

void GameRoomInfo::CopyFrom(const GameRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < gameuserinfo_size(); i++) {
    if (!this->gameuserinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GameRoomInfo::Swap(GameRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(pointmoney_, other->pointmoney_);
    gameuserinfo_.Swap(&other->gameuserinfo_);
    std::swap(enablestart_, other->enablestart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameRoomInfo::GetTypeName() const {
  return "GameRoomInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kGameIDFieldNumber;
const int GameInfo::kGameIndexFieldNumber;
const int GameInfo::kLevelFieldNumber;
const int GameInfo::kMoneyFieldNumber;
const int GameInfo::kWinCntFieldNumber;
const int GameInfo::kLoseCntFieldNumber;
const int GameInfo::kAllInCntFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameindex_ = 0;
  level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wincnt_ = 0;
  losecnt_ = 0;
  allincnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (level_ != &::google::protobuf::internal::kEmptyString) {
    delete level_;
  }
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gameindex_ = 0;
    if (has_level()) {
      if (level_ != &::google::protobuf::internal::kEmptyString) {
        level_->clear();
      }
    }
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    wincnt_ = 0;
    losecnt_ = 0;
    allincnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameIndex;
        break;
      }
      
      // required int32 gameIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameindex_)));
          set_has_gameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_level;
        break;
      }
      
      // required string level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_money;
        break;
      }
      
      // required string money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winCnt;
        break;
      }
      
      // required int32 winCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincnt_)));
          set_has_wincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loseCnt;
        break;
      }
      
      // required int32 loseCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losecnt_)));
          set_has_losecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_allInCnt;
        break;
      }
      
      // required int32 allInCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allInCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allincnt_)));
          set_has_allincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required int32 gameIndex = 2;
  if (has_gameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameindex(), output);
  }
  
  // required string level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->level(), output);
  }
  
  // required string money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->money(), output);
  }
  
  // required int32 winCnt = 5;
  if (has_wincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wincnt(), output);
  }
  
  // required int32 loseCnt = 6;
  if (has_losecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->losecnt(), output);
  }
  
  // required int32 allInCnt = 7;
  if (has_allincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->allincnt(), output);
  }
  
}

int GameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 gameIndex = 2;
    if (has_gameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameindex());
    }
    
    // required string level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level());
    }
    
    // required string money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
    // required int32 winCnt = 5;
    if (has_wincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincnt());
    }
    
    // required int32 loseCnt = 6;
    if (has_losecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losecnt());
    }
    
    // required int32 allInCnt = 7;
    if (has_allincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allincnt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameInfo*>(&from));
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameindex()) {
      set_gameindex(from.gameindex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_wincnt()) {
      set_wincnt(from.wincnt());
    }
    if (from.has_losecnt()) {
      set_losecnt(from.losecnt());
    }
    if (from.has_allincnt()) {
      set_allincnt(from.allincnt());
    }
  }
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameindex_, other->gameindex_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(wincnt_, other->wincnt_);
    std::swap(losecnt_, other->losecnt_);
    std::swap(allincnt_, other->allincnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameInfo::GetTypeName() const {
  return "GameInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MemberInfo::kGameIDFieldNumber;
const int MemberInfo::kAvatarUrlFieldNumber;
const int MemberInfo::kNickNameFieldNumber;
#endif  // !_MSC_VER

MemberInfo::MemberInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MemberInfo::InitAsDefaultInstance() {
}

MemberInfo::MemberInfo(const MemberInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  avatarurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberInfo::~MemberInfo() {
  SharedDtor();
}

void MemberInfo::SharedDtor() {
  if (avatarurl_ != &::google::protobuf::internal::kEmptyString) {
    delete avatarurl_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemberInfo& MemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

MemberInfo* MemberInfo::default_instance_ = NULL;

MemberInfo* MemberInfo::New() const {
  return new MemberInfo;
}

void MemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_avatarurl()) {
      if (avatarurl_ != &::google::protobuf::internal::kEmptyString) {
        avatarurl_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatarUrl;
        break;
      }
      
      // required string avatarUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatarurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }
      
      // required string nickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // required string avatarUrl = 2;
  if (has_avatarurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->avatarurl(), output);
  }
  
  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }
  
}

int MemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string avatarUrl = 2;
    if (has_avatarurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatarurl());
    }
    
    // required string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemberInfo*>(&from));
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_avatarurl()) {
      set_avatarurl(from.avatarurl());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MemberInfo::Swap(MemberInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(avatarurl_, other->avatarurl_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MemberInfo::GetTypeName() const {
  return "MemberInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_game_test_packet::kTestIntFieldNumber;
const int s_req_game_test_packet::kTestStringFieldNumber;
#endif  // !_MSC_VER

s_req_game_test_packet::s_req_game_test_packet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_game_test_packet::InitAsDefaultInstance() {
}

s_req_game_test_packet::s_req_game_test_packet(const s_req_game_test_packet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_game_test_packet::SharedCtor() {
  _cached_size_ = 0;
  test_int_ = 0;
  test_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_game_test_packet::~s_req_game_test_packet() {
  SharedDtor();
}

void s_req_game_test_packet::SharedDtor() {
  if (test_string_ != &::google::protobuf::internal::kEmptyString) {
    delete test_string_;
  }
  if (this != default_instance_) {
  }
}

void s_req_game_test_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_game_test_packet& s_req_game_test_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_game_test_packet* s_req_game_test_packet::default_instance_ = NULL;

s_req_game_test_packet* s_req_game_test_packet::New() const {
  return new s_req_game_test_packet;
}

void s_req_game_test_packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_int_ = 0;
    if (has_test_string()) {
      if (test_string_ != &::google::protobuf::internal::kEmptyString) {
        test_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_game_test_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 test_int = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_int_)));
          set_has_test_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_test_string;
        break;
      }
      
      // required string test_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_game_test_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 test_int = 2;
  if (has_test_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->test_int(), output);
  }
  
  // required string test_string = 3;
  if (has_test_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->test_string(), output);
  }
  
}

int s_req_game_test_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 test_int = 2;
    if (has_test_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_int());
    }
    
    // required string test_string = 3;
    if (has_test_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_string());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_game_test_packet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_game_test_packet*>(&from));
}

void s_req_game_test_packet::MergeFrom(const s_req_game_test_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_int()) {
      set_test_int(from.test_int());
    }
    if (from.has_test_string()) {
      set_test_string(from.test_string());
    }
  }
}

void s_req_game_test_packet::CopyFrom(const s_req_game_test_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_game_test_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_game_test_packet::Swap(s_req_game_test_packet* other) {
  if (other != this) {
    std::swap(test_int_, other->test_int_);
    std::swap(test_string_, other->test_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_game_test_packet::GetTypeName() const {
  return "s_req_game_test_packet";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_send_cmd::kCmdTypeFieldNumber;
const int s_req_send_cmd::kCmdFieldNumber;
#endif  // !_MSC_VER

s_req_send_cmd::s_req_send_cmd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_send_cmd::InitAsDefaultInstance() {
}

s_req_send_cmd::s_req_send_cmd(const s_req_send_cmd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_send_cmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_send_cmd::~s_req_send_cmd() {
  SharedDtor();
}

void s_req_send_cmd::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void s_req_send_cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_send_cmd& s_req_send_cmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_send_cmd* s_req_send_cmd::default_instance_ = NULL;

s_req_send_cmd* s_req_send_cmd::New() const {
  return new s_req_send_cmd;
}

void s_req_send_cmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_type_ = 0;
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_send_cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }
      
      // required string cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_send_cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd_type(), output);
  }
  
  // required string cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cmd(), output);
  }
  
}

int s_req_send_cmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_type());
    }
    
    // required string cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_send_cmd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_send_cmd*>(&from));
}

void s_req_send_cmd::MergeFrom(const s_req_send_cmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
}

void s_req_send_cmd::CopyFrom(const s_req_send_cmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_send_cmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_send_cmd::Swap(s_req_send_cmd* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_send_cmd::GetTypeName() const {
  return "s_req_send_cmd";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_join_room::kGameinfoFieldNumber;
#endif  // !_MSC_VER

s_req_join_room::s_req_join_room()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_join_room::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::GameInfo*>(&::GameInfo::default_instance());
}

s_req_join_room::s_req_join_room(const s_req_join_room& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_join_room::SharedCtor() {
  _cached_size_ = 0;
  gameinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_join_room::~s_req_join_room() {
  SharedDtor();
}

void s_req_join_room::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
  }
}

void s_req_join_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_join_room& s_req_join_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_join_room* s_req_join_room::default_instance_ = NULL;

s_req_join_room* s_req_join_room::New() const {
  return new s_req_join_room;
}

void s_req_join_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::GameInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_join_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameInfo gameinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_join_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameInfo gameinfo = 1;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->gameinfo(), output);
  }
  
}

int s_req_join_room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameInfo gameinfo = 1;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_join_room::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_join_room*>(&from));
}

void s_req_join_room::MergeFrom(const s_req_join_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::GameInfo::MergeFrom(from.gameinfo());
    }
  }
}

void s_req_join_room::CopyFrom(const s_req_join_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_join_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  return true;
}

void s_req_join_room::Swap(s_req_join_room* other) {
  if (other != this) {
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_join_room::GetTypeName() const {
  return "s_req_join_room";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_send_start::kGameidFieldNumber;
#endif  // !_MSC_VER

s_req_send_start::s_req_send_start()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_send_start::InitAsDefaultInstance() {
}

s_req_send_start::s_req_send_start(const s_req_send_start& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_send_start::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_send_start::~s_req_send_start() {
  SharedDtor();
}

void s_req_send_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_send_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_send_start& s_req_send_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_send_start* s_req_send_start::default_instance_ = NULL;

s_req_send_start* s_req_send_start::New() const {
  return new s_req_send_start;
}

void s_req_send_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_send_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_send_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
}

int s_req_send_start::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_send_start::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_send_start*>(&from));
}

void s_req_send_start::MergeFrom(const s_req_send_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
}

void s_req_send_start::CopyFrom(const s_req_send_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_send_start::IsInitialized() const {
  
  return true;
}

void s_req_send_start::Swap(s_req_send_start* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_send_start::GetTypeName() const {
  return "s_req_send_start";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_send_select_card::kMLCardIdxFieldNumber;
#endif  // !_MSC_VER

s_req_send_select_card::s_req_send_select_card()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_send_select_card::InitAsDefaultInstance() {
}

s_req_send_select_card::s_req_send_select_card(const s_req_send_select_card& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_send_select_card::SharedCtor() {
  _cached_size_ = 0;
  m_lcardidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_send_select_card::~s_req_send_select_card() {
  SharedDtor();
}

void s_req_send_select_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_send_select_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_send_select_card& s_req_send_select_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_send_select_card* s_req_send_select_card::default_instance_ = NULL;

s_req_send_select_card* s_req_send_select_card::New() const {
  return new s_req_send_select_card;
}

void s_req_send_select_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lcardidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_send_select_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lCardIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardidx_)));
          set_has_m_lcardidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_send_select_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lCardIdx = 1;
  if (has_m_lcardidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lcardidx(), output);
  }
  
}

int s_req_send_select_card::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lCardIdx = 1;
    if (has_m_lcardidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardidx());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_send_select_card::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_send_select_card*>(&from));
}

void s_req_send_select_card::MergeFrom(const s_req_send_select_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lcardidx()) {
      set_m_lcardidx(from.m_lcardidx());
    }
  }
}

void s_req_send_select_card::CopyFrom(const s_req_send_select_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_send_select_card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_req_send_select_card::Swap(s_req_send_select_card* other) {
  if (other != this) {
    std::swap(m_lcardidx_, other->m_lcardidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_send_select_card::GetTypeName() const {
  return "s_req_send_select_card";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_betting::kGameidFieldNumber;
const int s_req_betting::kMLBetTypeFieldNumber;
#endif  // !_MSC_VER

s_req_betting::s_req_betting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_betting::InitAsDefaultInstance() {
}

s_req_betting::s_req_betting(const s_req_betting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_betting::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  m_lbettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_betting::~s_req_betting() {
  SharedDtor();
}

void s_req_betting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_betting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_betting& s_req_betting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_betting* s_req_betting::default_instance_ = NULL;

s_req_betting* s_req_betting::New() const {
  return new s_req_betting;
}

void s_req_betting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    m_lbettype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_betting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lBetType;
        break;
      }
      
      // required sint32 m_lBetType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_betting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->gameid(), output);
  }
  
  // required sint32 m_lBetType = 2;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lbettype(), output);
  }
  
}

int s_req_betting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->gameid());
    }
    
    // required sint32 m_lBetType = 2;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_betting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_betting*>(&from));
}

void s_req_betting::MergeFrom(const s_req_betting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
  }
}

void s_req_betting::CopyFrom(const s_req_betting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_betting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_betting::Swap(s_req_betting* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_betting::GetTypeName() const {
  return "s_req_betting";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_ping::kUsnFieldNumber;
#endif  // !_MSC_VER

s_req_ping::s_req_ping()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_ping::InitAsDefaultInstance() {
}

s_req_ping::s_req_ping(const s_req_ping& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_ping::SharedCtor() {
  _cached_size_ = 0;
  usn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_ping::~s_req_ping() {
  SharedDtor();
}

void s_req_ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_ping& s_req_ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_ping* s_req_ping::default_instance_ = NULL;

s_req_ping* s_req_ping::New() const {
  return new s_req_ping;
}

void s_req_ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usn_)));
          set_has_usn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usn = 1;
  if (has_usn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usn(), output);
  }
  
}

int s_req_ping::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usn = 1;
    if (has_usn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_ping::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_ping*>(&from));
}

void s_req_ping::MergeFrom(const s_req_ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usn()) {
      set_usn(from.usn());
    }
  }
}

void s_req_ping::CopyFrom(const s_req_ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_ping::IsInitialized() const {
  
  return true;
}

void s_req_ping::Swap(s_req_ping* other) {
  if (other != this) {
    std::swap(usn_, other->usn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_ping::GetTypeName() const {
  return "s_req_ping";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_entry::kMNVersionFieldNumber;
const int s_req_entry::kMBWelcomeSoundFieldNumber;
const int s_req_entry::kMLSoundTypeFieldNumber;
const int s_req_entry::kMSNickNameFieldNumber;
const int s_req_entry::kMSAvtFieldNumber;
const int s_req_entry::kMLCLevelFieldNumber;
const int s_req_entry::kMLSexFieldNumber;
const int s_req_entry::kGameidFieldNumber;
#endif  // !_MSC_VER

s_req_entry::s_req_entry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_entry::InitAsDefaultInstance() {
}

s_req_entry::s_req_entry(const s_req_entry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_entry::SharedCtor() {
  _cached_size_ = 0;
  m_nversion_ = 0;
  m_bwelcomesound_ = 0;
  m_lsoundtype_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsex_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_entry::~s_req_entry() {
  SharedDtor();
}

void s_req_entry::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
  }
}

void s_req_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_entry& s_req_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_entry* s_req_entry::default_instance_ = NULL;

s_req_entry* s_req_entry::New() const {
  return new s_req_entry;
}

void s_req_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nversion_ = 0;
    m_bwelcomesound_ = 0;
    m_lsoundtype_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsex_ = 0;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nversion_)));
          set_has_m_nversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bWelcomeSound;
        break;
      }
      
      // optional sint32 m_bWelcomeSound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bWelcomeSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bwelcomesound_)));
          set_has_m_bwelcomesound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_sAvt;
        break;
      }
      
      // optional string m_sAvt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lCLevel;
        break;
      }
      
      // required sint32 m_lCLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lSex;
        break;
      }
      
      // required sint32 m_lSex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsex_)));
          set_has_m_lsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gameid;
        break;
      }
      
      // required int32 gameid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nVersion = 1;
  if (has_m_nversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nversion(), output);
  }
  
  // optional sint32 m_bWelcomeSound = 2;
  if (has_m_bwelcomesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bwelcomesound(), output);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lsoundtype(), output);
  }
  
  // required string m_sNickName = 4;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_snickname(), output);
  }
  
  // optional string m_sAvt = 5;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_savt(), output);
  }
  
  // required sint32 m_lCLevel = 6;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lclevel(), output);
  }
  
  // required sint32 m_lSex = 7;
  if (has_m_lsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lsex(), output);
  }
  
  // required int32 gameid = 8;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gameid(), output);
  }
  
}

int s_req_entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nVersion = 1;
    if (has_m_nversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nversion());
    }
    
    // optional sint32 m_bWelcomeSound = 2;
    if (has_m_bwelcomesound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bwelcomesound());
    }
    
    // required sint32 m_lSoundType = 3;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
    // required string m_sNickName = 4;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // optional string m_sAvt = 5;
    if (has_m_savt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required sint32 m_lCLevel = 6;
    if (has_m_lclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lclevel());
    }
    
    // required sint32 m_lSex = 7;
    if (has_m_lsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsex());
    }
    
    // required int32 gameid = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_entry*>(&from));
}

void s_req_entry::MergeFrom(const s_req_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nversion()) {
      set_m_nversion(from.m_nversion());
    }
    if (from.has_m_bwelcomesound()) {
      set_m_bwelcomesound(from.m_bwelcomesound());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsex()) {
      set_m_lsex(from.m_lsex());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
}

void s_req_entry::CopyFrom(const s_req_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ed) != 0x000000ed) return false;
  
  return true;
}

void s_req_entry::Swap(s_req_entry* other) {
  if (other != this) {
    std::swap(m_nversion_, other->m_nversion_);
    std::swap(m_bwelcomesound_, other->m_bwelcomesound_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsex_, other->m_lsex_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_entry::GetTypeName() const {
  return "s_req_entry";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_continue::kMLExitFieldNumber;
#endif  // !_MSC_VER

s_req_continue::s_req_continue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_continue::InitAsDefaultInstance() {
}

s_req_continue::s_req_continue(const s_req_continue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_continue::SharedCtor() {
  _cached_size_ = 0;
  m_lexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_continue::~s_req_continue() {
  SharedDtor();
}

void s_req_continue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_continue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_continue& s_req_continue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_continue* s_req_continue::default_instance_ = NULL;

s_req_continue* s_req_continue::New() const {
  return new s_req_continue;
}

void s_req_continue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lexit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lExit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lexit(), output);
  }
  
}

int s_req_continue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lExit = 1;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_continue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_continue*>(&from));
}

void s_req_continue::MergeFrom(const s_req_continue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
  }
}

void s_req_continue::CopyFrom(const s_req_continue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_continue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_req_continue::Swap(s_req_continue* other) {
  if (other != this) {
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_continue::GetTypeName() const {
  return "s_req_continue";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_ruleset::kMNRuleIdxFieldNumber;
#endif  // !_MSC_VER

s_req_ruleset::s_req_ruleset()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_ruleset::InitAsDefaultInstance() {
}

s_req_ruleset::s_req_ruleset(const s_req_ruleset& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_ruleset::SharedCtor() {
  _cached_size_ = 0;
  m_nruleidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_ruleset::~s_req_ruleset() {
  SharedDtor();
}

void s_req_ruleset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_ruleset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_ruleset& s_req_ruleset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_ruleset* s_req_ruleset::default_instance_ = NULL;

s_req_ruleset* s_req_ruleset::New() const {
  return new s_req_ruleset;
}

void s_req_ruleset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nruleidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_ruleset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRuleIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nruleidx_)));
          set_has_m_nruleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_ruleset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nruleidx(), output);
  }
  
}

int s_req_ruleset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRuleIdx = 1;
    if (has_m_nruleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nruleidx());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_ruleset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_ruleset*>(&from));
}

void s_req_ruleset::MergeFrom(const s_req_ruleset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nruleidx()) {
      set_m_nruleidx(from.m_nruleidx());
    }
  }
}

void s_req_ruleset::CopyFrom(const s_req_ruleset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_ruleset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_req_ruleset::Swap(s_req_ruleset* other) {
  if (other != this) {
    std::swap(m_nruleidx_, other->m_nruleidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_ruleset::GetTypeName() const {
  return "s_req_ruleset";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_jokboset::kMLKey1FieldNumber;
const int s_req_jokboset::kMLKey2FieldNumber;
const int s_req_jokboset::kMLKey3FieldNumber;
const int s_req_jokboset::kMLKey4FieldNumber;
const int s_req_jokboset::kMLKey5FieldNumber;
#endif  // !_MSC_VER

s_req_jokboset::s_req_jokboset()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_jokboset::InitAsDefaultInstance() {
}

s_req_jokboset::s_req_jokboset(const s_req_jokboset& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_jokboset::SharedCtor() {
  _cached_size_ = 0;
  m_lkey1_ = 0;
  m_lkey2_ = 0;
  m_lkey3_ = 0;
  m_lkey4_ = 0;
  m_lkey5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_jokboset::~s_req_jokboset() {
  SharedDtor();
}

void s_req_jokboset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_jokboset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_jokboset& s_req_jokboset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_jokboset* s_req_jokboset::default_instance_ = NULL;

s_req_jokboset* s_req_jokboset::New() const {
  return new s_req_jokboset;
}

void s_req_jokboset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lkey1_ = 0;
    m_lkey2_ = 0;
    m_lkey3_ = 0;
    m_lkey4_ = 0;
    m_lkey5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_jokboset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lKey1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey1_)));
          set_has_m_lkey1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lKey2;
        break;
      }
      
      // required sint32 m_lKey2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey2_)));
          set_has_m_lkey2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lKey3;
        break;
      }
      
      // required sint32 m_lKey3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey3_)));
          set_has_m_lkey3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lKey4;
        break;
      }
      
      // required sint32 m_lKey4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey4_)));
          set_has_m_lkey4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lKey5;
        break;
      }
      
      // required sint32 m_lKey5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey5_)));
          set_has_m_lkey5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_jokboset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lKey1 = 1;
  if (has_m_lkey1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lkey1(), output);
  }
  
  // required sint32 m_lKey2 = 2;
  if (has_m_lkey2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lkey2(), output);
  }
  
  // required sint32 m_lKey3 = 3;
  if (has_m_lkey3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lkey3(), output);
  }
  
  // required sint32 m_lKey4 = 4;
  if (has_m_lkey4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lkey4(), output);
  }
  
  // required sint32 m_lKey5 = 5;
  if (has_m_lkey5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lkey5(), output);
  }
  
}

int s_req_jokboset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lKey1 = 1;
    if (has_m_lkey1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey1());
    }
    
    // required sint32 m_lKey2 = 2;
    if (has_m_lkey2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey2());
    }
    
    // required sint32 m_lKey3 = 3;
    if (has_m_lkey3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey3());
    }
    
    // required sint32 m_lKey4 = 4;
    if (has_m_lkey4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey4());
    }
    
    // required sint32 m_lKey5 = 5;
    if (has_m_lkey5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey5());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_jokboset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_jokboset*>(&from));
}

void s_req_jokboset::MergeFrom(const s_req_jokboset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lkey1()) {
      set_m_lkey1(from.m_lkey1());
    }
    if (from.has_m_lkey2()) {
      set_m_lkey2(from.m_lkey2());
    }
    if (from.has_m_lkey3()) {
      set_m_lkey3(from.m_lkey3());
    }
    if (from.has_m_lkey4()) {
      set_m_lkey4(from.m_lkey4());
    }
    if (from.has_m_lkey5()) {
      set_m_lkey5(from.m_lkey5());
    }
  }
}

void s_req_jokboset::CopyFrom(const s_req_jokboset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_jokboset::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void s_req_jokboset::Swap(s_req_jokboset* other) {
  if (other != this) {
    std::swap(m_lkey1_, other->m_lkey1_);
    std::swap(m_lkey2_, other->m_lkey2_);
    std::swap(m_lkey3_, other->m_lkey3_);
    std::swap(m_lkey4_, other->m_lkey4_);
    std::swap(m_lkey5_, other->m_lkey5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_jokboset::GetTypeName() const {
  return "s_req_jokboset";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_ack::kMNTagIDFieldNumber;
#endif  // !_MSC_VER

s_req_ack::s_req_ack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_ack::InitAsDefaultInstance() {
}

s_req_ack::s_req_ack(const s_req_ack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_ack::SharedCtor() {
  _cached_size_ = 0;
  m_ntagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_ack::~s_req_ack() {
  SharedDtor();
}

void s_req_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_ack& s_req_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_ack* s_req_ack::default_instance_ = NULL;

s_req_ack* s_req_ack::New() const {
  return new s_req_ack;
}

void s_req_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntagid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nTagID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntagid_)));
          set_has_m_ntagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nTagID = 1;
  if (has_m_ntagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntagid(), output);
  }
  
}

int s_req_ack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nTagID = 1;
    if (has_m_ntagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntagid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_ack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_ack*>(&from));
}

void s_req_ack::MergeFrom(const s_req_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntagid()) {
      set_m_ntagid(from.m_ntagid());
    }
  }
}

void s_req_ack::CopyFrom(const s_req_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_req_ack::Swap(s_req_ack* other) {
  if (other != this) {
    std::swap(m_ntagid_, other->m_ntagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_ack::GetTypeName() const {
  return "s_req_ack";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_choiceremovecard::kMLUSNFieldNumber;
const int s_req_choiceremovecard::kMNRemoveCardIndexFieldNumber;
#endif  // !_MSC_VER

s_req_choiceremovecard::s_req_choiceremovecard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_choiceremovecard::InitAsDefaultInstance() {
}

s_req_choiceremovecard::s_req_choiceremovecard(const s_req_choiceremovecard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_choiceremovecard::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nremovecardindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_choiceremovecard::~s_req_choiceremovecard() {
  SharedDtor();
}

void s_req_choiceremovecard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_choiceremovecard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_choiceremovecard& s_req_choiceremovecard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_choiceremovecard* s_req_choiceremovecard::default_instance_ = NULL;

s_req_choiceremovecard* s_req_choiceremovecard::New() const {
  return new s_req_choiceremovecard;
}

void s_req_choiceremovecard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nremovecardindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_choiceremovecard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nRemoveCardIndex;
        break;
      }
      
      // required int32 m_nRemoveCardIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRemoveCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nremovecardindex_)));
          set_has_m_nremovecardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_choiceremovecard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nRemoveCardIndex = 2;
  if (has_m_nremovecardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nremovecardindex(), output);
  }
  
}

int s_req_choiceremovecard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nRemoveCardIndex = 2;
    if (has_m_nremovecardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nremovecardindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_choiceremovecard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_choiceremovecard*>(&from));
}

void s_req_choiceremovecard::MergeFrom(const s_req_choiceremovecard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nremovecardindex()) {
      set_m_nremovecardindex(from.m_nremovecardindex());
    }
  }
}

void s_req_choiceremovecard::CopyFrom(const s_req_choiceremovecard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_choiceremovecard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_choiceremovecard::Swap(s_req_choiceremovecard* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nremovecardindex_, other->m_nremovecardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_choiceremovecard::GetTypeName() const {
  return "s_req_choiceremovecard";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_purge::kMLTypeFieldNumber;
const int s_req_purge::kMLPurgeUSNFieldNumber;
#endif  // !_MSC_VER

s_req_purge::s_req_purge()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_purge::InitAsDefaultInstance() {
}

s_req_purge::s_req_purge(const s_req_purge& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_purge::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_lpurgeusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_purge::~s_req_purge() {
  SharedDtor();
}

void s_req_purge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_purge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_purge& s_req_purge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_purge* s_req_purge::default_instance_ = NULL;

s_req_purge* s_req_purge::New() const {
  return new s_req_purge;
}

void s_req_purge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_lpurgeusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_purge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lPurgeUSN;
        break;
      }
      
      // required sint32 m_lPurgeUSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPurgeUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lpurgeusn_)));
          set_has_m_lpurgeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_purge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint32 m_lPurgeUSN = 2;
  if (has_m_lpurgeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lpurgeusn(), output);
  }
  
}

int s_req_purge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint32 m_lPurgeUSN = 2;
    if (has_m_lpurgeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lpurgeusn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_purge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_purge*>(&from));
}

void s_req_purge::MergeFrom(const s_req_purge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_lpurgeusn()) {
      set_m_lpurgeusn(from.m_lpurgeusn());
    }
  }
}

void s_req_purge::CopyFrom(const s_req_purge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_purge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_purge::Swap(s_req_purge* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_lpurgeusn_, other->m_lpurgeusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_purge::GetTypeName() const {
  return "s_req_purge";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_exitque::kMLExitFieldNumber;
const int s_req_exitque::kMBActionFieldNumber;
#endif  // !_MSC_VER

s_req_exitque::s_req_exitque()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_exitque::InitAsDefaultInstance() {
}

s_req_exitque::s_req_exitque(const s_req_exitque& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_exitque::SharedCtor() {
  _cached_size_ = 0;
  m_lexit_ = 0;
  m_baction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_exitque::~s_req_exitque() {
  SharedDtor();
}

void s_req_exitque::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_exitque::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_exitque& s_req_exitque::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_exitque* s_req_exitque::default_instance_ = NULL;

s_req_exitque* s_req_exitque::New() const {
  return new s_req_exitque;
}

void s_req_exitque::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lexit_ = 0;
    m_baction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_exitque::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lExit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bAction;
        break;
      }
      
      // required sint32 m_bAction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_baction_)));
          set_has_m_baction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_exitque::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lexit(), output);
  }
  
  // required sint32 m_bAction = 2;
  if (has_m_baction()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_baction(), output);
  }
  
}

int s_req_exitque::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lExit = 1;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_bAction = 2;
    if (has_m_baction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_baction());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_exitque::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_exitque*>(&from));
}

void s_req_exitque::MergeFrom(const s_req_exitque& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_baction()) {
      set_m_baction(from.m_baction());
    }
  }
}

void s_req_exitque::CopyFrom(const s_req_exitque& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_exitque::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_exitque::Swap(s_req_exitque* other) {
  if (other != this) {
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_baction_, other->m_baction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_exitque::GetTypeName() const {
  return "s_req_exitque";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_soundtype::kMLSoundTypeFieldNumber;
#endif  // !_MSC_VER

s_req_soundtype::s_req_soundtype()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_soundtype::InitAsDefaultInstance() {
}

s_req_soundtype::s_req_soundtype(const s_req_soundtype& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_soundtype::SharedCtor() {
  _cached_size_ = 0;
  m_lsoundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_soundtype::~s_req_soundtype() {
  SharedDtor();
}

void s_req_soundtype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_soundtype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_soundtype& s_req_soundtype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_soundtype* s_req_soundtype::default_instance_ = NULL;

s_req_soundtype* s_req_soundtype::New() const {
  return new s_req_soundtype;
}

void s_req_soundtype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lsoundtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_soundtype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lSoundType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_soundtype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lSoundType = 1;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lsoundtype(), output);
  }
  
}

int s_req_soundtype::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lSoundType = 1;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_soundtype::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_soundtype*>(&from));
}

void s_req_soundtype::MergeFrom(const s_req_soundtype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
  }
}

void s_req_soundtype::CopyFrom(const s_req_soundtype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_soundtype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_req_soundtype::Swap(s_req_soundtype* other) {
  if (other != this) {
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_soundtype::GetTypeName() const {
  return "s_req_soundtype";
}


// ===================================================================

#ifndef _MSC_VER
const int s_req_abuse::kMLTypeFieldNumber;
const int s_req_abuse::kMSDayFieldNumber;
#endif  // !_MSC_VER

s_req_abuse::s_req_abuse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_abuse::InitAsDefaultInstance() {
}

s_req_abuse::s_req_abuse(const s_req_abuse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_abuse::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_sday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_abuse::~s_req_abuse() {
  SharedDtor();
}

void s_req_abuse::SharedDtor() {
  if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sday_;
  }
  if (this != default_instance_) {
  }
}

void s_req_abuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_abuse& s_req_abuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_abuse* s_req_abuse::default_instance_ = NULL;

s_req_abuse* s_req_abuse::New() const {
  return new s_req_abuse;
}

void s_req_abuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    if (has_m_sday()) {
      if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
        m_sday_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_abuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sDay;
        break;
      }
      
      // required string m_sDay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_req_abuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required string m_sDay = 2;
  if (has_m_sday()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_sday(), output);
  }
  
}

int s_req_abuse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required string m_sDay = 2;
    if (has_m_sday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sday());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_abuse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_abuse*>(&from));
}

void s_req_abuse::MergeFrom(const s_req_abuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_sday()) {
      set_m_sday(from.m_sday());
    }
  }
}

void s_req_abuse::CopyFrom(const s_req_abuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_abuse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_req_abuse::Swap(s_req_abuse* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_sday_, other->m_sday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_abuse::GetTypeName() const {
  return "s_req_abuse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

s_req_observe::s_req_observe()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_req_observe::InitAsDefaultInstance() {
}

s_req_observe::s_req_observe(const s_req_observe& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_req_observe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_req_observe::~s_req_observe() {
  SharedDtor();
}

void s_req_observe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_req_observe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_req_observe& s_req_observe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_req_observe* s_req_observe::default_instance_ = NULL;

s_req_observe* s_req_observe::New() const {
  return new s_req_observe;
}

void s_req_observe::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_req_observe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void s_req_observe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int s_req_observe::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_req_observe::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_req_observe*>(&from));
}

void s_req_observe::MergeFrom(const s_req_observe& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void s_req_observe::CopyFrom(const s_req_observe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_req_observe::IsInitialized() const {
  
  return true;
}

void s_req_observe::Swap(s_req_observe* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_req_observe::GetTypeName() const {
  return "s_req_observe";
}


// ===================================================================

bool GLReqGameProtocol_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLReqGameProtocol_Type GLReqGameProtocol::NONE;
const GLReqGameProtocol_Type GLReqGameProtocol::req_game_test_packet;
const GLReqGameProtocol_Type GLReqGameProtocol::req_send_cmd;
const GLReqGameProtocol_Type GLReqGameProtocol::req_join_room;
const GLReqGameProtocol_Type GLReqGameProtocol::req_send_start;
const GLReqGameProtocol_Type GLReqGameProtocol::req_send_select_card;
const GLReqGameProtocol_Type GLReqGameProtocol::req_betting;
const GLReqGameProtocol_Type GLReqGameProtocol::req_ping;
const GLReqGameProtocol_Type GLReqGameProtocol::req_entry;
const GLReqGameProtocol_Type GLReqGameProtocol::req_continue;
const GLReqGameProtocol_Type GLReqGameProtocol::req_ruleset;
const GLReqGameProtocol_Type GLReqGameProtocol::req_jokboset;
const GLReqGameProtocol_Type GLReqGameProtocol::req_ack;
const GLReqGameProtocol_Type GLReqGameProtocol::req_choiceremovecard;
const GLReqGameProtocol_Type GLReqGameProtocol::req_purge;
const GLReqGameProtocol_Type GLReqGameProtocol::req_exitque;
const GLReqGameProtocol_Type GLReqGameProtocol::req_soundtype;
const GLReqGameProtocol_Type GLReqGameProtocol::req_abuse;
const GLReqGameProtocol_Type GLReqGameProtocol::req_observe;
const GLReqGameProtocol_Type GLReqGameProtocol::Type_MIN;
const GLReqGameProtocol_Type GLReqGameProtocol::Type_MAX;
const int GLReqGameProtocol::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLReqGameProtocol::kTypeFieldNumber;
const int GLReqGameProtocol::kMReqGameTestPacketFieldNumber;
const int GLReqGameProtocol::kMReqSendCmdFieldNumber;
const int GLReqGameProtocol::kMReqJoinRoomFieldNumber;
const int GLReqGameProtocol::kMReqSendStartFieldNumber;
const int GLReqGameProtocol::kMReqSendSelectCardFieldNumber;
const int GLReqGameProtocol::kMReqBettingFieldNumber;
const int GLReqGameProtocol::kMReqPingFieldNumber;
const int GLReqGameProtocol::kMReqEntryFieldNumber;
const int GLReqGameProtocol::kMReqContinueFieldNumber;
const int GLReqGameProtocol::kMReqRulesetFieldNumber;
const int GLReqGameProtocol::kMReqJokbosetFieldNumber;
const int GLReqGameProtocol::kMReqAckFieldNumber;
const int GLReqGameProtocol::kMReqChoiceremovecardFieldNumber;
const int GLReqGameProtocol::kMReqPurgeFieldNumber;
const int GLReqGameProtocol::kMReqExitqueFieldNumber;
const int GLReqGameProtocol::kMReqSoundtypeFieldNumber;
const int GLReqGameProtocol::kMReqAbuseFieldNumber;
const int GLReqGameProtocol::kMReqObserveFieldNumber;
#endif  // !_MSC_VER

GLReqGameProtocol::GLReqGameProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLReqGameProtocol::InitAsDefaultInstance() {
  m_req_game_test_packet_ = const_cast< ::s_req_game_test_packet*>(&::s_req_game_test_packet::default_instance());
  m_req_send_cmd_ = const_cast< ::s_req_send_cmd*>(&::s_req_send_cmd::default_instance());
  m_req_join_room_ = const_cast< ::s_req_join_room*>(&::s_req_join_room::default_instance());
  m_req_send_start_ = const_cast< ::s_req_send_start*>(&::s_req_send_start::default_instance());
  m_req_send_select_card_ = const_cast< ::s_req_send_select_card*>(&::s_req_send_select_card::default_instance());
  m_req_betting_ = const_cast< ::s_req_betting*>(&::s_req_betting::default_instance());
  m_req_ping_ = const_cast< ::s_req_ping*>(&::s_req_ping::default_instance());
  m_req_entry_ = const_cast< ::s_req_entry*>(&::s_req_entry::default_instance());
  m_req_continue_ = const_cast< ::s_req_continue*>(&::s_req_continue::default_instance());
  m_req_ruleset_ = const_cast< ::s_req_ruleset*>(&::s_req_ruleset::default_instance());
  m_req_jokboset_ = const_cast< ::s_req_jokboset*>(&::s_req_jokboset::default_instance());
  m_req_ack_ = const_cast< ::s_req_ack*>(&::s_req_ack::default_instance());
  m_req_choiceremovecard_ = const_cast< ::s_req_choiceremovecard*>(&::s_req_choiceremovecard::default_instance());
  m_req_purge_ = const_cast< ::s_req_purge*>(&::s_req_purge::default_instance());
  m_req_exitque_ = const_cast< ::s_req_exitque*>(&::s_req_exitque::default_instance());
  m_req_soundtype_ = const_cast< ::s_req_soundtype*>(&::s_req_soundtype::default_instance());
  m_req_abuse_ = const_cast< ::s_req_abuse*>(&::s_req_abuse::default_instance());
  m_req_observe_ = const_cast< ::s_req_observe*>(&::s_req_observe::default_instance());
}

GLReqGameProtocol::GLReqGameProtocol(const GLReqGameProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLReqGameProtocol::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_req_game_test_packet_ = NULL;
  m_req_send_cmd_ = NULL;
  m_req_join_room_ = NULL;
  m_req_send_start_ = NULL;
  m_req_send_select_card_ = NULL;
  m_req_betting_ = NULL;
  m_req_ping_ = NULL;
  m_req_entry_ = NULL;
  m_req_continue_ = NULL;
  m_req_ruleset_ = NULL;
  m_req_jokboset_ = NULL;
  m_req_ack_ = NULL;
  m_req_choiceremovecard_ = NULL;
  m_req_purge_ = NULL;
  m_req_exitque_ = NULL;
  m_req_soundtype_ = NULL;
  m_req_abuse_ = NULL;
  m_req_observe_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLReqGameProtocol::~GLReqGameProtocol() {
  SharedDtor();
}

void GLReqGameProtocol::SharedDtor() {
  if (this != default_instance_) {
    delete m_req_game_test_packet_;
    delete m_req_send_cmd_;
    delete m_req_join_room_;
    delete m_req_send_start_;
    delete m_req_send_select_card_;
    delete m_req_betting_;
    delete m_req_ping_;
    delete m_req_entry_;
    delete m_req_continue_;
    delete m_req_ruleset_;
    delete m_req_jokboset_;
    delete m_req_ack_;
    delete m_req_choiceremovecard_;
    delete m_req_purge_;
    delete m_req_exitque_;
    delete m_req_soundtype_;
    delete m_req_abuse_;
    delete m_req_observe_;
  }
}

void GLReqGameProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLReqGameProtocol& GLReqGameProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLReqGameProtocol* GLReqGameProtocol::default_instance_ = NULL;

GLReqGameProtocol* GLReqGameProtocol::New() const {
  return new GLReqGameProtocol;
}

void GLReqGameProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_req_game_test_packet()) {
      if (m_req_game_test_packet_ != NULL) m_req_game_test_packet_->::s_req_game_test_packet::Clear();
    }
    if (has_m_req_send_cmd()) {
      if (m_req_send_cmd_ != NULL) m_req_send_cmd_->::s_req_send_cmd::Clear();
    }
    if (has_m_req_join_room()) {
      if (m_req_join_room_ != NULL) m_req_join_room_->::s_req_join_room::Clear();
    }
    if (has_m_req_send_start()) {
      if (m_req_send_start_ != NULL) m_req_send_start_->::s_req_send_start::Clear();
    }
    if (has_m_req_send_select_card()) {
      if (m_req_send_select_card_ != NULL) m_req_send_select_card_->::s_req_send_select_card::Clear();
    }
    if (has_m_req_betting()) {
      if (m_req_betting_ != NULL) m_req_betting_->::s_req_betting::Clear();
    }
    if (has_m_req_ping()) {
      if (m_req_ping_ != NULL) m_req_ping_->::s_req_ping::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_req_entry()) {
      if (m_req_entry_ != NULL) m_req_entry_->::s_req_entry::Clear();
    }
    if (has_m_req_continue()) {
      if (m_req_continue_ != NULL) m_req_continue_->::s_req_continue::Clear();
    }
    if (has_m_req_ruleset()) {
      if (m_req_ruleset_ != NULL) m_req_ruleset_->::s_req_ruleset::Clear();
    }
    if (has_m_req_jokboset()) {
      if (m_req_jokboset_ != NULL) m_req_jokboset_->::s_req_jokboset::Clear();
    }
    if (has_m_req_ack()) {
      if (m_req_ack_ != NULL) m_req_ack_->::s_req_ack::Clear();
    }
    if (has_m_req_choiceremovecard()) {
      if (m_req_choiceremovecard_ != NULL) m_req_choiceremovecard_->::s_req_choiceremovecard::Clear();
    }
    if (has_m_req_purge()) {
      if (m_req_purge_ != NULL) m_req_purge_->::s_req_purge::Clear();
    }
    if (has_m_req_exitque()) {
      if (m_req_exitque_ != NULL) m_req_exitque_->::s_req_exitque::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_req_soundtype()) {
      if (m_req_soundtype_ != NULL) m_req_soundtype_->::s_req_soundtype::Clear();
    }
    if (has_m_req_abuse()) {
      if (m_req_abuse_ != NULL) m_req_abuse_->::s_req_abuse::Clear();
    }
    if (has_m_req_observe()) {
      if (m_req_observe_ != NULL) m_req_observe_->::s_req_observe::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLReqGameProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GLReqGameProtocol.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLReqGameProtocol_Type_IsValid(value)) {
            set_type(static_cast< ::GLReqGameProtocol_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_req_game_test_packet;
        break;
      }
      
      // optional .s_req_game_test_packet m_req_game_test_packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_game_test_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_game_test_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_req_send_cmd;
        break;
      }
      
      // optional .s_req_send_cmd m_req_send_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_send_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_send_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_req_join_room;
        break;
      }
      
      // optional .s_req_join_room m_req_join_room = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_join_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_join_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_req_send_start;
        break;
      }
      
      // optional .s_req_send_start m_req_send_start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_send_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_send_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_req_send_select_card;
        break;
      }
      
      // optional .s_req_send_select_card m_req_send_select_card = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_send_select_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_send_select_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_req_betting;
        break;
      }
      
      // optional .s_req_betting m_req_betting = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_betting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_betting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_req_ping;
        break;
      }
      
      // optional .s_req_ping m_req_ping = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_req_entry;
        break;
      }
      
      // optional .s_req_entry m_req_entry = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_req_continue;
        break;
      }
      
      // optional .s_req_continue m_req_continue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_continue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_continue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_req_ruleset;
        break;
      }
      
      // optional .s_req_ruleset m_req_ruleset = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_ruleset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_ruleset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_req_jokboset;
        break;
      }
      
      // optional .s_req_jokboset m_req_jokboset = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_jokboset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_jokboset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_req_ack;
        break;
      }
      
      // optional .s_req_ack m_req_ack = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_req_choiceremovecard;
        break;
      }
      
      // optional .s_req_choiceremovecard m_req_choiceremovecard = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_choiceremovecard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_choiceremovecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_req_purge;
        break;
      }
      
      // optional .s_req_purge m_req_purge = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_purge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_purge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_req_exitque;
        break;
      }
      
      // optional .s_req_exitque m_req_exitque = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_exitque:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_exitque()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_req_soundtype;
        break;
      }
      
      // optional .s_req_soundtype m_req_soundtype = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_soundtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_soundtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_m_req_abuse;
        break;
      }
      
      // optional .s_req_abuse m_req_abuse = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_abuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_abuse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_req_observe;
        break;
      }
      
      // optional .s_req_observe m_req_observe = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_req_observe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_req_observe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLReqGameProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GLReqGameProtocol.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_req_game_test_packet m_req_game_test_packet = 2;
  if (has_m_req_game_test_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_req_game_test_packet(), output);
  }
  
  // optional .s_req_send_cmd m_req_send_cmd = 3;
  if (has_m_req_send_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_req_send_cmd(), output);
  }
  
  // optional .s_req_join_room m_req_join_room = 4;
  if (has_m_req_join_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_req_join_room(), output);
  }
  
  // optional .s_req_send_start m_req_send_start = 5;
  if (has_m_req_send_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_req_send_start(), output);
  }
  
  // optional .s_req_send_select_card m_req_send_select_card = 6;
  if (has_m_req_send_select_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->m_req_send_select_card(), output);
  }
  
  // optional .s_req_betting m_req_betting = 7;
  if (has_m_req_betting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->m_req_betting(), output);
  }
  
  // optional .s_req_ping m_req_ping = 8;
  if (has_m_req_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->m_req_ping(), output);
  }
  
  // optional .s_req_entry m_req_entry = 9;
  if (has_m_req_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->m_req_entry(), output);
  }
  
  // optional .s_req_continue m_req_continue = 10;
  if (has_m_req_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->m_req_continue(), output);
  }
  
  // optional .s_req_ruleset m_req_ruleset = 11;
  if (has_m_req_ruleset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->m_req_ruleset(), output);
  }
  
  // optional .s_req_jokboset m_req_jokboset = 12;
  if (has_m_req_jokboset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->m_req_jokboset(), output);
  }
  
  // optional .s_req_ack m_req_ack = 13;
  if (has_m_req_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->m_req_ack(), output);
  }
  
  // optional .s_req_choiceremovecard m_req_choiceremovecard = 14;
  if (has_m_req_choiceremovecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->m_req_choiceremovecard(), output);
  }
  
  // optional .s_req_purge m_req_purge = 15;
  if (has_m_req_purge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->m_req_purge(), output);
  }
  
  // optional .s_req_exitque m_req_exitque = 16;
  if (has_m_req_exitque()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->m_req_exitque(), output);
  }
  
  // optional .s_req_soundtype m_req_soundtype = 17;
  if (has_m_req_soundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->m_req_soundtype(), output);
  }
  
  // optional .s_req_abuse m_req_abuse = 18;
  if (has_m_req_abuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->m_req_abuse(), output);
  }
  
  // optional .s_req_observe m_req_observe = 19;
  if (has_m_req_observe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->m_req_observe(), output);
  }
  
}

int GLReqGameProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GLReqGameProtocol.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_req_game_test_packet m_req_game_test_packet = 2;
    if (has_m_req_game_test_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_game_test_packet());
    }
    
    // optional .s_req_send_cmd m_req_send_cmd = 3;
    if (has_m_req_send_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_send_cmd());
    }
    
    // optional .s_req_join_room m_req_join_room = 4;
    if (has_m_req_join_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_join_room());
    }
    
    // optional .s_req_send_start m_req_send_start = 5;
    if (has_m_req_send_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_send_start());
    }
    
    // optional .s_req_send_select_card m_req_send_select_card = 6;
    if (has_m_req_send_select_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_send_select_card());
    }
    
    // optional .s_req_betting m_req_betting = 7;
    if (has_m_req_betting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_betting());
    }
    
    // optional .s_req_ping m_req_ping = 8;
    if (has_m_req_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_ping());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .s_req_entry m_req_entry = 9;
    if (has_m_req_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_entry());
    }
    
    // optional .s_req_continue m_req_continue = 10;
    if (has_m_req_continue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_continue());
    }
    
    // optional .s_req_ruleset m_req_ruleset = 11;
    if (has_m_req_ruleset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_ruleset());
    }
    
    // optional .s_req_jokboset m_req_jokboset = 12;
    if (has_m_req_jokboset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_jokboset());
    }
    
    // optional .s_req_ack m_req_ack = 13;
    if (has_m_req_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_ack());
    }
    
    // optional .s_req_choiceremovecard m_req_choiceremovecard = 14;
    if (has_m_req_choiceremovecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_choiceremovecard());
    }
    
    // optional .s_req_purge m_req_purge = 15;
    if (has_m_req_purge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_purge());
    }
    
    // optional .s_req_exitque m_req_exitque = 16;
    if (has_m_req_exitque()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_exitque());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .s_req_soundtype m_req_soundtype = 17;
    if (has_m_req_soundtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_soundtype());
    }
    
    // optional .s_req_abuse m_req_abuse = 18;
    if (has_m_req_abuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_abuse());
    }
    
    // optional .s_req_observe m_req_observe = 19;
    if (has_m_req_observe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_req_observe());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLReqGameProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLReqGameProtocol*>(&from));
}

void GLReqGameProtocol::MergeFrom(const GLReqGameProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_req_game_test_packet()) {
      mutable_m_req_game_test_packet()->::s_req_game_test_packet::MergeFrom(from.m_req_game_test_packet());
    }
    if (from.has_m_req_send_cmd()) {
      mutable_m_req_send_cmd()->::s_req_send_cmd::MergeFrom(from.m_req_send_cmd());
    }
    if (from.has_m_req_join_room()) {
      mutable_m_req_join_room()->::s_req_join_room::MergeFrom(from.m_req_join_room());
    }
    if (from.has_m_req_send_start()) {
      mutable_m_req_send_start()->::s_req_send_start::MergeFrom(from.m_req_send_start());
    }
    if (from.has_m_req_send_select_card()) {
      mutable_m_req_send_select_card()->::s_req_send_select_card::MergeFrom(from.m_req_send_select_card());
    }
    if (from.has_m_req_betting()) {
      mutable_m_req_betting()->::s_req_betting::MergeFrom(from.m_req_betting());
    }
    if (from.has_m_req_ping()) {
      mutable_m_req_ping()->::s_req_ping::MergeFrom(from.m_req_ping());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_req_entry()) {
      mutable_m_req_entry()->::s_req_entry::MergeFrom(from.m_req_entry());
    }
    if (from.has_m_req_continue()) {
      mutable_m_req_continue()->::s_req_continue::MergeFrom(from.m_req_continue());
    }
    if (from.has_m_req_ruleset()) {
      mutable_m_req_ruleset()->::s_req_ruleset::MergeFrom(from.m_req_ruleset());
    }
    if (from.has_m_req_jokboset()) {
      mutable_m_req_jokboset()->::s_req_jokboset::MergeFrom(from.m_req_jokboset());
    }
    if (from.has_m_req_ack()) {
      mutable_m_req_ack()->::s_req_ack::MergeFrom(from.m_req_ack());
    }
    if (from.has_m_req_choiceremovecard()) {
      mutable_m_req_choiceremovecard()->::s_req_choiceremovecard::MergeFrom(from.m_req_choiceremovecard());
    }
    if (from.has_m_req_purge()) {
      mutable_m_req_purge()->::s_req_purge::MergeFrom(from.m_req_purge());
    }
    if (from.has_m_req_exitque()) {
      mutable_m_req_exitque()->::s_req_exitque::MergeFrom(from.m_req_exitque());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_req_soundtype()) {
      mutable_m_req_soundtype()->::s_req_soundtype::MergeFrom(from.m_req_soundtype());
    }
    if (from.has_m_req_abuse()) {
      mutable_m_req_abuse()->::s_req_abuse::MergeFrom(from.m_req_abuse());
    }
    if (from.has_m_req_observe()) {
      mutable_m_req_observe()->::s_req_observe::MergeFrom(from.m_req_observe());
    }
  }
}

void GLReqGameProtocol::CopyFrom(const GLReqGameProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLReqGameProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_m_req_game_test_packet()) {
    if (!this->m_req_game_test_packet().IsInitialized()) return false;
  }
  if (has_m_req_send_cmd()) {
    if (!this->m_req_send_cmd().IsInitialized()) return false;
  }
  if (has_m_req_join_room()) {
    if (!this->m_req_join_room().IsInitialized()) return false;
  }
  if (has_m_req_send_select_card()) {
    if (!this->m_req_send_select_card().IsInitialized()) return false;
  }
  if (has_m_req_betting()) {
    if (!this->m_req_betting().IsInitialized()) return false;
  }
  if (has_m_req_entry()) {
    if (!this->m_req_entry().IsInitialized()) return false;
  }
  if (has_m_req_continue()) {
    if (!this->m_req_continue().IsInitialized()) return false;
  }
  if (has_m_req_ruleset()) {
    if (!this->m_req_ruleset().IsInitialized()) return false;
  }
  if (has_m_req_jokboset()) {
    if (!this->m_req_jokboset().IsInitialized()) return false;
  }
  if (has_m_req_ack()) {
    if (!this->m_req_ack().IsInitialized()) return false;
  }
  if (has_m_req_choiceremovecard()) {
    if (!this->m_req_choiceremovecard().IsInitialized()) return false;
  }
  if (has_m_req_purge()) {
    if (!this->m_req_purge().IsInitialized()) return false;
  }
  if (has_m_req_exitque()) {
    if (!this->m_req_exitque().IsInitialized()) return false;
  }
  if (has_m_req_soundtype()) {
    if (!this->m_req_soundtype().IsInitialized()) return false;
  }
  if (has_m_req_abuse()) {
    if (!this->m_req_abuse().IsInitialized()) return false;
  }
  return true;
}

void GLReqGameProtocol::Swap(GLReqGameProtocol* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_req_game_test_packet_, other->m_req_game_test_packet_);
    std::swap(m_req_send_cmd_, other->m_req_send_cmd_);
    std::swap(m_req_join_room_, other->m_req_join_room_);
    std::swap(m_req_send_start_, other->m_req_send_start_);
    std::swap(m_req_send_select_card_, other->m_req_send_select_card_);
    std::swap(m_req_betting_, other->m_req_betting_);
    std::swap(m_req_ping_, other->m_req_ping_);
    std::swap(m_req_entry_, other->m_req_entry_);
    std::swap(m_req_continue_, other->m_req_continue_);
    std::swap(m_req_ruleset_, other->m_req_ruleset_);
    std::swap(m_req_jokboset_, other->m_req_jokboset_);
    std::swap(m_req_ack_, other->m_req_ack_);
    std::swap(m_req_choiceremovecard_, other->m_req_choiceremovecard_);
    std::swap(m_req_purge_, other->m_req_purge_);
    std::swap(m_req_exitque_, other->m_req_exitque_);
    std::swap(m_req_soundtype_, other->m_req_soundtype_);
    std::swap(m_req_abuse_, other->m_req_abuse_);
    std::swap(m_req_observe_, other->m_req_observe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLReqGameProtocol::GetTypeName() const {
  return "GLReqGameProtocol";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_game_test_packet::kTestIntFieldNumber;
const int s_ans_game_test_packet::kTestStringFieldNumber;
#endif  // !_MSC_VER

s_ans_game_test_packet::s_ans_game_test_packet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_game_test_packet::InitAsDefaultInstance() {
}

s_ans_game_test_packet::s_ans_game_test_packet(const s_ans_game_test_packet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_game_test_packet::SharedCtor() {
  _cached_size_ = 0;
  test_int_ = 0;
  test_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_game_test_packet::~s_ans_game_test_packet() {
  SharedDtor();
}

void s_ans_game_test_packet::SharedDtor() {
  if (test_string_ != &::google::protobuf::internal::kEmptyString) {
    delete test_string_;
  }
  if (this != default_instance_) {
  }
}

void s_ans_game_test_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_game_test_packet& s_ans_game_test_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_game_test_packet* s_ans_game_test_packet::default_instance_ = NULL;

s_ans_game_test_packet* s_ans_game_test_packet::New() const {
  return new s_ans_game_test_packet;
}

void s_ans_game_test_packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_int_ = 0;
    if (has_test_string()) {
      if (test_string_ != &::google::protobuf::internal::kEmptyString) {
        test_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_game_test_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 test_int = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_int_)));
          set_has_test_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_test_string;
        break;
      }
      
      // required string test_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_game_test_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 test_int = 2;
  if (has_test_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->test_int(), output);
  }
  
  // required string test_string = 3;
  if (has_test_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->test_string(), output);
  }
  
}

int s_ans_game_test_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 test_int = 2;
    if (has_test_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_int());
    }
    
    // required string test_string = 3;
    if (has_test_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_string());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_game_test_packet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_game_test_packet*>(&from));
}

void s_ans_game_test_packet::MergeFrom(const s_ans_game_test_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_int()) {
      set_test_int(from.test_int());
    }
    if (from.has_test_string()) {
      set_test_string(from.test_string());
    }
  }
}

void s_ans_game_test_packet::CopyFrom(const s_ans_game_test_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_game_test_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_ans_game_test_packet::Swap(s_ans_game_test_packet* other) {
  if (other != this) {
    std::swap(test_int_, other->test_int_);
    std::swap(test_string_, other->test_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_game_test_packet::GetTypeName() const {
  return "s_ans_game_test_packet";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_join_room::kGameroominfoFieldNumber;
#endif  // !_MSC_VER

s_ans_join_room::s_ans_join_room()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_join_room::InitAsDefaultInstance() {
  gameroominfo_ = const_cast< ::GameRoomInfo*>(&::GameRoomInfo::default_instance());
}

s_ans_join_room::s_ans_join_room(const s_ans_join_room& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_join_room::SharedCtor() {
  _cached_size_ = 0;
  gameroominfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_join_room::~s_ans_join_room() {
  SharedDtor();
}

void s_ans_join_room::SharedDtor() {
  if (this != default_instance_) {
    delete gameroominfo_;
  }
}

void s_ans_join_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_join_room& s_ans_join_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_join_room* s_ans_join_room::default_instance_ = NULL;

s_ans_join_room* s_ans_join_room::New() const {
  return new s_ans_join_room;
}

void s_ans_join_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameroominfo()) {
      if (gameroominfo_ != NULL) gameroominfo_->::GameRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_join_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameRoomInfo gameroominfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameroominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_join_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameRoomInfo gameroominfo = 1;
  if (has_gameroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->gameroominfo(), output);
  }
  
}

int s_ans_join_room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameRoomInfo gameroominfo = 1;
    if (has_gameroominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameroominfo());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_join_room::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_join_room*>(&from));
}

void s_ans_join_room::MergeFrom(const s_ans_join_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameroominfo()) {
      mutable_gameroominfo()->::GameRoomInfo::MergeFrom(from.gameroominfo());
    }
  }
}

void s_ans_join_room::CopyFrom(const s_ans_join_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_join_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_gameroominfo()) {
    if (!this->gameroominfo().IsInitialized()) return false;
  }
  return true;
}

void s_ans_join_room::Swap(s_ans_join_room* other) {
  if (other != this) {
    std::swap(gameroominfo_, other->gameroominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_join_room::GetTypeName() const {
  return "s_ans_join_room";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_deal_card::kMLBossUSNFieldNumber;
const int s_ans_deal_card::kMNTypeFieldNumber;
const int s_ans_deal_card::kMLCardsDealtFieldNumber;
const int s_ans_deal_card::kMVtOneCardFieldNumber;
#endif  // !_MSC_VER

s_ans_deal_card::s_ans_deal_card()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_deal_card::InitAsDefaultInstance() {
}

s_ans_deal_card::s_ans_deal_card(const s_ans_deal_card& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_deal_card::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_ntype_ = 0;
  m_lcardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_deal_card::~s_ans_deal_card() {
  SharedDtor();
}

void s_ans_deal_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_deal_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_deal_card& s_ans_deal_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_deal_card* s_ans_deal_card::default_instance_ = NULL;

s_ans_deal_card* s_ans_deal_card::New() const {
  return new s_ans_deal_card;
}

void s_ans_deal_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_ntype_ = 0;
    m_lcardsdealt_ = 0;
  }
  m_vtonecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_deal_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nType;
        break;
      }
      
      // required int32 m_nType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtOneCard;
        break;
      }
      
      // repeated .PKOneCard m_vtOneCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtOneCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtonecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtOneCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_deal_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required int32 m_nType = 2;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ntype(), output);
  }
  
  // required sint32 m_lCardsDealt = 3;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcardsdealt(), output);
  }
  
  // repeated .PKOneCard m_vtOneCard = 4;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_vtonecard(i), output);
  }
  
}

int s_ans_deal_card::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nType = 2;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint32 m_lCardsDealt = 3;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
  }
  // repeated .PKOneCard m_vtOneCard = 4;
  total_size += 1 * this->m_vtonecard_size();
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtonecard(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_deal_card::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_deal_card*>(&from));
}

void s_ans_deal_card::MergeFrom(const s_ans_deal_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtonecard_.MergeFrom(from.m_vtonecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
  }
}

void s_ans_deal_card::CopyFrom(const s_ans_deal_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_deal_card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < m_vtonecard_size(); i++) {
    if (!this->m_vtonecard(i).IsInitialized()) return false;
  }
  return true;
}

void s_ans_deal_card::Swap(s_ans_deal_card* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_vtonecard_.Swap(&other->m_vtonecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_deal_card::GetTypeName() const {
  return "s_ans_deal_card";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_deal_cards::kMLBossUSNFieldNumber;
const int s_ans_deal_cards::kMLStateFieldNumber;
const int s_ans_deal_cards::kMNTypeFieldNumber;
const int s_ans_deal_cards::kMTblCardFieldNumber;
const int s_ans_deal_cards::kMTblMoneyFieldNumber;
const int s_ans_deal_cards::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

s_ans_deal_cards::s_ans_deal_cards()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_deal_cards::InitAsDefaultInstance() {
}

s_ans_deal_cards::s_ans_deal_cards(const s_ans_deal_cards& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_deal_cards::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_lstate_ = 0;
  m_ntype_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_deal_cards::~s_ans_deal_cards() {
  SharedDtor();
}

void s_ans_deal_cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_deal_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_deal_cards& s_ans_deal_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_deal_cards* s_ans_deal_cards::default_instance_ = NULL;

s_ans_deal_cards* s_ans_deal_cards::New() const {
  return new s_ans_deal_cards;
}

void s_ans_deal_cards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_lstate_ = 0;
    m_ntype_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_deal_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nType;
        break;
      }
      
      // required int32 m_nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .PKCards m_tblCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblCard;
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .PKMoney m_tblMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        if (input->ExpectTag(48)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_deal_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lstate(), output);
  }
  
  // required int32 m_nType = 3;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ntype(), output);
  }
  
  // repeated .PKCards m_tblCard = 4;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_tblcard(i), output);
  }
  
  // repeated .PKMoney m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 6;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_llpoolmoney(), output);
  }
  
}

int s_ans_deal_cards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint32 m_lState = 2;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required int32 m_nType = 3;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint64 m_llPoolMoney = 6;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .PKCards m_tblCard = 4;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .PKMoney m_tblMoney = 5;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_deal_cards::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_deal_cards*>(&from));
}

void s_ans_deal_cards::MergeFrom(const s_ans_deal_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
}

void s_ans_deal_cards::CopyFrom(const s_ans_deal_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_deal_cards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void s_ans_deal_cards::Swap(s_ans_deal_cards* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_ntype_, other->m_ntype_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_deal_cards::GetTypeName() const {
  return "s_ans_deal_cards";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_send_ante::kMLlAnteMoneyFieldNumber;
#endif  // !_MSC_VER

s_ans_send_ante::s_ans_send_ante()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_send_ante::InitAsDefaultInstance() {
}

s_ans_send_ante::s_ans_send_ante(const s_ans_send_ante& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_send_ante::SharedCtor() {
  _cached_size_ = 0;
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_send_ante::~s_ans_send_ante() {
  SharedDtor();
}

void s_ans_send_ante::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_send_ante::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_send_ante& s_ans_send_ante::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_send_ante* s_ans_send_ante::default_instance_ = NULL;

s_ans_send_ante* s_ans_send_ante::New() const {
  return new s_ans_send_ante;
}

void s_ans_send_ante::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llantemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_send_ante::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llAnteMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llantemoney_)));
          set_has_m_llantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_send_ante::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llAnteMoney = 1;
  if (has_m_llantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llantemoney(), output);
  }
  
}

int s_ans_send_ante::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llAnteMoney = 1;
    if (has_m_llantemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llantemoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_send_ante::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_send_ante*>(&from));
}

void s_ans_send_ante::MergeFrom(const s_ans_send_ante& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llantemoney()) {
      set_m_llantemoney(from.m_llantemoney());
    }
  }
}

void s_ans_send_ante::CopyFrom(const s_ans_send_ante& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_send_ante::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_ans_send_ante::Swap(s_ans_send_ante* other) {
  if (other != this) {
    std::swap(m_llantemoney_, other->m_llantemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_send_ante::GetTypeName() const {
  return "s_ans_send_ante";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_select_card::kMLUSNFieldNumber;
const int s_ans_select_card::kMNSelectFieldNumber;
const int s_ans_select_card::kMLCardIndexFieldNumber;
const int s_ans_select_card::kMLChoiceTypeFieldNumber;
#endif  // !_MSC_VER

s_ans_select_card::s_ans_select_card()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_select_card::InitAsDefaultInstance() {
}

s_ans_select_card::s_ans_select_card(const s_ans_select_card& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_select_card::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nselect_ = 0;
  m_lcardindex_ = 0;
  m_lchoicetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_select_card::~s_ans_select_card() {
  SharedDtor();
}

void s_ans_select_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_select_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_select_card& s_ans_select_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_select_card* s_ans_select_card::default_instance_ = NULL;

s_ans_select_card* s_ans_select_card::New() const {
  return new s_ans_select_card;
}

void s_ans_select_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nselect_ = 0;
    m_lcardindex_ = 0;
    m_lchoicetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_select_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nSelect;
        break;
      }
      
      // required int32 m_nSelect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSelect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nselect_)));
          set_has_m_nselect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lCardIndex;
        break;
      }
      
      // required sint32 m_lCardIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardindex_)));
          set_has_m_lcardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lChoiceType;
        break;
      }
      
      // required sint32 m_lChoiceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChoiceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lchoicetype_)));
          set_has_m_lchoicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_select_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nSelect = 2;
  if (has_m_nselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nselect(), output);
  }
  
  // required sint32 m_lCardIndex = 3;
  if (has_m_lcardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcardindex(), output);
  }
  
  // required sint32 m_lChoiceType = 4;
  if (has_m_lchoicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lchoicetype(), output);
  }
  
}

int s_ans_select_card::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nSelect = 2;
    if (has_m_nselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nselect());
    }
    
    // required sint32 m_lCardIndex = 3;
    if (has_m_lcardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardindex());
    }
    
    // required sint32 m_lChoiceType = 4;
    if (has_m_lchoicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lchoicetype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_select_card::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_select_card*>(&from));
}

void s_ans_select_card::MergeFrom(const s_ans_select_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nselect()) {
      set_m_nselect(from.m_nselect());
    }
    if (from.has_m_lcardindex()) {
      set_m_lcardindex(from.m_lcardindex());
    }
    if (from.has_m_lchoicetype()) {
      set_m_lchoicetype(from.m_lchoicetype());
    }
  }
}

void s_ans_select_card::CopyFrom(const s_ans_select_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_select_card::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void s_ans_select_card::Swap(s_ans_select_card* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nselect_, other->m_nselect_);
    std::swap(m_lcardindex_, other->m_lcardindex_);
    std::swap(m_lchoicetype_, other->m_lchoicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_select_card::GetTypeName() const {
  return "s_ans_select_card";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_opencard::kMLStateFieldNumber;
const int s_ans_opencard::kMTblCardFieldNumber;
const int s_ans_opencard::kMVtStateFieldNumber;
#endif  // !_MSC_VER

s_ans_opencard::s_ans_opencard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_opencard::InitAsDefaultInstance() {
}

s_ans_opencard::s_ans_opencard(const s_ans_opencard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_opencard::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_opencard::~s_ans_opencard() {
  SharedDtor();
}

void s_ans_opencard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_opencard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_opencard& s_ans_opencard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_opencard* s_ans_opencard::default_instance_ = NULL;

s_ans_opencard* s_ans_opencard::New() const {
  return new s_ans_opencard;
}

void s_ans_opencard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
  }
  m_tblcard_.Clear();
  m_vtstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_opencard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .PKCards m_tblCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tblCard;
        if (input->ExpectTag(24)) goto parse_m_vtState;
        break;
      }
      
      // repeated sint32 m_vtState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24, input, this->mutable_m_vtstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_m_vtstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_vtState;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_opencard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // repeated .PKCards m_tblCard = 2;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_tblcard(i), output);
  }
  
  // repeated sint32 m_vtState = 3;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->m_vtstate(i), output);
  }
  
}

int s_ans_opencard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
  }
  // repeated .PKCards m_tblCard = 2;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated sint32 m_vtState = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->m_vtstate(i));
    }
    total_size += 1 * this->m_vtstate_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_opencard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_opencard*>(&from));
}

void s_ans_opencard::MergeFrom(const s_ans_opencard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_vtstate_.MergeFrom(from.m_vtstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
  }
}

void s_ans_opencard::CopyFrom(const s_ans_opencard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_opencard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  return true;
}

void s_ans_opencard::Swap(s_ans_opencard* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_vtstate_.Swap(&other->m_vtstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_opencard::GetTypeName() const {
  return "s_ans_opencard";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_boss::kMLBossUSNFieldNumber;
const int s_ans_boss::kMNBossRankFieldNumber;
#endif  // !_MSC_VER

s_ans_boss::s_ans_boss()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_boss::InitAsDefaultInstance() {
}

s_ans_boss::s_ans_boss(const s_ans_boss& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_boss::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_nbossrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_boss::~s_ans_boss() {
  SharedDtor();
}

void s_ans_boss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_boss& s_ans_boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_boss* s_ans_boss::default_instance_ = NULL;

s_ans_boss* s_ans_boss::New() const {
  return new s_ans_boss;
}

void s_ans_boss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_nbossrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nBossRank;
        break;
      }
      
      // required int32 m_nBossRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nBossRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nbossrank_)));
          set_has_m_nbossrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required int32 m_nBossRank = 2;
  if (has_m_nbossrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nbossrank(), output);
  }
  
}

int s_ans_boss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nBossRank = 2;
    if (has_m_nbossrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nbossrank());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_boss::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_boss*>(&from));
}

void s_ans_boss::MergeFrom(const s_ans_boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_nbossrank()) {
      set_m_nbossrank(from.m_nbossrank());
    }
  }
}

void s_ans_boss::CopyFrom(const s_ans_boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_ans_boss::Swap(s_ans_boss* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_nbossrank_, other->m_nbossrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_boss::GetTypeName() const {
  return "s_ans_boss";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_deal_hiddencard::kMLBossUSNFieldNumber;
const int s_ans_deal_hiddencard::kMLCardsDealtFieldNumber;
const int s_ans_deal_hiddencard::kMVtOneCardFieldNumber;
#endif  // !_MSC_VER

s_ans_deal_hiddencard::s_ans_deal_hiddencard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_deal_hiddencard::InitAsDefaultInstance() {
}

s_ans_deal_hiddencard::s_ans_deal_hiddencard(const s_ans_deal_hiddencard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_deal_hiddencard::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_lcardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_deal_hiddencard::~s_ans_deal_hiddencard() {
  SharedDtor();
}

void s_ans_deal_hiddencard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_deal_hiddencard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_deal_hiddencard& s_ans_deal_hiddencard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_deal_hiddencard* s_ans_deal_hiddencard::default_instance_ = NULL;

s_ans_deal_hiddencard* s_ans_deal_hiddencard::New() const {
  return new s_ans_deal_hiddencard;
}

void s_ans_deal_hiddencard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_lcardsdealt_ = 0;
  }
  m_vtonecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_deal_hiddencard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vtOneCard;
        break;
      }
      
      // repeated .PKOneCard m_vtOneCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtOneCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtonecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vtOneCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_deal_hiddencard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lcardsdealt(), output);
  }
  
  // repeated .PKOneCard m_vtOneCard = 3;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_vtonecard(i), output);
  }
  
}

int s_ans_deal_hiddencard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint32 m_lCardsDealt = 2;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
  }
  // repeated .PKOneCard m_vtOneCard = 3;
  total_size += 1 * this->m_vtonecard_size();
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtonecard(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_deal_hiddencard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_deal_hiddencard*>(&from));
}

void s_ans_deal_hiddencard::MergeFrom(const s_ans_deal_hiddencard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtonecard_.MergeFrom(from.m_vtonecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
  }
}

void s_ans_deal_hiddencard::CopyFrom(const s_ans_deal_hiddencard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_deal_hiddencard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < m_vtonecard_size(); i++) {
    if (!this->m_vtonecard(i).IsInitialized()) return false;
  }
  return true;
}

void s_ans_deal_hiddencard::Swap(s_ans_deal_hiddencard* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_vtonecard_.Swap(&other->m_vtonecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_deal_hiddencard::GetTypeName() const {
  return "s_ans_deal_hiddencard";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_betting::kMLUSNFieldNumber;
const int s_ans_betting::kMBetTypeFieldNumber;
#endif  // !_MSC_VER

s_ans_betting::s_ans_betting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_betting::InitAsDefaultInstance() {
}

s_ans_betting::s_ans_betting(const s_ans_betting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_betting::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_bettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_betting::~s_ans_betting() {
  SharedDtor();
}

void s_ans_betting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_betting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_betting& s_ans_betting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_betting* s_ans_betting::default_instance_ = NULL;

s_ans_betting* s_ans_betting::New() const {
  return new s_ans_betting;
}

void s_ans_betting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_bettype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_betting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_BetType;
        break;
      }
      
      // required int32 m_BetType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bettype_)));
          set_has_m_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_betting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_BetType = 2;
  if (has_m_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_bettype(), output);
  }
  
}

int s_ans_betting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_BetType = 2;
    if (has_m_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bettype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_betting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_betting*>(&from));
}

void s_ans_betting::MergeFrom(const s_ans_betting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_bettype()) {
      set_m_bettype(from.m_bettype());
    }
  }
}

void s_ans_betting::CopyFrom(const s_ans_betting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_betting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_ans_betting::Swap(s_ans_betting* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_bettype_, other->m_bettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_betting::GetTypeName() const {
  return "s_ans_betting";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_pong::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

s_ans_pong::s_ans_pong()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_pong::InitAsDefaultInstance() {
}

s_ans_pong::s_ans_pong(const s_ans_pong& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_pong::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_pong::~s_ans_pong() {
  SharedDtor();
}

void s_ans_pong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_pong& s_ans_pong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_pong* s_ans_pong::default_instance_ = NULL;

s_ans_pong* s_ans_pong::New() const {
  return new s_ans_pong;
}

void s_ans_pong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
}

int s_ans_pong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_pong::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_pong*>(&from));
}

void s_ans_pong::MergeFrom(const s_ans_pong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
}

void s_ans_pong::CopyFrom(const s_ans_pong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_pong::IsInitialized() const {
  
  return true;
}

void s_ans_pong::Swap(s_ans_pong* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_pong::GetTypeName() const {
  return "s_ans_pong";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_entry::kMLUSNFieldNumber;
const int s_ans_entry::kMNIndexFieldNumber;
const int s_ans_entry::kMLOwnerUSNFieldNumber;
const int s_ans_entry::kMTblUIFieldNumber;
const int s_ans_entry::kMTblMoneyFieldNumber;
const int s_ans_entry::kMBWelcomeSoundFieldNumber;
const int s_ans_entry::kMLObserveCntFieldNumber;
#endif  // !_MSC_VER

s_ans_entry::s_ans_entry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_entry::InitAsDefaultInstance() {
}

s_ans_entry::s_ans_entry(const s_ans_entry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_entry::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lownerusn_ = 0;
  m_bwelcomesound_ = 0;
  m_lobservecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_entry::~s_ans_entry() {
  SharedDtor();
}

void s_ans_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_entry& s_ans_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_entry* s_ans_entry::default_instance_ = NULL;

s_ans_entry* s_ans_entry::New() const {
  return new s_ans_entry;
}

void s_ans_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lownerusn_ = 0;
    m_bwelcomesound_ = 0;
    m_lobservecnt_ = 0;
  }
  m_tblui_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblUI;
        break;
      }
      
      // repeated .PKUserInfo m_tblUI = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblUI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblUI;
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .PKMoney m_tblMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        if (input->ExpectTag(48)) goto parse_m_bWelcomeSound;
        break;
      }
      
      // required sint32 m_bWelcomeSound = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bWelcomeSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bwelcomesound_)));
          set_has_m_bwelcomesound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lObserveCnt;
        break;
      }
      
      // required sint32 m_lObserveCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lObserveCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lobservecnt_)));
          set_has_m_lobservecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lownerusn(), output);
  }
  
  // repeated .PKUserInfo m_tblUI = 4;
  for (int i = 0; i < this->m_tblui_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_tblui(i), output);
  }
  
  // repeated .PKMoney m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_tblmoney(i), output);
  }
  
  // required sint32 m_bWelcomeSound = 6;
  if (has_m_bwelcomesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_bwelcomesound(), output);
  }
  
  // required sint32 m_lObserveCnt = 7;
  if (has_m_lobservecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lobservecnt(), output);
  }
  
}

int s_ans_entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lOwnerUSN = 3;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required sint32 m_bWelcomeSound = 6;
    if (has_m_bwelcomesound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bwelcomesound());
    }
    
    // required sint32 m_lObserveCnt = 7;
    if (has_m_lobservecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lobservecnt());
    }
    
  }
  // repeated .PKUserInfo m_tblUI = 4;
  total_size += 1 * this->m_tblui_size();
  for (int i = 0; i < this->m_tblui_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblui(i));
  }
  
  // repeated .PKMoney m_tblMoney = 5;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_entry*>(&from));
}

void s_ans_entry::MergeFrom(const s_ans_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblui_.MergeFrom(from.m_tblui_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_bwelcomesound()) {
      set_m_bwelcomesound(from.m_bwelcomesound());
    }
    if (from.has_m_lobservecnt()) {
      set_m_lobservecnt(from.m_lobservecnt());
    }
  }
}

void s_ans_entry::CopyFrom(const s_ans_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;
  
  for (int i = 0; i < m_tblui_size(); i++) {
    if (!this->m_tblui(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void s_ans_entry::Swap(s_ans_entry* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    m_tblui_.Swap(&other->m_tblui_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_bwelcomesound_, other->m_bwelcomesound_);
    std::swap(m_lobservecnt_, other->m_lobservecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_entry::GetTypeName() const {
  return "s_ans_entry";
}


// ===================================================================

#ifndef _MSC_VER
const int s_betting_msg::kMLUSNFieldNumber;
const int s_betting_msg::kMNIndexFieldNumber;
const int s_betting_msg::kMBetTypeFieldNumber;
const int s_betting_msg::kMBBettingMoneyFieldNumber;
const int s_betting_msg::kMBMoneyLackFieldNumber;
const int s_betting_msg::kMBCallMoneyZeroFieldNumber;
const int s_betting_msg::kMLlCallMoneyFieldNumber;
const int s_betting_msg::kMLlRaiseMoneyFieldNumber;
const int s_betting_msg::kMLlSideMoneyFieldNumber;
const int s_betting_msg::kMLBetTurnFieldNumber;
const int s_betting_msg::kMMoneyFieldNumber;
const int s_betting_msg::kMVtCallMoneyFieldNumber;
const int s_betting_msg::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

s_betting_msg::s_betting_msg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_betting_msg::InitAsDefaultInstance() {
  m_money_ = const_cast< ::PKMoney*>(&::PKMoney::default_instance());
}

s_betting_msg::s_betting_msg(const s_betting_msg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_betting_msg::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_bettype_ = 0;
  m_bbettingmoney_ = 0;
  m_bmoneylack_ = 0;
  m_bcallmoneyzero_ = 0;
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  m_lbetturn_ = 0;
  m_money_ = NULL;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_betting_msg::~s_betting_msg() {
  SharedDtor();
}

void s_betting_msg::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void s_betting_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_betting_msg& s_betting_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_betting_msg* s_betting_msg::default_instance_ = NULL;

s_betting_msg* s_betting_msg::New() const {
  return new s_betting_msg;
}

void s_betting_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_bettype_ = 0;
    m_bbettingmoney_ = 0;
    m_bmoneylack_ = 0;
    m_bcallmoneyzero_ = 0;
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llraisemoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_llsidemoney_ = GOOGLE_LONGLONG(0);
    m_lbetturn_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::PKMoney::Clear();
    }
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_vtcallmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_betting_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_BetType;
        break;
      }
      
      // required int32 m_BetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bettype_)));
          set_has_m_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bBettingMoney;
        break;
      }
      
      // required int32 m_bBettingMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bBettingMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bbettingmoney_)));
          set_has_m_bbettingmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bMoneyLack;
        break;
      }
      
      // required int32 m_bMoneyLack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bMoneyLack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmoneylack_)));
          set_has_m_bmoneylack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bCallMoneyZero;
        break;
      }
      
      // required int32 m_bCallMoneyZero = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallMoneyZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcallmoneyzero_)));
          set_has_m_bcallmoneyzero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_llCallMoney;
        break;
      }
      
      // required int64 m_llCallMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_llRaiseMoney;
        break;
      }
      
      // required int64 m_llRaiseMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRaiseMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llraisemoney_)));
          set_has_m_llraisemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_llSideMoney;
        break;
      }
      
      // required int64 m_llSideMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSideMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llsidemoney_)));
          set_has_m_llsidemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lBetTurn;
        break;
      }
      
      // required int32 m_lBetTurn = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetTurn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbetturn_)));
          set_has_m_lbetturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_money;
        break;
      }
      
      // required .PKMoney m_money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_vtCallMoney;
        break;
      }
      
      // repeated int64 m_vtCallMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 96, input, this->mutable_m_vtcallmoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_vtcallmoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_vtCallMoney;
        if (input->ExpectTag(104)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required int64 m_llPoolMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_betting_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required int32 m_BetType = 3;
  if (has_m_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_bettype(), output);
  }
  
  // required int32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bbettingmoney(), output);
  }
  
  // required int32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bmoneylack(), output);
  }
  
  // required int32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_bcallmoneyzero(), output);
  }
  
  // required int64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->m_llcallmoney(), output);
  }
  
  // required int64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_llraisemoney(), output);
  }
  
  // required int64 m_llSideMoney = 9;
  if (has_m_llsidemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->m_llsidemoney(), output);
  }
  
  // required int32 m_lBetTurn = 10;
  if (has_m_lbetturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_lbetturn(), output);
  }
  
  // required .PKMoney m_money = 11;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->m_money(), output);
  }
  
  // repeated int64 m_vtCallMoney = 12;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      12, this->m_vtcallmoney(i), output);
  }
  
  // required int64 m_llPoolMoney = 13;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->m_llpoolmoney(), output);
  }
  
}

int s_betting_msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required int32 m_BetType = 3;
    if (has_m_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bettype());
    }
    
    // required int32 m_bBettingMoney = 4;
    if (has_m_bbettingmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bbettingmoney());
    }
    
    // required int32 m_bMoneyLack = 5;
    if (has_m_bmoneylack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmoneylack());
    }
    
    // required int32 m_bCallMoneyZero = 6;
    if (has_m_bcallmoneyzero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcallmoneyzero());
    }
    
    // required int64 m_llCallMoney = 7;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llcallmoney());
    }
    
    // required int64 m_llRaiseMoney = 8;
    if (has_m_llraisemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llraisemoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 m_llSideMoney = 9;
    if (has_m_llsidemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llsidemoney());
    }
    
    // required int32 m_lBetTurn = 10;
    if (has_m_lbetturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbetturn());
    }
    
    // required .PKMoney m_money = 11;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required int64 m_llPoolMoney = 13;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated int64 m_vtCallMoney = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_vtcallmoney(i));
    }
    total_size += 1 * this->m_vtcallmoney_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_betting_msg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_betting_msg*>(&from));
}

void s_betting_msg::MergeFrom(const s_betting_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcallmoney_.MergeFrom(from.m_vtcallmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_bettype()) {
      set_m_bettype(from.m_bettype());
    }
    if (from.has_m_bbettingmoney()) {
      set_m_bbettingmoney(from.m_bbettingmoney());
    }
    if (from.has_m_bmoneylack()) {
      set_m_bmoneylack(from.m_bmoneylack());
    }
    if (from.has_m_bcallmoneyzero()) {
      set_m_bcallmoneyzero(from.m_bcallmoneyzero());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llraisemoney()) {
      set_m_llraisemoney(from.m_llraisemoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_llsidemoney()) {
      set_m_llsidemoney(from.m_llsidemoney());
    }
    if (from.has_m_lbetturn()) {
      set_m_lbetturn(from.m_lbetturn());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::PKMoney::MergeFrom(from.m_money());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
}

void s_betting_msg::CopyFrom(const s_betting_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_betting_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000017ff) != 0x000017ff) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void s_betting_msg::Swap(s_betting_msg* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_bettype_, other->m_bettype_);
    std::swap(m_bbettingmoney_, other->m_bbettingmoney_);
    std::swap(m_bmoneylack_, other->m_bmoneylack_);
    std::swap(m_bcallmoneyzero_, other->m_bcallmoneyzero_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llraisemoney_, other->m_llraisemoney_);
    std::swap(m_llsidemoney_, other->m_llsidemoney_);
    std::swap(m_lbetturn_, other->m_lbetturn_);
    std::swap(m_money_, other->m_money_);
    m_vtcallmoney_.Swap(&other->m_vtcallmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_betting_msg::GetTypeName() const {
  return "s_betting_msg";
}


// ===================================================================

#ifndef _MSC_VER
const int s_finished::kMLStateFieldNumber;
const int s_finished::kMBGiveUpFieldNumber;
const int s_finished::kMLRankFieldNumber;
const int s_finished::kMLBossUSNFieldNumber;
const int s_finished::kMLlGiveMoneyFieldNumber;
const int s_finished::kMVtWinFieldNumber;
const int s_finished::kMVtResultFieldNumber;
const int s_finished::kMVtGiveMoneyFieldNumber;
const int s_finished::kMTblCardFieldNumber;
const int s_finished::kMTblMoneyFieldNumber;
const int s_finished::kMLlPoolMoneyFieldNumber;
const int s_finished::kMVtUserMoneyFieldNumber;
const int s_finished::kMLResultIdxFieldNumber;
const int s_finished::kMLlJackpotFieldNumber;
#endif  // !_MSC_VER

s_finished::s_finished()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_finished::InitAsDefaultInstance() {
}

s_finished::s_finished(const s_finished& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_finished::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_bgiveup_ = 0;
  m_lrank_ = 0;
  m_lbossusn_ = 0;
  m_llgivemoney_ = GOOGLE_LONGLONG(0);
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  m_lresultidx_ = 0;
  m_lljackpot_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_finished::~s_finished() {
  SharedDtor();
}

void s_finished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_finished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_finished& s_finished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_finished* s_finished::default_instance_ = NULL;

s_finished* s_finished::New() const {
  return new s_finished;
}

void s_finished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_bgiveup_ = 0;
    m_lrank_ = 0;
    m_lbossusn_ = 0;
    m_llgivemoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
    m_lresultidx_ = 0;
    m_lljackpot_ = GOOGLE_LONGLONG(0);
  }
  m_vtwin_.Clear();
  m_vtresult_.Clear();
  m_vtgivemoney_.Clear();
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  m_vtusermoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_finished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bGiveUp;
        break;
      }
      
      // required sint32 m_bGiveUp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bGiveUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bgiveup_)));
          set_has_m_bgiveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lRank;
        break;
      }
      
      // required sint32 m_lRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lrank_)));
          set_has_m_lrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lBossUSN;
        break;
      }
      
      // required sint32 m_lBossUSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBossUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llGiveMoney;
        break;
      }
      
      // required sint64 m_llGiveMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llgivemoney_)));
          set_has_m_llgivemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vtWin;
        break;
      }
      
      // repeated int32 m_vtWin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_vtwin())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtwin())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vtWin;
        if (input->ExpectTag(56)) goto parse_m_vtResult;
        break;
      }
      
      // repeated int32 m_vtResult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_vtresult())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtresult())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_vtResult;
        if (input->ExpectTag(64)) goto parse_m_vtGiveMoney;
        break;
      }
      
      // repeated sint64 m_vtGiveMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtGiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 64, input, this->mutable_m_vtgivemoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_m_vtgivemoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_vtGiveMoney;
        if (input->ExpectTag(74)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .PKCards m_tblCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_tblCard;
        if (input->ExpectTag(82)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .PKMoney m_tblMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_tblMoney;
        if (input->ExpectTag(88)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_vtUserMoney;
        break;
      }
      
      // repeated .UserMoney m_vtUserMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtUserMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtusermoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_vtUserMoney;
        if (input->ExpectTag(104)) goto parse_m_lResultIdx;
        break;
      }
      
      // required sint32 m_lResultIdx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lresultidx_)));
          set_has_m_lresultidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_llJackpot;
        break;
      }
      
      // required sint64 m_llJackpot = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpot_)));
          set_has_m_lljackpot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_finished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // required sint32 m_bGiveUp = 2;
  if (has_m_bgiveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bgiveup(), output);
  }
  
  // required sint32 m_lRank = 3;
  if (has_m_lrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lrank(), output);
  }
  
  // required sint32 m_lBossUSN = 4;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lbossusn(), output);
  }
  
  // required sint64 m_llGiveMoney = 5;
  if (has_m_llgivemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llgivemoney(), output);
  }
  
  // repeated int32 m_vtWin = 6;
  for (int i = 0; i < this->m_vtwin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_vtwin(i), output);
  }
  
  // repeated int32 m_vtResult = 7;
  for (int i = 0; i < this->m_vtresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_vtresult(i), output);
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      8, this->m_vtgivemoney(i), output);
  }
  
  // repeated .PKCards m_tblCard = 9;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->m_tblcard(i), output);
  }
  
  // repeated .PKMoney m_tblMoney = 10;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 11;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->m_llpoolmoney(), output);
  }
  
  // repeated .UserMoney m_vtUserMoney = 12;
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->m_vtusermoney(i), output);
  }
  
  // required sint32 m_lResultIdx = 13;
  if (has_m_lresultidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->m_lresultidx(), output);
  }
  
  // required sint64 m_llJackpot = 14;
  if (has_m_lljackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(14, this->m_lljackpot(), output);
  }
  
}

int s_finished::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint32 m_bGiveUp = 2;
    if (has_m_bgiveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bgiveup());
    }
    
    // required sint32 m_lRank = 3;
    if (has_m_lrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lrank());
    }
    
    // required sint32 m_lBossUSN = 4;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint64 m_llGiveMoney = 5;
    if (has_m_llgivemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llgivemoney());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required sint64 m_llPoolMoney = 11;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
    // required sint32 m_lResultIdx = 13;
    if (has_m_lresultidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lresultidx());
    }
    
    // required sint64 m_llJackpot = 14;
    if (has_m_lljackpot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpot());
    }
    
  }
  // repeated int32 m_vtWin = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtwin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtwin(i));
    }
    total_size += 1 * this->m_vtwin_size() + data_size;
  }
  
  // repeated int32 m_vtResult = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtresult(i));
    }
    total_size += 1 * this->m_vtresult_size() + data_size;
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->m_vtgivemoney(i));
    }
    total_size += 1 * this->m_vtgivemoney_size() + data_size;
  }
  
  // repeated .PKCards m_tblCard = 9;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .PKMoney m_tblMoney = 10;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  // repeated .UserMoney m_vtUserMoney = 12;
  total_size += 1 * this->m_vtusermoney_size();
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtusermoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_finished::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_finished*>(&from));
}

void s_finished::MergeFrom(const s_finished& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwin_.MergeFrom(from.m_vtwin_);
  m_vtresult_.MergeFrom(from.m_vtresult_);
  m_vtgivemoney_.MergeFrom(from.m_vtgivemoney_);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  m_vtusermoney_.MergeFrom(from.m_vtusermoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_bgiveup()) {
      set_m_bgiveup(from.m_bgiveup());
    }
    if (from.has_m_lrank()) {
      set_m_lrank(from.m_lrank());
    }
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_llgivemoney()) {
      set_m_llgivemoney(from.m_llgivemoney());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
    if (from.has_m_lresultidx()) {
      set_m_lresultidx(from.m_lresultidx());
    }
    if (from.has_m_lljackpot()) {
      set_m_lljackpot(from.m_lljackpot());
    }
  }
}

void s_finished::CopyFrom(const s_finished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_finished::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000341f) != 0x0000341f) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtusermoney_size(); i++) {
    if (!this->m_vtusermoney(i).IsInitialized()) return false;
  }
  return true;
}

void s_finished::Swap(s_finished* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_bgiveup_, other->m_bgiveup_);
    std::swap(m_lrank_, other->m_lrank_);
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_llgivemoney_, other->m_llgivemoney_);
    m_vtwin_.Swap(&other->m_vtwin_);
    m_vtresult_.Swap(&other->m_vtresult_);
    m_vtgivemoney_.Swap(&other->m_vtgivemoney_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    m_vtusermoney_.Swap(&other->m_vtusermoney_);
    std::swap(m_lresultidx_, other->m_lresultidx_);
    std::swap(m_lljackpot_, other->m_lljackpot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_finished::GetTypeName() const {
  return "s_finished";
}


// ===================================================================

#ifndef _MSC_VER
const int s_jackpotmoneyntf::kMLUSNFieldNumber;
const int s_jackpotmoneyntf::kMLlJackpotMoneyFieldNumber;
#endif  // !_MSC_VER

s_jackpotmoneyntf::s_jackpotmoneyntf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_jackpotmoneyntf::InitAsDefaultInstance() {
}

s_jackpotmoneyntf::s_jackpotmoneyntf(const s_jackpotmoneyntf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_jackpotmoneyntf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_jackpotmoneyntf::~s_jackpotmoneyntf() {
  SharedDtor();
}

void s_jackpotmoneyntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_jackpotmoneyntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_jackpotmoneyntf& s_jackpotmoneyntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_jackpotmoneyntf* s_jackpotmoneyntf::default_instance_ = NULL;

s_jackpotmoneyntf* s_jackpotmoneyntf::New() const {
  return new s_jackpotmoneyntf;
}

void s_jackpotmoneyntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_jackpotmoneyntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llJackpotMoney;
        break;
      }
      
      // required sint64 m_llJackpotMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpotMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpotmoney_)));
          set_has_m_lljackpotmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_jackpotmoneyntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint64 m_llJackpotMoney = 2;
  if (has_m_lljackpotmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_lljackpotmoney(), output);
  }
  
}

int s_jackpotmoneyntf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint64 m_llJackpotMoney = 2;
    if (has_m_lljackpotmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpotmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_jackpotmoneyntf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_jackpotmoneyntf*>(&from));
}

void s_jackpotmoneyntf::MergeFrom(const s_jackpotmoneyntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lljackpotmoney()) {
      set_m_lljackpotmoney(from.m_lljackpotmoney());
    }
  }
}

void s_jackpotmoneyntf::CopyFrom(const s_jackpotmoneyntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_jackpotmoneyntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_jackpotmoneyntf::Swap(s_jackpotmoneyntf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lljackpotmoney_, other->m_lljackpotmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_jackpotmoneyntf::GetTypeName() const {
  return "s_jackpotmoneyntf";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_continue::kMLUSNFieldNumber;
#endif  // !_MSC_VER

s_ans_continue::s_ans_continue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_continue::InitAsDefaultInstance() {
}

s_ans_continue::s_ans_continue(const s_ans_continue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_continue::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_continue::~s_ans_continue() {
  SharedDtor();
}

void s_ans_continue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_continue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_continue& s_ans_continue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_continue* s_ans_continue::default_instance_ = NULL;

s_ans_continue* s_ans_continue::New() const {
  return new s_ans_continue;
}

void s_ans_continue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
}

int s_ans_continue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_continue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_continue*>(&from));
}

void s_ans_continue::MergeFrom(const s_ans_continue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
  }
}

void s_ans_continue::CopyFrom(const s_ans_continue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_continue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_ans_continue::Swap(s_ans_continue* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_continue::GetTypeName() const {
  return "s_ans_continue";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_ruleset::kMNRuleIdxFieldNumber;
#endif  // !_MSC_VER

s_ans_ruleset::s_ans_ruleset()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_ruleset::InitAsDefaultInstance() {
}

s_ans_ruleset::s_ans_ruleset(const s_ans_ruleset& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_ruleset::SharedCtor() {
  _cached_size_ = 0;
  m_nruleidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_ruleset::~s_ans_ruleset() {
  SharedDtor();
}

void s_ans_ruleset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_ruleset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_ruleset& s_ans_ruleset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_ruleset* s_ans_ruleset::default_instance_ = NULL;

s_ans_ruleset* s_ans_ruleset::New() const {
  return new s_ans_ruleset;
}

void s_ans_ruleset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nruleidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_ruleset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRuleIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nruleidx_)));
          set_has_m_nruleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_ruleset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nruleidx(), output);
  }
  
}

int s_ans_ruleset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRuleIdx = 1;
    if (has_m_nruleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nruleidx());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_ruleset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_ruleset*>(&from));
}

void s_ans_ruleset::MergeFrom(const s_ans_ruleset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nruleidx()) {
      set_m_nruleidx(from.m_nruleidx());
    }
  }
}

void s_ans_ruleset::CopyFrom(const s_ans_ruleset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_ruleset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_ans_ruleset::Swap(s_ans_ruleset* other) {
  if (other != this) {
    std::swap(m_nruleidx_, other->m_nruleidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_ruleset::GetTypeName() const {
  return "s_ans_ruleset";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_start::kMLStateFieldNumber;
const int s_ans_start::kMVtStateFieldNumber;
const int s_ans_start::kMLlSystemTimeFieldNumber;
#endif  // !_MSC_VER

s_ans_start::s_ans_start()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_start::InitAsDefaultInstance() {
}

s_ans_start::s_ans_start(const s_ans_start& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_start::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_llsystemtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_start::~s_ans_start() {
  SharedDtor();
}

void s_ans_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_start& s_ans_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_start* s_ans_start::default_instance_ = NULL;

s_ans_start* s_ans_start::New() const {
  return new s_ans_start;
}

void s_ans_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_llsystemtime_ = GOOGLE_LONGLONG(0);
  }
  m_vtstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_vtState;
        break;
      }
      
      // repeated sint32 m_vtState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16, input, this->mutable_m_vtstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_m_vtstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_vtState;
        if (input->ExpectTag(24)) goto parse_m_llSystemTime;
        break;
      }
      
      // required sint64 m_llSystemTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSystemTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsystemtime_)));
          set_has_m_llsystemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // repeated sint32 m_vtState = 2;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->m_vtstate(i), output);
  }
  
  // required sint64 m_llSystemTime = 3;
  if (has_m_llsystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llsystemtime(), output);
  }
  
}

int s_ans_start::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint64 m_llSystemTime = 3;
    if (has_m_llsystemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsystemtime());
    }
    
  }
  // repeated sint32 m_vtState = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->m_vtstate(i));
    }
    total_size += 1 * this->m_vtstate_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_start::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_start*>(&from));
}

void s_ans_start::MergeFrom(const s_ans_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtstate_.MergeFrom(from.m_vtstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_llsystemtime()) {
      set_m_llsystemtime(from.m_llsystemtime());
    }
  }
}

void s_ans_start::CopyFrom(const s_ans_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void s_ans_start::Swap(s_ans_start* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    m_vtstate_.Swap(&other->m_vtstate_);
    std::swap(m_llsystemtime_, other->m_llsystemtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_start::GetTypeName() const {
  return "s_ans_start";
}


// ===================================================================

#ifndef _MSC_VER
const int s_carddata::kMNDealCntFieldNumber;
const int s_carddata::kMLCardsDealtFieldNumber;
const int s_carddata::kMTblCardFieldNumber;
const int s_carddata::kMTblMoneyFieldNumber;
const int s_carddata::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

s_carddata::s_carddata()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_carddata::InitAsDefaultInstance() {
}

s_carddata::s_carddata(const s_carddata& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_carddata::SharedCtor() {
  _cached_size_ = 0;
  m_ndealcnt_ = 0;
  m_lcardsdealt_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_carddata::~s_carddata() {
  SharedDtor();
}

void s_carddata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_carddata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_carddata& s_carddata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_carddata* s_carddata::default_instance_ = NULL;

s_carddata* s_carddata::New() const {
  return new s_carddata;
}

void s_carddata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ndealcnt_ = 0;
    m_lcardsdealt_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_carddata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nDealCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ndealcnt_)));
          set_has_m_ndealcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .PKCards m_tblCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tblCard;
        if (input->ExpectTag(34)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .PKMoney m_tblMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblMoney;
        if (input->ExpectTag(40)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_carddata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nDealCnt = 1;
  if (has_m_ndealcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ndealcnt(), output);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lcardsdealt(), output);
  }
  
  // repeated .PKCards m_tblCard = 3;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_tblcard(i), output);
  }
  
  // repeated .PKMoney m_tblMoney = 4;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 5;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llpoolmoney(), output);
  }
  
}

int s_carddata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nDealCnt = 1;
    if (has_m_ndealcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ndealcnt());
    }
    
    // required sint32 m_lCardsDealt = 2;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
    // required sint64 m_llPoolMoney = 5;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .PKCards m_tblCard = 3;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .PKMoney m_tblMoney = 4;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_carddata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_carddata*>(&from));
}

void s_carddata::MergeFrom(const s_carddata& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ndealcnt()) {
      set_m_ndealcnt(from.m_ndealcnt());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
}

void s_carddata::CopyFrom(const s_carddata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_carddata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void s_carddata::Swap(s_carddata* other) {
  if (other != this) {
    std::swap(m_ndealcnt_, other->m_ndealcnt_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_carddata::GetTypeName() const {
  return "s_carddata";
}


// ===================================================================

#ifndef _MSC_VER
const int s_entryreject::kMLTypeFieldNumber;
const int s_entryreject::kMLlCMoneyFieldNumber;
#endif  // !_MSC_VER

s_entryreject::s_entryreject()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_entryreject::InitAsDefaultInstance() {
}

s_entryreject::s_entryreject(const s_entryreject& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_entryreject::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_entryreject::~s_entryreject() {
  SharedDtor();
}

void s_entryreject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_entryreject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_entryreject& s_entryreject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_entryreject* s_entryreject::default_instance_ = NULL;

s_entryreject* s_entryreject::New() const {
  return new s_entryreject;
}

void s_entryreject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_entryreject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_entryreject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint64 m_llCMoney = 2;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llcmoney(), output);
  }
  
}

int s_entryreject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint64 m_llCMoney = 2;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_entryreject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_entryreject*>(&from));
}

void s_entryreject::MergeFrom(const s_entryreject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
  }
}

void s_entryreject::CopyFrom(const s_entryreject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_entryreject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_entryreject::Swap(s_entryreject* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_entryreject::GetTypeName() const {
  return "s_entryreject";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

s_nostart::s_nostart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_nostart::InitAsDefaultInstance() {
}

s_nostart::s_nostart(const s_nostart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_nostart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_nostart::~s_nostart() {
  SharedDtor();
}

void s_nostart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_nostart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_nostart& s_nostart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_nostart* s_nostart::default_instance_ = NULL;

s_nostart* s_nostart::New() const {
  return new s_nostart;
}

void s_nostart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_nostart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void s_nostart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int s_nostart::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_nostart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_nostart*>(&from));
}

void s_nostart::MergeFrom(const s_nostart& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void s_nostart::CopyFrom(const s_nostart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_nostart::IsInitialized() const {
  
  return true;
}

void s_nostart::Swap(s_nostart* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_nostart::GetTypeName() const {
  return "s_nostart";
}


// ===================================================================

#ifndef _MSC_VER
const int s_newgame::kMVtWinLoseInfoFieldNumber;
#endif  // !_MSC_VER

s_newgame::s_newgame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_newgame::InitAsDefaultInstance() {
}

s_newgame::s_newgame(const s_newgame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_newgame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_newgame::~s_newgame() {
  SharedDtor();
}

void s_newgame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_newgame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_newgame& s_newgame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_newgame* s_newgame::default_instance_ = NULL;

s_newgame* s_newgame::New() const {
  return new s_newgame;
}

void s_newgame::Clear() {
  m_vtwinloseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_newgame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtWinLoseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtwinloseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtWinLoseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_newgame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_vtwinloseinfo(i), output);
  }
  
}

int s_newgame::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
  total_size += 1 * this->m_vtwinloseinfo_size();
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtwinloseinfo(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_newgame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_newgame*>(&from));
}

void s_newgame::MergeFrom(const s_newgame& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwinloseinfo_.MergeFrom(from.m_vtwinloseinfo_);
}

void s_newgame::CopyFrom(const s_newgame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_newgame::IsInitialized() const {
  
  for (int i = 0; i < m_vtwinloseinfo_size(); i++) {
    if (!this->m_vtwinloseinfo(i).IsInitialized()) return false;
  }
  return true;
}

void s_newgame::Swap(s_newgame* other) {
  if (other != this) {
    m_vtwinloseinfo_.Swap(&other->m_vtwinloseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_newgame::GetTypeName() const {
  return "s_newgame";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

s_ans_purge::s_ans_purge()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_purge::InitAsDefaultInstance() {
}

s_ans_purge::s_ans_purge(const s_ans_purge& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_purge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_purge::~s_ans_purge() {
  SharedDtor();
}

void s_ans_purge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_purge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_purge& s_ans_purge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_purge* s_ans_purge::default_instance_ = NULL;

s_ans_purge* s_ans_purge::New() const {
  return new s_ans_purge;
}

void s_ans_purge::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_purge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void s_ans_purge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int s_ans_purge::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_purge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_purge*>(&from));
}

void s_ans_purge::MergeFrom(const s_ans_purge& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void s_ans_purge::CopyFrom(const s_ans_purge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_purge::IsInitialized() const {
  
  return true;
}

void s_ans_purge::Swap(s_ans_purge* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_purge::GetTypeName() const {
  return "s_ans_purge";
}


// ===================================================================

#ifndef _MSC_VER
const int s_purgeinfo::kMVtPurgeUSNFieldNumber;
const int s_purgeinfo::kMNCountFieldNumber;
#endif  // !_MSC_VER

s_purgeinfo::s_purgeinfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_purgeinfo::InitAsDefaultInstance() {
}

s_purgeinfo::s_purgeinfo(const s_purgeinfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_purgeinfo::SharedCtor() {
  _cached_size_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_purgeinfo::~s_purgeinfo() {
  SharedDtor();
}

void s_purgeinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_purgeinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_purgeinfo& s_purgeinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_purgeinfo* s_purgeinfo::default_instance_ = NULL;

s_purgeinfo* s_purgeinfo::New() const {
  return new s_purgeinfo;
}

void s_purgeinfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_ncount_ = 0;
  }
  m_vtpurgeusn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_purgeinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKVecUSN m_vtPurgeUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtPurgeUSN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtpurgeusn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtPurgeUSN;
        if (input->ExpectTag(16)) goto parse_m_nCount;
        break;
      }
      
      // required int32 m_nCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_purgeinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKVecUSN m_vtPurgeUSN = 1;
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_vtpurgeusn(i), output);
  }
  
  // required int32 m_nCount = 2;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ncount(), output);
  }
  
}

int s_purgeinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 m_nCount = 2;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }
    
  }
  // repeated .PKVecUSN m_vtPurgeUSN = 1;
  total_size += 1 * this->m_vtpurgeusn_size();
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtpurgeusn(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_purgeinfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_purgeinfo*>(&from));
}

void s_purgeinfo::MergeFrom(const s_purgeinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtpurgeusn_.MergeFrom(from.m_vtpurgeusn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
}

void s_purgeinfo::CopyFrom(const s_purgeinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_purgeinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < m_vtpurgeusn_size(); i++) {
    if (!this->m_vtpurgeusn(i).IsInitialized()) return false;
  }
  return true;
}

void s_purgeinfo::Swap(s_purgeinfo* other) {
  if (other != this) {
    m_vtpurgeusn_.Swap(&other->m_vtpurgeusn_);
    std::swap(m_ncount_, other->m_ncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_purgeinfo::GetTypeName() const {
  return "s_purgeinfo";
}


// ===================================================================

#ifndef _MSC_VER
const int s_systemmsg::kMLTypeFieldNumber;
#endif  // !_MSC_VER

s_systemmsg::s_systemmsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_systemmsg::InitAsDefaultInstance() {
}

s_systemmsg::s_systemmsg(const s_systemmsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_systemmsg::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_systemmsg::~s_systemmsg() {
  SharedDtor();
}

void s_systemmsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_systemmsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_systemmsg& s_systemmsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_systemmsg* s_systemmsg::default_instance_ = NULL;

s_systemmsg* s_systemmsg::New() const {
  return new s_systemmsg;
}

void s_systemmsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_systemmsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_systemmsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
}

int s_systemmsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_systemmsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_systemmsg*>(&from));
}

void s_systemmsg::MergeFrom(const s_systemmsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
  }
}

void s_systemmsg::CopyFrom(const s_systemmsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_systemmsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_systemmsg::Swap(s_systemmsg* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_systemmsg::GetTypeName() const {
  return "s_systemmsg";
}


// ===================================================================

#ifndef _MSC_VER
const int s_exitntf::kMLUSNFieldNumber;
const int s_exitntf::kMNIndexFieldNumber;
const int s_exitntf::kMLExitFieldNumber;
const int s_exitntf::kMBExitFieldNumber;
#endif  // !_MSC_VER

s_exitntf::s_exitntf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_exitntf::InitAsDefaultInstance() {
}

s_exitntf::s_exitntf(const s_exitntf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_exitntf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lexit_ = 0;
  m_bexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_exitntf::~s_exitntf() {
  SharedDtor();
}

void s_exitntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_exitntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_exitntf& s_exitntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_exitntf* s_exitntf::default_instance_ = NULL;

s_exitntf* s_exitntf::New() const {
  return new s_exitntf;
}

void s_exitntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lexit_ = 0;
    m_bexit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_exitntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lExit;
        break;
      }
      
      // required sint32 m_lExit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bExit;
        break;
      }
      
      // required sint32 m_bExit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bexit_)));
          set_has_m_bexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_exitntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lExit = 3;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lexit(), output);
  }
  
  // required sint32 m_bExit = 4;
  if (has_m_bexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_bexit(), output);
  }
  
}

int s_exitntf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lExit = 3;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_bExit = 4;
    if (has_m_bexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bexit());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_exitntf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_exitntf*>(&from));
}

void s_exitntf::MergeFrom(const s_exitntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_bexit()) {
      set_m_bexit(from.m_bexit());
    }
  }
}

void s_exitntf::CopyFrom(const s_exitntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_exitntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void s_exitntf::Swap(s_exitntf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_bexit_, other->m_bexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_exitntf::GetTypeName() const {
  return "s_exitntf";
}


// ===================================================================

#ifndef _MSC_VER
const int s_refillmoneyntf::kMLUSNFieldNumber;
const int s_refillmoneyntf::kMNRefillCntFieldNumber;
const int s_refillmoneyntf::kMLlRefillMoneyFieldNumber;
#endif  // !_MSC_VER

s_refillmoneyntf::s_refillmoneyntf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_refillmoneyntf::InitAsDefaultInstance() {
}

s_refillmoneyntf::s_refillmoneyntf(const s_refillmoneyntf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_refillmoneyntf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nrefillcnt_ = 0;
  m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_refillmoneyntf::~s_refillmoneyntf() {
  SharedDtor();
}

void s_refillmoneyntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_refillmoneyntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_refillmoneyntf& s_refillmoneyntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_refillmoneyntf* s_refillmoneyntf::default_instance_ = NULL;

s_refillmoneyntf* s_refillmoneyntf::New() const {
  return new s_refillmoneyntf;
}

void s_refillmoneyntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nrefillcnt_ = 0;
    m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_refillmoneyntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nRefillCnt;
        break;
      }
      
      // required int32 m_nRefillCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRefillCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nrefillcnt_)));
          set_has_m_nrefillcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llRefillMoney;
        break;
      }
      
      // required sint64 m_llRefillMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRefillMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llrefillmoney_)));
          set_has_m_llrefillmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_refillmoneyntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nRefillCnt = 2;
  if (has_m_nrefillcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nrefillcnt(), output);
  }
  
  // required sint64 m_llRefillMoney = 3;
  if (has_m_llrefillmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llrefillmoney(), output);
  }
  
}

int s_refillmoneyntf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nRefillCnt = 2;
    if (has_m_nrefillcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nrefillcnt());
    }
    
    // required sint64 m_llRefillMoney = 3;
    if (has_m_llrefillmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llrefillmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_refillmoneyntf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_refillmoneyntf*>(&from));
}

void s_refillmoneyntf::MergeFrom(const s_refillmoneyntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nrefillcnt()) {
      set_m_nrefillcnt(from.m_nrefillcnt());
    }
    if (from.has_m_llrefillmoney()) {
      set_m_llrefillmoney(from.m_llrefillmoney());
    }
  }
}

void s_refillmoneyntf::CopyFrom(const s_refillmoneyntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_refillmoneyntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void s_refillmoneyntf::Swap(s_refillmoneyntf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nrefillcnt_, other->m_nrefillcnt_);
    std::swap(m_llrefillmoney_, other->m_llrefillmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_refillmoneyntf::GetTypeName() const {
  return "s_refillmoneyntf";
}


// ===================================================================

#ifndef _MSC_VER
const int s_bonus::kMLlBonusFieldNumber;
#endif  // !_MSC_VER

s_bonus::s_bonus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_bonus::InitAsDefaultInstance() {
}

s_bonus::s_bonus(const s_bonus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_bonus::SharedCtor() {
  _cached_size_ = 0;
  m_llbonus_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_bonus::~s_bonus() {
  SharedDtor();
}

void s_bonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_bonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_bonus& s_bonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_bonus* s_bonus::default_instance_ = NULL;

s_bonus* s_bonus::New() const {
  return new s_bonus;
}

void s_bonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llbonus_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_bonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llBonus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llbonus_)));
          set_has_m_llbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_bonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llBonus = 1;
  if (has_m_llbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llbonus(), output);
  }
  
}

int s_bonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llBonus = 1;
    if (has_m_llbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llbonus());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_bonus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_bonus*>(&from));
}

void s_bonus::MergeFrom(const s_bonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llbonus()) {
      set_m_llbonus(from.m_llbonus());
    }
  }
}

void s_bonus::CopyFrom(const s_bonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_bonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_bonus::Swap(s_bonus* other) {
  if (other != this) {
    std::swap(m_llbonus_, other->m_llbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_bonus::GetTypeName() const {
  return "s_bonus";
}


// ===================================================================

#ifndef _MSC_VER
const int s_userjoinerr::kMLUSNFieldNumber;
const int s_userjoinerr::kMLErrorCodeFieldNumber;
#endif  // !_MSC_VER

s_userjoinerr::s_userjoinerr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_userjoinerr::InitAsDefaultInstance() {
}

s_userjoinerr::s_userjoinerr(const s_userjoinerr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_userjoinerr::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_userjoinerr::~s_userjoinerr() {
  SharedDtor();
}

void s_userjoinerr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_userjoinerr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_userjoinerr& s_userjoinerr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_userjoinerr* s_userjoinerr::default_instance_ = NULL;

s_userjoinerr* s_userjoinerr::New() const {
  return new s_userjoinerr;
}

void s_userjoinerr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_userjoinerr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lErrorCode;
        break;
      }
      
      // required sint32 m_lErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lerrorcode_)));
          set_has_m_lerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_userjoinerr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lErrorCode = 2;
  if (has_m_lerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lerrorcode(), output);
  }
  
}

int s_userjoinerr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lErrorCode = 2;
    if (has_m_lerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lerrorcode());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_userjoinerr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_userjoinerr*>(&from));
}

void s_userjoinerr::MergeFrom(const s_userjoinerr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lerrorcode()) {
      set_m_lerrorcode(from.m_lerrorcode());
    }
  }
}

void s_userjoinerr::CopyFrom(const s_userjoinerr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_userjoinerr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void s_userjoinerr::Swap(s_userjoinerr* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lerrorcode_, other->m_lerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_userjoinerr::GetTypeName() const {
  return "s_userjoinerr";
}


// ===================================================================

#ifndef _MSC_VER
const int s_userdisconnect::kMLUSNFieldNumber;
const int s_userdisconnect::kMUinfoFieldNumber;
const int s_userdisconnect::kMLStateFieldNumber;
const int s_userdisconnect::kMLOwnerUSNFieldNumber;
#endif  // !_MSC_VER

s_userdisconnect::s_userdisconnect()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_userdisconnect::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::PKUserInfo*>(&::PKUserInfo::default_instance());
}

s_userdisconnect::s_userdisconnect(const s_userdisconnect& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_userdisconnect::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_uinfo_ = NULL;
  m_lstate_ = 0;
  m_lownerusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_userdisconnect::~s_userdisconnect() {
  SharedDtor();
}

void s_userdisconnect::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
  }
}

void s_userdisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_userdisconnect& s_userdisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_userdisconnect* s_userdisconnect::default_instance_ = NULL;

s_userdisconnect* s_userdisconnect::New() const {
  return new s_userdisconnect;
}

void s_userdisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::PKUserInfo::Clear();
    }
    m_lstate_ = 0;
    m_lownerusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_userdisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_uinfo;
        break;
      }
      
      // required .PKUserInfo m_uinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_userdisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required .PKUserInfo m_uinfo = 2;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_uinfo(), output);
  }
  
  // required sint32 m_lState = 3;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lstate(), output);
  }
  
  // required sint32 m_lOwnerUSN = 4;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lownerusn(), output);
  }
  
}

int s_userdisconnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required .PKUserInfo m_uinfo = 2;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
    // required sint32 m_lState = 3;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint32 m_lOwnerUSN = 4;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_userdisconnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_userdisconnect*>(&from));
}

void s_userdisconnect::MergeFrom(const s_userdisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::PKUserInfo::MergeFrom(from.m_uinfo());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
  }
}

void s_userdisconnect::CopyFrom(const s_userdisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_userdisconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  return true;
}

void s_userdisconnect::Swap(s_userdisconnect* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_userdisconnect::GetTypeName() const {
  return "s_userdisconnect";
}


// ===================================================================

#ifndef _MSC_VER
const int s_soundtypeans::kMLUSNFieldNumber;
const int s_soundtypeans::kMNIndexFieldNumber;
const int s_soundtypeans::kMLSoundTypeFieldNumber;
#endif  // !_MSC_VER

s_soundtypeans::s_soundtypeans()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_soundtypeans::InitAsDefaultInstance() {
}

s_soundtypeans::s_soundtypeans(const s_soundtypeans& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_soundtypeans::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lsoundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_soundtypeans::~s_soundtypeans() {
  SharedDtor();
}

void s_soundtypeans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_soundtypeans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_soundtypeans& s_soundtypeans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_soundtypeans* s_soundtypeans::default_instance_ = NULL;

s_soundtypeans* s_soundtypeans::New() const {
  return new s_soundtypeans;
}

void s_soundtypeans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lsoundtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_soundtypeans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_soundtypeans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lsoundtype(), output);
  }
  
}

int s_soundtypeans::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lSoundType = 3;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_soundtypeans::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_soundtypeans*>(&from));
}

void s_soundtypeans::MergeFrom(const s_soundtypeans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
  }
}

void s_soundtypeans::CopyFrom(const s_soundtypeans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_soundtypeans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void s_soundtypeans::Swap(s_soundtypeans* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_soundtypeans::GetTypeName() const {
  return "s_soundtypeans";
}


// ===================================================================

#ifndef _MSC_VER
const int s_userjoinans::kMLStateFieldNumber;
const int s_userjoinans::kMNEnterFieldNumber;
const int s_userjoinans::kMNSetFieldNumber;
const int s_userjoinans::kMLChannelIdxFieldNumber;
const int s_userjoinans::kMLOwnerUSNFieldNumber;
const int s_userjoinans::kMLBossUSNFieldNumber;
const int s_userjoinans::kMNRoomPurgeCntFieldNumber;
const int s_userjoinans::kMOptionFieldNumber;
#endif  // !_MSC_VER

s_userjoinans::s_userjoinans()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_userjoinans::InitAsDefaultInstance() {
  m_option_ = const_cast< ::PKOption*>(&::PKOption::default_instance());
}

s_userjoinans::s_userjoinans(const s_userjoinans& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_userjoinans::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_nenter_ = 0;
  m_nset_ = 0;
  m_lchannel_idx_ = 0;
  m_lownerusn_ = 0;
  m_lbossusn_ = 0;
  m_nroompurgecnt_ = 0;
  m_option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_userjoinans::~s_userjoinans() {
  SharedDtor();
}

void s_userjoinans::SharedDtor() {
  if (this != default_instance_) {
    delete m_option_;
  }
}

void s_userjoinans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_userjoinans& s_userjoinans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_userjoinans* s_userjoinans::default_instance_ = NULL;

s_userjoinans* s_userjoinans::New() const {
  return new s_userjoinans;
}

void s_userjoinans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_nenter_ = 0;
    m_nset_ = 0;
    m_lchannel_idx_ = 0;
    m_lownerusn_ = 0;
    m_lbossusn_ = 0;
    m_nroompurgecnt_ = 0;
    if (has_m_option()) {
      if (m_option_ != NULL) m_option_->::PKOption::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_userjoinans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nEnter;
        break;
      }
      
      // required int32 m_nEnter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nenter_)));
          set_has_m_nenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nSet;
        break;
      }
      
      // required int32 m_nSet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nset_)));
          set_has_m_nset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lChannel_idx;
        break;
      }
      
      // required int32 m_lChannel_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChannel_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchannel_idx_)));
          set_has_m_lchannel_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lBossUSN;
        break;
      }
      
      // required sint32 m_lBossUSN = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBossUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_nRoomPurgeCnt;
        break;
      }
      
      // required int32 m_nRoomPurgeCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRoomPurgeCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nroompurgecnt_)));
          set_has_m_nroompurgecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_option;
        break;
      }
      
      // required .PKOption m_option = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_userjoinans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // required int32 m_nEnter = 2;
  if (has_m_nenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nenter(), output);
  }
  
  // required int32 m_nSet = 3;
  if (has_m_nset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_nset(), output);
  }
  
  // required int32 m_lChannel_idx = 4;
  if (has_m_lchannel_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lchannel_idx(), output);
  }
  
  // required sint32 m_lOwnerUSN = 5;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lownerusn(), output);
  }
  
  // required sint32 m_lBossUSN = 6;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lbossusn(), output);
  }
  
  // required int32 m_nRoomPurgeCnt = 7;
  if (has_m_nroompurgecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_nroompurgecnt(), output);
  }
  
  // required .PKOption m_option = 8;
  if (has_m_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->m_option(), output);
  }
  
}

int s_userjoinans::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required int32 m_nEnter = 2;
    if (has_m_nenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nenter());
    }
    
    // required int32 m_nSet = 3;
    if (has_m_nset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nset());
    }
    
    // required int32 m_lChannel_idx = 4;
    if (has_m_lchannel_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchannel_idx());
    }
    
    // required sint32 m_lOwnerUSN = 5;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required sint32 m_lBossUSN = 6;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nRoomPurgeCnt = 7;
    if (has_m_nroompurgecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nroompurgecnt());
    }
    
    // required .PKOption m_option = 8;
    if (has_m_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_option());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_userjoinans::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_userjoinans*>(&from));
}

void s_userjoinans::MergeFrom(const s_userjoinans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_nenter()) {
      set_m_nenter(from.m_nenter());
    }
    if (from.has_m_nset()) {
      set_m_nset(from.m_nset());
    }
    if (from.has_m_lchannel_idx()) {
      set_m_lchannel_idx(from.m_lchannel_idx());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_nroompurgecnt()) {
      set_m_nroompurgecnt(from.m_nroompurgecnt());
    }
    if (from.has_m_option()) {
      mutable_m_option()->::PKOption::MergeFrom(from.m_option());
    }
  }
}

void s_userjoinans::CopyFrom(const s_userjoinans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_userjoinans::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_m_option()) {
    if (!this->m_option().IsInitialized()) return false;
  }
  return true;
}

void s_userjoinans::Swap(s_userjoinans* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_nenter_, other->m_nenter_);
    std::swap(m_nset_, other->m_nset_);
    std::swap(m_lchannel_idx_, other->m_lchannel_idx_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_nroompurgecnt_, other->m_nroompurgecnt_);
    std::swap(m_option_, other->m_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_userjoinans::GetTypeName() const {
  return "s_userjoinans";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

s_startreq::s_startreq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_startreq::InitAsDefaultInstance() {
}

s_startreq::s_startreq(const s_startreq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_startreq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_startreq::~s_startreq() {
  SharedDtor();
}

void s_startreq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_startreq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_startreq& s_startreq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_startreq* s_startreq::default_instance_ = NULL;

s_startreq* s_startreq::New() const {
  return new s_startreq;
}

void s_startreq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_startreq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void s_startreq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int s_startreq::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_startreq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_startreq*>(&from));
}

void s_startreq::MergeFrom(const s_startreq& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void s_startreq::CopyFrom(const s_startreq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_startreq::IsInitialized() const {
  
  return true;
}

void s_startreq::Swap(s_startreq* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_startreq::GetTypeName() const {
  return "s_startreq";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

s_ans_abuse::s_ans_abuse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_abuse::InitAsDefaultInstance() {
}

s_ans_abuse::s_ans_abuse(const s_ans_abuse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_abuse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_abuse::~s_ans_abuse() {
  SharedDtor();
}

void s_ans_abuse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_ans_abuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_abuse& s_ans_abuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_abuse* s_ans_abuse::default_instance_ = NULL;

s_ans_abuse* s_ans_abuse::New() const {
  return new s_ans_abuse;
}

void s_ans_abuse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_abuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void s_ans_abuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int s_ans_abuse::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_abuse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_abuse*>(&from));
}

void s_ans_abuse::MergeFrom(const s_ans_abuse& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void s_ans_abuse::CopyFrom(const s_ans_abuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_abuse::IsInitialized() const {
  
  return true;
}

void s_ans_abuse::Swap(s_ans_abuse* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_abuse::GetTypeName() const {
  return "s_ans_abuse";
}


// ===================================================================

#ifndef _MSC_VER
const int s_continue_msg::kMVtWinLoseInfoFieldNumber;
#endif  // !_MSC_VER

s_continue_msg::s_continue_msg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_continue_msg::InitAsDefaultInstance() {
}

s_continue_msg::s_continue_msg(const s_continue_msg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_continue_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_continue_msg::~s_continue_msg() {
  SharedDtor();
}

void s_continue_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_continue_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_continue_msg& s_continue_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_continue_msg* s_continue_msg::default_instance_ = NULL;

s_continue_msg* s_continue_msg::New() const {
  return new s_continue_msg;
}

void s_continue_msg::Clear() {
  m_vtwinloseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_continue_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtWinLoseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtwinloseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtWinLoseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_continue_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_vtwinloseinfo(i), output);
  }
  
}

int s_continue_msg::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
  total_size += 1 * this->m_vtwinloseinfo_size();
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtwinloseinfo(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_continue_msg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_continue_msg*>(&from));
}

void s_continue_msg::MergeFrom(const s_continue_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwinloseinfo_.MergeFrom(from.m_vtwinloseinfo_);
}

void s_continue_msg::CopyFrom(const s_continue_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_continue_msg::IsInitialized() const {
  
  for (int i = 0; i < m_vtwinloseinfo_size(); i++) {
    if (!this->m_vtwinloseinfo(i).IsInitialized()) return false;
  }
  return true;
}

void s_continue_msg::Swap(s_continue_msg* other) {
  if (other != this) {
    m_vtwinloseinfo_.Swap(&other->m_vtwinloseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_continue_msg::GetTypeName() const {
  return "s_continue_msg";
}


// ===================================================================

#ifndef _MSC_VER
const int s_ans_observe::kMLUSNFieldNumber;
const int s_ans_observe::kMNIndexFieldNumber;
const int s_ans_observe::kMLOwnerUSNFieldNumber;
const int s_ans_observe::kMUinfoFieldNumber;
const int s_ans_observe::kMMoneyFieldNumber;
#endif  // !_MSC_VER

s_ans_observe::s_ans_observe()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_ans_observe::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::PKUserInfo*>(&::PKUserInfo::default_instance());
  m_money_ = const_cast< ::PKMoney*>(&::PKMoney::default_instance());
}

s_ans_observe::s_ans_observe(const s_ans_observe& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_ans_observe::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lownerusn_ = 0;
  m_uinfo_ = NULL;
  m_money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_ans_observe::~s_ans_observe() {
  SharedDtor();
}

void s_ans_observe::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
    delete m_money_;
  }
}

void s_ans_observe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_ans_observe& s_ans_observe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_ans_observe* s_ans_observe::default_instance_ = NULL;

s_ans_observe* s_ans_observe::New() const {
  return new s_ans_observe;
}

void s_ans_observe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lownerusn_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::PKUserInfo::Clear();
    }
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::PKMoney::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_ans_observe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_uinfo;
        break;
      }
      
      // required .PKUserInfo m_uinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_money;
        break;
      }
      
      // required .PKMoney m_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_ans_observe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lownerusn(), output);
  }
  
  // required .PKUserInfo m_uinfo = 4;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_uinfo(), output);
  }
  
  // required .PKMoney m_money = 5;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_money(), output);
  }
  
}

int s_ans_observe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lOwnerUSN = 3;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required .PKUserInfo m_uinfo = 4;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
    // required .PKMoney m_money = 5;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_ans_observe::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_ans_observe*>(&from));
}

void s_ans_observe::MergeFrom(const s_ans_observe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::PKUserInfo::MergeFrom(from.m_uinfo());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::PKMoney::MergeFrom(from.m_money());
    }
  }
}

void s_ans_observe::CopyFrom(const s_ans_observe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ans_observe::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void s_ans_observe::Swap(s_ans_observe* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_ans_observe::GetTypeName() const {
  return "s_ans_observe";
}


// ===================================================================

#ifndef _MSC_VER
const int s_observercnt::kMNObserverCntFieldNumber;
#endif  // !_MSC_VER

s_observercnt::s_observercnt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void s_observercnt::InitAsDefaultInstance() {
}

s_observercnt::s_observercnt(const s_observercnt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void s_observercnt::SharedCtor() {
  _cached_size_ = 0;
  m_nobservercnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_observercnt::~s_observercnt() {
  SharedDtor();
}

void s_observercnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_observercnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const s_observercnt& s_observercnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

s_observercnt* s_observercnt::default_instance_ = NULL;

s_observercnt* s_observercnt::New() const {
  return new s_observercnt;
}

void s_observercnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nobservercnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool s_observercnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nObserverCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nobservercnt_)));
          set_has_m_nobservercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_observercnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nObserverCnt = 1;
  if (has_m_nobservercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nobservercnt(), output);
  }
  
}

int s_observercnt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nObserverCnt = 1;
    if (has_m_nobservercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nobservercnt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_observercnt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s_observercnt*>(&from));
}

void s_observercnt::MergeFrom(const s_observercnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nobservercnt()) {
      set_m_nobservercnt(from.m_nobservercnt());
    }
  }
}

void s_observercnt::CopyFrom(const s_observercnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_observercnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void s_observercnt::Swap(s_observercnt* other) {
  if (other != this) {
    std::swap(m_nobservercnt_, other->m_nobservercnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string s_observercnt::GetTypeName() const {
  return "s_observercnt";
}


// ===================================================================

bool GLAnsGameProtocol_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GLAnsGameProtocol_Type GLAnsGameProtocol::NONE;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_game_test_packet;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_join_room;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_deal_card;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_send_ante;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_select_card;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_opencard;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_boss;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_deal_hiddencard;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_betting;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_pong;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_entry;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_deal_cards;
const GLAnsGameProtocol_Type GLAnsGameProtocol::betting_msg;
const GLAnsGameProtocol_Type GLAnsGameProtocol::finished;
const GLAnsGameProtocol_Type GLAnsGameProtocol::jackpotmoneyntf;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_continue;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_ruleset;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_start;
const GLAnsGameProtocol_Type GLAnsGameProtocol::carddata;
const GLAnsGameProtocol_Type GLAnsGameProtocol::entryreject;
const GLAnsGameProtocol_Type GLAnsGameProtocol::nostart;
const GLAnsGameProtocol_Type GLAnsGameProtocol::newgame;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_purge;
const GLAnsGameProtocol_Type GLAnsGameProtocol::purgeinfo;
const GLAnsGameProtocol_Type GLAnsGameProtocol::exitntf;
const GLAnsGameProtocol_Type GLAnsGameProtocol::refillmoneyntf;
const GLAnsGameProtocol_Type GLAnsGameProtocol::bonus;
const GLAnsGameProtocol_Type GLAnsGameProtocol::systemmsg;
const GLAnsGameProtocol_Type GLAnsGameProtocol::userjoinerr;
const GLAnsGameProtocol_Type GLAnsGameProtocol::userdisconnect;
const GLAnsGameProtocol_Type GLAnsGameProtocol::soundtypeans;
const GLAnsGameProtocol_Type GLAnsGameProtocol::userjoinans;
const GLAnsGameProtocol_Type GLAnsGameProtocol::startreq;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_abuse;
const GLAnsGameProtocol_Type GLAnsGameProtocol::continue_msg;
const GLAnsGameProtocol_Type GLAnsGameProtocol::ans_observe;
const GLAnsGameProtocol_Type GLAnsGameProtocol::observercnt;
const GLAnsGameProtocol_Type GLAnsGameProtocol::Type_MIN;
const GLAnsGameProtocol_Type GLAnsGameProtocol::Type_MAX;
const int GLAnsGameProtocol::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GLAnsGameProtocol::kTypeFieldNumber;
const int GLAnsGameProtocol::kMAnsGameTestPacketFieldNumber;
const int GLAnsGameProtocol::kMAnsJoinRoomFieldNumber;
const int GLAnsGameProtocol::kMAnsDealCardFieldNumber;
const int GLAnsGameProtocol::kMAnsSendAnteFieldNumber;
const int GLAnsGameProtocol::kMAnsSelectCardFieldNumber;
const int GLAnsGameProtocol::kMAnsOpencardFieldNumber;
const int GLAnsGameProtocol::kMAnsBossFieldNumber;
const int GLAnsGameProtocol::kMAnsDealHiddencardFieldNumber;
const int GLAnsGameProtocol::kMAnsBettingFieldNumber;
const int GLAnsGameProtocol::kMAnsPongFieldNumber;
const int GLAnsGameProtocol::kMAnsEntryFieldNumber;
const int GLAnsGameProtocol::kMAnsDealCardsFieldNumber;
const int GLAnsGameProtocol::kMBettingMsgFieldNumber;
const int GLAnsGameProtocol::kMFinishedFieldNumber;
const int GLAnsGameProtocol::kMJackpotmoneyntfFieldNumber;
const int GLAnsGameProtocol::kMAnsContinueFieldNumber;
const int GLAnsGameProtocol::kMAnsRulesetFieldNumber;
const int GLAnsGameProtocol::kMAnsStartFieldNumber;
const int GLAnsGameProtocol::kMCarddataFieldNumber;
const int GLAnsGameProtocol::kMEntryrejectFieldNumber;
const int GLAnsGameProtocol::kMNostartFieldNumber;
const int GLAnsGameProtocol::kMNewgameFieldNumber;
const int GLAnsGameProtocol::kMAnsPurgeFieldNumber;
const int GLAnsGameProtocol::kMPurgeinfoFieldNumber;
const int GLAnsGameProtocol::kMExitntfFieldNumber;
const int GLAnsGameProtocol::kMRefillmoneyntfFieldNumber;
const int GLAnsGameProtocol::kMBonusFieldNumber;
const int GLAnsGameProtocol::kMSystemmsgFieldNumber;
const int GLAnsGameProtocol::kMUserjoinerrFieldNumber;
const int GLAnsGameProtocol::kMUserdisconnectFieldNumber;
const int GLAnsGameProtocol::kMSoundtypeansFieldNumber;
const int GLAnsGameProtocol::kMUserjoinansFieldNumber;
const int GLAnsGameProtocol::kMStartreqFieldNumber;
const int GLAnsGameProtocol::kMAnsAbuseFieldNumber;
const int GLAnsGameProtocol::kMContinueMsgFieldNumber;
const int GLAnsGameProtocol::kMAnsObserveFieldNumber;
const int GLAnsGameProtocol::kMObservercntFieldNumber;
#endif  // !_MSC_VER

GLAnsGameProtocol::GLAnsGameProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLAnsGameProtocol::InitAsDefaultInstance() {
  m_ans_game_test_packet_ = const_cast< ::s_ans_game_test_packet*>(&::s_ans_game_test_packet::default_instance());
  m_ans_join_room_ = const_cast< ::s_ans_join_room*>(&::s_ans_join_room::default_instance());
  m_ans_deal_card_ = const_cast< ::s_ans_deal_card*>(&::s_ans_deal_card::default_instance());
  m_ans_send_ante_ = const_cast< ::s_ans_send_ante*>(&::s_ans_send_ante::default_instance());
  m_ans_select_card_ = const_cast< ::s_ans_select_card*>(&::s_ans_select_card::default_instance());
  m_ans_opencard_ = const_cast< ::s_ans_opencard*>(&::s_ans_opencard::default_instance());
  m_ans_boss_ = const_cast< ::s_ans_boss*>(&::s_ans_boss::default_instance());
  m_ans_deal_hiddencard_ = const_cast< ::s_ans_deal_hiddencard*>(&::s_ans_deal_hiddencard::default_instance());
  m_ans_betting_ = const_cast< ::s_ans_betting*>(&::s_ans_betting::default_instance());
  m_ans_pong_ = const_cast< ::s_ans_pong*>(&::s_ans_pong::default_instance());
  m_ans_entry_ = const_cast< ::s_ans_entry*>(&::s_ans_entry::default_instance());
  m_ans_deal_cards_ = const_cast< ::s_ans_deal_cards*>(&::s_ans_deal_cards::default_instance());
  m_betting_msg_ = const_cast< ::s_betting_msg*>(&::s_betting_msg::default_instance());
  m_finished_ = const_cast< ::s_finished*>(&::s_finished::default_instance());
  m_jackpotmoneyntf_ = const_cast< ::s_jackpotmoneyntf*>(&::s_jackpotmoneyntf::default_instance());
  m_ans_continue_ = const_cast< ::s_ans_continue*>(&::s_ans_continue::default_instance());
  m_ans_ruleset_ = const_cast< ::s_ans_ruleset*>(&::s_ans_ruleset::default_instance());
  m_ans_start_ = const_cast< ::s_ans_start*>(&::s_ans_start::default_instance());
  m_carddata_ = const_cast< ::s_carddata*>(&::s_carddata::default_instance());
  m_entryreject_ = const_cast< ::s_entryreject*>(&::s_entryreject::default_instance());
  m_nostart_ = const_cast< ::s_nostart*>(&::s_nostart::default_instance());
  m_newgame_ = const_cast< ::s_newgame*>(&::s_newgame::default_instance());
  m_ans_purge_ = const_cast< ::s_ans_purge*>(&::s_ans_purge::default_instance());
  m_purgeinfo_ = const_cast< ::s_purgeinfo*>(&::s_purgeinfo::default_instance());
  m_exitntf_ = const_cast< ::s_exitntf*>(&::s_exitntf::default_instance());
  m_refillmoneyntf_ = const_cast< ::s_refillmoneyntf*>(&::s_refillmoneyntf::default_instance());
  m_bonus_ = const_cast< ::s_bonus*>(&::s_bonus::default_instance());
  m_systemmsg_ = const_cast< ::s_systemmsg*>(&::s_systemmsg::default_instance());
  m_userjoinerr_ = const_cast< ::s_userjoinerr*>(&::s_userjoinerr::default_instance());
  m_userdisconnect_ = const_cast< ::s_userdisconnect*>(&::s_userdisconnect::default_instance());
  m_soundtypeans_ = const_cast< ::s_soundtypeans*>(&::s_soundtypeans::default_instance());
  m_userjoinans_ = const_cast< ::s_userjoinans*>(&::s_userjoinans::default_instance());
  m_startreq_ = const_cast< ::s_startreq*>(&::s_startreq::default_instance());
  m_ans_abuse_ = const_cast< ::s_ans_abuse*>(&::s_ans_abuse::default_instance());
  m_continue_msg_ = const_cast< ::s_continue_msg*>(&::s_continue_msg::default_instance());
  m_ans_observe_ = const_cast< ::s_ans_observe*>(&::s_ans_observe::default_instance());
  m_observercnt_ = const_cast< ::s_observercnt*>(&::s_observercnt::default_instance());
}

GLAnsGameProtocol::GLAnsGameProtocol(const GLAnsGameProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLAnsGameProtocol::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  m_ans_game_test_packet_ = NULL;
  m_ans_join_room_ = NULL;
  m_ans_deal_card_ = NULL;
  m_ans_send_ante_ = NULL;
  m_ans_select_card_ = NULL;
  m_ans_opencard_ = NULL;
  m_ans_boss_ = NULL;
  m_ans_deal_hiddencard_ = NULL;
  m_ans_betting_ = NULL;
  m_ans_pong_ = NULL;
  m_ans_entry_ = NULL;
  m_ans_deal_cards_ = NULL;
  m_betting_msg_ = NULL;
  m_finished_ = NULL;
  m_jackpotmoneyntf_ = NULL;
  m_ans_continue_ = NULL;
  m_ans_ruleset_ = NULL;
  m_ans_start_ = NULL;
  m_carddata_ = NULL;
  m_entryreject_ = NULL;
  m_nostart_ = NULL;
  m_newgame_ = NULL;
  m_ans_purge_ = NULL;
  m_purgeinfo_ = NULL;
  m_exitntf_ = NULL;
  m_refillmoneyntf_ = NULL;
  m_bonus_ = NULL;
  m_systemmsg_ = NULL;
  m_userjoinerr_ = NULL;
  m_userdisconnect_ = NULL;
  m_soundtypeans_ = NULL;
  m_userjoinans_ = NULL;
  m_startreq_ = NULL;
  m_ans_abuse_ = NULL;
  m_continue_msg_ = NULL;
  m_ans_observe_ = NULL;
  m_observercnt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLAnsGameProtocol::~GLAnsGameProtocol() {
  SharedDtor();
}

void GLAnsGameProtocol::SharedDtor() {
  if (this != default_instance_) {
    delete m_ans_game_test_packet_;
    delete m_ans_join_room_;
    delete m_ans_deal_card_;
    delete m_ans_send_ante_;
    delete m_ans_select_card_;
    delete m_ans_opencard_;
    delete m_ans_boss_;
    delete m_ans_deal_hiddencard_;
    delete m_ans_betting_;
    delete m_ans_pong_;
    delete m_ans_entry_;
    delete m_ans_deal_cards_;
    delete m_betting_msg_;
    delete m_finished_;
    delete m_jackpotmoneyntf_;
    delete m_ans_continue_;
    delete m_ans_ruleset_;
    delete m_ans_start_;
    delete m_carddata_;
    delete m_entryreject_;
    delete m_nostart_;
    delete m_newgame_;
    delete m_ans_purge_;
    delete m_purgeinfo_;
    delete m_exitntf_;
    delete m_refillmoneyntf_;
    delete m_bonus_;
    delete m_systemmsg_;
    delete m_userjoinerr_;
    delete m_userdisconnect_;
    delete m_soundtypeans_;
    delete m_userjoinans_;
    delete m_startreq_;
    delete m_ans_abuse_;
    delete m_continue_msg_;
    delete m_ans_observe_;
    delete m_observercnt_;
  }
}

void GLAnsGameProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLAnsGameProtocol& GLAnsGameProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

GLAnsGameProtocol* GLAnsGameProtocol::default_instance_ = NULL;

GLAnsGameProtocol* GLAnsGameProtocol::New() const {
  return new GLAnsGameProtocol;
}

void GLAnsGameProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_m_ans_game_test_packet()) {
      if (m_ans_game_test_packet_ != NULL) m_ans_game_test_packet_->::s_ans_game_test_packet::Clear();
    }
    if (has_m_ans_join_room()) {
      if (m_ans_join_room_ != NULL) m_ans_join_room_->::s_ans_join_room::Clear();
    }
    if (has_m_ans_deal_card()) {
      if (m_ans_deal_card_ != NULL) m_ans_deal_card_->::s_ans_deal_card::Clear();
    }
    if (has_m_ans_send_ante()) {
      if (m_ans_send_ante_ != NULL) m_ans_send_ante_->::s_ans_send_ante::Clear();
    }
    if (has_m_ans_select_card()) {
      if (m_ans_select_card_ != NULL) m_ans_select_card_->::s_ans_select_card::Clear();
    }
    if (has_m_ans_opencard()) {
      if (m_ans_opencard_ != NULL) m_ans_opencard_->::s_ans_opencard::Clear();
    }
    if (has_m_ans_boss()) {
      if (m_ans_boss_ != NULL) m_ans_boss_->::s_ans_boss::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_ans_deal_hiddencard()) {
      if (m_ans_deal_hiddencard_ != NULL) m_ans_deal_hiddencard_->::s_ans_deal_hiddencard::Clear();
    }
    if (has_m_ans_betting()) {
      if (m_ans_betting_ != NULL) m_ans_betting_->::s_ans_betting::Clear();
    }
    if (has_m_ans_pong()) {
      if (m_ans_pong_ != NULL) m_ans_pong_->::s_ans_pong::Clear();
    }
    if (has_m_ans_entry()) {
      if (m_ans_entry_ != NULL) m_ans_entry_->::s_ans_entry::Clear();
    }
    if (has_m_ans_deal_cards()) {
      if (m_ans_deal_cards_ != NULL) m_ans_deal_cards_->::s_ans_deal_cards::Clear();
    }
    if (has_m_betting_msg()) {
      if (m_betting_msg_ != NULL) m_betting_msg_->::s_betting_msg::Clear();
    }
    if (has_m_finished()) {
      if (m_finished_ != NULL) m_finished_->::s_finished::Clear();
    }
    if (has_m_jackpotmoneyntf()) {
      if (m_jackpotmoneyntf_ != NULL) m_jackpotmoneyntf_->::s_jackpotmoneyntf::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_ans_continue()) {
      if (m_ans_continue_ != NULL) m_ans_continue_->::s_ans_continue::Clear();
    }
    if (has_m_ans_ruleset()) {
      if (m_ans_ruleset_ != NULL) m_ans_ruleset_->::s_ans_ruleset::Clear();
    }
    if (has_m_ans_start()) {
      if (m_ans_start_ != NULL) m_ans_start_->::s_ans_start::Clear();
    }
    if (has_m_carddata()) {
      if (m_carddata_ != NULL) m_carddata_->::s_carddata::Clear();
    }
    if (has_m_entryreject()) {
      if (m_entryreject_ != NULL) m_entryreject_->::s_entryreject::Clear();
    }
    if (has_m_nostart()) {
      if (m_nostart_ != NULL) m_nostart_->::s_nostart::Clear();
    }
    if (has_m_newgame()) {
      if (m_newgame_ != NULL) m_newgame_->::s_newgame::Clear();
    }
    if (has_m_ans_purge()) {
      if (m_ans_purge_ != NULL) m_ans_purge_->::s_ans_purge::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_m_purgeinfo()) {
      if (m_purgeinfo_ != NULL) m_purgeinfo_->::s_purgeinfo::Clear();
    }
    if (has_m_exitntf()) {
      if (m_exitntf_ != NULL) m_exitntf_->::s_exitntf::Clear();
    }
    if (has_m_refillmoneyntf()) {
      if (m_refillmoneyntf_ != NULL) m_refillmoneyntf_->::s_refillmoneyntf::Clear();
    }
    if (has_m_bonus()) {
      if (m_bonus_ != NULL) m_bonus_->::s_bonus::Clear();
    }
    if (has_m_systemmsg()) {
      if (m_systemmsg_ != NULL) m_systemmsg_->::s_systemmsg::Clear();
    }
    if (has_m_userjoinerr()) {
      if (m_userjoinerr_ != NULL) m_userjoinerr_->::s_userjoinerr::Clear();
    }
    if (has_m_userdisconnect()) {
      if (m_userdisconnect_ != NULL) m_userdisconnect_->::s_userdisconnect::Clear();
    }
    if (has_m_soundtypeans()) {
      if (m_soundtypeans_ != NULL) m_soundtypeans_->::s_soundtypeans::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_m_userjoinans()) {
      if (m_userjoinans_ != NULL) m_userjoinans_->::s_userjoinans::Clear();
    }
    if (has_m_startreq()) {
      if (m_startreq_ != NULL) m_startreq_->::s_startreq::Clear();
    }
    if (has_m_ans_abuse()) {
      if (m_ans_abuse_ != NULL) m_ans_abuse_->::s_ans_abuse::Clear();
    }
    if (has_m_continue_msg()) {
      if (m_continue_msg_ != NULL) m_continue_msg_->::s_continue_msg::Clear();
    }
    if (has_m_ans_observe()) {
      if (m_ans_observe_ != NULL) m_ans_observe_->::s_ans_observe::Clear();
    }
    if (has_m_observercnt()) {
      if (m_observercnt_ != NULL) m_observercnt_->::s_observercnt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLAnsGameProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GLAnsGameProtocol.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GLAnsGameProtocol_Type_IsValid(value)) {
            set_type(static_cast< ::GLAnsGameProtocol_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ans_game_test_packet;
        break;
      }
      
      // optional .s_ans_game_test_packet m_ans_game_test_packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_game_test_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_game_test_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_ans_join_room;
        break;
      }
      
      // optional .s_ans_join_room m_ans_join_room = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_join_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_join_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_ans_deal_card;
        break;
      }
      
      // optional .s_ans_deal_card m_ans_deal_card = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_deal_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_deal_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_ans_send_ante;
        break;
      }
      
      // optional .s_ans_send_ante m_ans_send_ante = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_send_ante:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_send_ante()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_ans_select_card;
        break;
      }
      
      // optional .s_ans_select_card m_ans_select_card = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_select_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_select_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_ans_opencard;
        break;
      }
      
      // optional .s_ans_opencard m_ans_opencard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_opencard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_opencard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_ans_boss;
        break;
      }
      
      // optional .s_ans_boss m_ans_boss = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_ans_deal_hiddencard;
        break;
      }
      
      // optional .s_ans_deal_hiddencard m_ans_deal_hiddencard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_deal_hiddencard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_deal_hiddencard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_ans_betting;
        break;
      }
      
      // optional .s_ans_betting m_ans_betting = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_betting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_betting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_ans_pong;
        break;
      }
      
      // optional .s_ans_pong m_ans_pong = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_pong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_pong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_ans_entry;
        break;
      }
      
      // optional .s_ans_entry m_ans_entry = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_ans_deal_cards;
        break;
      }
      
      // optional .s_ans_deal_cards m_ans_deal_cards = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_deal_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_deal_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_betting_msg;
        break;
      }
      
      // optional .s_betting_msg m_betting_msg = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_betting_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_betting_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_finished;
        break;
      }
      
      // optional .s_finished m_finished = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_finished:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_finished()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_jackpotmoneyntf;
        break;
      }
      
      // optional .s_jackpotmoneyntf m_jackpotmoneyntf = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_jackpotmoneyntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_jackpotmoneyntf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_ans_continue;
        break;
      }
      
      // optional .s_ans_continue m_ans_continue = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_continue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_continue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_m_ans_ruleset;
        break;
      }
      
      // optional .s_ans_ruleset m_ans_ruleset = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_ruleset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_ruleset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_ans_start;
        break;
      }
      
      // optional .s_ans_start m_ans_start = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_carddata;
        break;
      }
      
      // optional .s_carddata m_carddata = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_carddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_carddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_m_entryreject;
        break;
      }
      
      // optional .s_entryreject m_entryreject = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_entryreject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_entryreject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_m_nostart;
        break;
      }
      
      // optional .s_nostart m_nostart = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_nostart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_nostart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_m_newgame;
        break;
      }
      
      // optional .s_newgame m_newgame = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_newgame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_newgame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_m_ans_purge;
        break;
      }
      
      // optional .s_ans_purge m_ans_purge = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_purge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_purge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_m_purgeinfo;
        break;
      }
      
      // optional .s_purgeinfo m_purgeinfo = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_purgeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_purgeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_m_exitntf;
        break;
      }
      
      // optional .s_exitntf m_exitntf = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_exitntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_exitntf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_m_refillmoneyntf;
        break;
      }
      
      // optional .s_refillmoneyntf m_refillmoneyntf = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_refillmoneyntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_refillmoneyntf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_m_bonus;
        break;
      }
      
      // optional .s_bonus m_bonus = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_m_systemmsg;
        break;
      }
      
      // optional .s_systemmsg m_systemmsg = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_systemmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_systemmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_m_userjoinerr;
        break;
      }
      
      // optional .s_userjoinerr m_userjoinerr = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_userjoinerr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_userjoinerr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_m_userdisconnect;
        break;
      }
      
      // optional .s_userdisconnect m_userdisconnect = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_userdisconnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_userdisconnect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_m_soundtypeans;
        break;
      }
      
      // optional .s_soundtypeans m_soundtypeans = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_soundtypeans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_soundtypeans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_m_userjoinans;
        break;
      }
      
      // optional .s_userjoinans m_userjoinans = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_userjoinans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_userjoinans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_m_startreq;
        break;
      }
      
      // optional .s_startreq m_startreq = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_startreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_startreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_m_ans_abuse;
        break;
      }
      
      // optional .s_ans_abuse m_ans_abuse = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_abuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_abuse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_m_continue_msg;
        break;
      }
      
      // optional .s_continue_msg m_continue_msg = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_continue_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_continue_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_m_ans_observe;
        break;
      }
      
      // optional .s_ans_observe m_ans_observe = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ans_observe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_ans_observe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_m_observercnt;
        break;
      }
      
      // optional .s_observercnt m_observercnt = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_observercnt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_observercnt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLAnsGameProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GLAnsGameProtocol.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .s_ans_game_test_packet m_ans_game_test_packet = 2;
  if (has_m_ans_game_test_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_ans_game_test_packet(), output);
  }
  
  // optional .s_ans_join_room m_ans_join_room = 3;
  if (has_m_ans_join_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_ans_join_room(), output);
  }
  
  // optional .s_ans_deal_card m_ans_deal_card = 4;
  if (has_m_ans_deal_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_ans_deal_card(), output);
  }
  
  // optional .s_ans_send_ante m_ans_send_ante = 5;
  if (has_m_ans_send_ante()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_ans_send_ante(), output);
  }
  
  // optional .s_ans_select_card m_ans_select_card = 6;
  if (has_m_ans_select_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->m_ans_select_card(), output);
  }
  
  // optional .s_ans_opencard m_ans_opencard = 7;
  if (has_m_ans_opencard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->m_ans_opencard(), output);
  }
  
  // optional .s_ans_boss m_ans_boss = 8;
  if (has_m_ans_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->m_ans_boss(), output);
  }
  
  // optional .s_ans_deal_hiddencard m_ans_deal_hiddencard = 9;
  if (has_m_ans_deal_hiddencard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->m_ans_deal_hiddencard(), output);
  }
  
  // optional .s_ans_betting m_ans_betting = 10;
  if (has_m_ans_betting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->m_ans_betting(), output);
  }
  
  // optional .s_ans_pong m_ans_pong = 11;
  if (has_m_ans_pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->m_ans_pong(), output);
  }
  
  // optional .s_ans_entry m_ans_entry = 12;
  if (has_m_ans_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->m_ans_entry(), output);
  }
  
  // optional .s_ans_deal_cards m_ans_deal_cards = 13;
  if (has_m_ans_deal_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->m_ans_deal_cards(), output);
  }
  
  // optional .s_betting_msg m_betting_msg = 14;
  if (has_m_betting_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->m_betting_msg(), output);
  }
  
  // optional .s_finished m_finished = 15;
  if (has_m_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->m_finished(), output);
  }
  
  // optional .s_jackpotmoneyntf m_jackpotmoneyntf = 16;
  if (has_m_jackpotmoneyntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->m_jackpotmoneyntf(), output);
  }
  
  // optional .s_ans_continue m_ans_continue = 17;
  if (has_m_ans_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->m_ans_continue(), output);
  }
  
  // optional .s_ans_ruleset m_ans_ruleset = 18;
  if (has_m_ans_ruleset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->m_ans_ruleset(), output);
  }
  
  // optional .s_ans_start m_ans_start = 19;
  if (has_m_ans_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->m_ans_start(), output);
  }
  
  // optional .s_carddata m_carddata = 20;
  if (has_m_carddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->m_carddata(), output);
  }
  
  // optional .s_entryreject m_entryreject = 21;
  if (has_m_entryreject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->m_entryreject(), output);
  }
  
  // optional .s_nostart m_nostart = 22;
  if (has_m_nostart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->m_nostart(), output);
  }
  
  // optional .s_newgame m_newgame = 23;
  if (has_m_newgame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->m_newgame(), output);
  }
  
  // optional .s_ans_purge m_ans_purge = 24;
  if (has_m_ans_purge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->m_ans_purge(), output);
  }
  
  // optional .s_purgeinfo m_purgeinfo = 25;
  if (has_m_purgeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->m_purgeinfo(), output);
  }
  
  // optional .s_exitntf m_exitntf = 26;
  if (has_m_exitntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->m_exitntf(), output);
  }
  
  // optional .s_refillmoneyntf m_refillmoneyntf = 27;
  if (has_m_refillmoneyntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->m_refillmoneyntf(), output);
  }
  
  // optional .s_bonus m_bonus = 28;
  if (has_m_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->m_bonus(), output);
  }
  
  // optional .s_systemmsg m_systemmsg = 29;
  if (has_m_systemmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->m_systemmsg(), output);
  }
  
  // optional .s_userjoinerr m_userjoinerr = 30;
  if (has_m_userjoinerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->m_userjoinerr(), output);
  }
  
  // optional .s_userdisconnect m_userdisconnect = 31;
  if (has_m_userdisconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->m_userdisconnect(), output);
  }
  
  // optional .s_soundtypeans m_soundtypeans = 32;
  if (has_m_soundtypeans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->m_soundtypeans(), output);
  }
  
  // optional .s_userjoinans m_userjoinans = 33;
  if (has_m_userjoinans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->m_userjoinans(), output);
  }
  
  // optional .s_startreq m_startreq = 34;
  if (has_m_startreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->m_startreq(), output);
  }
  
  // optional .s_ans_abuse m_ans_abuse = 35;
  if (has_m_ans_abuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->m_ans_abuse(), output);
  }
  
  // optional .s_continue_msg m_continue_msg = 36;
  if (has_m_continue_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->m_continue_msg(), output);
  }
  
  // optional .s_ans_observe m_ans_observe = 37;
  if (has_m_ans_observe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->m_ans_observe(), output);
  }
  
  // optional .s_observercnt m_observercnt = 38;
  if (has_m_observercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->m_observercnt(), output);
  }
  
}

int GLAnsGameProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GLAnsGameProtocol.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .s_ans_game_test_packet m_ans_game_test_packet = 2;
    if (has_m_ans_game_test_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_game_test_packet());
    }
    
    // optional .s_ans_join_room m_ans_join_room = 3;
    if (has_m_ans_join_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_join_room());
    }
    
    // optional .s_ans_deal_card m_ans_deal_card = 4;
    if (has_m_ans_deal_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_deal_card());
    }
    
    // optional .s_ans_send_ante m_ans_send_ante = 5;
    if (has_m_ans_send_ante()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_send_ante());
    }
    
    // optional .s_ans_select_card m_ans_select_card = 6;
    if (has_m_ans_select_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_select_card());
    }
    
    // optional .s_ans_opencard m_ans_opencard = 7;
    if (has_m_ans_opencard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_opencard());
    }
    
    // optional .s_ans_boss m_ans_boss = 8;
    if (has_m_ans_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_boss());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .s_ans_deal_hiddencard m_ans_deal_hiddencard = 9;
    if (has_m_ans_deal_hiddencard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_deal_hiddencard());
    }
    
    // optional .s_ans_betting m_ans_betting = 10;
    if (has_m_ans_betting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_betting());
    }
    
    // optional .s_ans_pong m_ans_pong = 11;
    if (has_m_ans_pong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_pong());
    }
    
    // optional .s_ans_entry m_ans_entry = 12;
    if (has_m_ans_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_entry());
    }
    
    // optional .s_ans_deal_cards m_ans_deal_cards = 13;
    if (has_m_ans_deal_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_deal_cards());
    }
    
    // optional .s_betting_msg m_betting_msg = 14;
    if (has_m_betting_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_betting_msg());
    }
    
    // optional .s_finished m_finished = 15;
    if (has_m_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_finished());
    }
    
    // optional .s_jackpotmoneyntf m_jackpotmoneyntf = 16;
    if (has_m_jackpotmoneyntf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_jackpotmoneyntf());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .s_ans_continue m_ans_continue = 17;
    if (has_m_ans_continue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_continue());
    }
    
    // optional .s_ans_ruleset m_ans_ruleset = 18;
    if (has_m_ans_ruleset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_ruleset());
    }
    
    // optional .s_ans_start m_ans_start = 19;
    if (has_m_ans_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_start());
    }
    
    // optional .s_carddata m_carddata = 20;
    if (has_m_carddata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_carddata());
    }
    
    // optional .s_entryreject m_entryreject = 21;
    if (has_m_entryreject()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_entryreject());
    }
    
    // optional .s_nostart m_nostart = 22;
    if (has_m_nostart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_nostart());
    }
    
    // optional .s_newgame m_newgame = 23;
    if (has_m_newgame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_newgame());
    }
    
    // optional .s_ans_purge m_ans_purge = 24;
    if (has_m_ans_purge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_purge());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .s_purgeinfo m_purgeinfo = 25;
    if (has_m_purgeinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_purgeinfo());
    }
    
    // optional .s_exitntf m_exitntf = 26;
    if (has_m_exitntf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_exitntf());
    }
    
    // optional .s_refillmoneyntf m_refillmoneyntf = 27;
    if (has_m_refillmoneyntf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_refillmoneyntf());
    }
    
    // optional .s_bonus m_bonus = 28;
    if (has_m_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_bonus());
    }
    
    // optional .s_systemmsg m_systemmsg = 29;
    if (has_m_systemmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_systemmsg());
    }
    
    // optional .s_userjoinerr m_userjoinerr = 30;
    if (has_m_userjoinerr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_userjoinerr());
    }
    
    // optional .s_userdisconnect m_userdisconnect = 31;
    if (has_m_userdisconnect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_userdisconnect());
    }
    
    // optional .s_soundtypeans m_soundtypeans = 32;
    if (has_m_soundtypeans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_soundtypeans());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .s_userjoinans m_userjoinans = 33;
    if (has_m_userjoinans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_userjoinans());
    }
    
    // optional .s_startreq m_startreq = 34;
    if (has_m_startreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_startreq());
    }
    
    // optional .s_ans_abuse m_ans_abuse = 35;
    if (has_m_ans_abuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_abuse());
    }
    
    // optional .s_continue_msg m_continue_msg = 36;
    if (has_m_continue_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_continue_msg());
    }
    
    // optional .s_ans_observe m_ans_observe = 37;
    if (has_m_ans_observe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_ans_observe());
    }
    
    // optional .s_observercnt m_observercnt = 38;
    if (has_m_observercnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_observercnt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLAnsGameProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLAnsGameProtocol*>(&from));
}

void GLAnsGameProtocol::MergeFrom(const GLAnsGameProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_m_ans_game_test_packet()) {
      mutable_m_ans_game_test_packet()->::s_ans_game_test_packet::MergeFrom(from.m_ans_game_test_packet());
    }
    if (from.has_m_ans_join_room()) {
      mutable_m_ans_join_room()->::s_ans_join_room::MergeFrom(from.m_ans_join_room());
    }
    if (from.has_m_ans_deal_card()) {
      mutable_m_ans_deal_card()->::s_ans_deal_card::MergeFrom(from.m_ans_deal_card());
    }
    if (from.has_m_ans_send_ante()) {
      mutable_m_ans_send_ante()->::s_ans_send_ante::MergeFrom(from.m_ans_send_ante());
    }
    if (from.has_m_ans_select_card()) {
      mutable_m_ans_select_card()->::s_ans_select_card::MergeFrom(from.m_ans_select_card());
    }
    if (from.has_m_ans_opencard()) {
      mutable_m_ans_opencard()->::s_ans_opencard::MergeFrom(from.m_ans_opencard());
    }
    if (from.has_m_ans_boss()) {
      mutable_m_ans_boss()->::s_ans_boss::MergeFrom(from.m_ans_boss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_ans_deal_hiddencard()) {
      mutable_m_ans_deal_hiddencard()->::s_ans_deal_hiddencard::MergeFrom(from.m_ans_deal_hiddencard());
    }
    if (from.has_m_ans_betting()) {
      mutable_m_ans_betting()->::s_ans_betting::MergeFrom(from.m_ans_betting());
    }
    if (from.has_m_ans_pong()) {
      mutable_m_ans_pong()->::s_ans_pong::MergeFrom(from.m_ans_pong());
    }
    if (from.has_m_ans_entry()) {
      mutable_m_ans_entry()->::s_ans_entry::MergeFrom(from.m_ans_entry());
    }
    if (from.has_m_ans_deal_cards()) {
      mutable_m_ans_deal_cards()->::s_ans_deal_cards::MergeFrom(from.m_ans_deal_cards());
    }
    if (from.has_m_betting_msg()) {
      mutable_m_betting_msg()->::s_betting_msg::MergeFrom(from.m_betting_msg());
    }
    if (from.has_m_finished()) {
      mutable_m_finished()->::s_finished::MergeFrom(from.m_finished());
    }
    if (from.has_m_jackpotmoneyntf()) {
      mutable_m_jackpotmoneyntf()->::s_jackpotmoneyntf::MergeFrom(from.m_jackpotmoneyntf());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_ans_continue()) {
      mutable_m_ans_continue()->::s_ans_continue::MergeFrom(from.m_ans_continue());
    }
    if (from.has_m_ans_ruleset()) {
      mutable_m_ans_ruleset()->::s_ans_ruleset::MergeFrom(from.m_ans_ruleset());
    }
    if (from.has_m_ans_start()) {
      mutable_m_ans_start()->::s_ans_start::MergeFrom(from.m_ans_start());
    }
    if (from.has_m_carddata()) {
      mutable_m_carddata()->::s_carddata::MergeFrom(from.m_carddata());
    }
    if (from.has_m_entryreject()) {
      mutable_m_entryreject()->::s_entryreject::MergeFrom(from.m_entryreject());
    }
    if (from.has_m_nostart()) {
      mutable_m_nostart()->::s_nostart::MergeFrom(from.m_nostart());
    }
    if (from.has_m_newgame()) {
      mutable_m_newgame()->::s_newgame::MergeFrom(from.m_newgame());
    }
    if (from.has_m_ans_purge()) {
      mutable_m_ans_purge()->::s_ans_purge::MergeFrom(from.m_ans_purge());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_purgeinfo()) {
      mutable_m_purgeinfo()->::s_purgeinfo::MergeFrom(from.m_purgeinfo());
    }
    if (from.has_m_exitntf()) {
      mutable_m_exitntf()->::s_exitntf::MergeFrom(from.m_exitntf());
    }
    if (from.has_m_refillmoneyntf()) {
      mutable_m_refillmoneyntf()->::s_refillmoneyntf::MergeFrom(from.m_refillmoneyntf());
    }
    if (from.has_m_bonus()) {
      mutable_m_bonus()->::s_bonus::MergeFrom(from.m_bonus());
    }
    if (from.has_m_systemmsg()) {
      mutable_m_systemmsg()->::s_systemmsg::MergeFrom(from.m_systemmsg());
    }
    if (from.has_m_userjoinerr()) {
      mutable_m_userjoinerr()->::s_userjoinerr::MergeFrom(from.m_userjoinerr());
    }
    if (from.has_m_userdisconnect()) {
      mutable_m_userdisconnect()->::s_userdisconnect::MergeFrom(from.m_userdisconnect());
    }
    if (from.has_m_soundtypeans()) {
      mutable_m_soundtypeans()->::s_soundtypeans::MergeFrom(from.m_soundtypeans());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_userjoinans()) {
      mutable_m_userjoinans()->::s_userjoinans::MergeFrom(from.m_userjoinans());
    }
    if (from.has_m_startreq()) {
      mutable_m_startreq()->::s_startreq::MergeFrom(from.m_startreq());
    }
    if (from.has_m_ans_abuse()) {
      mutable_m_ans_abuse()->::s_ans_abuse::MergeFrom(from.m_ans_abuse());
    }
    if (from.has_m_continue_msg()) {
      mutable_m_continue_msg()->::s_continue_msg::MergeFrom(from.m_continue_msg());
    }
    if (from.has_m_ans_observe()) {
      mutable_m_ans_observe()->::s_ans_observe::MergeFrom(from.m_ans_observe());
    }
    if (from.has_m_observercnt()) {
      mutable_m_observercnt()->::s_observercnt::MergeFrom(from.m_observercnt());
    }
  }
}

void GLAnsGameProtocol::CopyFrom(const GLAnsGameProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLAnsGameProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_m_ans_game_test_packet()) {
    if (!this->m_ans_game_test_packet().IsInitialized()) return false;
  }
  if (has_m_ans_join_room()) {
    if (!this->m_ans_join_room().IsInitialized()) return false;
  }
  if (has_m_ans_deal_card()) {
    if (!this->m_ans_deal_card().IsInitialized()) return false;
  }
  if (has_m_ans_send_ante()) {
    if (!this->m_ans_send_ante().IsInitialized()) return false;
  }
  if (has_m_ans_select_card()) {
    if (!this->m_ans_select_card().IsInitialized()) return false;
  }
  if (has_m_ans_opencard()) {
    if (!this->m_ans_opencard().IsInitialized()) return false;
  }
  if (has_m_ans_boss()) {
    if (!this->m_ans_boss().IsInitialized()) return false;
  }
  if (has_m_ans_deal_hiddencard()) {
    if (!this->m_ans_deal_hiddencard().IsInitialized()) return false;
  }
  if (has_m_ans_betting()) {
    if (!this->m_ans_betting().IsInitialized()) return false;
  }
  if (has_m_ans_entry()) {
    if (!this->m_ans_entry().IsInitialized()) return false;
  }
  if (has_m_ans_deal_cards()) {
    if (!this->m_ans_deal_cards().IsInitialized()) return false;
  }
  if (has_m_betting_msg()) {
    if (!this->m_betting_msg().IsInitialized()) return false;
  }
  if (has_m_finished()) {
    if (!this->m_finished().IsInitialized()) return false;
  }
  if (has_m_jackpotmoneyntf()) {
    if (!this->m_jackpotmoneyntf().IsInitialized()) return false;
  }
  if (has_m_ans_continue()) {
    if (!this->m_ans_continue().IsInitialized()) return false;
  }
  if (has_m_ans_ruleset()) {
    if (!this->m_ans_ruleset().IsInitialized()) return false;
  }
  if (has_m_ans_start()) {
    if (!this->m_ans_start().IsInitialized()) return false;
  }
  if (has_m_carddata()) {
    if (!this->m_carddata().IsInitialized()) return false;
  }
  if (has_m_entryreject()) {
    if (!this->m_entryreject().IsInitialized()) return false;
  }
  if (has_m_newgame()) {
    if (!this->m_newgame().IsInitialized()) return false;
  }
  if (has_m_purgeinfo()) {
    if (!this->m_purgeinfo().IsInitialized()) return false;
  }
  if (has_m_exitntf()) {
    if (!this->m_exitntf().IsInitialized()) return false;
  }
  if (has_m_refillmoneyntf()) {
    if (!this->m_refillmoneyntf().IsInitialized()) return false;
  }
  if (has_m_bonus()) {
    if (!this->m_bonus().IsInitialized()) return false;
  }
  if (has_m_systemmsg()) {
    if (!this->m_systemmsg().IsInitialized()) return false;
  }
  if (has_m_userjoinerr()) {
    if (!this->m_userjoinerr().IsInitialized()) return false;
  }
  if (has_m_userdisconnect()) {
    if (!this->m_userdisconnect().IsInitialized()) return false;
  }
  if (has_m_soundtypeans()) {
    if (!this->m_soundtypeans().IsInitialized()) return false;
  }
  if (has_m_userjoinans()) {
    if (!this->m_userjoinans().IsInitialized()) return false;
  }
  if (has_m_continue_msg()) {
    if (!this->m_continue_msg().IsInitialized()) return false;
  }
  if (has_m_ans_observe()) {
    if (!this->m_ans_observe().IsInitialized()) return false;
  }
  if (has_m_observercnt()) {
    if (!this->m_observercnt().IsInitialized()) return false;
  }
  return true;
}

void GLAnsGameProtocol::Swap(GLAnsGameProtocol* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(m_ans_game_test_packet_, other->m_ans_game_test_packet_);
    std::swap(m_ans_join_room_, other->m_ans_join_room_);
    std::swap(m_ans_deal_card_, other->m_ans_deal_card_);
    std::swap(m_ans_send_ante_, other->m_ans_send_ante_);
    std::swap(m_ans_select_card_, other->m_ans_select_card_);
    std::swap(m_ans_opencard_, other->m_ans_opencard_);
    std::swap(m_ans_boss_, other->m_ans_boss_);
    std::swap(m_ans_deal_hiddencard_, other->m_ans_deal_hiddencard_);
    std::swap(m_ans_betting_, other->m_ans_betting_);
    std::swap(m_ans_pong_, other->m_ans_pong_);
    std::swap(m_ans_entry_, other->m_ans_entry_);
    std::swap(m_ans_deal_cards_, other->m_ans_deal_cards_);
    std::swap(m_betting_msg_, other->m_betting_msg_);
    std::swap(m_finished_, other->m_finished_);
    std::swap(m_jackpotmoneyntf_, other->m_jackpotmoneyntf_);
    std::swap(m_ans_continue_, other->m_ans_continue_);
    std::swap(m_ans_ruleset_, other->m_ans_ruleset_);
    std::swap(m_ans_start_, other->m_ans_start_);
    std::swap(m_carddata_, other->m_carddata_);
    std::swap(m_entryreject_, other->m_entryreject_);
    std::swap(m_nostart_, other->m_nostart_);
    std::swap(m_newgame_, other->m_newgame_);
    std::swap(m_ans_purge_, other->m_ans_purge_);
    std::swap(m_purgeinfo_, other->m_purgeinfo_);
    std::swap(m_exitntf_, other->m_exitntf_);
    std::swap(m_refillmoneyntf_, other->m_refillmoneyntf_);
    std::swap(m_bonus_, other->m_bonus_);
    std::swap(m_systemmsg_, other->m_systemmsg_);
    std::swap(m_userjoinerr_, other->m_userjoinerr_);
    std::swap(m_userdisconnect_, other->m_userdisconnect_);
    std::swap(m_soundtypeans_, other->m_soundtypeans_);
    std::swap(m_userjoinans_, other->m_userjoinans_);
    std::swap(m_startreq_, other->m_startreq_);
    std::swap(m_ans_abuse_, other->m_ans_abuse_);
    std::swap(m_continue_msg_, other->m_continue_msg_);
    std::swap(m_ans_observe_, other->m_ans_observe_);
    std::swap(m_observercnt_, other->m_observercnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLAnsGameProtocol::GetTypeName() const {
  return "GLAnsGameProtocol";
}


// ===================================================================

bool PKCards_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PKCards_state PKCards::CARDTYPE_NORMAL;
const PKCards_state PKCards::CARDTYPE_HIDDEN;
const PKCards_state PKCards::CARDTYPE_SAME;
const PKCards_state PKCards::state_MIN;
const PKCards_state PKCards::state_MAX;
const int PKCards::state_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PKCards::kMVtCardsFieldNumber;
const int PKCards::kMLResultIdxFieldNumber;
const int PKCards::kMVUserUSNFieldNumber;
#endif  // !_MSC_VER

PKCards::PKCards()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKCards::InitAsDefaultInstance() {
}

PKCards::PKCards(const PKCards& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKCards::SharedCtor() {
  _cached_size_ = 0;
  m_lresultidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKCards::~PKCards() {
  SharedDtor();
}

void PKCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKCards& PKCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKCards* PKCards::default_instance_ = NULL;

PKCards* PKCards::New() const {
  return new PKCards;
}

void PKCards::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_lresultidx_ = 0;
  }
  m_vtcards_.Clear();
  m_vuserusn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 m_vtCards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_m_vtcards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtcards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_m_vtCards;
        if (input->ExpectTag(16)) goto parse_m_lResultIdx;
        break;
      }
      
      // required int32 m_lResultIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lresultidx_)));
          set_has_m_lresultidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vUserUSN;
        break;
      }
      
      // repeated .PKVecUSN m_vUserUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vUserUSN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vuserusn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vUserUSN;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 m_vtCards = 1;
  for (int i = 0; i < this->m_vtcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->m_vtcards(i), output);
  }
  
  // required int32 m_lResultIdx = 2;
  if (has_m_lresultidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lresultidx(), output);
  }
  
  // repeated .PKVecUSN m_vUserUSN = 3;
  for (int i = 0; i < this->m_vuserusn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_vuserusn(i), output);
  }
  
}

int PKCards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 m_lResultIdx = 2;
    if (has_m_lresultidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lresultidx());
    }
    
  }
  // repeated int32 m_vtCards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtcards(i));
    }
    total_size += 1 * this->m_vtcards_size() + data_size;
  }
  
  // repeated .PKVecUSN m_vUserUSN = 3;
  total_size += 1 * this->m_vuserusn_size();
  for (int i = 0; i < this->m_vuserusn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vuserusn(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKCards::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKCards*>(&from));
}

void PKCards::MergeFrom(const PKCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcards_.MergeFrom(from.m_vtcards_);
  m_vuserusn_.MergeFrom(from.m_vuserusn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_lresultidx()) {
      set_m_lresultidx(from.m_lresultidx());
    }
  }
}

void PKCards::CopyFrom(const PKCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < m_vuserusn_size(); i++) {
    if (!this->m_vuserusn(i).IsInitialized()) return false;
  }
  return true;
}

void PKCards::Swap(PKCards* other) {
  if (other != this) {
    m_vtcards_.Swap(&other->m_vtcards_);
    std::swap(m_lresultidx_, other->m_lresultidx_);
    m_vuserusn_.Swap(&other->m_vuserusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKCards::GetTypeName() const {
  return "PKCards";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMoney::kMLlCMoneyFieldNumber;
const int PKMoney::kMLlCallMoneyFieldNumber;
const int PKMoney::kMLlSideMoneyFieldNumber;
const int PKMoney::kMLlCallHabMoneyFieldNumber;
const int PKMoney::kMLlTakeMoneyFieldNumber;
const int PKMoney::kMLlJackpotMoneyFieldNumber;
const int PKMoney::kMLBetStateFieldNumber;
const int PKMoney::kMLBetReceiveFieldNumber;
const int PKMoney::kMLBetCountFieldNumber;
const int PKMoney::kMLResultIdxFieldNumber;
const int PKMoney::kMSMoneyMsgFieldNumber;
#endif  // !_MSC_VER

PKMoney::PKMoney()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMoney::InitAsDefaultInstance() {
}

PKMoney::PKMoney(const PKMoney& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMoney::SharedCtor() {
  _cached_size_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  m_lbetstate_ = 0;
  m_lbetreceive_ = 0;
  m_lbetcount_ = 0;
  m_lresultidx_ = 0;
  m_smoneymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMoney::~PKMoney() {
  SharedDtor();
}

void PKMoney::SharedDtor() {
  if (m_smoneymsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smoneymsg_;
  }
  if (this != default_instance_) {
  }
}

void PKMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMoney& PKMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMoney* PKMoney::default_instance_ = NULL;

PKMoney* PKMoney::New() const {
  return new PKMoney;
}

void PKMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llsidemoney_ = GOOGLE_LONGLONG(0);
    m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
    m_lltakemoney_ = GOOGLE_LONGLONG(0);
    m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
    m_lbetstate_ = 0;
    m_lbetreceive_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lbetcount_ = 0;
    m_lresultidx_ = 0;
    if (has_m_smoneymsg()) {
      if (m_smoneymsg_ != &::google::protobuf::internal::kEmptyString) {
        m_smoneymsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llCMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llCallMoney;
        break;
      }
      
      // required sint64 m_llCallMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llSideMoney;
        break;
      }
      
      // required sint64 m_llSideMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSideMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsidemoney_)));
          set_has_m_llsidemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCallHabMoney;
        break;
      }
      
      // required sint64 m_llCallHabMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallHabMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallhabmoney_)));
          set_has_m_llcallhabmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llTakeMoney;
        break;
      }
      
      // required sint64 m_llTakeMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llTakeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lltakemoney_)));
          set_has_m_lltakemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llJackpotMoney;
        break;
      }
      
      // required sint64 m_llJackpotMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpotMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpotmoney_)));
          set_has_m_lljackpotmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lBetState;
        break;
      }
      
      // required sint32 m_lBetState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetstate_)));
          set_has_m_lbetstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lBetReceive;
        break;
      }
      
      // required sint32 m_lBetReceive = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetReceive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetreceive_)));
          set_has_m_lbetreceive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lBetCount;
        break;
      }
      
      // required sint32 m_lBetCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetcount_)));
          set_has_m_lbetcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lResultIdx;
        break;
      }
      
      // required sint32 m_lResultIdx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lresultidx_)));
          set_has_m_lresultidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_sMoneyMsg;
        break;
      }
      
      // required string m_sMoneyMsg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMoneyMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smoneymsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llCMoney = 1;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llCallMoney = 2;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llcallmoney(), output);
  }
  
  // required sint64 m_llSideMoney = 3;
  if (has_m_llsidemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llsidemoney(), output);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcallhabmoney(), output);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lltakemoney(), output);
  }
  
  // required sint64 m_llJackpotMoney = 6;
  if (has_m_lljackpotmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_lljackpotmoney(), output);
  }
  
  // required sint32 m_lBetState = 7;
  if (has_m_lbetstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lbetstate(), output);
  }
  
  // required sint32 m_lBetReceive = 8;
  if (has_m_lbetreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->m_lbetreceive(), output);
  }
  
  // required sint32 m_lBetCount = 9;
  if (has_m_lbetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->m_lbetcount(), output);
  }
  
  // required sint32 m_lResultIdx = 10;
  if (has_m_lresultidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->m_lresultidx(), output);
  }
  
  // required string m_sMoneyMsg = 11;
  if (has_m_smoneymsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_smoneymsg(), output);
  }
  
}

int PKMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llCMoney = 1;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llCallMoney = 2;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallmoney());
    }
    
    // required sint64 m_llSideMoney = 3;
    if (has_m_llsidemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsidemoney());
    }
    
    // required sint64 m_llCallHabMoney = 4;
    if (has_m_llcallhabmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallhabmoney());
    }
    
    // required sint64 m_llTakeMoney = 5;
    if (has_m_lltakemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lltakemoney());
    }
    
    // required sint64 m_llJackpotMoney = 6;
    if (has_m_lljackpotmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpotmoney());
    }
    
    // required sint32 m_lBetState = 7;
    if (has_m_lbetstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetstate());
    }
    
    // required sint32 m_lBetReceive = 8;
    if (has_m_lbetreceive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetreceive());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint32 m_lBetCount = 9;
    if (has_m_lbetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetcount());
    }
    
    // required sint32 m_lResultIdx = 10;
    if (has_m_lresultidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lresultidx());
    }
    
    // required string m_sMoneyMsg = 11;
    if (has_m_smoneymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smoneymsg());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMoney::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMoney*>(&from));
}

void PKMoney::MergeFrom(const PKMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llsidemoney()) {
      set_m_llsidemoney(from.m_llsidemoney());
    }
    if (from.has_m_llcallhabmoney()) {
      set_m_llcallhabmoney(from.m_llcallhabmoney());
    }
    if (from.has_m_lltakemoney()) {
      set_m_lltakemoney(from.m_lltakemoney());
    }
    if (from.has_m_lljackpotmoney()) {
      set_m_lljackpotmoney(from.m_lljackpotmoney());
    }
    if (from.has_m_lbetstate()) {
      set_m_lbetstate(from.m_lbetstate());
    }
    if (from.has_m_lbetreceive()) {
      set_m_lbetreceive(from.m_lbetreceive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lbetcount()) {
      set_m_lbetcount(from.m_lbetcount());
    }
    if (from.has_m_lresultidx()) {
      set_m_lresultidx(from.m_lresultidx());
    }
    if (from.has_m_smoneymsg()) {
      set_m_smoneymsg(from.m_smoneymsg());
    }
  }
}

void PKMoney::CopyFrom(const PKMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void PKMoney::Swap(PKMoney* other) {
  if (other != this) {
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llsidemoney_, other->m_llsidemoney_);
    std::swap(m_llcallhabmoney_, other->m_llcallhabmoney_);
    std::swap(m_lltakemoney_, other->m_lltakemoney_);
    std::swap(m_lljackpotmoney_, other->m_lljackpotmoney_);
    std::swap(m_lbetstate_, other->m_lbetstate_);
    std::swap(m_lbetreceive_, other->m_lbetreceive_);
    std::swap(m_lbetcount_, other->m_lbetcount_);
    std::swap(m_lresultidx_, other->m_lresultidx_);
    std::swap(m_smoneymsg_, other->m_smoneymsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMoney::GetTypeName() const {
  return "PKMoney";
}


// ===================================================================

#ifndef _MSC_VER
const int UserMoney::kMLUSNFieldNumber;
const int UserMoney::kMLStateFieldNumber;
const int UserMoney::kMLlMoneyFieldNumber;
const int UserMoney::kMLlCallHabMoneyFieldNumber;
const int UserMoney::kMLlTakeMoneyFieldNumber;
const int UserMoney::kMLlDealMoneyFieldNumber;
const int UserMoney::kMSNickNameFieldNumber;
const int UserMoney::kMSDealerTaxFieldNumber;
#endif  // !_MSC_VER

UserMoney::UserMoney()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserMoney::InitAsDefaultInstance() {
}

UserMoney::UserMoney(const UserMoney& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lstate_ = 0;
  m_llmoney_ = GOOGLE_LONGLONG(0);
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  m_lldealmoney_ = GOOGLE_LONGLONG(0);
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sdealertax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMoney::~UserMoney() {
  SharedDtor();
}

void UserMoney::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_sdealertax_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sdealertax_;
  }
  if (this != default_instance_) {
  }
}

void UserMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserMoney& UserMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

UserMoney* UserMoney::default_instance_ = NULL;

UserMoney* UserMoney::New() const {
  return new UserMoney;
}

void UserMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lstate_ = 0;
    m_llmoney_ = GOOGLE_LONGLONG(0);
    m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
    m_lltakemoney_ = GOOGLE_LONGLONG(0);
    m_lldealmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_sdealertax()) {
      if (m_sdealertax_ != &::google::protobuf::internal::kEmptyString) {
        m_sdealertax_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llMoney;
        break;
      }
      
      // required sint64 m_llMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llmoney_)));
          set_has_m_llmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCallHabMoney;
        break;
      }
      
      // required sint64 m_llCallHabMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallHabMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallhabmoney_)));
          set_has_m_llcallhabmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llTakeMoney;
        break;
      }
      
      // required sint64 m_llTakeMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llTakeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lltakemoney_)));
          set_has_m_lltakemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llDealMoney;
        break;
      }
      
      // required sint64 m_llDealMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llDealMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lldealmoney_)));
          set_has_m_lldealmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_sDealerTax;
        break;
      }
      
      // required string m_sDealerTax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sDealerTax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sdealertax()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lstate(), output);
  }
  
  // required sint64 m_llMoney = 3;
  if (has_m_llmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llmoney(), output);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcallhabmoney(), output);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lltakemoney(), output);
  }
  
  // required sint64 m_llDealMoney = 6;
  if (has_m_lldealmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_lldealmoney(), output);
  }
  
  // required string m_sNickName = 7;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_snickname(), output);
  }
  
  // required string m_sDealerTax = 8;
  if (has_m_sdealertax()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_sdealertax(), output);
  }
  
}

int UserMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lState = 2;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint64 m_llMoney = 3;
    if (has_m_llmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llmoney());
    }
    
    // required sint64 m_llCallHabMoney = 4;
    if (has_m_llcallhabmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallhabmoney());
    }
    
    // required sint64 m_llTakeMoney = 5;
    if (has_m_lltakemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lltakemoney());
    }
    
    // required sint64 m_llDealMoney = 6;
    if (has_m_lldealmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lldealmoney());
    }
    
    // required string m_sNickName = 7;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sDealerTax = 8;
    if (has_m_sdealertax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sdealertax());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMoney::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserMoney*>(&from));
}

void UserMoney::MergeFrom(const UserMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_llmoney()) {
      set_m_llmoney(from.m_llmoney());
    }
    if (from.has_m_llcallhabmoney()) {
      set_m_llcallhabmoney(from.m_llcallhabmoney());
    }
    if (from.has_m_lltakemoney()) {
      set_m_lltakemoney(from.m_lltakemoney());
    }
    if (from.has_m_lldealmoney()) {
      set_m_lldealmoney(from.m_lldealmoney());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_sdealertax()) {
      set_m_sdealertax(from.m_sdealertax());
    }
  }
}

void UserMoney::CopyFrom(const UserMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void UserMoney::Swap(UserMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_llmoney_, other->m_llmoney_);
    std::swap(m_llcallhabmoney_, other->m_llcallhabmoney_);
    std::swap(m_lltakemoney_, other->m_lltakemoney_);
    std::swap(m_lldealmoney_, other->m_lldealmoney_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_sdealertax_, other->m_sdealertax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserMoney::GetTypeName() const {
  return "UserMoney";
}


// ===================================================================

#ifndef _MSC_VER
const int PKCWinLose::kMLWinFieldNumber;
const int PKCWinLose::kMLLoseFieldNumber;
const int PKCWinLose::kMLContinueFieldNumber;
#endif  // !_MSC_VER

PKCWinLose::PKCWinLose()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKCWinLose::InitAsDefaultInstance() {
}

PKCWinLose::PKCWinLose(const PKCWinLose& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKCWinLose::SharedCtor() {
  _cached_size_ = 0;
  m_lwin_ = 0;
  m_llose_ = 0;
  m_lcontinue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKCWinLose::~PKCWinLose() {
  SharedDtor();
}

void PKCWinLose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKCWinLose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKCWinLose& PKCWinLose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKCWinLose* PKCWinLose::default_instance_ = NULL;

PKCWinLose* PKCWinLose::New() const {
  return new PKCWinLose;
}

void PKCWinLose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lwin_ = 0;
    m_llose_ = 0;
    m_lcontinue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKCWinLose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lWin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lwin_)));
          set_has_m_lwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lLose;
        break;
      }
      
      // required sint32 m_lLose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llose_)));
          set_has_m_llose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lContinue;
        break;
      }
      
      // required sint32 m_lContinue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lContinue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcontinue_)));
          set_has_m_lcontinue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKCWinLose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lWin = 1;
  if (has_m_lwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lwin(), output);
  }
  
  // required sint32 m_lLose = 2;
  if (has_m_llose()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_llose(), output);
  }
  
  // required sint32 m_lContinue = 3;
  if (has_m_lcontinue()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcontinue(), output);
  }
  
}

int PKCWinLose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lWin = 1;
    if (has_m_lwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lwin());
    }
    
    // required sint32 m_lLose = 2;
    if (has_m_llose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llose());
    }
    
    // required sint32 m_lContinue = 3;
    if (has_m_lcontinue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcontinue());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKCWinLose::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKCWinLose*>(&from));
}

void PKCWinLose::MergeFrom(const PKCWinLose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lwin()) {
      set_m_lwin(from.m_lwin());
    }
    if (from.has_m_llose()) {
      set_m_llose(from.m_llose());
    }
    if (from.has_m_lcontinue()) {
      set_m_lcontinue(from.m_lcontinue());
    }
  }
}

void PKCWinLose::CopyFrom(const PKCWinLose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKCWinLose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PKCWinLose::Swap(PKCWinLose* other) {
  if (other != this) {
    std::swap(m_lwin_, other->m_lwin_);
    std::swap(m_llose_, other->m_llose_);
    std::swap(m_lcontinue_, other->m_lcontinue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKCWinLose::GetTypeName() const {
  return "PKCWinLose";
}


// ===================================================================

#ifndef _MSC_VER
const int PKUserInfo::kMLUSNFieldNumber;
const int PKUserInfo::kMNIndexFieldNumber;
const int PKUserInfo::kMSNickNameFieldNumber;
const int PKUserInfo::kMSIDFieldNumber;
const int PKUserInfo::kMLCLevelFieldNumber;
const int PKUserInfo::kMLSoundTypeFieldNumber;
const int PKUserInfo::kMSAvtFieldNumber;
const int PKUserInfo::kMLUserStateFieldNumber;
const int PKUserInfo::kMCWinLoseFieldNumber;
const int PKUserInfo::kMCWinLoseTodayFieldNumber;
const int PKUserInfo::kMCWinLoseRoomFieldNumber;
const int PKUserInfo::kMLlCMoneyFieldNumber;
const int PKUserInfo::kMLlFMoneyFieldNumber;
const int PKUserInfo::kMLExitFieldNumber;
const int PKUserInfo::kMNItemTypeFieldNumber;
const int PKUserInfo::kMLAckFieldNumber;
const int PKUserInfo::kMLJackpotFieldNumber;
const int PKUserInfo::kMLDieCardsDealtFieldNumber;
#endif  // !_MSC_VER

PKUserInfo::PKUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKUserInfo::InitAsDefaultInstance() {
  m_cwinlose_ = const_cast< ::PKCWinLose*>(&::PKCWinLose::default_instance());
  m_cwinlose_today_ = const_cast< ::PKCWinLose*>(&::PKCWinLose::default_instance());
  m_cwinlose_room_ = const_cast< ::PKCWinLose*>(&::PKCWinLose::default_instance());
}

PKUserInfo::PKUserInfo(const PKUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKUserInfo::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsoundtype_ = 0;
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_luserstate_ = 0;
  m_cwinlose_ = NULL;
  m_cwinlose_today_ = NULL;
  m_cwinlose_room_ = NULL;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llfmoney_ = GOOGLE_LONGLONG(0);
  m_lexit_ = 0;
  m_nitemtype_ = 0;
  m_lack_ = 0;
  m_ljackpot_ = 0;
  m_ldiecardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKUserInfo::~PKUserInfo() {
  SharedDtor();
}

void PKUserInfo::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_sid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sid_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
    delete m_cwinlose_;
    delete m_cwinlose_today_;
    delete m_cwinlose_room_;
  }
}

void PKUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKUserInfo& PKUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKUserInfo* PKUserInfo::default_instance_ = NULL;

PKUserInfo* PKUserInfo::New() const {
  return new PKUserInfo;
}

void PKUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_sid()) {
      if (m_sid_ != &::google::protobuf::internal::kEmptyString) {
        m_sid_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsoundtype_ = 0;
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_luserstate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_cwinlose()) {
      if (m_cwinlose_ != NULL) m_cwinlose_->::PKCWinLose::Clear();
    }
    if (has_m_cwinlose_today()) {
      if (m_cwinlose_today_ != NULL) m_cwinlose_today_->::PKCWinLose::Clear();
    }
    if (has_m_cwinlose_room()) {
      if (m_cwinlose_room_ != NULL) m_cwinlose_room_->::PKCWinLose::Clear();
    }
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llfmoney_ = GOOGLE_LONGLONG(0);
    m_lexit_ = 0;
    m_nitemtype_ = 0;
    m_lack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_ljackpot_ = 0;
    m_ldiecardsdealt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required sint32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sID;
        break;
      }
      
      // required string m_sID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lCLevel;
        break;
      }
      
      // required sint32 m_lCLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_sAvt;
        break;
      }
      
      // required string m_sAvt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lUserState;
        break;
      }
      
      // required sint32 m_lUserState = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lUserState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_luserstate_)));
          set_has_m_luserstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_cWinLose;
        break;
      }
      
      // required .PKCWinLose m_cWinLose = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_cWinLose_Today;
        break;
      }
      
      // required .PKCWinLose m_cWinLose_Today = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose_Today:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose_today()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_cWinLose_Room;
        break;
      }
      
      // required .PKCWinLose m_cWinLose_Room = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose_Room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_llFMoney;
        break;
      }
      
      // required sint64 m_llFMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llFMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llfmoney_)));
          set_has_m_llfmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_lExit;
        break;
      }
      
      // required sint32 m_lExit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_nItemType;
        break;
      }
      
      // required sint32 m_nItemType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nItemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_nitemtype_)));
          set_has_m_nitemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_lAck;
        break;
      }
      
      // required sint32 m_lAck = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lack_)));
          set_has_m_lack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_lJackpot;
        break;
      }
      
      // required sint32 m_lJackpot = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJackpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ljackpot_)));
          set_has_m_ljackpot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_lDieCardsDealt;
        break;
      }
      
      // required sint32 m_lDieCardsDealt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lDieCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ldiecardsdealt_)));
          set_has_m_ldiecardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_nindex(), output);
  }
  
  // required string m_sNickName = 3;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_snickname(), output);
  }
  
  // required string m_sID = 4;
  if (has_m_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_sid(), output);
  }
  
  // required sint32 m_lCLevel = 5;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lclevel(), output);
  }
  
  // required sint32 m_lSoundType = 6;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lsoundtype(), output);
  }
  
  // required string m_sAvt = 7;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_savt(), output);
  }
  
  // required sint32 m_lUserState = 8;
  if (has_m_luserstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->m_luserstate(), output);
  }
  
  // required .PKCWinLose m_cWinLose = 9;
  if (has_m_cwinlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->m_cwinlose(), output);
  }
  
  // required .PKCWinLose m_cWinLose_Today = 10;
  if (has_m_cwinlose_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->m_cwinlose_today(), output);
  }
  
  // required .PKCWinLose m_cWinLose_Room = 11;
  if (has_m_cwinlose_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->m_cwinlose_room(), output);
  }
  
  // required sint64 m_llCMoney = 12;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(12, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llFMoney = 13;
  if (has_m_llfmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->m_llfmoney(), output);
  }
  
  // required sint32 m_lExit = 14;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->m_lexit(), output);
  }
  
  // required sint32 m_nItemType = 15;
  if (has_m_nitemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->m_nitemtype(), output);
  }
  
  // required sint32 m_lAck = 16;
  if (has_m_lack()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->m_lack(), output);
  }
  
  // required sint32 m_lJackpot = 17;
  if (has_m_ljackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->m_ljackpot(), output);
  }
  
  // required sint32 m_lDieCardsDealt = 18;
  if (has_m_ldiecardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->m_ldiecardsdealt(), output);
  }
  
}

int PKUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_nindex());
    }
    
    // required string m_sNickName = 3;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sID = 4;
    if (has_m_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sid());
    }
    
    // required sint32 m_lCLevel = 5;
    if (has_m_lclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lclevel());
    }
    
    // required sint32 m_lSoundType = 6;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
    // required string m_sAvt = 7;
    if (has_m_savt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required sint32 m_lUserState = 8;
    if (has_m_luserstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_luserstate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .PKCWinLose m_cWinLose = 9;
    if (has_m_cwinlose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose());
    }
    
    // required .PKCWinLose m_cWinLose_Today = 10;
    if (has_m_cwinlose_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose_today());
    }
    
    // required .PKCWinLose m_cWinLose_Room = 11;
    if (has_m_cwinlose_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose_room());
    }
    
    // required sint64 m_llCMoney = 12;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llFMoney = 13;
    if (has_m_llfmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llfmoney());
    }
    
    // required sint32 m_lExit = 14;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_nItemType = 15;
    if (has_m_nitemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_nitemtype());
    }
    
    // required sint32 m_lAck = 16;
    if (has_m_lack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lack());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required sint32 m_lJackpot = 17;
    if (has_m_ljackpot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ljackpot());
    }
    
    // required sint32 m_lDieCardsDealt = 18;
    if (has_m_ldiecardsdealt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ldiecardsdealt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKUserInfo*>(&from));
}

void PKUserInfo::MergeFrom(const PKUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_sid()) {
      set_m_sid(from.m_sid());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_luserstate()) {
      set_m_luserstate(from.m_luserstate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_cwinlose()) {
      mutable_m_cwinlose()->::PKCWinLose::MergeFrom(from.m_cwinlose());
    }
    if (from.has_m_cwinlose_today()) {
      mutable_m_cwinlose_today()->::PKCWinLose::MergeFrom(from.m_cwinlose_today());
    }
    if (from.has_m_cwinlose_room()) {
      mutable_m_cwinlose_room()->::PKCWinLose::MergeFrom(from.m_cwinlose_room());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llfmoney()) {
      set_m_llfmoney(from.m_llfmoney());
    }
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_nitemtype()) {
      set_m_nitemtype(from.m_nitemtype());
    }
    if (from.has_m_lack()) {
      set_m_lack(from.m_lack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_ljackpot()) {
      set_m_ljackpot(from.m_ljackpot());
    }
    if (from.has_m_ldiecardsdealt()) {
      set_m_ldiecardsdealt(from.m_ldiecardsdealt());
    }
  }
}

void PKUserInfo::CopyFrom(const PKUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  
  if (has_m_cwinlose()) {
    if (!this->m_cwinlose().IsInitialized()) return false;
  }
  if (has_m_cwinlose_today()) {
    if (!this->m_cwinlose_today().IsInitialized()) return false;
  }
  if (has_m_cwinlose_room()) {
    if (!this->m_cwinlose_room().IsInitialized()) return false;
  }
  return true;
}

void PKUserInfo::Swap(PKUserInfo* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_sid_, other->m_sid_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_luserstate_, other->m_luserstate_);
    std::swap(m_cwinlose_, other->m_cwinlose_);
    std::swap(m_cwinlose_today_, other->m_cwinlose_today_);
    std::swap(m_cwinlose_room_, other->m_cwinlose_room_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llfmoney_, other->m_llfmoney_);
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_nitemtype_, other->m_nitemtype_);
    std::swap(m_lack_, other->m_lack_);
    std::swap(m_ljackpot_, other->m_ljackpot_);
    std::swap(m_ldiecardsdealt_, other->m_ldiecardsdealt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKUserInfo::GetTypeName() const {
  return "PKUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PKOneCard::kMNIndexFieldNumber;
const int PKOneCard::kMLCardIndexFieldNumber;
#endif  // !_MSC_VER

PKOneCard::PKOneCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKOneCard::InitAsDefaultInstance() {
}

PKOneCard::PKOneCard(const PKOneCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKOneCard::SharedCtor() {
  _cached_size_ = 0;
  m_nindex_ = 0;
  m_lcardindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKOneCard::~PKOneCard() {
  SharedDtor();
}

void PKOneCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKOneCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKOneCard& PKOneCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKOneCard* PKOneCard::default_instance_ = NULL;

PKOneCard* PKOneCard::New() const {
  return new PKOneCard;
}

void PKOneCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nindex_ = 0;
    m_lcardindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKOneCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardIndex;
        break;
      }
      
      // required int32 m_lCardIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lcardindex_)));
          set_has_m_lcardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKOneCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nindex(), output);
  }
  
  // required int32 m_lCardIndex = 2;
  if (has_m_lcardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lcardindex(), output);
  }
  
}

int PKOneCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nIndex = 1;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required int32 m_lCardIndex = 2;
    if (has_m_lcardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lcardindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKOneCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKOneCard*>(&from));
}

void PKOneCard::MergeFrom(const PKOneCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lcardindex()) {
      set_m_lcardindex(from.m_lcardindex());
    }
  }
}

void PKOneCard::CopyFrom(const PKOneCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKOneCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKOneCard::Swap(PKOneCard* other) {
  if (other != this) {
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lcardindex_, other->m_lcardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKOneCard::GetTypeName() const {
  return "PKOneCard";
}


// ===================================================================

#ifndef _MSC_VER
const int PKVecMoney::kVecMoneyFieldNumber;
#endif  // !_MSC_VER

PKVecMoney::PKVecMoney()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKVecMoney::InitAsDefaultInstance() {
}

PKVecMoney::PKVecMoney(const PKVecMoney& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKVecMoney::SharedCtor() {
  _cached_size_ = 0;
  vecmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKVecMoney::~PKVecMoney() {
  SharedDtor();
}

void PKVecMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKVecMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKVecMoney& PKVecMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKVecMoney* PKVecMoney::default_instance_ = NULL;

PKVecMoney* PKVecMoney::New() const {
  return new PKVecMoney;
}

void PKVecMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vecmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKVecMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 VecMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &vecmoney_)));
          set_has_vecmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKVecMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 VecMoney = 1;
  if (has_vecmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->vecmoney(), output);
  }
  
}

int PKVecMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 VecMoney = 1;
    if (has_vecmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->vecmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKVecMoney::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKVecMoney*>(&from));
}

void PKVecMoney::MergeFrom(const PKVecMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vecmoney()) {
      set_vecmoney(from.vecmoney());
    }
  }
}

void PKVecMoney::CopyFrom(const PKVecMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKVecMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKVecMoney::Swap(PKVecMoney* other) {
  if (other != this) {
    std::swap(vecmoney_, other->vecmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKVecMoney::GetTypeName() const {
  return "PKVecMoney";
}


// ===================================================================

#ifndef _MSC_VER
const int PKWinLoseInfo::kMLlCMoneyFieldNumber;
const int PKWinLoseInfo::kMLWinFieldNumber;
const int PKWinLoseInfo::kMLLoseFieldNumber;
const int PKWinLoseInfo::kMLReservedFieldNumber;
#endif  // !_MSC_VER

PKWinLoseInfo::PKWinLoseInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKWinLoseInfo::InitAsDefaultInstance() {
}

PKWinLoseInfo::PKWinLoseInfo(const PKWinLoseInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKWinLoseInfo::SharedCtor() {
  _cached_size_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_lwin_ = 0;
  m_llose_ = 0;
  m_lreserved_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKWinLoseInfo::~PKWinLoseInfo() {
  SharedDtor();
}

void PKWinLoseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKWinLoseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKWinLoseInfo& PKWinLoseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKWinLoseInfo* PKWinLoseInfo::default_instance_ = NULL;

PKWinLoseInfo* PKWinLoseInfo::New() const {
  return new PKWinLoseInfo;
}

void PKWinLoseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_lwin_ = 0;
    m_llose_ = 0;
    m_lreserved_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKWinLoseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llCMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lWin;
        break;
      }
      
      // required sint32 m_lWin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lwin_)));
          set_has_m_lwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lLose;
        break;
      }
      
      // required sint32 m_lLose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llose_)));
          set_has_m_llose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lReserved;
        break;
      }
      
      // required sint32 m_lReserved = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lReserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lreserved_)));
          set_has_m_lreserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKWinLoseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llCMoney = 1;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llcmoney(), output);
  }
  
  // required sint32 m_lWin = 2;
  if (has_m_lwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lwin(), output);
  }
  
  // required sint32 m_lLose = 3;
  if (has_m_llose()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_llose(), output);
  }
  
  // required sint32 m_lReserved = 4;
  if (has_m_lreserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lreserved(), output);
  }
  
}

int PKWinLoseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llCMoney = 1;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint32 m_lWin = 2;
    if (has_m_lwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lwin());
    }
    
    // required sint32 m_lLose = 3;
    if (has_m_llose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llose());
    }
    
    // required sint32 m_lReserved = 4;
    if (has_m_lreserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lreserved());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKWinLoseInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKWinLoseInfo*>(&from));
}

void PKWinLoseInfo::MergeFrom(const PKWinLoseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_lwin()) {
      set_m_lwin(from.m_lwin());
    }
    if (from.has_m_llose()) {
      set_m_llose(from.m_llose());
    }
    if (from.has_m_lreserved()) {
      set_m_lreserved(from.m_lreserved());
    }
  }
}

void PKWinLoseInfo::CopyFrom(const PKWinLoseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKWinLoseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PKWinLoseInfo::Swap(PKWinLoseInfo* other) {
  if (other != this) {
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_lwin_, other->m_lwin_);
    std::swap(m_llose_, other->m_llose_);
    std::swap(m_lreserved_, other->m_lreserved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKWinLoseInfo::GetTypeName() const {
  return "PKWinLoseInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PKVecUSN::kUSNFieldNumber;
#endif  // !_MSC_VER

PKVecUSN::PKVecUSN()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKVecUSN::InitAsDefaultInstance() {
}

PKVecUSN::PKVecUSN(const PKVecUSN& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKVecUSN::SharedCtor() {
  _cached_size_ = 0;
  usn_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKVecUSN::~PKVecUSN() {
  SharedDtor();
}

void PKVecUSN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKVecUSN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKVecUSN& PKVecUSN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKVecUSN* PKVecUSN::default_instance_ = NULL;

PKVecUSN* PKVecUSN::New() const {
  return new PKVecUSN;
}

void PKVecUSN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usn_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKVecUSN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 USN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usn_)));
          set_has_usn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKVecUSN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 USN = 1;
  if (has_usn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->usn(), output);
  }
  
}

int PKVecUSN::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 USN = 1;
    if (has_usn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKVecUSN::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKVecUSN*>(&from));
}

void PKVecUSN::MergeFrom(const PKVecUSN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usn()) {
      set_usn(from.usn());
    }
  }
}

void PKVecUSN::CopyFrom(const PKVecUSN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKVecUSN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKVecUSN::Swap(PKVecUSN* other) {
  if (other != this) {
    std::swap(usn_, other->usn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKVecUSN::GetTypeName() const {
  return "PKVecUSN";
}


// ===================================================================

#ifndef _MSC_VER
const int PKWAITINGUSERDATA::kMLUSNFieldNumber;
const int PKWAITINGUSERDATA::kMLTicketNumFieldNumber;
const int PKWAITINGUSERDATA::kMLBackColorFieldNumber;
const int PKWAITINGUSERDATA::kMBCallWebFieldNumber;
#endif  // !_MSC_VER

PKWAITINGUSERDATA::PKWAITINGUSERDATA()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKWAITINGUSERDATA::InitAsDefaultInstance() {
}

PKWAITINGUSERDATA::PKWAITINGUSERDATA(const PKWAITINGUSERDATA& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKWAITINGUSERDATA::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lticketnum_ = 0;
  m_lbackcolor_ = 0;
  m_bcallweb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKWAITINGUSERDATA::~PKWAITINGUSERDATA() {
  SharedDtor();
}

void PKWAITINGUSERDATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKWAITINGUSERDATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKWAITINGUSERDATA& PKWAITINGUSERDATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKWAITINGUSERDATA* PKWAITINGUSERDATA::default_instance_ = NULL;

PKWAITINGUSERDATA* PKWAITINGUSERDATA::New() const {
  return new PKWAITINGUSERDATA;
}

void PKWAITINGUSERDATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lticketnum_ = 0;
    m_lbackcolor_ = 0;
    m_bcallweb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKWAITINGUSERDATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lTicketNum;
        break;
      }
      
      // required int32 m_lTicketNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lTicketNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lticketnum_)));
          set_has_m_lticketnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lBackColor;
        break;
      }
      
      // required int32 m_lBackColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBackColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbackcolor_)));
          set_has_m_lbackcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bCallWeb;
        break;
      }
      
      // required int32 m_bCallWeb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallWeb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcallweb_)));
          set_has_m_bcallweb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKWAITINGUSERDATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_lTicketNum = 2;
  if (has_m_lticketnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lticketnum(), output);
  }
  
  // required int32 m_lBackColor = 3;
  if (has_m_lbackcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lbackcolor(), output);
  }
  
  // required int32 m_bCallWeb = 4;
  if (has_m_bcallweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bcallweb(), output);
  }
  
}

int PKWAITINGUSERDATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_lTicketNum = 2;
    if (has_m_lticketnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lticketnum());
    }
    
    // required int32 m_lBackColor = 3;
    if (has_m_lbackcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbackcolor());
    }
    
    // required int32 m_bCallWeb = 4;
    if (has_m_bcallweb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcallweb());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKWAITINGUSERDATA::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKWAITINGUSERDATA*>(&from));
}

void PKWAITINGUSERDATA::MergeFrom(const PKWAITINGUSERDATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lticketnum()) {
      set_m_lticketnum(from.m_lticketnum());
    }
    if (from.has_m_lbackcolor()) {
      set_m_lbackcolor(from.m_lbackcolor());
    }
    if (from.has_m_bcallweb()) {
      set_m_bcallweb(from.m_bcallweb());
    }
  }
}

void PKWAITINGUSERDATA::CopyFrom(const PKWAITINGUSERDATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKWAITINGUSERDATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PKWAITINGUSERDATA::Swap(PKWAITINGUSERDATA* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lticketnum_, other->m_lticketnum_);
    std::swap(m_lbackcolor_, other->m_lbackcolor_);
    std::swap(m_bcallweb_, other->m_bcallweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKWAITINGUSERDATA::GetTypeName() const {
  return "PKWAITINGUSERDATA";
}


// ===================================================================

#ifndef _MSC_VER
const int CRefill::kMLlTimeFieldNumber;
const int CRefill::kMNCntFieldNumber;
const int CRefill::kMLPLevelFieldNumber;
#endif  // !_MSC_VER

CRefill::CRefill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CRefill::InitAsDefaultInstance() {
}

CRefill::CRefill(const CRefill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CRefill::SharedCtor() {
  _cached_size_ = 0;
  m_lltime_ = GOOGLE_LONGLONG(0);
  m_ncnt_ = 0;
  m_lplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRefill::~CRefill() {
  SharedDtor();
}

void CRefill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CRefill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CRefill& CRefill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

CRefill* CRefill::default_instance_ = NULL;

CRefill* CRefill::New() const {
  return new CRefill;
}

void CRefill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lltime_ = GOOGLE_LONGLONG(0);
    m_ncnt_ = 0;
    m_lplevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CRefill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_llTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_lltime_)));
          set_has_m_lltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nCnt;
        break;
      }
      
      // required int32 m_nCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncnt_)));
          set_has_m_ncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lPLevel;
        break;
      }
      
      // required int32 m_lPLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lplevel_)));
          set_has_m_lplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRefill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_llTime = 1;
  if (has_m_lltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_lltime(), output);
  }
  
  // required int32 m_nCnt = 2;
  if (has_m_ncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ncnt(), output);
  }
  
  // required int32 m_lPLevel = 3;
  if (has_m_lplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lplevel(), output);
  }
  
}

int CRefill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_llTime = 1;
    if (has_m_lltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_lltime());
    }
    
    // required int32 m_nCnt = 2;
    if (has_m_ncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncnt());
    }
    
    // required int32 m_lPLevel = 3;
    if (has_m_lplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lplevel());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRefill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CRefill*>(&from));
}

void CRefill::MergeFrom(const CRefill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lltime()) {
      set_m_lltime(from.m_lltime());
    }
    if (from.has_m_ncnt()) {
      set_m_ncnt(from.m_ncnt());
    }
    if (from.has_m_lplevel()) {
      set_m_lplevel(from.m_lplevel());
    }
  }
}

void CRefill::CopyFrom(const CRefill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRefill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CRefill::Swap(CRefill* other) {
  if (other != this) {
    std::swap(m_lltime_, other->m_lltime_);
    std::swap(m_ncnt_, other->m_ncnt_);
    std::swap(m_lplevel_, other->m_lplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CRefill::GetTypeName() const {
  return "CRefill";
}


// ===================================================================

#ifndef _MSC_VER
const int PKItemList::kMLstItemFieldNumber;
#endif  // !_MSC_VER

PKItemList::PKItemList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKItemList::InitAsDefaultInstance() {
}

PKItemList::PKItemList(const PKItemList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKItemList::~PKItemList() {
  SharedDtor();
}

void PKItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKItemList& PKItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKItemList* PKItemList::default_instance_ = NULL;

PKItemList* PKItemList::New() const {
  return new PKItemList;
}

void PKItemList::Clear() {
  m_lstitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKItem m_lstItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_lstItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_lstitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_lstItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKItem m_lstItem = 1;
  for (int i = 0; i < this->m_lstitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_lstitem(i), output);
  }
  
}

int PKItemList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKItem m_lstItem = 1;
  total_size += 1 * this->m_lstitem_size();
  for (int i = 0; i < this->m_lstitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_lstitem(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKItemList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKItemList*>(&from));
}

void PKItemList::MergeFrom(const PKItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_lstitem_.MergeFrom(from.m_lstitem_);
}

void PKItemList::CopyFrom(const PKItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKItemList::IsInitialized() const {
  
  for (int i = 0; i < m_lstitem_size(); i++) {
    if (!this->m_lstitem(i).IsInitialized()) return false;
  }
  return true;
}

void PKItemList::Swap(PKItemList* other) {
  if (other != this) {
    m_lstitem_.Swap(&other->m_lstitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKItemList::GetTypeName() const {
  return "PKItemList";
}


// ===================================================================

#ifndef _MSC_VER
const int PKItem::kMLFucnsrlFieldNumber;
const int PKItem::kMLlStartTimeFieldNumber;
const int PKItem::kMLlEndTimeFieldNumber;
const int PKItem::kMLlCountFieldNumber;
#endif  // !_MSC_VER

PKItem::PKItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKItem::InitAsDefaultInstance() {
}

PKItem::PKItem(const PKItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKItem::SharedCtor() {
  _cached_size_ = 0;
  m_lfucnsrl_ = 0;
  m_llstarttime_ = GOOGLE_LONGLONG(0);
  m_llendtime_ = GOOGLE_LONGLONG(0);
  m_llcount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKItem::~PKItem() {
  SharedDtor();
}

void PKItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKItem& PKItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKItem* PKItem::default_instance_ = NULL;

PKItem* PKItem::New() const {
  return new PKItem;
}

void PKItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lfucnsrl_ = 0;
    m_llstarttime_ = GOOGLE_LONGLONG(0);
    m_llendtime_ = GOOGLE_LONGLONG(0);
    m_llcount_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lFucnsrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lfucnsrl_)));
          set_has_m_lfucnsrl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llStartTime;
        break;
      }
      
      // required int64 m_llStartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llstarttime_)));
          set_has_m_llstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llEndTime;
        break;
      }
      
      // required int64 m_llEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llendtime_)));
          set_has_m_llendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCount;
        break;
      }
      
      // required int64 m_llCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llcount_)));
          set_has_m_llcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lFucnsrl = 1;
  if (has_m_lfucnsrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lfucnsrl(), output);
  }
  
  // required int64 m_llStartTime = 2;
  if (has_m_llstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_llstarttime(), output);
  }
  
  // required int64 m_llEndTime = 3;
  if (has_m_llendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_llendtime(), output);
  }
  
  // required int64 m_llCount = 4;
  if (has_m_llcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_llcount(), output);
  }
  
}

int PKItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lFucnsrl = 1;
    if (has_m_lfucnsrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lfucnsrl());
    }
    
    // required int64 m_llStartTime = 2;
    if (has_m_llstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llstarttime());
    }
    
    // required int64 m_llEndTime = 3;
    if (has_m_llendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llendtime());
    }
    
    // required int64 m_llCount = 4;
    if (has_m_llcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llcount());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKItem*>(&from));
}

void PKItem::MergeFrom(const PKItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lfucnsrl()) {
      set_m_lfucnsrl(from.m_lfucnsrl());
    }
    if (from.has_m_llstarttime()) {
      set_m_llstarttime(from.m_llstarttime());
    }
    if (from.has_m_llendtime()) {
      set_m_llendtime(from.m_llendtime());
    }
    if (from.has_m_llcount()) {
      set_m_llcount(from.m_llcount());
    }
  }
}

void PKItem::CopyFrom(const PKItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PKItem::Swap(PKItem* other) {
  if (other != this) {
    std::swap(m_lfucnsrl_, other->m_lfucnsrl_);
    std::swap(m_llstarttime_, other->m_llstarttime_);
    std::swap(m_llendtime_, other->m_llendtime_);
    std::swap(m_llcount_, other->m_llcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKItem::GetTypeName() const {
  return "PKItem";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKRCUserData::PKRCUserData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKRCUserData::InitAsDefaultInstance() {
}

PKRCUserData::PKRCUserData(const PKRCUserData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKRCUserData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKRCUserData::~PKRCUserData() {
  SharedDtor();
}

void PKRCUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKRCUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKRCUserData& PKRCUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKRCUserData* PKRCUserData::default_instance_ = NULL;

PKRCUserData* PKRCUserData::New() const {
  return new PKRCUserData;
}

void PKRCUserData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKRCUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKRCUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKRCUserData::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKRCUserData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKRCUserData*>(&from));
}

void PKRCUserData::MergeFrom(const PKRCUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKRCUserData::CopyFrom(const PKRCUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKRCUserData::IsInitialized() const {
  
  return true;
}

void PKRCUserData::Swap(PKRCUserData* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKRCUserData::GetTypeName() const {
  return "PKRCUserData";
}


// ===================================================================

#ifndef _MSC_VER
const int PKOption::kMSRoomTitleFieldNumber;
const int PKOption::kMSPasswordFieldNumber;
const int PKOption::kMLMaxUserCntFieldNumber;
const int PKOption::kMLMaxPlayerUserCntFieldNumber;
const int PKOption::kMLMaxPlayerCardCntFieldNumber;
const int PKOption::kMLChoiceModeFieldNumber;
const int PKOption::kMLRoomTypeFieldNumber;
const int PKOption::kMLBetRuleFieldNumber;
const int PKOption::kMLBetTypeFieldNumber;
const int PKOption::kMLAddRuleFieldNumber;
const int PKOption::kMLRematchJoinFieldNumber;
const int PKOption::kMLLimitMoneyFieldNumber;
const int PKOption::kMLlGameAnteMoneyFieldNumber;
const int PKOption::kMBEchoFieldNumber;
const int PKOption::kMLMakeUSNFieldNumber;
const int PKOption::kMLCategoryFieldNumber;
const int PKOption::kMLChannelIDFieldNumber;
const int PKOption::kMLlAnteMoneyFieldNumber;
#endif  // !_MSC_VER

PKOption::PKOption()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKOption::InitAsDefaultInstance() {
}

PKOption::PKOption(const PKOption& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKOption::SharedCtor() {
  _cached_size_ = 0;
  m_sroomtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lmaxusercnt_ = 0;
  m_lmaxplayerusercnt_ = 0;
  m_lmaxplayercardcnt_ = 0;
  m_lchoicemode_ = 0;
  m_lroomtype_ = 0;
  m_lbetrule_ = 0;
  m_lbettype_ = 0;
  m_laddrule_ = 0;
  m_lrematchjoin_ = 0;
  m_llimitmoney_ = 0;
  m_llgameantemoney_ = GOOGLE_LONGLONG(0);
  m_becho_ = 0;
  m_lmakeusn_ = 0;
  m_lcategory_ = 0;
  m_lchannelid_ = 0;
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKOption::~PKOption() {
  SharedDtor();
}

void PKOption::SharedDtor() {
  if (m_sroomtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sroomtitle_;
  }
  if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
    delete m_spassword_;
  }
  if (this != default_instance_) {
  }
}

void PKOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKOption& PKOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKOption* PKOption::default_instance_ = NULL;

PKOption* PKOption::New() const {
  return new PKOption;
}

void PKOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_sroomtitle()) {
      if (m_sroomtitle_ != &::google::protobuf::internal::kEmptyString) {
        m_sroomtitle_->clear();
      }
    }
    if (has_m_spassword()) {
      if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
        m_spassword_->clear();
      }
    }
    m_lmaxusercnt_ = 0;
    m_lmaxplayerusercnt_ = 0;
    m_lmaxplayercardcnt_ = 0;
    m_lchoicemode_ = 0;
    m_lroomtype_ = 0;
    m_lbetrule_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lbettype_ = 0;
    m_laddrule_ = 0;
    m_lrematchjoin_ = 0;
    m_llimitmoney_ = 0;
    m_llgameantemoney_ = GOOGLE_LONGLONG(0);
    m_becho_ = 0;
    m_lmakeusn_ = 0;
    m_lcategory_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_lchannelid_ = 0;
    m_llantemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sRoomTitle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sroomtitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sPassword;
        break;
      }
      
      // required string m_sPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_spassword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lMaxUserCnt;
        break;
      }
      
      // required int32 m_lMaxUserCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxUserCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxusercnt_)));
          set_has_m_lmaxusercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lMaxPlayerUserCnt;
        break;
      }
      
      // required int32 m_lMaxPlayerUserCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxPlayerUserCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxplayerusercnt_)));
          set_has_m_lmaxplayerusercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lMaxPlayerCardCnt;
        break;
      }
      
      // required int32 m_lMaxPlayerCardCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxPlayerCardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxplayercardcnt_)));
          set_has_m_lmaxplayercardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lChoiceMode;
        break;
      }
      
      // required int32 m_lChoiceMode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChoiceMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchoicemode_)));
          set_has_m_lchoicemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lRoomType;
        break;
      }
      
      // required int32 m_lRoomType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lroomtype_)));
          set_has_m_lroomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lBetRule;
        break;
      }
      
      // required int32 m_lBetRule = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbetrule_)));
          set_has_m_lbetrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lBetType;
        break;
      }
      
      // required int32 m_lBetType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lAddRule;
        break;
      }
      
      // required int32 m_lAddRule = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAddRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_laddrule_)));
          set_has_m_laddrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lRematchJoin;
        break;
      }
      
      // required int32 m_lRematchJoin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRematchJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lrematchjoin_)));
          set_has_m_lrematchjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_lLimitMoney;
        break;
      }
      
      // required int32 m_lLimitMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLimitMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_llimitmoney_)));
          set_has_m_llimitmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_llGameAnteMoney;
        break;
      }
      
      // required sint64 m_llGameAnteMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGameAnteMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llgameantemoney_)));
          set_has_m_llgameantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_bEcho;
        break;
      }
      
      // required int32 m_bEcho = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bEcho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_becho_)));
          set_has_m_becho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_lMakeUSN;
        break;
      }
      
      // required int32 m_lMakeUSN = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMakeUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmakeusn_)));
          set_has_m_lmakeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_lCategory;
        break;
      }
      
      // required int32 m_lCategory = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCategory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lcategory_)));
          set_has_m_lcategory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_lChannelID;
        break;
      }
      
      // required int32 m_lChannelID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChannelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchannelid_)));
          set_has_m_lchannelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_llAnteMoney;
        break;
      }
      
      // required sint64 m_llAnteMoney = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llAnteMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llantemoney_)));
          set_has_m_llantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sRoomTitle = 1;
  if (has_m_sroomtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_sroomtitle(), output);
  }
  
  // required string m_sPassword = 2;
  if (has_m_spassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_spassword(), output);
  }
  
  // required int32 m_lMaxUserCnt = 3;
  if (has_m_lmaxusercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lmaxusercnt(), output);
  }
  
  // required int32 m_lMaxPlayerUserCnt = 4;
  if (has_m_lmaxplayerusercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lmaxplayerusercnt(), output);
  }
  
  // required int32 m_lMaxPlayerCardCnt = 5;
  if (has_m_lmaxplayercardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_lmaxplayercardcnt(), output);
  }
  
  // required int32 m_lChoiceMode = 6;
  if (has_m_lchoicemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lchoicemode(), output);
  }
  
  // required int32 m_lRoomType = 7;
  if (has_m_lroomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lroomtype(), output);
  }
  
  // required int32 m_lBetRule = 8;
  if (has_m_lbetrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_lbetrule(), output);
  }
  
  // required int32 m_lBetType = 9;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_lbettype(), output);
  }
  
  // required int32 m_lAddRule = 10;
  if (has_m_laddrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_laddrule(), output);
  }
  
  // required int32 m_lRematchJoin = 11;
  if (has_m_lrematchjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_lrematchjoin(), output);
  }
  
  // required int32 m_lLimitMoney = 12;
  if (has_m_llimitmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_llimitmoney(), output);
  }
  
  // required sint64 m_llGameAnteMoney = 13;
  if (has_m_llgameantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->m_llgameantemoney(), output);
  }
  
  // required int32 m_bEcho = 14;
  if (has_m_becho()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_becho(), output);
  }
  
  // required int32 m_lMakeUSN = 15;
  if (has_m_lmakeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_lmakeusn(), output);
  }
  
  // required int32 m_lCategory = 16;
  if (has_m_lcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_lcategory(), output);
  }
  
  // required int32 m_lChannelID = 17;
  if (has_m_lchannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_lchannelid(), output);
  }
  
  // required sint64 m_llAnteMoney = 18;
  if (has_m_llantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(18, this->m_llantemoney(), output);
  }
  
}

int PKOption::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sRoomTitle = 1;
    if (has_m_sroomtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sroomtitle());
    }
    
    // required string m_sPassword = 2;
    if (has_m_spassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_spassword());
    }
    
    // required int32 m_lMaxUserCnt = 3;
    if (has_m_lmaxusercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxusercnt());
    }
    
    // required int32 m_lMaxPlayerUserCnt = 4;
    if (has_m_lmaxplayerusercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxplayerusercnt());
    }
    
    // required int32 m_lMaxPlayerCardCnt = 5;
    if (has_m_lmaxplayercardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxplayercardcnt());
    }
    
    // required int32 m_lChoiceMode = 6;
    if (has_m_lchoicemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchoicemode());
    }
    
    // required int32 m_lRoomType = 7;
    if (has_m_lroomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lroomtype());
    }
    
    // required int32 m_lBetRule = 8;
    if (has_m_lbetrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbetrule());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_lBetType = 9;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbettype());
    }
    
    // required int32 m_lAddRule = 10;
    if (has_m_laddrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_laddrule());
    }
    
    // required int32 m_lRematchJoin = 11;
    if (has_m_lrematchjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lrematchjoin());
    }
    
    // required int32 m_lLimitMoney = 12;
    if (has_m_llimitmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_llimitmoney());
    }
    
    // required sint64 m_llGameAnteMoney = 13;
    if (has_m_llgameantemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llgameantemoney());
    }
    
    // required int32 m_bEcho = 14;
    if (has_m_becho()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_becho());
    }
    
    // required int32 m_lMakeUSN = 15;
    if (has_m_lmakeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmakeusn());
    }
    
    // required int32 m_lCategory = 16;
    if (has_m_lcategory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lcategory());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 m_lChannelID = 17;
    if (has_m_lchannelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchannelid());
    }
    
    // required sint64 m_llAnteMoney = 18;
    if (has_m_llantemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llantemoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKOption::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKOption*>(&from));
}

void PKOption::MergeFrom(const PKOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_sroomtitle()) {
      set_m_sroomtitle(from.m_sroomtitle());
    }
    if (from.has_m_spassword()) {
      set_m_spassword(from.m_spassword());
    }
    if (from.has_m_lmaxusercnt()) {
      set_m_lmaxusercnt(from.m_lmaxusercnt());
    }
    if (from.has_m_lmaxplayerusercnt()) {
      set_m_lmaxplayerusercnt(from.m_lmaxplayerusercnt());
    }
    if (from.has_m_lmaxplayercardcnt()) {
      set_m_lmaxplayercardcnt(from.m_lmaxplayercardcnt());
    }
    if (from.has_m_lchoicemode()) {
      set_m_lchoicemode(from.m_lchoicemode());
    }
    if (from.has_m_lroomtype()) {
      set_m_lroomtype(from.m_lroomtype());
    }
    if (from.has_m_lbetrule()) {
      set_m_lbetrule(from.m_lbetrule());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_laddrule()) {
      set_m_laddrule(from.m_laddrule());
    }
    if (from.has_m_lrematchjoin()) {
      set_m_lrematchjoin(from.m_lrematchjoin());
    }
    if (from.has_m_llimitmoney()) {
      set_m_llimitmoney(from.m_llimitmoney());
    }
    if (from.has_m_llgameantemoney()) {
      set_m_llgameantemoney(from.m_llgameantemoney());
    }
    if (from.has_m_becho()) {
      set_m_becho(from.m_becho());
    }
    if (from.has_m_lmakeusn()) {
      set_m_lmakeusn(from.m_lmakeusn());
    }
    if (from.has_m_lcategory()) {
      set_m_lcategory(from.m_lcategory());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_lchannelid()) {
      set_m_lchannelid(from.m_lchannelid());
    }
    if (from.has_m_llantemoney()) {
      set_m_llantemoney(from.m_llantemoney());
    }
  }
}

void PKOption::CopyFrom(const PKOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  
  return true;
}

void PKOption::Swap(PKOption* other) {
  if (other != this) {
    std::swap(m_sroomtitle_, other->m_sroomtitle_);
    std::swap(m_spassword_, other->m_spassword_);
    std::swap(m_lmaxusercnt_, other->m_lmaxusercnt_);
    std::swap(m_lmaxplayerusercnt_, other->m_lmaxplayerusercnt_);
    std::swap(m_lmaxplayercardcnt_, other->m_lmaxplayercardcnt_);
    std::swap(m_lchoicemode_, other->m_lchoicemode_);
    std::swap(m_lroomtype_, other->m_lroomtype_);
    std::swap(m_lbetrule_, other->m_lbetrule_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_laddrule_, other->m_laddrule_);
    std::swap(m_lrematchjoin_, other->m_lrematchjoin_);
    std::swap(m_llimitmoney_, other->m_llimitmoney_);
    std::swap(m_llgameantemoney_, other->m_llgameantemoney_);
    std::swap(m_becho_, other->m_becho_);
    std::swap(m_lmakeusn_, other->m_lmakeusn_);
    std::swap(m_lcategory_, other->m_lcategory_);
    std::swap(m_lchannelid_, other->m_lchannelid_);
    std::swap(m_llantemoney_, other->m_llantemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKOption::GetTypeName() const {
  return "PKOption";
}


// ===================================================================

#ifndef _MSC_VER
const int PKRCUser::kMLUSNFieldNumber;
const int PKRCUser::kMLJuminFieldNumber;
const int PKRCUser::kMLFirstUSNFieldNumber;
const int PKRCUser::kMLAgeIndexFieldNumber;
const int PKRCUser::kMLJobIndexFieldNumber;
const int PKRCUser::kMLRegionIndexFieldNumber;
const int PKRCUser::kMLGuildIndexFieldNumber;
const int PKRCUser::kMLMemberIndexFieldNumber;
const int PKRCUser::kMLClientIPFieldNumber;
const int PKRCUser::kMLGatewayIPFieldNumber;
const int PKRCUser::kMLMacAddressFieldNumber;
const int PKRCUser::kMSMobileInfoFieldNumber;
const int PKRCUser::kMSAuthKeyFieldNumber;
const int PKRCUser::kMSUserGameDataFieldNumber;
const int PKRCUser::kMNIndexFieldNumber;
const int PKRCUser::kMSNickNameFieldNumber;
const int PKRCUser::kMSUserIDFieldNumber;
const int PKRCUser::kMSAvtFieldNumber;
const int PKRCUser::kMLCLevelFieldNumber;
const int PKRCUser::kMLSexFieldNumber;
const int PKRCUser::kMLlCMoneyFieldNumber;
const int PKRCUser::kMLlFMoneyFieldNumber;
const int PKRCUser::kMLlSafeMoneyFieldNumber;
const int PKRCUser::kMLlPlastAllinDateFieldNumber;
const int PKRCUser::kMLlPlastLogonDayFieldNumber;
const int PKRCUser::kMLMTodayPlayCountFieldNumber;
const int PKRCUser::kMLMTodayPlayTimeFieldNumber;
const int PKRCUser::kMLPTotalPlayCountFieldNumber;
const int PKRCUser::kMCRefillFieldNumber;
const int PKRCUser::kMLlPExtMoneyFieldNumber;
const int PKRCUser::kMLlPExtendDateFieldNumber;
const int PKRCUser::kMLlPBonusDateFieldNumber;
const int PKRCUser::kMLMMonthPlayCountFieldNumber;
const int PKRCUser::kMLMMonthPlayTimeFieldNumber;
const int PKRCUser::kMCWinLoseFieldNumber;
const int PKRCUser::kMLGDisCntFieldNumber;
const int PKRCUser::kMLlGlastLogonDayFieldNumber;
const int PKRCUser::kMLlGRegDateFieldNumber;
const int PKRCUser::kMLlGFirstPlayDateFieldNumber;
const int PKRCUser::kMLGTodayPlayCountFieldNumber;
const int PKRCUser::kMLGTodayPlayTimeFieldNumber;
const int PKRCUser::kMLGTotalPlayCountFieldNumber;
const int PKRCUser::kMLGTotalPlayTimeFieldNumber;
const int PKRCUser::kMLGAllinCntFieldNumber;
const int PKRCUser::kMLGAllinOutFieldNumber;
const int PKRCUser::kMLlGLastAllinDateFieldNumber;
const int PKRCUser::kMCWinLoseTodayFieldNumber;
const int PKRCUser::kMLlGTodayMoneyFieldNumber;
const int PKRCUser::kMLFourCardCntFieldNumber;
const int PKRCUser::kMLStraightFlushCntFieldNumber;
const int PKRCUser::kMLRoyalStraightFlushCntFieldNumber;
const int PKRCUser::kMNReserve01FieldNumber;
const int PKRCUser::kMNReserve02FieldNumber;
const int PKRCUser::kMItemListFieldNumber;
const int PKRCUser::kMLlJoinDateFieldNumber;
const int PKRCUser::kMLlPlayDateFieldNumber;
#endif  // !_MSC_VER

PKRCUser::PKRCUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKRCUser::InitAsDefaultInstance() {
  m_crefill_ = const_cast< ::CRefill*>(&::CRefill::default_instance());
  m_cwinlose_ = const_cast< ::PKCWinLose*>(&::PKCWinLose::default_instance());
  m_cwinlose_today_ = const_cast< ::PKCWinLose*>(&::PKCWinLose::default_instance());
  m_itemlist_ = const_cast< ::PKItemList*>(&::PKItemList::default_instance());
}

PKRCUser::PKRCUser(const PKRCUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKRCUser::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_ljumin_ = 0;
  m_lfirstusn_ = 0;
  m_lageindex_ = 0;
  m_ljobindex_ = 0;
  m_lregionindex_ = 0;
  m_lguildindex_ = 0;
  m_lmemberindex_ = 0;
  m_lclientip_ = 0;
  m_lgatewayip_ = 0;
  m_lmacaddress_ = 0;
  m_smobileinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sauthkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_susergamedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_nindex_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_suserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsex_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llfmoney_ = GOOGLE_LONGLONG(0);
  m_llsafemoney_ = GOOGLE_LONGLONG(0);
  m_llplastallindate_ = GOOGLE_LONGLONG(0);
  m_llplastlogonday_ = GOOGLE_LONGLONG(0);
  m_lmtodayplaycount_ = 0;
  m_lmtodayplaytime_ = 0;
  m_lptotalplaycount_ = 0;
  m_crefill_ = NULL;
  m_llpextmoney_ = GOOGLE_LONGLONG(0);
  m_llpextenddate_ = GOOGLE_LONGLONG(0);
  m_llpbonusdate_ = GOOGLE_LONGLONG(0);
  m_lmmonthplaycount_ = 0;
  m_lmmonthplaytime_ = 0;
  m_cwinlose_ = NULL;
  m_lgdiscnt_ = 0;
  m_llglastlogonday_ = GOOGLE_LONGLONG(0);
  m_llgregdate_ = GOOGLE_LONGLONG(0);
  m_llgfirstplaydate_ = GOOGLE_LONGLONG(0);
  m_lgtodayplaycount_ = 0;
  m_lgtodayplaytime_ = 0;
  m_lgtotalplaycount_ = 0;
  m_lgtotalplaytime_ = 0;
  m_lgallincnt_ = 0;
  m_lgallinout_ = 0;
  m_llglastallindate_ = GOOGLE_LONGLONG(0);
  m_cwinlose_today_ = NULL;
  m_llgtodaymoney_ = GOOGLE_LONGLONG(0);
  m_lfourcardcnt_ = 0;
  m_lstraightflushcnt_ = 0;
  m_lroyalstraightflushcnt_ = 0;
  m_nreserve01_ = 0;
  m_nreserve02_ = 0;
  m_itemlist_ = NULL;
  m_lljoindate_ = GOOGLE_LONGLONG(0);
  m_llplaydate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKRCUser::~PKRCUser() {
  SharedDtor();
}

void PKRCUser::SharedDtor() {
  if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smobileinfo_;
  }
  if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sauthkey_;
  }
  if (m_susergamedata_ != &::google::protobuf::internal::kEmptyString) {
    delete m_susergamedata_;
  }
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_suserid_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
    delete m_crefill_;
    delete m_cwinlose_;
    delete m_cwinlose_today_;
    delete m_itemlist_;
  }
}

void PKRCUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKRCUser& PKRCUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKRCUser* PKRCUser::default_instance_ = NULL;

PKRCUser* PKRCUser::New() const {
  return new PKRCUser;
}

void PKRCUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_ljumin_ = 0;
    m_lfirstusn_ = 0;
    m_lageindex_ = 0;
    m_ljobindex_ = 0;
    m_lregionindex_ = 0;
    m_lguildindex_ = 0;
    m_lmemberindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lclientip_ = 0;
    m_lgatewayip_ = 0;
    m_lmacaddress_ = 0;
    if (has_m_smobileinfo()) {
      if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
        m_smobileinfo_->clear();
      }
    }
    if (has_m_sauthkey()) {
      if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
        m_sauthkey_->clear();
      }
    }
    if (has_m_susergamedata()) {
      if (m_susergamedata_ != &::google::protobuf::internal::kEmptyString) {
        m_susergamedata_->clear();
      }
    }
    m_nindex_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_suserid()) {
      if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
        m_suserid_->clear();
      }
    }
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsex_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llfmoney_ = GOOGLE_LONGLONG(0);
    m_llsafemoney_ = GOOGLE_LONGLONG(0);
    m_llplastallindate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_llplastlogonday_ = GOOGLE_LONGLONG(0);
    m_lmtodayplaycount_ = 0;
    m_lmtodayplaytime_ = 0;
    m_lptotalplaycount_ = 0;
    if (has_m_crefill()) {
      if (m_crefill_ != NULL) m_crefill_->::CRefill::Clear();
    }
    m_llpextmoney_ = GOOGLE_LONGLONG(0);
    m_llpextenddate_ = GOOGLE_LONGLONG(0);
    m_llpbonusdate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    m_lmmonthplaycount_ = 0;
    m_lmmonthplaytime_ = 0;
    if (has_m_cwinlose()) {
      if (m_cwinlose_ != NULL) m_cwinlose_->::PKCWinLose::Clear();
    }
    m_lgdiscnt_ = 0;
    m_llglastlogonday_ = GOOGLE_LONGLONG(0);
    m_llgregdate_ = GOOGLE_LONGLONG(0);
    m_llgfirstplaydate_ = GOOGLE_LONGLONG(0);
    m_lgtodayplaycount_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    m_lgtodayplaytime_ = 0;
    m_lgtotalplaycount_ = 0;
    m_lgtotalplaytime_ = 0;
    m_lgallincnt_ = 0;
    m_lgallinout_ = 0;
    m_llglastallindate_ = GOOGLE_LONGLONG(0);
    if (has_m_cwinlose_today()) {
      if (m_cwinlose_today_ != NULL) m_cwinlose_today_->::PKCWinLose::Clear();
    }
    m_llgtodaymoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    m_lfourcardcnt_ = 0;
    m_lstraightflushcnt_ = 0;
    m_lroyalstraightflushcnt_ = 0;
    m_nreserve01_ = 0;
    m_nreserve02_ = 0;
    if (has_m_itemlist()) {
      if (m_itemlist_ != NULL) m_itemlist_->::PKItemList::Clear();
    }
    m_lljoindate_ = GOOGLE_LONGLONG(0);
    m_llplaydate_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKRCUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lJumin;
        break;
      }
      
      // required int32 m_lJumin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJumin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ljumin_)));
          set_has_m_ljumin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lFirstUSN;
        break;
      }
      
      // required int32 m_lFirstUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lFirstUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lfirstusn_)));
          set_has_m_lfirstusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lAgeIndex;
        break;
      }
      
      // required int32 m_lAgeIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAgeIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lageindex_)));
          set_has_m_lageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lJobIndex;
        break;
      }
      
      // required int32 m_lJobIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJobIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ljobindex_)));
          set_has_m_ljobindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lRegionIndex;
        break;
      }
      
      // required int32 m_lRegionIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRegionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lregionindex_)));
          set_has_m_lregionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lGuildIndex;
        break;
      }
      
      // required int32 m_lGuildIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGuildIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lguildindex_)));
          set_has_m_lguildindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lMemberIndex;
        break;
      }
      
      // required int32 m_lMemberIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMemberIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmemberindex_)));
          set_has_m_lmemberindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lClientIP;
        break;
      }
      
      // required int32 m_lClientIP = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lClientIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lclientip_)));
          set_has_m_lclientip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lGatewayIP;
        break;
      }
      
      // required int32 m_lGatewayIP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGatewayIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgatewayip_)));
          set_has_m_lgatewayip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lMacAddress;
        break;
      }
      
      // required int32 m_lMacAddress = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMacAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmacaddress_)));
          set_has_m_lmacaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_sMobileInfo;
        break;
      }
      
      // required string m_sMobileInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMobileInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smobileinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_sAuthKey;
        break;
      }
      
      // required string m_sAuthKey = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAuthKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sauthkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_sUserGameData;
        break;
      }
      
      // required string m_sUserGameData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sUserGameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_susergamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_sUserID;
        break;
      }
      
      // required string m_sUserID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_suserid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_m_sAvt;
        break;
      }
      
      // required string m_sAvt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_lCLevel;
        break;
      }
      
      // required int32 m_lCLevel = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_lSex;
        break;
      }
      
      // required int32 m_lSex = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lsex_)));
          set_has_m_lsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_llCMoney;
        break;
      }
      
      // required int64 m_llCMoney = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_llFMoney;
        break;
      }
      
      // required int64 m_llFMoney = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llFMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llfmoney_)));
          set_has_m_llfmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_llSafeMoney;
        break;
      }
      
      // required int64 m_llSafeMoney = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSafeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llsafemoney_)));
          set_has_m_llsafemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_llPlastAllinDate;
        break;
      }
      
      // required int64 m_llPlastAllinDate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPlastAllinDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llplastallindate_)));
          set_has_m_llplastallindate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_llPlastLogonDay;
        break;
      }
      
      // required int64 m_llPlastLogonDay = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPlastLogonDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llplastlogonday_)));
          set_has_m_llplastlogonday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_lMTodayPlayCount;
        break;
      }
      
      // required int32 m_lMTodayPlayCount = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMTodayPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmtodayplaycount_)));
          set_has_m_lmtodayplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_lMTodayPlayTime;
        break;
      }
      
      // required int32 m_lMTodayPlayTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMTodayPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmtodayplaytime_)));
          set_has_m_lmtodayplaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_lPTotalPlayCount;
        break;
      }
      
      // required int32 m_lPTotalPlayCount = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPTotalPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lptotalplaycount_)));
          set_has_m_lptotalplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_m_cRefill;
        break;
      }
      
      // required .CRefill m_cRefill = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cRefill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_crefill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_m_llPExtMoney;
        break;
      }
      
      // required int64 m_llPExtMoney = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPExtMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llpextmoney_)));
          set_has_m_llpextmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_llPExtendDate;
        break;
      }
      
      // required int64 m_llPExtendDate = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPExtendDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llpextenddate_)));
          set_has_m_llpextenddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_llPBonusDate;
        break;
      }
      
      // required int64 m_llPBonusDate = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPBonusDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llpbonusdate_)));
          set_has_m_llpbonusdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_m_lMMonthPlayCount;
        break;
      }
      
      // required int32 m_lMMonthPlayCount = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMMonthPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmmonthplaycount_)));
          set_has_m_lmmonthplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_m_lMMonthPlayTime;
        break;
      }
      
      // required int32 m_lMMonthPlayTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMMonthPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmmonthplaytime_)));
          set_has_m_lmmonthplaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_m_cWinLose;
        break;
      }
      
      // required .PKCWinLose m_cWinLose = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_m_lGDisCnt;
        break;
      }
      
      // required int32 m_lGDisCnt = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGDisCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgdiscnt_)));
          set_has_m_lgdiscnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_m_llGlastLogonDay;
        break;
      }
      
      // required int64 m_llGlastLogonDay = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGlastLogonDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llglastlogonday_)));
          set_has_m_llglastlogonday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_m_llGRegDate;
        break;
      }
      
      // required int64 m_llGRegDate = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGRegDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llgregdate_)));
          set_has_m_llgregdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_m_llGFirstPlayDate;
        break;
      }
      
      // required int64 m_llGFirstPlayDate = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGFirstPlayDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llgfirstplaydate_)));
          set_has_m_llgfirstplaydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_m_lGTodayPlayCount;
        break;
      }
      
      // required int32 m_lGTodayPlayCount = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGTodayPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgtodayplaycount_)));
          set_has_m_lgtodayplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_m_lGTodayPlayTime;
        break;
      }
      
      // required int32 m_lGTodayPlayTime = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGTodayPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgtodayplaytime_)));
          set_has_m_lgtodayplaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_m_lGTotalPlayCount;
        break;
      }
      
      // required int32 m_lGTotalPlayCount = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGTotalPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgtotalplaycount_)));
          set_has_m_lgtotalplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_m_lGTotalPlayTime;
        break;
      }
      
      // required int32 m_lGTotalPlayTime = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGTotalPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgtotalplaytime_)));
          set_has_m_lgtotalplaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_m_lGAllinCnt;
        break;
      }
      
      // required int32 m_lGAllinCnt = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGAllinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgallincnt_)));
          set_has_m_lgallincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_m_lGAllinOut;
        break;
      }
      
      // required int32 m_lGAllinOut = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGAllinOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgallinout_)));
          set_has_m_lgallinout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_m_llGLastAllinDate;
        break;
      }
      
      // required int64 m_llGLastAllinDate = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGLastAllinDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llglastallindate_)));
          set_has_m_llglastallindate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_m_cWinLose_Today;
        break;
      }
      
      // required .PKCWinLose m_cWinLose_Today = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose_Today:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose_today()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_m_llGTodayMoney;
        break;
      }
      
      // required int64 m_llGTodayMoney = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGTodayMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llgtodaymoney_)));
          set_has_m_llgtodaymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_m_lFourCardCnt;
        break;
      }
      
      // required int32 m_lFourCardCnt = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lFourCardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lfourcardcnt_)));
          set_has_m_lfourcardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_m_lStraightFlushCnt;
        break;
      }
      
      // required int32 m_lStraightFlushCnt = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lStraightFlushCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lstraightflushcnt_)));
          set_has_m_lstraightflushcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_m_lRoyalStraightFlushCnt;
        break;
      }
      
      // required int32 m_lRoyalStraightFlushCnt = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRoyalStraightFlushCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lroyalstraightflushcnt_)));
          set_has_m_lroyalstraightflushcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_m_nReserve01;
        break;
      }
      
      // required int32 m_nReserve01 = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nReserve01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserve01_)));
          set_has_m_nreserve01();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_m_nReserve02;
        break;
      }
      
      // required int32 m_nReserve02 = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nReserve02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserve02_)));
          set_has_m_nreserve02();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_m_ItemList;
        break;
      }
      
      // required .PKItemList m_ItemList = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_m_llJoinDate;
        break;
      }
      
      // required int64 m_llJoinDate = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJoinDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_lljoindate_)));
          set_has_m_lljoindate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_m_llPlayDate;
        break;
      }
      
      // required int64 m_llPlayDate = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPlayDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llplaydate_)));
          set_has_m_llplaydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKRCUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_lJumin = 2;
  if (has_m_ljumin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ljumin(), output);
  }
  
  // required int32 m_lFirstUSN = 3;
  if (has_m_lfirstusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lfirstusn(), output);
  }
  
  // required int32 m_lAgeIndex = 4;
  if (has_m_lageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lageindex(), output);
  }
  
  // required int32 m_lJobIndex = 5;
  if (has_m_ljobindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ljobindex(), output);
  }
  
  // required int32 m_lRegionIndex = 6;
  if (has_m_lregionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lregionindex(), output);
  }
  
  // required int32 m_lGuildIndex = 7;
  if (has_m_lguildindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lguildindex(), output);
  }
  
  // required int32 m_lMemberIndex = 8;
  if (has_m_lmemberindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_lmemberindex(), output);
  }
  
  // required int32 m_lClientIP = 9;
  if (has_m_lclientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_lclientip(), output);
  }
  
  // required int32 m_lGatewayIP = 10;
  if (has_m_lgatewayip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_lgatewayip(), output);
  }
  
  // required int32 m_lMacAddress = 11;
  if (has_m_lmacaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_lmacaddress(), output);
  }
  
  // required string m_sMobileInfo = 12;
  if (has_m_smobileinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->m_smobileinfo(), output);
  }
  
  // required string m_sAuthKey = 13;
  if (has_m_sauthkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_sauthkey(), output);
  }
  
  // required string m_sUserGameData = 14;
  if (has_m_susergamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->m_susergamedata(), output);
  }
  
  // required int32 m_nIndex = 15;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_nindex(), output);
  }
  
  // required string m_sNickName = 16;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->m_snickname(), output);
  }
  
  // required string m_sUserID = 17;
  if (has_m_suserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->m_suserid(), output);
  }
  
  // required string m_sAvt = 18;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->m_savt(), output);
  }
  
  // required int32 m_lCLevel = 19;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_lclevel(), output);
  }
  
  // required int32 m_lSex = 20;
  if (has_m_lsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_lsex(), output);
  }
  
  // required int64 m_llCMoney = 21;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->m_llcmoney(), output);
  }
  
  // required int64 m_llFMoney = 22;
  if (has_m_llfmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->m_llfmoney(), output);
  }
  
  // required int64 m_llSafeMoney = 23;
  if (has_m_llsafemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->m_llsafemoney(), output);
  }
  
  // required int64 m_llPlastAllinDate = 24;
  if (has_m_llplastallindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->m_llplastallindate(), output);
  }
  
  // required int64 m_llPlastLogonDay = 25;
  if (has_m_llplastlogonday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->m_llplastlogonday(), output);
  }
  
  // required int32 m_lMTodayPlayCount = 26;
  if (has_m_lmtodayplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_lmtodayplaycount(), output);
  }
  
  // required int32 m_lMTodayPlayTime = 27;
  if (has_m_lmtodayplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_lmtodayplaytime(), output);
  }
  
  // required int32 m_lPTotalPlayCount = 28;
  if (has_m_lptotalplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->m_lptotalplaycount(), output);
  }
  
  // required .CRefill m_cRefill = 29;
  if (has_m_crefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->m_crefill(), output);
  }
  
  // required int64 m_llPExtMoney = 30;
  if (has_m_llpextmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->m_llpextmoney(), output);
  }
  
  // required int64 m_llPExtendDate = 31;
  if (has_m_llpextenddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->m_llpextenddate(), output);
  }
  
  // required int64 m_llPBonusDate = 32;
  if (has_m_llpbonusdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->m_llpbonusdate(), output);
  }
  
  // required int32 m_lMMonthPlayCount = 33;
  if (has_m_lmmonthplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->m_lmmonthplaycount(), output);
  }
  
  // required int32 m_lMMonthPlayTime = 34;
  if (has_m_lmmonthplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->m_lmmonthplaytime(), output);
  }
  
  // required .PKCWinLose m_cWinLose = 35;
  if (has_m_cwinlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->m_cwinlose(), output);
  }
  
  // required int32 m_lGDisCnt = 36;
  if (has_m_lgdiscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->m_lgdiscnt(), output);
  }
  
  // required int64 m_llGlastLogonDay = 37;
  if (has_m_llglastlogonday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->m_llglastlogonday(), output);
  }
  
  // required int64 m_llGRegDate = 38;
  if (has_m_llgregdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->m_llgregdate(), output);
  }
  
  // required int64 m_llGFirstPlayDate = 39;
  if (has_m_llgfirstplaydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->m_llgfirstplaydate(), output);
  }
  
  // required int32 m_lGTodayPlayCount = 40;
  if (has_m_lgtodayplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->m_lgtodayplaycount(), output);
  }
  
  // required int32 m_lGTodayPlayTime = 41;
  if (has_m_lgtodayplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->m_lgtodayplaytime(), output);
  }
  
  // required int32 m_lGTotalPlayCount = 42;
  if (has_m_lgtotalplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->m_lgtotalplaycount(), output);
  }
  
  // required int32 m_lGTotalPlayTime = 43;
  if (has_m_lgtotalplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->m_lgtotalplaytime(), output);
  }
  
  // required int32 m_lGAllinCnt = 44;
  if (has_m_lgallincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->m_lgallincnt(), output);
  }
  
  // required int32 m_lGAllinOut = 45;
  if (has_m_lgallinout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->m_lgallinout(), output);
  }
  
  // required int64 m_llGLastAllinDate = 46;
  if (has_m_llglastallindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->m_llglastallindate(), output);
  }
  
  // required .PKCWinLose m_cWinLose_Today = 47;
  if (has_m_cwinlose_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->m_cwinlose_today(), output);
  }
  
  // required int64 m_llGTodayMoney = 48;
  if (has_m_llgtodaymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->m_llgtodaymoney(), output);
  }
  
  // required int32 m_lFourCardCnt = 49;
  if (has_m_lfourcardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->m_lfourcardcnt(), output);
  }
  
  // required int32 m_lStraightFlushCnt = 50;
  if (has_m_lstraightflushcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->m_lstraightflushcnt(), output);
  }
  
  // required int32 m_lRoyalStraightFlushCnt = 51;
  if (has_m_lroyalstraightflushcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->m_lroyalstraightflushcnt(), output);
  }
  
  // required int32 m_nReserve01 = 52;
  if (has_m_nreserve01()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->m_nreserve01(), output);
  }
  
  // required int32 m_nReserve02 = 53;
  if (has_m_nreserve02()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->m_nreserve02(), output);
  }
  
  // required .PKItemList m_ItemList = 54;
  if (has_m_itemlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      54, this->m_itemlist(), output);
  }
  
  // required int64 m_llJoinDate = 55;
  if (has_m_lljoindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(55, this->m_lljoindate(), output);
  }
  
  // required int64 m_llPlayDate = 56;
  if (has_m_llplaydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(56, this->m_llplaydate(), output);
  }
  
}

int PKRCUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_lJumin = 2;
    if (has_m_ljumin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ljumin());
    }
    
    // required int32 m_lFirstUSN = 3;
    if (has_m_lfirstusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lfirstusn());
    }
    
    // required int32 m_lAgeIndex = 4;
    if (has_m_lageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lageindex());
    }
    
    // required int32 m_lJobIndex = 5;
    if (has_m_ljobindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ljobindex());
    }
    
    // required int32 m_lRegionIndex = 6;
    if (has_m_lregionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lregionindex());
    }
    
    // required int32 m_lGuildIndex = 7;
    if (has_m_lguildindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lguildindex());
    }
    
    // required int32 m_lMemberIndex = 8;
    if (has_m_lmemberindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmemberindex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_lClientIP = 9;
    if (has_m_lclientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lclientip());
    }
    
    // required int32 m_lGatewayIP = 10;
    if (has_m_lgatewayip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgatewayip());
    }
    
    // required int32 m_lMacAddress = 11;
    if (has_m_lmacaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmacaddress());
    }
    
    // required string m_sMobileInfo = 12;
    if (has_m_smobileinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smobileinfo());
    }
    
    // required string m_sAuthKey = 13;
    if (has_m_sauthkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sauthkey());
    }
    
    // required string m_sUserGameData = 14;
    if (has_m_susergamedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_susergamedata());
    }
    
    // required int32 m_nIndex = 15;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required string m_sNickName = 16;
    if (has_m_snickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string m_sUserID = 17;
    if (has_m_suserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_suserid());
    }
    
    // required string m_sAvt = 18;
    if (has_m_savt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required int32 m_lCLevel = 19;
    if (has_m_lclevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lclevel());
    }
    
    // required int32 m_lSex = 20;
    if (has_m_lsex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lsex());
    }
    
    // required int64 m_llCMoney = 21;
    if (has_m_llcmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llcmoney());
    }
    
    // required int64 m_llFMoney = 22;
    if (has_m_llfmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llfmoney());
    }
    
    // required int64 m_llSafeMoney = 23;
    if (has_m_llsafemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llsafemoney());
    }
    
    // required int64 m_llPlastAllinDate = 24;
    if (has_m_llplastallindate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llplastallindate());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int64 m_llPlastLogonDay = 25;
    if (has_m_llplastlogonday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llplastlogonday());
    }
    
    // required int32 m_lMTodayPlayCount = 26;
    if (has_m_lmtodayplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmtodayplaycount());
    }
    
    // required int32 m_lMTodayPlayTime = 27;
    if (has_m_lmtodayplaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmtodayplaytime());
    }
    
    // required int32 m_lPTotalPlayCount = 28;
    if (has_m_lptotalplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lptotalplaycount());
    }
    
    // required .CRefill m_cRefill = 29;
    if (has_m_crefill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_crefill());
    }
    
    // required int64 m_llPExtMoney = 30;
    if (has_m_llpextmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llpextmoney());
    }
    
    // required int64 m_llPExtendDate = 31;
    if (has_m_llpextenddate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llpextenddate());
    }
    
    // required int64 m_llPBonusDate = 32;
    if (has_m_llpbonusdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llpbonusdate());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 m_lMMonthPlayCount = 33;
    if (has_m_lmmonthplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmmonthplaycount());
    }
    
    // required int32 m_lMMonthPlayTime = 34;
    if (has_m_lmmonthplaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmmonthplaytime());
    }
    
    // required .PKCWinLose m_cWinLose = 35;
    if (has_m_cwinlose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose());
    }
    
    // required int32 m_lGDisCnt = 36;
    if (has_m_lgdiscnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgdiscnt());
    }
    
    // required int64 m_llGlastLogonDay = 37;
    if (has_m_llglastlogonday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llglastlogonday());
    }
    
    // required int64 m_llGRegDate = 38;
    if (has_m_llgregdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llgregdate());
    }
    
    // required int64 m_llGFirstPlayDate = 39;
    if (has_m_llgfirstplaydate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llgfirstplaydate());
    }
    
    // required int32 m_lGTodayPlayCount = 40;
    if (has_m_lgtodayplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgtodayplaycount());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int32 m_lGTodayPlayTime = 41;
    if (has_m_lgtodayplaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgtodayplaytime());
    }
    
    // required int32 m_lGTotalPlayCount = 42;
    if (has_m_lgtotalplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgtotalplaycount());
    }
    
    // required int32 m_lGTotalPlayTime = 43;
    if (has_m_lgtotalplaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgtotalplaytime());
    }
    
    // required int32 m_lGAllinCnt = 44;
    if (has_m_lgallincnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgallincnt());
    }
    
    // required int32 m_lGAllinOut = 45;
    if (has_m_lgallinout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgallinout());
    }
    
    // required int64 m_llGLastAllinDate = 46;
    if (has_m_llglastallindate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llglastallindate());
    }
    
    // required .PKCWinLose m_cWinLose_Today = 47;
    if (has_m_cwinlose_today()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose_today());
    }
    
    // required int64 m_llGTodayMoney = 48;
    if (has_m_llgtodaymoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llgtodaymoney());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // required int32 m_lFourCardCnt = 49;
    if (has_m_lfourcardcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lfourcardcnt());
    }
    
    // required int32 m_lStraightFlushCnt = 50;
    if (has_m_lstraightflushcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lstraightflushcnt());
    }
    
    // required int32 m_lRoyalStraightFlushCnt = 51;
    if (has_m_lroyalstraightflushcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lroyalstraightflushcnt());
    }
    
    // required int32 m_nReserve01 = 52;
    if (has_m_nreserve01()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserve01());
    }
    
    // required int32 m_nReserve02 = 53;
    if (has_m_nreserve02()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserve02());
    }
    
    // required .PKItemList m_ItemList = 54;
    if (has_m_itemlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_itemlist());
    }
    
    // required int64 m_llJoinDate = 55;
    if (has_m_lljoindate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_lljoindate());
    }
    
    // required int64 m_llPlayDate = 56;
    if (has_m_llplaydate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llplaydate());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKRCUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKRCUser*>(&from));
}

void PKRCUser::MergeFrom(const PKRCUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_ljumin()) {
      set_m_ljumin(from.m_ljumin());
    }
    if (from.has_m_lfirstusn()) {
      set_m_lfirstusn(from.m_lfirstusn());
    }
    if (from.has_m_lageindex()) {
      set_m_lageindex(from.m_lageindex());
    }
    if (from.has_m_ljobindex()) {
      set_m_ljobindex(from.m_ljobindex());
    }
    if (from.has_m_lregionindex()) {
      set_m_lregionindex(from.m_lregionindex());
    }
    if (from.has_m_lguildindex()) {
      set_m_lguildindex(from.m_lguildindex());
    }
    if (from.has_m_lmemberindex()) {
      set_m_lmemberindex(from.m_lmemberindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lclientip()) {
      set_m_lclientip(from.m_lclientip());
    }
    if (from.has_m_lgatewayip()) {
      set_m_lgatewayip(from.m_lgatewayip());
    }
    if (from.has_m_lmacaddress()) {
      set_m_lmacaddress(from.m_lmacaddress());
    }
    if (from.has_m_smobileinfo()) {
      set_m_smobileinfo(from.m_smobileinfo());
    }
    if (from.has_m_sauthkey()) {
      set_m_sauthkey(from.m_sauthkey());
    }
    if (from.has_m_susergamedata()) {
      set_m_susergamedata(from.m_susergamedata());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_suserid()) {
      set_m_suserid(from.m_suserid());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsex()) {
      set_m_lsex(from.m_lsex());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llfmoney()) {
      set_m_llfmoney(from.m_llfmoney());
    }
    if (from.has_m_llsafemoney()) {
      set_m_llsafemoney(from.m_llsafemoney());
    }
    if (from.has_m_llplastallindate()) {
      set_m_llplastallindate(from.m_llplastallindate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_llplastlogonday()) {
      set_m_llplastlogonday(from.m_llplastlogonday());
    }
    if (from.has_m_lmtodayplaycount()) {
      set_m_lmtodayplaycount(from.m_lmtodayplaycount());
    }
    if (from.has_m_lmtodayplaytime()) {
      set_m_lmtodayplaytime(from.m_lmtodayplaytime());
    }
    if (from.has_m_lptotalplaycount()) {
      set_m_lptotalplaycount(from.m_lptotalplaycount());
    }
    if (from.has_m_crefill()) {
      mutable_m_crefill()->::CRefill::MergeFrom(from.m_crefill());
    }
    if (from.has_m_llpextmoney()) {
      set_m_llpextmoney(from.m_llpextmoney());
    }
    if (from.has_m_llpextenddate()) {
      set_m_llpextenddate(from.m_llpextenddate());
    }
    if (from.has_m_llpbonusdate()) {
      set_m_llpbonusdate(from.m_llpbonusdate());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_lmmonthplaycount()) {
      set_m_lmmonthplaycount(from.m_lmmonthplaycount());
    }
    if (from.has_m_lmmonthplaytime()) {
      set_m_lmmonthplaytime(from.m_lmmonthplaytime());
    }
    if (from.has_m_cwinlose()) {
      mutable_m_cwinlose()->::PKCWinLose::MergeFrom(from.m_cwinlose());
    }
    if (from.has_m_lgdiscnt()) {
      set_m_lgdiscnt(from.m_lgdiscnt());
    }
    if (from.has_m_llglastlogonday()) {
      set_m_llglastlogonday(from.m_llglastlogonday());
    }
    if (from.has_m_llgregdate()) {
      set_m_llgregdate(from.m_llgregdate());
    }
    if (from.has_m_llgfirstplaydate()) {
      set_m_llgfirstplaydate(from.m_llgfirstplaydate());
    }
    if (from.has_m_lgtodayplaycount()) {
      set_m_lgtodayplaycount(from.m_lgtodayplaycount());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_m_lgtodayplaytime()) {
      set_m_lgtodayplaytime(from.m_lgtodayplaytime());
    }
    if (from.has_m_lgtotalplaycount()) {
      set_m_lgtotalplaycount(from.m_lgtotalplaycount());
    }
    if (from.has_m_lgtotalplaytime()) {
      set_m_lgtotalplaytime(from.m_lgtotalplaytime());
    }
    if (from.has_m_lgallincnt()) {
      set_m_lgallincnt(from.m_lgallincnt());
    }
    if (from.has_m_lgallinout()) {
      set_m_lgallinout(from.m_lgallinout());
    }
    if (from.has_m_llglastallindate()) {
      set_m_llglastallindate(from.m_llglastallindate());
    }
    if (from.has_m_cwinlose_today()) {
      mutable_m_cwinlose_today()->::PKCWinLose::MergeFrom(from.m_cwinlose_today());
    }
    if (from.has_m_llgtodaymoney()) {
      set_m_llgtodaymoney(from.m_llgtodaymoney());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_m_lfourcardcnt()) {
      set_m_lfourcardcnt(from.m_lfourcardcnt());
    }
    if (from.has_m_lstraightflushcnt()) {
      set_m_lstraightflushcnt(from.m_lstraightflushcnt());
    }
    if (from.has_m_lroyalstraightflushcnt()) {
      set_m_lroyalstraightflushcnt(from.m_lroyalstraightflushcnt());
    }
    if (from.has_m_nreserve01()) {
      set_m_nreserve01(from.m_nreserve01());
    }
    if (from.has_m_nreserve02()) {
      set_m_nreserve02(from.m_nreserve02());
    }
    if (from.has_m_itemlist()) {
      mutable_m_itemlist()->::PKItemList::MergeFrom(from.m_itemlist());
    }
    if (from.has_m_lljoindate()) {
      set_m_lljoindate(from.m_lljoindate());
    }
    if (from.has_m_llplaydate()) {
      set_m_llplaydate(from.m_llplaydate());
    }
  }
}

void PKRCUser::CopyFrom(const PKRCUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKRCUser::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00ffffff) != 0x00ffffff) return false;
  
  if (has_m_crefill()) {
    if (!this->m_crefill().IsInitialized()) return false;
  }
  if (has_m_cwinlose()) {
    if (!this->m_cwinlose().IsInitialized()) return false;
  }
  if (has_m_cwinlose_today()) {
    if (!this->m_cwinlose_today().IsInitialized()) return false;
  }
  if (has_m_itemlist()) {
    if (!this->m_itemlist().IsInitialized()) return false;
  }
  return true;
}

void PKRCUser::Swap(PKRCUser* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_ljumin_, other->m_ljumin_);
    std::swap(m_lfirstusn_, other->m_lfirstusn_);
    std::swap(m_lageindex_, other->m_lageindex_);
    std::swap(m_ljobindex_, other->m_ljobindex_);
    std::swap(m_lregionindex_, other->m_lregionindex_);
    std::swap(m_lguildindex_, other->m_lguildindex_);
    std::swap(m_lmemberindex_, other->m_lmemberindex_);
    std::swap(m_lclientip_, other->m_lclientip_);
    std::swap(m_lgatewayip_, other->m_lgatewayip_);
    std::swap(m_lmacaddress_, other->m_lmacaddress_);
    std::swap(m_smobileinfo_, other->m_smobileinfo_);
    std::swap(m_sauthkey_, other->m_sauthkey_);
    std::swap(m_susergamedata_, other->m_susergamedata_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_suserid_, other->m_suserid_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsex_, other->m_lsex_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llfmoney_, other->m_llfmoney_);
    std::swap(m_llsafemoney_, other->m_llsafemoney_);
    std::swap(m_llplastallindate_, other->m_llplastallindate_);
    std::swap(m_llplastlogonday_, other->m_llplastlogonday_);
    std::swap(m_lmtodayplaycount_, other->m_lmtodayplaycount_);
    std::swap(m_lmtodayplaytime_, other->m_lmtodayplaytime_);
    std::swap(m_lptotalplaycount_, other->m_lptotalplaycount_);
    std::swap(m_crefill_, other->m_crefill_);
    std::swap(m_llpextmoney_, other->m_llpextmoney_);
    std::swap(m_llpextenddate_, other->m_llpextenddate_);
    std::swap(m_llpbonusdate_, other->m_llpbonusdate_);
    std::swap(m_lmmonthplaycount_, other->m_lmmonthplaycount_);
    std::swap(m_lmmonthplaytime_, other->m_lmmonthplaytime_);
    std::swap(m_cwinlose_, other->m_cwinlose_);
    std::swap(m_lgdiscnt_, other->m_lgdiscnt_);
    std::swap(m_llglastlogonday_, other->m_llglastlogonday_);
    std::swap(m_llgregdate_, other->m_llgregdate_);
    std::swap(m_llgfirstplaydate_, other->m_llgfirstplaydate_);
    std::swap(m_lgtodayplaycount_, other->m_lgtodayplaycount_);
    std::swap(m_lgtodayplaytime_, other->m_lgtodayplaytime_);
    std::swap(m_lgtotalplaycount_, other->m_lgtotalplaycount_);
    std::swap(m_lgtotalplaytime_, other->m_lgtotalplaytime_);
    std::swap(m_lgallincnt_, other->m_lgallincnt_);
    std::swap(m_lgallinout_, other->m_lgallinout_);
    std::swap(m_llglastallindate_, other->m_llglastallindate_);
    std::swap(m_cwinlose_today_, other->m_cwinlose_today_);
    std::swap(m_llgtodaymoney_, other->m_llgtodaymoney_);
    std::swap(m_lfourcardcnt_, other->m_lfourcardcnt_);
    std::swap(m_lstraightflushcnt_, other->m_lstraightflushcnt_);
    std::swap(m_lroyalstraightflushcnt_, other->m_lroyalstraightflushcnt_);
    std::swap(m_nreserve01_, other->m_nreserve01_);
    std::swap(m_nreserve02_, other->m_nreserve02_);
    std::swap(m_itemlist_, other->m_itemlist_);
    std::swap(m_lljoindate_, other->m_lljoindate_);
    std::swap(m_llplaydate_, other->m_llplaydate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKRCUser::GetTypeName() const {
  return "PKRCUser";
}


// ===================================================================

#ifndef _MSC_VER
const int PKBettingMsg::kMLUSNFieldNumber;
const int PKBettingMsg::kMNIndexFieldNumber;
const int PKBettingMsg::kMBetTypeFieldNumber;
const int PKBettingMsg::kMBBettingMoneyFieldNumber;
const int PKBettingMsg::kMBMoneyLackFieldNumber;
const int PKBettingMsg::kMBCallMoneyZeroFieldNumber;
const int PKBettingMsg::kMLlCallMoneyFieldNumber;
const int PKBettingMsg::kMLlRaiseMoneyFieldNumber;
#endif  // !_MSC_VER

PKBettingMsg::PKBettingMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKBettingMsg::InitAsDefaultInstance() {
}

PKBettingMsg::PKBettingMsg(const PKBettingMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKBettingMsg::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_bettype_ = 0;
  m_bbettingmoney_ = 0;
  m_bmoneylack_ = 0;
  m_bcallmoneyzero_ = 0;
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKBettingMsg::~PKBettingMsg() {
  SharedDtor();
}

void PKBettingMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKBettingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKBettingMsg& PKBettingMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKBettingMsg* PKBettingMsg::default_instance_ = NULL;

PKBettingMsg* PKBettingMsg::New() const {
  return new PKBettingMsg;
}

void PKBettingMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_bettype_ = 0;
    m_bbettingmoney_ = 0;
    m_bmoneylack_ = 0;
    m_bcallmoneyzero_ = 0;
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llraisemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKBettingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_BetType;
        break;
      }
      
      // required int32 m_BetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bettype_)));
          set_has_m_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bBettingMoney;
        break;
      }
      
      // required int32 m_bBettingMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bBettingMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bbettingmoney_)));
          set_has_m_bbettingmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bMoneyLack;
        break;
      }
      
      // required int32 m_bMoneyLack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bMoneyLack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmoneylack_)));
          set_has_m_bmoneylack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bCallMoneyZero;
        break;
      }
      
      // required int32 m_bCallMoneyZero = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallMoneyZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcallmoneyzero_)));
          set_has_m_bcallmoneyzero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_llCallMoney;
        break;
      }
      
      // required int64 m_llCallMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_llRaiseMoney;
        break;
      }
      
      // required int64 m_llRaiseMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRaiseMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llraisemoney_)));
          set_has_m_llraisemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKBettingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required int32 m_BetType = 3;
  if (has_m_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_bettype(), output);
  }
  
  // required int32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bbettingmoney(), output);
  }
  
  // required int32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bmoneylack(), output);
  }
  
  // required int32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_bcallmoneyzero(), output);
  }
  
  // required int64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->m_llcallmoney(), output);
  }
  
  // required int64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_llraisemoney(), output);
  }
  
}

int PKBettingMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required int32 m_BetType = 3;
    if (has_m_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bettype());
    }
    
    // required int32 m_bBettingMoney = 4;
    if (has_m_bbettingmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bbettingmoney());
    }
    
    // required int32 m_bMoneyLack = 5;
    if (has_m_bmoneylack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmoneylack());
    }
    
    // required int32 m_bCallMoneyZero = 6;
    if (has_m_bcallmoneyzero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcallmoneyzero());
    }
    
    // required int64 m_llCallMoney = 7;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llcallmoney());
    }
    
    // required int64 m_llRaiseMoney = 8;
    if (has_m_llraisemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llraisemoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKBettingMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKBettingMsg*>(&from));
}

void PKBettingMsg::MergeFrom(const PKBettingMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_bettype()) {
      set_m_bettype(from.m_bettype());
    }
    if (from.has_m_bbettingmoney()) {
      set_m_bbettingmoney(from.m_bbettingmoney());
    }
    if (from.has_m_bmoneylack()) {
      set_m_bmoneylack(from.m_bmoneylack());
    }
    if (from.has_m_bcallmoneyzero()) {
      set_m_bcallmoneyzero(from.m_bcallmoneyzero());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llraisemoney()) {
      set_m_llraisemoney(from.m_llraisemoney());
    }
  }
}

void PKBettingMsg::CopyFrom(const PKBettingMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKBettingMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void PKBettingMsg::Swap(PKBettingMsg* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_bettype_, other->m_bettype_);
    std::swap(m_bbettingmoney_, other->m_bbettingmoney_);
    std::swap(m_bmoneylack_, other->m_bmoneylack_);
    std::swap(m_bcallmoneyzero_, other->m_bcallmoneyzero_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llraisemoney_, other->m_llraisemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKBettingMsg::GetTypeName() const {
  return "PKBettingMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int PKBettingMsgTable::kBettingMsgTableFieldNumber;
#endif  // !_MSC_VER

PKBettingMsgTable::PKBettingMsgTable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKBettingMsgTable::InitAsDefaultInstance() {
}

PKBettingMsgTable::PKBettingMsgTable(const PKBettingMsgTable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKBettingMsgTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKBettingMsgTable::~PKBettingMsgTable() {
  SharedDtor();
}

void PKBettingMsgTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKBettingMsgTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKBettingMsgTable& PKBettingMsgTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKBettingMsgTable* PKBettingMsgTable::default_instance_ = NULL;

PKBettingMsgTable* PKBettingMsgTable::New() const {
  return new PKBettingMsgTable;
}

void PKBettingMsgTable::Clear() {
  bettingmsgtable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKBettingMsgTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKBettingMsg BettingMsgTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BettingMsgTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bettingmsgtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_BettingMsgTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKBettingMsgTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKBettingMsg BettingMsgTable = 1;
  for (int i = 0; i < this->bettingmsgtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bettingmsgtable(i), output);
  }
  
}

int PKBettingMsgTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKBettingMsg BettingMsgTable = 1;
  total_size += 1 * this->bettingmsgtable_size();
  for (int i = 0; i < this->bettingmsgtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bettingmsgtable(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKBettingMsgTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKBettingMsgTable*>(&from));
}

void PKBettingMsgTable::MergeFrom(const PKBettingMsgTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  bettingmsgtable_.MergeFrom(from.bettingmsgtable_);
}

void PKBettingMsgTable::CopyFrom(const PKBettingMsgTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKBettingMsgTable::IsInitialized() const {
  
  for (int i = 0; i < bettingmsgtable_size(); i++) {
    if (!this->bettingmsgtable(i).IsInitialized()) return false;
  }
  return true;
}

void PKBettingMsgTable::Swap(PKBettingMsgTable* other) {
  if (other != this) {
    bettingmsgtable_.Swap(&other->bettingmsgtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKBettingMsgTable::GetTypeName() const {
  return "PKBettingMsgTable";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMoneyTable::kMoneyTableFieldNumber;
#endif  // !_MSC_VER

PKMoneyTable::PKMoneyTable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMoneyTable::InitAsDefaultInstance() {
}

PKMoneyTable::PKMoneyTable(const PKMoneyTable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMoneyTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMoneyTable::~PKMoneyTable() {
  SharedDtor();
}

void PKMoneyTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMoneyTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMoneyTable& PKMoneyTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMoneyTable* PKMoneyTable::default_instance_ = NULL;

PKMoneyTable* PKMoneyTable::New() const {
  return new PKMoneyTable;
}

void PKMoneyTable::Clear() {
  moneytable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMoneyTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKMoney MoneyTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MoneyTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneytable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MoneyTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMoneyTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKMoney MoneyTable = 1;
  for (int i = 0; i < this->moneytable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->moneytable(i), output);
  }
  
}

int PKMoneyTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKMoney MoneyTable = 1;
  total_size += 1 * this->moneytable_size();
  for (int i = 0; i < this->moneytable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneytable(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMoneyTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMoneyTable*>(&from));
}

void PKMoneyTable::MergeFrom(const PKMoneyTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneytable_.MergeFrom(from.moneytable_);
}

void PKMoneyTable::CopyFrom(const PKMoneyTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMoneyTable::IsInitialized() const {
  
  for (int i = 0; i < moneytable_size(); i++) {
    if (!this->moneytable(i).IsInitialized()) return false;
  }
  return true;
}

void PKMoneyTable::Swap(PKMoneyTable* other) {
  if (other != this) {
    moneytable_.Swap(&other->moneytable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMoneyTable::GetTypeName() const {
  return "PKMoneyTable";
}


// ===================================================================

#ifndef _MSC_VER
const int PKCardTable::kCardTableFieldNumber;
#endif  // !_MSC_VER

PKCardTable::PKCardTable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKCardTable::InitAsDefaultInstance() {
}

PKCardTable::PKCardTable(const PKCardTable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKCardTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKCardTable::~PKCardTable() {
  SharedDtor();
}

void PKCardTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKCardTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKCardTable& PKCardTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKCardTable* PKCardTable::default_instance_ = NULL;

PKCardTable* PKCardTable::New() const {
  return new PKCardTable;
}

void PKCardTable::Clear() {
  cardtable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKCardTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKCards CardTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_CardTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKCardTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKCards CardTable = 1;
  for (int i = 0; i < this->cardtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cardtable(i), output);
  }
  
}

int PKCardTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKCards CardTable = 1;
  total_size += 1 * this->cardtable_size();
  for (int i = 0; i < this->cardtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardtable(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKCardTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKCardTable*>(&from));
}

void PKCardTable::MergeFrom(const PKCardTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardtable_.MergeFrom(from.cardtable_);
}

void PKCardTable::CopyFrom(const PKCardTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKCardTable::IsInitialized() const {
  
  for (int i = 0; i < cardtable_size(); i++) {
    if (!this->cardtable(i).IsInitialized()) return false;
  }
  return true;
}

void PKCardTable::Swap(PKCardTable* other) {
  if (other != this) {
    cardtable_.Swap(&other->cardtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKCardTable::GetTypeName() const {
  return "PKCardTable";
}


// ===================================================================

#ifndef _MSC_VER
const int PKUITable::kUITableFieldNumber;
#endif  // !_MSC_VER

PKUITable::PKUITable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKUITable::InitAsDefaultInstance() {
}

PKUITable::PKUITable(const PKUITable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKUITable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKUITable::~PKUITable() {
  SharedDtor();
}

void PKUITable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKUITable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKUITable& PKUITable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKUITable* PKUITable::default_instance_ = NULL;

PKUITable* PKUITable::New() const {
  return new PKUITable;
}

void PKUITable::Clear() {
  uitable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKUITable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKUserInfo UITable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UITable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uitable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UITable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKUITable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKUserInfo UITable = 1;
  for (int i = 0; i < this->uitable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->uitable(i), output);
  }
  
}

int PKUITable::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKUserInfo UITable = 1;
  total_size += 1 * this->uitable_size();
  for (int i = 0; i < this->uitable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uitable(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKUITable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKUITable*>(&from));
}

void PKUITable::MergeFrom(const PKUITable& from) {
  GOOGLE_CHECK_NE(&from, this);
  uitable_.MergeFrom(from.uitable_);
}

void PKUITable::CopyFrom(const PKUITable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKUITable::IsInitialized() const {
  
  for (int i = 0; i < uitable_size(); i++) {
    if (!this->uitable(i).IsInitialized()) return false;
  }
  return true;
}

void PKUITable::Swap(PKUITable* other) {
  if (other != this) {
    uitable_.Swap(&other->uitable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKUITable::GetTypeName() const {
  return "PKUITable";
}


// ===================================================================

#ifndef _MSC_VER
const int PKRCRoomData::kMLGameMasterFieldNumber;
const int PKRCRoomData::kMLRoomIndexFieldNumber;
const int PKRCRoomData::kMLStateFieldNumber;
const int PKRCRoomData::kMOptionFieldNumber;
const int PKRCRoomData::kMTblUIFieldNumber;
const int PKRCRoomData::kMTblCardFieldNumber;
const int PKRCRoomData::kMTblMoneyFieldNumber;
const int PKRCRoomData::kMTblBettingMsgFieldNumber;
#endif  // !_MSC_VER

PKRCRoomData::PKRCRoomData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKRCRoomData::InitAsDefaultInstance() {
  m_option_ = const_cast< ::PKOption*>(&::PKOption::default_instance());
  m_tblui_ = const_cast< ::PKUITable*>(&::PKUITable::default_instance());
  m_tblcard_ = const_cast< ::PKCardTable*>(&::PKCardTable::default_instance());
  m_tblmoney_ = const_cast< ::PKMoneyTable*>(&::PKMoneyTable::default_instance());
  m_tblbettingmsg_ = const_cast< ::PKBettingMsgTable*>(&::PKBettingMsgTable::default_instance());
}

PKRCRoomData::PKRCRoomData(const PKRCRoomData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKRCRoomData::SharedCtor() {
  _cached_size_ = 0;
  m_lgamemaster_ = 0;
  m_lroomindex_ = 0;
  m_lstate_ = 0;
  m_option_ = NULL;
  m_tblui_ = NULL;
  m_tblcard_ = NULL;
  m_tblmoney_ = NULL;
  m_tblbettingmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKRCRoomData::~PKRCRoomData() {
  SharedDtor();
}

void PKRCRoomData::SharedDtor() {
  if (this != default_instance_) {
    delete m_option_;
    delete m_tblui_;
    delete m_tblcard_;
    delete m_tblmoney_;
    delete m_tblbettingmsg_;
  }
}

void PKRCRoomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKRCRoomData& PKRCRoomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKRCRoomData* PKRCRoomData::default_instance_ = NULL;

PKRCRoomData* PKRCRoomData::New() const {
  return new PKRCRoomData;
}

void PKRCRoomData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lgamemaster_ = 0;
    m_lroomindex_ = 0;
    m_lstate_ = 0;
    if (has_m_option()) {
      if (m_option_ != NULL) m_option_->::PKOption::Clear();
    }
    if (has_m_tblui()) {
      if (m_tblui_ != NULL) m_tblui_->::PKUITable::Clear();
    }
    if (has_m_tblcard()) {
      if (m_tblcard_ != NULL) m_tblcard_->::PKCardTable::Clear();
    }
    if (has_m_tblmoney()) {
      if (m_tblmoney_ != NULL) m_tblmoney_->::PKMoneyTable::Clear();
    }
    if (has_m_tblbettingmsg()) {
      if (m_tblbettingmsg_ != NULL) m_tblbettingmsg_->::PKBettingMsgTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKRCRoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lGameMaster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgamemaster_)));
          set_has_m_lgamemaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRoomIndex;
        break;
      }
      
      // required int32 m_lRoomIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRoomIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lroomindex_)));
          set_has_m_lroomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lState;
        break;
      }
      
      // required int32 m_lState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_option;
        break;
      }
      
      // required .PKOption m_option = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblUI;
        break;
      }
      
      // optional .PKUITable m_tblUI = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblUI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_tblCard;
        break;
      }
      
      // optional .PKCardTable m_tblCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_tblMoney;
        break;
      }
      
      // optional .PKMoneyTable m_tblMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_tblBettingMsg;
        break;
      }
      
      // optional .PKBettingMsgTable m_tblBettingMsg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblBettingMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblbettingmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKRCRoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lGameMaster = 1;
  if (has_m_lgamemaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lgamemaster(), output);
  }
  
  // required int32 m_lRoomIndex = 2;
  if (has_m_lroomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lroomindex(), output);
  }
  
  // required int32 m_lState = 3;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lstate(), output);
  }
  
  // required .PKOption m_option = 4;
  if (has_m_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_option(), output);
  }
  
  // optional .PKUITable m_tblUI = 5;
  if (has_m_tblui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_tblui(), output);
  }
  
  // optional .PKCardTable m_tblCard = 6;
  if (has_m_tblcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->m_tblcard(), output);
  }
  
  // optional .PKMoneyTable m_tblMoney = 7;
  if (has_m_tblmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->m_tblmoney(), output);
  }
  
  // optional .PKBettingMsgTable m_tblBettingMsg = 8;
  if (has_m_tblbettingmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->m_tblbettingmsg(), output);
  }
  
}

int PKRCRoomData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lGameMaster = 1;
    if (has_m_lgamemaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgamemaster());
    }
    
    // required int32 m_lRoomIndex = 2;
    if (has_m_lroomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lroomindex());
    }
    
    // required int32 m_lState = 3;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lstate());
    }
    
    // required .PKOption m_option = 4;
    if (has_m_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_option());
    }
    
    // optional .PKUITable m_tblUI = 5;
    if (has_m_tblui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblui());
    }
    
    // optional .PKCardTable m_tblCard = 6;
    if (has_m_tblcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblcard());
    }
    
    // optional .PKMoneyTable m_tblMoney = 7;
    if (has_m_tblmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblmoney());
    }
    
    // optional .PKBettingMsgTable m_tblBettingMsg = 8;
    if (has_m_tblbettingmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblbettingmsg());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKRCRoomData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKRCRoomData*>(&from));
}

void PKRCRoomData::MergeFrom(const PKRCRoomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lgamemaster()) {
      set_m_lgamemaster(from.m_lgamemaster());
    }
    if (from.has_m_lroomindex()) {
      set_m_lroomindex(from.m_lroomindex());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_option()) {
      mutable_m_option()->::PKOption::MergeFrom(from.m_option());
    }
    if (from.has_m_tblui()) {
      mutable_m_tblui()->::PKUITable::MergeFrom(from.m_tblui());
    }
    if (from.has_m_tblcard()) {
      mutable_m_tblcard()->::PKCardTable::MergeFrom(from.m_tblcard());
    }
    if (from.has_m_tblmoney()) {
      mutable_m_tblmoney()->::PKMoneyTable::MergeFrom(from.m_tblmoney());
    }
    if (from.has_m_tblbettingmsg()) {
      mutable_m_tblbettingmsg()->::PKBettingMsgTable::MergeFrom(from.m_tblbettingmsg());
    }
  }
}

void PKRCRoomData::CopyFrom(const PKRCRoomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKRCRoomData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_option()) {
    if (!this->m_option().IsInitialized()) return false;
  }
  if (has_m_tblui()) {
    if (!this->m_tblui().IsInitialized()) return false;
  }
  if (has_m_tblcard()) {
    if (!this->m_tblcard().IsInitialized()) return false;
  }
  if (has_m_tblmoney()) {
    if (!this->m_tblmoney().IsInitialized()) return false;
  }
  if (has_m_tblbettingmsg()) {
    if (!this->m_tblbettingmsg().IsInitialized()) return false;
  }
  return true;
}

void PKRCRoomData::Swap(PKRCRoomData* other) {
  if (other != this) {
    std::swap(m_lgamemaster_, other->m_lgamemaster_);
    std::swap(m_lroomindex_, other->m_lroomindex_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_option_, other->m_option_);
    std::swap(m_tblui_, other->m_tblui_);
    std::swap(m_tblcard_, other->m_tblcard_);
    std::swap(m_tblmoney_, other->m_tblmoney_);
    std::swap(m_tblbettingmsg_, other->m_tblbettingmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKRCRoomData::GetTypeName() const {
  return "PKRCRoomData";
}


// ===================================================================

#ifndef _MSC_VER
const int PKSPUserBaseInfo::kMLUSNFieldNumber;
const int PKSPUserBaseInfo::kMSUserIDFieldNumber;
const int PKSPUserBaseInfo::kMSNickNameFieldNumber;
const int PKSPUserBaseInfo::kMLUSCFieldNumber;
const int PKSPUserBaseInfo::kMLJuminFieldNumber;
const int PKSPUserBaseInfo::kMLFirstUSNFieldNumber;
const int PKSPUserBaseInfo::kMLAgeIndexFieldNumber;
const int PKSPUserBaseInfo::kMLJobIndexFieldNumber;
const int PKSPUserBaseInfo::kMLRegionIndexFieldNumber;
const int PKSPUserBaseInfo::kMLGuildIndexFieldNumber;
const int PKSPUserBaseInfo::kMLMemberIndexFieldNumber;
const int PKSPUserBaseInfo::kMLClientIPFieldNumber;
const int PKSPUserBaseInfo::kMLGatewayIPFieldNumber;
const int PKSPUserBaseInfo::kMLMacAddressFieldNumber;
const int PKSPUserBaseInfo::kMSMobileInfoFieldNumber;
const int PKSPUserBaseInfo::kMSAuthKeyFieldNumber;
#endif  // !_MSC_VER

PKSPUserBaseInfo::PKSPUserBaseInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKSPUserBaseInfo::InitAsDefaultInstance() {
}

PKSPUserBaseInfo::PKSPUserBaseInfo(const PKSPUserBaseInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKSPUserBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_suserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lusc_ = 0;
  m_ljumin_ = 0;
  m_lfirstusn_ = 0;
  m_lageindex_ = 0;
  m_ljobindex_ = 0;
  m_lregionindex_ = 0;
  m_lguildindex_ = 0;
  m_lmemberindex_ = 0;
  m_lclientip_ = 0;
  m_lgatewayip_ = 0;
  m_lmacaddress_ = 0;
  m_smobileinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sauthkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKSPUserBaseInfo::~PKSPUserBaseInfo() {
  SharedDtor();
}

void PKSPUserBaseInfo::SharedDtor() {
  if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_suserid_;
  }
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smobileinfo_;
  }
  if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sauthkey_;
  }
  if (this != default_instance_) {
  }
}

void PKSPUserBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKSPUserBaseInfo& PKSPUserBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKSPUserBaseInfo* PKSPUserBaseInfo::default_instance_ = NULL;

PKSPUserBaseInfo* PKSPUserBaseInfo::New() const {
  return new PKSPUserBaseInfo;
}

void PKSPUserBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_suserid()) {
      if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
        m_suserid_->clear();
      }
    }
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    m_lusc_ = 0;
    m_ljumin_ = 0;
    m_lfirstusn_ = 0;
    m_lageindex_ = 0;
    m_ljobindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lregionindex_ = 0;
    m_lguildindex_ = 0;
    m_lmemberindex_ = 0;
    m_lclientip_ = 0;
    m_lgatewayip_ = 0;
    m_lmacaddress_ = 0;
    if (has_m_smobileinfo()) {
      if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
        m_smobileinfo_->clear();
      }
    }
    if (has_m_sauthkey()) {
      if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
        m_sauthkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKSPUserBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sUserID;
        break;
      }
      
      // required string m_sUserID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_suserid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lUSC;
        break;
      }
      
      // required int32 m_lUSC = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lUSC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusc_)));
          set_has_m_lusc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lJumin;
        break;
      }
      
      // required int32 m_lJumin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJumin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ljumin_)));
          set_has_m_ljumin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lFirstUSN;
        break;
      }
      
      // required int32 m_lFirstUSN = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lFirstUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lfirstusn_)));
          set_has_m_lfirstusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lAgeIndex;
        break;
      }
      
      // required int32 m_lAgeIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAgeIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lageindex_)));
          set_has_m_lageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lJobIndex;
        break;
      }
      
      // required int32 m_lJobIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJobIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ljobindex_)));
          set_has_m_ljobindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lRegionIndex;
        break;
      }
      
      // required int32 m_lRegionIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRegionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lregionindex_)));
          set_has_m_lregionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lGuildIndex;
        break;
      }
      
      // required int32 m_lGuildIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGuildIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lguildindex_)));
          set_has_m_lguildindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lMemberIndex;
        break;
      }
      
      // required int32 m_lMemberIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMemberIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmemberindex_)));
          set_has_m_lmemberindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_lClientIP;
        break;
      }
      
      // required int32 m_lClientIP = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lClientIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lclientip_)));
          set_has_m_lclientip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_lGatewayIP;
        break;
      }
      
      // required int32 m_lGatewayIP = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGatewayIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgatewayip_)));
          set_has_m_lgatewayip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_lMacAddress;
        break;
      }
      
      // required int32 m_lMacAddress = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMacAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmacaddress_)));
          set_has_m_lmacaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_sMobileInfo;
        break;
      }
      
      // required string m_sMobileInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMobileInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smobileinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_sAuthKey;
        break;
      }
      
      // required string m_sAuthKey = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAuthKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sauthkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKSPUserBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required string m_sUserID = 2;
  if (has_m_suserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_suserid(), output);
  }
  
  // required string m_sNickName = 3;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_snickname(), output);
  }
  
  // required int32 m_lUSC = 4;
  if (has_m_lusc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lusc(), output);
  }
  
  // required int32 m_lJumin = 5;
  if (has_m_ljumin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ljumin(), output);
  }
  
  // required int32 m_lFirstUSN = 6;
  if (has_m_lfirstusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lfirstusn(), output);
  }
  
  // required int32 m_lAgeIndex = 7;
  if (has_m_lageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lageindex(), output);
  }
  
  // required int32 m_lJobIndex = 8;
  if (has_m_ljobindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_ljobindex(), output);
  }
  
  // required int32 m_lRegionIndex = 9;
  if (has_m_lregionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_lregionindex(), output);
  }
  
  // required int32 m_lGuildIndex = 10;
  if (has_m_lguildindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_lguildindex(), output);
  }
  
  // required int32 m_lMemberIndex = 11;
  if (has_m_lmemberindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_lmemberindex(), output);
  }
  
  // required int32 m_lClientIP = 12;
  if (has_m_lclientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_lclientip(), output);
  }
  
  // required int32 m_lGatewayIP = 13;
  if (has_m_lgatewayip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_lgatewayip(), output);
  }
  
  // required int32 m_lMacAddress = 14;
  if (has_m_lmacaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_lmacaddress(), output);
  }
  
  // required string m_sMobileInfo = 15;
  if (has_m_smobileinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_smobileinfo(), output);
  }
  
  // required string m_sAuthKey = 16;
  if (has_m_sauthkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->m_sauthkey(), output);
  }
  
}

int PKSPUserBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required string m_sUserID = 2;
    if (has_m_suserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_suserid());
    }
    
    // required string m_sNickName = 3;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required int32 m_lUSC = 4;
    if (has_m_lusc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusc());
    }
    
    // required int32 m_lJumin = 5;
    if (has_m_ljumin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ljumin());
    }
    
    // required int32 m_lFirstUSN = 6;
    if (has_m_lfirstusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lfirstusn());
    }
    
    // required int32 m_lAgeIndex = 7;
    if (has_m_lageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lageindex());
    }
    
    // required int32 m_lJobIndex = 8;
    if (has_m_ljobindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ljobindex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_lRegionIndex = 9;
    if (has_m_lregionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lregionindex());
    }
    
    // required int32 m_lGuildIndex = 10;
    if (has_m_lguildindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lguildindex());
    }
    
    // required int32 m_lMemberIndex = 11;
    if (has_m_lmemberindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmemberindex());
    }
    
    // required int32 m_lClientIP = 12;
    if (has_m_lclientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lclientip());
    }
    
    // required int32 m_lGatewayIP = 13;
    if (has_m_lgatewayip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgatewayip());
    }
    
    // required int32 m_lMacAddress = 14;
    if (has_m_lmacaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmacaddress());
    }
    
    // required string m_sMobileInfo = 15;
    if (has_m_smobileinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smobileinfo());
    }
    
    // required string m_sAuthKey = 16;
    if (has_m_sauthkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sauthkey());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKSPUserBaseInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKSPUserBaseInfo*>(&from));
}

void PKSPUserBaseInfo::MergeFrom(const PKSPUserBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_suserid()) {
      set_m_suserid(from.m_suserid());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_lusc()) {
      set_m_lusc(from.m_lusc());
    }
    if (from.has_m_ljumin()) {
      set_m_ljumin(from.m_ljumin());
    }
    if (from.has_m_lfirstusn()) {
      set_m_lfirstusn(from.m_lfirstusn());
    }
    if (from.has_m_lageindex()) {
      set_m_lageindex(from.m_lageindex());
    }
    if (from.has_m_ljobindex()) {
      set_m_ljobindex(from.m_ljobindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lregionindex()) {
      set_m_lregionindex(from.m_lregionindex());
    }
    if (from.has_m_lguildindex()) {
      set_m_lguildindex(from.m_lguildindex());
    }
    if (from.has_m_lmemberindex()) {
      set_m_lmemberindex(from.m_lmemberindex());
    }
    if (from.has_m_lclientip()) {
      set_m_lclientip(from.m_lclientip());
    }
    if (from.has_m_lgatewayip()) {
      set_m_lgatewayip(from.m_lgatewayip());
    }
    if (from.has_m_lmacaddress()) {
      set_m_lmacaddress(from.m_lmacaddress());
    }
    if (from.has_m_smobileinfo()) {
      set_m_smobileinfo(from.m_smobileinfo());
    }
    if (from.has_m_sauthkey()) {
      set_m_sauthkey(from.m_sauthkey());
    }
  }
}

void PKSPUserBaseInfo::CopyFrom(const PKSPUserBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKSPUserBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;
  
  return true;
}

void PKSPUserBaseInfo::Swap(PKSPUserBaseInfo* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_suserid_, other->m_suserid_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_lusc_, other->m_lusc_);
    std::swap(m_ljumin_, other->m_ljumin_);
    std::swap(m_lfirstusn_, other->m_lfirstusn_);
    std::swap(m_lageindex_, other->m_lageindex_);
    std::swap(m_ljobindex_, other->m_ljobindex_);
    std::swap(m_lregionindex_, other->m_lregionindex_);
    std::swap(m_lguildindex_, other->m_lguildindex_);
    std::swap(m_lmemberindex_, other->m_lmemberindex_);
    std::swap(m_lclientip_, other->m_lclientip_);
    std::swap(m_lgatewayip_, other->m_lgatewayip_);
    std::swap(m_lmacaddress_, other->m_lmacaddress_);
    std::swap(m_smobileinfo_, other->m_smobileinfo_);
    std::swap(m_sauthkey_, other->m_sauthkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKSPUserBaseInfo::GetTypeName() const {
  return "PKSPUserBaseInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_Entry::kMNVersionFieldNumber;
const int PKMsgCS_Entry::kMBWelcomeSoundFieldNumber;
const int PKMsgCS_Entry::kMLSoundTypeFieldNumber;
const int PKMsgCS_Entry::kMSNickNameFieldNumber;
const int PKMsgCS_Entry::kMSAvtFieldNumber;
const int PKMsgCS_Entry::kMLCLevelFieldNumber;
const int PKMsgCS_Entry::kMLSexFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_Entry::PKMsgCS_Entry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_Entry::InitAsDefaultInstance() {
}

PKMsgCS_Entry::PKMsgCS_Entry(const PKMsgCS_Entry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_Entry::SharedCtor() {
  _cached_size_ = 0;
  m_nversion_ = 0;
  m_bwelcomesound_ = 0;
  m_lsoundtype_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_Entry::~PKMsgCS_Entry() {
  SharedDtor();
}

void PKMsgCS_Entry::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgCS_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_Entry& PKMsgCS_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_Entry* PKMsgCS_Entry::default_instance_ = NULL;

PKMsgCS_Entry* PKMsgCS_Entry::New() const {
  return new PKMsgCS_Entry;
}

void PKMsgCS_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nversion_ = 0;
    m_bwelcomesound_ = 0;
    m_lsoundtype_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nversion_)));
          set_has_m_nversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bWelcomeSound;
        break;
      }
      
      // required sint32 m_bWelcomeSound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bWelcomeSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bwelcomesound_)));
          set_has_m_bwelcomesound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_sAvt;
        break;
      }
      
      // required string m_sAvt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lCLevel;
        break;
      }
      
      // required sint32 m_lCLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lSex;
        break;
      }
      
      // required sint32 m_lSex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsex_)));
          set_has_m_lsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nVersion = 1;
  if (has_m_nversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nversion(), output);
  }
  
  // required sint32 m_bWelcomeSound = 2;
  if (has_m_bwelcomesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bwelcomesound(), output);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lsoundtype(), output);
  }
  
  // required string m_sNickName = 4;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_snickname(), output);
  }
  
  // required string m_sAvt = 5;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_savt(), output);
  }
  
  // required sint32 m_lCLevel = 6;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lclevel(), output);
  }
  
  // required sint32 m_lSex = 7;
  if (has_m_lsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lsex(), output);
  }
  
}

int PKMsgCS_Entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nVersion = 1;
    if (has_m_nversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nversion());
    }
    
    // required sint32 m_bWelcomeSound = 2;
    if (has_m_bwelcomesound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bwelcomesound());
    }
    
    // required sint32 m_lSoundType = 3;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
    // required string m_sNickName = 4;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sAvt = 5;
    if (has_m_savt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required sint32 m_lCLevel = 6;
    if (has_m_lclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lclevel());
    }
    
    // required sint32 m_lSex = 7;
    if (has_m_lsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_Entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_Entry*>(&from));
}

void PKMsgCS_Entry::MergeFrom(const PKMsgCS_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nversion()) {
      set_m_nversion(from.m_nversion());
    }
    if (from.has_m_bwelcomesound()) {
      set_m_bwelcomesound(from.m_bwelcomesound());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsex()) {
      set_m_lsex(from.m_lsex());
    }
  }
}

void PKMsgCS_Entry::CopyFrom(const PKMsgCS_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void PKMsgCS_Entry::Swap(PKMsgCS_Entry* other) {
  if (other != this) {
    std::swap(m_nversion_, other->m_nversion_);
    std::swap(m_bwelcomesound_, other->m_bwelcomesound_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsex_, other->m_lsex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_Entry::GetTypeName() const {
  return "PKMsgCS_Entry";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgCS_Observe::PKMsgCS_Observe()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_Observe::InitAsDefaultInstance() {
}

PKMsgCS_Observe::PKMsgCS_Observe(const PKMsgCS_Observe& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_Observe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_Observe::~PKMsgCS_Observe() {
  SharedDtor();
}

void PKMsgCS_Observe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_Observe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_Observe& PKMsgCS_Observe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_Observe* PKMsgCS_Observe::default_instance_ = NULL;

PKMsgCS_Observe* PKMsgCS_Observe::New() const {
  return new PKMsgCS_Observe;
}

void PKMsgCS_Observe::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_Observe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgCS_Observe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgCS_Observe::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_Observe::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_Observe*>(&from));
}

void PKMsgCS_Observe::MergeFrom(const PKMsgCS_Observe& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgCS_Observe::CopyFrom(const PKMsgCS_Observe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_Observe::IsInitialized() const {
  
  return true;
}

void PKMsgCS_Observe::Swap(PKMsgCS_Observe* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_Observe::GetTypeName() const {
  return "PKMsgCS_Observe";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgCS_Start::PKMsgCS_Start()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_Start::InitAsDefaultInstance() {
}

PKMsgCS_Start::PKMsgCS_Start(const PKMsgCS_Start& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_Start::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_Start::~PKMsgCS_Start() {
  SharedDtor();
}

void PKMsgCS_Start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_Start& PKMsgCS_Start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_Start* PKMsgCS_Start::default_instance_ = NULL;

PKMsgCS_Start* PKMsgCS_Start::New() const {
  return new PKMsgCS_Start;
}

void PKMsgCS_Start::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgCS_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgCS_Start::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_Start::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_Start*>(&from));
}

void PKMsgCS_Start::MergeFrom(const PKMsgCS_Start& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgCS_Start::CopyFrom(const PKMsgCS_Start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_Start::IsInitialized() const {
  
  return true;
}

void PKMsgCS_Start::Swap(PKMsgCS_Start* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_Start::GetTypeName() const {
  return "PKMsgCS_Start";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_SelectedCardReq::kMLCardIdxFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_SelectedCardReq::PKMsgCS_SelectedCardReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_SelectedCardReq::InitAsDefaultInstance() {
}

PKMsgCS_SelectedCardReq::PKMsgCS_SelectedCardReq(const PKMsgCS_SelectedCardReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_SelectedCardReq::SharedCtor() {
  _cached_size_ = 0;
  m_lcardidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_SelectedCardReq::~PKMsgCS_SelectedCardReq() {
  SharedDtor();
}

void PKMsgCS_SelectedCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_SelectedCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_SelectedCardReq& PKMsgCS_SelectedCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_SelectedCardReq* PKMsgCS_SelectedCardReq::default_instance_ = NULL;

PKMsgCS_SelectedCardReq* PKMsgCS_SelectedCardReq::New() const {
  return new PKMsgCS_SelectedCardReq;
}

void PKMsgCS_SelectedCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lcardidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_SelectedCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lCardIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardidx_)));
          set_has_m_lcardidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_SelectedCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lCardIdx = 1;
  if (has_m_lcardidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lcardidx(), output);
  }
  
}

int PKMsgCS_SelectedCardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lCardIdx = 1;
    if (has_m_lcardidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardidx());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_SelectedCardReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_SelectedCardReq*>(&from));
}

void PKMsgCS_SelectedCardReq::MergeFrom(const PKMsgCS_SelectedCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lcardidx()) {
      set_m_lcardidx(from.m_lcardidx());
    }
  }
}

void PKMsgCS_SelectedCardReq::CopyFrom(const PKMsgCS_SelectedCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_SelectedCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_SelectedCardReq::Swap(PKMsgCS_SelectedCardReq* other) {
  if (other != this) {
    std::swap(m_lcardidx_, other->m_lcardidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_SelectedCardReq::GetTypeName() const {
  return "PKMsgCS_SelectedCardReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_BettingReq::kMLBetTypeFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_BettingReq::PKMsgCS_BettingReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_BettingReq::InitAsDefaultInstance() {
}

PKMsgCS_BettingReq::PKMsgCS_BettingReq(const PKMsgCS_BettingReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_BettingReq::SharedCtor() {
  _cached_size_ = 0;
  m_lbettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_BettingReq::~PKMsgCS_BettingReq() {
  SharedDtor();
}

void PKMsgCS_BettingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_BettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_BettingReq& PKMsgCS_BettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_BettingReq* PKMsgCS_BettingReq::default_instance_ = NULL;

PKMsgCS_BettingReq* PKMsgCS_BettingReq::New() const {
  return new PKMsgCS_BettingReq;
}

void PKMsgCS_BettingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbettype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_BettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_BettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBetType = 1;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbettype(), output);
  }
  
}

int PKMsgCS_BettingReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBetType = 1;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_BettingReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_BettingReq*>(&from));
}

void PKMsgCS_BettingReq::MergeFrom(const PKMsgCS_BettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
  }
}

void PKMsgCS_BettingReq::CopyFrom(const PKMsgCS_BettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_BettingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_BettingReq::Swap(PKMsgCS_BettingReq* other) {
  if (other != this) {
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_BettingReq::GetTypeName() const {
  return "PKMsgCS_BettingReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_ChoiceRemoveCard::kMLUSNFieldNumber;
const int PKMsgCS_ChoiceRemoveCard::kMNRemoveCardIndexFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_ChoiceRemoveCard::PKMsgCS_ChoiceRemoveCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_ChoiceRemoveCard::InitAsDefaultInstance() {
}

PKMsgCS_ChoiceRemoveCard::PKMsgCS_ChoiceRemoveCard(const PKMsgCS_ChoiceRemoveCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_ChoiceRemoveCard::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nremovecardindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_ChoiceRemoveCard::~PKMsgCS_ChoiceRemoveCard() {
  SharedDtor();
}

void PKMsgCS_ChoiceRemoveCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_ChoiceRemoveCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_ChoiceRemoveCard& PKMsgCS_ChoiceRemoveCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_ChoiceRemoveCard* PKMsgCS_ChoiceRemoveCard::default_instance_ = NULL;

PKMsgCS_ChoiceRemoveCard* PKMsgCS_ChoiceRemoveCard::New() const {
  return new PKMsgCS_ChoiceRemoveCard;
}

void PKMsgCS_ChoiceRemoveCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nremovecardindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_ChoiceRemoveCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nRemoveCardIndex;
        break;
      }
      
      // required int32 m_nRemoveCardIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRemoveCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nremovecardindex_)));
          set_has_m_nremovecardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_ChoiceRemoveCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nRemoveCardIndex = 2;
  if (has_m_nremovecardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nremovecardindex(), output);
  }
  
}

int PKMsgCS_ChoiceRemoveCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nRemoveCardIndex = 2;
    if (has_m_nremovecardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nremovecardindex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_ChoiceRemoveCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_ChoiceRemoveCard*>(&from));
}

void PKMsgCS_ChoiceRemoveCard::MergeFrom(const PKMsgCS_ChoiceRemoveCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nremovecardindex()) {
      set_m_nremovecardindex(from.m_nremovecardindex());
    }
  }
}

void PKMsgCS_ChoiceRemoveCard::CopyFrom(const PKMsgCS_ChoiceRemoveCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_ChoiceRemoveCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgCS_ChoiceRemoveCard::Swap(PKMsgCS_ChoiceRemoveCard* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nremovecardindex_, other->m_nremovecardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_ChoiceRemoveCard::GetTypeName() const {
  return "PKMsgCS_ChoiceRemoveCard";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_Purge::kMLTypeFieldNumber;
const int PKMsgCS_Purge::kMLPurgeUSNFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_Purge::PKMsgCS_Purge()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_Purge::InitAsDefaultInstance() {
}

PKMsgCS_Purge::PKMsgCS_Purge(const PKMsgCS_Purge& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_Purge::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_lpurgeusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_Purge::~PKMsgCS_Purge() {
  SharedDtor();
}

void PKMsgCS_Purge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_Purge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_Purge& PKMsgCS_Purge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_Purge* PKMsgCS_Purge::default_instance_ = NULL;

PKMsgCS_Purge* PKMsgCS_Purge::New() const {
  return new PKMsgCS_Purge;
}

void PKMsgCS_Purge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_lpurgeusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_Purge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lPurgeUSN;
        break;
      }
      
      // required sint32 m_lPurgeUSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPurgeUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lpurgeusn_)));
          set_has_m_lpurgeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_Purge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint32 m_lPurgeUSN = 2;
  if (has_m_lpurgeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lpurgeusn(), output);
  }
  
}

int PKMsgCS_Purge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint32 m_lPurgeUSN = 2;
    if (has_m_lpurgeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lpurgeusn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_Purge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_Purge*>(&from));
}

void PKMsgCS_Purge::MergeFrom(const PKMsgCS_Purge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_lpurgeusn()) {
      set_m_lpurgeusn(from.m_lpurgeusn());
    }
  }
}

void PKMsgCS_Purge::CopyFrom(const PKMsgCS_Purge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_Purge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgCS_Purge::Swap(PKMsgCS_Purge* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_lpurgeusn_, other->m_lpurgeusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_Purge::GetTypeName() const {
  return "PKMsgCS_Purge";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_Abuse::kMLTypeFieldNumber;
const int PKMsgCS_Abuse::kMSDayFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_Abuse::PKMsgCS_Abuse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_Abuse::InitAsDefaultInstance() {
}

PKMsgCS_Abuse::PKMsgCS_Abuse(const PKMsgCS_Abuse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_Abuse::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_sday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_Abuse::~PKMsgCS_Abuse() {
  SharedDtor();
}

void PKMsgCS_Abuse::SharedDtor() {
  if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sday_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgCS_Abuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_Abuse& PKMsgCS_Abuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_Abuse* PKMsgCS_Abuse::default_instance_ = NULL;

PKMsgCS_Abuse* PKMsgCS_Abuse::New() const {
  return new PKMsgCS_Abuse;
}

void PKMsgCS_Abuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    if (has_m_sday()) {
      if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
        m_sday_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_Abuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sDay;
        break;
      }
      
      // required string m_sDay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_Abuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required string m_sDay = 2;
  if (has_m_sday()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_sday(), output);
  }
  
}

int PKMsgCS_Abuse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required string m_sDay = 2;
    if (has_m_sday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sday());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_Abuse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_Abuse*>(&from));
}

void PKMsgCS_Abuse::MergeFrom(const PKMsgCS_Abuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_sday()) {
      set_m_sday(from.m_sday());
    }
  }
}

void PKMsgCS_Abuse::CopyFrom(const PKMsgCS_Abuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_Abuse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgCS_Abuse::Swap(PKMsgCS_Abuse* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_sday_, other->m_sday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_Abuse::GetTypeName() const {
  return "PKMsgCS_Abuse";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_AskPurgeVote::kMLPurgeUSNFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_AskPurgeVote::PKMsgCS_AskPurgeVote()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_AskPurgeVote::InitAsDefaultInstance() {
}

PKMsgCS_AskPurgeVote::PKMsgCS_AskPurgeVote(const PKMsgCS_AskPurgeVote& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_AskPurgeVote::SharedCtor() {
  _cached_size_ = 0;
  m_lpurgeusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_AskPurgeVote::~PKMsgCS_AskPurgeVote() {
  SharedDtor();
}

void PKMsgCS_AskPurgeVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_AskPurgeVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_AskPurgeVote& PKMsgCS_AskPurgeVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_AskPurgeVote* PKMsgCS_AskPurgeVote::default_instance_ = NULL;

PKMsgCS_AskPurgeVote* PKMsgCS_AskPurgeVote::New() const {
  return new PKMsgCS_AskPurgeVote;
}

void PKMsgCS_AskPurgeVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lpurgeusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_AskPurgeVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lPurgeUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lpurgeusn_)));
          set_has_m_lpurgeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_AskPurgeVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lPurgeUSN = 1;
  if (has_m_lpurgeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lpurgeusn(), output);
  }
  
}

int PKMsgCS_AskPurgeVote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lPurgeUSN = 1;
    if (has_m_lpurgeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lpurgeusn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_AskPurgeVote::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_AskPurgeVote*>(&from));
}

void PKMsgCS_AskPurgeVote::MergeFrom(const PKMsgCS_AskPurgeVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lpurgeusn()) {
      set_m_lpurgeusn(from.m_lpurgeusn());
    }
  }
}

void PKMsgCS_AskPurgeVote::CopyFrom(const PKMsgCS_AskPurgeVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_AskPurgeVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_AskPurgeVote::Swap(PKMsgCS_AskPurgeVote* other) {
  if (other != this) {
    std::swap(m_lpurgeusn_, other->m_lpurgeusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_AskPurgeVote::GetTypeName() const {
  return "PKMsgCS_AskPurgeVote";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_AnswerPurgeVote::kMLAnswerFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_AnswerPurgeVote::PKMsgCS_AnswerPurgeVote()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_AnswerPurgeVote::InitAsDefaultInstance() {
}

PKMsgCS_AnswerPurgeVote::PKMsgCS_AnswerPurgeVote(const PKMsgCS_AnswerPurgeVote& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_AnswerPurgeVote::SharedCtor() {
  _cached_size_ = 0;
  m_lanswer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_AnswerPurgeVote::~PKMsgCS_AnswerPurgeVote() {
  SharedDtor();
}

void PKMsgCS_AnswerPurgeVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_AnswerPurgeVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_AnswerPurgeVote& PKMsgCS_AnswerPurgeVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_AnswerPurgeVote* PKMsgCS_AnswerPurgeVote::default_instance_ = NULL;

PKMsgCS_AnswerPurgeVote* PKMsgCS_AnswerPurgeVote::New() const {
  return new PKMsgCS_AnswerPurgeVote;
}

void PKMsgCS_AnswerPurgeVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lanswer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_AnswerPurgeVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lAnswer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lanswer_)));
          set_has_m_lanswer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_AnswerPurgeVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lAnswer = 1;
  if (has_m_lanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lanswer(), output);
  }
  
}

int PKMsgCS_AnswerPurgeVote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lAnswer = 1;
    if (has_m_lanswer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lanswer());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_AnswerPurgeVote::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_AnswerPurgeVote*>(&from));
}

void PKMsgCS_AnswerPurgeVote::MergeFrom(const PKMsgCS_AnswerPurgeVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lanswer()) {
      set_m_lanswer(from.m_lanswer());
    }
  }
}

void PKMsgCS_AnswerPurgeVote::CopyFrom(const PKMsgCS_AnswerPurgeVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_AnswerPurgeVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_AnswerPurgeVote::Swap(PKMsgCS_AnswerPurgeVote* other) {
  if (other != this) {
    std::swap(m_lanswer_, other->m_lanswer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_AnswerPurgeVote::GetTypeName() const {
  return "PKMsgCS_AnswerPurgeVote";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_WaitingUserTicketReq::kMNTypeFieldNumber;
const int PKMsgCS_WaitingUserTicketReq::kMBValueFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_WaitingUserTicketReq::PKMsgCS_WaitingUserTicketReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_WaitingUserTicketReq::InitAsDefaultInstance() {
}

PKMsgCS_WaitingUserTicketReq::PKMsgCS_WaitingUserTicketReq(const PKMsgCS_WaitingUserTicketReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_WaitingUserTicketReq::SharedCtor() {
  _cached_size_ = 0;
  m_ntype_ = 0;
  m_bvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_WaitingUserTicketReq::~PKMsgCS_WaitingUserTicketReq() {
  SharedDtor();
}

void PKMsgCS_WaitingUserTicketReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_WaitingUserTicketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_WaitingUserTicketReq& PKMsgCS_WaitingUserTicketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_WaitingUserTicketReq* PKMsgCS_WaitingUserTicketReq::default_instance_ = NULL;

PKMsgCS_WaitingUserTicketReq* PKMsgCS_WaitingUserTicketReq::New() const {
  return new PKMsgCS_WaitingUserTicketReq;
}

void PKMsgCS_WaitingUserTicketReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntype_ = 0;
    m_bvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_WaitingUserTicketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bValue;
        break;
      }
      
      // required sint32 m_bValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bvalue_)));
          set_has_m_bvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_WaitingUserTicketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntype(), output);
  }
  
  // required sint32 m_bValue = 2;
  if (has_m_bvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bvalue(), output);
  }
  
}

int PKMsgCS_WaitingUserTicketReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nType = 1;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint32 m_bValue = 2;
    if (has_m_bvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bvalue());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_WaitingUserTicketReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_WaitingUserTicketReq*>(&from));
}

void PKMsgCS_WaitingUserTicketReq::MergeFrom(const PKMsgCS_WaitingUserTicketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_bvalue()) {
      set_m_bvalue(from.m_bvalue());
    }
  }
}

void PKMsgCS_WaitingUserTicketReq::CopyFrom(const PKMsgCS_WaitingUserTicketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_WaitingUserTicketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgCS_WaitingUserTicketReq::Swap(PKMsgCS_WaitingUserTicketReq* other) {
  if (other != this) {
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(m_bvalue_, other->m_bvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_WaitingUserTicketReq::GetTypeName() const {
  return "PKMsgCS_WaitingUserTicketReq";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgCS_UpdateWaitingUserInfoReq::PKMsgCS_UpdateWaitingUserInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_UpdateWaitingUserInfoReq::InitAsDefaultInstance() {
}

PKMsgCS_UpdateWaitingUserInfoReq::PKMsgCS_UpdateWaitingUserInfoReq(const PKMsgCS_UpdateWaitingUserInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_UpdateWaitingUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_UpdateWaitingUserInfoReq::~PKMsgCS_UpdateWaitingUserInfoReq() {
  SharedDtor();
}

void PKMsgCS_UpdateWaitingUserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_UpdateWaitingUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_UpdateWaitingUserInfoReq& PKMsgCS_UpdateWaitingUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_UpdateWaitingUserInfoReq* PKMsgCS_UpdateWaitingUserInfoReq::default_instance_ = NULL;

PKMsgCS_UpdateWaitingUserInfoReq* PKMsgCS_UpdateWaitingUserInfoReq::New() const {
  return new PKMsgCS_UpdateWaitingUserInfoReq;
}

void PKMsgCS_UpdateWaitingUserInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_UpdateWaitingUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgCS_UpdateWaitingUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgCS_UpdateWaitingUserInfoReq::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_UpdateWaitingUserInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_UpdateWaitingUserInfoReq*>(&from));
}

void PKMsgCS_UpdateWaitingUserInfoReq::MergeFrom(const PKMsgCS_UpdateWaitingUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgCS_UpdateWaitingUserInfoReq::CopyFrom(const PKMsgCS_UpdateWaitingUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_UpdateWaitingUserInfoReq::IsInitialized() const {
  
  return true;
}

void PKMsgCS_UpdateWaitingUserInfoReq::Swap(PKMsgCS_UpdateWaitingUserInfoReq* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_UpdateWaitingUserInfoReq::GetTypeName() const {
  return "PKMsgCS_UpdateWaitingUserInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_SoundType::kMLSoundTypeFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_SoundType::PKMsgCS_SoundType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_SoundType::InitAsDefaultInstance() {
}

PKMsgCS_SoundType::PKMsgCS_SoundType(const PKMsgCS_SoundType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_SoundType::SharedCtor() {
  _cached_size_ = 0;
  m_lsoundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_SoundType::~PKMsgCS_SoundType() {
  SharedDtor();
}

void PKMsgCS_SoundType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_SoundType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_SoundType& PKMsgCS_SoundType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_SoundType* PKMsgCS_SoundType::default_instance_ = NULL;

PKMsgCS_SoundType* PKMsgCS_SoundType::New() const {
  return new PKMsgCS_SoundType;
}

void PKMsgCS_SoundType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lsoundtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_SoundType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lSoundType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_SoundType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lSoundType = 1;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lsoundtype(), output);
  }
  
}

int PKMsgCS_SoundType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lSoundType = 1;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_SoundType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_SoundType*>(&from));
}

void PKMsgCS_SoundType::MergeFrom(const PKMsgCS_SoundType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
  }
}

void PKMsgCS_SoundType::CopyFrom(const PKMsgCS_SoundType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_SoundType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_SoundType::Swap(PKMsgCS_SoundType* other) {
  if (other != this) {
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_SoundType::GetTypeName() const {
  return "PKMsgCS_SoundType";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_ExitQue::kMLExitFieldNumber;
const int PKMsgCS_ExitQue::kMBActionFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_ExitQue::PKMsgCS_ExitQue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_ExitQue::InitAsDefaultInstance() {
}

PKMsgCS_ExitQue::PKMsgCS_ExitQue(const PKMsgCS_ExitQue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_ExitQue::SharedCtor() {
  _cached_size_ = 0;
  m_lexit_ = 0;
  m_baction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_ExitQue::~PKMsgCS_ExitQue() {
  SharedDtor();
}

void PKMsgCS_ExitQue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_ExitQue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_ExitQue& PKMsgCS_ExitQue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_ExitQue* PKMsgCS_ExitQue::default_instance_ = NULL;

PKMsgCS_ExitQue* PKMsgCS_ExitQue::New() const {
  return new PKMsgCS_ExitQue;
}

void PKMsgCS_ExitQue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lexit_ = 0;
    m_baction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_ExitQue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lExit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bAction;
        break;
      }
      
      // required sint32 m_bAction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_baction_)));
          set_has_m_baction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_ExitQue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lexit(), output);
  }
  
  // required sint32 m_bAction = 2;
  if (has_m_baction()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_baction(), output);
  }
  
}

int PKMsgCS_ExitQue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lExit = 1;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_bAction = 2;
    if (has_m_baction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_baction());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_ExitQue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_ExitQue*>(&from));
}

void PKMsgCS_ExitQue::MergeFrom(const PKMsgCS_ExitQue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_baction()) {
      set_m_baction(from.m_baction());
    }
  }
}

void PKMsgCS_ExitQue::CopyFrom(const PKMsgCS_ExitQue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_ExitQue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgCS_ExitQue::Swap(PKMsgCS_ExitQue* other) {
  if (other != this) {
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_baction_, other->m_baction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_ExitQue::GetTypeName() const {
  return "PKMsgCS_ExitQue";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_Continue::kMLExitFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_Continue::PKMsgCS_Continue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_Continue::InitAsDefaultInstance() {
}

PKMsgCS_Continue::PKMsgCS_Continue(const PKMsgCS_Continue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_Continue::SharedCtor() {
  _cached_size_ = 0;
  m_lexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_Continue::~PKMsgCS_Continue() {
  SharedDtor();
}

void PKMsgCS_Continue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_Continue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_Continue& PKMsgCS_Continue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_Continue* PKMsgCS_Continue::default_instance_ = NULL;

PKMsgCS_Continue* PKMsgCS_Continue::New() const {
  return new PKMsgCS_Continue;
}

void PKMsgCS_Continue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lexit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_Continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lExit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_Continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lexit(), output);
  }
  
}

int PKMsgCS_Continue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lExit = 1;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_Continue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_Continue*>(&from));
}

void PKMsgCS_Continue::MergeFrom(const PKMsgCS_Continue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
  }
}

void PKMsgCS_Continue::CopyFrom(const PKMsgCS_Continue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_Continue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_Continue::Swap(PKMsgCS_Continue* other) {
  if (other != this) {
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_Continue::GetTypeName() const {
  return "PKMsgCS_Continue";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_RuleSet::kMNRuleIdxFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_RuleSet::PKMsgCS_RuleSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_RuleSet::InitAsDefaultInstance() {
}

PKMsgCS_RuleSet::PKMsgCS_RuleSet(const PKMsgCS_RuleSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_RuleSet::SharedCtor() {
  _cached_size_ = 0;
  m_nruleidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_RuleSet::~PKMsgCS_RuleSet() {
  SharedDtor();
}

void PKMsgCS_RuleSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_RuleSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_RuleSet& PKMsgCS_RuleSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_RuleSet* PKMsgCS_RuleSet::default_instance_ = NULL;

PKMsgCS_RuleSet* PKMsgCS_RuleSet::New() const {
  return new PKMsgCS_RuleSet;
}

void PKMsgCS_RuleSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nruleidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_RuleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRuleIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nruleidx_)));
          set_has_m_nruleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_RuleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nruleidx(), output);
  }
  
}

int PKMsgCS_RuleSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRuleIdx = 1;
    if (has_m_nruleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nruleidx());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_RuleSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_RuleSet*>(&from));
}

void PKMsgCS_RuleSet::MergeFrom(const PKMsgCS_RuleSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nruleidx()) {
      set_m_nruleidx(from.m_nruleidx());
    }
  }
}

void PKMsgCS_RuleSet::CopyFrom(const PKMsgCS_RuleSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_RuleSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_RuleSet::Swap(PKMsgCS_RuleSet* other) {
  if (other != this) {
    std::swap(m_nruleidx_, other->m_nruleidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_RuleSet::GetTypeName() const {
  return "PKMsgCS_RuleSet";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgCS_GameMasterCall::PKMsgCS_GameMasterCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_GameMasterCall::InitAsDefaultInstance() {
}

PKMsgCS_GameMasterCall::PKMsgCS_GameMasterCall(const PKMsgCS_GameMasterCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_GameMasterCall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_GameMasterCall::~PKMsgCS_GameMasterCall() {
  SharedDtor();
}

void PKMsgCS_GameMasterCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_GameMasterCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_GameMasterCall& PKMsgCS_GameMasterCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_GameMasterCall* PKMsgCS_GameMasterCall::default_instance_ = NULL;

PKMsgCS_GameMasterCall* PKMsgCS_GameMasterCall::New() const {
  return new PKMsgCS_GameMasterCall;
}

void PKMsgCS_GameMasterCall::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_GameMasterCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgCS_GameMasterCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgCS_GameMasterCall::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_GameMasterCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_GameMasterCall*>(&from));
}

void PKMsgCS_GameMasterCall::MergeFrom(const PKMsgCS_GameMasterCall& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgCS_GameMasterCall::CopyFrom(const PKMsgCS_GameMasterCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_GameMasterCall::IsInitialized() const {
  
  return true;
}

void PKMsgCS_GameMasterCall::Swap(PKMsgCS_GameMasterCall* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_GameMasterCall::GetTypeName() const {
  return "PKMsgCS_GameMasterCall";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_FieldReserved::kMNReserved1FieldNumber;
const int PKMsgCS_FieldReserved::kMNReserved2FieldNumber;
#endif  // !_MSC_VER

PKMsgCS_FieldReserved::PKMsgCS_FieldReserved()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_FieldReserved::InitAsDefaultInstance() {
}

PKMsgCS_FieldReserved::PKMsgCS_FieldReserved(const PKMsgCS_FieldReserved& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_FieldReserved::SharedCtor() {
  _cached_size_ = 0;
  m_nreserved1_ = 0;
  m_nreserved2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_FieldReserved::~PKMsgCS_FieldReserved() {
  SharedDtor();
}

void PKMsgCS_FieldReserved::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_FieldReserved::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_FieldReserved& PKMsgCS_FieldReserved::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_FieldReserved* PKMsgCS_FieldReserved::default_instance_ = NULL;

PKMsgCS_FieldReserved* PKMsgCS_FieldReserved::New() const {
  return new PKMsgCS_FieldReserved;
}

void PKMsgCS_FieldReserved::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nreserved1_ = 0;
    m_nreserved2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_FieldReserved::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nReserved1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserved1_)));
          set_has_m_nreserved1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nReserved2;
        break;
      }
      
      // required int32 m_nReserved2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nReserved2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserved2_)));
          set_has_m_nreserved2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_FieldReserved::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nReserved1 = 1;
  if (has_m_nreserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nreserved1(), output);
  }
  
  // required int32 m_nReserved2 = 2;
  if (has_m_nreserved2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nreserved2(), output);
  }
  
}

int PKMsgCS_FieldReserved::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nReserved1 = 1;
    if (has_m_nreserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserved1());
    }
    
    // required int32 m_nReserved2 = 2;
    if (has_m_nreserved2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserved2());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_FieldReserved::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_FieldReserved*>(&from));
}

void PKMsgCS_FieldReserved::MergeFrom(const PKMsgCS_FieldReserved& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nreserved1()) {
      set_m_nreserved1(from.m_nreserved1());
    }
    if (from.has_m_nreserved2()) {
      set_m_nreserved2(from.m_nreserved2());
    }
  }
}

void PKMsgCS_FieldReserved::CopyFrom(const PKMsgCS_FieldReserved& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_FieldReserved::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgCS_FieldReserved::Swap(PKMsgCS_FieldReserved* other) {
  if (other != this) {
    std::swap(m_nreserved1_, other->m_nreserved1_);
    std::swap(m_nreserved2_, other->m_nreserved2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_FieldReserved::GetTypeName() const {
  return "PKMsgCS_FieldReserved";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_JokboSet::kMLKey1FieldNumber;
const int PKMsgCS_JokboSet::kMLKey2FieldNumber;
const int PKMsgCS_JokboSet::kMLKey3FieldNumber;
const int PKMsgCS_JokboSet::kMLKey4FieldNumber;
const int PKMsgCS_JokboSet::kMLKey5FieldNumber;
#endif  // !_MSC_VER

PKMsgCS_JokboSet::PKMsgCS_JokboSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_JokboSet::InitAsDefaultInstance() {
}

PKMsgCS_JokboSet::PKMsgCS_JokboSet(const PKMsgCS_JokboSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_JokboSet::SharedCtor() {
  _cached_size_ = 0;
  m_lkey1_ = 0;
  m_lkey2_ = 0;
  m_lkey3_ = 0;
  m_lkey4_ = 0;
  m_lkey5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_JokboSet::~PKMsgCS_JokboSet() {
  SharedDtor();
}

void PKMsgCS_JokboSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_JokboSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_JokboSet& PKMsgCS_JokboSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_JokboSet* PKMsgCS_JokboSet::default_instance_ = NULL;

PKMsgCS_JokboSet* PKMsgCS_JokboSet::New() const {
  return new PKMsgCS_JokboSet;
}

void PKMsgCS_JokboSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lkey1_ = 0;
    m_lkey2_ = 0;
    m_lkey3_ = 0;
    m_lkey4_ = 0;
    m_lkey5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_JokboSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lKey1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey1_)));
          set_has_m_lkey1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lKey2;
        break;
      }
      
      // required sint32 m_lKey2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey2_)));
          set_has_m_lkey2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lKey3;
        break;
      }
      
      // required sint32 m_lKey3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey3_)));
          set_has_m_lkey3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lKey4;
        break;
      }
      
      // required sint32 m_lKey4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey4_)));
          set_has_m_lkey4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lKey5;
        break;
      }
      
      // required sint32 m_lKey5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey5_)));
          set_has_m_lkey5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_JokboSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lKey1 = 1;
  if (has_m_lkey1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lkey1(), output);
  }
  
  // required sint32 m_lKey2 = 2;
  if (has_m_lkey2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lkey2(), output);
  }
  
  // required sint32 m_lKey3 = 3;
  if (has_m_lkey3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lkey3(), output);
  }
  
  // required sint32 m_lKey4 = 4;
  if (has_m_lkey4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lkey4(), output);
  }
  
  // required sint32 m_lKey5 = 5;
  if (has_m_lkey5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lkey5(), output);
  }
  
}

int PKMsgCS_JokboSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lKey1 = 1;
    if (has_m_lkey1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey1());
    }
    
    // required sint32 m_lKey2 = 2;
    if (has_m_lkey2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey2());
    }
    
    // required sint32 m_lKey3 = 3;
    if (has_m_lkey3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey3());
    }
    
    // required sint32 m_lKey4 = 4;
    if (has_m_lkey4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey4());
    }
    
    // required sint32 m_lKey5 = 5;
    if (has_m_lkey5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey5());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_JokboSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_JokboSet*>(&from));
}

void PKMsgCS_JokboSet::MergeFrom(const PKMsgCS_JokboSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lkey1()) {
      set_m_lkey1(from.m_lkey1());
    }
    if (from.has_m_lkey2()) {
      set_m_lkey2(from.m_lkey2());
    }
    if (from.has_m_lkey3()) {
      set_m_lkey3(from.m_lkey3());
    }
    if (from.has_m_lkey4()) {
      set_m_lkey4(from.m_lkey4());
    }
    if (from.has_m_lkey5()) {
      set_m_lkey5(from.m_lkey5());
    }
  }
}

void PKMsgCS_JokboSet::CopyFrom(const PKMsgCS_JokboSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_JokboSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void PKMsgCS_JokboSet::Swap(PKMsgCS_JokboSet* other) {
  if (other != this) {
    std::swap(m_lkey1_, other->m_lkey1_);
    std::swap(m_lkey2_, other->m_lkey2_);
    std::swap(m_lkey3_, other->m_lkey3_);
    std::swap(m_lkey4_, other->m_lkey4_);
    std::swap(m_lkey5_, other->m_lkey5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_JokboSet::GetTypeName() const {
  return "PKMsgCS_JokboSet";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_TestKeySetting::kMNCharFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_TestKeySetting::PKMsgCS_TestKeySetting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_TestKeySetting::InitAsDefaultInstance() {
}

PKMsgCS_TestKeySetting::PKMsgCS_TestKeySetting(const PKMsgCS_TestKeySetting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_TestKeySetting::SharedCtor() {
  _cached_size_ = 0;
  m_nchar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_TestKeySetting::~PKMsgCS_TestKeySetting() {
  SharedDtor();
}

void PKMsgCS_TestKeySetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_TestKeySetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_TestKeySetting& PKMsgCS_TestKeySetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_TestKeySetting* PKMsgCS_TestKeySetting::default_instance_ = NULL;

PKMsgCS_TestKeySetting* PKMsgCS_TestKeySetting::New() const {
  return new PKMsgCS_TestKeySetting;
}

void PKMsgCS_TestKeySetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nchar_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_TestKeySetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_nChar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_nchar_)));
          set_has_m_nchar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_TestKeySetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_nChar = 1;
  if (has_m_nchar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_nchar(), output);
  }
  
}

int PKMsgCS_TestKeySetting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_nChar = 1;
    if (has_m_nchar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_nchar());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_TestKeySetting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_TestKeySetting*>(&from));
}

void PKMsgCS_TestKeySetting::MergeFrom(const PKMsgCS_TestKeySetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nchar()) {
      set_m_nchar(from.m_nchar());
    }
  }
}

void PKMsgCS_TestKeySetting::CopyFrom(const PKMsgCS_TestKeySetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_TestKeySetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_TestKeySetting::Swap(PKMsgCS_TestKeySetting* other) {
  if (other != this) {
    std::swap(m_nchar_, other->m_nchar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_TestKeySetting::GetTypeName() const {
  return "PKMsgCS_TestKeySetting";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_CheckNotice::kMNTypeFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_CheckNotice::PKMsgCS_CheckNotice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_CheckNotice::InitAsDefaultInstance() {
}

PKMsgCS_CheckNotice::PKMsgCS_CheckNotice(const PKMsgCS_CheckNotice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_CheckNotice::SharedCtor() {
  _cached_size_ = 0;
  m_ntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_CheckNotice::~PKMsgCS_CheckNotice() {
  SharedDtor();
}

void PKMsgCS_CheckNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_CheckNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_CheckNotice& PKMsgCS_CheckNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_CheckNotice* PKMsgCS_CheckNotice::default_instance_ = NULL;

PKMsgCS_CheckNotice* PKMsgCS_CheckNotice::New() const {
  return new PKMsgCS_CheckNotice;
}

void PKMsgCS_CheckNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_CheckNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_CheckNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntype(), output);
  }
  
}

int PKMsgCS_CheckNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nType = 1;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_CheckNotice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_CheckNotice*>(&from));
}

void PKMsgCS_CheckNotice::MergeFrom(const PKMsgCS_CheckNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
  }
}

void PKMsgCS_CheckNotice::CopyFrom(const PKMsgCS_CheckNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_CheckNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_CheckNotice::Swap(PKMsgCS_CheckNotice* other) {
  if (other != this) {
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_CheckNotice::GetTypeName() const {
  return "PKMsgCS_CheckNotice";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgCS_Ack::kMNTagIDFieldNumber;
#endif  // !_MSC_VER

PKMsgCS_Ack::PKMsgCS_Ack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_Ack::InitAsDefaultInstance() {
}

PKMsgCS_Ack::PKMsgCS_Ack(const PKMsgCS_Ack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_Ack::SharedCtor() {
  _cached_size_ = 0;
  m_ntagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_Ack::~PKMsgCS_Ack() {
  SharedDtor();
}

void PKMsgCS_Ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_Ack& PKMsgCS_Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_Ack* PKMsgCS_Ack::default_instance_ = NULL;

PKMsgCS_Ack* PKMsgCS_Ack::New() const {
  return new PKMsgCS_Ack;
}

void PKMsgCS_Ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntagid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nTagID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntagid_)));
          set_has_m_ntagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgCS_Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nTagID = 1;
  if (has_m_ntagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntagid(), output);
  }
  
}

int PKMsgCS_Ack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nTagID = 1;
    if (has_m_ntagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntagid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_Ack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_Ack*>(&from));
}

void PKMsgCS_Ack::MergeFrom(const PKMsgCS_Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntagid()) {
      set_m_ntagid(from.m_ntagid());
    }
  }
}

void PKMsgCS_Ack::CopyFrom(const PKMsgCS_Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_Ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgCS_Ack::Swap(PKMsgCS_Ack* other) {
  if (other != this) {
    std::swap(m_ntagid_, other->m_ntagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_Ack::GetTypeName() const {
  return "PKMsgCS_Ack";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgCS_Ping::PKMsgCS_Ping()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgCS_Ping::InitAsDefaultInstance() {
}

PKMsgCS_Ping::PKMsgCS_Ping(const PKMsgCS_Ping& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgCS_Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgCS_Ping::~PKMsgCS_Ping() {
  SharedDtor();
}

void PKMsgCS_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgCS_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgCS_Ping& PKMsgCS_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgCS_Ping* PKMsgCS_Ping::default_instance_ = NULL;

PKMsgCS_Ping* PKMsgCS_Ping::New() const {
  return new PKMsgCS_Ping;
}

void PKMsgCS_Ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgCS_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgCS_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgCS_Ping::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgCS_Ping::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgCS_Ping*>(&from));
}

void PKMsgCS_Ping::MergeFrom(const PKMsgCS_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgCS_Ping::CopyFrom(const PKMsgCS_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgCS_Ping::IsInitialized() const {
  
  return true;
}

void PKMsgCS_Ping::Swap(PKMsgCS_Ping* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgCS_Ping::GetTypeName() const {
  return "PKMsgCS_Ping";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_UserJoinAns::kMLStateFieldNumber;
const int PKMsgSC_UserJoinAns::kMNEnterFieldNumber;
const int PKMsgSC_UserJoinAns::kMNSetFieldNumber;
const int PKMsgSC_UserJoinAns::kMLChannelIdxFieldNumber;
const int PKMsgSC_UserJoinAns::kMLOwnerUSNFieldNumber;
const int PKMsgSC_UserJoinAns::kMLBossUSNFieldNumber;
const int PKMsgSC_UserJoinAns::kMNRoomPurgeCntFieldNumber;
const int PKMsgSC_UserJoinAns::kMOptionFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_UserJoinAns::PKMsgSC_UserJoinAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_UserJoinAns::InitAsDefaultInstance() {
  m_option_ = const_cast< ::PKOption*>(&::PKOption::default_instance());
}

PKMsgSC_UserJoinAns::PKMsgSC_UserJoinAns(const PKMsgSC_UserJoinAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_UserJoinAns::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_nenter_ = 0;
  m_nset_ = 0;
  m_lchannel_idx_ = 0;
  m_lownerusn_ = 0;
  m_lbossusn_ = 0;
  m_nroompurgecnt_ = 0;
  m_option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_UserJoinAns::~PKMsgSC_UserJoinAns() {
  SharedDtor();
}

void PKMsgSC_UserJoinAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_option_;
  }
}

void PKMsgSC_UserJoinAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_UserJoinAns& PKMsgSC_UserJoinAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_UserJoinAns* PKMsgSC_UserJoinAns::default_instance_ = NULL;

PKMsgSC_UserJoinAns* PKMsgSC_UserJoinAns::New() const {
  return new PKMsgSC_UserJoinAns;
}

void PKMsgSC_UserJoinAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_nenter_ = 0;
    m_nset_ = 0;
    m_lchannel_idx_ = 0;
    m_lownerusn_ = 0;
    m_lbossusn_ = 0;
    m_nroompurgecnt_ = 0;
    if (has_m_option()) {
      if (m_option_ != NULL) m_option_->::PKOption::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_UserJoinAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nEnter;
        break;
      }
      
      // required int32 m_nEnter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nenter_)));
          set_has_m_nenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nSet;
        break;
      }
      
      // required int32 m_nSet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nset_)));
          set_has_m_nset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lChannel_idx;
        break;
      }
      
      // required int32 m_lChannel_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChannel_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchannel_idx_)));
          set_has_m_lchannel_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lBossUSN;
        break;
      }
      
      // required sint32 m_lBossUSN = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBossUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_nRoomPurgeCnt;
        break;
      }
      
      // required int32 m_nRoomPurgeCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRoomPurgeCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nroompurgecnt_)));
          set_has_m_nroompurgecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_option;
        break;
      }
      
      // required .PKOption m_option = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_UserJoinAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // required int32 m_nEnter = 2;
  if (has_m_nenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nenter(), output);
  }
  
  // required int32 m_nSet = 3;
  if (has_m_nset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_nset(), output);
  }
  
  // required int32 m_lChannel_idx = 4;
  if (has_m_lchannel_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lchannel_idx(), output);
  }
  
  // required sint32 m_lOwnerUSN = 5;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lownerusn(), output);
  }
  
  // required sint32 m_lBossUSN = 6;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lbossusn(), output);
  }
  
  // required int32 m_nRoomPurgeCnt = 7;
  if (has_m_nroompurgecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_nroompurgecnt(), output);
  }
  
  // required .PKOption m_option = 8;
  if (has_m_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->m_option(), output);
  }
  
}

int PKMsgSC_UserJoinAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required int32 m_nEnter = 2;
    if (has_m_nenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nenter());
    }
    
    // required int32 m_nSet = 3;
    if (has_m_nset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nset());
    }
    
    // required int32 m_lChannel_idx = 4;
    if (has_m_lchannel_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchannel_idx());
    }
    
    // required sint32 m_lOwnerUSN = 5;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required sint32 m_lBossUSN = 6;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nRoomPurgeCnt = 7;
    if (has_m_nroompurgecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nroompurgecnt());
    }
    
    // required .PKOption m_option = 8;
    if (has_m_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_option());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_UserJoinAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_UserJoinAns*>(&from));
}

void PKMsgSC_UserJoinAns::MergeFrom(const PKMsgSC_UserJoinAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_nenter()) {
      set_m_nenter(from.m_nenter());
    }
    if (from.has_m_nset()) {
      set_m_nset(from.m_nset());
    }
    if (from.has_m_lchannel_idx()) {
      set_m_lchannel_idx(from.m_lchannel_idx());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_nroompurgecnt()) {
      set_m_nroompurgecnt(from.m_nroompurgecnt());
    }
    if (from.has_m_option()) {
      mutable_m_option()->::PKOption::MergeFrom(from.m_option());
    }
  }
}

void PKMsgSC_UserJoinAns::CopyFrom(const PKMsgSC_UserJoinAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_UserJoinAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_m_option()) {
    if (!this->m_option().IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_UserJoinAns::Swap(PKMsgSC_UserJoinAns* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_nenter_, other->m_nenter_);
    std::swap(m_nset_, other->m_nset_);
    std::swap(m_lchannel_idx_, other->m_lchannel_idx_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_nroompurgecnt_, other->m_nroompurgecnt_);
    std::swap(m_option_, other->m_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_UserJoinAns::GetTypeName() const {
  return "PKMsgSC_UserJoinAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_UserJoinErr::kMLUSNFieldNumber;
const int PKMsgSC_UserJoinErr::kMLErrorCodeFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_UserJoinErr::PKMsgSC_UserJoinErr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_UserJoinErr::InitAsDefaultInstance() {
}

PKMsgSC_UserJoinErr::PKMsgSC_UserJoinErr(const PKMsgSC_UserJoinErr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_UserJoinErr::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_UserJoinErr::~PKMsgSC_UserJoinErr() {
  SharedDtor();
}

void PKMsgSC_UserJoinErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_UserJoinErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_UserJoinErr& PKMsgSC_UserJoinErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_UserJoinErr* PKMsgSC_UserJoinErr::default_instance_ = NULL;

PKMsgSC_UserJoinErr* PKMsgSC_UserJoinErr::New() const {
  return new PKMsgSC_UserJoinErr;
}

void PKMsgSC_UserJoinErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_UserJoinErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lErrorCode;
        break;
      }
      
      // required sint32 m_lErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lerrorcode_)));
          set_has_m_lerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_UserJoinErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lErrorCode = 2;
  if (has_m_lerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lerrorcode(), output);
  }
  
}

int PKMsgSC_UserJoinErr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lErrorCode = 2;
    if (has_m_lerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lerrorcode());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_UserJoinErr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_UserJoinErr*>(&from));
}

void PKMsgSC_UserJoinErr::MergeFrom(const PKMsgSC_UserJoinErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lerrorcode()) {
      set_m_lerrorcode(from.m_lerrorcode());
    }
  }
}

void PKMsgSC_UserJoinErr::CopyFrom(const PKMsgSC_UserJoinErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_UserJoinErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgSC_UserJoinErr::Swap(PKMsgSC_UserJoinErr* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lerrorcode_, other->m_lerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_UserJoinErr::GetTypeName() const {
  return "PKMsgSC_UserJoinErr";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_UserDisconnect::kMLUSNFieldNumber;
const int PKMsgSC_UserDisconnect::kMUinfoFieldNumber;
const int PKMsgSC_UserDisconnect::kMLStateFieldNumber;
const int PKMsgSC_UserDisconnect::kMLOwnerUSNFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_UserDisconnect::PKMsgSC_UserDisconnect()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_UserDisconnect::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::PKUserInfo*>(&::PKUserInfo::default_instance());
}

PKMsgSC_UserDisconnect::PKMsgSC_UserDisconnect(const PKMsgSC_UserDisconnect& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_UserDisconnect::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_uinfo_ = NULL;
  m_lstate_ = 0;
  m_lownerusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_UserDisconnect::~PKMsgSC_UserDisconnect() {
  SharedDtor();
}

void PKMsgSC_UserDisconnect::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
  }
}

void PKMsgSC_UserDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_UserDisconnect& PKMsgSC_UserDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_UserDisconnect* PKMsgSC_UserDisconnect::default_instance_ = NULL;

PKMsgSC_UserDisconnect* PKMsgSC_UserDisconnect::New() const {
  return new PKMsgSC_UserDisconnect;
}

void PKMsgSC_UserDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::PKUserInfo::Clear();
    }
    m_lstate_ = 0;
    m_lownerusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_UserDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_uinfo;
        break;
      }
      
      // required .PKUserInfo m_uinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_UserDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required .PKUserInfo m_uinfo = 2;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_uinfo(), output);
  }
  
  // required sint32 m_lState = 3;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lstate(), output);
  }
  
  // required sint32 m_lOwnerUSN = 4;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lownerusn(), output);
  }
  
}

int PKMsgSC_UserDisconnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required .PKUserInfo m_uinfo = 2;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
    // required sint32 m_lState = 3;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint32 m_lOwnerUSN = 4;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_UserDisconnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_UserDisconnect*>(&from));
}

void PKMsgSC_UserDisconnect::MergeFrom(const PKMsgSC_UserDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::PKUserInfo::MergeFrom(from.m_uinfo());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
  }
}

void PKMsgSC_UserDisconnect::CopyFrom(const PKMsgSC_UserDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_UserDisconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_UserDisconnect::Swap(PKMsgSC_UserDisconnect* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_UserDisconnect::GetTypeName() const {
  return "PKMsgSC_UserDisconnect";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_CardData::kMNDealCntFieldNumber;
const int PKMsgSC_CardData::kMLCardsDealtFieldNumber;
const int PKMsgSC_CardData::kMTblCardFieldNumber;
const int PKMsgSC_CardData::kMTblMoneyFieldNumber;
const int PKMsgSC_CardData::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_CardData::PKMsgSC_CardData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_CardData::InitAsDefaultInstance() {
}

PKMsgSC_CardData::PKMsgSC_CardData(const PKMsgSC_CardData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_CardData::SharedCtor() {
  _cached_size_ = 0;
  m_ndealcnt_ = 0;
  m_lcardsdealt_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_CardData::~PKMsgSC_CardData() {
  SharedDtor();
}

void PKMsgSC_CardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_CardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_CardData& PKMsgSC_CardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_CardData* PKMsgSC_CardData::default_instance_ = NULL;

PKMsgSC_CardData* PKMsgSC_CardData::New() const {
  return new PKMsgSC_CardData;
}

void PKMsgSC_CardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ndealcnt_ = 0;
    m_lcardsdealt_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_CardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nDealCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ndealcnt_)));
          set_has_m_ndealcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .PKCards m_tblCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tblCard;
        if (input->ExpectTag(34)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .PKMoney m_tblMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblMoney;
        if (input->ExpectTag(40)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_CardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nDealCnt = 1;
  if (has_m_ndealcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ndealcnt(), output);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lcardsdealt(), output);
  }
  
  // repeated .PKCards m_tblCard = 3;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_tblcard(i), output);
  }
  
  // repeated .PKMoney m_tblMoney = 4;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 5;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llpoolmoney(), output);
  }
  
}

int PKMsgSC_CardData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nDealCnt = 1;
    if (has_m_ndealcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ndealcnt());
    }
    
    // required sint32 m_lCardsDealt = 2;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
    // required sint64 m_llPoolMoney = 5;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .PKCards m_tblCard = 3;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .PKMoney m_tblMoney = 4;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_CardData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_CardData*>(&from));
}

void PKMsgSC_CardData::MergeFrom(const PKMsgSC_CardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ndealcnt()) {
      set_m_ndealcnt(from.m_ndealcnt());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
}

void PKMsgSC_CardData::CopyFrom(const PKMsgSC_CardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_CardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_CardData::Swap(PKMsgSC_CardData* other) {
  if (other != this) {
    std::swap(m_ndealcnt_, other->m_ndealcnt_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_CardData::GetTypeName() const {
  return "PKMsgSC_CardData";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_EntryAns::kMLUSNFieldNumber;
const int PKMsgSC_EntryAns::kMNIndexFieldNumber;
const int PKMsgSC_EntryAns::kMLOwnerUSNFieldNumber;
const int PKMsgSC_EntryAns::kMTblUIFieldNumber;
const int PKMsgSC_EntryAns::kMTblMoneyFieldNumber;
const int PKMsgSC_EntryAns::kMBWelcomeSoundFieldNumber;
const int PKMsgSC_EntryAns::kMLObserveCntFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_EntryAns::PKMsgSC_EntryAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_EntryAns::InitAsDefaultInstance() {
}

PKMsgSC_EntryAns::PKMsgSC_EntryAns(const PKMsgSC_EntryAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_EntryAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lownerusn_ = 0;
  m_bwelcomesound_ = 0;
  m_lobservecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_EntryAns::~PKMsgSC_EntryAns() {
  SharedDtor();
}

void PKMsgSC_EntryAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_EntryAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_EntryAns& PKMsgSC_EntryAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_EntryAns* PKMsgSC_EntryAns::default_instance_ = NULL;

PKMsgSC_EntryAns* PKMsgSC_EntryAns::New() const {
  return new PKMsgSC_EntryAns;
}

void PKMsgSC_EntryAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lownerusn_ = 0;
    m_bwelcomesound_ = 0;
    m_lobservecnt_ = 0;
  }
  m_tblui_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_EntryAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblUI;
        break;
      }
      
      // repeated .PKUserInfo m_tblUI = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblUI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblUI;
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .PKMoney m_tblMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        if (input->ExpectTag(48)) goto parse_m_bWelcomeSound;
        break;
      }
      
      // required sint32 m_bWelcomeSound = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bWelcomeSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bwelcomesound_)));
          set_has_m_bwelcomesound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lObserveCnt;
        break;
      }
      
      // required sint32 m_lObserveCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lObserveCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lobservecnt_)));
          set_has_m_lobservecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_EntryAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lownerusn(), output);
  }
  
  // repeated .PKUserInfo m_tblUI = 4;
  for (int i = 0; i < this->m_tblui_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_tblui(i), output);
  }
  
  // repeated .PKMoney m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_tblmoney(i), output);
  }
  
  // required sint32 m_bWelcomeSound = 6;
  if (has_m_bwelcomesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_bwelcomesound(), output);
  }
  
  // required sint32 m_lObserveCnt = 7;
  if (has_m_lobservecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lobservecnt(), output);
  }
  
}

int PKMsgSC_EntryAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lOwnerUSN = 3;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required sint32 m_bWelcomeSound = 6;
    if (has_m_bwelcomesound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bwelcomesound());
    }
    
    // required sint32 m_lObserveCnt = 7;
    if (has_m_lobservecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lobservecnt());
    }
    
  }
  // repeated .PKUserInfo m_tblUI = 4;
  total_size += 1 * this->m_tblui_size();
  for (int i = 0; i < this->m_tblui_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblui(i));
  }
  
  // repeated .PKMoney m_tblMoney = 5;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_EntryAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_EntryAns*>(&from));
}

void PKMsgSC_EntryAns::MergeFrom(const PKMsgSC_EntryAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblui_.MergeFrom(from.m_tblui_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_bwelcomesound()) {
      set_m_bwelcomesound(from.m_bwelcomesound());
    }
    if (from.has_m_lobservecnt()) {
      set_m_lobservecnt(from.m_lobservecnt());
    }
  }
}

void PKMsgSC_EntryAns::CopyFrom(const PKMsgSC_EntryAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_EntryAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;
  
  for (int i = 0; i < m_tblui_size(); i++) {
    if (!this->m_tblui(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_EntryAns::Swap(PKMsgSC_EntryAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    m_tblui_.Swap(&other->m_tblui_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_bwelcomesound_, other->m_bwelcomesound_);
    std::swap(m_lobservecnt_, other->m_lobservecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_EntryAns::GetTypeName() const {
  return "PKMsgSC_EntryAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_EntryReject::kMLTypeFieldNumber;
const int PKMsgSC_EntryReject::kMLlCMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_EntryReject::PKMsgSC_EntryReject()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_EntryReject::InitAsDefaultInstance() {
}

PKMsgSC_EntryReject::PKMsgSC_EntryReject(const PKMsgSC_EntryReject& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_EntryReject::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_EntryReject::~PKMsgSC_EntryReject() {
  SharedDtor();
}

void PKMsgSC_EntryReject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_EntryReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_EntryReject& PKMsgSC_EntryReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_EntryReject* PKMsgSC_EntryReject::default_instance_ = NULL;

PKMsgSC_EntryReject* PKMsgSC_EntryReject::New() const {
  return new PKMsgSC_EntryReject;
}

void PKMsgSC_EntryReject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_EntryReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_EntryReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint64 m_llCMoney = 2;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llcmoney(), output);
  }
  
}

int PKMsgSC_EntryReject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint64 m_llCMoney = 2;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_EntryReject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_EntryReject*>(&from));
}

void PKMsgSC_EntryReject::MergeFrom(const PKMsgSC_EntryReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
  }
}

void PKMsgSC_EntryReject::CopyFrom(const PKMsgSC_EntryReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_EntryReject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgSC_EntryReject::Swap(PKMsgSC_EntryReject* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_EntryReject::GetTypeName() const {
  return "PKMsgSC_EntryReject";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_ObserveAns::kMLUSNFieldNumber;
const int PKMsgSC_ObserveAns::kMNIndexFieldNumber;
const int PKMsgSC_ObserveAns::kMLOwnerUSNFieldNumber;
const int PKMsgSC_ObserveAns::kMUinfoFieldNumber;
const int PKMsgSC_ObserveAns::kMMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_ObserveAns::PKMsgSC_ObserveAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_ObserveAns::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::PKUserInfo*>(&::PKUserInfo::default_instance());
  m_money_ = const_cast< ::PKMoney*>(&::PKMoney::default_instance());
}

PKMsgSC_ObserveAns::PKMsgSC_ObserveAns(const PKMsgSC_ObserveAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_ObserveAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lownerusn_ = 0;
  m_uinfo_ = NULL;
  m_money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_ObserveAns::~PKMsgSC_ObserveAns() {
  SharedDtor();
}

void PKMsgSC_ObserveAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
    delete m_money_;
  }
}

void PKMsgSC_ObserveAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_ObserveAns& PKMsgSC_ObserveAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_ObserveAns* PKMsgSC_ObserveAns::default_instance_ = NULL;

PKMsgSC_ObserveAns* PKMsgSC_ObserveAns::New() const {
  return new PKMsgSC_ObserveAns;
}

void PKMsgSC_ObserveAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lownerusn_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::PKUserInfo::Clear();
    }
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::PKMoney::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_ObserveAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_uinfo;
        break;
      }
      
      // required .PKUserInfo m_uinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_money;
        break;
      }
      
      // required .PKMoney m_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_ObserveAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lownerusn(), output);
  }
  
  // required .PKUserInfo m_uinfo = 4;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_uinfo(), output);
  }
  
  // required .PKMoney m_money = 5;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_money(), output);
  }
  
}

int PKMsgSC_ObserveAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lOwnerUSN = 3;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required .PKUserInfo m_uinfo = 4;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
    // required .PKMoney m_money = 5;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_ObserveAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_ObserveAns*>(&from));
}

void PKMsgSC_ObserveAns::MergeFrom(const PKMsgSC_ObserveAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::PKUserInfo::MergeFrom(from.m_uinfo());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::PKMoney::MergeFrom(from.m_money());
    }
  }
}

void PKMsgSC_ObserveAns::CopyFrom(const PKMsgSC_ObserveAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_ObserveAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_ObserveAns::Swap(PKMsgSC_ObserveAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_ObserveAns::GetTypeName() const {
  return "PKMsgSC_ObserveAns";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgSC_StartReq::PKMsgSC_StartReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_StartReq::InitAsDefaultInstance() {
}

PKMsgSC_StartReq::PKMsgSC_StartReq(const PKMsgSC_StartReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_StartReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_StartReq::~PKMsgSC_StartReq() {
  SharedDtor();
}

void PKMsgSC_StartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_StartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_StartReq& PKMsgSC_StartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_StartReq* PKMsgSC_StartReq::default_instance_ = NULL;

PKMsgSC_StartReq* PKMsgSC_StartReq::New() const {
  return new PKMsgSC_StartReq;
}

void PKMsgSC_StartReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_StartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgSC_StartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgSC_StartReq::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_StartReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_StartReq*>(&from));
}

void PKMsgSC_StartReq::MergeFrom(const PKMsgSC_StartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgSC_StartReq::CopyFrom(const PKMsgSC_StartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_StartReq::IsInitialized() const {
  
  return true;
}

void PKMsgSC_StartReq::Swap(PKMsgSC_StartReq* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_StartReq::GetTypeName() const {
  return "PKMsgSC_StartReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_StartAns::kMLStateFieldNumber;
const int PKMsgSC_StartAns::kMVtStateFieldNumber;
const int PKMsgSC_StartAns::kMLlSystemTimeFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_StartAns::PKMsgSC_StartAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_StartAns::InitAsDefaultInstance() {
}

PKMsgSC_StartAns::PKMsgSC_StartAns(const PKMsgSC_StartAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_StartAns::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_llsystemtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_StartAns::~PKMsgSC_StartAns() {
  SharedDtor();
}

void PKMsgSC_StartAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_StartAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_StartAns& PKMsgSC_StartAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_StartAns* PKMsgSC_StartAns::default_instance_ = NULL;

PKMsgSC_StartAns* PKMsgSC_StartAns::New() const {
  return new PKMsgSC_StartAns;
}

void PKMsgSC_StartAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_llsystemtime_ = GOOGLE_LONGLONG(0);
  }
  m_vtstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_StartAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_vtState;
        break;
      }
      
      // repeated sint32 m_vtState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16, input, this->mutable_m_vtstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_m_vtstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_vtState;
        if (input->ExpectTag(24)) goto parse_m_llSystemTime;
        break;
      }
      
      // required sint64 m_llSystemTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSystemTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsystemtime_)));
          set_has_m_llsystemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_StartAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // repeated sint32 m_vtState = 2;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->m_vtstate(i), output);
  }
  
  // required sint64 m_llSystemTime = 3;
  if (has_m_llsystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llsystemtime(), output);
  }
  
}

int PKMsgSC_StartAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint64 m_llSystemTime = 3;
    if (has_m_llsystemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsystemtime());
    }
    
  }
  // repeated sint32 m_vtState = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->m_vtstate(i));
    }
    total_size += 1 * this->m_vtstate_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_StartAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_StartAns*>(&from));
}

void PKMsgSC_StartAns::MergeFrom(const PKMsgSC_StartAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtstate_.MergeFrom(from.m_vtstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_llsystemtime()) {
      set_m_llsystemtime(from.m_llsystemtime());
    }
  }
}

void PKMsgSC_StartAns::CopyFrom(const PKMsgSC_StartAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_StartAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void PKMsgSC_StartAns::Swap(PKMsgSC_StartAns* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    m_vtstate_.Swap(&other->m_vtstate_);
    std::swap(m_llsystemtime_, other->m_llsystemtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_StartAns::GetTypeName() const {
  return "PKMsgSC_StartAns";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgSC_NoStart::PKMsgSC_NoStart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_NoStart::InitAsDefaultInstance() {
}

PKMsgSC_NoStart::PKMsgSC_NoStart(const PKMsgSC_NoStart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_NoStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_NoStart::~PKMsgSC_NoStart() {
  SharedDtor();
}

void PKMsgSC_NoStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_NoStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_NoStart& PKMsgSC_NoStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_NoStart* PKMsgSC_NoStart::default_instance_ = NULL;

PKMsgSC_NoStart* PKMsgSC_NoStart::New() const {
  return new PKMsgSC_NoStart;
}

void PKMsgSC_NoStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_NoStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgSC_NoStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgSC_NoStart::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_NoStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_NoStart*>(&from));
}

void PKMsgSC_NoStart::MergeFrom(const PKMsgSC_NoStart& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgSC_NoStart::CopyFrom(const PKMsgSC_NoStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_NoStart::IsInitialized() const {
  
  return true;
}

void PKMsgSC_NoStart::Swap(PKMsgSC_NoStart* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_NoStart::GetTypeName() const {
  return "PKMsgSC_NoStart";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_DealCards::kMLBossUSNFieldNumber;
const int PKMsgSC_DealCards::kMLStateFieldNumber;
const int PKMsgSC_DealCards::kMNTypeFieldNumber;
const int PKMsgSC_DealCards::kMTblCardFieldNumber;
const int PKMsgSC_DealCards::kMTblMoneyFieldNumber;
const int PKMsgSC_DealCards::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_DealCards::PKMsgSC_DealCards()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_DealCards::InitAsDefaultInstance() {
}

PKMsgSC_DealCards::PKMsgSC_DealCards(const PKMsgSC_DealCards& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_DealCards::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_lstate_ = 0;
  m_ntype_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_DealCards::~PKMsgSC_DealCards() {
  SharedDtor();
}

void PKMsgSC_DealCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_DealCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_DealCards& PKMsgSC_DealCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_DealCards* PKMsgSC_DealCards::default_instance_ = NULL;

PKMsgSC_DealCards* PKMsgSC_DealCards::New() const {
  return new PKMsgSC_DealCards;
}

void PKMsgSC_DealCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_lstate_ = 0;
    m_ntype_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_DealCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nType;
        break;
      }
      
      // required int32 m_nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .PKCards m_tblCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblCard;
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .PKMoney m_tblMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        if (input->ExpectTag(48)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_DealCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lstate(), output);
  }
  
  // required int32 m_nType = 3;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ntype(), output);
  }
  
  // repeated .PKCards m_tblCard = 4;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_tblcard(i), output);
  }
  
  // repeated .PKMoney m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 6;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_llpoolmoney(), output);
  }
  
}

int PKMsgSC_DealCards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint32 m_lState = 2;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required int32 m_nType = 3;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint64 m_llPoolMoney = 6;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .PKCards m_tblCard = 4;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .PKMoney m_tblMoney = 5;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_DealCards::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_DealCards*>(&from));
}

void PKMsgSC_DealCards::MergeFrom(const PKMsgSC_DealCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
}

void PKMsgSC_DealCards::CopyFrom(const PKMsgSC_DealCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_DealCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_DealCards::Swap(PKMsgSC_DealCards* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_ntype_, other->m_ntype_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_DealCards::GetTypeName() const {
  return "PKMsgSC_DealCards";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_SelectedCardAns::kMLUSNFieldNumber;
const int PKMsgSC_SelectedCardAns::kMNSelectFieldNumber;
const int PKMsgSC_SelectedCardAns::kMLCardIndexFieldNumber;
const int PKMsgSC_SelectedCardAns::kMLChoiceTypeFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_SelectedCardAns::PKMsgSC_SelectedCardAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_SelectedCardAns::InitAsDefaultInstance() {
}

PKMsgSC_SelectedCardAns::PKMsgSC_SelectedCardAns(const PKMsgSC_SelectedCardAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_SelectedCardAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nselect_ = 0;
  m_lcardindex_ = 0;
  m_lchoicetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_SelectedCardAns::~PKMsgSC_SelectedCardAns() {
  SharedDtor();
}

void PKMsgSC_SelectedCardAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_SelectedCardAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_SelectedCardAns& PKMsgSC_SelectedCardAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_SelectedCardAns* PKMsgSC_SelectedCardAns::default_instance_ = NULL;

PKMsgSC_SelectedCardAns* PKMsgSC_SelectedCardAns::New() const {
  return new PKMsgSC_SelectedCardAns;
}

void PKMsgSC_SelectedCardAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nselect_ = 0;
    m_lcardindex_ = 0;
    m_lchoicetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_SelectedCardAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nSelect;
        break;
      }
      
      // required int32 m_nSelect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSelect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nselect_)));
          set_has_m_nselect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lCardIndex;
        break;
      }
      
      // required sint32 m_lCardIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardindex_)));
          set_has_m_lcardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lChoiceType;
        break;
      }
      
      // required sint32 m_lChoiceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChoiceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lchoicetype_)));
          set_has_m_lchoicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_SelectedCardAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nSelect = 2;
  if (has_m_nselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nselect(), output);
  }
  
  // required sint32 m_lCardIndex = 3;
  if (has_m_lcardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcardindex(), output);
  }
  
  // required sint32 m_lChoiceType = 4;
  if (has_m_lchoicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lchoicetype(), output);
  }
  
}

int PKMsgSC_SelectedCardAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nSelect = 2;
    if (has_m_nselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nselect());
    }
    
    // required sint32 m_lCardIndex = 3;
    if (has_m_lcardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardindex());
    }
    
    // required sint32 m_lChoiceType = 4;
    if (has_m_lchoicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lchoicetype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_SelectedCardAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_SelectedCardAns*>(&from));
}

void PKMsgSC_SelectedCardAns::MergeFrom(const PKMsgSC_SelectedCardAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nselect()) {
      set_m_nselect(from.m_nselect());
    }
    if (from.has_m_lcardindex()) {
      set_m_lcardindex(from.m_lcardindex());
    }
    if (from.has_m_lchoicetype()) {
      set_m_lchoicetype(from.m_lchoicetype());
    }
  }
}

void PKMsgSC_SelectedCardAns::CopyFrom(const PKMsgSC_SelectedCardAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_SelectedCardAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PKMsgSC_SelectedCardAns::Swap(PKMsgSC_SelectedCardAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nselect_, other->m_nselect_);
    std::swap(m_lcardindex_, other->m_lcardindex_);
    std::swap(m_lchoicetype_, other->m_lchoicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_SelectedCardAns::GetTypeName() const {
  return "PKMsgSC_SelectedCardAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_DealOpenCard::kMLStateFieldNumber;
const int PKMsgSC_DealOpenCard::kMTblCardFieldNumber;
const int PKMsgSC_DealOpenCard::kMVtStateFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_DealOpenCard::PKMsgSC_DealOpenCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_DealOpenCard::InitAsDefaultInstance() {
}

PKMsgSC_DealOpenCard::PKMsgSC_DealOpenCard(const PKMsgSC_DealOpenCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_DealOpenCard::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_DealOpenCard::~PKMsgSC_DealOpenCard() {
  SharedDtor();
}

void PKMsgSC_DealOpenCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_DealOpenCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_DealOpenCard& PKMsgSC_DealOpenCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_DealOpenCard* PKMsgSC_DealOpenCard::default_instance_ = NULL;

PKMsgSC_DealOpenCard* PKMsgSC_DealOpenCard::New() const {
  return new PKMsgSC_DealOpenCard;
}

void PKMsgSC_DealOpenCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
  }
  m_tblcard_.Clear();
  m_vtstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_DealOpenCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .PKCards m_tblCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tblCard;
        if (input->ExpectTag(24)) goto parse_m_vtState;
        break;
      }
      
      // repeated sint32 m_vtState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24, input, this->mutable_m_vtstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_m_vtstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_vtState;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_DealOpenCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // repeated .PKCards m_tblCard = 2;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_tblcard(i), output);
  }
  
  // repeated sint32 m_vtState = 3;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->m_vtstate(i), output);
  }
  
}

int PKMsgSC_DealOpenCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
  }
  // repeated .PKCards m_tblCard = 2;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated sint32 m_vtState = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->m_vtstate(i));
    }
    total_size += 1 * this->m_vtstate_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_DealOpenCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_DealOpenCard*>(&from));
}

void PKMsgSC_DealOpenCard::MergeFrom(const PKMsgSC_DealOpenCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_vtstate_.MergeFrom(from.m_vtstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
  }
}

void PKMsgSC_DealOpenCard::CopyFrom(const PKMsgSC_DealOpenCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_DealOpenCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_DealOpenCard::Swap(PKMsgSC_DealOpenCard* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_vtstate_.Swap(&other->m_vtstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_DealOpenCard::GetTypeName() const {
  return "PKMsgSC_DealOpenCard";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_DealCard::kMLBossUSNFieldNumber;
const int PKMsgSC_DealCard::kMNTypeFieldNumber;
const int PKMsgSC_DealCard::kMLCardsDealtFieldNumber;
const int PKMsgSC_DealCard::kMVtOneCardFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_DealCard::PKMsgSC_DealCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_DealCard::InitAsDefaultInstance() {
}

PKMsgSC_DealCard::PKMsgSC_DealCard(const PKMsgSC_DealCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_DealCard::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_ntype_ = 0;
  m_lcardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_DealCard::~PKMsgSC_DealCard() {
  SharedDtor();
}

void PKMsgSC_DealCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_DealCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_DealCard& PKMsgSC_DealCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_DealCard* PKMsgSC_DealCard::default_instance_ = NULL;

PKMsgSC_DealCard* PKMsgSC_DealCard::New() const {
  return new PKMsgSC_DealCard;
}

void PKMsgSC_DealCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_ntype_ = 0;
    m_lcardsdealt_ = 0;
  }
  m_vtonecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_DealCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nType;
        break;
      }
      
      // required int32 m_nType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtOneCard;
        break;
      }
      
      // repeated .PKOneCard m_vtOneCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtOneCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtonecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtOneCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_DealCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required int32 m_nType = 2;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ntype(), output);
  }
  
  // required sint32 m_lCardsDealt = 3;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcardsdealt(), output);
  }
  
  // repeated .PKOneCard m_vtOneCard = 4;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_vtonecard(i), output);
  }
  
}

int PKMsgSC_DealCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nType = 2;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint32 m_lCardsDealt = 3;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
  }
  // repeated .PKOneCard m_vtOneCard = 4;
  total_size += 1 * this->m_vtonecard_size();
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtonecard(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_DealCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_DealCard*>(&from));
}

void PKMsgSC_DealCard::MergeFrom(const PKMsgSC_DealCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtonecard_.MergeFrom(from.m_vtonecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
  }
}

void PKMsgSC_DealCard::CopyFrom(const PKMsgSC_DealCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_DealCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < m_vtonecard_size(); i++) {
    if (!this->m_vtonecard(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_DealCard::Swap(PKMsgSC_DealCard* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_vtonecard_.Swap(&other->m_vtonecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_DealCard::GetTypeName() const {
  return "PKMsgSC_DealCard";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_Boss::kMLBossUSNFieldNumber;
const int PKMsgSC_Boss::kMNBossRankFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_Boss::PKMsgSC_Boss()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_Boss::InitAsDefaultInstance() {
}

PKMsgSC_Boss::PKMsgSC_Boss(const PKMsgSC_Boss& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_Boss::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_nbossrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_Boss::~PKMsgSC_Boss() {
  SharedDtor();
}

void PKMsgSC_Boss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_Boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_Boss& PKMsgSC_Boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_Boss* PKMsgSC_Boss::default_instance_ = NULL;

PKMsgSC_Boss* PKMsgSC_Boss::New() const {
  return new PKMsgSC_Boss;
}

void PKMsgSC_Boss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_nbossrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_Boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nBossRank;
        break;
      }
      
      // required int32 m_nBossRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nBossRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nbossrank_)));
          set_has_m_nbossrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_Boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required int32 m_nBossRank = 2;
  if (has_m_nbossrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nbossrank(), output);
  }
  
}

int PKMsgSC_Boss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nBossRank = 2;
    if (has_m_nbossrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nbossrank());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_Boss::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_Boss*>(&from));
}

void PKMsgSC_Boss::MergeFrom(const PKMsgSC_Boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_nbossrank()) {
      set_m_nbossrank(from.m_nbossrank());
    }
  }
}

void PKMsgSC_Boss::CopyFrom(const PKMsgSC_Boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_Boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgSC_Boss::Swap(PKMsgSC_Boss* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_nbossrank_, other->m_nbossrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_Boss::GetTypeName() const {
  return "PKMsgSC_Boss";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_Betting::kMLBetUSNFieldNumber;
const int PKMsgSC_Betting::kMLBetBtnTypeFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_Betting::PKMsgSC_Betting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_Betting::InitAsDefaultInstance() {
}

PKMsgSC_Betting::PKMsgSC_Betting(const PKMsgSC_Betting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_Betting::SharedCtor() {
  _cached_size_ = 0;
  m_lbetusn_ = 0;
  m_lbetbtntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_Betting::~PKMsgSC_Betting() {
  SharedDtor();
}

void PKMsgSC_Betting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_Betting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_Betting& PKMsgSC_Betting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_Betting* PKMsgSC_Betting::default_instance_ = NULL;

PKMsgSC_Betting* PKMsgSC_Betting::New() const {
  return new PKMsgSC_Betting;
}

void PKMsgSC_Betting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbetusn_ = 0;
    m_lbetbtntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_Betting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBetUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetusn_)));
          set_has_m_lbetusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lBetBtnType;
        break;
      }
      
      // required sint32 m_lBetBtnType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetBtnType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetbtntype_)));
          set_has_m_lbetbtntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_Betting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBetUSN = 1;
  if (has_m_lbetusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbetusn(), output);
  }
  
  // required sint32 m_lBetBtnType = 2;
  if (has_m_lbetbtntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lbetbtntype(), output);
  }
  
}

int PKMsgSC_Betting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBetUSN = 1;
    if (has_m_lbetusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetusn());
    }
    
    // required sint32 m_lBetBtnType = 2;
    if (has_m_lbetbtntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetbtntype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_Betting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_Betting*>(&from));
}

void PKMsgSC_Betting::MergeFrom(const PKMsgSC_Betting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbetusn()) {
      set_m_lbetusn(from.m_lbetusn());
    }
    if (from.has_m_lbetbtntype()) {
      set_m_lbetbtntype(from.m_lbetbtntype());
    }
  }
}

void PKMsgSC_Betting::CopyFrom(const PKMsgSC_Betting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_Betting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgSC_Betting::Swap(PKMsgSC_Betting* other) {
  if (other != this) {
    std::swap(m_lbetusn_, other->m_lbetusn_);
    std::swap(m_lbetbtntype_, other->m_lbetbtntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_Betting::GetTypeName() const {
  return "PKMsgSC_Betting";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_BettingAns::kMNIndexFieldNumber;
const int PKMsgSC_BettingAns::kMLBetTypeFieldNumber;
const int PKMsgSC_BettingAns::kMMoneyFieldNumber;
const int PKMsgSC_BettingAns::kMVtCallMoneyFieldNumber;
const int PKMsgSC_BettingAns::kMLPoolMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_BettingAns::PKMsgSC_BettingAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_BettingAns::InitAsDefaultInstance() {
  m_money_ = const_cast< ::PKMoney*>(&::PKMoney::default_instance());
}

PKMsgSC_BettingAns::PKMsgSC_BettingAns(const PKMsgSC_BettingAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_BettingAns::SharedCtor() {
  _cached_size_ = 0;
  m_nindex_ = 0;
  m_lbettype_ = 0;
  m_money_ = NULL;
  m_lpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_BettingAns::~PKMsgSC_BettingAns() {
  SharedDtor();
}

void PKMsgSC_BettingAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void PKMsgSC_BettingAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_BettingAns& PKMsgSC_BettingAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_BettingAns* PKMsgSC_BettingAns::default_instance_ = NULL;

PKMsgSC_BettingAns* PKMsgSC_BettingAns::New() const {
  return new PKMsgSC_BettingAns;
}

void PKMsgSC_BettingAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nindex_ = 0;
    m_lbettype_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::PKMoney::Clear();
    }
    m_lpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_vtcallmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_BettingAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lBetType;
        break;
      }
      
      // required sint32 m_lBetType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_money;
        break;
      }
      
      // required .PKMoney m_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtCallMoney;
        break;
      }
      
      // repeated .PKVecMoney m_vtCallMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtCallMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtcallmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtCallMoney;
        if (input->ExpectTag(40)) goto parse_m_lPoolMoney;
        break;
      }
      
      // required sint64 m_lPoolMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lpoolmoney_)));
          set_has_m_lpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_BettingAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nindex(), output);
  }
  
  // required sint32 m_lBetType = 2;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lbettype(), output);
  }
  
  // required .PKMoney m_money = 3;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_money(), output);
  }
  
  // repeated .PKVecMoney m_vtCallMoney = 4;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->m_vtcallmoney(i), output);
  }
  
  // required sint64 m_lPoolMoney = 5;
  if (has_m_lpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lpoolmoney(), output);
  }
  
}

int PKMsgSC_BettingAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nIndex = 1;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lBetType = 2;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
    // required .PKMoney m_money = 3;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint64 m_lPoolMoney = 5;
    if (has_m_lpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lpoolmoney());
    }
    
  }
  // repeated .PKVecMoney m_vtCallMoney = 4;
  total_size += 1 * this->m_vtcallmoney_size();
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtcallmoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_BettingAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_BettingAns*>(&from));
}

void PKMsgSC_BettingAns::MergeFrom(const PKMsgSC_BettingAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcallmoney_.MergeFrom(from.m_vtcallmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::PKMoney::MergeFrom(from.m_money());
    }
    if (from.has_m_lpoolmoney()) {
      set_m_lpoolmoney(from.m_lpoolmoney());
    }
  }
}

void PKMsgSC_BettingAns::CopyFrom(const PKMsgSC_BettingAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_BettingAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtcallmoney_size(); i++) {
    if (!this->m_vtcallmoney(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_BettingAns::Swap(PKMsgSC_BettingAns* other) {
  if (other != this) {
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_money_, other->m_money_);
    m_vtcallmoney_.Swap(&other->m_vtcallmoney_);
    std::swap(m_lpoolmoney_, other->m_lpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_BettingAns::GetTypeName() const {
  return "PKMsgSC_BettingAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_BettingAnsMsg::kMLUSNFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMNIndexFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMBetTypeFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMBBettingMoneyFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMBMoneyLackFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMBCallMoneyZeroFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMLlCallMoneyFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMLlRaiseMoneyFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMLlSideMoneyFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMLBetTypeFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMLBetTurnFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMMoneyFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMVtCallMoneyFieldNumber;
const int PKMsgSC_BettingAnsMsg::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_BettingAnsMsg::PKMsgSC_BettingAnsMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_BettingAnsMsg::InitAsDefaultInstance() {
  m_money_ = const_cast< ::PKMoney*>(&::PKMoney::default_instance());
}

PKMsgSC_BettingAnsMsg::PKMsgSC_BettingAnsMsg(const PKMsgSC_BettingAnsMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_BettingAnsMsg::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_bettype_ = 0;
  m_bbettingmoney_ = 0;
  m_bmoneylack_ = 0;
  m_bcallmoneyzero_ = 0;
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  m_lbettype_ = 0;
  m_lbetturn_ = 0;
  m_money_ = NULL;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_BettingAnsMsg::~PKMsgSC_BettingAnsMsg() {
  SharedDtor();
}

void PKMsgSC_BettingAnsMsg::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void PKMsgSC_BettingAnsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_BettingAnsMsg& PKMsgSC_BettingAnsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_BettingAnsMsg* PKMsgSC_BettingAnsMsg::default_instance_ = NULL;

PKMsgSC_BettingAnsMsg* PKMsgSC_BettingAnsMsg::New() const {
  return new PKMsgSC_BettingAnsMsg;
}

void PKMsgSC_BettingAnsMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_bettype_ = 0;
    m_bbettingmoney_ = 0;
    m_bmoneylack_ = 0;
    m_bcallmoneyzero_ = 0;
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llraisemoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_llsidemoney_ = GOOGLE_LONGLONG(0);
    m_lbettype_ = 0;
    m_lbetturn_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::PKMoney::Clear();
    }
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_vtcallmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_BettingAnsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_BetType;
        break;
      }
      
      // required sint32 m_BetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bettype_)));
          set_has_m_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bBettingMoney;
        break;
      }
      
      // required sint32 m_bBettingMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bBettingMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bbettingmoney_)));
          set_has_m_bbettingmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bMoneyLack;
        break;
      }
      
      // required sint32 m_bMoneyLack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bMoneyLack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bmoneylack_)));
          set_has_m_bmoneylack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bCallMoneyZero;
        break;
      }
      
      // required sint32 m_bCallMoneyZero = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallMoneyZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bcallmoneyzero_)));
          set_has_m_bcallmoneyzero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_llCallMoney;
        break;
      }
      
      // required sint64 m_llCallMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_llRaiseMoney;
        break;
      }
      
      // required sint64 m_llRaiseMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRaiseMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llraisemoney_)));
          set_has_m_llraisemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_llSideMoney;
        break;
      }
      
      // required sint64 m_llSideMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSideMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsidemoney_)));
          set_has_m_llsidemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lBetType;
        break;
      }
      
      // required sint32 m_lBetType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lBetTurn;
        break;
      }
      
      // required sint32 m_lBetTurn = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetTurn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetturn_)));
          set_has_m_lbetturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_money;
        break;
      }
      
      // required .PKMoney m_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_vtCallMoney;
        break;
      }
      
      // repeated .PKVecMoney m_vtCallMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtCallMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtcallmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_vtCallMoney;
        if (input->ExpectTag(112)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_BettingAnsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_BetType = 3;
  if (has_m_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_bettype(), output);
  }
  
  // required sint32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_bbettingmoney(), output);
  }
  
  // required sint32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_bmoneylack(), output);
  }
  
  // required sint32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_bcallmoneyzero(), output);
  }
  
  // required sint64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->m_llcallmoney(), output);
  }
  
  // required sint64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->m_llraisemoney(), output);
  }
  
  // required sint64 m_llSideMoney = 9;
  if (has_m_llsidemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->m_llsidemoney(), output);
  }
  
  // required sint32 m_lBetType = 10;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->m_lbettype(), output);
  }
  
  // required sint32 m_lBetTurn = 11;
  if (has_m_lbetturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->m_lbetturn(), output);
  }
  
  // required .PKMoney m_money = 12;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->m_money(), output);
  }
  
  // repeated .PKVecMoney m_vtCallMoney = 13;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->m_vtcallmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 14;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(14, this->m_llpoolmoney(), output);
  }
  
}

int PKMsgSC_BettingAnsMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_BetType = 3;
    if (has_m_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bettype());
    }
    
    // required sint32 m_bBettingMoney = 4;
    if (has_m_bbettingmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bbettingmoney());
    }
    
    // required sint32 m_bMoneyLack = 5;
    if (has_m_bmoneylack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bmoneylack());
    }
    
    // required sint32 m_bCallMoneyZero = 6;
    if (has_m_bcallmoneyzero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bcallmoneyzero());
    }
    
    // required sint64 m_llCallMoney = 7;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallmoney());
    }
    
    // required sint64 m_llRaiseMoney = 8;
    if (has_m_llraisemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llraisemoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint64 m_llSideMoney = 9;
    if (has_m_llsidemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsidemoney());
    }
    
    // required sint32 m_lBetType = 10;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
    // required sint32 m_lBetTurn = 11;
    if (has_m_lbetturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetturn());
    }
    
    // required .PKMoney m_money = 12;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint64 m_llPoolMoney = 14;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .PKVecMoney m_vtCallMoney = 13;
  total_size += 1 * this->m_vtcallmoney_size();
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtcallmoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_BettingAnsMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_BettingAnsMsg*>(&from));
}

void PKMsgSC_BettingAnsMsg::MergeFrom(const PKMsgSC_BettingAnsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcallmoney_.MergeFrom(from.m_vtcallmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_bettype()) {
      set_m_bettype(from.m_bettype());
    }
    if (from.has_m_bbettingmoney()) {
      set_m_bbettingmoney(from.m_bbettingmoney());
    }
    if (from.has_m_bmoneylack()) {
      set_m_bmoneylack(from.m_bmoneylack());
    }
    if (from.has_m_bcallmoneyzero()) {
      set_m_bcallmoneyzero(from.m_bcallmoneyzero());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llraisemoney()) {
      set_m_llraisemoney(from.m_llraisemoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_llsidemoney()) {
      set_m_llsidemoney(from.m_llsidemoney());
    }
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_lbetturn()) {
      set_m_lbetturn(from.m_lbetturn());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::PKMoney::MergeFrom(from.m_money());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
}

void PKMsgSC_BettingAnsMsg::CopyFrom(const PKMsgSC_BettingAnsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_BettingAnsMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002fff) != 0x00002fff) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtcallmoney_size(); i++) {
    if (!this->m_vtcallmoney(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_BettingAnsMsg::Swap(PKMsgSC_BettingAnsMsg* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_bettype_, other->m_bettype_);
    std::swap(m_bbettingmoney_, other->m_bbettingmoney_);
    std::swap(m_bmoneylack_, other->m_bmoneylack_);
    std::swap(m_bcallmoneyzero_, other->m_bcallmoneyzero_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llraisemoney_, other->m_llraisemoney_);
    std::swap(m_llsidemoney_, other->m_llsidemoney_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_lbetturn_, other->m_lbetturn_);
    std::swap(m_money_, other->m_money_);
    m_vtcallmoney_.Swap(&other->m_vtcallmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_BettingAnsMsg::GetTypeName() const {
  return "PKMsgSC_BettingAnsMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_DealHiddenCard::kMLBossUSNFieldNumber;
const int PKMsgSC_DealHiddenCard::kMLCardsDealtFieldNumber;
const int PKMsgSC_DealHiddenCard::kMVtOneCardFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_DealHiddenCard::PKMsgSC_DealHiddenCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_DealHiddenCard::InitAsDefaultInstance() {
}

PKMsgSC_DealHiddenCard::PKMsgSC_DealHiddenCard(const PKMsgSC_DealHiddenCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_DealHiddenCard::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_lcardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_DealHiddenCard::~PKMsgSC_DealHiddenCard() {
  SharedDtor();
}

void PKMsgSC_DealHiddenCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_DealHiddenCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_DealHiddenCard& PKMsgSC_DealHiddenCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_DealHiddenCard* PKMsgSC_DealHiddenCard::default_instance_ = NULL;

PKMsgSC_DealHiddenCard* PKMsgSC_DealHiddenCard::New() const {
  return new PKMsgSC_DealHiddenCard;
}

void PKMsgSC_DealHiddenCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_lcardsdealt_ = 0;
  }
  m_vtonecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_DealHiddenCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vtOneCard;
        break;
      }
      
      // repeated .PKOneCard m_vtOneCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtOneCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtonecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vtOneCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_DealHiddenCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lcardsdealt(), output);
  }
  
  // repeated .PKOneCard m_vtOneCard = 3;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_vtonecard(i), output);
  }
  
}

int PKMsgSC_DealHiddenCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint32 m_lCardsDealt = 2;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
  }
  // repeated .PKOneCard m_vtOneCard = 3;
  total_size += 1 * this->m_vtonecard_size();
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtonecard(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_DealHiddenCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_DealHiddenCard*>(&from));
}

void PKMsgSC_DealHiddenCard::MergeFrom(const PKMsgSC_DealHiddenCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtonecard_.MergeFrom(from.m_vtonecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
  }
}

void PKMsgSC_DealHiddenCard::CopyFrom(const PKMsgSC_DealHiddenCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_DealHiddenCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < m_vtonecard_size(); i++) {
    if (!this->m_vtonecard(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_DealHiddenCard::Swap(PKMsgSC_DealHiddenCard* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_vtonecard_.Swap(&other->m_vtonecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_DealHiddenCard::GetTypeName() const {
  return "PKMsgSC_DealHiddenCard";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_AnteMoney::kMLlAnteMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_AnteMoney::PKMsgSC_AnteMoney()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_AnteMoney::InitAsDefaultInstance() {
}

PKMsgSC_AnteMoney::PKMsgSC_AnteMoney(const PKMsgSC_AnteMoney& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_AnteMoney::SharedCtor() {
  _cached_size_ = 0;
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_AnteMoney::~PKMsgSC_AnteMoney() {
  SharedDtor();
}

void PKMsgSC_AnteMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_AnteMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_AnteMoney& PKMsgSC_AnteMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_AnteMoney* PKMsgSC_AnteMoney::default_instance_ = NULL;

PKMsgSC_AnteMoney* PKMsgSC_AnteMoney::New() const {
  return new PKMsgSC_AnteMoney;
}

void PKMsgSC_AnteMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llantemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_AnteMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llAnteMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llantemoney_)));
          set_has_m_llantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_AnteMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llAnteMoney = 1;
  if (has_m_llantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llantemoney(), output);
  }
  
}

int PKMsgSC_AnteMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llAnteMoney = 1;
    if (has_m_llantemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llantemoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_AnteMoney::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_AnteMoney*>(&from));
}

void PKMsgSC_AnteMoney::MergeFrom(const PKMsgSC_AnteMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llantemoney()) {
      set_m_llantemoney(from.m_llantemoney());
    }
  }
}

void PKMsgSC_AnteMoney::CopyFrom(const PKMsgSC_AnteMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_AnteMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_AnteMoney::Swap(PKMsgSC_AnteMoney* other) {
  if (other != this) {
    std::swap(m_llantemoney_, other->m_llantemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_AnteMoney::GetTypeName() const {
  return "PKMsgSC_AnteMoney";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_RuleQuaterHalf::kMLlRuleQuaterHalfFieldNumber;
const int PKMsgSC_RuleQuaterHalf::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_RuleQuaterHalf::PKMsgSC_RuleQuaterHalf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_RuleQuaterHalf::InitAsDefaultInstance() {
}

PKMsgSC_RuleQuaterHalf::PKMsgSC_RuleQuaterHalf(const PKMsgSC_RuleQuaterHalf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_RuleQuaterHalf::SharedCtor() {
  _cached_size_ = 0;
  m_llrulequaterhalf_ = GOOGLE_LONGLONG(0);
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_RuleQuaterHalf::~PKMsgSC_RuleQuaterHalf() {
  SharedDtor();
}

void PKMsgSC_RuleQuaterHalf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_RuleQuaterHalf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_RuleQuaterHalf& PKMsgSC_RuleQuaterHalf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_RuleQuaterHalf* PKMsgSC_RuleQuaterHalf::default_instance_ = NULL;

PKMsgSC_RuleQuaterHalf* PKMsgSC_RuleQuaterHalf::New() const {
  return new PKMsgSC_RuleQuaterHalf;
}

void PKMsgSC_RuleQuaterHalf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llrulequaterhalf_ = GOOGLE_LONGLONG(0);
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_RuleQuaterHalf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llRuleQuaterHalf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llrulequaterhalf_)));
          set_has_m_llrulequaterhalf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_RuleQuaterHalf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llRuleQuaterHalf = 1;
  if (has_m_llrulequaterhalf()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llrulequaterhalf(), output);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llpoolmoney(), output);
  }
  
}

int PKMsgSC_RuleQuaterHalf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llRuleQuaterHalf = 1;
    if (has_m_llrulequaterhalf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llrulequaterhalf());
    }
    
    // required sint64 m_llPoolMoney = 2;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_RuleQuaterHalf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_RuleQuaterHalf*>(&from));
}

void PKMsgSC_RuleQuaterHalf::MergeFrom(const PKMsgSC_RuleQuaterHalf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llrulequaterhalf()) {
      set_m_llrulequaterhalf(from.m_llrulequaterhalf());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
}

void PKMsgSC_RuleQuaterHalf::CopyFrom(const PKMsgSC_RuleQuaterHalf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_RuleQuaterHalf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgSC_RuleQuaterHalf::Swap(PKMsgSC_RuleQuaterHalf* other) {
  if (other != this) {
    std::swap(m_llrulequaterhalf_, other->m_llrulequaterhalf_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_RuleQuaterHalf::GetTypeName() const {
  return "PKMsgSC_RuleQuaterHalf";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_Finished::kMLStateFieldNumber;
const int PKMsgSC_Finished::kMBGiveUpFieldNumber;
const int PKMsgSC_Finished::kMLRankFieldNumber;
const int PKMsgSC_Finished::kMLBossUSNFieldNumber;
const int PKMsgSC_Finished::kMLlGiveMoneyFieldNumber;
const int PKMsgSC_Finished::kMVtWinFieldNumber;
const int PKMsgSC_Finished::kMVtResultFieldNumber;
const int PKMsgSC_Finished::kMVtGiveMoneyFieldNumber;
const int PKMsgSC_Finished::kMTblCardFieldNumber;
const int PKMsgSC_Finished::kMTblMoneyFieldNumber;
const int PKMsgSC_Finished::kMLlPoolMoneyFieldNumber;
const int PKMsgSC_Finished::kMVtUserMoneyFieldNumber;
const int PKMsgSC_Finished::kMLResultIdxFieldNumber;
const int PKMsgSC_Finished::kMLlJackpotFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_Finished::PKMsgSC_Finished()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_Finished::InitAsDefaultInstance() {
}

PKMsgSC_Finished::PKMsgSC_Finished(const PKMsgSC_Finished& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_Finished::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_bgiveup_ = 0;
  m_lrank_ = 0;
  m_lbossusn_ = 0;
  m_llgivemoney_ = GOOGLE_LONGLONG(0);
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  m_lresultidx_ = 0;
  m_lljackpot_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_Finished::~PKMsgSC_Finished() {
  SharedDtor();
}

void PKMsgSC_Finished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_Finished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_Finished& PKMsgSC_Finished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_Finished* PKMsgSC_Finished::default_instance_ = NULL;

PKMsgSC_Finished* PKMsgSC_Finished::New() const {
  return new PKMsgSC_Finished;
}

void PKMsgSC_Finished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_bgiveup_ = 0;
    m_lrank_ = 0;
    m_lbossusn_ = 0;
    m_llgivemoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
    m_lresultidx_ = 0;
    m_lljackpot_ = GOOGLE_LONGLONG(0);
  }
  m_vtwin_.Clear();
  m_vtresult_.Clear();
  m_vtgivemoney_.Clear();
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  m_vtusermoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_Finished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bGiveUp;
        break;
      }
      
      // required sint32 m_bGiveUp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bGiveUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bgiveup_)));
          set_has_m_bgiveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lRank;
        break;
      }
      
      // required sint32 m_lRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lrank_)));
          set_has_m_lrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lBossUSN;
        break;
      }
      
      // required sint32 m_lBossUSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBossUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llGiveMoney;
        break;
      }
      
      // required sint64 m_llGiveMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llgivemoney_)));
          set_has_m_llgivemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vtWin;
        break;
      }
      
      // repeated int32 m_vtWin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_vtwin())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtwin())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vtWin;
        if (input->ExpectTag(56)) goto parse_m_vtResult;
        break;
      }
      
      // repeated int32 m_vtResult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_vtresult())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtresult())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_vtResult;
        if (input->ExpectTag(64)) goto parse_m_vtGiveMoney;
        break;
      }
      
      // repeated sint64 m_vtGiveMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtGiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 64, input, this->mutable_m_vtgivemoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_m_vtgivemoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_vtGiveMoney;
        if (input->ExpectTag(74)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .PKCards m_tblCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_tblCard;
        if (input->ExpectTag(82)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .PKMoney m_tblMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_tblMoney;
        if (input->ExpectTag(88)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_vtUserMoney;
        break;
      }
      
      // repeated .UserMoney m_vtUserMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtUserMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtusermoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_vtUserMoney;
        if (input->ExpectTag(104)) goto parse_m_lResultIdx;
        break;
      }
      
      // required sint32 m_lResultIdx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lresultidx_)));
          set_has_m_lresultidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_llJackpot;
        break;
      }
      
      // required sint64 m_llJackpot = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpot_)));
          set_has_m_lljackpot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_Finished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // required sint32 m_bGiveUp = 2;
  if (has_m_bgiveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bgiveup(), output);
  }
  
  // required sint32 m_lRank = 3;
  if (has_m_lrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lrank(), output);
  }
  
  // required sint32 m_lBossUSN = 4;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lbossusn(), output);
  }
  
  // required sint64 m_llGiveMoney = 5;
  if (has_m_llgivemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llgivemoney(), output);
  }
  
  // repeated int32 m_vtWin = 6;
  for (int i = 0; i < this->m_vtwin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_vtwin(i), output);
  }
  
  // repeated int32 m_vtResult = 7;
  for (int i = 0; i < this->m_vtresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_vtresult(i), output);
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      8, this->m_vtgivemoney(i), output);
  }
  
  // repeated .PKCards m_tblCard = 9;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->m_tblcard(i), output);
  }
  
  // repeated .PKMoney m_tblMoney = 10;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 11;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->m_llpoolmoney(), output);
  }
  
  // repeated .UserMoney m_vtUserMoney = 12;
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->m_vtusermoney(i), output);
  }
  
  // required sint32 m_lResultIdx = 13;
  if (has_m_lresultidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->m_lresultidx(), output);
  }
  
  // required sint64 m_llJackpot = 14;
  if (has_m_lljackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(14, this->m_lljackpot(), output);
  }
  
}

int PKMsgSC_Finished::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint32 m_bGiveUp = 2;
    if (has_m_bgiveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bgiveup());
    }
    
    // required sint32 m_lRank = 3;
    if (has_m_lrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lrank());
    }
    
    // required sint32 m_lBossUSN = 4;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint64 m_llGiveMoney = 5;
    if (has_m_llgivemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llgivemoney());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required sint64 m_llPoolMoney = 11;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
    // required sint32 m_lResultIdx = 13;
    if (has_m_lresultidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lresultidx());
    }
    
    // required sint64 m_llJackpot = 14;
    if (has_m_lljackpot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpot());
    }
    
  }
  // repeated int32 m_vtWin = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtwin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtwin(i));
    }
    total_size += 1 * this->m_vtwin_size() + data_size;
  }
  
  // repeated int32 m_vtResult = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtresult(i));
    }
    total_size += 1 * this->m_vtresult_size() + data_size;
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->m_vtgivemoney(i));
    }
    total_size += 1 * this->m_vtgivemoney_size() + data_size;
  }
  
  // repeated .PKCards m_tblCard = 9;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .PKMoney m_tblMoney = 10;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  // repeated .UserMoney m_vtUserMoney = 12;
  total_size += 1 * this->m_vtusermoney_size();
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtusermoney(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_Finished::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_Finished*>(&from));
}

void PKMsgSC_Finished::MergeFrom(const PKMsgSC_Finished& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwin_.MergeFrom(from.m_vtwin_);
  m_vtresult_.MergeFrom(from.m_vtresult_);
  m_vtgivemoney_.MergeFrom(from.m_vtgivemoney_);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  m_vtusermoney_.MergeFrom(from.m_vtusermoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_bgiveup()) {
      set_m_bgiveup(from.m_bgiveup());
    }
    if (from.has_m_lrank()) {
      set_m_lrank(from.m_lrank());
    }
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_llgivemoney()) {
      set_m_llgivemoney(from.m_llgivemoney());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
    if (from.has_m_lresultidx()) {
      set_m_lresultidx(from.m_lresultidx());
    }
    if (from.has_m_lljackpot()) {
      set_m_lljackpot(from.m_lljackpot());
    }
  }
}

void PKMsgSC_Finished::CopyFrom(const PKMsgSC_Finished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_Finished::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000341f) != 0x0000341f) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtusermoney_size(); i++) {
    if (!this->m_vtusermoney(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_Finished::Swap(PKMsgSC_Finished* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_bgiveup_, other->m_bgiveup_);
    std::swap(m_lrank_, other->m_lrank_);
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_llgivemoney_, other->m_llgivemoney_);
    m_vtwin_.Swap(&other->m_vtwin_);
    m_vtresult_.Swap(&other->m_vtresult_);
    m_vtgivemoney_.Swap(&other->m_vtgivemoney_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    m_vtusermoney_.Swap(&other->m_vtusermoney_);
    std::swap(m_lresultidx_, other->m_lresultidx_);
    std::swap(m_lljackpot_, other->m_lljackpot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_Finished::GetTypeName() const {
  return "PKMsgSC_Finished";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_NewGame::kMVtWinLoseInfoFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_NewGame::PKMsgSC_NewGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_NewGame::InitAsDefaultInstance() {
}

PKMsgSC_NewGame::PKMsgSC_NewGame(const PKMsgSC_NewGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_NewGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_NewGame::~PKMsgSC_NewGame() {
  SharedDtor();
}

void PKMsgSC_NewGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_NewGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_NewGame& PKMsgSC_NewGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_NewGame* PKMsgSC_NewGame::default_instance_ = NULL;

PKMsgSC_NewGame* PKMsgSC_NewGame::New() const {
  return new PKMsgSC_NewGame;
}

void PKMsgSC_NewGame::Clear() {
  m_vtwinloseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_NewGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtWinLoseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtwinloseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtWinLoseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_NewGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_vtwinloseinfo(i), output);
  }
  
}

int PKMsgSC_NewGame::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
  total_size += 1 * this->m_vtwinloseinfo_size();
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtwinloseinfo(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_NewGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_NewGame*>(&from));
}

void PKMsgSC_NewGame::MergeFrom(const PKMsgSC_NewGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwinloseinfo_.MergeFrom(from.m_vtwinloseinfo_);
}

void PKMsgSC_NewGame::CopyFrom(const PKMsgSC_NewGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_NewGame::IsInitialized() const {
  
  for (int i = 0; i < m_vtwinloseinfo_size(); i++) {
    if (!this->m_vtwinloseinfo(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_NewGame::Swap(PKMsgSC_NewGame* other) {
  if (other != this) {
    m_vtwinloseinfo_.Swap(&other->m_vtwinloseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_NewGame::GetTypeName() const {
  return "PKMsgSC_NewGame";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_ContinueAns::kMLUSNFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_ContinueAns::PKMsgSC_ContinueAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_ContinueAns::InitAsDefaultInstance() {
}

PKMsgSC_ContinueAns::PKMsgSC_ContinueAns(const PKMsgSC_ContinueAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_ContinueAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_ContinueAns::~PKMsgSC_ContinueAns() {
  SharedDtor();
}

void PKMsgSC_ContinueAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_ContinueAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_ContinueAns& PKMsgSC_ContinueAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_ContinueAns* PKMsgSC_ContinueAns::default_instance_ = NULL;

PKMsgSC_ContinueAns* PKMsgSC_ContinueAns::New() const {
  return new PKMsgSC_ContinueAns;
}

void PKMsgSC_ContinueAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_ContinueAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_ContinueAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
}

int PKMsgSC_ContinueAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_ContinueAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_ContinueAns*>(&from));
}

void PKMsgSC_ContinueAns::MergeFrom(const PKMsgSC_ContinueAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
  }
}

void PKMsgSC_ContinueAns::CopyFrom(const PKMsgSC_ContinueAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_ContinueAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_ContinueAns::Swap(PKMsgSC_ContinueAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_ContinueAns::GetTypeName() const {
  return "PKMsgSC_ContinueAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_Continue::kMVtWinLoseInfoFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_Continue::PKMsgSC_Continue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_Continue::InitAsDefaultInstance() {
}

PKMsgSC_Continue::PKMsgSC_Continue(const PKMsgSC_Continue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_Continue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_Continue::~PKMsgSC_Continue() {
  SharedDtor();
}

void PKMsgSC_Continue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_Continue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_Continue& PKMsgSC_Continue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_Continue* PKMsgSC_Continue::default_instance_ = NULL;

PKMsgSC_Continue* PKMsgSC_Continue::New() const {
  return new PKMsgSC_Continue;
}

void PKMsgSC_Continue::Clear() {
  m_vtwinloseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_Continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtWinLoseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtwinloseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtWinLoseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_Continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_vtwinloseinfo(i), output);
  }
  
}

int PKMsgSC_Continue::ByteSize() const {
  int total_size = 0;
  
  // repeated .PKWinLoseInfo m_vtWinLoseInfo = 1;
  total_size += 1 * this->m_vtwinloseinfo_size();
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtwinloseinfo(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_Continue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_Continue*>(&from));
}

void PKMsgSC_Continue::MergeFrom(const PKMsgSC_Continue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwinloseinfo_.MergeFrom(from.m_vtwinloseinfo_);
}

void PKMsgSC_Continue::CopyFrom(const PKMsgSC_Continue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_Continue::IsInitialized() const {
  
  for (int i = 0; i < m_vtwinloseinfo_size(); i++) {
    if (!this->m_vtwinloseinfo(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_Continue::Swap(PKMsgSC_Continue* other) {
  if (other != this) {
    m_vtwinloseinfo_.Swap(&other->m_vtwinloseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_Continue::GetTypeName() const {
  return "PKMsgSC_Continue";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_SystemMsg::kMLTypeFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_SystemMsg::PKMsgSC_SystemMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_SystemMsg::InitAsDefaultInstance() {
}

PKMsgSC_SystemMsg::PKMsgSC_SystemMsg(const PKMsgSC_SystemMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_SystemMsg::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_SystemMsg::~PKMsgSC_SystemMsg() {
  SharedDtor();
}

void PKMsgSC_SystemMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_SystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_SystemMsg& PKMsgSC_SystemMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_SystemMsg* PKMsgSC_SystemMsg::default_instance_ = NULL;

PKMsgSC_SystemMsg* PKMsgSC_SystemMsg::New() const {
  return new PKMsgSC_SystemMsg;
}

void PKMsgSC_SystemMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_SystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_SystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
}

int PKMsgSC_SystemMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_SystemMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_SystemMsg*>(&from));
}

void PKMsgSC_SystemMsg::MergeFrom(const PKMsgSC_SystemMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
  }
}

void PKMsgSC_SystemMsg::CopyFrom(const PKMsgSC_SystemMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_SystemMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_SystemMsg::Swap(PKMsgSC_SystemMsg* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_SystemMsg::GetTypeName() const {
  return "PKMsgSC_SystemMsg";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgSC_PurgeAns::PKMsgSC_PurgeAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_PurgeAns::InitAsDefaultInstance() {
}

PKMsgSC_PurgeAns::PKMsgSC_PurgeAns(const PKMsgSC_PurgeAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_PurgeAns::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_PurgeAns::~PKMsgSC_PurgeAns() {
  SharedDtor();
}

void PKMsgSC_PurgeAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_PurgeAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_PurgeAns& PKMsgSC_PurgeAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_PurgeAns* PKMsgSC_PurgeAns::default_instance_ = NULL;

PKMsgSC_PurgeAns* PKMsgSC_PurgeAns::New() const {
  return new PKMsgSC_PurgeAns;
}

void PKMsgSC_PurgeAns::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_PurgeAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgSC_PurgeAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgSC_PurgeAns::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_PurgeAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_PurgeAns*>(&from));
}

void PKMsgSC_PurgeAns::MergeFrom(const PKMsgSC_PurgeAns& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgSC_PurgeAns::CopyFrom(const PKMsgSC_PurgeAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_PurgeAns::IsInitialized() const {
  
  return true;
}

void PKMsgSC_PurgeAns::Swap(PKMsgSC_PurgeAns* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_PurgeAns::GetTypeName() const {
  return "PKMsgSC_PurgeAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_PurgeInfo::kMVtPurgeUSNFieldNumber;
const int PKMsgSC_PurgeInfo::kMNCountFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_PurgeInfo::PKMsgSC_PurgeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_PurgeInfo::InitAsDefaultInstance() {
}

PKMsgSC_PurgeInfo::PKMsgSC_PurgeInfo(const PKMsgSC_PurgeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_PurgeInfo::SharedCtor() {
  _cached_size_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_PurgeInfo::~PKMsgSC_PurgeInfo() {
  SharedDtor();
}

void PKMsgSC_PurgeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_PurgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_PurgeInfo& PKMsgSC_PurgeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_PurgeInfo* PKMsgSC_PurgeInfo::default_instance_ = NULL;

PKMsgSC_PurgeInfo* PKMsgSC_PurgeInfo::New() const {
  return new PKMsgSC_PurgeInfo;
}

void PKMsgSC_PurgeInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_ncount_ = 0;
  }
  m_vtpurgeusn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_PurgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKVecUSN m_vtPurgeUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtPurgeUSN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtpurgeusn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtPurgeUSN;
        if (input->ExpectTag(16)) goto parse_m_nCount;
        break;
      }
      
      // required int32 m_nCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_PurgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKVecUSN m_vtPurgeUSN = 1;
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_vtpurgeusn(i), output);
  }
  
  // required int32 m_nCount = 2;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ncount(), output);
  }
  
}

int PKMsgSC_PurgeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 m_nCount = 2;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }
    
  }
  // repeated .PKVecUSN m_vtPurgeUSN = 1;
  total_size += 1 * this->m_vtpurgeusn_size();
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtpurgeusn(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_PurgeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_PurgeInfo*>(&from));
}

void PKMsgSC_PurgeInfo::MergeFrom(const PKMsgSC_PurgeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtpurgeusn_.MergeFrom(from.m_vtpurgeusn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
}

void PKMsgSC_PurgeInfo::CopyFrom(const PKMsgSC_PurgeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_PurgeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < m_vtpurgeusn_size(); i++) {
    if (!this->m_vtpurgeusn(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_PurgeInfo::Swap(PKMsgSC_PurgeInfo* other) {
  if (other != this) {
    m_vtpurgeusn_.Swap(&other->m_vtpurgeusn_);
    std::swap(m_ncount_, other->m_ncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_PurgeInfo::GetTypeName() const {
  return "PKMsgSC_PurgeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_SetPurgeMoney::kMLUSNFieldNumber;
const int PKMsgSC_SetPurgeMoney::kMMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_SetPurgeMoney::PKMsgSC_SetPurgeMoney()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_SetPurgeMoney::InitAsDefaultInstance() {
  m_money_ = const_cast< ::PKMoney*>(&::PKMoney::default_instance());
}

PKMsgSC_SetPurgeMoney::PKMsgSC_SetPurgeMoney(const PKMsgSC_SetPurgeMoney& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_SetPurgeMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_SetPurgeMoney::~PKMsgSC_SetPurgeMoney() {
  SharedDtor();
}

void PKMsgSC_SetPurgeMoney::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void PKMsgSC_SetPurgeMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_SetPurgeMoney& PKMsgSC_SetPurgeMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_SetPurgeMoney* PKMsgSC_SetPurgeMoney::default_instance_ = NULL;

PKMsgSC_SetPurgeMoney* PKMsgSC_SetPurgeMoney::New() const {
  return new PKMsgSC_SetPurgeMoney;
}

void PKMsgSC_SetPurgeMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::PKMoney::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_SetPurgeMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_money;
        break;
      }
      
      // required .PKMoney m_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_SetPurgeMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required .PKMoney m_money = 2;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_money(), output);
  }
  
}

int PKMsgSC_SetPurgeMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required .PKMoney m_money = 2;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_SetPurgeMoney::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_SetPurgeMoney*>(&from));
}

void PKMsgSC_SetPurgeMoney::MergeFrom(const PKMsgSC_SetPurgeMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::PKMoney::MergeFrom(from.m_money());
    }
  }
}

void PKMsgSC_SetPurgeMoney::CopyFrom(const PKMsgSC_SetPurgeMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_SetPurgeMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_SetPurgeMoney::Swap(PKMsgSC_SetPurgeMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_SetPurgeMoney::GetTypeName() const {
  return "PKMsgSC_SetPurgeMoney";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_AssaItemNotify::kMLUSNFieldNumber;
const int PKMsgSC_AssaItemNotify::kMLRankTypeFieldNumber;
const int PKMsgSC_AssaItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_AssaItemNotify::PKMsgSC_AssaItemNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_AssaItemNotify::InitAsDefaultInstance() {
}

PKMsgSC_AssaItemNotify::PKMsgSC_AssaItemNotify(const PKMsgSC_AssaItemNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_AssaItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_AssaItemNotify::~PKMsgSC_AssaItemNotify() {
  SharedDtor();
}

void PKMsgSC_AssaItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgSC_AssaItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_AssaItemNotify& PKMsgSC_AssaItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_AssaItemNotify* PKMsgSC_AssaItemNotify::default_instance_ = NULL;

PKMsgSC_AssaItemNotify* PKMsgSC_AssaItemNotify::New() const {
  return new PKMsgSC_AssaItemNotify;
}

void PKMsgSC_AssaItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_AssaItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_AssaItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_sitem(), output);
  }
  
}

int PKMsgSC_AssaItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required string m_sItem = 3;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_AssaItemNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_AssaItemNotify*>(&from));
}

void PKMsgSC_AssaItemNotify::MergeFrom(const PKMsgSC_AssaItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
}

void PKMsgSC_AssaItemNotify::CopyFrom(const PKMsgSC_AssaItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_AssaItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PKMsgSC_AssaItemNotify::Swap(PKMsgSC_AssaItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_AssaItemNotify::GetTypeName() const {
  return "PKMsgSC_AssaItemNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_ThankYouItemNotify::kMLUSNFieldNumber;
const int PKMsgSC_ThankYouItemNotify::kMLRankTypeFieldNumber;
const int PKMsgSC_ThankYouItemNotify::kMLlBasicDDangMoneyFieldNumber;
const int PKMsgSC_ThankYouItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_ThankYouItemNotify::PKMsgSC_ThankYouItemNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_ThankYouItemNotify::InitAsDefaultInstance() {
}

PKMsgSC_ThankYouItemNotify::PKMsgSC_ThankYouItemNotify(const PKMsgSC_ThankYouItemNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_ThankYouItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_llbasicddangmoney_ = GOOGLE_LONGLONG(0);
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_ThankYouItemNotify::~PKMsgSC_ThankYouItemNotify() {
  SharedDtor();
}

void PKMsgSC_ThankYouItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgSC_ThankYouItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_ThankYouItemNotify& PKMsgSC_ThankYouItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_ThankYouItemNotify* PKMsgSC_ThankYouItemNotify::default_instance_ = NULL;

PKMsgSC_ThankYouItemNotify* PKMsgSC_ThankYouItemNotify::New() const {
  return new PKMsgSC_ThankYouItemNotify;
}

void PKMsgSC_ThankYouItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    m_llbasicddangmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_ThankYouItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llBasicDDangMoney;
        break;
      }
      
      // required sint64 m_llBasicDDangMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llBasicDDangMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llbasicddangmoney_)));
          set_has_m_llbasicddangmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_ThankYouItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required sint64 m_llBasicDDangMoney = 3;
  if (has_m_llbasicddangmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llbasicddangmoney(), output);
  }
  
  // required string m_sItem = 4;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_sitem(), output);
  }
  
}

int PKMsgSC_ThankYouItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required sint64 m_llBasicDDangMoney = 3;
    if (has_m_llbasicddangmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llbasicddangmoney());
    }
    
    // required string m_sItem = 4;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_ThankYouItemNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_ThankYouItemNotify*>(&from));
}

void PKMsgSC_ThankYouItemNotify::MergeFrom(const PKMsgSC_ThankYouItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_llbasicddangmoney()) {
      set_m_llbasicddangmoney(from.m_llbasicddangmoney());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
}

void PKMsgSC_ThankYouItemNotify::CopyFrom(const PKMsgSC_ThankYouItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_ThankYouItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PKMsgSC_ThankYouItemNotify::Swap(PKMsgSC_ThankYouItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_llbasicddangmoney_, other->m_llbasicddangmoney_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_ThankYouItemNotify::GetTypeName() const {
  return "PKMsgSC_ThankYouItemNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_MadeItemNotify::kMLUSNFieldNumber;
const int PKMsgSC_MadeItemNotify::kMLRankTypeFieldNumber;
const int PKMsgSC_MadeItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_MadeItemNotify::PKMsgSC_MadeItemNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_MadeItemNotify::InitAsDefaultInstance() {
}

PKMsgSC_MadeItemNotify::PKMsgSC_MadeItemNotify(const PKMsgSC_MadeItemNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_MadeItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_MadeItemNotify::~PKMsgSC_MadeItemNotify() {
  SharedDtor();
}

void PKMsgSC_MadeItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgSC_MadeItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_MadeItemNotify& PKMsgSC_MadeItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_MadeItemNotify* PKMsgSC_MadeItemNotify::default_instance_ = NULL;

PKMsgSC_MadeItemNotify* PKMsgSC_MadeItemNotify::New() const {
  return new PKMsgSC_MadeItemNotify;
}

void PKMsgSC_MadeItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_MadeItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_MadeItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_sitem(), output);
  }
  
}

int PKMsgSC_MadeItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required string m_sItem = 3;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_MadeItemNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_MadeItemNotify*>(&from));
}

void PKMsgSC_MadeItemNotify::MergeFrom(const PKMsgSC_MadeItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
}

void PKMsgSC_MadeItemNotify::CopyFrom(const PKMsgSC_MadeItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_MadeItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PKMsgSC_MadeItemNotify::Swap(PKMsgSC_MadeItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_MadeItemNotify::GetTypeName() const {
  return "PKMsgSC_MadeItemNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_ExtMoneyNotify::kMLUSNFieldNumber;
const int PKMsgSC_ExtMoneyNotify::kMBExtTypeFieldNumber;
const int PKMsgSC_ExtMoneyNotify::kMLlCMoneyFieldNumber;
const int PKMsgSC_ExtMoneyNotify::kMLlCashBoxFieldNumber;
const int PKMsgSC_ExtMoneyNotify::kMLlExtMoneyFieldNumber;
const int PKMsgSC_ExtMoneyNotify::kMLlExtDateFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_ExtMoneyNotify::PKMsgSC_ExtMoneyNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_ExtMoneyNotify::InitAsDefaultInstance() {
}

PKMsgSC_ExtMoneyNotify::PKMsgSC_ExtMoneyNotify(const PKMsgSC_ExtMoneyNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_ExtMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_bexttype_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llcashbox_ = GOOGLE_LONGLONG(0);
  m_llextmoney_ = GOOGLE_LONGLONG(0);
  m_llextdate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_ExtMoneyNotify::~PKMsgSC_ExtMoneyNotify() {
  SharedDtor();
}

void PKMsgSC_ExtMoneyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_ExtMoneyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_ExtMoneyNotify& PKMsgSC_ExtMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_ExtMoneyNotify* PKMsgSC_ExtMoneyNotify::default_instance_ = NULL;

PKMsgSC_ExtMoneyNotify* PKMsgSC_ExtMoneyNotify::New() const {
  return new PKMsgSC_ExtMoneyNotify;
}

void PKMsgSC_ExtMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_bexttype_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llcashbox_ = GOOGLE_LONGLONG(0);
    m_llextmoney_ = GOOGLE_LONGLONG(0);
    m_llextdate_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_ExtMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bExtType;
        break;
      }
      
      // required sint32 m_bExtType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bExtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bexttype_)));
          set_has_m_bexttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCashBox;
        break;
      }
      
      // required sint64 m_llCashBox = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCashBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcashbox_)));
          set_has_m_llcashbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llExtMoney;
        break;
      }
      
      // required sint64 m_llExtMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llExtMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llextmoney_)));
          set_has_m_llextmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llExtDate;
        break;
      }
      
      // required sint64 m_llExtDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llExtDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llextdate_)));
          set_has_m_llextdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_ExtMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_bExtType = 2;
  if (has_m_bexttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bexttype(), output);
  }
  
  // required sint64 m_llCMoney = 3;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llCashBox = 4;
  if (has_m_llcashbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcashbox(), output);
  }
  
  // required sint64 m_llExtMoney = 5;
  if (has_m_llextmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llextmoney(), output);
  }
  
  // required sint64 m_llExtDate = 6;
  if (has_m_llextdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_llextdate(), output);
  }
  
}

int PKMsgSC_ExtMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_bExtType = 2;
    if (has_m_bexttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bexttype());
    }
    
    // required sint64 m_llCMoney = 3;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llCashBox = 4;
    if (has_m_llcashbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcashbox());
    }
    
    // required sint64 m_llExtMoney = 5;
    if (has_m_llextmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llextmoney());
    }
    
    // required sint64 m_llExtDate = 6;
    if (has_m_llextdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llextdate());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_ExtMoneyNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_ExtMoneyNotify*>(&from));
}

void PKMsgSC_ExtMoneyNotify::MergeFrom(const PKMsgSC_ExtMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_bexttype()) {
      set_m_bexttype(from.m_bexttype());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llcashbox()) {
      set_m_llcashbox(from.m_llcashbox());
    }
    if (from.has_m_llextmoney()) {
      set_m_llextmoney(from.m_llextmoney());
    }
    if (from.has_m_llextdate()) {
      set_m_llextdate(from.m_llextdate());
    }
  }
}

void PKMsgSC_ExtMoneyNotify::CopyFrom(const PKMsgSC_ExtMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_ExtMoneyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void PKMsgSC_ExtMoneyNotify::Swap(PKMsgSC_ExtMoneyNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_bexttype_, other->m_bexttype_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llcashbox_, other->m_llcashbox_);
    std::swap(m_llextmoney_, other->m_llextmoney_);
    std::swap(m_llextdate_, other->m_llextdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_ExtMoneyNotify::GetTypeName() const {
  return "PKMsgSC_ExtMoneyNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_GameEndSystemMsg::kMLTypeFieldNumber;
const int PKMsgSC_GameEndSystemMsg::kMLUSNFieldNumber;
const int PKMsgSC_GameEndSystemMsg::kMBGiveUpFieldNumber;
const int PKMsgSC_GameEndSystemMsg::kMLlMoneyFieldNumber;
const int PKMsgSC_GameEndSystemMsg::kMSMsgFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_GameEndSystemMsg::PKMsgSC_GameEndSystemMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_GameEndSystemMsg::InitAsDefaultInstance() {
}

PKMsgSC_GameEndSystemMsg::PKMsgSC_GameEndSystemMsg(const PKMsgSC_GameEndSystemMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_GameEndSystemMsg::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_lusn_ = 0;
  m_bgiveup_ = 0;
  m_llmoney_ = GOOGLE_LONGLONG(0);
  m_smsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_GameEndSystemMsg::~PKMsgSC_GameEndSystemMsg() {
  SharedDtor();
}

void PKMsgSC_GameEndSystemMsg::SharedDtor() {
  if (m_smsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smsg_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgSC_GameEndSystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_GameEndSystemMsg& PKMsgSC_GameEndSystemMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_GameEndSystemMsg* PKMsgSC_GameEndSystemMsg::default_instance_ = NULL;

PKMsgSC_GameEndSystemMsg* PKMsgSC_GameEndSystemMsg::New() const {
  return new PKMsgSC_GameEndSystemMsg;
}

void PKMsgSC_GameEndSystemMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_lusn_ = 0;
    m_bgiveup_ = 0;
    m_llmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_smsg()) {
      if (m_smsg_ != &::google::protobuf::internal::kEmptyString) {
        m_smsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_GameEndSystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lUSN;
        break;
      }
      
      // required sint32 m_lUSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_bGiveUp;
        break;
      }
      
      // required sint32 m_bGiveUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bGiveUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bgiveup_)));
          set_has_m_bgiveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llMoney;
        break;
      }
      
      // required sint64 m_llMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llmoney_)));
          set_has_m_llmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_sMsg;
        break;
      }
      
      // required string m_sMsg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_GameEndSystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint32 m_lUSN = 2;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lusn(), output);
  }
  
  // required sint32 m_bGiveUp = 3;
  if (has_m_bgiveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_bgiveup(), output);
  }
  
  // required sint64 m_llMoney = 4;
  if (has_m_llmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llmoney(), output);
  }
  
  // required string m_sMsg = 5;
  if (has_m_smsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_smsg(), output);
  }
  
}

int PKMsgSC_GameEndSystemMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint32 m_lUSN = 2;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_bGiveUp = 3;
    if (has_m_bgiveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bgiveup());
    }
    
    // required sint64 m_llMoney = 4;
    if (has_m_llmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llmoney());
    }
    
    // required string m_sMsg = 5;
    if (has_m_smsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smsg());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_GameEndSystemMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_GameEndSystemMsg*>(&from));
}

void PKMsgSC_GameEndSystemMsg::MergeFrom(const PKMsgSC_GameEndSystemMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_bgiveup()) {
      set_m_bgiveup(from.m_bgiveup());
    }
    if (from.has_m_llmoney()) {
      set_m_llmoney(from.m_llmoney());
    }
    if (from.has_m_smsg()) {
      set_m_smsg(from.m_smsg());
    }
  }
}

void PKMsgSC_GameEndSystemMsg::CopyFrom(const PKMsgSC_GameEndSystemMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_GameEndSystemMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void PKMsgSC_GameEndSystemMsg::Swap(PKMsgSC_GameEndSystemMsg* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_bgiveup_, other->m_bgiveup_);
    std::swap(m_llmoney_, other->m_llmoney_);
    std::swap(m_smsg_, other->m_smsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_GameEndSystemMsg::GetTypeName() const {
  return "PKMsgSC_GameEndSystemMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_ChangeAvatarNotify::kMLUSNFieldNumber;
const int PKMsgSC_ChangeAvatarNotify::kMNIndexFieldNumber;
const int PKMsgSC_ChangeAvatarNotify::kMUinfoFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_ChangeAvatarNotify::PKMsgSC_ChangeAvatarNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_ChangeAvatarNotify::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::PKUserInfo*>(&::PKUserInfo::default_instance());
}

PKMsgSC_ChangeAvatarNotify::PKMsgSC_ChangeAvatarNotify(const PKMsgSC_ChangeAvatarNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_ChangeAvatarNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_uinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_ChangeAvatarNotify::~PKMsgSC_ChangeAvatarNotify() {
  SharedDtor();
}

void PKMsgSC_ChangeAvatarNotify::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
  }
}

void PKMsgSC_ChangeAvatarNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_ChangeAvatarNotify& PKMsgSC_ChangeAvatarNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_ChangeAvatarNotify* PKMsgSC_ChangeAvatarNotify::default_instance_ = NULL;

PKMsgSC_ChangeAvatarNotify* PKMsgSC_ChangeAvatarNotify::New() const {
  return new PKMsgSC_ChangeAvatarNotify;
}

void PKMsgSC_ChangeAvatarNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::PKUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_ChangeAvatarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_uinfo;
        break;
      }
      
      // required .PKUserInfo m_uinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_ChangeAvatarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required .PKUserInfo m_uinfo = 3;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_uinfo(), output);
  }
  
}

int PKMsgSC_ChangeAvatarNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required .PKUserInfo m_uinfo = 3;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_ChangeAvatarNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_ChangeAvatarNotify*>(&from));
}

void PKMsgSC_ChangeAvatarNotify::MergeFrom(const PKMsgSC_ChangeAvatarNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::PKUserInfo::MergeFrom(from.m_uinfo());
    }
  }
}

void PKMsgSC_ChangeAvatarNotify::CopyFrom(const PKMsgSC_ChangeAvatarNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_ChangeAvatarNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_ChangeAvatarNotify::Swap(PKMsgSC_ChangeAvatarNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_ChangeAvatarNotify::GetTypeName() const {
  return "PKMsgSC_ChangeAvatarNotify";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgSC_AbuseAns::PKMsgSC_AbuseAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_AbuseAns::InitAsDefaultInstance() {
}

PKMsgSC_AbuseAns::PKMsgSC_AbuseAns(const PKMsgSC_AbuseAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_AbuseAns::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_AbuseAns::~PKMsgSC_AbuseAns() {
  SharedDtor();
}

void PKMsgSC_AbuseAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_AbuseAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_AbuseAns& PKMsgSC_AbuseAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_AbuseAns* PKMsgSC_AbuseAns::default_instance_ = NULL;

PKMsgSC_AbuseAns* PKMsgSC_AbuseAns::New() const {
  return new PKMsgSC_AbuseAns;
}

void PKMsgSC_AbuseAns::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_AbuseAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgSC_AbuseAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgSC_AbuseAns::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_AbuseAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_AbuseAns*>(&from));
}

void PKMsgSC_AbuseAns::MergeFrom(const PKMsgSC_AbuseAns& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgSC_AbuseAns::CopyFrom(const PKMsgSC_AbuseAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_AbuseAns::IsInitialized() const {
  
  return true;
}

void PKMsgSC_AbuseAns::Swap(PKMsgSC_AbuseAns* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_AbuseAns::GetTypeName() const {
  return "PKMsgSC_AbuseAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_SoundTypeAns::kMLUSNFieldNumber;
const int PKMsgSC_SoundTypeAns::kMNIndexFieldNumber;
const int PKMsgSC_SoundTypeAns::kMLSoundTypeFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_SoundTypeAns::PKMsgSC_SoundTypeAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_SoundTypeAns::InitAsDefaultInstance() {
}

PKMsgSC_SoundTypeAns::PKMsgSC_SoundTypeAns(const PKMsgSC_SoundTypeAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_SoundTypeAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lsoundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_SoundTypeAns::~PKMsgSC_SoundTypeAns() {
  SharedDtor();
}

void PKMsgSC_SoundTypeAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_SoundTypeAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_SoundTypeAns& PKMsgSC_SoundTypeAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_SoundTypeAns* PKMsgSC_SoundTypeAns::default_instance_ = NULL;

PKMsgSC_SoundTypeAns* PKMsgSC_SoundTypeAns::New() const {
  return new PKMsgSC_SoundTypeAns;
}

void PKMsgSC_SoundTypeAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lsoundtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_SoundTypeAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_SoundTypeAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lsoundtype(), output);
  }
  
}

int PKMsgSC_SoundTypeAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lSoundType = 3;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_SoundTypeAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_SoundTypeAns*>(&from));
}

void PKMsgSC_SoundTypeAns::MergeFrom(const PKMsgSC_SoundTypeAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
  }
}

void PKMsgSC_SoundTypeAns::CopyFrom(const PKMsgSC_SoundTypeAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_SoundTypeAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PKMsgSC_SoundTypeAns::Swap(PKMsgSC_SoundTypeAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_SoundTypeAns::GetTypeName() const {
  return "PKMsgSC_SoundTypeAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_FMoney::kMSFMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_FMoney::PKMsgSC_FMoney()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_FMoney::InitAsDefaultInstance() {
}

PKMsgSC_FMoney::PKMsgSC_FMoney(const PKMsgSC_FMoney& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_FMoney::SharedCtor() {
  _cached_size_ = 0;
  m_sfmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_FMoney::~PKMsgSC_FMoney() {
  SharedDtor();
}

void PKMsgSC_FMoney::SharedDtor() {
  if (m_sfmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sfmoney_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgSC_FMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_FMoney& PKMsgSC_FMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_FMoney* PKMsgSC_FMoney::default_instance_ = NULL;

PKMsgSC_FMoney* PKMsgSC_FMoney::New() const {
  return new PKMsgSC_FMoney;
}

void PKMsgSC_FMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_sfmoney()) {
      if (m_sfmoney_ != &::google::protobuf::internal::kEmptyString) {
        m_sfmoney_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_FMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sFMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sfmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_FMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sFMoney = 1;
  if (has_m_sfmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_sfmoney(), output);
  }
  
}

int PKMsgSC_FMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sFMoney = 1;
    if (has_m_sfmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sfmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_FMoney::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_FMoney*>(&from));
}

void PKMsgSC_FMoney::MergeFrom(const PKMsgSC_FMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_sfmoney()) {
      set_m_sfmoney(from.m_sfmoney());
    }
  }
}

void PKMsgSC_FMoney::CopyFrom(const PKMsgSC_FMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_FMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_FMoney::Swap(PKMsgSC_FMoney* other) {
  if (other != this) {
    std::swap(m_sfmoney_, other->m_sfmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_FMoney::GetTypeName() const {
  return "PKMsgSC_FMoney";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_ItemNotify::kMLLimitTotalCntFieldNumber;
const int PKMsgSC_ItemNotify::kMLLimitTodayCntFieldNumber;
const int PKMsgSC_ItemNotify::kMBInfinitySpeedItemFieldNumber;
const int PKMsgSC_ItemNotify::kMLlSpeedToTimeFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_ItemNotify::PKMsgSC_ItemNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_ItemNotify::InitAsDefaultInstance() {
}

PKMsgSC_ItemNotify::PKMsgSC_ItemNotify(const PKMsgSC_ItemNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_ItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_llimittotalcnt_ = 0;
  m_llimittodaycnt_ = 0;
  m_binfinityspeeditem_ = 0;
  m_llspeedtotime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_ItemNotify::~PKMsgSC_ItemNotify() {
  SharedDtor();
}

void PKMsgSC_ItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_ItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_ItemNotify& PKMsgSC_ItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_ItemNotify* PKMsgSC_ItemNotify::default_instance_ = NULL;

PKMsgSC_ItemNotify* PKMsgSC_ItemNotify::New() const {
  return new PKMsgSC_ItemNotify;
}

void PKMsgSC_ItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llimittotalcnt_ = 0;
    m_llimittodaycnt_ = 0;
    m_binfinityspeeditem_ = 0;
    m_llspeedtotime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_ItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lLimitTotalCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llimittotalcnt_)));
          set_has_m_llimittotalcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lLimitTodayCnt;
        break;
      }
      
      // required sint32 m_lLimitTodayCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLimitTodayCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llimittodaycnt_)));
          set_has_m_llimittodaycnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_bInfinitySpeedItem;
        break;
      }
      
      // required sint32 m_bInfinitySpeedItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bInfinitySpeedItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_binfinityspeeditem_)));
          set_has_m_binfinityspeeditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llSpeedToTime;
        break;
      }
      
      // required sint64 m_llSpeedToTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSpeedToTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llspeedtotime_)));
          set_has_m_llspeedtotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_ItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lLimitTotalCnt = 1;
  if (has_m_llimittotalcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_llimittotalcnt(), output);
  }
  
  // required sint32 m_lLimitTodayCnt = 2;
  if (has_m_llimittodaycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_llimittodaycnt(), output);
  }
  
  // required sint32 m_bInfinitySpeedItem = 3;
  if (has_m_binfinityspeeditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_binfinityspeeditem(), output);
  }
  
  // required sint64 m_llSpeedToTime = 4;
  if (has_m_llspeedtotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llspeedtotime(), output);
  }
  
}

int PKMsgSC_ItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lLimitTotalCnt = 1;
    if (has_m_llimittotalcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llimittotalcnt());
    }
    
    // required sint32 m_lLimitTodayCnt = 2;
    if (has_m_llimittodaycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llimittodaycnt());
    }
    
    // required sint32 m_bInfinitySpeedItem = 3;
    if (has_m_binfinityspeeditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_binfinityspeeditem());
    }
    
    // required sint64 m_llSpeedToTime = 4;
    if (has_m_llspeedtotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llspeedtotime());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_ItemNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_ItemNotify*>(&from));
}

void PKMsgSC_ItemNotify::MergeFrom(const PKMsgSC_ItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llimittotalcnt()) {
      set_m_llimittotalcnt(from.m_llimittotalcnt());
    }
    if (from.has_m_llimittodaycnt()) {
      set_m_llimittodaycnt(from.m_llimittodaycnt());
    }
    if (from.has_m_binfinityspeeditem()) {
      set_m_binfinityspeeditem(from.m_binfinityspeeditem());
    }
    if (from.has_m_llspeedtotime()) {
      set_m_llspeedtotime(from.m_llspeedtotime());
    }
  }
}

void PKMsgSC_ItemNotify::CopyFrom(const PKMsgSC_ItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_ItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PKMsgSC_ItemNotify::Swap(PKMsgSC_ItemNotify* other) {
  if (other != this) {
    std::swap(m_llimittotalcnt_, other->m_llimittotalcnt_);
    std::swap(m_llimittodaycnt_, other->m_llimittodaycnt_);
    std::swap(m_binfinityspeeditem_, other->m_binfinityspeeditem_);
    std::swap(m_llspeedtotime_, other->m_llspeedtotime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_ItemNotify::GetTypeName() const {
  return "PKMsgSC_ItemNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_DisconnectMoneyNotify::kMSNickNameFieldNumber;
const int PKMsgSC_DisconnectMoneyNotify::kMLlDisconnectMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_DisconnectMoneyNotify::PKMsgSC_DisconnectMoneyNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_DisconnectMoneyNotify::InitAsDefaultInstance() {
}

PKMsgSC_DisconnectMoneyNotify::PKMsgSC_DisconnectMoneyNotify(const PKMsgSC_DisconnectMoneyNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_DisconnectMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lldisconnectmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_DisconnectMoneyNotify::~PKMsgSC_DisconnectMoneyNotify() {
  SharedDtor();
}

void PKMsgSC_DisconnectMoneyNotify::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgSC_DisconnectMoneyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_DisconnectMoneyNotify& PKMsgSC_DisconnectMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_DisconnectMoneyNotify* PKMsgSC_DisconnectMoneyNotify::default_instance_ = NULL;

PKMsgSC_DisconnectMoneyNotify* PKMsgSC_DisconnectMoneyNotify::New() const {
  return new PKMsgSC_DisconnectMoneyNotify;
}

void PKMsgSC_DisconnectMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    m_lldisconnectmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_DisconnectMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llDisconnectMoney;
        break;
      }
      
      // required sint64 m_llDisconnectMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llDisconnectMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lldisconnectmoney_)));
          set_has_m_lldisconnectmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_DisconnectMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sNickName = 1;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_snickname(), output);
  }
  
  // required sint64 m_llDisconnectMoney = 2;
  if (has_m_lldisconnectmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_lldisconnectmoney(), output);
  }
  
}

int PKMsgSC_DisconnectMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sNickName = 1;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required sint64 m_llDisconnectMoney = 2;
    if (has_m_lldisconnectmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lldisconnectmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_DisconnectMoneyNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_DisconnectMoneyNotify*>(&from));
}

void PKMsgSC_DisconnectMoneyNotify::MergeFrom(const PKMsgSC_DisconnectMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_lldisconnectmoney()) {
      set_m_lldisconnectmoney(from.m_lldisconnectmoney());
    }
  }
}

void PKMsgSC_DisconnectMoneyNotify::CopyFrom(const PKMsgSC_DisconnectMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_DisconnectMoneyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgSC_DisconnectMoneyNotify::Swap(PKMsgSC_DisconnectMoneyNotify* other) {
  if (other != this) {
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_lldisconnectmoney_, other->m_lldisconnectmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_DisconnectMoneyNotify::GetTypeName() const {
  return "PKMsgSC_DisconnectMoneyNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_ExitNtf::kMLUSNFieldNumber;
const int PKMsgSC_ExitNtf::kMNIndexFieldNumber;
const int PKMsgSC_ExitNtf::kMLExitFieldNumber;
const int PKMsgSC_ExitNtf::kMBExitFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_ExitNtf::PKMsgSC_ExitNtf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_ExitNtf::InitAsDefaultInstance() {
}

PKMsgSC_ExitNtf::PKMsgSC_ExitNtf(const PKMsgSC_ExitNtf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_ExitNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lexit_ = 0;
  m_bexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_ExitNtf::~PKMsgSC_ExitNtf() {
  SharedDtor();
}

void PKMsgSC_ExitNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_ExitNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_ExitNtf& PKMsgSC_ExitNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_ExitNtf* PKMsgSC_ExitNtf::default_instance_ = NULL;

PKMsgSC_ExitNtf* PKMsgSC_ExitNtf::New() const {
  return new PKMsgSC_ExitNtf;
}

void PKMsgSC_ExitNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lexit_ = 0;
    m_bexit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_ExitNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lExit;
        break;
      }
      
      // required sint32 m_lExit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bExit;
        break;
      }
      
      // required sint32 m_bExit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bexit_)));
          set_has_m_bexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_ExitNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lExit = 3;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lexit(), output);
  }
  
  // required sint32 m_bExit = 4;
  if (has_m_bexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_bexit(), output);
  }
  
}

int PKMsgSC_ExitNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lExit = 3;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_bExit = 4;
    if (has_m_bexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bexit());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_ExitNtf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_ExitNtf*>(&from));
}

void PKMsgSC_ExitNtf::MergeFrom(const PKMsgSC_ExitNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_bexit()) {
      set_m_bexit(from.m_bexit());
    }
  }
}

void PKMsgSC_ExitNtf::CopyFrom(const PKMsgSC_ExitNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_ExitNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PKMsgSC_ExitNtf::Swap(PKMsgSC_ExitNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_bexit_, other->m_bexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_ExitNtf::GetTypeName() const {
  return "PKMsgSC_ExitNtf";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_RematchOKAns::kMLUSNFieldNumber;
const int PKMsgSC_RematchOKAns::kMLlPoolMoneyFieldNumber;
const int PKMsgSC_RematchOKAns::kMMoneyFieldNumber;
const int PKMsgSC_RematchOKAns::kMBRematchOKFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_RematchOKAns::PKMsgSC_RematchOKAns()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_RematchOKAns::InitAsDefaultInstance() {
  m_money_ = const_cast< ::PKMoney*>(&::PKMoney::default_instance());
}

PKMsgSC_RematchOKAns::PKMsgSC_RematchOKAns(const PKMsgSC_RematchOKAns& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_RematchOKAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  m_money_ = NULL;
  m_brematchok_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_RematchOKAns::~PKMsgSC_RematchOKAns() {
  SharedDtor();
}

void PKMsgSC_RematchOKAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void PKMsgSC_RematchOKAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_RematchOKAns& PKMsgSC_RematchOKAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_RematchOKAns* PKMsgSC_RematchOKAns::default_instance_ = NULL;

PKMsgSC_RematchOKAns* PKMsgSC_RematchOKAns::New() const {
  return new PKMsgSC_RematchOKAns;
}

void PKMsgSC_RematchOKAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::PKMoney::Clear();
    }
    m_brematchok_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_RematchOKAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_money;
        break;
      }
      
      // required .PKMoney m_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bRematchOK;
        break;
      }
      
      // required sint32 m_bRematchOK = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bRematchOK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_brematchok_)));
          set_has_m_brematchok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_RematchOKAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llpoolmoney(), output);
  }
  
  // required .PKMoney m_money = 3;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->m_money(), output);
  }
  
  // required sint32 m_bRematchOK = 4;
  if (has_m_brematchok()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_brematchok(), output);
  }
  
}

int PKMsgSC_RematchOKAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint64 m_llPoolMoney = 2;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
    // required .PKMoney m_money = 3;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint32 m_bRematchOK = 4;
    if (has_m_brematchok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_brematchok());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_RematchOKAns::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_RematchOKAns*>(&from));
}

void PKMsgSC_RematchOKAns::MergeFrom(const PKMsgSC_RematchOKAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::PKMoney::MergeFrom(from.m_money());
    }
    if (from.has_m_brematchok()) {
      set_m_brematchok(from.m_brematchok());
    }
  }
}

void PKMsgSC_RematchOKAns::CopyFrom(const PKMsgSC_RematchOKAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_RematchOKAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_RematchOKAns::Swap(PKMsgSC_RematchOKAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_brematchok_, other->m_brematchok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_RematchOKAns::GetTypeName() const {
  return "PKMsgSC_RematchOKAns";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_RuleNotify::kMNRuleIdxFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_RuleNotify::PKMsgSC_RuleNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_RuleNotify::InitAsDefaultInstance() {
}

PKMsgSC_RuleNotify::PKMsgSC_RuleNotify(const PKMsgSC_RuleNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_RuleNotify::SharedCtor() {
  _cached_size_ = 0;
  m_nruleidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_RuleNotify::~PKMsgSC_RuleNotify() {
  SharedDtor();
}

void PKMsgSC_RuleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_RuleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_RuleNotify& PKMsgSC_RuleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_RuleNotify* PKMsgSC_RuleNotify::default_instance_ = NULL;

PKMsgSC_RuleNotify* PKMsgSC_RuleNotify::New() const {
  return new PKMsgSC_RuleNotify;
}

void PKMsgSC_RuleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nruleidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_RuleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRuleIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nruleidx_)));
          set_has_m_nruleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_RuleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nruleidx(), output);
  }
  
}

int PKMsgSC_RuleNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRuleIdx = 1;
    if (has_m_nruleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nruleidx());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_RuleNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_RuleNotify*>(&from));
}

void PKMsgSC_RuleNotify::MergeFrom(const PKMsgSC_RuleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nruleidx()) {
      set_m_nruleidx(from.m_nruleidx());
    }
  }
}

void PKMsgSC_RuleNotify::CopyFrom(const PKMsgSC_RuleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_RuleNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_RuleNotify::Swap(PKMsgSC_RuleNotify* other) {
  if (other != this) {
    std::swap(m_nruleidx_, other->m_nruleidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_RuleNotify::GetTypeName() const {
  return "PKMsgSC_RuleNotify";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PKMsgSC_AllowEntryWaitingUser::PKMsgSC_AllowEntryWaitingUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_AllowEntryWaitingUser::InitAsDefaultInstance() {
}

PKMsgSC_AllowEntryWaitingUser::PKMsgSC_AllowEntryWaitingUser(const PKMsgSC_AllowEntryWaitingUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_AllowEntryWaitingUser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_AllowEntryWaitingUser::~PKMsgSC_AllowEntryWaitingUser() {
  SharedDtor();
}

void PKMsgSC_AllowEntryWaitingUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_AllowEntryWaitingUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_AllowEntryWaitingUser& PKMsgSC_AllowEntryWaitingUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_AllowEntryWaitingUser* PKMsgSC_AllowEntryWaitingUser::default_instance_ = NULL;

PKMsgSC_AllowEntryWaitingUser* PKMsgSC_AllowEntryWaitingUser::New() const {
  return new PKMsgSC_AllowEntryWaitingUser;
}

void PKMsgSC_AllowEntryWaitingUser::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_AllowEntryWaitingUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void PKMsgSC_AllowEntryWaitingUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int PKMsgSC_AllowEntryWaitingUser::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_AllowEntryWaitingUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_AllowEntryWaitingUser*>(&from));
}

void PKMsgSC_AllowEntryWaitingUser::MergeFrom(const PKMsgSC_AllowEntryWaitingUser& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void PKMsgSC_AllowEntryWaitingUser::CopyFrom(const PKMsgSC_AllowEntryWaitingUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_AllowEntryWaitingUser::IsInitialized() const {
  
  return true;
}

void PKMsgSC_AllowEntryWaitingUser::Swap(PKMsgSC_AllowEntryWaitingUser* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_AllowEntryWaitingUser::GetTypeName() const {
  return "PKMsgSC_AllowEntryWaitingUser";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_AllWaitingUserDataNtf::kMBSendWaitingUserFieldNumber;
const int PKMsgSC_AllWaitingUserDataNtf::kMWaitingUserDataFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_AllWaitingUserDataNtf::PKMsgSC_AllWaitingUserDataNtf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_AllWaitingUserDataNtf::InitAsDefaultInstance() {
}

PKMsgSC_AllWaitingUserDataNtf::PKMsgSC_AllWaitingUserDataNtf(const PKMsgSC_AllWaitingUserDataNtf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_AllWaitingUserDataNtf::SharedCtor() {
  _cached_size_ = 0;
  m_bsendwaitinguser_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_AllWaitingUserDataNtf::~PKMsgSC_AllWaitingUserDataNtf() {
  SharedDtor();
}

void PKMsgSC_AllWaitingUserDataNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_AllWaitingUserDataNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_AllWaitingUserDataNtf& PKMsgSC_AllWaitingUserDataNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_AllWaitingUserDataNtf* PKMsgSC_AllWaitingUserDataNtf::default_instance_ = NULL;

PKMsgSC_AllWaitingUserDataNtf* PKMsgSC_AllWaitingUserDataNtf::New() const {
  return new PKMsgSC_AllWaitingUserDataNtf;
}

void PKMsgSC_AllWaitingUserDataNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bsendwaitinguser_ = 0;
  }
  m_waitinguserdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_AllWaitingUserDataNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_bSendWaitingUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bsendwaitinguser_)));
          set_has_m_bsendwaitinguser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_WaitingUserData;
        break;
      }
      
      // repeated .PKWAITINGUSERDATA m_WaitingUserData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WaitingUserData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_waitinguserdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_WaitingUserData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_AllWaitingUserDataNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_bSendWaitingUser = 1;
  if (has_m_bsendwaitinguser()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_bsendwaitinguser(), output);
  }
  
  // repeated .PKWAITINGUSERDATA m_WaitingUserData = 2;
  for (int i = 0; i < this->m_waitinguserdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->m_waitinguserdata(i), output);
  }
  
}

int PKMsgSC_AllWaitingUserDataNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_bSendWaitingUser = 1;
    if (has_m_bsendwaitinguser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bsendwaitinguser());
    }
    
  }
  // repeated .PKWAITINGUSERDATA m_WaitingUserData = 2;
  total_size += 1 * this->m_waitinguserdata_size();
  for (int i = 0; i < this->m_waitinguserdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_waitinguserdata(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_AllWaitingUserDataNtf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_AllWaitingUserDataNtf*>(&from));
}

void PKMsgSC_AllWaitingUserDataNtf::MergeFrom(const PKMsgSC_AllWaitingUserDataNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_waitinguserdata_.MergeFrom(from.m_waitinguserdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bsendwaitinguser()) {
      set_m_bsendwaitinguser(from.m_bsendwaitinguser());
    }
  }
}

void PKMsgSC_AllWaitingUserDataNtf::CopyFrom(const PKMsgSC_AllWaitingUserDataNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_AllWaitingUserDataNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < m_waitinguserdata_size(); i++) {
    if (!this->m_waitinguserdata(i).IsInitialized()) return false;
  }
  return true;
}

void PKMsgSC_AllWaitingUserDataNtf::Swap(PKMsgSC_AllWaitingUserDataNtf* other) {
  if (other != this) {
    std::swap(m_bsendwaitinguser_, other->m_bsendwaitinguser_);
    m_waitinguserdata_.Swap(&other->m_waitinguserdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_AllWaitingUserDataNtf::GetTypeName() const {
  return "PKMsgSC_AllWaitingUserDataNtf";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_UserDataChangeNtf::kMUserDataFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_UserDataChangeNtf::PKMsgSC_UserDataChangeNtf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_UserDataChangeNtf::InitAsDefaultInstance() {
  m_userdata_ = const_cast< ::PKRCUserData*>(&::PKRCUserData::default_instance());
}

PKMsgSC_UserDataChangeNtf::PKMsgSC_UserDataChangeNtf(const PKMsgSC_UserDataChangeNtf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_UserDataChangeNtf::SharedCtor() {
  _cached_size_ = 0;
  m_userdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_UserDataChangeNtf::~PKMsgSC_UserDataChangeNtf() {
  SharedDtor();
}

void PKMsgSC_UserDataChangeNtf::SharedDtor() {
  if (this != default_instance_) {
    delete m_userdata_;
  }
}

void PKMsgSC_UserDataChangeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_UserDataChangeNtf& PKMsgSC_UserDataChangeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_UserDataChangeNtf* PKMsgSC_UserDataChangeNtf::default_instance_ = NULL;

PKMsgSC_UserDataChangeNtf* PKMsgSC_UserDataChangeNtf::New() const {
  return new PKMsgSC_UserDataChangeNtf;
}

void PKMsgSC_UserDataChangeNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_userdata()) {
      if (m_userdata_ != NULL) m_userdata_->::PKRCUserData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_UserDataChangeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PKRCUserData m_userData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_userdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_UserDataChangeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PKRCUserData m_userData = 1;
  if (has_m_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->m_userdata(), output);
  }
  
}

int PKMsgSC_UserDataChangeNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PKRCUserData m_userData = 1;
    if (has_m_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_userdata());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_UserDataChangeNtf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_UserDataChangeNtf*>(&from));
}

void PKMsgSC_UserDataChangeNtf::MergeFrom(const PKMsgSC_UserDataChangeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_userdata()) {
      mutable_m_userdata()->::PKRCUserData::MergeFrom(from.m_userdata());
    }
  }
}

void PKMsgSC_UserDataChangeNtf::CopyFrom(const PKMsgSC_UserDataChangeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_UserDataChangeNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_UserDataChangeNtf::Swap(PKMsgSC_UserDataChangeNtf* other) {
  if (other != this) {
    std::swap(m_userdata_, other->m_userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_UserDataChangeNtf::GetTypeName() const {
  return "PKMsgSC_UserDataChangeNtf";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_RefillMoneyNtf::kMLUSNFieldNumber;
const int PKMsgSC_RefillMoneyNtf::kMNRefillCntFieldNumber;
const int PKMsgSC_RefillMoneyNtf::kMLlRefillMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_RefillMoneyNtf::PKMsgSC_RefillMoneyNtf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_RefillMoneyNtf::InitAsDefaultInstance() {
}

PKMsgSC_RefillMoneyNtf::PKMsgSC_RefillMoneyNtf(const PKMsgSC_RefillMoneyNtf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_RefillMoneyNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nrefillcnt_ = 0;
  m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_RefillMoneyNtf::~PKMsgSC_RefillMoneyNtf() {
  SharedDtor();
}

void PKMsgSC_RefillMoneyNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_RefillMoneyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_RefillMoneyNtf& PKMsgSC_RefillMoneyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_RefillMoneyNtf* PKMsgSC_RefillMoneyNtf::default_instance_ = NULL;

PKMsgSC_RefillMoneyNtf* PKMsgSC_RefillMoneyNtf::New() const {
  return new PKMsgSC_RefillMoneyNtf;
}

void PKMsgSC_RefillMoneyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nrefillcnt_ = 0;
    m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_RefillMoneyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nRefillCnt;
        break;
      }
      
      // required int32 m_nRefillCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRefillCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nrefillcnt_)));
          set_has_m_nrefillcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llRefillMoney;
        break;
      }
      
      // required sint64 m_llRefillMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRefillMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llrefillmoney_)));
          set_has_m_llrefillmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_RefillMoneyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nRefillCnt = 2;
  if (has_m_nrefillcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nrefillcnt(), output);
  }
  
  // required sint64 m_llRefillMoney = 3;
  if (has_m_llrefillmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llrefillmoney(), output);
  }
  
}

int PKMsgSC_RefillMoneyNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nRefillCnt = 2;
    if (has_m_nrefillcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nrefillcnt());
    }
    
    // required sint64 m_llRefillMoney = 3;
    if (has_m_llrefillmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llrefillmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_RefillMoneyNtf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_RefillMoneyNtf*>(&from));
}

void PKMsgSC_RefillMoneyNtf::MergeFrom(const PKMsgSC_RefillMoneyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nrefillcnt()) {
      set_m_nrefillcnt(from.m_nrefillcnt());
    }
    if (from.has_m_llrefillmoney()) {
      set_m_llrefillmoney(from.m_llrefillmoney());
    }
  }
}

void PKMsgSC_RefillMoneyNtf::CopyFrom(const PKMsgSC_RefillMoneyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_RefillMoneyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PKMsgSC_RefillMoneyNtf::Swap(PKMsgSC_RefillMoneyNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nrefillcnt_, other->m_nrefillcnt_);
    std::swap(m_llrefillmoney_, other->m_llrefillmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_RefillMoneyNtf::GetTypeName() const {
  return "PKMsgSC_RefillMoneyNtf";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_JackpotMoneyNtf::kMLUSNFieldNumber;
const int PKMsgSC_JackpotMoneyNtf::kMLlJackpotMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_JackpotMoneyNtf::PKMsgSC_JackpotMoneyNtf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_JackpotMoneyNtf::InitAsDefaultInstance() {
}

PKMsgSC_JackpotMoneyNtf::PKMsgSC_JackpotMoneyNtf(const PKMsgSC_JackpotMoneyNtf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_JackpotMoneyNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_JackpotMoneyNtf::~PKMsgSC_JackpotMoneyNtf() {
  SharedDtor();
}

void PKMsgSC_JackpotMoneyNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_JackpotMoneyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_JackpotMoneyNtf& PKMsgSC_JackpotMoneyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_JackpotMoneyNtf* PKMsgSC_JackpotMoneyNtf::default_instance_ = NULL;

PKMsgSC_JackpotMoneyNtf* PKMsgSC_JackpotMoneyNtf::New() const {
  return new PKMsgSC_JackpotMoneyNtf;
}

void PKMsgSC_JackpotMoneyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_JackpotMoneyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llJackpotMoney;
        break;
      }
      
      // required sint64 m_llJackpotMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpotMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpotmoney_)));
          set_has_m_lljackpotmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_JackpotMoneyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint64 m_llJackpotMoney = 2;
  if (has_m_lljackpotmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_lljackpotmoney(), output);
  }
  
}

int PKMsgSC_JackpotMoneyNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint64 m_llJackpotMoney = 2;
    if (has_m_lljackpotmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpotmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_JackpotMoneyNtf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_JackpotMoneyNtf*>(&from));
}

void PKMsgSC_JackpotMoneyNtf::MergeFrom(const PKMsgSC_JackpotMoneyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lljackpotmoney()) {
      set_m_lljackpotmoney(from.m_lljackpotmoney());
    }
  }
}

void PKMsgSC_JackpotMoneyNtf::CopyFrom(const PKMsgSC_JackpotMoneyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_JackpotMoneyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKMsgSC_JackpotMoneyNtf::Swap(PKMsgSC_JackpotMoneyNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lljackpotmoney_, other->m_lljackpotmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_JackpotMoneyNtf::GetTypeName() const {
  return "PKMsgSC_JackpotMoneyNtf";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_GuardianAngelMoney::kMLUSNFieldNumber;
const int PKMsgSC_GuardianAngelMoney::kMNGuardianAngelCntFieldNumber;
const int PKMsgSC_GuardianAngelMoney::kMLlAngelMoneyFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_GuardianAngelMoney::PKMsgSC_GuardianAngelMoney()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_GuardianAngelMoney::InitAsDefaultInstance() {
}

PKMsgSC_GuardianAngelMoney::PKMsgSC_GuardianAngelMoney(const PKMsgSC_GuardianAngelMoney& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_GuardianAngelMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nguardianangelcnt_ = 0;
  m_llangelmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_GuardianAngelMoney::~PKMsgSC_GuardianAngelMoney() {
  SharedDtor();
}

void PKMsgSC_GuardianAngelMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_GuardianAngelMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_GuardianAngelMoney& PKMsgSC_GuardianAngelMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_GuardianAngelMoney* PKMsgSC_GuardianAngelMoney::default_instance_ = NULL;

PKMsgSC_GuardianAngelMoney* PKMsgSC_GuardianAngelMoney::New() const {
  return new PKMsgSC_GuardianAngelMoney;
}

void PKMsgSC_GuardianAngelMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nguardianangelcnt_ = 0;
    m_llangelmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_GuardianAngelMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nGuardianAngelCnt;
        break;
      }
      
      // required int32 m_nGuardianAngelCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nGuardianAngelCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nguardianangelcnt_)));
          set_has_m_nguardianangelcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llAngelMoney;
        break;
      }
      
      // required sint64 m_llAngelMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llAngelMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llangelmoney_)));
          set_has_m_llangelmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_GuardianAngelMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nGuardianAngelCnt = 2;
  if (has_m_nguardianangelcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nguardianangelcnt(), output);
  }
  
  // required sint64 m_llAngelMoney = 3;
  if (has_m_llangelmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llangelmoney(), output);
  }
  
}

int PKMsgSC_GuardianAngelMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nGuardianAngelCnt = 2;
    if (has_m_nguardianangelcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nguardianangelcnt());
    }
    
    // required sint64 m_llAngelMoney = 3;
    if (has_m_llangelmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llangelmoney());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_GuardianAngelMoney::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_GuardianAngelMoney*>(&from));
}

void PKMsgSC_GuardianAngelMoney::MergeFrom(const PKMsgSC_GuardianAngelMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nguardianangelcnt()) {
      set_m_nguardianangelcnt(from.m_nguardianangelcnt());
    }
    if (from.has_m_llangelmoney()) {
      set_m_llangelmoney(from.m_llangelmoney());
    }
  }
}

void PKMsgSC_GuardianAngelMoney::CopyFrom(const PKMsgSC_GuardianAngelMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_GuardianAngelMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PKMsgSC_GuardianAngelMoney::Swap(PKMsgSC_GuardianAngelMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nguardianangelcnt_, other->m_nguardianangelcnt_);
    std::swap(m_llangelmoney_, other->m_llangelmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_GuardianAngelMoney::GetTypeName() const {
  return "PKMsgSC_GuardianAngelMoney";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_GameMasterCallNtf::kMLGMCallUSNFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_GameMasterCallNtf::PKMsgSC_GameMasterCallNtf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_GameMasterCallNtf::InitAsDefaultInstance() {
}

PKMsgSC_GameMasterCallNtf::PKMsgSC_GameMasterCallNtf(const PKMsgSC_GameMasterCallNtf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_GameMasterCallNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lgmcall_usn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_GameMasterCallNtf::~PKMsgSC_GameMasterCallNtf() {
  SharedDtor();
}

void PKMsgSC_GameMasterCallNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_GameMasterCallNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_GameMasterCallNtf& PKMsgSC_GameMasterCallNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_GameMasterCallNtf* PKMsgSC_GameMasterCallNtf::default_instance_ = NULL;

PKMsgSC_GameMasterCallNtf* PKMsgSC_GameMasterCallNtf::New() const {
  return new PKMsgSC_GameMasterCallNtf;
}

void PKMsgSC_GameMasterCallNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lgmcall_usn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_GameMasterCallNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lGMCall_USN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lgmcall_usn_)));
          set_has_m_lgmcall_usn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_GameMasterCallNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lGMCall_USN = 1;
  if (has_m_lgmcall_usn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lgmcall_usn(), output);
  }
  
}

int PKMsgSC_GameMasterCallNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lGMCall_USN = 1;
    if (has_m_lgmcall_usn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lgmcall_usn());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_GameMasterCallNtf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_GameMasterCallNtf*>(&from));
}

void PKMsgSC_GameMasterCallNtf::MergeFrom(const PKMsgSC_GameMasterCallNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lgmcall_usn()) {
      set_m_lgmcall_usn(from.m_lgmcall_usn());
    }
  }
}

void PKMsgSC_GameMasterCallNtf::CopyFrom(const PKMsgSC_GameMasterCallNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_GameMasterCallNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_GameMasterCallNtf::Swap(PKMsgSC_GameMasterCallNtf* other) {
  if (other != this) {
    std::swap(m_lgmcall_usn_, other->m_lgmcall_usn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_GameMasterCallNtf::GetTypeName() const {
  return "PKMsgSC_GameMasterCallNtf";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_ObserverCnt::kMNObserverCntFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_ObserverCnt::PKMsgSC_ObserverCnt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_ObserverCnt::InitAsDefaultInstance() {
}

PKMsgSC_ObserverCnt::PKMsgSC_ObserverCnt(const PKMsgSC_ObserverCnt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_ObserverCnt::SharedCtor() {
  _cached_size_ = 0;
  m_nobservercnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_ObserverCnt::~PKMsgSC_ObserverCnt() {
  SharedDtor();
}

void PKMsgSC_ObserverCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_ObserverCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_ObserverCnt& PKMsgSC_ObserverCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_ObserverCnt* PKMsgSC_ObserverCnt::default_instance_ = NULL;

PKMsgSC_ObserverCnt* PKMsgSC_ObserverCnt::New() const {
  return new PKMsgSC_ObserverCnt;
}

void PKMsgSC_ObserverCnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nobservercnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_ObserverCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nObserverCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nobservercnt_)));
          set_has_m_nobservercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_ObserverCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nObserverCnt = 1;
  if (has_m_nobservercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nobservercnt(), output);
  }
  
}

int PKMsgSC_ObserverCnt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nObserverCnt = 1;
    if (has_m_nobservercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nobservercnt());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_ObserverCnt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_ObserverCnt*>(&from));
}

void PKMsgSC_ObserverCnt::MergeFrom(const PKMsgSC_ObserverCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nobservercnt()) {
      set_m_nobservercnt(from.m_nobservercnt());
    }
  }
}

void PKMsgSC_ObserverCnt::CopyFrom(const PKMsgSC_ObserverCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_ObserverCnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_ObserverCnt::Swap(PKMsgSC_ObserverCnt* other) {
  if (other != this) {
    std::swap(m_nobservercnt_, other->m_nobservercnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_ObserverCnt::GetTypeName() const {
  return "PKMsgSC_ObserverCnt";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_Bonus::kMLlBonusFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_Bonus::PKMsgSC_Bonus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_Bonus::InitAsDefaultInstance() {
}

PKMsgSC_Bonus::PKMsgSC_Bonus(const PKMsgSC_Bonus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_Bonus::SharedCtor() {
  _cached_size_ = 0;
  m_llbonus_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_Bonus::~PKMsgSC_Bonus() {
  SharedDtor();
}

void PKMsgSC_Bonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMsgSC_Bonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_Bonus& PKMsgSC_Bonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_Bonus* PKMsgSC_Bonus::default_instance_ = NULL;

PKMsgSC_Bonus* PKMsgSC_Bonus::New() const {
  return new PKMsgSC_Bonus;
}

void PKMsgSC_Bonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llbonus_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_Bonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llBonus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llbonus_)));
          set_has_m_llbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_Bonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llBonus = 1;
  if (has_m_llbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llbonus(), output);
  }
  
}

int PKMsgSC_Bonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llBonus = 1;
    if (has_m_llbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llbonus());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_Bonus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_Bonus*>(&from));
}

void PKMsgSC_Bonus::MergeFrom(const PKMsgSC_Bonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llbonus()) {
      set_m_llbonus(from.m_llbonus());
    }
  }
}

void PKMsgSC_Bonus::CopyFrom(const PKMsgSC_Bonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_Bonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_Bonus::Swap(PKMsgSC_Bonus* other) {
  if (other != this) {
    std::swap(m_llbonus_, other->m_llbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_Bonus::GetTypeName() const {
  return "PKMsgSC_Bonus";
}


// ===================================================================

#ifndef _MSC_VER
const int PKMsgSC_PoliceNotify::kMPoliceMsgFieldNumber;
#endif  // !_MSC_VER

PKMsgSC_PoliceNotify::PKMsgSC_PoliceNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PKMsgSC_PoliceNotify::InitAsDefaultInstance() {
}

PKMsgSC_PoliceNotify::PKMsgSC_PoliceNotify(const PKMsgSC_PoliceNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PKMsgSC_PoliceNotify::SharedCtor() {
  _cached_size_ = 0;
  m_policemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMsgSC_PoliceNotify::~PKMsgSC_PoliceNotify() {
  SharedDtor();
}

void PKMsgSC_PoliceNotify::SharedDtor() {
  if (m_policemsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_policemsg_;
  }
  if (this != default_instance_) {
  }
}

void PKMsgSC_PoliceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PKMsgSC_PoliceNotify& PKMsgSC_PoliceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameLogic_2eproto();  return *default_instance_;
}

PKMsgSC_PoliceNotify* PKMsgSC_PoliceNotify::default_instance_ = NULL;

PKMsgSC_PoliceNotify* PKMsgSC_PoliceNotify::New() const {
  return new PKMsgSC_PoliceNotify;
}

void PKMsgSC_PoliceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_policemsg()) {
      if (m_policemsg_ != &::google::protobuf::internal::kEmptyString) {
        m_policemsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PKMsgSC_PoliceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_policeMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_policemsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMsgSC_PoliceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_policeMsg = 1;
  if (has_m_policemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_policemsg(), output);
  }
  
}

int PKMsgSC_PoliceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_policeMsg = 1;
    if (has_m_policemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_policemsg());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMsgSC_PoliceNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PKMsgSC_PoliceNotify*>(&from));
}

void PKMsgSC_PoliceNotify::MergeFrom(const PKMsgSC_PoliceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_policemsg()) {
      set_m_policemsg(from.m_policemsg());
    }
  }
}

void PKMsgSC_PoliceNotify::CopyFrom(const PKMsgSC_PoliceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMsgSC_PoliceNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PKMsgSC_PoliceNotify::Swap(PKMsgSC_PoliceNotify* other) {
  if (other != this) {
    std::swap(m_policemsg_, other->m_policemsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PKMsgSC_PoliceNotify::GetTypeName() const {
  return "PKMsgSC_PoliceNotify";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
