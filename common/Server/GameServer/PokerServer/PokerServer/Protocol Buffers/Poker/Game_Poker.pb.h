// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game_Poker.proto

#ifndef PROTOBUF_Game_5fPoker_2eproto__INCLUDED
#define PROTOBUF_Game_5fPoker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Game_Poker {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Game_5fPoker_2eproto();
void protobuf_AssignDesc_Game_5fPoker_2eproto();
void protobuf_ShutdownFile_Game_5fPoker_2eproto();

class _Cards;
class _Money;
class UserMoney;
class _CWinLose;
class _UserInfo;
class _OneCard;
class _VecMoney;
class _WinLoseInfo;
class _VecUSN;
class _WAITINGUSERDATA;
class CRefill;
class _ItemList;
class _Item;
class _RCUser;
class _RCUserData;
class _Option;
class _BettingMsg;
class _BettingMsgTable;
class _MoneyTable;
class _CardTable;
class _UITable;
class _RCRoomData;
class _SPUserBaseInfo;
class _MsgCS_Entry;
class _MsgCS_Observe;
class _MsgCS_Start;
class _MsgCS_SelectedCardReq;
class _MsgCS_BettingReq;
class _MsgCS_ChoiceRemoveCard;
class _MsgCS_Purge;
class _MsgCS_Abuse;
class _MsgCS_AskPurgeVote;
class _MsgCS_AnswerPurgeVote;
class _MsgCS_WaitingUserTicketReq;
class _MsgCS_UpdateWaitingUserInfoReq;
class _MsgCS_SoundType;
class _MsgCS_ExitQue;
class _MsgCS_Continue;
class _MsgCS_RuleSet;
class _MsgCS_GameMasterCall;
class _MsgCS_FieldReserved;
class _MsgCS_JokboSet;
class _MsgCS_TestKeySetting;
class _MsgCS_CheckNotice;
class _MsgCS_Ack;
class _MsgCS_Ping;
class _MsgSC_UserJoinAns;
class _MsgSC_UserJoinErr;
class _MsgSC_UserDisconnect;
class _MsgSC_CardData;
class _MsgSC_EntryAns;
class _MsgSC_EntryReject;
class _MsgSC_ObserveAns;
class _MsgSC_StartReq;
class _MsgSC_StartAns;
class _MsgSC_NoStart;
class _MsgSC_DealCards;
class _MsgSC_SelectedCardAns;
class _MsgSC_DealOpenCard;
class _MsgSC_DealCard;
class _MsgSC_Boss;
class _MsgSC_Betting;
class _MsgSC_BettingAns;
class _MsgSC_BettingAnsMsg;
class _MsgSC_DealHiddenCard;
class _MsgSC_AnteMoney;
class _MsgSC_RuleQuaterHalf;
class _MsgSC_Finished;
class _MsgSC_NewGame;
class _MsgSC_ContinueAns;
class _MsgSC_Continue;
class _MsgSC_SystemMsg;
class _MsgSC_PurgeAns;
class _MsgSC_PurgeInfo;
class _MsgSC_SetPurgeMoney;
class _MsgSC_AssaItemNotify;
class _MsgSC_ThankYouItemNotify;
class _MsgSC_MadeItemNotify;
class _MsgSC_ExtMoneyNotify;
class _MsgSC_GameEndSystemMsg;
class _MsgSC_ChangeAvatarNotify;
class _MsgSC_AbuseAns;
class _MsgSC_SoundTypeAns;
class _MsgSC_FMoney;
class _MsgSC_ItemNotify;
class _MsgSC_DisconnectMoneyNotify;
class _MsgSC_ExitNtf;
class _MsgSC_RematchOKAns;
class _MsgSC_RuleNotify;
class _MsgSC_AllowEntryWaitingUser;
class _MsgSC_AllWaitingUserDataNtf;
class _MsgSC_UserDataChangeNtf;
class _MsgSC_RefillMoneyNtf;
class _MsgSC_JackpotMoneyNtf;
class _MsgSC_GuardianAngelMoney;
class _MsgSC_GameMasterCallNtf;
class _MsgSC_ObserverCnt;
class _MsgSC_Bonus;
class _MsgSC_PoliceNotify;

enum _Cards_state {
  _Cards_state_CARDTYPE_NORMAL = 0,
  _Cards_state_CARDTYPE_HIDDEN = 1,
  _Cards_state_CARDTYPE_SAME = 2
};
bool _Cards_state_IsValid(int value);
const _Cards_state _Cards_state_state_MIN = _Cards_state_CARDTYPE_NORMAL;
const _Cards_state _Cards_state_state_MAX = _Cards_state_CARDTYPE_SAME;
const int _Cards_state_state_ARRAYSIZE = _Cards_state_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* _Cards_state_descriptor();
inline const ::std::string& _Cards_state_Name(_Cards_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    _Cards_state_descriptor(), value);
}
inline bool _Cards_state_Parse(
    const ::std::string& name, _Cards_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_Cards_state>(
    _Cards_state_descriptor(), name, value);
}
// ===================================================================

class _Cards : public ::google::protobuf::Message {
 public:
  _Cards();
  virtual ~_Cards();
  
  _Cards(const _Cards& from);
  
  inline _Cards& operator=(const _Cards& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _Cards& default_instance();
  
  void Swap(_Cards* other);
  
  // implements Message ----------------------------------------------
  
  _Cards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _Cards& from);
  void MergeFrom(const _Cards& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef _Cards_state state;
  static const state CARDTYPE_NORMAL = _Cards_state_CARDTYPE_NORMAL;
  static const state CARDTYPE_HIDDEN = _Cards_state_CARDTYPE_HIDDEN;
  static const state CARDTYPE_SAME = _Cards_state_CARDTYPE_SAME;
  static inline bool state_IsValid(int value) {
    return _Cards_state_IsValid(value);
  }
  static const state state_MIN =
    _Cards_state_state_MIN;
  static const state state_MAX =
    _Cards_state_state_MAX;
  static const int state_ARRAYSIZE =
    _Cards_state_state_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  state_descriptor() {
    return _Cards_state_descriptor();
  }
  static inline const ::std::string& state_Name(state value) {
    return _Cards_state_Name(value);
  }
  static inline bool state_Parse(const ::std::string& name,
      state* value) {
    return _Cards_state_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 m_vtCards = 1;
  inline int m_vtcards_size() const;
  inline void clear_m_vtcards();
  static const int kMVtCardsFieldNumber = 1;
  inline ::google::protobuf::int32 m_vtcards(int index) const;
  inline void set_m_vtcards(int index, ::google::protobuf::int32 value);
  inline void add_m_vtcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtcards();
  
  // repeated int32 m_lResultIdx = 2;
  inline int m_lresultidx_size() const;
  inline void clear_m_lresultidx();
  static const int kMLResultIdxFieldNumber = 2;
  inline ::google::protobuf::int32 m_lresultidx(int index) const;
  inline void set_m_lresultidx(int index, ::google::protobuf::int32 value);
  inline void add_m_lresultidx(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_lresultidx() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_lresultidx();
  
  // required .Game_Poker._VecUSN m_vUserUSN = 3;
  inline bool has_m_vuserusn() const;
  inline void clear_m_vuserusn();
  static const int kMVUserUSNFieldNumber = 3;
  inline const ::Game_Poker::_VecUSN& m_vuserusn() const;
  inline ::Game_Poker::_VecUSN* mutable_m_vuserusn();
  inline ::Game_Poker::_VecUSN* release_m_vuserusn();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._Cards)
 private:
  inline void set_has_m_vuserusn();
  inline void clear_has_m_vuserusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_lresultidx_;
  ::Game_Poker::_VecUSN* m_vuserusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _Cards* default_instance_;
};
// -------------------------------------------------------------------

class _Money : public ::google::protobuf::Message {
 public:
  _Money();
  virtual ~_Money();
  
  _Money(const _Money& from);
  
  inline _Money& operator=(const _Money& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _Money& default_instance();
  
  void Swap(_Money* other);
  
  // implements Message ----------------------------------------------
  
  _Money* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _Money& from);
  void MergeFrom(const _Money& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llCMoney = 1;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llCallMoney = 2;
  inline bool has_m_llcallmoney() const;
  inline void clear_m_llcallmoney();
  static const int kMLlCallMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_llcallmoney() const;
  inline void set_m_llcallmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llSideMoney = 3;
  inline bool has_m_llsidemoney() const;
  inline void clear_m_llsidemoney();
  static const int kMLlSideMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llsidemoney() const;
  inline void set_m_llsidemoney(::google::protobuf::int64 value);
  
  // required sint64 m_llCallHabMoney = 4;
  inline bool has_m_llcallhabmoney() const;
  inline void clear_m_llcallhabmoney();
  static const int kMLlCallHabMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 m_llcallhabmoney() const;
  inline void set_m_llcallhabmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llTakeMoney = 5;
  inline bool has_m_lltakemoney() const;
  inline void clear_m_lltakemoney();
  static const int kMLlTakeMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_lltakemoney() const;
  inline void set_m_lltakemoney(::google::protobuf::int64 value);
  
  // required sint64 m_llJackpotMoney = 6;
  inline bool has_m_lljackpotmoney() const;
  inline void clear_m_lljackpotmoney();
  static const int kMLlJackpotMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 m_lljackpotmoney() const;
  inline void set_m_lljackpotmoney(::google::protobuf::int64 value);
  
  // required sint32 m_lBetState = 7;
  inline bool has_m_lbetstate() const;
  inline void clear_m_lbetstate();
  static const int kMLBetStateFieldNumber = 7;
  inline ::google::protobuf::int32 m_lbetstate() const;
  inline void set_m_lbetstate(::google::protobuf::int32 value);
  
  // required sint32 m_lBetReceive = 8;
  inline bool has_m_lbetreceive() const;
  inline void clear_m_lbetreceive();
  static const int kMLBetReceiveFieldNumber = 8;
  inline ::google::protobuf::int32 m_lbetreceive() const;
  inline void set_m_lbetreceive(::google::protobuf::int32 value);
  
  // required sint32 m_lBetCount = 9;
  inline bool has_m_lbetcount() const;
  inline void clear_m_lbetcount();
  static const int kMLBetCountFieldNumber = 9;
  inline ::google::protobuf::int32 m_lbetcount() const;
  inline void set_m_lbetcount(::google::protobuf::int32 value);
  
  // required sint32 m_lResultIdx = 10;
  inline bool has_m_lresultidx() const;
  inline void clear_m_lresultidx();
  static const int kMLResultIdxFieldNumber = 10;
  inline ::google::protobuf::int32 m_lresultidx() const;
  inline void set_m_lresultidx(::google::protobuf::int32 value);
  
  // required string m_sMoneyMsg = 11;
  inline bool has_m_smoneymsg() const;
  inline void clear_m_smoneymsg();
  static const int kMSMoneyMsgFieldNumber = 11;
  inline const ::std::string& m_smoneymsg() const;
  inline void set_m_smoneymsg(const ::std::string& value);
  inline void set_m_smoneymsg(const char* value);
  inline void set_m_smoneymsg(const char* value, size_t size);
  inline ::std::string* mutable_m_smoneymsg();
  inline ::std::string* release_m_smoneymsg();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._Money)
 private:
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  inline void set_has_m_llcallmoney();
  inline void clear_has_m_llcallmoney();
  inline void set_has_m_llsidemoney();
  inline void clear_has_m_llsidemoney();
  inline void set_has_m_llcallhabmoney();
  inline void clear_has_m_llcallhabmoney();
  inline void set_has_m_lltakemoney();
  inline void clear_has_m_lltakemoney();
  inline void set_has_m_lljackpotmoney();
  inline void clear_has_m_lljackpotmoney();
  inline void set_has_m_lbetstate();
  inline void clear_has_m_lbetstate();
  inline void set_has_m_lbetreceive();
  inline void clear_has_m_lbetreceive();
  inline void set_has_m_lbetcount();
  inline void clear_has_m_lbetcount();
  inline void set_has_m_lresultidx();
  inline void clear_has_m_lresultidx();
  inline void set_has_m_smoneymsg();
  inline void clear_has_m_smoneymsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int64 m_llcallmoney_;
  ::google::protobuf::int64 m_llsidemoney_;
  ::google::protobuf::int64 m_llcallhabmoney_;
  ::google::protobuf::int64 m_lltakemoney_;
  ::google::protobuf::int64 m_lljackpotmoney_;
  ::google::protobuf::int32 m_lbetstate_;
  ::google::protobuf::int32 m_lbetreceive_;
  ::google::protobuf::int32 m_lbetcount_;
  ::google::protobuf::int32 m_lresultidx_;
  ::std::string* m_smoneymsg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _Money* default_instance_;
};
// -------------------------------------------------------------------

class UserMoney : public ::google::protobuf::Message {
 public:
  UserMoney();
  virtual ~UserMoney();
  
  UserMoney(const UserMoney& from);
  
  inline UserMoney& operator=(const UserMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMoney& default_instance();
  
  void Swap(UserMoney* other);
  
  // implements Message ----------------------------------------------
  
  UserMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserMoney& from);
  void MergeFrom(const UserMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lState = 2;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required sint64 m_llMoney = 3;
  inline bool has_m_llmoney() const;
  inline void clear_m_llmoney();
  static const int kMLlMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llmoney() const;
  inline void set_m_llmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llCallHabMoney = 4;
  inline bool has_m_llcallhabmoney() const;
  inline void clear_m_llcallhabmoney();
  static const int kMLlCallHabMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 m_llcallhabmoney() const;
  inline void set_m_llcallhabmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llTakeMoney = 5;
  inline bool has_m_lltakemoney() const;
  inline void clear_m_lltakemoney();
  static const int kMLlTakeMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_lltakemoney() const;
  inline void set_m_lltakemoney(::google::protobuf::int64 value);
  
  // required sint64 m_llDealMoney = 6;
  inline bool has_m_lldealmoney() const;
  inline void clear_m_lldealmoney();
  static const int kMLlDealMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 m_lldealmoney() const;
  inline void set_m_lldealmoney(::google::protobuf::int64 value);
  
  // required string m_sNickName = 7;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 7;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required string m_sDealerTax = 8;
  inline bool has_m_sdealertax() const;
  inline void clear_m_sdealertax();
  static const int kMSDealerTaxFieldNumber = 8;
  inline const ::std::string& m_sdealertax() const;
  inline void set_m_sdealertax(const ::std::string& value);
  inline void set_m_sdealertax(const char* value);
  inline void set_m_sdealertax(const char* value, size_t size);
  inline ::std::string* mutable_m_sdealertax();
  inline ::std::string* release_m_sdealertax();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.UserMoney)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_llmoney();
  inline void clear_has_m_llmoney();
  inline void set_has_m_llcallhabmoney();
  inline void clear_has_m_llcallhabmoney();
  inline void set_has_m_lltakemoney();
  inline void clear_has_m_lltakemoney();
  inline void set_has_m_lldealmoney();
  inline void clear_has_m_lldealmoney();
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_sdealertax();
  inline void clear_has_m_sdealertax();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::int64 m_llmoney_;
  ::google::protobuf::int64 m_llcallhabmoney_;
  ::google::protobuf::int64 m_lltakemoney_;
  ::google::protobuf::int64 m_lldealmoney_;
  ::std::string* m_snickname_;
  ::std::string* m_sdealertax_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static UserMoney* default_instance_;
};
// -------------------------------------------------------------------

class _CWinLose : public ::google::protobuf::Message {
 public:
  _CWinLose();
  virtual ~_CWinLose();
  
  _CWinLose(const _CWinLose& from);
  
  inline _CWinLose& operator=(const _CWinLose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _CWinLose& default_instance();
  
  void Swap(_CWinLose* other);
  
  // implements Message ----------------------------------------------
  
  _CWinLose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _CWinLose& from);
  void MergeFrom(const _CWinLose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lWin = 1;
  inline bool has_m_lwin() const;
  inline void clear_m_lwin();
  static const int kMLWinFieldNumber = 1;
  inline ::google::protobuf::int32 m_lwin() const;
  inline void set_m_lwin(::google::protobuf::int32 value);
  
  // required sint32 m_lLose = 2;
  inline bool has_m_llose() const;
  inline void clear_m_llose();
  static const int kMLLoseFieldNumber = 2;
  inline ::google::protobuf::int32 m_llose() const;
  inline void set_m_llose(::google::protobuf::int32 value);
  
  // required sint32 m_lContinue = 3;
  inline bool has_m_lcontinue() const;
  inline void clear_m_lcontinue();
  static const int kMLContinueFieldNumber = 3;
  inline ::google::protobuf::int32 m_lcontinue() const;
  inline void set_m_lcontinue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._CWinLose)
 private:
  inline void set_has_m_lwin();
  inline void clear_has_m_lwin();
  inline void set_has_m_llose();
  inline void clear_has_m_llose();
  inline void set_has_m_lcontinue();
  inline void clear_has_m_lcontinue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lwin_;
  ::google::protobuf::int32 m_llose_;
  ::google::protobuf::int32 m_lcontinue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _CWinLose* default_instance_;
};
// -------------------------------------------------------------------

class _UserInfo : public ::google::protobuf::Message {
 public:
  _UserInfo();
  virtual ~_UserInfo();
  
  _UserInfo(const _UserInfo& from);
  
  inline _UserInfo& operator=(const _UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _UserInfo& default_instance();
  
  void Swap(_UserInfo* other);
  
  // implements Message ----------------------------------------------
  
  _UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _UserInfo& from);
  void MergeFrom(const _UserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required string m_sNickName = 3;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 3;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required string m_sID = 4;
  inline bool has_m_sid() const;
  inline void clear_m_sid();
  static const int kMSIDFieldNumber = 4;
  inline const ::std::string& m_sid() const;
  inline void set_m_sid(const ::std::string& value);
  inline void set_m_sid(const char* value);
  inline void set_m_sid(const char* value, size_t size);
  inline ::std::string* mutable_m_sid();
  inline ::std::string* release_m_sid();
  
  // required sint32 m_lCLevel = 5;
  inline bool has_m_lclevel() const;
  inline void clear_m_lclevel();
  static const int kMLCLevelFieldNumber = 5;
  inline ::google::protobuf::int32 m_lclevel() const;
  inline void set_m_lclevel(::google::protobuf::int32 value);
  
  // required sint32 m_lSoundType = 6;
  inline bool has_m_lsoundtype() const;
  inline void clear_m_lsoundtype();
  static const int kMLSoundTypeFieldNumber = 6;
  inline ::google::protobuf::int32 m_lsoundtype() const;
  inline void set_m_lsoundtype(::google::protobuf::int32 value);
  
  // required string m_sAvt = 7;
  inline bool has_m_savt() const;
  inline void clear_m_savt();
  static const int kMSAvtFieldNumber = 7;
  inline const ::std::string& m_savt() const;
  inline void set_m_savt(const ::std::string& value);
  inline void set_m_savt(const char* value);
  inline void set_m_savt(const char* value, size_t size);
  inline ::std::string* mutable_m_savt();
  inline ::std::string* release_m_savt();
  
  // required sint32 m_lUserState = 8;
  inline bool has_m_luserstate() const;
  inline void clear_m_luserstate();
  static const int kMLUserStateFieldNumber = 8;
  inline ::google::protobuf::int32 m_luserstate() const;
  inline void set_m_luserstate(::google::protobuf::int32 value);
  
  // required .Game_Poker._CWinLose m_cWinLose = 9;
  inline bool has_m_cwinlose() const;
  inline void clear_m_cwinlose();
  static const int kMCWinLoseFieldNumber = 9;
  inline const ::Game_Poker::_CWinLose& m_cwinlose() const;
  inline ::Game_Poker::_CWinLose* mutable_m_cwinlose();
  inline ::Game_Poker::_CWinLose* release_m_cwinlose();
  
  // required .Game_Poker._CWinLose m_cWinLose_Today = 10;
  inline bool has_m_cwinlose_today() const;
  inline void clear_m_cwinlose_today();
  static const int kMCWinLoseTodayFieldNumber = 10;
  inline const ::Game_Poker::_CWinLose& m_cwinlose_today() const;
  inline ::Game_Poker::_CWinLose* mutable_m_cwinlose_today();
  inline ::Game_Poker::_CWinLose* release_m_cwinlose_today();
  
  // required .Game_Poker._CWinLose m_cWinLose_Room = 11;
  inline bool has_m_cwinlose_room() const;
  inline void clear_m_cwinlose_room();
  static const int kMCWinLoseRoomFieldNumber = 11;
  inline const ::Game_Poker::_CWinLose& m_cwinlose_room() const;
  inline ::Game_Poker::_CWinLose* mutable_m_cwinlose_room();
  inline ::Game_Poker::_CWinLose* release_m_cwinlose_room();
  
  // required sint64 m_llCMoney = 12;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 12;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llFMoney = 13;
  inline bool has_m_llfmoney() const;
  inline void clear_m_llfmoney();
  static const int kMLlFMoneyFieldNumber = 13;
  inline ::google::protobuf::int64 m_llfmoney() const;
  inline void set_m_llfmoney(::google::protobuf::int64 value);
  
  // required sint32 m_lExit = 14;
  inline bool has_m_lexit() const;
  inline void clear_m_lexit();
  static const int kMLExitFieldNumber = 14;
  inline ::google::protobuf::int32 m_lexit() const;
  inline void set_m_lexit(::google::protobuf::int32 value);
  
  // required sint32 m_nItemType = 15;
  inline bool has_m_nitemtype() const;
  inline void clear_m_nitemtype();
  static const int kMNItemTypeFieldNumber = 15;
  inline ::google::protobuf::int32 m_nitemtype() const;
  inline void set_m_nitemtype(::google::protobuf::int32 value);
  
  // required sint32 m_lAck = 16;
  inline bool has_m_lack() const;
  inline void clear_m_lack();
  static const int kMLAckFieldNumber = 16;
  inline ::google::protobuf::int32 m_lack() const;
  inline void set_m_lack(::google::protobuf::int32 value);
  
  // required sint32 m_lJackpot = 17;
  inline bool has_m_ljackpot() const;
  inline void clear_m_ljackpot();
  static const int kMLJackpotFieldNumber = 17;
  inline ::google::protobuf::int32 m_ljackpot() const;
  inline void set_m_ljackpot(::google::protobuf::int32 value);
  
  // required sint32 m_lDieCardsDealt = 18;
  inline bool has_m_ldiecardsdealt() const;
  inline void clear_m_ldiecardsdealt();
  static const int kMLDieCardsDealtFieldNumber = 18;
  inline ::google::protobuf::int32 m_ldiecardsdealt() const;
  inline void set_m_ldiecardsdealt(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._UserInfo)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_sid();
  inline void clear_has_m_sid();
  inline void set_has_m_lclevel();
  inline void clear_has_m_lclevel();
  inline void set_has_m_lsoundtype();
  inline void clear_has_m_lsoundtype();
  inline void set_has_m_savt();
  inline void clear_has_m_savt();
  inline void set_has_m_luserstate();
  inline void clear_has_m_luserstate();
  inline void set_has_m_cwinlose();
  inline void clear_has_m_cwinlose();
  inline void set_has_m_cwinlose_today();
  inline void clear_has_m_cwinlose_today();
  inline void set_has_m_cwinlose_room();
  inline void clear_has_m_cwinlose_room();
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  inline void set_has_m_llfmoney();
  inline void clear_has_m_llfmoney();
  inline void set_has_m_lexit();
  inline void clear_has_m_lexit();
  inline void set_has_m_nitemtype();
  inline void clear_has_m_nitemtype();
  inline void set_has_m_lack();
  inline void clear_has_m_lack();
  inline void set_has_m_ljackpot();
  inline void clear_has_m_ljackpot();
  inline void set_has_m_ldiecardsdealt();
  inline void clear_has_m_ldiecardsdealt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::std::string* m_snickname_;
  ::std::string* m_sid_;
  ::google::protobuf::int32 m_lclevel_;
  ::google::protobuf::int32 m_lsoundtype_;
  ::std::string* m_savt_;
  ::Game_Poker::_CWinLose* m_cwinlose_;
  ::Game_Poker::_CWinLose* m_cwinlose_today_;
  ::Game_Poker::_CWinLose* m_cwinlose_room_;
  ::google::protobuf::int32 m_luserstate_;
  ::google::protobuf::int32 m_lexit_;
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int64 m_llfmoney_;
  ::google::protobuf::int32 m_nitemtype_;
  ::google::protobuf::int32 m_lack_;
  ::google::protobuf::int32 m_ljackpot_;
  ::google::protobuf::int32 m_ldiecardsdealt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class _OneCard : public ::google::protobuf::Message {
 public:
  _OneCard();
  virtual ~_OneCard();
  
  _OneCard(const _OneCard& from);
  
  inline _OneCard& operator=(const _OneCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _OneCard& default_instance();
  
  void Swap(_OneCard* other);
  
  // implements Message ----------------------------------------------
  
  _OneCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _OneCard& from);
  void MergeFrom(const _OneCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nIndex = 1;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 1;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required int32 m_lCardIndex = 2;
  inline bool has_m_lcardindex() const;
  inline void clear_m_lcardindex();
  static const int kMLCardIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_lcardindex() const;
  inline void set_m_lcardindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._OneCard)
 private:
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lcardindex();
  inline void clear_has_m_lcardindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_lcardindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _OneCard* default_instance_;
};
// -------------------------------------------------------------------

class _VecMoney : public ::google::protobuf::Message {
 public:
  _VecMoney();
  virtual ~_VecMoney();
  
  _VecMoney(const _VecMoney& from);
  
  inline _VecMoney& operator=(const _VecMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _VecMoney& default_instance();
  
  void Swap(_VecMoney* other);
  
  // implements Message ----------------------------------------------
  
  _VecMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _VecMoney& from);
  void MergeFrom(const _VecMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 VecMoney = 1;
  inline bool has_vecmoney() const;
  inline void clear_vecmoney();
  static const int kVecMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 vecmoney() const;
  inline void set_vecmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._VecMoney)
 private:
  inline void set_has_vecmoney();
  inline void clear_has_vecmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 vecmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _VecMoney* default_instance_;
};
// -------------------------------------------------------------------

class _WinLoseInfo : public ::google::protobuf::Message {
 public:
  _WinLoseInfo();
  virtual ~_WinLoseInfo();
  
  _WinLoseInfo(const _WinLoseInfo& from);
  
  inline _WinLoseInfo& operator=(const _WinLoseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _WinLoseInfo& default_instance();
  
  void Swap(_WinLoseInfo* other);
  
  // implements Message ----------------------------------------------
  
  _WinLoseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _WinLoseInfo& from);
  void MergeFrom(const _WinLoseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llCMoney = 1;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // required sint32 m_lWin = 2;
  inline bool has_m_lwin() const;
  inline void clear_m_lwin();
  static const int kMLWinFieldNumber = 2;
  inline ::google::protobuf::int32 m_lwin() const;
  inline void set_m_lwin(::google::protobuf::int32 value);
  
  // required sint32 m_lLose = 3;
  inline bool has_m_llose() const;
  inline void clear_m_llose();
  static const int kMLLoseFieldNumber = 3;
  inline ::google::protobuf::int32 m_llose() const;
  inline void set_m_llose(::google::protobuf::int32 value);
  
  // required sint32 m_lReserved = 4;
  inline bool has_m_lreserved() const;
  inline void clear_m_lreserved();
  static const int kMLReservedFieldNumber = 4;
  inline ::google::protobuf::int32 m_lreserved() const;
  inline void set_m_lreserved(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._WinLoseInfo)
 private:
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  inline void set_has_m_lwin();
  inline void clear_has_m_lwin();
  inline void set_has_m_llose();
  inline void clear_has_m_llose();
  inline void set_has_m_lreserved();
  inline void clear_has_m_lreserved();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int32 m_lwin_;
  ::google::protobuf::int32 m_llose_;
  ::google::protobuf::int32 m_lreserved_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _WinLoseInfo* default_instance_;
};
// -------------------------------------------------------------------

class _VecUSN : public ::google::protobuf::Message {
 public:
  _VecUSN();
  virtual ~_VecUSN();
  
  _VecUSN(const _VecUSN& from);
  
  inline _VecUSN& operator=(const _VecUSN& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _VecUSN& default_instance();
  
  void Swap(_VecUSN* other);
  
  // implements Message ----------------------------------------------
  
  _VecUSN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _VecUSN& from);
  void MergeFrom(const _VecUSN& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 USN = 1;
  inline bool has_usn() const;
  inline void clear_usn();
  static const int kUSNFieldNumber = 1;
  inline ::google::protobuf::int64 usn() const;
  inline void set_usn(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._VecUSN)
 private:
  inline void set_has_usn();
  inline void clear_has_usn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 usn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _VecUSN* default_instance_;
};
// -------------------------------------------------------------------

class _WAITINGUSERDATA : public ::google::protobuf::Message {
 public:
  _WAITINGUSERDATA();
  virtual ~_WAITINGUSERDATA();
  
  _WAITINGUSERDATA(const _WAITINGUSERDATA& from);
  
  inline _WAITINGUSERDATA& operator=(const _WAITINGUSERDATA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _WAITINGUSERDATA& default_instance();
  
  void Swap(_WAITINGUSERDATA* other);
  
  // implements Message ----------------------------------------------
  
  _WAITINGUSERDATA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _WAITINGUSERDATA& from);
  void MergeFrom(const _WAITINGUSERDATA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_lTicketNum = 2;
  inline bool has_m_lticketnum() const;
  inline void clear_m_lticketnum();
  static const int kMLTicketNumFieldNumber = 2;
  inline ::google::protobuf::int32 m_lticketnum() const;
  inline void set_m_lticketnum(::google::protobuf::int32 value);
  
  // required int32 m_lBackColor = 3;
  inline bool has_m_lbackcolor() const;
  inline void clear_m_lbackcolor();
  static const int kMLBackColorFieldNumber = 3;
  inline ::google::protobuf::int32 m_lbackcolor() const;
  inline void set_m_lbackcolor(::google::protobuf::int32 value);
  
  // required int32 m_bCallWeb = 4;
  inline bool has_m_bcallweb() const;
  inline void clear_m_bcallweb();
  static const int kMBCallWebFieldNumber = 4;
  inline ::google::protobuf::int32 m_bcallweb() const;
  inline void set_m_bcallweb(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._WAITINGUSERDATA)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lticketnum();
  inline void clear_has_m_lticketnum();
  inline void set_has_m_lbackcolor();
  inline void clear_has_m_lbackcolor();
  inline void set_has_m_bcallweb();
  inline void clear_has_m_bcallweb();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lticketnum_;
  ::google::protobuf::int32 m_lbackcolor_;
  ::google::protobuf::int32 m_bcallweb_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _WAITINGUSERDATA* default_instance_;
};
// -------------------------------------------------------------------

class CRefill : public ::google::protobuf::Message {
 public:
  CRefill();
  virtual ~CRefill();
  
  CRefill(const CRefill& from);
  
  inline CRefill& operator=(const CRefill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CRefill& default_instance();
  
  void Swap(CRefill* other);
  
  // implements Message ----------------------------------------------
  
  CRefill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CRefill& from);
  void MergeFrom(const CRefill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 m_llTime = 1;
  inline bool has_m_lltime() const;
  inline void clear_m_lltime();
  static const int kMLlTimeFieldNumber = 1;
  inline ::google::protobuf::int64 m_lltime() const;
  inline void set_m_lltime(::google::protobuf::int64 value);
  
  // required int32 m_nCnt = 2;
  inline bool has_m_ncnt() const;
  inline void clear_m_ncnt();
  static const int kMNCntFieldNumber = 2;
  inline ::google::protobuf::int32 m_ncnt() const;
  inline void set_m_ncnt(::google::protobuf::int32 value);
  
  // required int32 m_lPLevel = 3;
  inline bool has_m_lplevel() const;
  inline void clear_m_lplevel();
  static const int kMLPLevelFieldNumber = 3;
  inline ::google::protobuf::int32 m_lplevel() const;
  inline void set_m_lplevel(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.CRefill)
 private:
  inline void set_has_m_lltime();
  inline void clear_has_m_lltime();
  inline void set_has_m_ncnt();
  inline void clear_has_m_ncnt();
  inline void set_has_m_lplevel();
  inline void clear_has_m_lplevel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_lltime_;
  ::google::protobuf::int32 m_ncnt_;
  ::google::protobuf::int32 m_lplevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static CRefill* default_instance_;
};
// -------------------------------------------------------------------

class _ItemList : public ::google::protobuf::Message {
 public:
  _ItemList();
  virtual ~_ItemList();
  
  _ItemList(const _ItemList& from);
  
  inline _ItemList& operator=(const _ItemList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _ItemList& default_instance();
  
  void Swap(_ItemList* other);
  
  // implements Message ----------------------------------------------
  
  _ItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _ItemList& from);
  void MergeFrom(const _ItemList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker._Item m_lstItem = 1;
  inline int m_lstitem_size() const;
  inline void clear_m_lstitem();
  static const int kMLstItemFieldNumber = 1;
  inline const ::Game_Poker::_Item& m_lstitem(int index) const;
  inline ::Game_Poker::_Item* mutable_m_lstitem(int index);
  inline ::Game_Poker::_Item* add_m_lstitem();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Item >&
      m_lstitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Item >*
      mutable_m_lstitem();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._ItemList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Item > m_lstitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _ItemList* default_instance_;
};
// -------------------------------------------------------------------

class _Item : public ::google::protobuf::Message {
 public:
  _Item();
  virtual ~_Item();
  
  _Item(const _Item& from);
  
  inline _Item& operator=(const _Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _Item& default_instance();
  
  void Swap(_Item* other);
  
  // implements Message ----------------------------------------------
  
  _Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _Item& from);
  void MergeFrom(const _Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_lFucnsrl = 1;
  inline bool has_m_lfucnsrl() const;
  inline void clear_m_lfucnsrl();
  static const int kMLFucnsrlFieldNumber = 1;
  inline ::google::protobuf::int32 m_lfucnsrl() const;
  inline void set_m_lfucnsrl(::google::protobuf::int32 value);
  
  // required int64 m_llStartTime = 2;
  inline bool has_m_llstarttime() const;
  inline void clear_m_llstarttime();
  static const int kMLlStartTimeFieldNumber = 2;
  inline ::google::protobuf::int64 m_llstarttime() const;
  inline void set_m_llstarttime(::google::protobuf::int64 value);
  
  // required int64 m_llEndTime = 3;
  inline bool has_m_llendtime() const;
  inline void clear_m_llendtime();
  static const int kMLlEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 m_llendtime() const;
  inline void set_m_llendtime(::google::protobuf::int64 value);
  
  // required int64 m_llCount = 4;
  inline bool has_m_llcount() const;
  inline void clear_m_llcount();
  static const int kMLlCountFieldNumber = 4;
  inline ::google::protobuf::int64 m_llcount() const;
  inline void set_m_llcount(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._Item)
 private:
  inline void set_has_m_lfucnsrl();
  inline void clear_has_m_lfucnsrl();
  inline void set_has_m_llstarttime();
  inline void clear_has_m_llstarttime();
  inline void set_has_m_llendtime();
  inline void clear_has_m_llendtime();
  inline void set_has_m_llcount();
  inline void clear_has_m_llcount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llstarttime_;
  ::google::protobuf::int64 m_llendtime_;
  ::google::protobuf::int64 m_llcount_;
  ::google::protobuf::int32 m_lfucnsrl_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _Item* default_instance_;
};
// -------------------------------------------------------------------

class _RCUser : public ::google::protobuf::Message {
 public:
  _RCUser();
  virtual ~_RCUser();
  
  _RCUser(const _RCUser& from);
  
  inline _RCUser& operator=(const _RCUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _RCUser& default_instance();
  
  void Swap(_RCUser* other);
  
  // implements Message ----------------------------------------------
  
  _RCUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _RCUser& from);
  void MergeFrom(const _RCUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_lJumin = 2;
  inline bool has_m_ljumin() const;
  inline void clear_m_ljumin();
  static const int kMLJuminFieldNumber = 2;
  inline ::google::protobuf::int32 m_ljumin() const;
  inline void set_m_ljumin(::google::protobuf::int32 value);
  
  // required int32 m_lFirstUSN = 3;
  inline bool has_m_lfirstusn() const;
  inline void clear_m_lfirstusn();
  static const int kMLFirstUSNFieldNumber = 3;
  inline ::google::protobuf::int32 m_lfirstusn() const;
  inline void set_m_lfirstusn(::google::protobuf::int32 value);
  
  // required int32 m_lAgeIndex = 4;
  inline bool has_m_lageindex() const;
  inline void clear_m_lageindex();
  static const int kMLAgeIndexFieldNumber = 4;
  inline ::google::protobuf::int32 m_lageindex() const;
  inline void set_m_lageindex(::google::protobuf::int32 value);
  
  // required int32 m_lJobIndex = 5;
  inline bool has_m_ljobindex() const;
  inline void clear_m_ljobindex();
  static const int kMLJobIndexFieldNumber = 5;
  inline ::google::protobuf::int32 m_ljobindex() const;
  inline void set_m_ljobindex(::google::protobuf::int32 value);
  
  // required int32 m_lRegionIndex = 6;
  inline bool has_m_lregionindex() const;
  inline void clear_m_lregionindex();
  static const int kMLRegionIndexFieldNumber = 6;
  inline ::google::protobuf::int32 m_lregionindex() const;
  inline void set_m_lregionindex(::google::protobuf::int32 value);
  
  // required int32 m_lGuildIndex = 7;
  inline bool has_m_lguildindex() const;
  inline void clear_m_lguildindex();
  static const int kMLGuildIndexFieldNumber = 7;
  inline ::google::protobuf::int32 m_lguildindex() const;
  inline void set_m_lguildindex(::google::protobuf::int32 value);
  
  // required int32 m_lMemberIndex = 8;
  inline bool has_m_lmemberindex() const;
  inline void clear_m_lmemberindex();
  static const int kMLMemberIndexFieldNumber = 8;
  inline ::google::protobuf::int32 m_lmemberindex() const;
  inline void set_m_lmemberindex(::google::protobuf::int32 value);
  
  // required int32 m_lClientIP = 9;
  inline bool has_m_lclientip() const;
  inline void clear_m_lclientip();
  static const int kMLClientIPFieldNumber = 9;
  inline ::google::protobuf::int32 m_lclientip() const;
  inline void set_m_lclientip(::google::protobuf::int32 value);
  
  // required int32 m_lGatewayIP = 10;
  inline bool has_m_lgatewayip() const;
  inline void clear_m_lgatewayip();
  static const int kMLGatewayIPFieldNumber = 10;
  inline ::google::protobuf::int32 m_lgatewayip() const;
  inline void set_m_lgatewayip(::google::protobuf::int32 value);
  
  // required int32 m_lMacAddress = 11;
  inline bool has_m_lmacaddress() const;
  inline void clear_m_lmacaddress();
  static const int kMLMacAddressFieldNumber = 11;
  inline ::google::protobuf::int32 m_lmacaddress() const;
  inline void set_m_lmacaddress(::google::protobuf::int32 value);
  
  // required string m_sMobileInfo = 12;
  inline bool has_m_smobileinfo() const;
  inline void clear_m_smobileinfo();
  static const int kMSMobileInfoFieldNumber = 12;
  inline const ::std::string& m_smobileinfo() const;
  inline void set_m_smobileinfo(const ::std::string& value);
  inline void set_m_smobileinfo(const char* value);
  inline void set_m_smobileinfo(const char* value, size_t size);
  inline ::std::string* mutable_m_smobileinfo();
  inline ::std::string* release_m_smobileinfo();
  
  // required string m_sAuthKey = 13;
  inline bool has_m_sauthkey() const;
  inline void clear_m_sauthkey();
  static const int kMSAuthKeyFieldNumber = 13;
  inline const ::std::string& m_sauthkey() const;
  inline void set_m_sauthkey(const ::std::string& value);
  inline void set_m_sauthkey(const char* value);
  inline void set_m_sauthkey(const char* value, size_t size);
  inline ::std::string* mutable_m_sauthkey();
  inline ::std::string* release_m_sauthkey();
  
  // required string m_sUserGameData = 14;
  inline bool has_m_susergamedata() const;
  inline void clear_m_susergamedata();
  static const int kMSUserGameDataFieldNumber = 14;
  inline const ::std::string& m_susergamedata() const;
  inline void set_m_susergamedata(const ::std::string& value);
  inline void set_m_susergamedata(const char* value);
  inline void set_m_susergamedata(const char* value, size_t size);
  inline ::std::string* mutable_m_susergamedata();
  inline ::std::string* release_m_susergamedata();
  
  // required int32 m_nIndex = 15;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 15;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required string m_sNickName = 16;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 16;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required string m_sUserID = 17;
  inline bool has_m_suserid() const;
  inline void clear_m_suserid();
  static const int kMSUserIDFieldNumber = 17;
  inline const ::std::string& m_suserid() const;
  inline void set_m_suserid(const ::std::string& value);
  inline void set_m_suserid(const char* value);
  inline void set_m_suserid(const char* value, size_t size);
  inline ::std::string* mutable_m_suserid();
  inline ::std::string* release_m_suserid();
  
  // required string m_sAvt = 18;
  inline bool has_m_savt() const;
  inline void clear_m_savt();
  static const int kMSAvtFieldNumber = 18;
  inline const ::std::string& m_savt() const;
  inline void set_m_savt(const ::std::string& value);
  inline void set_m_savt(const char* value);
  inline void set_m_savt(const char* value, size_t size);
  inline ::std::string* mutable_m_savt();
  inline ::std::string* release_m_savt();
  
  // required int32 m_lCLevel = 19;
  inline bool has_m_lclevel() const;
  inline void clear_m_lclevel();
  static const int kMLCLevelFieldNumber = 19;
  inline ::google::protobuf::int32 m_lclevel() const;
  inline void set_m_lclevel(::google::protobuf::int32 value);
  
  // required int32 m_lSex = 20;
  inline bool has_m_lsex() const;
  inline void clear_m_lsex();
  static const int kMLSexFieldNumber = 20;
  inline ::google::protobuf::int32 m_lsex() const;
  inline void set_m_lsex(::google::protobuf::int32 value);
  
  // required int64 m_llCMoney = 21;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 21;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // required int64 m_llFMoney = 22;
  inline bool has_m_llfmoney() const;
  inline void clear_m_llfmoney();
  static const int kMLlFMoneyFieldNumber = 22;
  inline ::google::protobuf::int64 m_llfmoney() const;
  inline void set_m_llfmoney(::google::protobuf::int64 value);
  
  // required int64 m_llSafeMoney = 23;
  inline bool has_m_llsafemoney() const;
  inline void clear_m_llsafemoney();
  static const int kMLlSafeMoneyFieldNumber = 23;
  inline ::google::protobuf::int64 m_llsafemoney() const;
  inline void set_m_llsafemoney(::google::protobuf::int64 value);
  
  // required int64 m_llPlastAllinDate = 24;
  inline bool has_m_llplastallindate() const;
  inline void clear_m_llplastallindate();
  static const int kMLlPlastAllinDateFieldNumber = 24;
  inline ::google::protobuf::int64 m_llplastallindate() const;
  inline void set_m_llplastallindate(::google::protobuf::int64 value);
  
  // required int64 m_llPlastLogonDay = 25;
  inline bool has_m_llplastlogonday() const;
  inline void clear_m_llplastlogonday();
  static const int kMLlPlastLogonDayFieldNumber = 25;
  inline ::google::protobuf::int64 m_llplastlogonday() const;
  inline void set_m_llplastlogonday(::google::protobuf::int64 value);
  
  // required int32 m_lMTodayPlayCount = 26;
  inline bool has_m_lmtodayplaycount() const;
  inline void clear_m_lmtodayplaycount();
  static const int kMLMTodayPlayCountFieldNumber = 26;
  inline ::google::protobuf::int32 m_lmtodayplaycount() const;
  inline void set_m_lmtodayplaycount(::google::protobuf::int32 value);
  
  // required int32 m_lMTodayPlayTime = 27;
  inline bool has_m_lmtodayplaytime() const;
  inline void clear_m_lmtodayplaytime();
  static const int kMLMTodayPlayTimeFieldNumber = 27;
  inline ::google::protobuf::int32 m_lmtodayplaytime() const;
  inline void set_m_lmtodayplaytime(::google::protobuf::int32 value);
  
  // required int32 m_lPTotalPlayCount = 28;
  inline bool has_m_lptotalplaycount() const;
  inline void clear_m_lptotalplaycount();
  static const int kMLPTotalPlayCountFieldNumber = 28;
  inline ::google::protobuf::int32 m_lptotalplaycount() const;
  inline void set_m_lptotalplaycount(::google::protobuf::int32 value);
  
  // required .Game_Poker.CRefill m_cRefill = 29;
  inline bool has_m_crefill() const;
  inline void clear_m_crefill();
  static const int kMCRefillFieldNumber = 29;
  inline const ::Game_Poker::CRefill& m_crefill() const;
  inline ::Game_Poker::CRefill* mutable_m_crefill();
  inline ::Game_Poker::CRefill* release_m_crefill();
  
  // required int64 m_llPExtMoney = 30;
  inline bool has_m_llpextmoney() const;
  inline void clear_m_llpextmoney();
  static const int kMLlPExtMoneyFieldNumber = 30;
  inline ::google::protobuf::int64 m_llpextmoney() const;
  inline void set_m_llpextmoney(::google::protobuf::int64 value);
  
  // required int64 m_llPExtendDate = 31;
  inline bool has_m_llpextenddate() const;
  inline void clear_m_llpextenddate();
  static const int kMLlPExtendDateFieldNumber = 31;
  inline ::google::protobuf::int64 m_llpextenddate() const;
  inline void set_m_llpextenddate(::google::protobuf::int64 value);
  
  // required int64 m_llPBonusDate = 32;
  inline bool has_m_llpbonusdate() const;
  inline void clear_m_llpbonusdate();
  static const int kMLlPBonusDateFieldNumber = 32;
  inline ::google::protobuf::int64 m_llpbonusdate() const;
  inline void set_m_llpbonusdate(::google::protobuf::int64 value);
  
  // required int32 m_lMMonthPlayCount = 33;
  inline bool has_m_lmmonthplaycount() const;
  inline void clear_m_lmmonthplaycount();
  static const int kMLMMonthPlayCountFieldNumber = 33;
  inline ::google::protobuf::int32 m_lmmonthplaycount() const;
  inline void set_m_lmmonthplaycount(::google::protobuf::int32 value);
  
  // required int32 m_lMMonthPlayTime = 34;
  inline bool has_m_lmmonthplaytime() const;
  inline void clear_m_lmmonthplaytime();
  static const int kMLMMonthPlayTimeFieldNumber = 34;
  inline ::google::protobuf::int32 m_lmmonthplaytime() const;
  inline void set_m_lmmonthplaytime(::google::protobuf::int32 value);
  
  // required .Game_Poker._CWinLose m_cWinLose = 35;
  inline bool has_m_cwinlose() const;
  inline void clear_m_cwinlose();
  static const int kMCWinLoseFieldNumber = 35;
  inline const ::Game_Poker::_CWinLose& m_cwinlose() const;
  inline ::Game_Poker::_CWinLose* mutable_m_cwinlose();
  inline ::Game_Poker::_CWinLose* release_m_cwinlose();
  
  // required int32 m_lGDisCnt = 36;
  inline bool has_m_lgdiscnt() const;
  inline void clear_m_lgdiscnt();
  static const int kMLGDisCntFieldNumber = 36;
  inline ::google::protobuf::int32 m_lgdiscnt() const;
  inline void set_m_lgdiscnt(::google::protobuf::int32 value);
  
  // required int64 m_llGlastLogonDay = 37;
  inline bool has_m_llglastlogonday() const;
  inline void clear_m_llglastlogonday();
  static const int kMLlGlastLogonDayFieldNumber = 37;
  inline ::google::protobuf::int64 m_llglastlogonday() const;
  inline void set_m_llglastlogonday(::google::protobuf::int64 value);
  
  // required int64 m_llGRegDate = 38;
  inline bool has_m_llgregdate() const;
  inline void clear_m_llgregdate();
  static const int kMLlGRegDateFieldNumber = 38;
  inline ::google::protobuf::int64 m_llgregdate() const;
  inline void set_m_llgregdate(::google::protobuf::int64 value);
  
  // required int64 m_llGFirstPlayDate = 39;
  inline bool has_m_llgfirstplaydate() const;
  inline void clear_m_llgfirstplaydate();
  static const int kMLlGFirstPlayDateFieldNumber = 39;
  inline ::google::protobuf::int64 m_llgfirstplaydate() const;
  inline void set_m_llgfirstplaydate(::google::protobuf::int64 value);
  
  // required int32 m_lGTodayPlayCount = 40;
  inline bool has_m_lgtodayplaycount() const;
  inline void clear_m_lgtodayplaycount();
  static const int kMLGTodayPlayCountFieldNumber = 40;
  inline ::google::protobuf::int32 m_lgtodayplaycount() const;
  inline void set_m_lgtodayplaycount(::google::protobuf::int32 value);
  
  // required int32 m_lGTodayPlayTime = 41;
  inline bool has_m_lgtodayplaytime() const;
  inline void clear_m_lgtodayplaytime();
  static const int kMLGTodayPlayTimeFieldNumber = 41;
  inline ::google::protobuf::int32 m_lgtodayplaytime() const;
  inline void set_m_lgtodayplaytime(::google::protobuf::int32 value);
  
  // required int32 m_lGTotalPlayCount = 42;
  inline bool has_m_lgtotalplaycount() const;
  inline void clear_m_lgtotalplaycount();
  static const int kMLGTotalPlayCountFieldNumber = 42;
  inline ::google::protobuf::int32 m_lgtotalplaycount() const;
  inline void set_m_lgtotalplaycount(::google::protobuf::int32 value);
  
  // required int32 m_lGTotalPlayTime = 43;
  inline bool has_m_lgtotalplaytime() const;
  inline void clear_m_lgtotalplaytime();
  static const int kMLGTotalPlayTimeFieldNumber = 43;
  inline ::google::protobuf::int32 m_lgtotalplaytime() const;
  inline void set_m_lgtotalplaytime(::google::protobuf::int32 value);
  
  // required int32 m_lGAllinCnt = 44;
  inline bool has_m_lgallincnt() const;
  inline void clear_m_lgallincnt();
  static const int kMLGAllinCntFieldNumber = 44;
  inline ::google::protobuf::int32 m_lgallincnt() const;
  inline void set_m_lgallincnt(::google::protobuf::int32 value);
  
  // required int32 m_lGAllinOut = 45;
  inline bool has_m_lgallinout() const;
  inline void clear_m_lgallinout();
  static const int kMLGAllinOutFieldNumber = 45;
  inline ::google::protobuf::int32 m_lgallinout() const;
  inline void set_m_lgallinout(::google::protobuf::int32 value);
  
  // required int64 m_llGLastAllinDate = 46;
  inline bool has_m_llglastallindate() const;
  inline void clear_m_llglastallindate();
  static const int kMLlGLastAllinDateFieldNumber = 46;
  inline ::google::protobuf::int64 m_llglastallindate() const;
  inline void set_m_llglastallindate(::google::protobuf::int64 value);
  
  // required .Game_Poker._CWinLose m_cWinLose_Today = 47;
  inline bool has_m_cwinlose_today() const;
  inline void clear_m_cwinlose_today();
  static const int kMCWinLoseTodayFieldNumber = 47;
  inline const ::Game_Poker::_CWinLose& m_cwinlose_today() const;
  inline ::Game_Poker::_CWinLose* mutable_m_cwinlose_today();
  inline ::Game_Poker::_CWinLose* release_m_cwinlose_today();
  
  // required int64 m_llGTodayMoney = 48;
  inline bool has_m_llgtodaymoney() const;
  inline void clear_m_llgtodaymoney();
  static const int kMLlGTodayMoneyFieldNumber = 48;
  inline ::google::protobuf::int64 m_llgtodaymoney() const;
  inline void set_m_llgtodaymoney(::google::protobuf::int64 value);
  
  // required int32 m_lFourCardCnt = 49;
  inline bool has_m_lfourcardcnt() const;
  inline void clear_m_lfourcardcnt();
  static const int kMLFourCardCntFieldNumber = 49;
  inline ::google::protobuf::int32 m_lfourcardcnt() const;
  inline void set_m_lfourcardcnt(::google::protobuf::int32 value);
  
  // required int32 m_lStraightFlushCnt = 50;
  inline bool has_m_lstraightflushcnt() const;
  inline void clear_m_lstraightflushcnt();
  static const int kMLStraightFlushCntFieldNumber = 50;
  inline ::google::protobuf::int32 m_lstraightflushcnt() const;
  inline void set_m_lstraightflushcnt(::google::protobuf::int32 value);
  
  // required int32 m_lRoyalStraightFlushCnt = 51;
  inline bool has_m_lroyalstraightflushcnt() const;
  inline void clear_m_lroyalstraightflushcnt();
  static const int kMLRoyalStraightFlushCntFieldNumber = 51;
  inline ::google::protobuf::int32 m_lroyalstraightflushcnt() const;
  inline void set_m_lroyalstraightflushcnt(::google::protobuf::int32 value);
  
  // required int32 m_nReserve01 = 52;
  inline bool has_m_nreserve01() const;
  inline void clear_m_nreserve01();
  static const int kMNReserve01FieldNumber = 52;
  inline ::google::protobuf::int32 m_nreserve01() const;
  inline void set_m_nreserve01(::google::protobuf::int32 value);
  
  // required int32 m_nReserve02 = 53;
  inline bool has_m_nreserve02() const;
  inline void clear_m_nreserve02();
  static const int kMNReserve02FieldNumber = 53;
  inline ::google::protobuf::int32 m_nreserve02() const;
  inline void set_m_nreserve02(::google::protobuf::int32 value);
  
  // required .Game_Poker._ItemList m_ItemList = 54;
  inline bool has_m_itemlist() const;
  inline void clear_m_itemlist();
  static const int kMItemListFieldNumber = 54;
  inline const ::Game_Poker::_ItemList& m_itemlist() const;
  inline ::Game_Poker::_ItemList* mutable_m_itemlist();
  inline ::Game_Poker::_ItemList* release_m_itemlist();
  
  // required int64 m_llJoinDate = 55;
  inline bool has_m_lljoindate() const;
  inline void clear_m_lljoindate();
  static const int kMLlJoinDateFieldNumber = 55;
  inline ::google::protobuf::int64 m_lljoindate() const;
  inline void set_m_lljoindate(::google::protobuf::int64 value);
  
  // required int64 m_llPlayDate = 56;
  inline bool has_m_llplaydate() const;
  inline void clear_m_llplaydate();
  static const int kMLlPlayDateFieldNumber = 56;
  inline ::google::protobuf::int64 m_llplaydate() const;
  inline void set_m_llplaydate(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._RCUser)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_ljumin();
  inline void clear_has_m_ljumin();
  inline void set_has_m_lfirstusn();
  inline void clear_has_m_lfirstusn();
  inline void set_has_m_lageindex();
  inline void clear_has_m_lageindex();
  inline void set_has_m_ljobindex();
  inline void clear_has_m_ljobindex();
  inline void set_has_m_lregionindex();
  inline void clear_has_m_lregionindex();
  inline void set_has_m_lguildindex();
  inline void clear_has_m_lguildindex();
  inline void set_has_m_lmemberindex();
  inline void clear_has_m_lmemberindex();
  inline void set_has_m_lclientip();
  inline void clear_has_m_lclientip();
  inline void set_has_m_lgatewayip();
  inline void clear_has_m_lgatewayip();
  inline void set_has_m_lmacaddress();
  inline void clear_has_m_lmacaddress();
  inline void set_has_m_smobileinfo();
  inline void clear_has_m_smobileinfo();
  inline void set_has_m_sauthkey();
  inline void clear_has_m_sauthkey();
  inline void set_has_m_susergamedata();
  inline void clear_has_m_susergamedata();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_suserid();
  inline void clear_has_m_suserid();
  inline void set_has_m_savt();
  inline void clear_has_m_savt();
  inline void set_has_m_lclevel();
  inline void clear_has_m_lclevel();
  inline void set_has_m_lsex();
  inline void clear_has_m_lsex();
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  inline void set_has_m_llfmoney();
  inline void clear_has_m_llfmoney();
  inline void set_has_m_llsafemoney();
  inline void clear_has_m_llsafemoney();
  inline void set_has_m_llplastallindate();
  inline void clear_has_m_llplastallindate();
  inline void set_has_m_llplastlogonday();
  inline void clear_has_m_llplastlogonday();
  inline void set_has_m_lmtodayplaycount();
  inline void clear_has_m_lmtodayplaycount();
  inline void set_has_m_lmtodayplaytime();
  inline void clear_has_m_lmtodayplaytime();
  inline void set_has_m_lptotalplaycount();
  inline void clear_has_m_lptotalplaycount();
  inline void set_has_m_crefill();
  inline void clear_has_m_crefill();
  inline void set_has_m_llpextmoney();
  inline void clear_has_m_llpextmoney();
  inline void set_has_m_llpextenddate();
  inline void clear_has_m_llpextenddate();
  inline void set_has_m_llpbonusdate();
  inline void clear_has_m_llpbonusdate();
  inline void set_has_m_lmmonthplaycount();
  inline void clear_has_m_lmmonthplaycount();
  inline void set_has_m_lmmonthplaytime();
  inline void clear_has_m_lmmonthplaytime();
  inline void set_has_m_cwinlose();
  inline void clear_has_m_cwinlose();
  inline void set_has_m_lgdiscnt();
  inline void clear_has_m_lgdiscnt();
  inline void set_has_m_llglastlogonday();
  inline void clear_has_m_llglastlogonday();
  inline void set_has_m_llgregdate();
  inline void clear_has_m_llgregdate();
  inline void set_has_m_llgfirstplaydate();
  inline void clear_has_m_llgfirstplaydate();
  inline void set_has_m_lgtodayplaycount();
  inline void clear_has_m_lgtodayplaycount();
  inline void set_has_m_lgtodayplaytime();
  inline void clear_has_m_lgtodayplaytime();
  inline void set_has_m_lgtotalplaycount();
  inline void clear_has_m_lgtotalplaycount();
  inline void set_has_m_lgtotalplaytime();
  inline void clear_has_m_lgtotalplaytime();
  inline void set_has_m_lgallincnt();
  inline void clear_has_m_lgallincnt();
  inline void set_has_m_lgallinout();
  inline void clear_has_m_lgallinout();
  inline void set_has_m_llglastallindate();
  inline void clear_has_m_llglastallindate();
  inline void set_has_m_cwinlose_today();
  inline void clear_has_m_cwinlose_today();
  inline void set_has_m_llgtodaymoney();
  inline void clear_has_m_llgtodaymoney();
  inline void set_has_m_lfourcardcnt();
  inline void clear_has_m_lfourcardcnt();
  inline void set_has_m_lstraightflushcnt();
  inline void clear_has_m_lstraightflushcnt();
  inline void set_has_m_lroyalstraightflushcnt();
  inline void clear_has_m_lroyalstraightflushcnt();
  inline void set_has_m_nreserve01();
  inline void clear_has_m_nreserve01();
  inline void set_has_m_nreserve02();
  inline void clear_has_m_nreserve02();
  inline void set_has_m_itemlist();
  inline void clear_has_m_itemlist();
  inline void set_has_m_lljoindate();
  inline void clear_has_m_lljoindate();
  inline void set_has_m_llplaydate();
  inline void clear_has_m_llplaydate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_ljumin_;
  ::google::protobuf::int32 m_lfirstusn_;
  ::google::protobuf::int32 m_lageindex_;
  ::google::protobuf::int32 m_ljobindex_;
  ::google::protobuf::int32 m_lregionindex_;
  ::google::protobuf::int32 m_lguildindex_;
  ::google::protobuf::int32 m_lmemberindex_;
  ::google::protobuf::int32 m_lclientip_;
  ::google::protobuf::int32 m_lgatewayip_;
  ::std::string* m_smobileinfo_;
  ::std::string* m_sauthkey_;
  ::google::protobuf::int32 m_lmacaddress_;
  ::google::protobuf::int32 m_nindex_;
  ::std::string* m_susergamedata_;
  ::std::string* m_snickname_;
  ::std::string* m_suserid_;
  ::std::string* m_savt_;
  ::google::protobuf::int32 m_lclevel_;
  ::google::protobuf::int32 m_lsex_;
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int64 m_llfmoney_;
  ::google::protobuf::int64 m_llsafemoney_;
  ::google::protobuf::int64 m_llplastallindate_;
  ::google::protobuf::int64 m_llplastlogonday_;
  ::google::protobuf::int32 m_lmtodayplaycount_;
  ::google::protobuf::int32 m_lmtodayplaytime_;
  ::Game_Poker::CRefill* m_crefill_;
  ::google::protobuf::int64 m_llpextmoney_;
  ::google::protobuf::int32 m_lptotalplaycount_;
  ::google::protobuf::int32 m_lmmonthplaycount_;
  ::google::protobuf::int64 m_llpextenddate_;
  ::google::protobuf::int64 m_llpbonusdate_;
  ::Game_Poker::_CWinLose* m_cwinlose_;
  ::google::protobuf::int32 m_lmmonthplaytime_;
  ::google::protobuf::int32 m_lgdiscnt_;
  ::google::protobuf::int64 m_llglastlogonday_;
  ::google::protobuf::int64 m_llgregdate_;
  ::google::protobuf::int64 m_llgfirstplaydate_;
  ::google::protobuf::int32 m_lgtodayplaycount_;
  ::google::protobuf::int32 m_lgtodayplaytime_;
  ::google::protobuf::int32 m_lgtotalplaycount_;
  ::google::protobuf::int32 m_lgtotalplaytime_;
  ::google::protobuf::int32 m_lgallincnt_;
  ::google::protobuf::int32 m_lgallinout_;
  ::google::protobuf::int64 m_llglastallindate_;
  ::Game_Poker::_CWinLose* m_cwinlose_today_;
  ::google::protobuf::int64 m_llgtodaymoney_;
  ::google::protobuf::int32 m_lfourcardcnt_;
  ::google::protobuf::int32 m_lstraightflushcnt_;
  ::google::protobuf::int32 m_lroyalstraightflushcnt_;
  ::google::protobuf::int32 m_nreserve01_;
  ::Game_Poker::_ItemList* m_itemlist_;
  ::google::protobuf::int64 m_lljoindate_;
  ::google::protobuf::int64 m_llplaydate_;
  ::google::protobuf::int32 m_nreserve02_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(56 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _RCUser* default_instance_;
};
// -------------------------------------------------------------------

class _RCUserData : public ::google::protobuf::Message {
 public:
  _RCUserData();
  virtual ~_RCUserData();
  
  _RCUserData(const _RCUserData& from);
  
  inline _RCUserData& operator=(const _RCUserData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _RCUserData& default_instance();
  
  void Swap(_RCUserData* other);
  
  // implements Message ----------------------------------------------
  
  _RCUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _RCUserData& from);
  void MergeFrom(const _RCUserData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._RCUserData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _RCUserData* default_instance_;
};
// -------------------------------------------------------------------

class _Option : public ::google::protobuf::Message {
 public:
  _Option();
  virtual ~_Option();
  
  _Option(const _Option& from);
  
  inline _Option& operator=(const _Option& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _Option& default_instance();
  
  void Swap(_Option* other);
  
  // implements Message ----------------------------------------------
  
  _Option* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _Option& from);
  void MergeFrom(const _Option& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string m_sRoomTitle = 1;
  inline bool has_m_sroomtitle() const;
  inline void clear_m_sroomtitle();
  static const int kMSRoomTitleFieldNumber = 1;
  inline const ::std::string& m_sroomtitle() const;
  inline void set_m_sroomtitle(const ::std::string& value);
  inline void set_m_sroomtitle(const char* value);
  inline void set_m_sroomtitle(const char* value, size_t size);
  inline ::std::string* mutable_m_sroomtitle();
  inline ::std::string* release_m_sroomtitle();
  
  // required string m_sPassword = 2;
  inline bool has_m_spassword() const;
  inline void clear_m_spassword();
  static const int kMSPasswordFieldNumber = 2;
  inline const ::std::string& m_spassword() const;
  inline void set_m_spassword(const ::std::string& value);
  inline void set_m_spassword(const char* value);
  inline void set_m_spassword(const char* value, size_t size);
  inline ::std::string* mutable_m_spassword();
  inline ::std::string* release_m_spassword();
  
  // required int32 m_lMaxUserCnt = 3;
  inline bool has_m_lmaxusercnt() const;
  inline void clear_m_lmaxusercnt();
  static const int kMLMaxUserCntFieldNumber = 3;
  inline ::google::protobuf::int32 m_lmaxusercnt() const;
  inline void set_m_lmaxusercnt(::google::protobuf::int32 value);
  
  // required int32 m_lMaxPlayerUserCnt = 4;
  inline bool has_m_lmaxplayerusercnt() const;
  inline void clear_m_lmaxplayerusercnt();
  static const int kMLMaxPlayerUserCntFieldNumber = 4;
  inline ::google::protobuf::int32 m_lmaxplayerusercnt() const;
  inline void set_m_lmaxplayerusercnt(::google::protobuf::int32 value);
  
  // required int32 m_lMaxPlayerCardCnt = 5;
  inline bool has_m_lmaxplayercardcnt() const;
  inline void clear_m_lmaxplayercardcnt();
  static const int kMLMaxPlayerCardCntFieldNumber = 5;
  inline ::google::protobuf::int32 m_lmaxplayercardcnt() const;
  inline void set_m_lmaxplayercardcnt(::google::protobuf::int32 value);
  
  // required int32 m_lChoiceMode = 6;
  inline bool has_m_lchoicemode() const;
  inline void clear_m_lchoicemode();
  static const int kMLChoiceModeFieldNumber = 6;
  inline ::google::protobuf::int32 m_lchoicemode() const;
  inline void set_m_lchoicemode(::google::protobuf::int32 value);
  
  // required int32 m_lRoomType = 7;
  inline bool has_m_lroomtype() const;
  inline void clear_m_lroomtype();
  static const int kMLRoomTypeFieldNumber = 7;
  inline ::google::protobuf::int32 m_lroomtype() const;
  inline void set_m_lroomtype(::google::protobuf::int32 value);
  
  // required int32 m_lBetRule = 8;
  inline bool has_m_lbetrule() const;
  inline void clear_m_lbetrule();
  static const int kMLBetRuleFieldNumber = 8;
  inline ::google::protobuf::int32 m_lbetrule() const;
  inline void set_m_lbetrule(::google::protobuf::int32 value);
  
  // required int32 m_lBetType = 9;
  inline bool has_m_lbettype() const;
  inline void clear_m_lbettype();
  static const int kMLBetTypeFieldNumber = 9;
  inline ::google::protobuf::int32 m_lbettype() const;
  inline void set_m_lbettype(::google::protobuf::int32 value);
  
  // required int32 m_lAddRule = 10;
  inline bool has_m_laddrule() const;
  inline void clear_m_laddrule();
  static const int kMLAddRuleFieldNumber = 10;
  inline ::google::protobuf::int32 m_laddrule() const;
  inline void set_m_laddrule(::google::protobuf::int32 value);
  
  // required int32 m_lRematchJoin = 11;
  inline bool has_m_lrematchjoin() const;
  inline void clear_m_lrematchjoin();
  static const int kMLRematchJoinFieldNumber = 11;
  inline ::google::protobuf::int32 m_lrematchjoin() const;
  inline void set_m_lrematchjoin(::google::protobuf::int32 value);
  
  // required int32 m_lLimitMoney = 12;
  inline bool has_m_llimitmoney() const;
  inline void clear_m_llimitmoney();
  static const int kMLLimitMoneyFieldNumber = 12;
  inline ::google::protobuf::int32 m_llimitmoney() const;
  inline void set_m_llimitmoney(::google::protobuf::int32 value);
  
  // required sint64 m_llGameAnteMoney = 13;
  inline bool has_m_llgameantemoney() const;
  inline void clear_m_llgameantemoney();
  static const int kMLlGameAnteMoneyFieldNumber = 13;
  inline ::google::protobuf::int64 m_llgameantemoney() const;
  inline void set_m_llgameantemoney(::google::protobuf::int64 value);
  
  // required int32 m_bEcho = 14;
  inline bool has_m_becho() const;
  inline void clear_m_becho();
  static const int kMBEchoFieldNumber = 14;
  inline ::google::protobuf::int32 m_becho() const;
  inline void set_m_becho(::google::protobuf::int32 value);
  
  // required int32 m_lMakeUSN = 15;
  inline bool has_m_lmakeusn() const;
  inline void clear_m_lmakeusn();
  static const int kMLMakeUSNFieldNumber = 15;
  inline ::google::protobuf::int32 m_lmakeusn() const;
  inline void set_m_lmakeusn(::google::protobuf::int32 value);
  
  // required int32 m_lCategory = 16;
  inline bool has_m_lcategory() const;
  inline void clear_m_lcategory();
  static const int kMLCategoryFieldNumber = 16;
  inline ::google::protobuf::int32 m_lcategory() const;
  inline void set_m_lcategory(::google::protobuf::int32 value);
  
  // required int32 m_lChannelID = 17;
  inline bool has_m_lchannelid() const;
  inline void clear_m_lchannelid();
  static const int kMLChannelIDFieldNumber = 17;
  inline ::google::protobuf::int32 m_lchannelid() const;
  inline void set_m_lchannelid(::google::protobuf::int32 value);
  
  // required sint64 m_llAnteMoney = 18;
  inline bool has_m_llantemoney() const;
  inline void clear_m_llantemoney();
  static const int kMLlAnteMoneyFieldNumber = 18;
  inline ::google::protobuf::int64 m_llantemoney() const;
  inline void set_m_llantemoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._Option)
 private:
  inline void set_has_m_sroomtitle();
  inline void clear_has_m_sroomtitle();
  inline void set_has_m_spassword();
  inline void clear_has_m_spassword();
  inline void set_has_m_lmaxusercnt();
  inline void clear_has_m_lmaxusercnt();
  inline void set_has_m_lmaxplayerusercnt();
  inline void clear_has_m_lmaxplayerusercnt();
  inline void set_has_m_lmaxplayercardcnt();
  inline void clear_has_m_lmaxplayercardcnt();
  inline void set_has_m_lchoicemode();
  inline void clear_has_m_lchoicemode();
  inline void set_has_m_lroomtype();
  inline void clear_has_m_lroomtype();
  inline void set_has_m_lbetrule();
  inline void clear_has_m_lbetrule();
  inline void set_has_m_lbettype();
  inline void clear_has_m_lbettype();
  inline void set_has_m_laddrule();
  inline void clear_has_m_laddrule();
  inline void set_has_m_lrematchjoin();
  inline void clear_has_m_lrematchjoin();
  inline void set_has_m_llimitmoney();
  inline void clear_has_m_llimitmoney();
  inline void set_has_m_llgameantemoney();
  inline void clear_has_m_llgameantemoney();
  inline void set_has_m_becho();
  inline void clear_has_m_becho();
  inline void set_has_m_lmakeusn();
  inline void clear_has_m_lmakeusn();
  inline void set_has_m_lcategory();
  inline void clear_has_m_lcategory();
  inline void set_has_m_lchannelid();
  inline void clear_has_m_lchannelid();
  inline void set_has_m_llantemoney();
  inline void clear_has_m_llantemoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_sroomtitle_;
  ::std::string* m_spassword_;
  ::google::protobuf::int32 m_lmaxusercnt_;
  ::google::protobuf::int32 m_lmaxplayerusercnt_;
  ::google::protobuf::int32 m_lmaxplayercardcnt_;
  ::google::protobuf::int32 m_lchoicemode_;
  ::google::protobuf::int32 m_lroomtype_;
  ::google::protobuf::int32 m_lbetrule_;
  ::google::protobuf::int32 m_lbettype_;
  ::google::protobuf::int32 m_laddrule_;
  ::google::protobuf::int32 m_lrematchjoin_;
  ::google::protobuf::int32 m_llimitmoney_;
  ::google::protobuf::int64 m_llgameantemoney_;
  ::google::protobuf::int32 m_becho_;
  ::google::protobuf::int32 m_lmakeusn_;
  ::google::protobuf::int32 m_lcategory_;
  ::google::protobuf::int32 m_lchannelid_;
  ::google::protobuf::int64 m_llantemoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _Option* default_instance_;
};
// -------------------------------------------------------------------

class _BettingMsg : public ::google::protobuf::Message {
 public:
  _BettingMsg();
  virtual ~_BettingMsg();
  
  _BettingMsg(const _BettingMsg& from);
  
  inline _BettingMsg& operator=(const _BettingMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _BettingMsg& default_instance();
  
  void Swap(_BettingMsg* other);
  
  // implements Message ----------------------------------------------
  
  _BettingMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _BettingMsg& from);
  void MergeFrom(const _BettingMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required int32 m_BetType = 3;
  inline bool has_m_bettype() const;
  inline void clear_m_bettype();
  static const int kMBetTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_bettype() const;
  inline void set_m_bettype(::google::protobuf::int32 value);
  
  // required int32 m_bBettingMoney = 4;
  inline bool has_m_bbettingmoney() const;
  inline void clear_m_bbettingmoney();
  static const int kMBBettingMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 m_bbettingmoney() const;
  inline void set_m_bbettingmoney(::google::protobuf::int32 value);
  
  // required int32 m_bMoneyLack = 5;
  inline bool has_m_bmoneylack() const;
  inline void clear_m_bmoneylack();
  static const int kMBMoneyLackFieldNumber = 5;
  inline ::google::protobuf::int32 m_bmoneylack() const;
  inline void set_m_bmoneylack(::google::protobuf::int32 value);
  
  // required int32 m_bCallMoneyZero = 6;
  inline bool has_m_bcallmoneyzero() const;
  inline void clear_m_bcallmoneyzero();
  static const int kMBCallMoneyZeroFieldNumber = 6;
  inline ::google::protobuf::int32 m_bcallmoneyzero() const;
  inline void set_m_bcallmoneyzero(::google::protobuf::int32 value);
  
  // required int64 m_llCallMoney = 7;
  inline bool has_m_llcallmoney() const;
  inline void clear_m_llcallmoney();
  static const int kMLlCallMoneyFieldNumber = 7;
  inline ::google::protobuf::int64 m_llcallmoney() const;
  inline void set_m_llcallmoney(::google::protobuf::int64 value);
  
  // required int64 m_llRaiseMoney = 8;
  inline bool has_m_llraisemoney() const;
  inline void clear_m_llraisemoney();
  static const int kMLlRaiseMoneyFieldNumber = 8;
  inline ::google::protobuf::int64 m_llraisemoney() const;
  inline void set_m_llraisemoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._BettingMsg)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_bettype();
  inline void clear_has_m_bettype();
  inline void set_has_m_bbettingmoney();
  inline void clear_has_m_bbettingmoney();
  inline void set_has_m_bmoneylack();
  inline void clear_has_m_bmoneylack();
  inline void set_has_m_bcallmoneyzero();
  inline void clear_has_m_bcallmoneyzero();
  inline void set_has_m_llcallmoney();
  inline void clear_has_m_llcallmoney();
  inline void set_has_m_llraisemoney();
  inline void clear_has_m_llraisemoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_bettype_;
  ::google::protobuf::int32 m_bbettingmoney_;
  ::google::protobuf::int32 m_bmoneylack_;
  ::google::protobuf::int32 m_bcallmoneyzero_;
  ::google::protobuf::int64 m_llcallmoney_;
  ::google::protobuf::int64 m_llraisemoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _BettingMsg* default_instance_;
};
// -------------------------------------------------------------------

class _BettingMsgTable : public ::google::protobuf::Message {
 public:
  _BettingMsgTable();
  virtual ~_BettingMsgTable();
  
  _BettingMsgTable(const _BettingMsgTable& from);
  
  inline _BettingMsgTable& operator=(const _BettingMsgTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _BettingMsgTable& default_instance();
  
  void Swap(_BettingMsgTable* other);
  
  // implements Message ----------------------------------------------
  
  _BettingMsgTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _BettingMsgTable& from);
  void MergeFrom(const _BettingMsgTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker._BettingMsg BettingMsgTable = 1;
  inline int bettingmsgtable_size() const;
  inline void clear_bettingmsgtable();
  static const int kBettingMsgTableFieldNumber = 1;
  inline const ::Game_Poker::_BettingMsg& bettingmsgtable(int index) const;
  inline ::Game_Poker::_BettingMsg* mutable_bettingmsgtable(int index);
  inline ::Game_Poker::_BettingMsg* add_bettingmsgtable();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_BettingMsg >&
      bettingmsgtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_BettingMsg >*
      mutable_bettingmsgtable();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._BettingMsgTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_BettingMsg > bettingmsgtable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _BettingMsgTable* default_instance_;
};
// -------------------------------------------------------------------

class _MoneyTable : public ::google::protobuf::Message {
 public:
  _MoneyTable();
  virtual ~_MoneyTable();
  
  _MoneyTable(const _MoneyTable& from);
  
  inline _MoneyTable& operator=(const _MoneyTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MoneyTable& default_instance();
  
  void Swap(_MoneyTable* other);
  
  // implements Message ----------------------------------------------
  
  _MoneyTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MoneyTable& from);
  void MergeFrom(const _MoneyTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker._Money MoneyTable = 1;
  inline int moneytable_size() const;
  inline void clear_moneytable();
  static const int kMoneyTableFieldNumber = 1;
  inline const ::Game_Poker::_Money& moneytable(int index) const;
  inline ::Game_Poker::_Money* mutable_moneytable(int index);
  inline ::Game_Poker::_Money* add_moneytable();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
      moneytable() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
      mutable_moneytable();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MoneyTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money > moneytable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MoneyTable* default_instance_;
};
// -------------------------------------------------------------------

class _CardTable : public ::google::protobuf::Message {
 public:
  _CardTable();
  virtual ~_CardTable();
  
  _CardTable(const _CardTable& from);
  
  inline _CardTable& operator=(const _CardTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _CardTable& default_instance();
  
  void Swap(_CardTable* other);
  
  // implements Message ----------------------------------------------
  
  _CardTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _CardTable& from);
  void MergeFrom(const _CardTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker._Cards CardTable = 1;
  inline int cardtable_size() const;
  inline void clear_cardtable();
  static const int kCardTableFieldNumber = 1;
  inline const ::Game_Poker::_Cards& cardtable(int index) const;
  inline ::Game_Poker::_Cards* mutable_cardtable(int index);
  inline ::Game_Poker::_Cards* add_cardtable();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
      cardtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
      mutable_cardtable();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._CardTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards > cardtable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _CardTable* default_instance_;
};
// -------------------------------------------------------------------

class _UITable : public ::google::protobuf::Message {
 public:
  _UITable();
  virtual ~_UITable();
  
  _UITable(const _UITable& from);
  
  inline _UITable& operator=(const _UITable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _UITable& default_instance();
  
  void Swap(_UITable* other);
  
  // implements Message ----------------------------------------------
  
  _UITable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _UITable& from);
  void MergeFrom(const _UITable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker._UserInfo UITable = 1;
  inline int uitable_size() const;
  inline void clear_uitable();
  static const int kUITableFieldNumber = 1;
  inline const ::Game_Poker::_UserInfo& uitable(int index) const;
  inline ::Game_Poker::_UserInfo* mutable_uitable(int index);
  inline ::Game_Poker::_UserInfo* add_uitable();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo >&
      uitable() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo >*
      mutable_uitable();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._UITable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo > uitable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _UITable* default_instance_;
};
// -------------------------------------------------------------------

class _RCRoomData : public ::google::protobuf::Message {
 public:
  _RCRoomData();
  virtual ~_RCRoomData();
  
  _RCRoomData(const _RCRoomData& from);
  
  inline _RCRoomData& operator=(const _RCRoomData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _RCRoomData& default_instance();
  
  void Swap(_RCRoomData* other);
  
  // implements Message ----------------------------------------------
  
  _RCRoomData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _RCRoomData& from);
  void MergeFrom(const _RCRoomData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_lGameMaster = 1;
  inline bool has_m_lgamemaster() const;
  inline void clear_m_lgamemaster();
  static const int kMLGameMasterFieldNumber = 1;
  inline ::google::protobuf::int32 m_lgamemaster() const;
  inline void set_m_lgamemaster(::google::protobuf::int32 value);
  
  // required int32 m_lRoomIndex = 2;
  inline bool has_m_lroomindex() const;
  inline void clear_m_lroomindex();
  static const int kMLRoomIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_lroomindex() const;
  inline void set_m_lroomindex(::google::protobuf::int32 value);
  
  // required int32 m_lState = 3;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required .Game_Poker._Option m_option = 4;
  inline bool has_m_option() const;
  inline void clear_m_option();
  static const int kMOptionFieldNumber = 4;
  inline const ::Game_Poker::_Option& m_option() const;
  inline ::Game_Poker::_Option* mutable_m_option();
  inline ::Game_Poker::_Option* release_m_option();
  
  // optional .Game_Poker._UITable m_tblUI = 5;
  inline bool has_m_tblui() const;
  inline void clear_m_tblui();
  static const int kMTblUIFieldNumber = 5;
  inline const ::Game_Poker::_UITable& m_tblui() const;
  inline ::Game_Poker::_UITable* mutable_m_tblui();
  inline ::Game_Poker::_UITable* release_m_tblui();
  
  // optional .Game_Poker._CardTable m_tblCard = 6;
  inline bool has_m_tblcard() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 6;
  inline const ::Game_Poker::_CardTable& m_tblcard() const;
  inline ::Game_Poker::_CardTable* mutable_m_tblcard();
  inline ::Game_Poker::_CardTable* release_m_tblcard();
  
  // optional .Game_Poker._MoneyTable m_tblMoney = 7;
  inline bool has_m_tblmoney() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 7;
  inline const ::Game_Poker::_MoneyTable& m_tblmoney() const;
  inline ::Game_Poker::_MoneyTable* mutable_m_tblmoney();
  inline ::Game_Poker::_MoneyTable* release_m_tblmoney();
  
  // optional .Game_Poker._BettingMsgTable m_tblBettingMsg = 8;
  inline bool has_m_tblbettingmsg() const;
  inline void clear_m_tblbettingmsg();
  static const int kMTblBettingMsgFieldNumber = 8;
  inline const ::Game_Poker::_BettingMsgTable& m_tblbettingmsg() const;
  inline ::Game_Poker::_BettingMsgTable* mutable_m_tblbettingmsg();
  inline ::Game_Poker::_BettingMsgTable* release_m_tblbettingmsg();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._RCRoomData)
 private:
  inline void set_has_m_lgamemaster();
  inline void clear_has_m_lgamemaster();
  inline void set_has_m_lroomindex();
  inline void clear_has_m_lroomindex();
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_option();
  inline void clear_has_m_option();
  inline void set_has_m_tblui();
  inline void clear_has_m_tblui();
  inline void set_has_m_tblcard();
  inline void clear_has_m_tblcard();
  inline void set_has_m_tblmoney();
  inline void clear_has_m_tblmoney();
  inline void set_has_m_tblbettingmsg();
  inline void clear_has_m_tblbettingmsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lgamemaster_;
  ::google::protobuf::int32 m_lroomindex_;
  ::Game_Poker::_Option* m_option_;
  ::Game_Poker::_UITable* m_tblui_;
  ::Game_Poker::_CardTable* m_tblcard_;
  ::Game_Poker::_MoneyTable* m_tblmoney_;
  ::Game_Poker::_BettingMsgTable* m_tblbettingmsg_;
  ::google::protobuf::int32 m_lstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _RCRoomData* default_instance_;
};
// -------------------------------------------------------------------

class _SPUserBaseInfo : public ::google::protobuf::Message {
 public:
  _SPUserBaseInfo();
  virtual ~_SPUserBaseInfo();
  
  _SPUserBaseInfo(const _SPUserBaseInfo& from);
  
  inline _SPUserBaseInfo& operator=(const _SPUserBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _SPUserBaseInfo& default_instance();
  
  void Swap(_SPUserBaseInfo* other);
  
  // implements Message ----------------------------------------------
  
  _SPUserBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _SPUserBaseInfo& from);
  void MergeFrom(const _SPUserBaseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required string m_sUserID = 2;
  inline bool has_m_suserid() const;
  inline void clear_m_suserid();
  static const int kMSUserIDFieldNumber = 2;
  inline const ::std::string& m_suserid() const;
  inline void set_m_suserid(const ::std::string& value);
  inline void set_m_suserid(const char* value);
  inline void set_m_suserid(const char* value, size_t size);
  inline ::std::string* mutable_m_suserid();
  inline ::std::string* release_m_suserid();
  
  // required string m_sNickName = 3;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 3;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required int32 m_lUSC = 4;
  inline bool has_m_lusc() const;
  inline void clear_m_lusc();
  static const int kMLUSCFieldNumber = 4;
  inline ::google::protobuf::int32 m_lusc() const;
  inline void set_m_lusc(::google::protobuf::int32 value);
  
  // required int32 m_lJumin = 5;
  inline bool has_m_ljumin() const;
  inline void clear_m_ljumin();
  static const int kMLJuminFieldNumber = 5;
  inline ::google::protobuf::int32 m_ljumin() const;
  inline void set_m_ljumin(::google::protobuf::int32 value);
  
  // required int32 m_lFirstUSN = 6;
  inline bool has_m_lfirstusn() const;
  inline void clear_m_lfirstusn();
  static const int kMLFirstUSNFieldNumber = 6;
  inline ::google::protobuf::int32 m_lfirstusn() const;
  inline void set_m_lfirstusn(::google::protobuf::int32 value);
  
  // required int32 m_lAgeIndex = 7;
  inline bool has_m_lageindex() const;
  inline void clear_m_lageindex();
  static const int kMLAgeIndexFieldNumber = 7;
  inline ::google::protobuf::int32 m_lageindex() const;
  inline void set_m_lageindex(::google::protobuf::int32 value);
  
  // required int32 m_lJobIndex = 8;
  inline bool has_m_ljobindex() const;
  inline void clear_m_ljobindex();
  static const int kMLJobIndexFieldNumber = 8;
  inline ::google::protobuf::int32 m_ljobindex() const;
  inline void set_m_ljobindex(::google::protobuf::int32 value);
  
  // required int32 m_lRegionIndex = 9;
  inline bool has_m_lregionindex() const;
  inline void clear_m_lregionindex();
  static const int kMLRegionIndexFieldNumber = 9;
  inline ::google::protobuf::int32 m_lregionindex() const;
  inline void set_m_lregionindex(::google::protobuf::int32 value);
  
  // required int32 m_lGuildIndex = 10;
  inline bool has_m_lguildindex() const;
  inline void clear_m_lguildindex();
  static const int kMLGuildIndexFieldNumber = 10;
  inline ::google::protobuf::int32 m_lguildindex() const;
  inline void set_m_lguildindex(::google::protobuf::int32 value);
  
  // required int32 m_lMemberIndex = 11;
  inline bool has_m_lmemberindex() const;
  inline void clear_m_lmemberindex();
  static const int kMLMemberIndexFieldNumber = 11;
  inline ::google::protobuf::int32 m_lmemberindex() const;
  inline void set_m_lmemberindex(::google::protobuf::int32 value);
  
  // required int32 m_lClientIP = 12;
  inline bool has_m_lclientip() const;
  inline void clear_m_lclientip();
  static const int kMLClientIPFieldNumber = 12;
  inline ::google::protobuf::int32 m_lclientip() const;
  inline void set_m_lclientip(::google::protobuf::int32 value);
  
  // required int32 m_lGatewayIP = 13;
  inline bool has_m_lgatewayip() const;
  inline void clear_m_lgatewayip();
  static const int kMLGatewayIPFieldNumber = 13;
  inline ::google::protobuf::int32 m_lgatewayip() const;
  inline void set_m_lgatewayip(::google::protobuf::int32 value);
  
  // required int32 m_lMacAddress = 14;
  inline bool has_m_lmacaddress() const;
  inline void clear_m_lmacaddress();
  static const int kMLMacAddressFieldNumber = 14;
  inline ::google::protobuf::int32 m_lmacaddress() const;
  inline void set_m_lmacaddress(::google::protobuf::int32 value);
  
  // required string m_sMobileInfo = 15;
  inline bool has_m_smobileinfo() const;
  inline void clear_m_smobileinfo();
  static const int kMSMobileInfoFieldNumber = 15;
  inline const ::std::string& m_smobileinfo() const;
  inline void set_m_smobileinfo(const ::std::string& value);
  inline void set_m_smobileinfo(const char* value);
  inline void set_m_smobileinfo(const char* value, size_t size);
  inline ::std::string* mutable_m_smobileinfo();
  inline ::std::string* release_m_smobileinfo();
  
  // required string m_sAuthKey = 16;
  inline bool has_m_sauthkey() const;
  inline void clear_m_sauthkey();
  static const int kMSAuthKeyFieldNumber = 16;
  inline const ::std::string& m_sauthkey() const;
  inline void set_m_sauthkey(const ::std::string& value);
  inline void set_m_sauthkey(const char* value);
  inline void set_m_sauthkey(const char* value, size_t size);
  inline ::std::string* mutable_m_sauthkey();
  inline ::std::string* release_m_sauthkey();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._SPUserBaseInfo)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_suserid();
  inline void clear_has_m_suserid();
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_lusc();
  inline void clear_has_m_lusc();
  inline void set_has_m_ljumin();
  inline void clear_has_m_ljumin();
  inline void set_has_m_lfirstusn();
  inline void clear_has_m_lfirstusn();
  inline void set_has_m_lageindex();
  inline void clear_has_m_lageindex();
  inline void set_has_m_ljobindex();
  inline void clear_has_m_ljobindex();
  inline void set_has_m_lregionindex();
  inline void clear_has_m_lregionindex();
  inline void set_has_m_lguildindex();
  inline void clear_has_m_lguildindex();
  inline void set_has_m_lmemberindex();
  inline void clear_has_m_lmemberindex();
  inline void set_has_m_lclientip();
  inline void clear_has_m_lclientip();
  inline void set_has_m_lgatewayip();
  inline void clear_has_m_lgatewayip();
  inline void set_has_m_lmacaddress();
  inline void clear_has_m_lmacaddress();
  inline void set_has_m_smobileinfo();
  inline void clear_has_m_smobileinfo();
  inline void set_has_m_sauthkey();
  inline void clear_has_m_sauthkey();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_suserid_;
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lusc_;
  ::std::string* m_snickname_;
  ::google::protobuf::int32 m_ljumin_;
  ::google::protobuf::int32 m_lfirstusn_;
  ::google::protobuf::int32 m_lageindex_;
  ::google::protobuf::int32 m_ljobindex_;
  ::google::protobuf::int32 m_lregionindex_;
  ::google::protobuf::int32 m_lguildindex_;
  ::google::protobuf::int32 m_lmemberindex_;
  ::google::protobuf::int32 m_lclientip_;
  ::google::protobuf::int32 m_lgatewayip_;
  ::google::protobuf::int32 m_lmacaddress_;
  ::std::string* m_smobileinfo_;
  ::std::string* m_sauthkey_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _SPUserBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_Entry : public ::google::protobuf::Message {
 public:
  _MsgCS_Entry();
  virtual ~_MsgCS_Entry();
  
  _MsgCS_Entry(const _MsgCS_Entry& from);
  
  inline _MsgCS_Entry& operator=(const _MsgCS_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_Entry& default_instance();
  
  void Swap(_MsgCS_Entry* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_Entry& from);
  void MergeFrom(const _MsgCS_Entry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nVersion = 1;
  inline bool has_m_nversion() const;
  inline void clear_m_nversion();
  static const int kMNVersionFieldNumber = 1;
  inline ::google::protobuf::int32 m_nversion() const;
  inline void set_m_nversion(::google::protobuf::int32 value);
  
  // required sint32 m_bWelcomeSound = 2;
  inline bool has_m_bwelcomesound() const;
  inline void clear_m_bwelcomesound();
  static const int kMBWelcomeSoundFieldNumber = 2;
  inline ::google::protobuf::int32 m_bwelcomesound() const;
  inline void set_m_bwelcomesound(::google::protobuf::int32 value);
  
  // required sint32 m_lSoundType = 3;
  inline bool has_m_lsoundtype() const;
  inline void clear_m_lsoundtype();
  static const int kMLSoundTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_lsoundtype() const;
  inline void set_m_lsoundtype(::google::protobuf::int32 value);
  
  // required string m_sNickName = 4;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 4;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required string m_sAvt = 5;
  inline bool has_m_savt() const;
  inline void clear_m_savt();
  static const int kMSAvtFieldNumber = 5;
  inline const ::std::string& m_savt() const;
  inline void set_m_savt(const ::std::string& value);
  inline void set_m_savt(const char* value);
  inline void set_m_savt(const char* value, size_t size);
  inline ::std::string* mutable_m_savt();
  inline ::std::string* release_m_savt();
  
  // required sint32 m_lCLevel = 6;
  inline bool has_m_lclevel() const;
  inline void clear_m_lclevel();
  static const int kMLCLevelFieldNumber = 6;
  inline ::google::protobuf::int32 m_lclevel() const;
  inline void set_m_lclevel(::google::protobuf::int32 value);
  
  // required sint32 m_lSex = 7;
  inline bool has_m_lsex() const;
  inline void clear_m_lsex();
  static const int kMLSexFieldNumber = 7;
  inline ::google::protobuf::int32 m_lsex() const;
  inline void set_m_lsex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_Entry)
 private:
  inline void set_has_m_nversion();
  inline void clear_has_m_nversion();
  inline void set_has_m_bwelcomesound();
  inline void clear_has_m_bwelcomesound();
  inline void set_has_m_lsoundtype();
  inline void clear_has_m_lsoundtype();
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_savt();
  inline void clear_has_m_savt();
  inline void set_has_m_lclevel();
  inline void clear_has_m_lclevel();
  inline void set_has_m_lsex();
  inline void clear_has_m_lsex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nversion_;
  ::google::protobuf::int32 m_bwelcomesound_;
  ::std::string* m_snickname_;
  ::google::protobuf::int32 m_lsoundtype_;
  ::google::protobuf::int32 m_lclevel_;
  ::std::string* m_savt_;
  ::google::protobuf::int32 m_lsex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_Entry* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_Observe : public ::google::protobuf::Message {
 public:
  _MsgCS_Observe();
  virtual ~_MsgCS_Observe();
  
  _MsgCS_Observe(const _MsgCS_Observe& from);
  
  inline _MsgCS_Observe& operator=(const _MsgCS_Observe& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_Observe& default_instance();
  
  void Swap(_MsgCS_Observe* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_Observe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_Observe& from);
  void MergeFrom(const _MsgCS_Observe& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_Observe)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_Observe* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_Start : public ::google::protobuf::Message {
 public:
  _MsgCS_Start();
  virtual ~_MsgCS_Start();
  
  _MsgCS_Start(const _MsgCS_Start& from);
  
  inline _MsgCS_Start& operator=(const _MsgCS_Start& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_Start& default_instance();
  
  void Swap(_MsgCS_Start* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_Start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_Start& from);
  void MergeFrom(const _MsgCS_Start& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_Start)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_Start* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_SelectedCardReq : public ::google::protobuf::Message {
 public:
  _MsgCS_SelectedCardReq();
  virtual ~_MsgCS_SelectedCardReq();
  
  _MsgCS_SelectedCardReq(const _MsgCS_SelectedCardReq& from);
  
  inline _MsgCS_SelectedCardReq& operator=(const _MsgCS_SelectedCardReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_SelectedCardReq& default_instance();
  
  void Swap(_MsgCS_SelectedCardReq* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_SelectedCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_SelectedCardReq& from);
  void MergeFrom(const _MsgCS_SelectedCardReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lCardIdx = 1;
  inline bool has_m_lcardidx() const;
  inline void clear_m_lcardidx();
  static const int kMLCardIdxFieldNumber = 1;
  inline ::google::protobuf::int32 m_lcardidx() const;
  inline void set_m_lcardidx(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_SelectedCardReq)
 private:
  inline void set_has_m_lcardidx();
  inline void clear_has_m_lcardidx();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lcardidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_SelectedCardReq* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_BettingReq : public ::google::protobuf::Message {
 public:
  _MsgCS_BettingReq();
  virtual ~_MsgCS_BettingReq();
  
  _MsgCS_BettingReq(const _MsgCS_BettingReq& from);
  
  inline _MsgCS_BettingReq& operator=(const _MsgCS_BettingReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_BettingReq& default_instance();
  
  void Swap(_MsgCS_BettingReq* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_BettingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_BettingReq& from);
  void MergeFrom(const _MsgCS_BettingReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBetType = 1;
  inline bool has_m_lbettype() const;
  inline void clear_m_lbettype();
  static const int kMLBetTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbettype() const;
  inline void set_m_lbettype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_BettingReq)
 private:
  inline void set_has_m_lbettype();
  inline void clear_has_m_lbettype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbettype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_BettingReq* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_ChoiceRemoveCard : public ::google::protobuf::Message {
 public:
  _MsgCS_ChoiceRemoveCard();
  virtual ~_MsgCS_ChoiceRemoveCard();
  
  _MsgCS_ChoiceRemoveCard(const _MsgCS_ChoiceRemoveCard& from);
  
  inline _MsgCS_ChoiceRemoveCard& operator=(const _MsgCS_ChoiceRemoveCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_ChoiceRemoveCard& default_instance();
  
  void Swap(_MsgCS_ChoiceRemoveCard* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_ChoiceRemoveCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_ChoiceRemoveCard& from);
  void MergeFrom(const _MsgCS_ChoiceRemoveCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nRemoveCardIndex = 2;
  inline bool has_m_nremovecardindex() const;
  inline void clear_m_nremovecardindex();
  static const int kMNRemoveCardIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nremovecardindex() const;
  inline void set_m_nremovecardindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_ChoiceRemoveCard)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nremovecardindex();
  inline void clear_has_m_nremovecardindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nremovecardindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_ChoiceRemoveCard* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_Purge : public ::google::protobuf::Message {
 public:
  _MsgCS_Purge();
  virtual ~_MsgCS_Purge();
  
  _MsgCS_Purge(const _MsgCS_Purge& from);
  
  inline _MsgCS_Purge& operator=(const _MsgCS_Purge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_Purge& default_instance();
  
  void Swap(_MsgCS_Purge* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_Purge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_Purge& from);
  void MergeFrom(const _MsgCS_Purge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // required sint32 m_lPurgeUSN = 2;
  inline bool has_m_lpurgeusn() const;
  inline void clear_m_lpurgeusn();
  static const int kMLPurgeUSNFieldNumber = 2;
  inline ::google::protobuf::int32 m_lpurgeusn() const;
  inline void set_m_lpurgeusn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_Purge)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  inline void set_has_m_lpurgeusn();
  inline void clear_has_m_lpurgeusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ltype_;
  ::google::protobuf::int32 m_lpurgeusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_Purge* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_Abuse : public ::google::protobuf::Message {
 public:
  _MsgCS_Abuse();
  virtual ~_MsgCS_Abuse();
  
  _MsgCS_Abuse(const _MsgCS_Abuse& from);
  
  inline _MsgCS_Abuse& operator=(const _MsgCS_Abuse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_Abuse& default_instance();
  
  void Swap(_MsgCS_Abuse* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_Abuse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_Abuse& from);
  void MergeFrom(const _MsgCS_Abuse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // required string m_sDay = 2;
  inline bool has_m_sday() const;
  inline void clear_m_sday();
  static const int kMSDayFieldNumber = 2;
  inline const ::std::string& m_sday() const;
  inline void set_m_sday(const ::std::string& value);
  inline void set_m_sday(const char* value);
  inline void set_m_sday(const char* value, size_t size);
  inline ::std::string* mutable_m_sday();
  inline ::std::string* release_m_sday();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_Abuse)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  inline void set_has_m_sday();
  inline void clear_has_m_sday();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_sday_;
  ::google::protobuf::int32 m_ltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_Abuse* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_AskPurgeVote : public ::google::protobuf::Message {
 public:
  _MsgCS_AskPurgeVote();
  virtual ~_MsgCS_AskPurgeVote();
  
  _MsgCS_AskPurgeVote(const _MsgCS_AskPurgeVote& from);
  
  inline _MsgCS_AskPurgeVote& operator=(const _MsgCS_AskPurgeVote& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_AskPurgeVote& default_instance();
  
  void Swap(_MsgCS_AskPurgeVote* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_AskPurgeVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_AskPurgeVote& from);
  void MergeFrom(const _MsgCS_AskPurgeVote& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lPurgeUSN = 1;
  inline bool has_m_lpurgeusn() const;
  inline void clear_m_lpurgeusn();
  static const int kMLPurgeUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lpurgeusn() const;
  inline void set_m_lpurgeusn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_AskPurgeVote)
 private:
  inline void set_has_m_lpurgeusn();
  inline void clear_has_m_lpurgeusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lpurgeusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_AskPurgeVote* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_AnswerPurgeVote : public ::google::protobuf::Message {
 public:
  _MsgCS_AnswerPurgeVote();
  virtual ~_MsgCS_AnswerPurgeVote();
  
  _MsgCS_AnswerPurgeVote(const _MsgCS_AnswerPurgeVote& from);
  
  inline _MsgCS_AnswerPurgeVote& operator=(const _MsgCS_AnswerPurgeVote& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_AnswerPurgeVote& default_instance();
  
  void Swap(_MsgCS_AnswerPurgeVote* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_AnswerPurgeVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_AnswerPurgeVote& from);
  void MergeFrom(const _MsgCS_AnswerPurgeVote& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lAnswer = 1;
  inline bool has_m_lanswer() const;
  inline void clear_m_lanswer();
  static const int kMLAnswerFieldNumber = 1;
  inline ::google::protobuf::int32 m_lanswer() const;
  inline void set_m_lanswer(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_AnswerPurgeVote)
 private:
  inline void set_has_m_lanswer();
  inline void clear_has_m_lanswer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lanswer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_AnswerPurgeVote* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_WaitingUserTicketReq : public ::google::protobuf::Message {
 public:
  _MsgCS_WaitingUserTicketReq();
  virtual ~_MsgCS_WaitingUserTicketReq();
  
  _MsgCS_WaitingUserTicketReq(const _MsgCS_WaitingUserTicketReq& from);
  
  inline _MsgCS_WaitingUserTicketReq& operator=(const _MsgCS_WaitingUserTicketReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_WaitingUserTicketReq& default_instance();
  
  void Swap(_MsgCS_WaitingUserTicketReq* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_WaitingUserTicketReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_WaitingUserTicketReq& from);
  void MergeFrom(const _MsgCS_WaitingUserTicketReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nType = 1;
  inline bool has_m_ntype() const;
  inline void clear_m_ntype();
  static const int kMNTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ntype() const;
  inline void set_m_ntype(::google::protobuf::int32 value);
  
  // required sint32 m_bValue = 2;
  inline bool has_m_bvalue() const;
  inline void clear_m_bvalue();
  static const int kMBValueFieldNumber = 2;
  inline ::google::protobuf::int32 m_bvalue() const;
  inline void set_m_bvalue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_WaitingUserTicketReq)
 private:
  inline void set_has_m_ntype();
  inline void clear_has_m_ntype();
  inline void set_has_m_bvalue();
  inline void clear_has_m_bvalue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ntype_;
  ::google::protobuf::int32 m_bvalue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_WaitingUserTicketReq* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_UpdateWaitingUserInfoReq : public ::google::protobuf::Message {
 public:
  _MsgCS_UpdateWaitingUserInfoReq();
  virtual ~_MsgCS_UpdateWaitingUserInfoReq();
  
  _MsgCS_UpdateWaitingUserInfoReq(const _MsgCS_UpdateWaitingUserInfoReq& from);
  
  inline _MsgCS_UpdateWaitingUserInfoReq& operator=(const _MsgCS_UpdateWaitingUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_UpdateWaitingUserInfoReq& default_instance();
  
  void Swap(_MsgCS_UpdateWaitingUserInfoReq* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_UpdateWaitingUserInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_UpdateWaitingUserInfoReq& from);
  void MergeFrom(const _MsgCS_UpdateWaitingUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_UpdateWaitingUserInfoReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_UpdateWaitingUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_SoundType : public ::google::protobuf::Message {
 public:
  _MsgCS_SoundType();
  virtual ~_MsgCS_SoundType();
  
  _MsgCS_SoundType(const _MsgCS_SoundType& from);
  
  inline _MsgCS_SoundType& operator=(const _MsgCS_SoundType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_SoundType& default_instance();
  
  void Swap(_MsgCS_SoundType* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_SoundType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_SoundType& from);
  void MergeFrom(const _MsgCS_SoundType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lSoundType = 1;
  inline bool has_m_lsoundtype() const;
  inline void clear_m_lsoundtype();
  static const int kMLSoundTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_lsoundtype() const;
  inline void set_m_lsoundtype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_SoundType)
 private:
  inline void set_has_m_lsoundtype();
  inline void clear_has_m_lsoundtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lsoundtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_SoundType* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_ExitQue : public ::google::protobuf::Message {
 public:
  _MsgCS_ExitQue();
  virtual ~_MsgCS_ExitQue();
  
  _MsgCS_ExitQue(const _MsgCS_ExitQue& from);
  
  inline _MsgCS_ExitQue& operator=(const _MsgCS_ExitQue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_ExitQue& default_instance();
  
  void Swap(_MsgCS_ExitQue* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_ExitQue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_ExitQue& from);
  void MergeFrom(const _MsgCS_ExitQue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lExit = 1;
  inline bool has_m_lexit() const;
  inline void clear_m_lexit();
  static const int kMLExitFieldNumber = 1;
  inline ::google::protobuf::int32 m_lexit() const;
  inline void set_m_lexit(::google::protobuf::int32 value);
  
  // required sint32 m_bAction = 2;
  inline bool has_m_baction() const;
  inline void clear_m_baction();
  static const int kMBActionFieldNumber = 2;
  inline ::google::protobuf::int32 m_baction() const;
  inline void set_m_baction(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_ExitQue)
 private:
  inline void set_has_m_lexit();
  inline void clear_has_m_lexit();
  inline void set_has_m_baction();
  inline void clear_has_m_baction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lexit_;
  ::google::protobuf::int32 m_baction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_ExitQue* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_Continue : public ::google::protobuf::Message {
 public:
  _MsgCS_Continue();
  virtual ~_MsgCS_Continue();
  
  _MsgCS_Continue(const _MsgCS_Continue& from);
  
  inline _MsgCS_Continue& operator=(const _MsgCS_Continue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_Continue& default_instance();
  
  void Swap(_MsgCS_Continue* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_Continue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_Continue& from);
  void MergeFrom(const _MsgCS_Continue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lExit = 1;
  inline bool has_m_lexit() const;
  inline void clear_m_lexit();
  static const int kMLExitFieldNumber = 1;
  inline ::google::protobuf::int32 m_lexit() const;
  inline void set_m_lexit(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_Continue)
 private:
  inline void set_has_m_lexit();
  inline void clear_has_m_lexit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lexit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_Continue* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_RuleSet : public ::google::protobuf::Message {
 public:
  _MsgCS_RuleSet();
  virtual ~_MsgCS_RuleSet();
  
  _MsgCS_RuleSet(const _MsgCS_RuleSet& from);
  
  inline _MsgCS_RuleSet& operator=(const _MsgCS_RuleSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_RuleSet& default_instance();
  
  void Swap(_MsgCS_RuleSet* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_RuleSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_RuleSet& from);
  void MergeFrom(const _MsgCS_RuleSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nRuleIdx = 1;
  inline bool has_m_nruleidx() const;
  inline void clear_m_nruleidx();
  static const int kMNRuleIdxFieldNumber = 1;
  inline ::google::protobuf::int32 m_nruleidx() const;
  inline void set_m_nruleidx(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_RuleSet)
 private:
  inline void set_has_m_nruleidx();
  inline void clear_has_m_nruleidx();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nruleidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_RuleSet* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_GameMasterCall : public ::google::protobuf::Message {
 public:
  _MsgCS_GameMasterCall();
  virtual ~_MsgCS_GameMasterCall();
  
  _MsgCS_GameMasterCall(const _MsgCS_GameMasterCall& from);
  
  inline _MsgCS_GameMasterCall& operator=(const _MsgCS_GameMasterCall& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_GameMasterCall& default_instance();
  
  void Swap(_MsgCS_GameMasterCall* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_GameMasterCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_GameMasterCall& from);
  void MergeFrom(const _MsgCS_GameMasterCall& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_GameMasterCall)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_GameMasterCall* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_FieldReserved : public ::google::protobuf::Message {
 public:
  _MsgCS_FieldReserved();
  virtual ~_MsgCS_FieldReserved();
  
  _MsgCS_FieldReserved(const _MsgCS_FieldReserved& from);
  
  inline _MsgCS_FieldReserved& operator=(const _MsgCS_FieldReserved& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_FieldReserved& default_instance();
  
  void Swap(_MsgCS_FieldReserved* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_FieldReserved* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_FieldReserved& from);
  void MergeFrom(const _MsgCS_FieldReserved& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nReserved1 = 1;
  inline bool has_m_nreserved1() const;
  inline void clear_m_nreserved1();
  static const int kMNReserved1FieldNumber = 1;
  inline ::google::protobuf::int32 m_nreserved1() const;
  inline void set_m_nreserved1(::google::protobuf::int32 value);
  
  // required int32 m_nReserved2 = 2;
  inline bool has_m_nreserved2() const;
  inline void clear_m_nreserved2();
  static const int kMNReserved2FieldNumber = 2;
  inline ::google::protobuf::int32 m_nreserved2() const;
  inline void set_m_nreserved2(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_FieldReserved)
 private:
  inline void set_has_m_nreserved1();
  inline void clear_has_m_nreserved1();
  inline void set_has_m_nreserved2();
  inline void clear_has_m_nreserved2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nreserved1_;
  ::google::protobuf::int32 m_nreserved2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_FieldReserved* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_JokboSet : public ::google::protobuf::Message {
 public:
  _MsgCS_JokboSet();
  virtual ~_MsgCS_JokboSet();
  
  _MsgCS_JokboSet(const _MsgCS_JokboSet& from);
  
  inline _MsgCS_JokboSet& operator=(const _MsgCS_JokboSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_JokboSet& default_instance();
  
  void Swap(_MsgCS_JokboSet* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_JokboSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_JokboSet& from);
  void MergeFrom(const _MsgCS_JokboSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lKey1 = 1;
  inline bool has_m_lkey1() const;
  inline void clear_m_lkey1();
  static const int kMLKey1FieldNumber = 1;
  inline ::google::protobuf::int32 m_lkey1() const;
  inline void set_m_lkey1(::google::protobuf::int32 value);
  
  // required sint32 m_lKey2 = 2;
  inline bool has_m_lkey2() const;
  inline void clear_m_lkey2();
  static const int kMLKey2FieldNumber = 2;
  inline ::google::protobuf::int32 m_lkey2() const;
  inline void set_m_lkey2(::google::protobuf::int32 value);
  
  // required sint32 m_lKey3 = 3;
  inline bool has_m_lkey3() const;
  inline void clear_m_lkey3();
  static const int kMLKey3FieldNumber = 3;
  inline ::google::protobuf::int32 m_lkey3() const;
  inline void set_m_lkey3(::google::protobuf::int32 value);
  
  // required sint32 m_lKey4 = 4;
  inline bool has_m_lkey4() const;
  inline void clear_m_lkey4();
  static const int kMLKey4FieldNumber = 4;
  inline ::google::protobuf::int32 m_lkey4() const;
  inline void set_m_lkey4(::google::protobuf::int32 value);
  
  // required sint32 m_lKey5 = 5;
  inline bool has_m_lkey5() const;
  inline void clear_m_lkey5();
  static const int kMLKey5FieldNumber = 5;
  inline ::google::protobuf::int32 m_lkey5() const;
  inline void set_m_lkey5(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_JokboSet)
 private:
  inline void set_has_m_lkey1();
  inline void clear_has_m_lkey1();
  inline void set_has_m_lkey2();
  inline void clear_has_m_lkey2();
  inline void set_has_m_lkey3();
  inline void clear_has_m_lkey3();
  inline void set_has_m_lkey4();
  inline void clear_has_m_lkey4();
  inline void set_has_m_lkey5();
  inline void clear_has_m_lkey5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lkey1_;
  ::google::protobuf::int32 m_lkey2_;
  ::google::protobuf::int32 m_lkey3_;
  ::google::protobuf::int32 m_lkey4_;
  ::google::protobuf::int32 m_lkey5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_JokboSet* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_TestKeySetting : public ::google::protobuf::Message {
 public:
  _MsgCS_TestKeySetting();
  virtual ~_MsgCS_TestKeySetting();
  
  _MsgCS_TestKeySetting(const _MsgCS_TestKeySetting& from);
  
  inline _MsgCS_TestKeySetting& operator=(const _MsgCS_TestKeySetting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_TestKeySetting& default_instance();
  
  void Swap(_MsgCS_TestKeySetting* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_TestKeySetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_TestKeySetting& from);
  void MergeFrom(const _MsgCS_TestKeySetting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 m_nChar = 1;
  inline bool has_m_nchar() const;
  inline void clear_m_nchar();
  static const int kMNCharFieldNumber = 1;
  inline ::google::protobuf::uint32 m_nchar() const;
  inline void set_m_nchar(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_TestKeySetting)
 private:
  inline void set_has_m_nchar();
  inline void clear_has_m_nchar();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 m_nchar_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_TestKeySetting* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_CheckNotice : public ::google::protobuf::Message {
 public:
  _MsgCS_CheckNotice();
  virtual ~_MsgCS_CheckNotice();
  
  _MsgCS_CheckNotice(const _MsgCS_CheckNotice& from);
  
  inline _MsgCS_CheckNotice& operator=(const _MsgCS_CheckNotice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_CheckNotice& default_instance();
  
  void Swap(_MsgCS_CheckNotice* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_CheckNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_CheckNotice& from);
  void MergeFrom(const _MsgCS_CheckNotice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nType = 1;
  inline bool has_m_ntype() const;
  inline void clear_m_ntype();
  static const int kMNTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ntype() const;
  inline void set_m_ntype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_CheckNotice)
 private:
  inline void set_has_m_ntype();
  inline void clear_has_m_ntype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_CheckNotice* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_Ack : public ::google::protobuf::Message {
 public:
  _MsgCS_Ack();
  virtual ~_MsgCS_Ack();
  
  _MsgCS_Ack(const _MsgCS_Ack& from);
  
  inline _MsgCS_Ack& operator=(const _MsgCS_Ack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_Ack& default_instance();
  
  void Swap(_MsgCS_Ack* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_Ack& from);
  void MergeFrom(const _MsgCS_Ack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nTagID = 1;
  inline bool has_m_ntagid() const;
  inline void clear_m_ntagid();
  static const int kMNTagIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_ntagid() const;
  inline void set_m_ntagid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_Ack)
 private:
  inline void set_has_m_ntagid();
  inline void clear_has_m_ntagid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ntagid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_Ack* default_instance_;
};
// -------------------------------------------------------------------

class _MsgCS_Ping : public ::google::protobuf::Message {
 public:
  _MsgCS_Ping();
  virtual ~_MsgCS_Ping();
  
  _MsgCS_Ping(const _MsgCS_Ping& from);
  
  inline _MsgCS_Ping& operator=(const _MsgCS_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgCS_Ping& default_instance();
  
  void Swap(_MsgCS_Ping* other);
  
  // implements Message ----------------------------------------------
  
  _MsgCS_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgCS_Ping& from);
  void MergeFrom(const _MsgCS_Ping& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgCS_Ping)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgCS_Ping* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_UserJoinAns : public ::google::protobuf::Message {
 public:
  _MsgSC_UserJoinAns();
  virtual ~_MsgSC_UserJoinAns();
  
  _MsgSC_UserJoinAns(const _MsgSC_UserJoinAns& from);
  
  inline _MsgSC_UserJoinAns& operator=(const _MsgSC_UserJoinAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_UserJoinAns& default_instance();
  
  void Swap(_MsgSC_UserJoinAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_UserJoinAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_UserJoinAns& from);
  void MergeFrom(const _MsgSC_UserJoinAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lState = 1;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required int32 m_nEnter = 2;
  inline bool has_m_nenter() const;
  inline void clear_m_nenter();
  static const int kMNEnterFieldNumber = 2;
  inline ::google::protobuf::int32 m_nenter() const;
  inline void set_m_nenter(::google::protobuf::int32 value);
  
  // required int32 m_nSet = 3;
  inline bool has_m_nset() const;
  inline void clear_m_nset();
  static const int kMNSetFieldNumber = 3;
  inline ::google::protobuf::int32 m_nset() const;
  inline void set_m_nset(::google::protobuf::int32 value);
  
  // required int32 m_lChannel_idx = 4;
  inline bool has_m_lchannel_idx() const;
  inline void clear_m_lchannel_idx();
  static const int kMLChannelIdxFieldNumber = 4;
  inline ::google::protobuf::int32 m_lchannel_idx() const;
  inline void set_m_lchannel_idx(::google::protobuf::int32 value);
  
  // required sint32 m_lOwnerUSN = 5;
  inline bool has_m_lownerusn() const;
  inline void clear_m_lownerusn();
  static const int kMLOwnerUSNFieldNumber = 5;
  inline ::google::protobuf::int32 m_lownerusn() const;
  inline void set_m_lownerusn(::google::protobuf::int32 value);
  
  // required sint32 m_lBossUSN = 6;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 6;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required int32 m_nRoomPurgeCnt = 7;
  inline bool has_m_nroompurgecnt() const;
  inline void clear_m_nroompurgecnt();
  static const int kMNRoomPurgeCntFieldNumber = 7;
  inline ::google::protobuf::int32 m_nroompurgecnt() const;
  inline void set_m_nroompurgecnt(::google::protobuf::int32 value);
  
  // required .Game_Poker._Option m_option = 8;
  inline bool has_m_option() const;
  inline void clear_m_option();
  static const int kMOptionFieldNumber = 8;
  inline const ::Game_Poker::_Option& m_option() const;
  inline ::Game_Poker::_Option* mutable_m_option();
  inline ::Game_Poker::_Option* release_m_option();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_UserJoinAns)
 private:
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_nenter();
  inline void clear_has_m_nenter();
  inline void set_has_m_nset();
  inline void clear_has_m_nset();
  inline void set_has_m_lchannel_idx();
  inline void clear_has_m_lchannel_idx();
  inline void set_has_m_lownerusn();
  inline void clear_has_m_lownerusn();
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_nroompurgecnt();
  inline void clear_has_m_nroompurgecnt();
  inline void set_has_m_option();
  inline void clear_has_m_option();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::int32 m_nenter_;
  ::google::protobuf::int32 m_nset_;
  ::google::protobuf::int32 m_lchannel_idx_;
  ::google::protobuf::int32 m_lownerusn_;
  ::google::protobuf::int32 m_lbossusn_;
  ::Game_Poker::_Option* m_option_;
  ::google::protobuf::int32 m_nroompurgecnt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_UserJoinAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_UserJoinErr : public ::google::protobuf::Message {
 public:
  _MsgSC_UserJoinErr();
  virtual ~_MsgSC_UserJoinErr();
  
  _MsgSC_UserJoinErr(const _MsgSC_UserJoinErr& from);
  
  inline _MsgSC_UserJoinErr& operator=(const _MsgSC_UserJoinErr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_UserJoinErr& default_instance();
  
  void Swap(_MsgSC_UserJoinErr* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_UserJoinErr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_UserJoinErr& from);
  void MergeFrom(const _MsgSC_UserJoinErr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lErrorCode = 2;
  inline bool has_m_lerrorcode() const;
  inline void clear_m_lerrorcode();
  static const int kMLErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lerrorcode() const;
  inline void set_m_lerrorcode(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_UserJoinErr)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lerrorcode();
  inline void clear_has_m_lerrorcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lerrorcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_UserJoinErr* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_UserDisconnect : public ::google::protobuf::Message {
 public:
  _MsgSC_UserDisconnect();
  virtual ~_MsgSC_UserDisconnect();
  
  _MsgSC_UserDisconnect(const _MsgSC_UserDisconnect& from);
  
  inline _MsgSC_UserDisconnect& operator=(const _MsgSC_UserDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_UserDisconnect& default_instance();
  
  void Swap(_MsgSC_UserDisconnect* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_UserDisconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_UserDisconnect& from);
  void MergeFrom(const _MsgSC_UserDisconnect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required .Game_Poker._UserInfo m_uinfo = 2;
  inline bool has_m_uinfo() const;
  inline void clear_m_uinfo();
  static const int kMUinfoFieldNumber = 2;
  inline const ::Game_Poker::_UserInfo& m_uinfo() const;
  inline ::Game_Poker::_UserInfo* mutable_m_uinfo();
  inline ::Game_Poker::_UserInfo* release_m_uinfo();
  
  // required sint32 m_lState = 3;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required sint32 m_lOwnerUSN = 4;
  inline bool has_m_lownerusn() const;
  inline void clear_m_lownerusn();
  static const int kMLOwnerUSNFieldNumber = 4;
  inline ::google::protobuf::int32 m_lownerusn() const;
  inline void set_m_lownerusn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_UserDisconnect)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_uinfo();
  inline void clear_has_m_uinfo();
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_lownerusn();
  inline void clear_has_m_lownerusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Game_Poker::_UserInfo* m_uinfo_;
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::int32 m_lownerusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_UserDisconnect* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_CardData : public ::google::protobuf::Message {
 public:
  _MsgSC_CardData();
  virtual ~_MsgSC_CardData();
  
  _MsgSC_CardData(const _MsgSC_CardData& from);
  
  inline _MsgSC_CardData& operator=(const _MsgSC_CardData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_CardData& default_instance();
  
  void Swap(_MsgSC_CardData* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_CardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_CardData& from);
  void MergeFrom(const _MsgSC_CardData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nDealCnt = 1;
  inline bool has_m_ndealcnt() const;
  inline void clear_m_ndealcnt();
  static const int kMNDealCntFieldNumber = 1;
  inline ::google::protobuf::int32 m_ndealcnt() const;
  inline void set_m_ndealcnt(::google::protobuf::int32 value);
  
  // required sint32 m_lCardsDealt = 2;
  inline bool has_m_lcardsdealt() const;
  inline void clear_m_lcardsdealt();
  static const int kMLCardsDealtFieldNumber = 2;
  inline ::google::protobuf::int32 m_lcardsdealt() const;
  inline void set_m_lcardsdealt(::google::protobuf::int32 value);
  
  // repeated .Game_Poker._Cards m_tblCard = 3;
  inline int m_tblcard_size() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 3;
  inline const ::Game_Poker::_Cards& m_tblcard(int index) const;
  inline ::Game_Poker::_Cards* mutable_m_tblcard(int index);
  inline ::Game_Poker::_Cards* add_m_tblcard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
      m_tblcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
      mutable_m_tblcard();
  
  // repeated .Game_Poker._Money m_tblMoney = 4;
  inline int m_tblmoney_size() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 4;
  inline const ::Game_Poker::_Money& m_tblmoney(int index) const;
  inline ::Game_Poker::_Money* mutable_m_tblmoney(int index);
  inline ::Game_Poker::_Money* add_m_tblmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
      m_tblmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
      mutable_m_tblmoney();
  
  // required sint64 m_llPoolMoney = 5;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_CardData)
 private:
  inline void set_has_m_ndealcnt();
  inline void clear_has_m_ndealcnt();
  inline void set_has_m_lcardsdealt();
  inline void clear_has_m_lcardsdealt();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ndealcnt_;
  ::google::protobuf::int32 m_lcardsdealt_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards > m_tblcard_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money > m_tblmoney_;
  ::google::protobuf::int64 m_llpoolmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_CardData* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_EntryAns : public ::google::protobuf::Message {
 public:
  _MsgSC_EntryAns();
  virtual ~_MsgSC_EntryAns();
  
  _MsgSC_EntryAns(const _MsgSC_EntryAns& from);
  
  inline _MsgSC_EntryAns& operator=(const _MsgSC_EntryAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_EntryAns& default_instance();
  
  void Swap(_MsgSC_EntryAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_EntryAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_EntryAns& from);
  void MergeFrom(const _MsgSC_EntryAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lOwnerUSN = 3;
  inline bool has_m_lownerusn() const;
  inline void clear_m_lownerusn();
  static const int kMLOwnerUSNFieldNumber = 3;
  inline ::google::protobuf::int32 m_lownerusn() const;
  inline void set_m_lownerusn(::google::protobuf::int32 value);
  
  // repeated .Game_Poker._UserInfo m_tblUI = 4;
  inline int m_tblui_size() const;
  inline void clear_m_tblui();
  static const int kMTblUIFieldNumber = 4;
  inline const ::Game_Poker::_UserInfo& m_tblui(int index) const;
  inline ::Game_Poker::_UserInfo* mutable_m_tblui(int index);
  inline ::Game_Poker::_UserInfo* add_m_tblui();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo >&
      m_tblui() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo >*
      mutable_m_tblui();
  
  // repeated .Game_Poker._Money m_tblMoney = 5;
  inline int m_tblmoney_size() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 5;
  inline const ::Game_Poker::_Money& m_tblmoney(int index) const;
  inline ::Game_Poker::_Money* mutable_m_tblmoney(int index);
  inline ::Game_Poker::_Money* add_m_tblmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
      m_tblmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
      mutable_m_tblmoney();
  
  // required sint32 m_bWelcomeSound = 6;
  inline bool has_m_bwelcomesound() const;
  inline void clear_m_bwelcomesound();
  static const int kMBWelcomeSoundFieldNumber = 6;
  inline ::google::protobuf::int32 m_bwelcomesound() const;
  inline void set_m_bwelcomesound(::google::protobuf::int32 value);
  
  // required sint32 m_lObserveCnt = 7;
  inline bool has_m_lobservecnt() const;
  inline void clear_m_lobservecnt();
  static const int kMLObserveCntFieldNumber = 7;
  inline ::google::protobuf::int32 m_lobservecnt() const;
  inline void set_m_lobservecnt(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_EntryAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lownerusn();
  inline void clear_has_m_lownerusn();
  inline void set_has_m_bwelcomesound();
  inline void clear_has_m_bwelcomesound();
  inline void set_has_m_lobservecnt();
  inline void clear_has_m_lobservecnt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo > m_tblui_;
  ::google::protobuf::int32 m_lownerusn_;
  ::google::protobuf::int32 m_bwelcomesound_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money > m_tblmoney_;
  ::google::protobuf::int32 m_lobservecnt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_EntryAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_EntryReject : public ::google::protobuf::Message {
 public:
  _MsgSC_EntryReject();
  virtual ~_MsgSC_EntryReject();
  
  _MsgSC_EntryReject(const _MsgSC_EntryReject& from);
  
  inline _MsgSC_EntryReject& operator=(const _MsgSC_EntryReject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_EntryReject& default_instance();
  
  void Swap(_MsgSC_EntryReject* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_EntryReject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_EntryReject& from);
  void MergeFrom(const _MsgSC_EntryReject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // required sint64 m_llCMoney = 2;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_EntryReject)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int32 m_ltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_EntryReject* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_ObserveAns : public ::google::protobuf::Message {
 public:
  _MsgSC_ObserveAns();
  virtual ~_MsgSC_ObserveAns();
  
  _MsgSC_ObserveAns(const _MsgSC_ObserveAns& from);
  
  inline _MsgSC_ObserveAns& operator=(const _MsgSC_ObserveAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_ObserveAns& default_instance();
  
  void Swap(_MsgSC_ObserveAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_ObserveAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_ObserveAns& from);
  void MergeFrom(const _MsgSC_ObserveAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lOwnerUSN = 3;
  inline bool has_m_lownerusn() const;
  inline void clear_m_lownerusn();
  static const int kMLOwnerUSNFieldNumber = 3;
  inline ::google::protobuf::int32 m_lownerusn() const;
  inline void set_m_lownerusn(::google::protobuf::int32 value);
  
  // required .Game_Poker._UserInfo m_uinfo = 4;
  inline bool has_m_uinfo() const;
  inline void clear_m_uinfo();
  static const int kMUinfoFieldNumber = 4;
  inline const ::Game_Poker::_UserInfo& m_uinfo() const;
  inline ::Game_Poker::_UserInfo* mutable_m_uinfo();
  inline ::Game_Poker::_UserInfo* release_m_uinfo();
  
  // required .Game_Poker._Money m_money = 5;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 5;
  inline const ::Game_Poker::_Money& m_money() const;
  inline ::Game_Poker::_Money* mutable_m_money();
  inline ::Game_Poker::_Money* release_m_money();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_ObserveAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lownerusn();
  inline void clear_has_m_lownerusn();
  inline void set_has_m_uinfo();
  inline void clear_has_m_uinfo();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::Game_Poker::_UserInfo* m_uinfo_;
  ::Game_Poker::_Money* m_money_;
  ::google::protobuf::int32 m_lownerusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_ObserveAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_StartReq : public ::google::protobuf::Message {
 public:
  _MsgSC_StartReq();
  virtual ~_MsgSC_StartReq();
  
  _MsgSC_StartReq(const _MsgSC_StartReq& from);
  
  inline _MsgSC_StartReq& operator=(const _MsgSC_StartReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_StartReq& default_instance();
  
  void Swap(_MsgSC_StartReq* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_StartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_StartReq& from);
  void MergeFrom(const _MsgSC_StartReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_StartReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_StartReq* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_StartAns : public ::google::protobuf::Message {
 public:
  _MsgSC_StartAns();
  virtual ~_MsgSC_StartAns();
  
  _MsgSC_StartAns(const _MsgSC_StartAns& from);
  
  inline _MsgSC_StartAns& operator=(const _MsgSC_StartAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_StartAns& default_instance();
  
  void Swap(_MsgSC_StartAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_StartAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_StartAns& from);
  void MergeFrom(const _MsgSC_StartAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lState = 1;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // repeated sint32 m_vtState = 2;
  inline int m_vtstate_size() const;
  inline void clear_m_vtstate();
  static const int kMVtStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_vtstate(int index) const;
  inline void set_m_vtstate(int index, ::google::protobuf::int32 value);
  inline void add_m_vtstate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtstate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtstate();
  
  // required sint64 m_llSystemTime = 3;
  inline bool has_m_llsystemtime() const;
  inline void clear_m_llsystemtime();
  static const int kMLlSystemTimeFieldNumber = 3;
  inline ::google::protobuf::int64 m_llsystemtime() const;
  inline void set_m_llsystemtime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_StartAns)
 private:
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_llsystemtime();
  inline void clear_has_m_llsystemtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtstate_;
  ::google::protobuf::int64 m_llsystemtime_;
  ::google::protobuf::int32 m_lstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_StartAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_NoStart : public ::google::protobuf::Message {
 public:
  _MsgSC_NoStart();
  virtual ~_MsgSC_NoStart();
  
  _MsgSC_NoStart(const _MsgSC_NoStart& from);
  
  inline _MsgSC_NoStart& operator=(const _MsgSC_NoStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_NoStart& default_instance();
  
  void Swap(_MsgSC_NoStart* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_NoStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_NoStart& from);
  void MergeFrom(const _MsgSC_NoStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_NoStart)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_NoStart* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_DealCards : public ::google::protobuf::Message {
 public:
  _MsgSC_DealCards();
  virtual ~_MsgSC_DealCards();
  
  _MsgSC_DealCards(const _MsgSC_DealCards& from);
  
  inline _MsgSC_DealCards& operator=(const _MsgSC_DealCards& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_DealCards& default_instance();
  
  void Swap(_MsgSC_DealCards* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_DealCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_DealCards& from);
  void MergeFrom(const _MsgSC_DealCards& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBossUSN = 1;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required sint32 m_lState = 2;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required int32 m_nType = 3;
  inline bool has_m_ntype() const;
  inline void clear_m_ntype();
  static const int kMNTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_ntype() const;
  inline void set_m_ntype(::google::protobuf::int32 value);
  
  // repeated .Game_Poker._Cards m_tblCard = 4;
  inline int m_tblcard_size() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 4;
  inline const ::Game_Poker::_Cards& m_tblcard(int index) const;
  inline ::Game_Poker::_Cards* mutable_m_tblcard(int index);
  inline ::Game_Poker::_Cards* add_m_tblcard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
      m_tblcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
      mutable_m_tblcard();
  
  // repeated .Game_Poker._Money m_tblMoney = 5;
  inline int m_tblmoney_size() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 5;
  inline const ::Game_Poker::_Money& m_tblmoney(int index) const;
  inline ::Game_Poker::_Money* mutable_m_tblmoney(int index);
  inline ::Game_Poker::_Money* add_m_tblmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
      m_tblmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
      mutable_m_tblmoney();
  
  // required sint64 m_llPoolMoney = 6;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_DealCards)
 private:
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_ntype();
  inline void clear_has_m_ntype();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards > m_tblcard_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money > m_tblmoney_;
  ::google::protobuf::int64 m_llpoolmoney_;
  ::google::protobuf::int32 m_ntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_DealCards* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_SelectedCardAns : public ::google::protobuf::Message {
 public:
  _MsgSC_SelectedCardAns();
  virtual ~_MsgSC_SelectedCardAns();
  
  _MsgSC_SelectedCardAns(const _MsgSC_SelectedCardAns& from);
  
  inline _MsgSC_SelectedCardAns& operator=(const _MsgSC_SelectedCardAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_SelectedCardAns& default_instance();
  
  void Swap(_MsgSC_SelectedCardAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_SelectedCardAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_SelectedCardAns& from);
  void MergeFrom(const _MsgSC_SelectedCardAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nSelect = 2;
  inline bool has_m_nselect() const;
  inline void clear_m_nselect();
  static const int kMNSelectFieldNumber = 2;
  inline ::google::protobuf::int32 m_nselect() const;
  inline void set_m_nselect(::google::protobuf::int32 value);
  
  // required sint32 m_lCardIndex = 3;
  inline bool has_m_lcardindex() const;
  inline void clear_m_lcardindex();
  static const int kMLCardIndexFieldNumber = 3;
  inline ::google::protobuf::int32 m_lcardindex() const;
  inline void set_m_lcardindex(::google::protobuf::int32 value);
  
  // required sint32 m_lChoiceType = 4;
  inline bool has_m_lchoicetype() const;
  inline void clear_m_lchoicetype();
  static const int kMLChoiceTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_lchoicetype() const;
  inline void set_m_lchoicetype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_SelectedCardAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nselect();
  inline void clear_has_m_nselect();
  inline void set_has_m_lcardindex();
  inline void clear_has_m_lcardindex();
  inline void set_has_m_lchoicetype();
  inline void clear_has_m_lchoicetype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nselect_;
  ::google::protobuf::int32 m_lcardindex_;
  ::google::protobuf::int32 m_lchoicetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_SelectedCardAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_DealOpenCard : public ::google::protobuf::Message {
 public:
  _MsgSC_DealOpenCard();
  virtual ~_MsgSC_DealOpenCard();
  
  _MsgSC_DealOpenCard(const _MsgSC_DealOpenCard& from);
  
  inline _MsgSC_DealOpenCard& operator=(const _MsgSC_DealOpenCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_DealOpenCard& default_instance();
  
  void Swap(_MsgSC_DealOpenCard* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_DealOpenCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_DealOpenCard& from);
  void MergeFrom(const _MsgSC_DealOpenCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lState = 1;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // repeated .Game_Poker._Cards m_tblCard = 2;
  inline int m_tblcard_size() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 2;
  inline const ::Game_Poker::_Cards& m_tblcard(int index) const;
  inline ::Game_Poker::_Cards* mutable_m_tblcard(int index);
  inline ::Game_Poker::_Cards* add_m_tblcard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
      m_tblcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
      mutable_m_tblcard();
  
  // repeated sint32 m_vtState = 3;
  inline int m_vtstate_size() const;
  inline void clear_m_vtstate();
  static const int kMVtStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_vtstate(int index) const;
  inline void set_m_vtstate(int index, ::google::protobuf::int32 value);
  inline void add_m_vtstate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtstate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtstate();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_DealOpenCard)
 private:
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards > m_tblcard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtstate_;
  ::google::protobuf::int32 m_lstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_DealOpenCard* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_DealCard : public ::google::protobuf::Message {
 public:
  _MsgSC_DealCard();
  virtual ~_MsgSC_DealCard();
  
  _MsgSC_DealCard(const _MsgSC_DealCard& from);
  
  inline _MsgSC_DealCard& operator=(const _MsgSC_DealCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_DealCard& default_instance();
  
  void Swap(_MsgSC_DealCard* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_DealCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_DealCard& from);
  void MergeFrom(const _MsgSC_DealCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBossUSN = 1;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required int32 m_nType = 2;
  inline bool has_m_ntype() const;
  inline void clear_m_ntype();
  static const int kMNTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_ntype() const;
  inline void set_m_ntype(::google::protobuf::int32 value);
  
  // required sint32 m_lCardsDealt = 3;
  inline bool has_m_lcardsdealt() const;
  inline void clear_m_lcardsdealt();
  static const int kMLCardsDealtFieldNumber = 3;
  inline ::google::protobuf::int32 m_lcardsdealt() const;
  inline void set_m_lcardsdealt(::google::protobuf::int32 value);
  
  // repeated .Game_Poker._OneCard m_vtOneCard = 4;
  inline int m_vtonecard_size() const;
  inline void clear_m_vtonecard();
  static const int kMVtOneCardFieldNumber = 4;
  inline const ::Game_Poker::_OneCard& m_vtonecard(int index) const;
  inline ::Game_Poker::_OneCard* mutable_m_vtonecard(int index);
  inline ::Game_Poker::_OneCard* add_m_vtonecard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard >&
      m_vtonecard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard >*
      mutable_m_vtonecard();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_DealCard)
 private:
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_ntype();
  inline void clear_has_m_ntype();
  inline void set_has_m_lcardsdealt();
  inline void clear_has_m_lcardsdealt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int32 m_ntype_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard > m_vtonecard_;
  ::google::protobuf::int32 m_lcardsdealt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_DealCard* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_Boss : public ::google::protobuf::Message {
 public:
  _MsgSC_Boss();
  virtual ~_MsgSC_Boss();
  
  _MsgSC_Boss(const _MsgSC_Boss& from);
  
  inline _MsgSC_Boss& operator=(const _MsgSC_Boss& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_Boss& default_instance();
  
  void Swap(_MsgSC_Boss* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_Boss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_Boss& from);
  void MergeFrom(const _MsgSC_Boss& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBossUSN = 1;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required int32 m_nBossRank = 2;
  inline bool has_m_nbossrank() const;
  inline void clear_m_nbossrank();
  static const int kMNBossRankFieldNumber = 2;
  inline ::google::protobuf::int32 m_nbossrank() const;
  inline void set_m_nbossrank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_Boss)
 private:
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_nbossrank();
  inline void clear_has_m_nbossrank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int32 m_nbossrank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_Boss* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_Betting : public ::google::protobuf::Message {
 public:
  _MsgSC_Betting();
  virtual ~_MsgSC_Betting();
  
  _MsgSC_Betting(const _MsgSC_Betting& from);
  
  inline _MsgSC_Betting& operator=(const _MsgSC_Betting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_Betting& default_instance();
  
  void Swap(_MsgSC_Betting* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_Betting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_Betting& from);
  void MergeFrom(const _MsgSC_Betting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBetUSN = 1;
  inline bool has_m_lbetusn() const;
  inline void clear_m_lbetusn();
  static const int kMLBetUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbetusn() const;
  inline void set_m_lbetusn(::google::protobuf::int32 value);
  
  // required sint32 m_lBetBtnType = 2;
  inline bool has_m_lbetbtntype() const;
  inline void clear_m_lbetbtntype();
  static const int kMLBetBtnTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lbetbtntype() const;
  inline void set_m_lbetbtntype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_Betting)
 private:
  inline void set_has_m_lbetusn();
  inline void clear_has_m_lbetusn();
  inline void set_has_m_lbetbtntype();
  inline void clear_has_m_lbetbtntype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbetusn_;
  ::google::protobuf::int32 m_lbetbtntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_Betting* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_BettingAns : public ::google::protobuf::Message {
 public:
  _MsgSC_BettingAns();
  virtual ~_MsgSC_BettingAns();
  
  _MsgSC_BettingAns(const _MsgSC_BettingAns& from);
  
  inline _MsgSC_BettingAns& operator=(const _MsgSC_BettingAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_BettingAns& default_instance();
  
  void Swap(_MsgSC_BettingAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_BettingAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_BettingAns& from);
  void MergeFrom(const _MsgSC_BettingAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nIndex = 1;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 1;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lBetType = 2;
  inline bool has_m_lbettype() const;
  inline void clear_m_lbettype();
  static const int kMLBetTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lbettype() const;
  inline void set_m_lbettype(::google::protobuf::int32 value);
  
  // required .Game_Poker._Money m_money = 3;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 3;
  inline const ::Game_Poker::_Money& m_money() const;
  inline ::Game_Poker::_Money* mutable_m_money();
  inline ::Game_Poker::_Money* release_m_money();
  
  // repeated .Game_Poker._VecMoney m_vtCallMoney = 4;
  inline int m_vtcallmoney_size() const;
  inline void clear_m_vtcallmoney();
  static const int kMVtCallMoneyFieldNumber = 4;
  inline const ::Game_Poker::_VecMoney& m_vtcallmoney(int index) const;
  inline ::Game_Poker::_VecMoney* mutable_m_vtcallmoney(int index);
  inline ::Game_Poker::_VecMoney* add_m_vtcallmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney >&
      m_vtcallmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney >*
      mutable_m_vtcallmoney();
  
  // required sint64 m_lPoolMoney = 5;
  inline bool has_m_lpoolmoney() const;
  inline void clear_m_lpoolmoney();
  static const int kMLPoolMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_lpoolmoney() const;
  inline void set_m_lpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_BettingAns)
 private:
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lbettype();
  inline void clear_has_m_lbettype();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_lpoolmoney();
  inline void clear_has_m_lpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_lbettype_;
  ::Game_Poker::_Money* m_money_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney > m_vtcallmoney_;
  ::google::protobuf::int64 m_lpoolmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_BettingAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_BettingAnsMsg : public ::google::protobuf::Message {
 public:
  _MsgSC_BettingAnsMsg();
  virtual ~_MsgSC_BettingAnsMsg();
  
  _MsgSC_BettingAnsMsg(const _MsgSC_BettingAnsMsg& from);
  
  inline _MsgSC_BettingAnsMsg& operator=(const _MsgSC_BettingAnsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_BettingAnsMsg& default_instance();
  
  void Swap(_MsgSC_BettingAnsMsg* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_BettingAnsMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_BettingAnsMsg& from);
  void MergeFrom(const _MsgSC_BettingAnsMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_BetType = 3;
  inline bool has_m_bettype() const;
  inline void clear_m_bettype();
  static const int kMBetTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_bettype() const;
  inline void set_m_bettype(::google::protobuf::int32 value);
  
  // required sint32 m_bBettingMoney = 4;
  inline bool has_m_bbettingmoney() const;
  inline void clear_m_bbettingmoney();
  static const int kMBBettingMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 m_bbettingmoney() const;
  inline void set_m_bbettingmoney(::google::protobuf::int32 value);
  
  // required sint32 m_bMoneyLack = 5;
  inline bool has_m_bmoneylack() const;
  inline void clear_m_bmoneylack();
  static const int kMBMoneyLackFieldNumber = 5;
  inline ::google::protobuf::int32 m_bmoneylack() const;
  inline void set_m_bmoneylack(::google::protobuf::int32 value);
  
  // required sint32 m_bCallMoneyZero = 6;
  inline bool has_m_bcallmoneyzero() const;
  inline void clear_m_bcallmoneyzero();
  static const int kMBCallMoneyZeroFieldNumber = 6;
  inline ::google::protobuf::int32 m_bcallmoneyzero() const;
  inline void set_m_bcallmoneyzero(::google::protobuf::int32 value);
  
  // required sint64 m_llCallMoney = 7;
  inline bool has_m_llcallmoney() const;
  inline void clear_m_llcallmoney();
  static const int kMLlCallMoneyFieldNumber = 7;
  inline ::google::protobuf::int64 m_llcallmoney() const;
  inline void set_m_llcallmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llRaiseMoney = 8;
  inline bool has_m_llraisemoney() const;
  inline void clear_m_llraisemoney();
  static const int kMLlRaiseMoneyFieldNumber = 8;
  inline ::google::protobuf::int64 m_llraisemoney() const;
  inline void set_m_llraisemoney(::google::protobuf::int64 value);
  
  // required sint64 m_llSideMoney = 9;
  inline bool has_m_llsidemoney() const;
  inline void clear_m_llsidemoney();
  static const int kMLlSideMoneyFieldNumber = 9;
  inline ::google::protobuf::int64 m_llsidemoney() const;
  inline void set_m_llsidemoney(::google::protobuf::int64 value);
  
  // required sint32 m_lBetType = 10;
  inline bool has_m_lbettype() const;
  inline void clear_m_lbettype();
  static const int kMLBetTypeFieldNumber = 10;
  inline ::google::protobuf::int32 m_lbettype() const;
  inline void set_m_lbettype(::google::protobuf::int32 value);
  
  // required sint32 m_lBetTurn = 11;
  inline bool has_m_lbetturn() const;
  inline void clear_m_lbetturn();
  static const int kMLBetTurnFieldNumber = 11;
  inline ::google::protobuf::int32 m_lbetturn() const;
  inline void set_m_lbetturn(::google::protobuf::int32 value);
  
  // required .Game_Poker._Money m_money = 12;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 12;
  inline const ::Game_Poker::_Money& m_money() const;
  inline ::Game_Poker::_Money* mutable_m_money();
  inline ::Game_Poker::_Money* release_m_money();
  
  // repeated .Game_Poker._VecMoney m_vtCallMoney = 13;
  inline int m_vtcallmoney_size() const;
  inline void clear_m_vtcallmoney();
  static const int kMVtCallMoneyFieldNumber = 13;
  inline const ::Game_Poker::_VecMoney& m_vtcallmoney(int index) const;
  inline ::Game_Poker::_VecMoney* mutable_m_vtcallmoney(int index);
  inline ::Game_Poker::_VecMoney* add_m_vtcallmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney >&
      m_vtcallmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney >*
      mutable_m_vtcallmoney();
  
  // required sint64 m_llPoolMoney = 14;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 14;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_BettingAnsMsg)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_bettype();
  inline void clear_has_m_bettype();
  inline void set_has_m_bbettingmoney();
  inline void clear_has_m_bbettingmoney();
  inline void set_has_m_bmoneylack();
  inline void clear_has_m_bmoneylack();
  inline void set_has_m_bcallmoneyzero();
  inline void clear_has_m_bcallmoneyzero();
  inline void set_has_m_llcallmoney();
  inline void clear_has_m_llcallmoney();
  inline void set_has_m_llraisemoney();
  inline void clear_has_m_llraisemoney();
  inline void set_has_m_llsidemoney();
  inline void clear_has_m_llsidemoney();
  inline void set_has_m_lbettype();
  inline void clear_has_m_lbettype();
  inline void set_has_m_lbetturn();
  inline void clear_has_m_lbetturn();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_bettype_;
  ::google::protobuf::int32 m_bbettingmoney_;
  ::google::protobuf::int32 m_bmoneylack_;
  ::google::protobuf::int32 m_bcallmoneyzero_;
  ::google::protobuf::int64 m_llcallmoney_;
  ::google::protobuf::int64 m_llraisemoney_;
  ::google::protobuf::int64 m_llsidemoney_;
  ::google::protobuf::int32 m_lbettype_;
  ::google::protobuf::int32 m_lbetturn_;
  ::Game_Poker::_Money* m_money_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney > m_vtcallmoney_;
  ::google::protobuf::int64 m_llpoolmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_BettingAnsMsg* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_DealHiddenCard : public ::google::protobuf::Message {
 public:
  _MsgSC_DealHiddenCard();
  virtual ~_MsgSC_DealHiddenCard();
  
  _MsgSC_DealHiddenCard(const _MsgSC_DealHiddenCard& from);
  
  inline _MsgSC_DealHiddenCard& operator=(const _MsgSC_DealHiddenCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_DealHiddenCard& default_instance();
  
  void Swap(_MsgSC_DealHiddenCard* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_DealHiddenCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_DealHiddenCard& from);
  void MergeFrom(const _MsgSC_DealHiddenCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBossUSN = 1;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required sint32 m_lCardsDealt = 2;
  inline bool has_m_lcardsdealt() const;
  inline void clear_m_lcardsdealt();
  static const int kMLCardsDealtFieldNumber = 2;
  inline ::google::protobuf::int32 m_lcardsdealt() const;
  inline void set_m_lcardsdealt(::google::protobuf::int32 value);
  
  // repeated .Game_Poker._OneCard m_vtOneCard = 3;
  inline int m_vtonecard_size() const;
  inline void clear_m_vtonecard();
  static const int kMVtOneCardFieldNumber = 3;
  inline const ::Game_Poker::_OneCard& m_vtonecard(int index) const;
  inline ::Game_Poker::_OneCard* mutable_m_vtonecard(int index);
  inline ::Game_Poker::_OneCard* add_m_vtonecard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard >&
      m_vtonecard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard >*
      mutable_m_vtonecard();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_DealHiddenCard)
 private:
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_lcardsdealt();
  inline void clear_has_m_lcardsdealt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int32 m_lcardsdealt_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard > m_vtonecard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_DealHiddenCard* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_AnteMoney : public ::google::protobuf::Message {
 public:
  _MsgSC_AnteMoney();
  virtual ~_MsgSC_AnteMoney();
  
  _MsgSC_AnteMoney(const _MsgSC_AnteMoney& from);
  
  inline _MsgSC_AnteMoney& operator=(const _MsgSC_AnteMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_AnteMoney& default_instance();
  
  void Swap(_MsgSC_AnteMoney* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_AnteMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_AnteMoney& from);
  void MergeFrom(const _MsgSC_AnteMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llAnteMoney = 1;
  inline bool has_m_llantemoney() const;
  inline void clear_m_llantemoney();
  static const int kMLlAnteMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 m_llantemoney() const;
  inline void set_m_llantemoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_AnteMoney)
 private:
  inline void set_has_m_llantemoney();
  inline void clear_has_m_llantemoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llantemoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_AnteMoney* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_RuleQuaterHalf : public ::google::protobuf::Message {
 public:
  _MsgSC_RuleQuaterHalf();
  virtual ~_MsgSC_RuleQuaterHalf();
  
  _MsgSC_RuleQuaterHalf(const _MsgSC_RuleQuaterHalf& from);
  
  inline _MsgSC_RuleQuaterHalf& operator=(const _MsgSC_RuleQuaterHalf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_RuleQuaterHalf& default_instance();
  
  void Swap(_MsgSC_RuleQuaterHalf* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_RuleQuaterHalf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_RuleQuaterHalf& from);
  void MergeFrom(const _MsgSC_RuleQuaterHalf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llRuleQuaterHalf = 1;
  inline bool has_m_llrulequaterhalf() const;
  inline void clear_m_llrulequaterhalf();
  static const int kMLlRuleQuaterHalfFieldNumber = 1;
  inline ::google::protobuf::int64 m_llrulequaterhalf() const;
  inline void set_m_llrulequaterhalf(::google::protobuf::int64 value);
  
  // required sint64 m_llPoolMoney = 2;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_RuleQuaterHalf)
 private:
  inline void set_has_m_llrulequaterhalf();
  inline void clear_has_m_llrulequaterhalf();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llrulequaterhalf_;
  ::google::protobuf::int64 m_llpoolmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_RuleQuaterHalf* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_Finished : public ::google::protobuf::Message {
 public:
  _MsgSC_Finished();
  virtual ~_MsgSC_Finished();
  
  _MsgSC_Finished(const _MsgSC_Finished& from);
  
  inline _MsgSC_Finished& operator=(const _MsgSC_Finished& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_Finished& default_instance();
  
  void Swap(_MsgSC_Finished* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_Finished* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_Finished& from);
  void MergeFrom(const _MsgSC_Finished& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lState = 1;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required sint32 m_bGiveUp = 2;
  inline bool has_m_bgiveup() const;
  inline void clear_m_bgiveup();
  static const int kMBGiveUpFieldNumber = 2;
  inline ::google::protobuf::int32 m_bgiveup() const;
  inline void set_m_bgiveup(::google::protobuf::int32 value);
  
  // required sint32 m_lRank = 3;
  inline bool has_m_lrank() const;
  inline void clear_m_lrank();
  static const int kMLRankFieldNumber = 3;
  inline ::google::protobuf::int32 m_lrank() const;
  inline void set_m_lrank(::google::protobuf::int32 value);
  
  // required sint32 m_lBossUSN = 4;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 4;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required sint64 m_llGiveMoney = 5;
  inline bool has_m_llgivemoney() const;
  inline void clear_m_llgivemoney();
  static const int kMLlGiveMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_llgivemoney() const;
  inline void set_m_llgivemoney(::google::protobuf::int64 value);
  
  // repeated int32 m_vtWin = 6;
  inline int m_vtwin_size() const;
  inline void clear_m_vtwin();
  static const int kMVtWinFieldNumber = 6;
  inline ::google::protobuf::int32 m_vtwin(int index) const;
  inline void set_m_vtwin(int index, ::google::protobuf::int32 value);
  inline void add_m_vtwin(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtwin() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtwin();
  
  // repeated int32 m_vtResult = 7;
  inline int m_vtresult_size() const;
  inline void clear_m_vtresult();
  static const int kMVtResultFieldNumber = 7;
  inline ::google::protobuf::int32 m_vtresult(int index) const;
  inline void set_m_vtresult(int index, ::google::protobuf::int32 value);
  inline void add_m_vtresult(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtresult() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtresult();
  
  // repeated sint64 m_vtGiveMoney = 8;
  inline int m_vtgivemoney_size() const;
  inline void clear_m_vtgivemoney();
  static const int kMVtGiveMoneyFieldNumber = 8;
  inline ::google::protobuf::int64 m_vtgivemoney(int index) const;
  inline void set_m_vtgivemoney(int index, ::google::protobuf::int64 value);
  inline void add_m_vtgivemoney(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      m_vtgivemoney() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_m_vtgivemoney();
  
  // repeated .Game_Poker._Cards m_tblCard = 9;
  inline int m_tblcard_size() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 9;
  inline const ::Game_Poker::_Cards& m_tblcard(int index) const;
  inline ::Game_Poker::_Cards* mutable_m_tblcard(int index);
  inline ::Game_Poker::_Cards* add_m_tblcard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
      m_tblcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
      mutable_m_tblcard();
  
  // repeated .Game_Poker._Money m_tblMoney = 10;
  inline int m_tblmoney_size() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 10;
  inline const ::Game_Poker::_Money& m_tblmoney(int index) const;
  inline ::Game_Poker::_Money* mutable_m_tblmoney(int index);
  inline ::Game_Poker::_Money* add_m_tblmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
      m_tblmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
      mutable_m_tblmoney();
  
  // required sint64 m_llPoolMoney = 11;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
  inline int m_vtusermoney_size() const;
  inline void clear_m_vtusermoney();
  static const int kMVtUserMoneyFieldNumber = 12;
  inline const ::Game_Poker::UserMoney& m_vtusermoney(int index) const;
  inline ::Game_Poker::UserMoney* mutable_m_vtusermoney(int index);
  inline ::Game_Poker::UserMoney* add_m_vtusermoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney >&
      m_vtusermoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney >*
      mutable_m_vtusermoney();
  
  // required sint32 m_lResultIdx = 13;
  inline bool has_m_lresultidx() const;
  inline void clear_m_lresultidx();
  static const int kMLResultIdxFieldNumber = 13;
  inline ::google::protobuf::int32 m_lresultidx() const;
  inline void set_m_lresultidx(::google::protobuf::int32 value);
  
  // required sint64 m_llJackpot = 14;
  inline bool has_m_lljackpot() const;
  inline void clear_m_lljackpot();
  static const int kMLlJackpotFieldNumber = 14;
  inline ::google::protobuf::int64 m_lljackpot() const;
  inline void set_m_lljackpot(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_Finished)
 private:
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_bgiveup();
  inline void clear_has_m_bgiveup();
  inline void set_has_m_lrank();
  inline void clear_has_m_lrank();
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_llgivemoney();
  inline void clear_has_m_llgivemoney();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  inline void set_has_m_lresultidx();
  inline void clear_has_m_lresultidx();
  inline void set_has_m_lljackpot();
  inline void clear_has_m_lljackpot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::int32 m_bgiveup_;
  ::google::protobuf::int32 m_lrank_;
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int64 m_llgivemoney_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtwin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtresult_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > m_vtgivemoney_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards > m_tblcard_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money > m_tblmoney_;
  ::google::protobuf::int64 m_llpoolmoney_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney > m_vtusermoney_;
  ::google::protobuf::int64 m_lljackpot_;
  ::google::protobuf::int32 m_lresultidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_Finished* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_NewGame : public ::google::protobuf::Message {
 public:
  _MsgSC_NewGame();
  virtual ~_MsgSC_NewGame();
  
  _MsgSC_NewGame(const _MsgSC_NewGame& from);
  
  inline _MsgSC_NewGame& operator=(const _MsgSC_NewGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_NewGame& default_instance();
  
  void Swap(_MsgSC_NewGame* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_NewGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_NewGame& from);
  void MergeFrom(const _MsgSC_NewGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
  inline int m_vtwinloseinfo_size() const;
  inline void clear_m_vtwinloseinfo();
  static const int kMVtWinLoseInfoFieldNumber = 1;
  inline const ::Game_Poker::_WinLoseInfo& m_vtwinloseinfo(int index) const;
  inline ::Game_Poker::_WinLoseInfo* mutable_m_vtwinloseinfo(int index);
  inline ::Game_Poker::_WinLoseInfo* add_m_vtwinloseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo >&
      m_vtwinloseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo >*
      mutable_m_vtwinloseinfo();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_NewGame)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo > m_vtwinloseinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_NewGame* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_ContinueAns : public ::google::protobuf::Message {
 public:
  _MsgSC_ContinueAns();
  virtual ~_MsgSC_ContinueAns();
  
  _MsgSC_ContinueAns(const _MsgSC_ContinueAns& from);
  
  inline _MsgSC_ContinueAns& operator=(const _MsgSC_ContinueAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_ContinueAns& default_instance();
  
  void Swap(_MsgSC_ContinueAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_ContinueAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_ContinueAns& from);
  void MergeFrom(const _MsgSC_ContinueAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_ContinueAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_ContinueAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_Continue : public ::google::protobuf::Message {
 public:
  _MsgSC_Continue();
  virtual ~_MsgSC_Continue();
  
  _MsgSC_Continue(const _MsgSC_Continue& from);
  
  inline _MsgSC_Continue& operator=(const _MsgSC_Continue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_Continue& default_instance();
  
  void Swap(_MsgSC_Continue* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_Continue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_Continue& from);
  void MergeFrom(const _MsgSC_Continue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
  inline int m_vtwinloseinfo_size() const;
  inline void clear_m_vtwinloseinfo();
  static const int kMVtWinLoseInfoFieldNumber = 1;
  inline const ::Game_Poker::_WinLoseInfo& m_vtwinloseinfo(int index) const;
  inline ::Game_Poker::_WinLoseInfo* mutable_m_vtwinloseinfo(int index);
  inline ::Game_Poker::_WinLoseInfo* add_m_vtwinloseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo >&
      m_vtwinloseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo >*
      mutable_m_vtwinloseinfo();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_Continue)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo > m_vtwinloseinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_Continue* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_SystemMsg : public ::google::protobuf::Message {
 public:
  _MsgSC_SystemMsg();
  virtual ~_MsgSC_SystemMsg();
  
  _MsgSC_SystemMsg(const _MsgSC_SystemMsg& from);
  
  inline _MsgSC_SystemMsg& operator=(const _MsgSC_SystemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_SystemMsg& default_instance();
  
  void Swap(_MsgSC_SystemMsg* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_SystemMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_SystemMsg& from);
  void MergeFrom(const _MsgSC_SystemMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_SystemMsg)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_SystemMsg* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_PurgeAns : public ::google::protobuf::Message {
 public:
  _MsgSC_PurgeAns();
  virtual ~_MsgSC_PurgeAns();
  
  _MsgSC_PurgeAns(const _MsgSC_PurgeAns& from);
  
  inline _MsgSC_PurgeAns& operator=(const _MsgSC_PurgeAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_PurgeAns& default_instance();
  
  void Swap(_MsgSC_PurgeAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_PurgeAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_PurgeAns& from);
  void MergeFrom(const _MsgSC_PurgeAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_PurgeAns)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_PurgeAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_PurgeInfo : public ::google::protobuf::Message {
 public:
  _MsgSC_PurgeInfo();
  virtual ~_MsgSC_PurgeInfo();
  
  _MsgSC_PurgeInfo(const _MsgSC_PurgeInfo& from);
  
  inline _MsgSC_PurgeInfo& operator=(const _MsgSC_PurgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_PurgeInfo& default_instance();
  
  void Swap(_MsgSC_PurgeInfo* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_PurgeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_PurgeInfo& from);
  void MergeFrom(const _MsgSC_PurgeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker._VecUSN m_vtPurgeUSN = 1;
  inline int m_vtpurgeusn_size() const;
  inline void clear_m_vtpurgeusn();
  static const int kMVtPurgeUSNFieldNumber = 1;
  inline const ::Game_Poker::_VecUSN& m_vtpurgeusn(int index) const;
  inline ::Game_Poker::_VecUSN* mutable_m_vtpurgeusn(int index);
  inline ::Game_Poker::_VecUSN* add_m_vtpurgeusn();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecUSN >&
      m_vtpurgeusn() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecUSN >*
      mutable_m_vtpurgeusn();
  
  // required int32 m_nCount = 2;
  inline bool has_m_ncount() const;
  inline void clear_m_ncount();
  static const int kMNCountFieldNumber = 2;
  inline ::google::protobuf::int32 m_ncount() const;
  inline void set_m_ncount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_PurgeInfo)
 private:
  inline void set_has_m_ncount();
  inline void clear_has_m_ncount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecUSN > m_vtpurgeusn_;
  ::google::protobuf::int32 m_ncount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_PurgeInfo* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_SetPurgeMoney : public ::google::protobuf::Message {
 public:
  _MsgSC_SetPurgeMoney();
  virtual ~_MsgSC_SetPurgeMoney();
  
  _MsgSC_SetPurgeMoney(const _MsgSC_SetPurgeMoney& from);
  
  inline _MsgSC_SetPurgeMoney& operator=(const _MsgSC_SetPurgeMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_SetPurgeMoney& default_instance();
  
  void Swap(_MsgSC_SetPurgeMoney* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_SetPurgeMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_SetPurgeMoney& from);
  void MergeFrom(const _MsgSC_SetPurgeMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required .Game_Poker._Money m_money = 2;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 2;
  inline const ::Game_Poker::_Money& m_money() const;
  inline ::Game_Poker::_Money* mutable_m_money();
  inline ::Game_Poker::_Money* release_m_money();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_SetPurgeMoney)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Game_Poker::_Money* m_money_;
  ::google::protobuf::int32 m_lusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_SetPurgeMoney* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_AssaItemNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_AssaItemNotify();
  virtual ~_MsgSC_AssaItemNotify();
  
  _MsgSC_AssaItemNotify(const _MsgSC_AssaItemNotify& from);
  
  inline _MsgSC_AssaItemNotify& operator=(const _MsgSC_AssaItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_AssaItemNotify& default_instance();
  
  void Swap(_MsgSC_AssaItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_AssaItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_AssaItemNotify& from);
  void MergeFrom(const _MsgSC_AssaItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lRankType = 2;
  inline bool has_m_lranktype() const;
  inline void clear_m_lranktype();
  static const int kMLRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lranktype() const;
  inline void set_m_lranktype(::google::protobuf::int32 value);
  
  // required string m_sItem = 3;
  inline bool has_m_sitem() const;
  inline void clear_m_sitem();
  static const int kMSItemFieldNumber = 3;
  inline const ::std::string& m_sitem() const;
  inline void set_m_sitem(const ::std::string& value);
  inline void set_m_sitem(const char* value);
  inline void set_m_sitem(const char* value, size_t size);
  inline ::std::string* mutable_m_sitem();
  inline ::std::string* release_m_sitem();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_AssaItemNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lranktype();
  inline void clear_has_m_lranktype();
  inline void set_has_m_sitem();
  inline void clear_has_m_sitem();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lranktype_;
  ::std::string* m_sitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_AssaItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_ThankYouItemNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_ThankYouItemNotify();
  virtual ~_MsgSC_ThankYouItemNotify();
  
  _MsgSC_ThankYouItemNotify(const _MsgSC_ThankYouItemNotify& from);
  
  inline _MsgSC_ThankYouItemNotify& operator=(const _MsgSC_ThankYouItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_ThankYouItemNotify& default_instance();
  
  void Swap(_MsgSC_ThankYouItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_ThankYouItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_ThankYouItemNotify& from);
  void MergeFrom(const _MsgSC_ThankYouItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lRankType = 2;
  inline bool has_m_lranktype() const;
  inline void clear_m_lranktype();
  static const int kMLRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lranktype() const;
  inline void set_m_lranktype(::google::protobuf::int32 value);
  
  // required sint64 m_llBasicDDangMoney = 3;
  inline bool has_m_llbasicddangmoney() const;
  inline void clear_m_llbasicddangmoney();
  static const int kMLlBasicDDangMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llbasicddangmoney() const;
  inline void set_m_llbasicddangmoney(::google::protobuf::int64 value);
  
  // required string m_sItem = 4;
  inline bool has_m_sitem() const;
  inline void clear_m_sitem();
  static const int kMSItemFieldNumber = 4;
  inline const ::std::string& m_sitem() const;
  inline void set_m_sitem(const ::std::string& value);
  inline void set_m_sitem(const char* value);
  inline void set_m_sitem(const char* value, size_t size);
  inline ::std::string* mutable_m_sitem();
  inline ::std::string* release_m_sitem();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_ThankYouItemNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lranktype();
  inline void clear_has_m_lranktype();
  inline void set_has_m_llbasicddangmoney();
  inline void clear_has_m_llbasicddangmoney();
  inline void set_has_m_sitem();
  inline void clear_has_m_sitem();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lranktype_;
  ::google::protobuf::int64 m_llbasicddangmoney_;
  ::std::string* m_sitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_ThankYouItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_MadeItemNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_MadeItemNotify();
  virtual ~_MsgSC_MadeItemNotify();
  
  _MsgSC_MadeItemNotify(const _MsgSC_MadeItemNotify& from);
  
  inline _MsgSC_MadeItemNotify& operator=(const _MsgSC_MadeItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_MadeItemNotify& default_instance();
  
  void Swap(_MsgSC_MadeItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_MadeItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_MadeItemNotify& from);
  void MergeFrom(const _MsgSC_MadeItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lRankType = 2;
  inline bool has_m_lranktype() const;
  inline void clear_m_lranktype();
  static const int kMLRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lranktype() const;
  inline void set_m_lranktype(::google::protobuf::int32 value);
  
  // required string m_sItem = 3;
  inline bool has_m_sitem() const;
  inline void clear_m_sitem();
  static const int kMSItemFieldNumber = 3;
  inline const ::std::string& m_sitem() const;
  inline void set_m_sitem(const ::std::string& value);
  inline void set_m_sitem(const char* value);
  inline void set_m_sitem(const char* value, size_t size);
  inline ::std::string* mutable_m_sitem();
  inline ::std::string* release_m_sitem();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_MadeItemNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lranktype();
  inline void clear_has_m_lranktype();
  inline void set_has_m_sitem();
  inline void clear_has_m_sitem();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lranktype_;
  ::std::string* m_sitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_MadeItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_ExtMoneyNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_ExtMoneyNotify();
  virtual ~_MsgSC_ExtMoneyNotify();
  
  _MsgSC_ExtMoneyNotify(const _MsgSC_ExtMoneyNotify& from);
  
  inline _MsgSC_ExtMoneyNotify& operator=(const _MsgSC_ExtMoneyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_ExtMoneyNotify& default_instance();
  
  void Swap(_MsgSC_ExtMoneyNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_ExtMoneyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_ExtMoneyNotify& from);
  void MergeFrom(const _MsgSC_ExtMoneyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_bExtType = 2;
  inline bool has_m_bexttype() const;
  inline void clear_m_bexttype();
  static const int kMBExtTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_bexttype() const;
  inline void set_m_bexttype(::google::protobuf::int32 value);
  
  // required sint64 m_llCMoney = 3;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llCashBox = 4;
  inline bool has_m_llcashbox() const;
  inline void clear_m_llcashbox();
  static const int kMLlCashBoxFieldNumber = 4;
  inline ::google::protobuf::int64 m_llcashbox() const;
  inline void set_m_llcashbox(::google::protobuf::int64 value);
  
  // required sint64 m_llExtMoney = 5;
  inline bool has_m_llextmoney() const;
  inline void clear_m_llextmoney();
  static const int kMLlExtMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_llextmoney() const;
  inline void set_m_llextmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llExtDate = 6;
  inline bool has_m_llextdate() const;
  inline void clear_m_llextdate();
  static const int kMLlExtDateFieldNumber = 6;
  inline ::google::protobuf::int64 m_llextdate() const;
  inline void set_m_llextdate(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_ExtMoneyNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_bexttype();
  inline void clear_has_m_bexttype();
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  inline void set_has_m_llcashbox();
  inline void clear_has_m_llcashbox();
  inline void set_has_m_llextmoney();
  inline void clear_has_m_llextmoney();
  inline void set_has_m_llextdate();
  inline void clear_has_m_llextdate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_bexttype_;
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int64 m_llcashbox_;
  ::google::protobuf::int64 m_llextmoney_;
  ::google::protobuf::int64 m_llextdate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_ExtMoneyNotify* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_GameEndSystemMsg : public ::google::protobuf::Message {
 public:
  _MsgSC_GameEndSystemMsg();
  virtual ~_MsgSC_GameEndSystemMsg();
  
  _MsgSC_GameEndSystemMsg(const _MsgSC_GameEndSystemMsg& from);
  
  inline _MsgSC_GameEndSystemMsg& operator=(const _MsgSC_GameEndSystemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_GameEndSystemMsg& default_instance();
  
  void Swap(_MsgSC_GameEndSystemMsg* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_GameEndSystemMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_GameEndSystemMsg& from);
  void MergeFrom(const _MsgSC_GameEndSystemMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // required sint32 m_lUSN = 2;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 2;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_bGiveUp = 3;
  inline bool has_m_bgiveup() const;
  inline void clear_m_bgiveup();
  static const int kMBGiveUpFieldNumber = 3;
  inline ::google::protobuf::int32 m_bgiveup() const;
  inline void set_m_bgiveup(::google::protobuf::int32 value);
  
  // required sint64 m_llMoney = 4;
  inline bool has_m_llmoney() const;
  inline void clear_m_llmoney();
  static const int kMLlMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 m_llmoney() const;
  inline void set_m_llmoney(::google::protobuf::int64 value);
  
  // required string m_sMsg = 5;
  inline bool has_m_smsg() const;
  inline void clear_m_smsg();
  static const int kMSMsgFieldNumber = 5;
  inline const ::std::string& m_smsg() const;
  inline void set_m_smsg(const ::std::string& value);
  inline void set_m_smsg(const char* value);
  inline void set_m_smsg(const char* value, size_t size);
  inline ::std::string* mutable_m_smsg();
  inline ::std::string* release_m_smsg();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_GameEndSystemMsg)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_bgiveup();
  inline void clear_has_m_bgiveup();
  inline void set_has_m_llmoney();
  inline void clear_has_m_llmoney();
  inline void set_has_m_smsg();
  inline void clear_has_m_smsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ltype_;
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int64 m_llmoney_;
  ::std::string* m_smsg_;
  ::google::protobuf::int32 m_bgiveup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_GameEndSystemMsg* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_ChangeAvatarNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_ChangeAvatarNotify();
  virtual ~_MsgSC_ChangeAvatarNotify();
  
  _MsgSC_ChangeAvatarNotify(const _MsgSC_ChangeAvatarNotify& from);
  
  inline _MsgSC_ChangeAvatarNotify& operator=(const _MsgSC_ChangeAvatarNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_ChangeAvatarNotify& default_instance();
  
  void Swap(_MsgSC_ChangeAvatarNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_ChangeAvatarNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_ChangeAvatarNotify& from);
  void MergeFrom(const _MsgSC_ChangeAvatarNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required .Game_Poker._UserInfo m_uinfo = 3;
  inline bool has_m_uinfo() const;
  inline void clear_m_uinfo();
  static const int kMUinfoFieldNumber = 3;
  inline const ::Game_Poker::_UserInfo& m_uinfo() const;
  inline ::Game_Poker::_UserInfo* mutable_m_uinfo();
  inline ::Game_Poker::_UserInfo* release_m_uinfo();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_ChangeAvatarNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_uinfo();
  inline void clear_has_m_uinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::Game_Poker::_UserInfo* m_uinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_ChangeAvatarNotify* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_AbuseAns : public ::google::protobuf::Message {
 public:
  _MsgSC_AbuseAns();
  virtual ~_MsgSC_AbuseAns();
  
  _MsgSC_AbuseAns(const _MsgSC_AbuseAns& from);
  
  inline _MsgSC_AbuseAns& operator=(const _MsgSC_AbuseAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_AbuseAns& default_instance();
  
  void Swap(_MsgSC_AbuseAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_AbuseAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_AbuseAns& from);
  void MergeFrom(const _MsgSC_AbuseAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_AbuseAns)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_AbuseAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_SoundTypeAns : public ::google::protobuf::Message {
 public:
  _MsgSC_SoundTypeAns();
  virtual ~_MsgSC_SoundTypeAns();
  
  _MsgSC_SoundTypeAns(const _MsgSC_SoundTypeAns& from);
  
  inline _MsgSC_SoundTypeAns& operator=(const _MsgSC_SoundTypeAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_SoundTypeAns& default_instance();
  
  void Swap(_MsgSC_SoundTypeAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_SoundTypeAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_SoundTypeAns& from);
  void MergeFrom(const _MsgSC_SoundTypeAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lSoundType = 3;
  inline bool has_m_lsoundtype() const;
  inline void clear_m_lsoundtype();
  static const int kMLSoundTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_lsoundtype() const;
  inline void set_m_lsoundtype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_SoundTypeAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lsoundtype();
  inline void clear_has_m_lsoundtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_lsoundtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_SoundTypeAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_FMoney : public ::google::protobuf::Message {
 public:
  _MsgSC_FMoney();
  virtual ~_MsgSC_FMoney();
  
  _MsgSC_FMoney(const _MsgSC_FMoney& from);
  
  inline _MsgSC_FMoney& operator=(const _MsgSC_FMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_FMoney& default_instance();
  
  void Swap(_MsgSC_FMoney* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_FMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_FMoney& from);
  void MergeFrom(const _MsgSC_FMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string m_sFMoney = 1;
  inline bool has_m_sfmoney() const;
  inline void clear_m_sfmoney();
  static const int kMSFMoneyFieldNumber = 1;
  inline const ::std::string& m_sfmoney() const;
  inline void set_m_sfmoney(const ::std::string& value);
  inline void set_m_sfmoney(const char* value);
  inline void set_m_sfmoney(const char* value, size_t size);
  inline ::std::string* mutable_m_sfmoney();
  inline ::std::string* release_m_sfmoney();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_FMoney)
 private:
  inline void set_has_m_sfmoney();
  inline void clear_has_m_sfmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_sfmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_FMoney* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_ItemNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_ItemNotify();
  virtual ~_MsgSC_ItemNotify();
  
  _MsgSC_ItemNotify(const _MsgSC_ItemNotify& from);
  
  inline _MsgSC_ItemNotify& operator=(const _MsgSC_ItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_ItemNotify& default_instance();
  
  void Swap(_MsgSC_ItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_ItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_ItemNotify& from);
  void MergeFrom(const _MsgSC_ItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lLimitTotalCnt = 1;
  inline bool has_m_llimittotalcnt() const;
  inline void clear_m_llimittotalcnt();
  static const int kMLLimitTotalCntFieldNumber = 1;
  inline ::google::protobuf::int32 m_llimittotalcnt() const;
  inline void set_m_llimittotalcnt(::google::protobuf::int32 value);
  
  // required sint32 m_lLimitTodayCnt = 2;
  inline bool has_m_llimittodaycnt() const;
  inline void clear_m_llimittodaycnt();
  static const int kMLLimitTodayCntFieldNumber = 2;
  inline ::google::protobuf::int32 m_llimittodaycnt() const;
  inline void set_m_llimittodaycnt(::google::protobuf::int32 value);
  
  // required sint32 m_bInfinitySpeedItem = 3;
  inline bool has_m_binfinityspeeditem() const;
  inline void clear_m_binfinityspeeditem();
  static const int kMBInfinitySpeedItemFieldNumber = 3;
  inline ::google::protobuf::int32 m_binfinityspeeditem() const;
  inline void set_m_binfinityspeeditem(::google::protobuf::int32 value);
  
  // required sint64 m_llSpeedToTime = 4;
  inline bool has_m_llspeedtotime() const;
  inline void clear_m_llspeedtotime();
  static const int kMLlSpeedToTimeFieldNumber = 4;
  inline ::google::protobuf::int64 m_llspeedtotime() const;
  inline void set_m_llspeedtotime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_ItemNotify)
 private:
  inline void set_has_m_llimittotalcnt();
  inline void clear_has_m_llimittotalcnt();
  inline void set_has_m_llimittodaycnt();
  inline void clear_has_m_llimittodaycnt();
  inline void set_has_m_binfinityspeeditem();
  inline void clear_has_m_binfinityspeeditem();
  inline void set_has_m_llspeedtotime();
  inline void clear_has_m_llspeedtotime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_llimittotalcnt_;
  ::google::protobuf::int32 m_llimittodaycnt_;
  ::google::protobuf::int64 m_llspeedtotime_;
  ::google::protobuf::int32 m_binfinityspeeditem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_ItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_DisconnectMoneyNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_DisconnectMoneyNotify();
  virtual ~_MsgSC_DisconnectMoneyNotify();
  
  _MsgSC_DisconnectMoneyNotify(const _MsgSC_DisconnectMoneyNotify& from);
  
  inline _MsgSC_DisconnectMoneyNotify& operator=(const _MsgSC_DisconnectMoneyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_DisconnectMoneyNotify& default_instance();
  
  void Swap(_MsgSC_DisconnectMoneyNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_DisconnectMoneyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_DisconnectMoneyNotify& from);
  void MergeFrom(const _MsgSC_DisconnectMoneyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string m_sNickName = 1;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 1;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required sint64 m_llDisconnectMoney = 2;
  inline bool has_m_lldisconnectmoney() const;
  inline void clear_m_lldisconnectmoney();
  static const int kMLlDisconnectMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_lldisconnectmoney() const;
  inline void set_m_lldisconnectmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_DisconnectMoneyNotify)
 private:
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_lldisconnectmoney();
  inline void clear_has_m_lldisconnectmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_snickname_;
  ::google::protobuf::int64 m_lldisconnectmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_DisconnectMoneyNotify* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_ExitNtf : public ::google::protobuf::Message {
 public:
  _MsgSC_ExitNtf();
  virtual ~_MsgSC_ExitNtf();
  
  _MsgSC_ExitNtf(const _MsgSC_ExitNtf& from);
  
  inline _MsgSC_ExitNtf& operator=(const _MsgSC_ExitNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_ExitNtf& default_instance();
  
  void Swap(_MsgSC_ExitNtf* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_ExitNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_ExitNtf& from);
  void MergeFrom(const _MsgSC_ExitNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lExit = 3;
  inline bool has_m_lexit() const;
  inline void clear_m_lexit();
  static const int kMLExitFieldNumber = 3;
  inline ::google::protobuf::int32 m_lexit() const;
  inline void set_m_lexit(::google::protobuf::int32 value);
  
  // required sint32 m_bExit = 4;
  inline bool has_m_bexit() const;
  inline void clear_m_bexit();
  static const int kMBExitFieldNumber = 4;
  inline ::google::protobuf::int32 m_bexit() const;
  inline void set_m_bexit(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_ExitNtf)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lexit();
  inline void clear_has_m_lexit();
  inline void set_has_m_bexit();
  inline void clear_has_m_bexit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_lexit_;
  ::google::protobuf::int32 m_bexit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_ExitNtf* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_RematchOKAns : public ::google::protobuf::Message {
 public:
  _MsgSC_RematchOKAns();
  virtual ~_MsgSC_RematchOKAns();
  
  _MsgSC_RematchOKAns(const _MsgSC_RematchOKAns& from);
  
  inline _MsgSC_RematchOKAns& operator=(const _MsgSC_RematchOKAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_RematchOKAns& default_instance();
  
  void Swap(_MsgSC_RematchOKAns* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_RematchOKAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_RematchOKAns& from);
  void MergeFrom(const _MsgSC_RematchOKAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint64 m_llPoolMoney = 2;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // required .Game_Poker._Money m_money = 3;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 3;
  inline const ::Game_Poker::_Money& m_money() const;
  inline ::Game_Poker::_Money* mutable_m_money();
  inline ::Game_Poker::_Money* release_m_money();
  
  // required sint32 m_bRematchOK = 4;
  inline bool has_m_brematchok() const;
  inline void clear_m_brematchok();
  static const int kMBRematchOKFieldNumber = 4;
  inline ::google::protobuf::int32 m_brematchok() const;
  inline void set_m_brematchok(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_RematchOKAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_brematchok();
  inline void clear_has_m_brematchok();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llpoolmoney_;
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_brematchok_;
  ::Game_Poker::_Money* m_money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_RematchOKAns* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_RuleNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_RuleNotify();
  virtual ~_MsgSC_RuleNotify();
  
  _MsgSC_RuleNotify(const _MsgSC_RuleNotify& from);
  
  inline _MsgSC_RuleNotify& operator=(const _MsgSC_RuleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_RuleNotify& default_instance();
  
  void Swap(_MsgSC_RuleNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_RuleNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_RuleNotify& from);
  void MergeFrom(const _MsgSC_RuleNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nRuleIdx = 1;
  inline bool has_m_nruleidx() const;
  inline void clear_m_nruleidx();
  static const int kMNRuleIdxFieldNumber = 1;
  inline ::google::protobuf::int32 m_nruleidx() const;
  inline void set_m_nruleidx(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_RuleNotify)
 private:
  inline void set_has_m_nruleidx();
  inline void clear_has_m_nruleidx();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nruleidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_RuleNotify* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_AllowEntryWaitingUser : public ::google::protobuf::Message {
 public:
  _MsgSC_AllowEntryWaitingUser();
  virtual ~_MsgSC_AllowEntryWaitingUser();
  
  _MsgSC_AllowEntryWaitingUser(const _MsgSC_AllowEntryWaitingUser& from);
  
  inline _MsgSC_AllowEntryWaitingUser& operator=(const _MsgSC_AllowEntryWaitingUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_AllowEntryWaitingUser& default_instance();
  
  void Swap(_MsgSC_AllowEntryWaitingUser* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_AllowEntryWaitingUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_AllowEntryWaitingUser& from);
  void MergeFrom(const _MsgSC_AllowEntryWaitingUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_AllowEntryWaitingUser)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_AllowEntryWaitingUser* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_AllWaitingUserDataNtf : public ::google::protobuf::Message {
 public:
  _MsgSC_AllWaitingUserDataNtf();
  virtual ~_MsgSC_AllWaitingUserDataNtf();
  
  _MsgSC_AllWaitingUserDataNtf(const _MsgSC_AllWaitingUserDataNtf& from);
  
  inline _MsgSC_AllWaitingUserDataNtf& operator=(const _MsgSC_AllWaitingUserDataNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_AllWaitingUserDataNtf& default_instance();
  
  void Swap(_MsgSC_AllWaitingUserDataNtf* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_AllWaitingUserDataNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_AllWaitingUserDataNtf& from);
  void MergeFrom(const _MsgSC_AllWaitingUserDataNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_bSendWaitingUser = 1;
  inline bool has_m_bsendwaitinguser() const;
  inline void clear_m_bsendwaitinguser();
  static const int kMBSendWaitingUserFieldNumber = 1;
  inline ::google::protobuf::int32 m_bsendwaitinguser() const;
  inline void set_m_bsendwaitinguser(::google::protobuf::int32 value);
  
  // repeated .Game_Poker._WAITINGUSERDATA m_WaitingUserData = 2;
  inline int m_waitinguserdata_size() const;
  inline void clear_m_waitinguserdata();
  static const int kMWaitingUserDataFieldNumber = 2;
  inline const ::Game_Poker::_WAITINGUSERDATA& m_waitinguserdata(int index) const;
  inline ::Game_Poker::_WAITINGUSERDATA* mutable_m_waitinguserdata(int index);
  inline ::Game_Poker::_WAITINGUSERDATA* add_m_waitinguserdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WAITINGUSERDATA >&
      m_waitinguserdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WAITINGUSERDATA >*
      mutable_m_waitinguserdata();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_AllWaitingUserDataNtf)
 private:
  inline void set_has_m_bsendwaitinguser();
  inline void clear_has_m_bsendwaitinguser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WAITINGUSERDATA > m_waitinguserdata_;
  ::google::protobuf::int32 m_bsendwaitinguser_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_AllWaitingUserDataNtf* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_UserDataChangeNtf : public ::google::protobuf::Message {
 public:
  _MsgSC_UserDataChangeNtf();
  virtual ~_MsgSC_UserDataChangeNtf();
  
  _MsgSC_UserDataChangeNtf(const _MsgSC_UserDataChangeNtf& from);
  
  inline _MsgSC_UserDataChangeNtf& operator=(const _MsgSC_UserDataChangeNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_UserDataChangeNtf& default_instance();
  
  void Swap(_MsgSC_UserDataChangeNtf* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_UserDataChangeNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_UserDataChangeNtf& from);
  void MergeFrom(const _MsgSC_UserDataChangeNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Game_Poker._RCUserData m_userData = 1;
  inline bool has_m_userdata() const;
  inline void clear_m_userdata();
  static const int kMUserDataFieldNumber = 1;
  inline const ::Game_Poker::_RCUserData& m_userdata() const;
  inline ::Game_Poker::_RCUserData* mutable_m_userdata();
  inline ::Game_Poker::_RCUserData* release_m_userdata();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_UserDataChangeNtf)
 private:
  inline void set_has_m_userdata();
  inline void clear_has_m_userdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Game_Poker::_RCUserData* m_userdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_UserDataChangeNtf* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_RefillMoneyNtf : public ::google::protobuf::Message {
 public:
  _MsgSC_RefillMoneyNtf();
  virtual ~_MsgSC_RefillMoneyNtf();
  
  _MsgSC_RefillMoneyNtf(const _MsgSC_RefillMoneyNtf& from);
  
  inline _MsgSC_RefillMoneyNtf& operator=(const _MsgSC_RefillMoneyNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_RefillMoneyNtf& default_instance();
  
  void Swap(_MsgSC_RefillMoneyNtf* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_RefillMoneyNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_RefillMoneyNtf& from);
  void MergeFrom(const _MsgSC_RefillMoneyNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nRefillCnt = 2;
  inline bool has_m_nrefillcnt() const;
  inline void clear_m_nrefillcnt();
  static const int kMNRefillCntFieldNumber = 2;
  inline ::google::protobuf::int32 m_nrefillcnt() const;
  inline void set_m_nrefillcnt(::google::protobuf::int32 value);
  
  // required sint64 m_llRefillMoney = 3;
  inline bool has_m_llrefillmoney() const;
  inline void clear_m_llrefillmoney();
  static const int kMLlRefillMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llrefillmoney() const;
  inline void set_m_llrefillmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_RefillMoneyNtf)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nrefillcnt();
  inline void clear_has_m_nrefillcnt();
  inline void set_has_m_llrefillmoney();
  inline void clear_has_m_llrefillmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nrefillcnt_;
  ::google::protobuf::int64 m_llrefillmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_RefillMoneyNtf* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_JackpotMoneyNtf : public ::google::protobuf::Message {
 public:
  _MsgSC_JackpotMoneyNtf();
  virtual ~_MsgSC_JackpotMoneyNtf();
  
  _MsgSC_JackpotMoneyNtf(const _MsgSC_JackpotMoneyNtf& from);
  
  inline _MsgSC_JackpotMoneyNtf& operator=(const _MsgSC_JackpotMoneyNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_JackpotMoneyNtf& default_instance();
  
  void Swap(_MsgSC_JackpotMoneyNtf* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_JackpotMoneyNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_JackpotMoneyNtf& from);
  void MergeFrom(const _MsgSC_JackpotMoneyNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint64 m_llJackpotMoney = 2;
  inline bool has_m_lljackpotmoney() const;
  inline void clear_m_lljackpotmoney();
  static const int kMLlJackpotMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_lljackpotmoney() const;
  inline void set_m_lljackpotmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_JackpotMoneyNtf)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lljackpotmoney();
  inline void clear_has_m_lljackpotmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_lljackpotmoney_;
  ::google::protobuf::int32 m_lusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_JackpotMoneyNtf* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_GuardianAngelMoney : public ::google::protobuf::Message {
 public:
  _MsgSC_GuardianAngelMoney();
  virtual ~_MsgSC_GuardianAngelMoney();
  
  _MsgSC_GuardianAngelMoney(const _MsgSC_GuardianAngelMoney& from);
  
  inline _MsgSC_GuardianAngelMoney& operator=(const _MsgSC_GuardianAngelMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_GuardianAngelMoney& default_instance();
  
  void Swap(_MsgSC_GuardianAngelMoney* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_GuardianAngelMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_GuardianAngelMoney& from);
  void MergeFrom(const _MsgSC_GuardianAngelMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nGuardianAngelCnt = 2;
  inline bool has_m_nguardianangelcnt() const;
  inline void clear_m_nguardianangelcnt();
  static const int kMNGuardianAngelCntFieldNumber = 2;
  inline ::google::protobuf::int32 m_nguardianangelcnt() const;
  inline void set_m_nguardianangelcnt(::google::protobuf::int32 value);
  
  // required sint64 m_llAngelMoney = 3;
  inline bool has_m_llangelmoney() const;
  inline void clear_m_llangelmoney();
  static const int kMLlAngelMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llangelmoney() const;
  inline void set_m_llangelmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_GuardianAngelMoney)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nguardianangelcnt();
  inline void clear_has_m_nguardianangelcnt();
  inline void set_has_m_llangelmoney();
  inline void clear_has_m_llangelmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nguardianangelcnt_;
  ::google::protobuf::int64 m_llangelmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_GuardianAngelMoney* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_GameMasterCallNtf : public ::google::protobuf::Message {
 public:
  _MsgSC_GameMasterCallNtf();
  virtual ~_MsgSC_GameMasterCallNtf();
  
  _MsgSC_GameMasterCallNtf(const _MsgSC_GameMasterCallNtf& from);
  
  inline _MsgSC_GameMasterCallNtf& operator=(const _MsgSC_GameMasterCallNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_GameMasterCallNtf& default_instance();
  
  void Swap(_MsgSC_GameMasterCallNtf* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_GameMasterCallNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_GameMasterCallNtf& from);
  void MergeFrom(const _MsgSC_GameMasterCallNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lGMCall_USN = 1;
  inline bool has_m_lgmcall_usn() const;
  inline void clear_m_lgmcall_usn();
  static const int kMLGMCallUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lgmcall_usn() const;
  inline void set_m_lgmcall_usn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_GameMasterCallNtf)
 private:
  inline void set_has_m_lgmcall_usn();
  inline void clear_has_m_lgmcall_usn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lgmcall_usn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_GameMasterCallNtf* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_ObserverCnt : public ::google::protobuf::Message {
 public:
  _MsgSC_ObserverCnt();
  virtual ~_MsgSC_ObserverCnt();
  
  _MsgSC_ObserverCnt(const _MsgSC_ObserverCnt& from);
  
  inline _MsgSC_ObserverCnt& operator=(const _MsgSC_ObserverCnt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_ObserverCnt& default_instance();
  
  void Swap(_MsgSC_ObserverCnt* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_ObserverCnt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_ObserverCnt& from);
  void MergeFrom(const _MsgSC_ObserverCnt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nObserverCnt = 1;
  inline bool has_m_nobservercnt() const;
  inline void clear_m_nobservercnt();
  static const int kMNObserverCntFieldNumber = 1;
  inline ::google::protobuf::int32 m_nobservercnt() const;
  inline void set_m_nobservercnt(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_ObserverCnt)
 private:
  inline void set_has_m_nobservercnt();
  inline void clear_has_m_nobservercnt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nobservercnt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_ObserverCnt* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_Bonus : public ::google::protobuf::Message {
 public:
  _MsgSC_Bonus();
  virtual ~_MsgSC_Bonus();
  
  _MsgSC_Bonus(const _MsgSC_Bonus& from);
  
  inline _MsgSC_Bonus& operator=(const _MsgSC_Bonus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_Bonus& default_instance();
  
  void Swap(_MsgSC_Bonus* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_Bonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_Bonus& from);
  void MergeFrom(const _MsgSC_Bonus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llBonus = 1;
  inline bool has_m_llbonus() const;
  inline void clear_m_llbonus();
  static const int kMLlBonusFieldNumber = 1;
  inline ::google::protobuf::int64 m_llbonus() const;
  inline void set_m_llbonus(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_Bonus)
 private:
  inline void set_has_m_llbonus();
  inline void clear_has_m_llbonus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llbonus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_Bonus* default_instance_;
};
// -------------------------------------------------------------------

class _MsgSC_PoliceNotify : public ::google::protobuf::Message {
 public:
  _MsgSC_PoliceNotify();
  virtual ~_MsgSC_PoliceNotify();
  
  _MsgSC_PoliceNotify(const _MsgSC_PoliceNotify& from);
  
  inline _MsgSC_PoliceNotify& operator=(const _MsgSC_PoliceNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const _MsgSC_PoliceNotify& default_instance();
  
  void Swap(_MsgSC_PoliceNotify* other);
  
  // implements Message ----------------------------------------------
  
  _MsgSC_PoliceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _MsgSC_PoliceNotify& from);
  void MergeFrom(const _MsgSC_PoliceNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string m_policeMsg = 1;
  inline bool has_m_policemsg() const;
  inline void clear_m_policemsg();
  static const int kMPoliceMsgFieldNumber = 1;
  inline const ::std::string& m_policemsg() const;
  inline void set_m_policemsg(const ::std::string& value);
  inline void set_m_policemsg(const char* value);
  inline void set_m_policemsg(const char* value, size_t size);
  inline ::std::string* mutable_m_policemsg();
  inline ::std::string* release_m_policemsg();
  
  // @@protoc_insertion_point(class_scope:Game_Poker._MsgSC_PoliceNotify)
 private:
  inline void set_has_m_policemsg();
  inline void clear_has_m_policemsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_policemsg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Game_5fPoker_2eproto();
  friend void protobuf_AssignDesc_Game_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_Game_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static _MsgSC_PoliceNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// _Cards

// repeated int32 m_vtCards = 1;
inline int _Cards::m_vtcards_size() const {
  return m_vtcards_.size();
}
inline void _Cards::clear_m_vtcards() {
  m_vtcards_.Clear();
}
inline ::google::protobuf::int32 _Cards::m_vtcards(int index) const {
  return m_vtcards_.Get(index);
}
inline void _Cards::set_m_vtcards(int index, ::google::protobuf::int32 value) {
  m_vtcards_.Set(index, value);
}
inline void _Cards::add_m_vtcards(::google::protobuf::int32 value) {
  m_vtcards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
_Cards::m_vtcards() const {
  return m_vtcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
_Cards::mutable_m_vtcards() {
  return &m_vtcards_;
}

// repeated int32 m_lResultIdx = 2;
inline int _Cards::m_lresultidx_size() const {
  return m_lresultidx_.size();
}
inline void _Cards::clear_m_lresultidx() {
  m_lresultidx_.Clear();
}
inline ::google::protobuf::int32 _Cards::m_lresultidx(int index) const {
  return m_lresultidx_.Get(index);
}
inline void _Cards::set_m_lresultidx(int index, ::google::protobuf::int32 value) {
  m_lresultidx_.Set(index, value);
}
inline void _Cards::add_m_lresultidx(::google::protobuf::int32 value) {
  m_lresultidx_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
_Cards::m_lresultidx() const {
  return m_lresultidx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
_Cards::mutable_m_lresultidx() {
  return &m_lresultidx_;
}

// required .Game_Poker._VecUSN m_vUserUSN = 3;
inline bool _Cards::has_m_vuserusn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _Cards::set_has_m_vuserusn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _Cards::clear_has_m_vuserusn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _Cards::clear_m_vuserusn() {
  if (m_vuserusn_ != NULL) m_vuserusn_->::Game_Poker::_VecUSN::Clear();
  clear_has_m_vuserusn();
}
inline const ::Game_Poker::_VecUSN& _Cards::m_vuserusn() const {
  return m_vuserusn_ != NULL ? *m_vuserusn_ : *default_instance_->m_vuserusn_;
}
inline ::Game_Poker::_VecUSN* _Cards::mutable_m_vuserusn() {
  set_has_m_vuserusn();
  if (m_vuserusn_ == NULL) m_vuserusn_ = new ::Game_Poker::_VecUSN;
  return m_vuserusn_;
}
inline ::Game_Poker::_VecUSN* _Cards::release_m_vuserusn() {
  clear_has_m_vuserusn();
  ::Game_Poker::_VecUSN* temp = m_vuserusn_;
  m_vuserusn_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// _Money

// required sint64 m_llCMoney = 1;
inline bool _Money::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _Money::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _Money::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _Money::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 _Money::m_llcmoney() const {
  return m_llcmoney_;
}
inline void _Money::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// required sint64 m_llCallMoney = 2;
inline bool _Money::has_m_llcallmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _Money::set_has_m_llcallmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _Money::clear_has_m_llcallmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _Money::clear_m_llcallmoney() {
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallmoney();
}
inline ::google::protobuf::int64 _Money::m_llcallmoney() const {
  return m_llcallmoney_;
}
inline void _Money::set_m_llcallmoney(::google::protobuf::int64 value) {
  set_has_m_llcallmoney();
  m_llcallmoney_ = value;
}

// required sint64 m_llSideMoney = 3;
inline bool _Money::has_m_llsidemoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _Money::set_has_m_llsidemoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _Money::clear_has_m_llsidemoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _Money::clear_m_llsidemoney() {
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llsidemoney();
}
inline ::google::protobuf::int64 _Money::m_llsidemoney() const {
  return m_llsidemoney_;
}
inline void _Money::set_m_llsidemoney(::google::protobuf::int64 value) {
  set_has_m_llsidemoney();
  m_llsidemoney_ = value;
}

// required sint64 m_llCallHabMoney = 4;
inline bool _Money::has_m_llcallhabmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _Money::set_has_m_llcallhabmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _Money::clear_has_m_llcallhabmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _Money::clear_m_llcallhabmoney() {
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallhabmoney();
}
inline ::google::protobuf::int64 _Money::m_llcallhabmoney() const {
  return m_llcallhabmoney_;
}
inline void _Money::set_m_llcallhabmoney(::google::protobuf::int64 value) {
  set_has_m_llcallhabmoney();
  m_llcallhabmoney_ = value;
}

// required sint64 m_llTakeMoney = 5;
inline bool _Money::has_m_lltakemoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _Money::set_has_m_lltakemoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _Money::clear_has_m_lltakemoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _Money::clear_m_lltakemoney() {
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lltakemoney();
}
inline ::google::protobuf::int64 _Money::m_lltakemoney() const {
  return m_lltakemoney_;
}
inline void _Money::set_m_lltakemoney(::google::protobuf::int64 value) {
  set_has_m_lltakemoney();
  m_lltakemoney_ = value;
}

// required sint64 m_llJackpotMoney = 6;
inline bool _Money::has_m_lljackpotmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _Money::set_has_m_lljackpotmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _Money::clear_has_m_lljackpotmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _Money::clear_m_lljackpotmoney() {
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lljackpotmoney();
}
inline ::google::protobuf::int64 _Money::m_lljackpotmoney() const {
  return m_lljackpotmoney_;
}
inline void _Money::set_m_lljackpotmoney(::google::protobuf::int64 value) {
  set_has_m_lljackpotmoney();
  m_lljackpotmoney_ = value;
}

// required sint32 m_lBetState = 7;
inline bool _Money::has_m_lbetstate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _Money::set_has_m_lbetstate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _Money::clear_has_m_lbetstate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _Money::clear_m_lbetstate() {
  m_lbetstate_ = 0;
  clear_has_m_lbetstate();
}
inline ::google::protobuf::int32 _Money::m_lbetstate() const {
  return m_lbetstate_;
}
inline void _Money::set_m_lbetstate(::google::protobuf::int32 value) {
  set_has_m_lbetstate();
  m_lbetstate_ = value;
}

// required sint32 m_lBetReceive = 8;
inline bool _Money::has_m_lbetreceive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _Money::set_has_m_lbetreceive() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _Money::clear_has_m_lbetreceive() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _Money::clear_m_lbetreceive() {
  m_lbetreceive_ = 0;
  clear_has_m_lbetreceive();
}
inline ::google::protobuf::int32 _Money::m_lbetreceive() const {
  return m_lbetreceive_;
}
inline void _Money::set_m_lbetreceive(::google::protobuf::int32 value) {
  set_has_m_lbetreceive();
  m_lbetreceive_ = value;
}

// required sint32 m_lBetCount = 9;
inline bool _Money::has_m_lbetcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _Money::set_has_m_lbetcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _Money::clear_has_m_lbetcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _Money::clear_m_lbetcount() {
  m_lbetcount_ = 0;
  clear_has_m_lbetcount();
}
inline ::google::protobuf::int32 _Money::m_lbetcount() const {
  return m_lbetcount_;
}
inline void _Money::set_m_lbetcount(::google::protobuf::int32 value) {
  set_has_m_lbetcount();
  m_lbetcount_ = value;
}

// required sint32 m_lResultIdx = 10;
inline bool _Money::has_m_lresultidx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _Money::set_has_m_lresultidx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _Money::clear_has_m_lresultidx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _Money::clear_m_lresultidx() {
  m_lresultidx_ = 0;
  clear_has_m_lresultidx();
}
inline ::google::protobuf::int32 _Money::m_lresultidx() const {
  return m_lresultidx_;
}
inline void _Money::set_m_lresultidx(::google::protobuf::int32 value) {
  set_has_m_lresultidx();
  m_lresultidx_ = value;
}

// required string m_sMoneyMsg = 11;
inline bool _Money::has_m_smoneymsg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _Money::set_has_m_smoneymsg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _Money::clear_has_m_smoneymsg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _Money::clear_m_smoneymsg() {
  if (m_smoneymsg_ != &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_->clear();
  }
  clear_has_m_smoneymsg();
}
inline const ::std::string& _Money::m_smoneymsg() const {
  return *m_smoneymsg_;
}
inline void _Money::set_m_smoneymsg(const ::std::string& value) {
  set_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_ = new ::std::string;
  }
  m_smoneymsg_->assign(value);
}
inline void _Money::set_m_smoneymsg(const char* value) {
  set_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_ = new ::std::string;
  }
  m_smoneymsg_->assign(value);
}
inline void _Money::set_m_smoneymsg(const char* value, size_t size) {
  set_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_ = new ::std::string;
  }
  m_smoneymsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _Money::mutable_m_smoneymsg() {
  set_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_ = new ::std::string;
  }
  return m_smoneymsg_;
}
inline ::std::string* _Money::release_m_smoneymsg() {
  clear_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_smoneymsg_;
    m_smoneymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserMoney

// required sint32 m_lUSN = 1;
inline bool UserMoney::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMoney::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMoney::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMoney::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 UserMoney::m_lusn() const {
  return m_lusn_;
}
inline void UserMoney::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lState = 2;
inline bool UserMoney::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMoney::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMoney::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMoney::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 UserMoney::m_lstate() const {
  return m_lstate_;
}
inline void UserMoney::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required sint64 m_llMoney = 3;
inline bool UserMoney::has_m_llmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMoney::set_has_m_llmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMoney::clear_has_m_llmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMoney::clear_m_llmoney() {
  m_llmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llmoney();
}
inline ::google::protobuf::int64 UserMoney::m_llmoney() const {
  return m_llmoney_;
}
inline void UserMoney::set_m_llmoney(::google::protobuf::int64 value) {
  set_has_m_llmoney();
  m_llmoney_ = value;
}

// required sint64 m_llCallHabMoney = 4;
inline bool UserMoney::has_m_llcallhabmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMoney::set_has_m_llcallhabmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMoney::clear_has_m_llcallhabmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMoney::clear_m_llcallhabmoney() {
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallhabmoney();
}
inline ::google::protobuf::int64 UserMoney::m_llcallhabmoney() const {
  return m_llcallhabmoney_;
}
inline void UserMoney::set_m_llcallhabmoney(::google::protobuf::int64 value) {
  set_has_m_llcallhabmoney();
  m_llcallhabmoney_ = value;
}

// required sint64 m_llTakeMoney = 5;
inline bool UserMoney::has_m_lltakemoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMoney::set_has_m_lltakemoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMoney::clear_has_m_lltakemoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMoney::clear_m_lltakemoney() {
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lltakemoney();
}
inline ::google::protobuf::int64 UserMoney::m_lltakemoney() const {
  return m_lltakemoney_;
}
inline void UserMoney::set_m_lltakemoney(::google::protobuf::int64 value) {
  set_has_m_lltakemoney();
  m_lltakemoney_ = value;
}

// required sint64 m_llDealMoney = 6;
inline bool UserMoney::has_m_lldealmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserMoney::set_has_m_lldealmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserMoney::clear_has_m_lldealmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserMoney::clear_m_lldealmoney() {
  m_lldealmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lldealmoney();
}
inline ::google::protobuf::int64 UserMoney::m_lldealmoney() const {
  return m_lldealmoney_;
}
inline void UserMoney::set_m_lldealmoney(::google::protobuf::int64 value) {
  set_has_m_lldealmoney();
  m_lldealmoney_ = value;
}

// required string m_sNickName = 7;
inline bool UserMoney::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserMoney::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserMoney::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserMoney::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& UserMoney::m_snickname() const {
  return *m_snickname_;
}
inline void UserMoney::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void UserMoney::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void UserMoney::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserMoney::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* UserMoney::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sDealerTax = 8;
inline bool UserMoney::has_m_sdealertax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserMoney::set_has_m_sdealertax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserMoney::clear_has_m_sdealertax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserMoney::clear_m_sdealertax() {
  if (m_sdealertax_ != &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_->clear();
  }
  clear_has_m_sdealertax();
}
inline const ::std::string& UserMoney::m_sdealertax() const {
  return *m_sdealertax_;
}
inline void UserMoney::set_m_sdealertax(const ::std::string& value) {
  set_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_ = new ::std::string;
  }
  m_sdealertax_->assign(value);
}
inline void UserMoney::set_m_sdealertax(const char* value) {
  set_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_ = new ::std::string;
  }
  m_sdealertax_->assign(value);
}
inline void UserMoney::set_m_sdealertax(const char* value, size_t size) {
  set_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_ = new ::std::string;
  }
  m_sdealertax_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserMoney::mutable_m_sdealertax() {
  set_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_ = new ::std::string;
  }
  return m_sdealertax_;
}
inline ::std::string* UserMoney::release_m_sdealertax() {
  clear_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sdealertax_;
    m_sdealertax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// _CWinLose

// required sint32 m_lWin = 1;
inline bool _CWinLose::has_m_lwin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _CWinLose::set_has_m_lwin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _CWinLose::clear_has_m_lwin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _CWinLose::clear_m_lwin() {
  m_lwin_ = 0;
  clear_has_m_lwin();
}
inline ::google::protobuf::int32 _CWinLose::m_lwin() const {
  return m_lwin_;
}
inline void _CWinLose::set_m_lwin(::google::protobuf::int32 value) {
  set_has_m_lwin();
  m_lwin_ = value;
}

// required sint32 m_lLose = 2;
inline bool _CWinLose::has_m_llose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _CWinLose::set_has_m_llose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _CWinLose::clear_has_m_llose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _CWinLose::clear_m_llose() {
  m_llose_ = 0;
  clear_has_m_llose();
}
inline ::google::protobuf::int32 _CWinLose::m_llose() const {
  return m_llose_;
}
inline void _CWinLose::set_m_llose(::google::protobuf::int32 value) {
  set_has_m_llose();
  m_llose_ = value;
}

// required sint32 m_lContinue = 3;
inline bool _CWinLose::has_m_lcontinue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _CWinLose::set_has_m_lcontinue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _CWinLose::clear_has_m_lcontinue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _CWinLose::clear_m_lcontinue() {
  m_lcontinue_ = 0;
  clear_has_m_lcontinue();
}
inline ::google::protobuf::int32 _CWinLose::m_lcontinue() const {
  return m_lcontinue_;
}
inline void _CWinLose::set_m_lcontinue(::google::protobuf::int32 value) {
  set_has_m_lcontinue();
  m_lcontinue_ = value;
}

// -------------------------------------------------------------------

// _UserInfo

// required sint32 m_lUSN = 1;
inline bool _UserInfo::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _UserInfo::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _UserInfo::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _UserInfo::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _UserInfo::m_lusn() const {
  return m_lusn_;
}
inline void _UserInfo::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_nIndex = 2;
inline bool _UserInfo::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _UserInfo::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _UserInfo::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _UserInfo::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _UserInfo::m_nindex() const {
  return m_nindex_;
}
inline void _UserInfo::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required string m_sNickName = 3;
inline bool _UserInfo::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _UserInfo::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _UserInfo::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _UserInfo::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& _UserInfo::m_snickname() const {
  return *m_snickname_;
}
inline void _UserInfo::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _UserInfo::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _UserInfo::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _UserInfo::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* _UserInfo::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sID = 4;
inline bool _UserInfo::has_m_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _UserInfo::set_has_m_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _UserInfo::clear_has_m_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _UserInfo::clear_m_sid() {
  if (m_sid_ != &::google::protobuf::internal::kEmptyString) {
    m_sid_->clear();
  }
  clear_has_m_sid();
}
inline const ::std::string& _UserInfo::m_sid() const {
  return *m_sid_;
}
inline void _UserInfo::set_m_sid(const ::std::string& value) {
  set_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    m_sid_ = new ::std::string;
  }
  m_sid_->assign(value);
}
inline void _UserInfo::set_m_sid(const char* value) {
  set_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    m_sid_ = new ::std::string;
  }
  m_sid_->assign(value);
}
inline void _UserInfo::set_m_sid(const char* value, size_t size) {
  set_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    m_sid_ = new ::std::string;
  }
  m_sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _UserInfo::mutable_m_sid() {
  set_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    m_sid_ = new ::std::string;
  }
  return m_sid_;
}
inline ::std::string* _UserInfo::release_m_sid() {
  clear_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sid_;
    m_sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint32 m_lCLevel = 5;
inline bool _UserInfo::has_m_lclevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _UserInfo::set_has_m_lclevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _UserInfo::clear_has_m_lclevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _UserInfo::clear_m_lclevel() {
  m_lclevel_ = 0;
  clear_has_m_lclevel();
}
inline ::google::protobuf::int32 _UserInfo::m_lclevel() const {
  return m_lclevel_;
}
inline void _UserInfo::set_m_lclevel(::google::protobuf::int32 value) {
  set_has_m_lclevel();
  m_lclevel_ = value;
}

// required sint32 m_lSoundType = 6;
inline bool _UserInfo::has_m_lsoundtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _UserInfo::set_has_m_lsoundtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _UserInfo::clear_has_m_lsoundtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _UserInfo::clear_m_lsoundtype() {
  m_lsoundtype_ = 0;
  clear_has_m_lsoundtype();
}
inline ::google::protobuf::int32 _UserInfo::m_lsoundtype() const {
  return m_lsoundtype_;
}
inline void _UserInfo::set_m_lsoundtype(::google::protobuf::int32 value) {
  set_has_m_lsoundtype();
  m_lsoundtype_ = value;
}

// required string m_sAvt = 7;
inline bool _UserInfo::has_m_savt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _UserInfo::set_has_m_savt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _UserInfo::clear_has_m_savt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _UserInfo::clear_m_savt() {
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    m_savt_->clear();
  }
  clear_has_m_savt();
}
inline const ::std::string& _UserInfo::m_savt() const {
  return *m_savt_;
}
inline void _UserInfo::set_m_savt(const ::std::string& value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void _UserInfo::set_m_savt(const char* value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void _UserInfo::set_m_savt(const char* value, size_t size) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _UserInfo::mutable_m_savt() {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  return m_savt_;
}
inline ::std::string* _UserInfo::release_m_savt() {
  clear_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_savt_;
    m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint32 m_lUserState = 8;
inline bool _UserInfo::has_m_luserstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _UserInfo::set_has_m_luserstate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _UserInfo::clear_has_m_luserstate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _UserInfo::clear_m_luserstate() {
  m_luserstate_ = 0;
  clear_has_m_luserstate();
}
inline ::google::protobuf::int32 _UserInfo::m_luserstate() const {
  return m_luserstate_;
}
inline void _UserInfo::set_m_luserstate(::google::protobuf::int32 value) {
  set_has_m_luserstate();
  m_luserstate_ = value;
}

// required .Game_Poker._CWinLose m_cWinLose = 9;
inline bool _UserInfo::has_m_cwinlose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _UserInfo::set_has_m_cwinlose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _UserInfo::clear_has_m_cwinlose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _UserInfo::clear_m_cwinlose() {
  if (m_cwinlose_ != NULL) m_cwinlose_->::Game_Poker::_CWinLose::Clear();
  clear_has_m_cwinlose();
}
inline const ::Game_Poker::_CWinLose& _UserInfo::m_cwinlose() const {
  return m_cwinlose_ != NULL ? *m_cwinlose_ : *default_instance_->m_cwinlose_;
}
inline ::Game_Poker::_CWinLose* _UserInfo::mutable_m_cwinlose() {
  set_has_m_cwinlose();
  if (m_cwinlose_ == NULL) m_cwinlose_ = new ::Game_Poker::_CWinLose;
  return m_cwinlose_;
}
inline ::Game_Poker::_CWinLose* _UserInfo::release_m_cwinlose() {
  clear_has_m_cwinlose();
  ::Game_Poker::_CWinLose* temp = m_cwinlose_;
  m_cwinlose_ = NULL;
  return temp;
}

// required .Game_Poker._CWinLose m_cWinLose_Today = 10;
inline bool _UserInfo::has_m_cwinlose_today() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _UserInfo::set_has_m_cwinlose_today() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _UserInfo::clear_has_m_cwinlose_today() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _UserInfo::clear_m_cwinlose_today() {
  if (m_cwinlose_today_ != NULL) m_cwinlose_today_->::Game_Poker::_CWinLose::Clear();
  clear_has_m_cwinlose_today();
}
inline const ::Game_Poker::_CWinLose& _UserInfo::m_cwinlose_today() const {
  return m_cwinlose_today_ != NULL ? *m_cwinlose_today_ : *default_instance_->m_cwinlose_today_;
}
inline ::Game_Poker::_CWinLose* _UserInfo::mutable_m_cwinlose_today() {
  set_has_m_cwinlose_today();
  if (m_cwinlose_today_ == NULL) m_cwinlose_today_ = new ::Game_Poker::_CWinLose;
  return m_cwinlose_today_;
}
inline ::Game_Poker::_CWinLose* _UserInfo::release_m_cwinlose_today() {
  clear_has_m_cwinlose_today();
  ::Game_Poker::_CWinLose* temp = m_cwinlose_today_;
  m_cwinlose_today_ = NULL;
  return temp;
}

// required .Game_Poker._CWinLose m_cWinLose_Room = 11;
inline bool _UserInfo::has_m_cwinlose_room() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _UserInfo::set_has_m_cwinlose_room() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _UserInfo::clear_has_m_cwinlose_room() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _UserInfo::clear_m_cwinlose_room() {
  if (m_cwinlose_room_ != NULL) m_cwinlose_room_->::Game_Poker::_CWinLose::Clear();
  clear_has_m_cwinlose_room();
}
inline const ::Game_Poker::_CWinLose& _UserInfo::m_cwinlose_room() const {
  return m_cwinlose_room_ != NULL ? *m_cwinlose_room_ : *default_instance_->m_cwinlose_room_;
}
inline ::Game_Poker::_CWinLose* _UserInfo::mutable_m_cwinlose_room() {
  set_has_m_cwinlose_room();
  if (m_cwinlose_room_ == NULL) m_cwinlose_room_ = new ::Game_Poker::_CWinLose;
  return m_cwinlose_room_;
}
inline ::Game_Poker::_CWinLose* _UserInfo::release_m_cwinlose_room() {
  clear_has_m_cwinlose_room();
  ::Game_Poker::_CWinLose* temp = m_cwinlose_room_;
  m_cwinlose_room_ = NULL;
  return temp;
}

// required sint64 m_llCMoney = 12;
inline bool _UserInfo::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void _UserInfo::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void _UserInfo::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void _UserInfo::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 _UserInfo::m_llcmoney() const {
  return m_llcmoney_;
}
inline void _UserInfo::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// required sint64 m_llFMoney = 13;
inline bool _UserInfo::has_m_llfmoney() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void _UserInfo::set_has_m_llfmoney() {
  _has_bits_[0] |= 0x00001000u;
}
inline void _UserInfo::clear_has_m_llfmoney() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void _UserInfo::clear_m_llfmoney() {
  m_llfmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llfmoney();
}
inline ::google::protobuf::int64 _UserInfo::m_llfmoney() const {
  return m_llfmoney_;
}
inline void _UserInfo::set_m_llfmoney(::google::protobuf::int64 value) {
  set_has_m_llfmoney();
  m_llfmoney_ = value;
}

// required sint32 m_lExit = 14;
inline bool _UserInfo::has_m_lexit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _UserInfo::set_has_m_lexit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _UserInfo::clear_has_m_lexit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _UserInfo::clear_m_lexit() {
  m_lexit_ = 0;
  clear_has_m_lexit();
}
inline ::google::protobuf::int32 _UserInfo::m_lexit() const {
  return m_lexit_;
}
inline void _UserInfo::set_m_lexit(::google::protobuf::int32 value) {
  set_has_m_lexit();
  m_lexit_ = value;
}

// required sint32 m_nItemType = 15;
inline bool _UserInfo::has_m_nitemtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void _UserInfo::set_has_m_nitemtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void _UserInfo::clear_has_m_nitemtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void _UserInfo::clear_m_nitemtype() {
  m_nitemtype_ = 0;
  clear_has_m_nitemtype();
}
inline ::google::protobuf::int32 _UserInfo::m_nitemtype() const {
  return m_nitemtype_;
}
inline void _UserInfo::set_m_nitemtype(::google::protobuf::int32 value) {
  set_has_m_nitemtype();
  m_nitemtype_ = value;
}

// required sint32 m_lAck = 16;
inline bool _UserInfo::has_m_lack() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void _UserInfo::set_has_m_lack() {
  _has_bits_[0] |= 0x00008000u;
}
inline void _UserInfo::clear_has_m_lack() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void _UserInfo::clear_m_lack() {
  m_lack_ = 0;
  clear_has_m_lack();
}
inline ::google::protobuf::int32 _UserInfo::m_lack() const {
  return m_lack_;
}
inline void _UserInfo::set_m_lack(::google::protobuf::int32 value) {
  set_has_m_lack();
  m_lack_ = value;
}

// required sint32 m_lJackpot = 17;
inline bool _UserInfo::has_m_ljackpot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void _UserInfo::set_has_m_ljackpot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void _UserInfo::clear_has_m_ljackpot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void _UserInfo::clear_m_ljackpot() {
  m_ljackpot_ = 0;
  clear_has_m_ljackpot();
}
inline ::google::protobuf::int32 _UserInfo::m_ljackpot() const {
  return m_ljackpot_;
}
inline void _UserInfo::set_m_ljackpot(::google::protobuf::int32 value) {
  set_has_m_ljackpot();
  m_ljackpot_ = value;
}

// required sint32 m_lDieCardsDealt = 18;
inline bool _UserInfo::has_m_ldiecardsdealt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void _UserInfo::set_has_m_ldiecardsdealt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void _UserInfo::clear_has_m_ldiecardsdealt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void _UserInfo::clear_m_ldiecardsdealt() {
  m_ldiecardsdealt_ = 0;
  clear_has_m_ldiecardsdealt();
}
inline ::google::protobuf::int32 _UserInfo::m_ldiecardsdealt() const {
  return m_ldiecardsdealt_;
}
inline void _UserInfo::set_m_ldiecardsdealt(::google::protobuf::int32 value) {
  set_has_m_ldiecardsdealt();
  m_ldiecardsdealt_ = value;
}

// -------------------------------------------------------------------

// _OneCard

// required int32 m_nIndex = 1;
inline bool _OneCard::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _OneCard::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _OneCard::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _OneCard::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _OneCard::m_nindex() const {
  return m_nindex_;
}
inline void _OneCard::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required int32 m_lCardIndex = 2;
inline bool _OneCard::has_m_lcardindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _OneCard::set_has_m_lcardindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _OneCard::clear_has_m_lcardindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _OneCard::clear_m_lcardindex() {
  m_lcardindex_ = 0;
  clear_has_m_lcardindex();
}
inline ::google::protobuf::int32 _OneCard::m_lcardindex() const {
  return m_lcardindex_;
}
inline void _OneCard::set_m_lcardindex(::google::protobuf::int32 value) {
  set_has_m_lcardindex();
  m_lcardindex_ = value;
}

// -------------------------------------------------------------------

// _VecMoney

// required sint64 VecMoney = 1;
inline bool _VecMoney::has_vecmoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _VecMoney::set_has_vecmoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _VecMoney::clear_has_vecmoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _VecMoney::clear_vecmoney() {
  vecmoney_ = GOOGLE_LONGLONG(0);
  clear_has_vecmoney();
}
inline ::google::protobuf::int64 _VecMoney::vecmoney() const {
  return vecmoney_;
}
inline void _VecMoney::set_vecmoney(::google::protobuf::int64 value) {
  set_has_vecmoney();
  vecmoney_ = value;
}

// -------------------------------------------------------------------

// _WinLoseInfo

// required sint64 m_llCMoney = 1;
inline bool _WinLoseInfo::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _WinLoseInfo::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _WinLoseInfo::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _WinLoseInfo::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 _WinLoseInfo::m_llcmoney() const {
  return m_llcmoney_;
}
inline void _WinLoseInfo::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// required sint32 m_lWin = 2;
inline bool _WinLoseInfo::has_m_lwin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _WinLoseInfo::set_has_m_lwin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _WinLoseInfo::clear_has_m_lwin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _WinLoseInfo::clear_m_lwin() {
  m_lwin_ = 0;
  clear_has_m_lwin();
}
inline ::google::protobuf::int32 _WinLoseInfo::m_lwin() const {
  return m_lwin_;
}
inline void _WinLoseInfo::set_m_lwin(::google::protobuf::int32 value) {
  set_has_m_lwin();
  m_lwin_ = value;
}

// required sint32 m_lLose = 3;
inline bool _WinLoseInfo::has_m_llose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _WinLoseInfo::set_has_m_llose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _WinLoseInfo::clear_has_m_llose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _WinLoseInfo::clear_m_llose() {
  m_llose_ = 0;
  clear_has_m_llose();
}
inline ::google::protobuf::int32 _WinLoseInfo::m_llose() const {
  return m_llose_;
}
inline void _WinLoseInfo::set_m_llose(::google::protobuf::int32 value) {
  set_has_m_llose();
  m_llose_ = value;
}

// required sint32 m_lReserved = 4;
inline bool _WinLoseInfo::has_m_lreserved() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _WinLoseInfo::set_has_m_lreserved() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _WinLoseInfo::clear_has_m_lreserved() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _WinLoseInfo::clear_m_lreserved() {
  m_lreserved_ = 0;
  clear_has_m_lreserved();
}
inline ::google::protobuf::int32 _WinLoseInfo::m_lreserved() const {
  return m_lreserved_;
}
inline void _WinLoseInfo::set_m_lreserved(::google::protobuf::int32 value) {
  set_has_m_lreserved();
  m_lreserved_ = value;
}

// -------------------------------------------------------------------

// _VecUSN

// required int64 USN = 1;
inline bool _VecUSN::has_usn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _VecUSN::set_has_usn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _VecUSN::clear_has_usn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _VecUSN::clear_usn() {
  usn_ = GOOGLE_LONGLONG(0);
  clear_has_usn();
}
inline ::google::protobuf::int64 _VecUSN::usn() const {
  return usn_;
}
inline void _VecUSN::set_usn(::google::protobuf::int64 value) {
  set_has_usn();
  usn_ = value;
}

// -------------------------------------------------------------------

// _WAITINGUSERDATA

// required int32 m_lUSN = 1;
inline bool _WAITINGUSERDATA::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _WAITINGUSERDATA::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _WAITINGUSERDATA::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _WAITINGUSERDATA::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _WAITINGUSERDATA::m_lusn() const {
  return m_lusn_;
}
inline void _WAITINGUSERDATA::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_lTicketNum = 2;
inline bool _WAITINGUSERDATA::has_m_lticketnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _WAITINGUSERDATA::set_has_m_lticketnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _WAITINGUSERDATA::clear_has_m_lticketnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _WAITINGUSERDATA::clear_m_lticketnum() {
  m_lticketnum_ = 0;
  clear_has_m_lticketnum();
}
inline ::google::protobuf::int32 _WAITINGUSERDATA::m_lticketnum() const {
  return m_lticketnum_;
}
inline void _WAITINGUSERDATA::set_m_lticketnum(::google::protobuf::int32 value) {
  set_has_m_lticketnum();
  m_lticketnum_ = value;
}

// required int32 m_lBackColor = 3;
inline bool _WAITINGUSERDATA::has_m_lbackcolor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _WAITINGUSERDATA::set_has_m_lbackcolor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _WAITINGUSERDATA::clear_has_m_lbackcolor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _WAITINGUSERDATA::clear_m_lbackcolor() {
  m_lbackcolor_ = 0;
  clear_has_m_lbackcolor();
}
inline ::google::protobuf::int32 _WAITINGUSERDATA::m_lbackcolor() const {
  return m_lbackcolor_;
}
inline void _WAITINGUSERDATA::set_m_lbackcolor(::google::protobuf::int32 value) {
  set_has_m_lbackcolor();
  m_lbackcolor_ = value;
}

// required int32 m_bCallWeb = 4;
inline bool _WAITINGUSERDATA::has_m_bcallweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _WAITINGUSERDATA::set_has_m_bcallweb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _WAITINGUSERDATA::clear_has_m_bcallweb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _WAITINGUSERDATA::clear_m_bcallweb() {
  m_bcallweb_ = 0;
  clear_has_m_bcallweb();
}
inline ::google::protobuf::int32 _WAITINGUSERDATA::m_bcallweb() const {
  return m_bcallweb_;
}
inline void _WAITINGUSERDATA::set_m_bcallweb(::google::protobuf::int32 value) {
  set_has_m_bcallweb();
  m_bcallweb_ = value;
}

// -------------------------------------------------------------------

// CRefill

// required int64 m_llTime = 1;
inline bool CRefill::has_m_lltime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CRefill::set_has_m_lltime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CRefill::clear_has_m_lltime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CRefill::clear_m_lltime() {
  m_lltime_ = GOOGLE_LONGLONG(0);
  clear_has_m_lltime();
}
inline ::google::protobuf::int64 CRefill::m_lltime() const {
  return m_lltime_;
}
inline void CRefill::set_m_lltime(::google::protobuf::int64 value) {
  set_has_m_lltime();
  m_lltime_ = value;
}

// required int32 m_nCnt = 2;
inline bool CRefill::has_m_ncnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CRefill::set_has_m_ncnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CRefill::clear_has_m_ncnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CRefill::clear_m_ncnt() {
  m_ncnt_ = 0;
  clear_has_m_ncnt();
}
inline ::google::protobuf::int32 CRefill::m_ncnt() const {
  return m_ncnt_;
}
inline void CRefill::set_m_ncnt(::google::protobuf::int32 value) {
  set_has_m_ncnt();
  m_ncnt_ = value;
}

// required int32 m_lPLevel = 3;
inline bool CRefill::has_m_lplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CRefill::set_has_m_lplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CRefill::clear_has_m_lplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CRefill::clear_m_lplevel() {
  m_lplevel_ = 0;
  clear_has_m_lplevel();
}
inline ::google::protobuf::int32 CRefill::m_lplevel() const {
  return m_lplevel_;
}
inline void CRefill::set_m_lplevel(::google::protobuf::int32 value) {
  set_has_m_lplevel();
  m_lplevel_ = value;
}

// -------------------------------------------------------------------

// _ItemList

// repeated .Game_Poker._Item m_lstItem = 1;
inline int _ItemList::m_lstitem_size() const {
  return m_lstitem_.size();
}
inline void _ItemList::clear_m_lstitem() {
  m_lstitem_.Clear();
}
inline const ::Game_Poker::_Item& _ItemList::m_lstitem(int index) const {
  return m_lstitem_.Get(index);
}
inline ::Game_Poker::_Item* _ItemList::mutable_m_lstitem(int index) {
  return m_lstitem_.Mutable(index);
}
inline ::Game_Poker::_Item* _ItemList::add_m_lstitem() {
  return m_lstitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Item >&
_ItemList::m_lstitem() const {
  return m_lstitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Item >*
_ItemList::mutable_m_lstitem() {
  return &m_lstitem_;
}

// -------------------------------------------------------------------

// _Item

// required int32 m_lFucnsrl = 1;
inline bool _Item::has_m_lfucnsrl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _Item::set_has_m_lfucnsrl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _Item::clear_has_m_lfucnsrl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _Item::clear_m_lfucnsrl() {
  m_lfucnsrl_ = 0;
  clear_has_m_lfucnsrl();
}
inline ::google::protobuf::int32 _Item::m_lfucnsrl() const {
  return m_lfucnsrl_;
}
inline void _Item::set_m_lfucnsrl(::google::protobuf::int32 value) {
  set_has_m_lfucnsrl();
  m_lfucnsrl_ = value;
}

// required int64 m_llStartTime = 2;
inline bool _Item::has_m_llstarttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _Item::set_has_m_llstarttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _Item::clear_has_m_llstarttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _Item::clear_m_llstarttime() {
  m_llstarttime_ = GOOGLE_LONGLONG(0);
  clear_has_m_llstarttime();
}
inline ::google::protobuf::int64 _Item::m_llstarttime() const {
  return m_llstarttime_;
}
inline void _Item::set_m_llstarttime(::google::protobuf::int64 value) {
  set_has_m_llstarttime();
  m_llstarttime_ = value;
}

// required int64 m_llEndTime = 3;
inline bool _Item::has_m_llendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _Item::set_has_m_llendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _Item::clear_has_m_llendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _Item::clear_m_llendtime() {
  m_llendtime_ = GOOGLE_LONGLONG(0);
  clear_has_m_llendtime();
}
inline ::google::protobuf::int64 _Item::m_llendtime() const {
  return m_llendtime_;
}
inline void _Item::set_m_llendtime(::google::protobuf::int64 value) {
  set_has_m_llendtime();
  m_llendtime_ = value;
}

// required int64 m_llCount = 4;
inline bool _Item::has_m_llcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _Item::set_has_m_llcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _Item::clear_has_m_llcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _Item::clear_m_llcount() {
  m_llcount_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcount();
}
inline ::google::protobuf::int64 _Item::m_llcount() const {
  return m_llcount_;
}
inline void _Item::set_m_llcount(::google::protobuf::int64 value) {
  set_has_m_llcount();
  m_llcount_ = value;
}

// -------------------------------------------------------------------

// _RCUser

// required int32 m_lUSN = 1;
inline bool _RCUser::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _RCUser::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _RCUser::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _RCUser::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _RCUser::m_lusn() const {
  return m_lusn_;
}
inline void _RCUser::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_lJumin = 2;
inline bool _RCUser::has_m_ljumin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _RCUser::set_has_m_ljumin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _RCUser::clear_has_m_ljumin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _RCUser::clear_m_ljumin() {
  m_ljumin_ = 0;
  clear_has_m_ljumin();
}
inline ::google::protobuf::int32 _RCUser::m_ljumin() const {
  return m_ljumin_;
}
inline void _RCUser::set_m_ljumin(::google::protobuf::int32 value) {
  set_has_m_ljumin();
  m_ljumin_ = value;
}

// required int32 m_lFirstUSN = 3;
inline bool _RCUser::has_m_lfirstusn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _RCUser::set_has_m_lfirstusn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _RCUser::clear_has_m_lfirstusn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _RCUser::clear_m_lfirstusn() {
  m_lfirstusn_ = 0;
  clear_has_m_lfirstusn();
}
inline ::google::protobuf::int32 _RCUser::m_lfirstusn() const {
  return m_lfirstusn_;
}
inline void _RCUser::set_m_lfirstusn(::google::protobuf::int32 value) {
  set_has_m_lfirstusn();
  m_lfirstusn_ = value;
}

// required int32 m_lAgeIndex = 4;
inline bool _RCUser::has_m_lageindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _RCUser::set_has_m_lageindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _RCUser::clear_has_m_lageindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _RCUser::clear_m_lageindex() {
  m_lageindex_ = 0;
  clear_has_m_lageindex();
}
inline ::google::protobuf::int32 _RCUser::m_lageindex() const {
  return m_lageindex_;
}
inline void _RCUser::set_m_lageindex(::google::protobuf::int32 value) {
  set_has_m_lageindex();
  m_lageindex_ = value;
}

// required int32 m_lJobIndex = 5;
inline bool _RCUser::has_m_ljobindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _RCUser::set_has_m_ljobindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _RCUser::clear_has_m_ljobindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _RCUser::clear_m_ljobindex() {
  m_ljobindex_ = 0;
  clear_has_m_ljobindex();
}
inline ::google::protobuf::int32 _RCUser::m_ljobindex() const {
  return m_ljobindex_;
}
inline void _RCUser::set_m_ljobindex(::google::protobuf::int32 value) {
  set_has_m_ljobindex();
  m_ljobindex_ = value;
}

// required int32 m_lRegionIndex = 6;
inline bool _RCUser::has_m_lregionindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _RCUser::set_has_m_lregionindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _RCUser::clear_has_m_lregionindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _RCUser::clear_m_lregionindex() {
  m_lregionindex_ = 0;
  clear_has_m_lregionindex();
}
inline ::google::protobuf::int32 _RCUser::m_lregionindex() const {
  return m_lregionindex_;
}
inline void _RCUser::set_m_lregionindex(::google::protobuf::int32 value) {
  set_has_m_lregionindex();
  m_lregionindex_ = value;
}

// required int32 m_lGuildIndex = 7;
inline bool _RCUser::has_m_lguildindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _RCUser::set_has_m_lguildindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _RCUser::clear_has_m_lguildindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _RCUser::clear_m_lguildindex() {
  m_lguildindex_ = 0;
  clear_has_m_lguildindex();
}
inline ::google::protobuf::int32 _RCUser::m_lguildindex() const {
  return m_lguildindex_;
}
inline void _RCUser::set_m_lguildindex(::google::protobuf::int32 value) {
  set_has_m_lguildindex();
  m_lguildindex_ = value;
}

// required int32 m_lMemberIndex = 8;
inline bool _RCUser::has_m_lmemberindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _RCUser::set_has_m_lmemberindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _RCUser::clear_has_m_lmemberindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _RCUser::clear_m_lmemberindex() {
  m_lmemberindex_ = 0;
  clear_has_m_lmemberindex();
}
inline ::google::protobuf::int32 _RCUser::m_lmemberindex() const {
  return m_lmemberindex_;
}
inline void _RCUser::set_m_lmemberindex(::google::protobuf::int32 value) {
  set_has_m_lmemberindex();
  m_lmemberindex_ = value;
}

// required int32 m_lClientIP = 9;
inline bool _RCUser::has_m_lclientip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _RCUser::set_has_m_lclientip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _RCUser::clear_has_m_lclientip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _RCUser::clear_m_lclientip() {
  m_lclientip_ = 0;
  clear_has_m_lclientip();
}
inline ::google::protobuf::int32 _RCUser::m_lclientip() const {
  return m_lclientip_;
}
inline void _RCUser::set_m_lclientip(::google::protobuf::int32 value) {
  set_has_m_lclientip();
  m_lclientip_ = value;
}

// required int32 m_lGatewayIP = 10;
inline bool _RCUser::has_m_lgatewayip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _RCUser::set_has_m_lgatewayip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _RCUser::clear_has_m_lgatewayip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _RCUser::clear_m_lgatewayip() {
  m_lgatewayip_ = 0;
  clear_has_m_lgatewayip();
}
inline ::google::protobuf::int32 _RCUser::m_lgatewayip() const {
  return m_lgatewayip_;
}
inline void _RCUser::set_m_lgatewayip(::google::protobuf::int32 value) {
  set_has_m_lgatewayip();
  m_lgatewayip_ = value;
}

// required int32 m_lMacAddress = 11;
inline bool _RCUser::has_m_lmacaddress() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _RCUser::set_has_m_lmacaddress() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _RCUser::clear_has_m_lmacaddress() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _RCUser::clear_m_lmacaddress() {
  m_lmacaddress_ = 0;
  clear_has_m_lmacaddress();
}
inline ::google::protobuf::int32 _RCUser::m_lmacaddress() const {
  return m_lmacaddress_;
}
inline void _RCUser::set_m_lmacaddress(::google::protobuf::int32 value) {
  set_has_m_lmacaddress();
  m_lmacaddress_ = value;
}

// required string m_sMobileInfo = 12;
inline bool _RCUser::has_m_smobileinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void _RCUser::set_has_m_smobileinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void _RCUser::clear_has_m_smobileinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void _RCUser::clear_m_smobileinfo() {
  if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_->clear();
  }
  clear_has_m_smobileinfo();
}
inline const ::std::string& _RCUser::m_smobileinfo() const {
  return *m_smobileinfo_;
}
inline void _RCUser::set_m_smobileinfo(const ::std::string& value) {
  set_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_ = new ::std::string;
  }
  m_smobileinfo_->assign(value);
}
inline void _RCUser::set_m_smobileinfo(const char* value) {
  set_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_ = new ::std::string;
  }
  m_smobileinfo_->assign(value);
}
inline void _RCUser::set_m_smobileinfo(const char* value, size_t size) {
  set_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_ = new ::std::string;
  }
  m_smobileinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _RCUser::mutable_m_smobileinfo() {
  set_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_ = new ::std::string;
  }
  return m_smobileinfo_;
}
inline ::std::string* _RCUser::release_m_smobileinfo() {
  clear_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_smobileinfo_;
    m_smobileinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sAuthKey = 13;
inline bool _RCUser::has_m_sauthkey() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void _RCUser::set_has_m_sauthkey() {
  _has_bits_[0] |= 0x00001000u;
}
inline void _RCUser::clear_has_m_sauthkey() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void _RCUser::clear_m_sauthkey() {
  if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_->clear();
  }
  clear_has_m_sauthkey();
}
inline const ::std::string& _RCUser::m_sauthkey() const {
  return *m_sauthkey_;
}
inline void _RCUser::set_m_sauthkey(const ::std::string& value) {
  set_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_ = new ::std::string;
  }
  m_sauthkey_->assign(value);
}
inline void _RCUser::set_m_sauthkey(const char* value) {
  set_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_ = new ::std::string;
  }
  m_sauthkey_->assign(value);
}
inline void _RCUser::set_m_sauthkey(const char* value, size_t size) {
  set_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_ = new ::std::string;
  }
  m_sauthkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _RCUser::mutable_m_sauthkey() {
  set_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_ = new ::std::string;
  }
  return m_sauthkey_;
}
inline ::std::string* _RCUser::release_m_sauthkey() {
  clear_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sauthkey_;
    m_sauthkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sUserGameData = 14;
inline bool _RCUser::has_m_susergamedata() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _RCUser::set_has_m_susergamedata() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _RCUser::clear_has_m_susergamedata() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _RCUser::clear_m_susergamedata() {
  if (m_susergamedata_ != &::google::protobuf::internal::kEmptyString) {
    m_susergamedata_->clear();
  }
  clear_has_m_susergamedata();
}
inline const ::std::string& _RCUser::m_susergamedata() const {
  return *m_susergamedata_;
}
inline void _RCUser::set_m_susergamedata(const ::std::string& value) {
  set_has_m_susergamedata();
  if (m_susergamedata_ == &::google::protobuf::internal::kEmptyString) {
    m_susergamedata_ = new ::std::string;
  }
  m_susergamedata_->assign(value);
}
inline void _RCUser::set_m_susergamedata(const char* value) {
  set_has_m_susergamedata();
  if (m_susergamedata_ == &::google::protobuf::internal::kEmptyString) {
    m_susergamedata_ = new ::std::string;
  }
  m_susergamedata_->assign(value);
}
inline void _RCUser::set_m_susergamedata(const char* value, size_t size) {
  set_has_m_susergamedata();
  if (m_susergamedata_ == &::google::protobuf::internal::kEmptyString) {
    m_susergamedata_ = new ::std::string;
  }
  m_susergamedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _RCUser::mutable_m_susergamedata() {
  set_has_m_susergamedata();
  if (m_susergamedata_ == &::google::protobuf::internal::kEmptyString) {
    m_susergamedata_ = new ::std::string;
  }
  return m_susergamedata_;
}
inline ::std::string* _RCUser::release_m_susergamedata() {
  clear_has_m_susergamedata();
  if (m_susergamedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_susergamedata_;
    m_susergamedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 m_nIndex = 15;
inline bool _RCUser::has_m_nindex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void _RCUser::set_has_m_nindex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void _RCUser::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void _RCUser::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _RCUser::m_nindex() const {
  return m_nindex_;
}
inline void _RCUser::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required string m_sNickName = 16;
inline bool _RCUser::has_m_snickname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void _RCUser::set_has_m_snickname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void _RCUser::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void _RCUser::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& _RCUser::m_snickname() const {
  return *m_snickname_;
}
inline void _RCUser::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _RCUser::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _RCUser::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _RCUser::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* _RCUser::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sUserID = 17;
inline bool _RCUser::has_m_suserid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void _RCUser::set_has_m_suserid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void _RCUser::clear_has_m_suserid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void _RCUser::clear_m_suserid() {
  if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
    m_suserid_->clear();
  }
  clear_has_m_suserid();
}
inline const ::std::string& _RCUser::m_suserid() const {
  return *m_suserid_;
}
inline void _RCUser::set_m_suserid(const ::std::string& value) {
  set_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    m_suserid_ = new ::std::string;
  }
  m_suserid_->assign(value);
}
inline void _RCUser::set_m_suserid(const char* value) {
  set_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    m_suserid_ = new ::std::string;
  }
  m_suserid_->assign(value);
}
inline void _RCUser::set_m_suserid(const char* value, size_t size) {
  set_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    m_suserid_ = new ::std::string;
  }
  m_suserid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _RCUser::mutable_m_suserid() {
  set_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    m_suserid_ = new ::std::string;
  }
  return m_suserid_;
}
inline ::std::string* _RCUser::release_m_suserid() {
  clear_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_suserid_;
    m_suserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sAvt = 18;
inline bool _RCUser::has_m_savt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void _RCUser::set_has_m_savt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void _RCUser::clear_has_m_savt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void _RCUser::clear_m_savt() {
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    m_savt_->clear();
  }
  clear_has_m_savt();
}
inline const ::std::string& _RCUser::m_savt() const {
  return *m_savt_;
}
inline void _RCUser::set_m_savt(const ::std::string& value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void _RCUser::set_m_savt(const char* value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void _RCUser::set_m_savt(const char* value, size_t size) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _RCUser::mutable_m_savt() {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  return m_savt_;
}
inline ::std::string* _RCUser::release_m_savt() {
  clear_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_savt_;
    m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 m_lCLevel = 19;
inline bool _RCUser::has_m_lclevel() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void _RCUser::set_has_m_lclevel() {
  _has_bits_[0] |= 0x00040000u;
}
inline void _RCUser::clear_has_m_lclevel() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void _RCUser::clear_m_lclevel() {
  m_lclevel_ = 0;
  clear_has_m_lclevel();
}
inline ::google::protobuf::int32 _RCUser::m_lclevel() const {
  return m_lclevel_;
}
inline void _RCUser::set_m_lclevel(::google::protobuf::int32 value) {
  set_has_m_lclevel();
  m_lclevel_ = value;
}

// required int32 m_lSex = 20;
inline bool _RCUser::has_m_lsex() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void _RCUser::set_has_m_lsex() {
  _has_bits_[0] |= 0x00080000u;
}
inline void _RCUser::clear_has_m_lsex() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void _RCUser::clear_m_lsex() {
  m_lsex_ = 0;
  clear_has_m_lsex();
}
inline ::google::protobuf::int32 _RCUser::m_lsex() const {
  return m_lsex_;
}
inline void _RCUser::set_m_lsex(::google::protobuf::int32 value) {
  set_has_m_lsex();
  m_lsex_ = value;
}

// required int64 m_llCMoney = 21;
inline bool _RCUser::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void _RCUser::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00100000u;
}
inline void _RCUser::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void _RCUser::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 _RCUser::m_llcmoney() const {
  return m_llcmoney_;
}
inline void _RCUser::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// required int64 m_llFMoney = 22;
inline bool _RCUser::has_m_llfmoney() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void _RCUser::set_has_m_llfmoney() {
  _has_bits_[0] |= 0x00200000u;
}
inline void _RCUser::clear_has_m_llfmoney() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void _RCUser::clear_m_llfmoney() {
  m_llfmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llfmoney();
}
inline ::google::protobuf::int64 _RCUser::m_llfmoney() const {
  return m_llfmoney_;
}
inline void _RCUser::set_m_llfmoney(::google::protobuf::int64 value) {
  set_has_m_llfmoney();
  m_llfmoney_ = value;
}

// required int64 m_llSafeMoney = 23;
inline bool _RCUser::has_m_llsafemoney() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void _RCUser::set_has_m_llsafemoney() {
  _has_bits_[0] |= 0x00400000u;
}
inline void _RCUser::clear_has_m_llsafemoney() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void _RCUser::clear_m_llsafemoney() {
  m_llsafemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llsafemoney();
}
inline ::google::protobuf::int64 _RCUser::m_llsafemoney() const {
  return m_llsafemoney_;
}
inline void _RCUser::set_m_llsafemoney(::google::protobuf::int64 value) {
  set_has_m_llsafemoney();
  m_llsafemoney_ = value;
}

// required int64 m_llPlastAllinDate = 24;
inline bool _RCUser::has_m_llplastallindate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void _RCUser::set_has_m_llplastallindate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void _RCUser::clear_has_m_llplastallindate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void _RCUser::clear_m_llplastallindate() {
  m_llplastallindate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llplastallindate();
}
inline ::google::protobuf::int64 _RCUser::m_llplastallindate() const {
  return m_llplastallindate_;
}
inline void _RCUser::set_m_llplastallindate(::google::protobuf::int64 value) {
  set_has_m_llplastallindate();
  m_llplastallindate_ = value;
}

// required int64 m_llPlastLogonDay = 25;
inline bool _RCUser::has_m_llplastlogonday() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void _RCUser::set_has_m_llplastlogonday() {
  _has_bits_[0] |= 0x01000000u;
}
inline void _RCUser::clear_has_m_llplastlogonday() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void _RCUser::clear_m_llplastlogonday() {
  m_llplastlogonday_ = GOOGLE_LONGLONG(0);
  clear_has_m_llplastlogonday();
}
inline ::google::protobuf::int64 _RCUser::m_llplastlogonday() const {
  return m_llplastlogonday_;
}
inline void _RCUser::set_m_llplastlogonday(::google::protobuf::int64 value) {
  set_has_m_llplastlogonday();
  m_llplastlogonday_ = value;
}

// required int32 m_lMTodayPlayCount = 26;
inline bool _RCUser::has_m_lmtodayplaycount() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void _RCUser::set_has_m_lmtodayplaycount() {
  _has_bits_[0] |= 0x02000000u;
}
inline void _RCUser::clear_has_m_lmtodayplaycount() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void _RCUser::clear_m_lmtodayplaycount() {
  m_lmtodayplaycount_ = 0;
  clear_has_m_lmtodayplaycount();
}
inline ::google::protobuf::int32 _RCUser::m_lmtodayplaycount() const {
  return m_lmtodayplaycount_;
}
inline void _RCUser::set_m_lmtodayplaycount(::google::protobuf::int32 value) {
  set_has_m_lmtodayplaycount();
  m_lmtodayplaycount_ = value;
}

// required int32 m_lMTodayPlayTime = 27;
inline bool _RCUser::has_m_lmtodayplaytime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void _RCUser::set_has_m_lmtodayplaytime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void _RCUser::clear_has_m_lmtodayplaytime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void _RCUser::clear_m_lmtodayplaytime() {
  m_lmtodayplaytime_ = 0;
  clear_has_m_lmtodayplaytime();
}
inline ::google::protobuf::int32 _RCUser::m_lmtodayplaytime() const {
  return m_lmtodayplaytime_;
}
inline void _RCUser::set_m_lmtodayplaytime(::google::protobuf::int32 value) {
  set_has_m_lmtodayplaytime();
  m_lmtodayplaytime_ = value;
}

// required int32 m_lPTotalPlayCount = 28;
inline bool _RCUser::has_m_lptotalplaycount() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void _RCUser::set_has_m_lptotalplaycount() {
  _has_bits_[0] |= 0x08000000u;
}
inline void _RCUser::clear_has_m_lptotalplaycount() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void _RCUser::clear_m_lptotalplaycount() {
  m_lptotalplaycount_ = 0;
  clear_has_m_lptotalplaycount();
}
inline ::google::protobuf::int32 _RCUser::m_lptotalplaycount() const {
  return m_lptotalplaycount_;
}
inline void _RCUser::set_m_lptotalplaycount(::google::protobuf::int32 value) {
  set_has_m_lptotalplaycount();
  m_lptotalplaycount_ = value;
}

// required .Game_Poker.CRefill m_cRefill = 29;
inline bool _RCUser::has_m_crefill() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void _RCUser::set_has_m_crefill() {
  _has_bits_[0] |= 0x10000000u;
}
inline void _RCUser::clear_has_m_crefill() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void _RCUser::clear_m_crefill() {
  if (m_crefill_ != NULL) m_crefill_->::Game_Poker::CRefill::Clear();
  clear_has_m_crefill();
}
inline const ::Game_Poker::CRefill& _RCUser::m_crefill() const {
  return m_crefill_ != NULL ? *m_crefill_ : *default_instance_->m_crefill_;
}
inline ::Game_Poker::CRefill* _RCUser::mutable_m_crefill() {
  set_has_m_crefill();
  if (m_crefill_ == NULL) m_crefill_ = new ::Game_Poker::CRefill;
  return m_crefill_;
}
inline ::Game_Poker::CRefill* _RCUser::release_m_crefill() {
  clear_has_m_crefill();
  ::Game_Poker::CRefill* temp = m_crefill_;
  m_crefill_ = NULL;
  return temp;
}

// required int64 m_llPExtMoney = 30;
inline bool _RCUser::has_m_llpextmoney() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void _RCUser::set_has_m_llpextmoney() {
  _has_bits_[0] |= 0x20000000u;
}
inline void _RCUser::clear_has_m_llpextmoney() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void _RCUser::clear_m_llpextmoney() {
  m_llpextmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpextmoney();
}
inline ::google::protobuf::int64 _RCUser::m_llpextmoney() const {
  return m_llpextmoney_;
}
inline void _RCUser::set_m_llpextmoney(::google::protobuf::int64 value) {
  set_has_m_llpextmoney();
  m_llpextmoney_ = value;
}

// required int64 m_llPExtendDate = 31;
inline bool _RCUser::has_m_llpextenddate() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void _RCUser::set_has_m_llpextenddate() {
  _has_bits_[0] |= 0x40000000u;
}
inline void _RCUser::clear_has_m_llpextenddate() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void _RCUser::clear_m_llpextenddate() {
  m_llpextenddate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpextenddate();
}
inline ::google::protobuf::int64 _RCUser::m_llpextenddate() const {
  return m_llpextenddate_;
}
inline void _RCUser::set_m_llpextenddate(::google::protobuf::int64 value) {
  set_has_m_llpextenddate();
  m_llpextenddate_ = value;
}

// required int64 m_llPBonusDate = 32;
inline bool _RCUser::has_m_llpbonusdate() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void _RCUser::set_has_m_llpbonusdate() {
  _has_bits_[0] |= 0x80000000u;
}
inline void _RCUser::clear_has_m_llpbonusdate() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void _RCUser::clear_m_llpbonusdate() {
  m_llpbonusdate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpbonusdate();
}
inline ::google::protobuf::int64 _RCUser::m_llpbonusdate() const {
  return m_llpbonusdate_;
}
inline void _RCUser::set_m_llpbonusdate(::google::protobuf::int64 value) {
  set_has_m_llpbonusdate();
  m_llpbonusdate_ = value;
}

// required int32 m_lMMonthPlayCount = 33;
inline bool _RCUser::has_m_lmmonthplaycount() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void _RCUser::set_has_m_lmmonthplaycount() {
  _has_bits_[1] |= 0x00000001u;
}
inline void _RCUser::clear_has_m_lmmonthplaycount() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void _RCUser::clear_m_lmmonthplaycount() {
  m_lmmonthplaycount_ = 0;
  clear_has_m_lmmonthplaycount();
}
inline ::google::protobuf::int32 _RCUser::m_lmmonthplaycount() const {
  return m_lmmonthplaycount_;
}
inline void _RCUser::set_m_lmmonthplaycount(::google::protobuf::int32 value) {
  set_has_m_lmmonthplaycount();
  m_lmmonthplaycount_ = value;
}

// required int32 m_lMMonthPlayTime = 34;
inline bool _RCUser::has_m_lmmonthplaytime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void _RCUser::set_has_m_lmmonthplaytime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void _RCUser::clear_has_m_lmmonthplaytime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void _RCUser::clear_m_lmmonthplaytime() {
  m_lmmonthplaytime_ = 0;
  clear_has_m_lmmonthplaytime();
}
inline ::google::protobuf::int32 _RCUser::m_lmmonthplaytime() const {
  return m_lmmonthplaytime_;
}
inline void _RCUser::set_m_lmmonthplaytime(::google::protobuf::int32 value) {
  set_has_m_lmmonthplaytime();
  m_lmmonthplaytime_ = value;
}

// required .Game_Poker._CWinLose m_cWinLose = 35;
inline bool _RCUser::has_m_cwinlose() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void _RCUser::set_has_m_cwinlose() {
  _has_bits_[1] |= 0x00000004u;
}
inline void _RCUser::clear_has_m_cwinlose() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void _RCUser::clear_m_cwinlose() {
  if (m_cwinlose_ != NULL) m_cwinlose_->::Game_Poker::_CWinLose::Clear();
  clear_has_m_cwinlose();
}
inline const ::Game_Poker::_CWinLose& _RCUser::m_cwinlose() const {
  return m_cwinlose_ != NULL ? *m_cwinlose_ : *default_instance_->m_cwinlose_;
}
inline ::Game_Poker::_CWinLose* _RCUser::mutable_m_cwinlose() {
  set_has_m_cwinlose();
  if (m_cwinlose_ == NULL) m_cwinlose_ = new ::Game_Poker::_CWinLose;
  return m_cwinlose_;
}
inline ::Game_Poker::_CWinLose* _RCUser::release_m_cwinlose() {
  clear_has_m_cwinlose();
  ::Game_Poker::_CWinLose* temp = m_cwinlose_;
  m_cwinlose_ = NULL;
  return temp;
}

// required int32 m_lGDisCnt = 36;
inline bool _RCUser::has_m_lgdiscnt() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void _RCUser::set_has_m_lgdiscnt() {
  _has_bits_[1] |= 0x00000008u;
}
inline void _RCUser::clear_has_m_lgdiscnt() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void _RCUser::clear_m_lgdiscnt() {
  m_lgdiscnt_ = 0;
  clear_has_m_lgdiscnt();
}
inline ::google::protobuf::int32 _RCUser::m_lgdiscnt() const {
  return m_lgdiscnt_;
}
inline void _RCUser::set_m_lgdiscnt(::google::protobuf::int32 value) {
  set_has_m_lgdiscnt();
  m_lgdiscnt_ = value;
}

// required int64 m_llGlastLogonDay = 37;
inline bool _RCUser::has_m_llglastlogonday() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void _RCUser::set_has_m_llglastlogonday() {
  _has_bits_[1] |= 0x00000010u;
}
inline void _RCUser::clear_has_m_llglastlogonday() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void _RCUser::clear_m_llglastlogonday() {
  m_llglastlogonday_ = GOOGLE_LONGLONG(0);
  clear_has_m_llglastlogonday();
}
inline ::google::protobuf::int64 _RCUser::m_llglastlogonday() const {
  return m_llglastlogonday_;
}
inline void _RCUser::set_m_llglastlogonday(::google::protobuf::int64 value) {
  set_has_m_llglastlogonday();
  m_llglastlogonday_ = value;
}

// required int64 m_llGRegDate = 38;
inline bool _RCUser::has_m_llgregdate() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void _RCUser::set_has_m_llgregdate() {
  _has_bits_[1] |= 0x00000020u;
}
inline void _RCUser::clear_has_m_llgregdate() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void _RCUser::clear_m_llgregdate() {
  m_llgregdate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llgregdate();
}
inline ::google::protobuf::int64 _RCUser::m_llgregdate() const {
  return m_llgregdate_;
}
inline void _RCUser::set_m_llgregdate(::google::protobuf::int64 value) {
  set_has_m_llgregdate();
  m_llgregdate_ = value;
}

// required int64 m_llGFirstPlayDate = 39;
inline bool _RCUser::has_m_llgfirstplaydate() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void _RCUser::set_has_m_llgfirstplaydate() {
  _has_bits_[1] |= 0x00000040u;
}
inline void _RCUser::clear_has_m_llgfirstplaydate() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void _RCUser::clear_m_llgfirstplaydate() {
  m_llgfirstplaydate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llgfirstplaydate();
}
inline ::google::protobuf::int64 _RCUser::m_llgfirstplaydate() const {
  return m_llgfirstplaydate_;
}
inline void _RCUser::set_m_llgfirstplaydate(::google::protobuf::int64 value) {
  set_has_m_llgfirstplaydate();
  m_llgfirstplaydate_ = value;
}

// required int32 m_lGTodayPlayCount = 40;
inline bool _RCUser::has_m_lgtodayplaycount() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void _RCUser::set_has_m_lgtodayplaycount() {
  _has_bits_[1] |= 0x00000080u;
}
inline void _RCUser::clear_has_m_lgtodayplaycount() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void _RCUser::clear_m_lgtodayplaycount() {
  m_lgtodayplaycount_ = 0;
  clear_has_m_lgtodayplaycount();
}
inline ::google::protobuf::int32 _RCUser::m_lgtodayplaycount() const {
  return m_lgtodayplaycount_;
}
inline void _RCUser::set_m_lgtodayplaycount(::google::protobuf::int32 value) {
  set_has_m_lgtodayplaycount();
  m_lgtodayplaycount_ = value;
}

// required int32 m_lGTodayPlayTime = 41;
inline bool _RCUser::has_m_lgtodayplaytime() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void _RCUser::set_has_m_lgtodayplaytime() {
  _has_bits_[1] |= 0x00000100u;
}
inline void _RCUser::clear_has_m_lgtodayplaytime() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void _RCUser::clear_m_lgtodayplaytime() {
  m_lgtodayplaytime_ = 0;
  clear_has_m_lgtodayplaytime();
}
inline ::google::protobuf::int32 _RCUser::m_lgtodayplaytime() const {
  return m_lgtodayplaytime_;
}
inline void _RCUser::set_m_lgtodayplaytime(::google::protobuf::int32 value) {
  set_has_m_lgtodayplaytime();
  m_lgtodayplaytime_ = value;
}

// required int32 m_lGTotalPlayCount = 42;
inline bool _RCUser::has_m_lgtotalplaycount() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void _RCUser::set_has_m_lgtotalplaycount() {
  _has_bits_[1] |= 0x00000200u;
}
inline void _RCUser::clear_has_m_lgtotalplaycount() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void _RCUser::clear_m_lgtotalplaycount() {
  m_lgtotalplaycount_ = 0;
  clear_has_m_lgtotalplaycount();
}
inline ::google::protobuf::int32 _RCUser::m_lgtotalplaycount() const {
  return m_lgtotalplaycount_;
}
inline void _RCUser::set_m_lgtotalplaycount(::google::protobuf::int32 value) {
  set_has_m_lgtotalplaycount();
  m_lgtotalplaycount_ = value;
}

// required int32 m_lGTotalPlayTime = 43;
inline bool _RCUser::has_m_lgtotalplaytime() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void _RCUser::set_has_m_lgtotalplaytime() {
  _has_bits_[1] |= 0x00000400u;
}
inline void _RCUser::clear_has_m_lgtotalplaytime() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void _RCUser::clear_m_lgtotalplaytime() {
  m_lgtotalplaytime_ = 0;
  clear_has_m_lgtotalplaytime();
}
inline ::google::protobuf::int32 _RCUser::m_lgtotalplaytime() const {
  return m_lgtotalplaytime_;
}
inline void _RCUser::set_m_lgtotalplaytime(::google::protobuf::int32 value) {
  set_has_m_lgtotalplaytime();
  m_lgtotalplaytime_ = value;
}

// required int32 m_lGAllinCnt = 44;
inline bool _RCUser::has_m_lgallincnt() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void _RCUser::set_has_m_lgallincnt() {
  _has_bits_[1] |= 0x00000800u;
}
inline void _RCUser::clear_has_m_lgallincnt() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void _RCUser::clear_m_lgallincnt() {
  m_lgallincnt_ = 0;
  clear_has_m_lgallincnt();
}
inline ::google::protobuf::int32 _RCUser::m_lgallincnt() const {
  return m_lgallincnt_;
}
inline void _RCUser::set_m_lgallincnt(::google::protobuf::int32 value) {
  set_has_m_lgallincnt();
  m_lgallincnt_ = value;
}

// required int32 m_lGAllinOut = 45;
inline bool _RCUser::has_m_lgallinout() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void _RCUser::set_has_m_lgallinout() {
  _has_bits_[1] |= 0x00001000u;
}
inline void _RCUser::clear_has_m_lgallinout() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void _RCUser::clear_m_lgallinout() {
  m_lgallinout_ = 0;
  clear_has_m_lgallinout();
}
inline ::google::protobuf::int32 _RCUser::m_lgallinout() const {
  return m_lgallinout_;
}
inline void _RCUser::set_m_lgallinout(::google::protobuf::int32 value) {
  set_has_m_lgallinout();
  m_lgallinout_ = value;
}

// required int64 m_llGLastAllinDate = 46;
inline bool _RCUser::has_m_llglastallindate() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void _RCUser::set_has_m_llglastallindate() {
  _has_bits_[1] |= 0x00002000u;
}
inline void _RCUser::clear_has_m_llglastallindate() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void _RCUser::clear_m_llglastallindate() {
  m_llglastallindate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llglastallindate();
}
inline ::google::protobuf::int64 _RCUser::m_llglastallindate() const {
  return m_llglastallindate_;
}
inline void _RCUser::set_m_llglastallindate(::google::protobuf::int64 value) {
  set_has_m_llglastallindate();
  m_llglastallindate_ = value;
}

// required .Game_Poker._CWinLose m_cWinLose_Today = 47;
inline bool _RCUser::has_m_cwinlose_today() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void _RCUser::set_has_m_cwinlose_today() {
  _has_bits_[1] |= 0x00004000u;
}
inline void _RCUser::clear_has_m_cwinlose_today() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void _RCUser::clear_m_cwinlose_today() {
  if (m_cwinlose_today_ != NULL) m_cwinlose_today_->::Game_Poker::_CWinLose::Clear();
  clear_has_m_cwinlose_today();
}
inline const ::Game_Poker::_CWinLose& _RCUser::m_cwinlose_today() const {
  return m_cwinlose_today_ != NULL ? *m_cwinlose_today_ : *default_instance_->m_cwinlose_today_;
}
inline ::Game_Poker::_CWinLose* _RCUser::mutable_m_cwinlose_today() {
  set_has_m_cwinlose_today();
  if (m_cwinlose_today_ == NULL) m_cwinlose_today_ = new ::Game_Poker::_CWinLose;
  return m_cwinlose_today_;
}
inline ::Game_Poker::_CWinLose* _RCUser::release_m_cwinlose_today() {
  clear_has_m_cwinlose_today();
  ::Game_Poker::_CWinLose* temp = m_cwinlose_today_;
  m_cwinlose_today_ = NULL;
  return temp;
}

// required int64 m_llGTodayMoney = 48;
inline bool _RCUser::has_m_llgtodaymoney() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void _RCUser::set_has_m_llgtodaymoney() {
  _has_bits_[1] |= 0x00008000u;
}
inline void _RCUser::clear_has_m_llgtodaymoney() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void _RCUser::clear_m_llgtodaymoney() {
  m_llgtodaymoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llgtodaymoney();
}
inline ::google::protobuf::int64 _RCUser::m_llgtodaymoney() const {
  return m_llgtodaymoney_;
}
inline void _RCUser::set_m_llgtodaymoney(::google::protobuf::int64 value) {
  set_has_m_llgtodaymoney();
  m_llgtodaymoney_ = value;
}

// required int32 m_lFourCardCnt = 49;
inline bool _RCUser::has_m_lfourcardcnt() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void _RCUser::set_has_m_lfourcardcnt() {
  _has_bits_[1] |= 0x00010000u;
}
inline void _RCUser::clear_has_m_lfourcardcnt() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void _RCUser::clear_m_lfourcardcnt() {
  m_lfourcardcnt_ = 0;
  clear_has_m_lfourcardcnt();
}
inline ::google::protobuf::int32 _RCUser::m_lfourcardcnt() const {
  return m_lfourcardcnt_;
}
inline void _RCUser::set_m_lfourcardcnt(::google::protobuf::int32 value) {
  set_has_m_lfourcardcnt();
  m_lfourcardcnt_ = value;
}

// required int32 m_lStraightFlushCnt = 50;
inline bool _RCUser::has_m_lstraightflushcnt() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void _RCUser::set_has_m_lstraightflushcnt() {
  _has_bits_[1] |= 0x00020000u;
}
inline void _RCUser::clear_has_m_lstraightflushcnt() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void _RCUser::clear_m_lstraightflushcnt() {
  m_lstraightflushcnt_ = 0;
  clear_has_m_lstraightflushcnt();
}
inline ::google::protobuf::int32 _RCUser::m_lstraightflushcnt() const {
  return m_lstraightflushcnt_;
}
inline void _RCUser::set_m_lstraightflushcnt(::google::protobuf::int32 value) {
  set_has_m_lstraightflushcnt();
  m_lstraightflushcnt_ = value;
}

// required int32 m_lRoyalStraightFlushCnt = 51;
inline bool _RCUser::has_m_lroyalstraightflushcnt() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void _RCUser::set_has_m_lroyalstraightflushcnt() {
  _has_bits_[1] |= 0x00040000u;
}
inline void _RCUser::clear_has_m_lroyalstraightflushcnt() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void _RCUser::clear_m_lroyalstraightflushcnt() {
  m_lroyalstraightflushcnt_ = 0;
  clear_has_m_lroyalstraightflushcnt();
}
inline ::google::protobuf::int32 _RCUser::m_lroyalstraightflushcnt() const {
  return m_lroyalstraightflushcnt_;
}
inline void _RCUser::set_m_lroyalstraightflushcnt(::google::protobuf::int32 value) {
  set_has_m_lroyalstraightflushcnt();
  m_lroyalstraightflushcnt_ = value;
}

// required int32 m_nReserve01 = 52;
inline bool _RCUser::has_m_nreserve01() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void _RCUser::set_has_m_nreserve01() {
  _has_bits_[1] |= 0x00080000u;
}
inline void _RCUser::clear_has_m_nreserve01() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void _RCUser::clear_m_nreserve01() {
  m_nreserve01_ = 0;
  clear_has_m_nreserve01();
}
inline ::google::protobuf::int32 _RCUser::m_nreserve01() const {
  return m_nreserve01_;
}
inline void _RCUser::set_m_nreserve01(::google::protobuf::int32 value) {
  set_has_m_nreserve01();
  m_nreserve01_ = value;
}

// required int32 m_nReserve02 = 53;
inline bool _RCUser::has_m_nreserve02() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void _RCUser::set_has_m_nreserve02() {
  _has_bits_[1] |= 0x00100000u;
}
inline void _RCUser::clear_has_m_nreserve02() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void _RCUser::clear_m_nreserve02() {
  m_nreserve02_ = 0;
  clear_has_m_nreserve02();
}
inline ::google::protobuf::int32 _RCUser::m_nreserve02() const {
  return m_nreserve02_;
}
inline void _RCUser::set_m_nreserve02(::google::protobuf::int32 value) {
  set_has_m_nreserve02();
  m_nreserve02_ = value;
}

// required .Game_Poker._ItemList m_ItemList = 54;
inline bool _RCUser::has_m_itemlist() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void _RCUser::set_has_m_itemlist() {
  _has_bits_[1] |= 0x00200000u;
}
inline void _RCUser::clear_has_m_itemlist() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void _RCUser::clear_m_itemlist() {
  if (m_itemlist_ != NULL) m_itemlist_->::Game_Poker::_ItemList::Clear();
  clear_has_m_itemlist();
}
inline const ::Game_Poker::_ItemList& _RCUser::m_itemlist() const {
  return m_itemlist_ != NULL ? *m_itemlist_ : *default_instance_->m_itemlist_;
}
inline ::Game_Poker::_ItemList* _RCUser::mutable_m_itemlist() {
  set_has_m_itemlist();
  if (m_itemlist_ == NULL) m_itemlist_ = new ::Game_Poker::_ItemList;
  return m_itemlist_;
}
inline ::Game_Poker::_ItemList* _RCUser::release_m_itemlist() {
  clear_has_m_itemlist();
  ::Game_Poker::_ItemList* temp = m_itemlist_;
  m_itemlist_ = NULL;
  return temp;
}

// required int64 m_llJoinDate = 55;
inline bool _RCUser::has_m_lljoindate() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void _RCUser::set_has_m_lljoindate() {
  _has_bits_[1] |= 0x00400000u;
}
inline void _RCUser::clear_has_m_lljoindate() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void _RCUser::clear_m_lljoindate() {
  m_lljoindate_ = GOOGLE_LONGLONG(0);
  clear_has_m_lljoindate();
}
inline ::google::protobuf::int64 _RCUser::m_lljoindate() const {
  return m_lljoindate_;
}
inline void _RCUser::set_m_lljoindate(::google::protobuf::int64 value) {
  set_has_m_lljoindate();
  m_lljoindate_ = value;
}

// required int64 m_llPlayDate = 56;
inline bool _RCUser::has_m_llplaydate() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void _RCUser::set_has_m_llplaydate() {
  _has_bits_[1] |= 0x00800000u;
}
inline void _RCUser::clear_has_m_llplaydate() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void _RCUser::clear_m_llplaydate() {
  m_llplaydate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llplaydate();
}
inline ::google::protobuf::int64 _RCUser::m_llplaydate() const {
  return m_llplaydate_;
}
inline void _RCUser::set_m_llplaydate(::google::protobuf::int64 value) {
  set_has_m_llplaydate();
  m_llplaydate_ = value;
}

// -------------------------------------------------------------------

// _RCUserData

// -------------------------------------------------------------------

// _Option

// required string m_sRoomTitle = 1;
inline bool _Option::has_m_sroomtitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _Option::set_has_m_sroomtitle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _Option::clear_has_m_sroomtitle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _Option::clear_m_sroomtitle() {
  if (m_sroomtitle_ != &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_->clear();
  }
  clear_has_m_sroomtitle();
}
inline const ::std::string& _Option::m_sroomtitle() const {
  return *m_sroomtitle_;
}
inline void _Option::set_m_sroomtitle(const ::std::string& value) {
  set_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_ = new ::std::string;
  }
  m_sroomtitle_->assign(value);
}
inline void _Option::set_m_sroomtitle(const char* value) {
  set_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_ = new ::std::string;
  }
  m_sroomtitle_->assign(value);
}
inline void _Option::set_m_sroomtitle(const char* value, size_t size) {
  set_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_ = new ::std::string;
  }
  m_sroomtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _Option::mutable_m_sroomtitle() {
  set_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_ = new ::std::string;
  }
  return m_sroomtitle_;
}
inline ::std::string* _Option::release_m_sroomtitle() {
  clear_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sroomtitle_;
    m_sroomtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sPassword = 2;
inline bool _Option::has_m_spassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _Option::set_has_m_spassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _Option::clear_has_m_spassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _Option::clear_m_spassword() {
  if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
    m_spassword_->clear();
  }
  clear_has_m_spassword();
}
inline const ::std::string& _Option::m_spassword() const {
  return *m_spassword_;
}
inline void _Option::set_m_spassword(const ::std::string& value) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(value);
}
inline void _Option::set_m_spassword(const char* value) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(value);
}
inline void _Option::set_m_spassword(const char* value, size_t size) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _Option::mutable_m_spassword() {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  return m_spassword_;
}
inline ::std::string* _Option::release_m_spassword() {
  clear_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_spassword_;
    m_spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 m_lMaxUserCnt = 3;
inline bool _Option::has_m_lmaxusercnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _Option::set_has_m_lmaxusercnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _Option::clear_has_m_lmaxusercnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _Option::clear_m_lmaxusercnt() {
  m_lmaxusercnt_ = 0;
  clear_has_m_lmaxusercnt();
}
inline ::google::protobuf::int32 _Option::m_lmaxusercnt() const {
  return m_lmaxusercnt_;
}
inline void _Option::set_m_lmaxusercnt(::google::protobuf::int32 value) {
  set_has_m_lmaxusercnt();
  m_lmaxusercnt_ = value;
}

// required int32 m_lMaxPlayerUserCnt = 4;
inline bool _Option::has_m_lmaxplayerusercnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _Option::set_has_m_lmaxplayerusercnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _Option::clear_has_m_lmaxplayerusercnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _Option::clear_m_lmaxplayerusercnt() {
  m_lmaxplayerusercnt_ = 0;
  clear_has_m_lmaxplayerusercnt();
}
inline ::google::protobuf::int32 _Option::m_lmaxplayerusercnt() const {
  return m_lmaxplayerusercnt_;
}
inline void _Option::set_m_lmaxplayerusercnt(::google::protobuf::int32 value) {
  set_has_m_lmaxplayerusercnt();
  m_lmaxplayerusercnt_ = value;
}

// required int32 m_lMaxPlayerCardCnt = 5;
inline bool _Option::has_m_lmaxplayercardcnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _Option::set_has_m_lmaxplayercardcnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _Option::clear_has_m_lmaxplayercardcnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _Option::clear_m_lmaxplayercardcnt() {
  m_lmaxplayercardcnt_ = 0;
  clear_has_m_lmaxplayercardcnt();
}
inline ::google::protobuf::int32 _Option::m_lmaxplayercardcnt() const {
  return m_lmaxplayercardcnt_;
}
inline void _Option::set_m_lmaxplayercardcnt(::google::protobuf::int32 value) {
  set_has_m_lmaxplayercardcnt();
  m_lmaxplayercardcnt_ = value;
}

// required int32 m_lChoiceMode = 6;
inline bool _Option::has_m_lchoicemode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _Option::set_has_m_lchoicemode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _Option::clear_has_m_lchoicemode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _Option::clear_m_lchoicemode() {
  m_lchoicemode_ = 0;
  clear_has_m_lchoicemode();
}
inline ::google::protobuf::int32 _Option::m_lchoicemode() const {
  return m_lchoicemode_;
}
inline void _Option::set_m_lchoicemode(::google::protobuf::int32 value) {
  set_has_m_lchoicemode();
  m_lchoicemode_ = value;
}

// required int32 m_lRoomType = 7;
inline bool _Option::has_m_lroomtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _Option::set_has_m_lroomtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _Option::clear_has_m_lroomtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _Option::clear_m_lroomtype() {
  m_lroomtype_ = 0;
  clear_has_m_lroomtype();
}
inline ::google::protobuf::int32 _Option::m_lroomtype() const {
  return m_lroomtype_;
}
inline void _Option::set_m_lroomtype(::google::protobuf::int32 value) {
  set_has_m_lroomtype();
  m_lroomtype_ = value;
}

// required int32 m_lBetRule = 8;
inline bool _Option::has_m_lbetrule() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _Option::set_has_m_lbetrule() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _Option::clear_has_m_lbetrule() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _Option::clear_m_lbetrule() {
  m_lbetrule_ = 0;
  clear_has_m_lbetrule();
}
inline ::google::protobuf::int32 _Option::m_lbetrule() const {
  return m_lbetrule_;
}
inline void _Option::set_m_lbetrule(::google::protobuf::int32 value) {
  set_has_m_lbetrule();
  m_lbetrule_ = value;
}

// required int32 m_lBetType = 9;
inline bool _Option::has_m_lbettype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _Option::set_has_m_lbettype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _Option::clear_has_m_lbettype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _Option::clear_m_lbettype() {
  m_lbettype_ = 0;
  clear_has_m_lbettype();
}
inline ::google::protobuf::int32 _Option::m_lbettype() const {
  return m_lbettype_;
}
inline void _Option::set_m_lbettype(::google::protobuf::int32 value) {
  set_has_m_lbettype();
  m_lbettype_ = value;
}

// required int32 m_lAddRule = 10;
inline bool _Option::has_m_laddrule() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _Option::set_has_m_laddrule() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _Option::clear_has_m_laddrule() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _Option::clear_m_laddrule() {
  m_laddrule_ = 0;
  clear_has_m_laddrule();
}
inline ::google::protobuf::int32 _Option::m_laddrule() const {
  return m_laddrule_;
}
inline void _Option::set_m_laddrule(::google::protobuf::int32 value) {
  set_has_m_laddrule();
  m_laddrule_ = value;
}

// required int32 m_lRematchJoin = 11;
inline bool _Option::has_m_lrematchjoin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _Option::set_has_m_lrematchjoin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _Option::clear_has_m_lrematchjoin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _Option::clear_m_lrematchjoin() {
  m_lrematchjoin_ = 0;
  clear_has_m_lrematchjoin();
}
inline ::google::protobuf::int32 _Option::m_lrematchjoin() const {
  return m_lrematchjoin_;
}
inline void _Option::set_m_lrematchjoin(::google::protobuf::int32 value) {
  set_has_m_lrematchjoin();
  m_lrematchjoin_ = value;
}

// required int32 m_lLimitMoney = 12;
inline bool _Option::has_m_llimitmoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void _Option::set_has_m_llimitmoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void _Option::clear_has_m_llimitmoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void _Option::clear_m_llimitmoney() {
  m_llimitmoney_ = 0;
  clear_has_m_llimitmoney();
}
inline ::google::protobuf::int32 _Option::m_llimitmoney() const {
  return m_llimitmoney_;
}
inline void _Option::set_m_llimitmoney(::google::protobuf::int32 value) {
  set_has_m_llimitmoney();
  m_llimitmoney_ = value;
}

// required sint64 m_llGameAnteMoney = 13;
inline bool _Option::has_m_llgameantemoney() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void _Option::set_has_m_llgameantemoney() {
  _has_bits_[0] |= 0x00001000u;
}
inline void _Option::clear_has_m_llgameantemoney() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void _Option::clear_m_llgameantemoney() {
  m_llgameantemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llgameantemoney();
}
inline ::google::protobuf::int64 _Option::m_llgameantemoney() const {
  return m_llgameantemoney_;
}
inline void _Option::set_m_llgameantemoney(::google::protobuf::int64 value) {
  set_has_m_llgameantemoney();
  m_llgameantemoney_ = value;
}

// required int32 m_bEcho = 14;
inline bool _Option::has_m_becho() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _Option::set_has_m_becho() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _Option::clear_has_m_becho() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _Option::clear_m_becho() {
  m_becho_ = 0;
  clear_has_m_becho();
}
inline ::google::protobuf::int32 _Option::m_becho() const {
  return m_becho_;
}
inline void _Option::set_m_becho(::google::protobuf::int32 value) {
  set_has_m_becho();
  m_becho_ = value;
}

// required int32 m_lMakeUSN = 15;
inline bool _Option::has_m_lmakeusn() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void _Option::set_has_m_lmakeusn() {
  _has_bits_[0] |= 0x00004000u;
}
inline void _Option::clear_has_m_lmakeusn() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void _Option::clear_m_lmakeusn() {
  m_lmakeusn_ = 0;
  clear_has_m_lmakeusn();
}
inline ::google::protobuf::int32 _Option::m_lmakeusn() const {
  return m_lmakeusn_;
}
inline void _Option::set_m_lmakeusn(::google::protobuf::int32 value) {
  set_has_m_lmakeusn();
  m_lmakeusn_ = value;
}

// required int32 m_lCategory = 16;
inline bool _Option::has_m_lcategory() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void _Option::set_has_m_lcategory() {
  _has_bits_[0] |= 0x00008000u;
}
inline void _Option::clear_has_m_lcategory() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void _Option::clear_m_lcategory() {
  m_lcategory_ = 0;
  clear_has_m_lcategory();
}
inline ::google::protobuf::int32 _Option::m_lcategory() const {
  return m_lcategory_;
}
inline void _Option::set_m_lcategory(::google::protobuf::int32 value) {
  set_has_m_lcategory();
  m_lcategory_ = value;
}

// required int32 m_lChannelID = 17;
inline bool _Option::has_m_lchannelid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void _Option::set_has_m_lchannelid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void _Option::clear_has_m_lchannelid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void _Option::clear_m_lchannelid() {
  m_lchannelid_ = 0;
  clear_has_m_lchannelid();
}
inline ::google::protobuf::int32 _Option::m_lchannelid() const {
  return m_lchannelid_;
}
inline void _Option::set_m_lchannelid(::google::protobuf::int32 value) {
  set_has_m_lchannelid();
  m_lchannelid_ = value;
}

// required sint64 m_llAnteMoney = 18;
inline bool _Option::has_m_llantemoney() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void _Option::set_has_m_llantemoney() {
  _has_bits_[0] |= 0x00020000u;
}
inline void _Option::clear_has_m_llantemoney() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void _Option::clear_m_llantemoney() {
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llantemoney();
}
inline ::google::protobuf::int64 _Option::m_llantemoney() const {
  return m_llantemoney_;
}
inline void _Option::set_m_llantemoney(::google::protobuf::int64 value) {
  set_has_m_llantemoney();
  m_llantemoney_ = value;
}

// -------------------------------------------------------------------

// _BettingMsg

// required int32 m_lUSN = 1;
inline bool _BettingMsg::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _BettingMsg::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _BettingMsg::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _BettingMsg::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _BettingMsg::m_lusn() const {
  return m_lusn_;
}
inline void _BettingMsg::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool _BettingMsg::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _BettingMsg::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _BettingMsg::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _BettingMsg::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _BettingMsg::m_nindex() const {
  return m_nindex_;
}
inline void _BettingMsg::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required int32 m_BetType = 3;
inline bool _BettingMsg::has_m_bettype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _BettingMsg::set_has_m_bettype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _BettingMsg::clear_has_m_bettype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _BettingMsg::clear_m_bettype() {
  m_bettype_ = 0;
  clear_has_m_bettype();
}
inline ::google::protobuf::int32 _BettingMsg::m_bettype() const {
  return m_bettype_;
}
inline void _BettingMsg::set_m_bettype(::google::protobuf::int32 value) {
  set_has_m_bettype();
  m_bettype_ = value;
}

// required int32 m_bBettingMoney = 4;
inline bool _BettingMsg::has_m_bbettingmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _BettingMsg::set_has_m_bbettingmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _BettingMsg::clear_has_m_bbettingmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _BettingMsg::clear_m_bbettingmoney() {
  m_bbettingmoney_ = 0;
  clear_has_m_bbettingmoney();
}
inline ::google::protobuf::int32 _BettingMsg::m_bbettingmoney() const {
  return m_bbettingmoney_;
}
inline void _BettingMsg::set_m_bbettingmoney(::google::protobuf::int32 value) {
  set_has_m_bbettingmoney();
  m_bbettingmoney_ = value;
}

// required int32 m_bMoneyLack = 5;
inline bool _BettingMsg::has_m_bmoneylack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _BettingMsg::set_has_m_bmoneylack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _BettingMsg::clear_has_m_bmoneylack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _BettingMsg::clear_m_bmoneylack() {
  m_bmoneylack_ = 0;
  clear_has_m_bmoneylack();
}
inline ::google::protobuf::int32 _BettingMsg::m_bmoneylack() const {
  return m_bmoneylack_;
}
inline void _BettingMsg::set_m_bmoneylack(::google::protobuf::int32 value) {
  set_has_m_bmoneylack();
  m_bmoneylack_ = value;
}

// required int32 m_bCallMoneyZero = 6;
inline bool _BettingMsg::has_m_bcallmoneyzero() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _BettingMsg::set_has_m_bcallmoneyzero() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _BettingMsg::clear_has_m_bcallmoneyzero() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _BettingMsg::clear_m_bcallmoneyzero() {
  m_bcallmoneyzero_ = 0;
  clear_has_m_bcallmoneyzero();
}
inline ::google::protobuf::int32 _BettingMsg::m_bcallmoneyzero() const {
  return m_bcallmoneyzero_;
}
inline void _BettingMsg::set_m_bcallmoneyzero(::google::protobuf::int32 value) {
  set_has_m_bcallmoneyzero();
  m_bcallmoneyzero_ = value;
}

// required int64 m_llCallMoney = 7;
inline bool _BettingMsg::has_m_llcallmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _BettingMsg::set_has_m_llcallmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _BettingMsg::clear_has_m_llcallmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _BettingMsg::clear_m_llcallmoney() {
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallmoney();
}
inline ::google::protobuf::int64 _BettingMsg::m_llcallmoney() const {
  return m_llcallmoney_;
}
inline void _BettingMsg::set_m_llcallmoney(::google::protobuf::int64 value) {
  set_has_m_llcallmoney();
  m_llcallmoney_ = value;
}

// required int64 m_llRaiseMoney = 8;
inline bool _BettingMsg::has_m_llraisemoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _BettingMsg::set_has_m_llraisemoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _BettingMsg::clear_has_m_llraisemoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _BettingMsg::clear_m_llraisemoney() {
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llraisemoney();
}
inline ::google::protobuf::int64 _BettingMsg::m_llraisemoney() const {
  return m_llraisemoney_;
}
inline void _BettingMsg::set_m_llraisemoney(::google::protobuf::int64 value) {
  set_has_m_llraisemoney();
  m_llraisemoney_ = value;
}

// -------------------------------------------------------------------

// _BettingMsgTable

// repeated .Game_Poker._BettingMsg BettingMsgTable = 1;
inline int _BettingMsgTable::bettingmsgtable_size() const {
  return bettingmsgtable_.size();
}
inline void _BettingMsgTable::clear_bettingmsgtable() {
  bettingmsgtable_.Clear();
}
inline const ::Game_Poker::_BettingMsg& _BettingMsgTable::bettingmsgtable(int index) const {
  return bettingmsgtable_.Get(index);
}
inline ::Game_Poker::_BettingMsg* _BettingMsgTable::mutable_bettingmsgtable(int index) {
  return bettingmsgtable_.Mutable(index);
}
inline ::Game_Poker::_BettingMsg* _BettingMsgTable::add_bettingmsgtable() {
  return bettingmsgtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_BettingMsg >&
_BettingMsgTable::bettingmsgtable() const {
  return bettingmsgtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_BettingMsg >*
_BettingMsgTable::mutable_bettingmsgtable() {
  return &bettingmsgtable_;
}

// -------------------------------------------------------------------

// _MoneyTable

// repeated .Game_Poker._Money MoneyTable = 1;
inline int _MoneyTable::moneytable_size() const {
  return moneytable_.size();
}
inline void _MoneyTable::clear_moneytable() {
  moneytable_.Clear();
}
inline const ::Game_Poker::_Money& _MoneyTable::moneytable(int index) const {
  return moneytable_.Get(index);
}
inline ::Game_Poker::_Money* _MoneyTable::mutable_moneytable(int index) {
  return moneytable_.Mutable(index);
}
inline ::Game_Poker::_Money* _MoneyTable::add_moneytable() {
  return moneytable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
_MoneyTable::moneytable() const {
  return moneytable_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
_MoneyTable::mutable_moneytable() {
  return &moneytable_;
}

// -------------------------------------------------------------------

// _CardTable

// repeated .Game_Poker._Cards CardTable = 1;
inline int _CardTable::cardtable_size() const {
  return cardtable_.size();
}
inline void _CardTable::clear_cardtable() {
  cardtable_.Clear();
}
inline const ::Game_Poker::_Cards& _CardTable::cardtable(int index) const {
  return cardtable_.Get(index);
}
inline ::Game_Poker::_Cards* _CardTable::mutable_cardtable(int index) {
  return cardtable_.Mutable(index);
}
inline ::Game_Poker::_Cards* _CardTable::add_cardtable() {
  return cardtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
_CardTable::cardtable() const {
  return cardtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
_CardTable::mutable_cardtable() {
  return &cardtable_;
}

// -------------------------------------------------------------------

// _UITable

// repeated .Game_Poker._UserInfo UITable = 1;
inline int _UITable::uitable_size() const {
  return uitable_.size();
}
inline void _UITable::clear_uitable() {
  uitable_.Clear();
}
inline const ::Game_Poker::_UserInfo& _UITable::uitable(int index) const {
  return uitable_.Get(index);
}
inline ::Game_Poker::_UserInfo* _UITable::mutable_uitable(int index) {
  return uitable_.Mutable(index);
}
inline ::Game_Poker::_UserInfo* _UITable::add_uitable() {
  return uitable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo >&
_UITable::uitable() const {
  return uitable_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo >*
_UITable::mutable_uitable() {
  return &uitable_;
}

// -------------------------------------------------------------------

// _RCRoomData

// required int32 m_lGameMaster = 1;
inline bool _RCRoomData::has_m_lgamemaster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _RCRoomData::set_has_m_lgamemaster() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _RCRoomData::clear_has_m_lgamemaster() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _RCRoomData::clear_m_lgamemaster() {
  m_lgamemaster_ = 0;
  clear_has_m_lgamemaster();
}
inline ::google::protobuf::int32 _RCRoomData::m_lgamemaster() const {
  return m_lgamemaster_;
}
inline void _RCRoomData::set_m_lgamemaster(::google::protobuf::int32 value) {
  set_has_m_lgamemaster();
  m_lgamemaster_ = value;
}

// required int32 m_lRoomIndex = 2;
inline bool _RCRoomData::has_m_lroomindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _RCRoomData::set_has_m_lroomindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _RCRoomData::clear_has_m_lroomindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _RCRoomData::clear_m_lroomindex() {
  m_lroomindex_ = 0;
  clear_has_m_lroomindex();
}
inline ::google::protobuf::int32 _RCRoomData::m_lroomindex() const {
  return m_lroomindex_;
}
inline void _RCRoomData::set_m_lroomindex(::google::protobuf::int32 value) {
  set_has_m_lroomindex();
  m_lroomindex_ = value;
}

// required int32 m_lState = 3;
inline bool _RCRoomData::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _RCRoomData::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _RCRoomData::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _RCRoomData::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 _RCRoomData::m_lstate() const {
  return m_lstate_;
}
inline void _RCRoomData::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required .Game_Poker._Option m_option = 4;
inline bool _RCRoomData::has_m_option() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _RCRoomData::set_has_m_option() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _RCRoomData::clear_has_m_option() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _RCRoomData::clear_m_option() {
  if (m_option_ != NULL) m_option_->::Game_Poker::_Option::Clear();
  clear_has_m_option();
}
inline const ::Game_Poker::_Option& _RCRoomData::m_option() const {
  return m_option_ != NULL ? *m_option_ : *default_instance_->m_option_;
}
inline ::Game_Poker::_Option* _RCRoomData::mutable_m_option() {
  set_has_m_option();
  if (m_option_ == NULL) m_option_ = new ::Game_Poker::_Option;
  return m_option_;
}
inline ::Game_Poker::_Option* _RCRoomData::release_m_option() {
  clear_has_m_option();
  ::Game_Poker::_Option* temp = m_option_;
  m_option_ = NULL;
  return temp;
}

// optional .Game_Poker._UITable m_tblUI = 5;
inline bool _RCRoomData::has_m_tblui() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _RCRoomData::set_has_m_tblui() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _RCRoomData::clear_has_m_tblui() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _RCRoomData::clear_m_tblui() {
  if (m_tblui_ != NULL) m_tblui_->::Game_Poker::_UITable::Clear();
  clear_has_m_tblui();
}
inline const ::Game_Poker::_UITable& _RCRoomData::m_tblui() const {
  return m_tblui_ != NULL ? *m_tblui_ : *default_instance_->m_tblui_;
}
inline ::Game_Poker::_UITable* _RCRoomData::mutable_m_tblui() {
  set_has_m_tblui();
  if (m_tblui_ == NULL) m_tblui_ = new ::Game_Poker::_UITable;
  return m_tblui_;
}
inline ::Game_Poker::_UITable* _RCRoomData::release_m_tblui() {
  clear_has_m_tblui();
  ::Game_Poker::_UITable* temp = m_tblui_;
  m_tblui_ = NULL;
  return temp;
}

// optional .Game_Poker._CardTable m_tblCard = 6;
inline bool _RCRoomData::has_m_tblcard() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _RCRoomData::set_has_m_tblcard() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _RCRoomData::clear_has_m_tblcard() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _RCRoomData::clear_m_tblcard() {
  if (m_tblcard_ != NULL) m_tblcard_->::Game_Poker::_CardTable::Clear();
  clear_has_m_tblcard();
}
inline const ::Game_Poker::_CardTable& _RCRoomData::m_tblcard() const {
  return m_tblcard_ != NULL ? *m_tblcard_ : *default_instance_->m_tblcard_;
}
inline ::Game_Poker::_CardTable* _RCRoomData::mutable_m_tblcard() {
  set_has_m_tblcard();
  if (m_tblcard_ == NULL) m_tblcard_ = new ::Game_Poker::_CardTable;
  return m_tblcard_;
}
inline ::Game_Poker::_CardTable* _RCRoomData::release_m_tblcard() {
  clear_has_m_tblcard();
  ::Game_Poker::_CardTable* temp = m_tblcard_;
  m_tblcard_ = NULL;
  return temp;
}

// optional .Game_Poker._MoneyTable m_tblMoney = 7;
inline bool _RCRoomData::has_m_tblmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _RCRoomData::set_has_m_tblmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _RCRoomData::clear_has_m_tblmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _RCRoomData::clear_m_tblmoney() {
  if (m_tblmoney_ != NULL) m_tblmoney_->::Game_Poker::_MoneyTable::Clear();
  clear_has_m_tblmoney();
}
inline const ::Game_Poker::_MoneyTable& _RCRoomData::m_tblmoney() const {
  return m_tblmoney_ != NULL ? *m_tblmoney_ : *default_instance_->m_tblmoney_;
}
inline ::Game_Poker::_MoneyTable* _RCRoomData::mutable_m_tblmoney() {
  set_has_m_tblmoney();
  if (m_tblmoney_ == NULL) m_tblmoney_ = new ::Game_Poker::_MoneyTable;
  return m_tblmoney_;
}
inline ::Game_Poker::_MoneyTable* _RCRoomData::release_m_tblmoney() {
  clear_has_m_tblmoney();
  ::Game_Poker::_MoneyTable* temp = m_tblmoney_;
  m_tblmoney_ = NULL;
  return temp;
}

// optional .Game_Poker._BettingMsgTable m_tblBettingMsg = 8;
inline bool _RCRoomData::has_m_tblbettingmsg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _RCRoomData::set_has_m_tblbettingmsg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _RCRoomData::clear_has_m_tblbettingmsg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _RCRoomData::clear_m_tblbettingmsg() {
  if (m_tblbettingmsg_ != NULL) m_tblbettingmsg_->::Game_Poker::_BettingMsgTable::Clear();
  clear_has_m_tblbettingmsg();
}
inline const ::Game_Poker::_BettingMsgTable& _RCRoomData::m_tblbettingmsg() const {
  return m_tblbettingmsg_ != NULL ? *m_tblbettingmsg_ : *default_instance_->m_tblbettingmsg_;
}
inline ::Game_Poker::_BettingMsgTable* _RCRoomData::mutable_m_tblbettingmsg() {
  set_has_m_tblbettingmsg();
  if (m_tblbettingmsg_ == NULL) m_tblbettingmsg_ = new ::Game_Poker::_BettingMsgTable;
  return m_tblbettingmsg_;
}
inline ::Game_Poker::_BettingMsgTable* _RCRoomData::release_m_tblbettingmsg() {
  clear_has_m_tblbettingmsg();
  ::Game_Poker::_BettingMsgTable* temp = m_tblbettingmsg_;
  m_tblbettingmsg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// _SPUserBaseInfo

// required int32 m_lUSN = 1;
inline bool _SPUserBaseInfo::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _SPUserBaseInfo::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _SPUserBaseInfo::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lusn() const {
  return m_lusn_;
}
inline void _SPUserBaseInfo::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required string m_sUserID = 2;
inline bool _SPUserBaseInfo::has_m_suserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_suserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _SPUserBaseInfo::clear_has_m_suserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _SPUserBaseInfo::clear_m_suserid() {
  if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
    m_suserid_->clear();
  }
  clear_has_m_suserid();
}
inline const ::std::string& _SPUserBaseInfo::m_suserid() const {
  return *m_suserid_;
}
inline void _SPUserBaseInfo::set_m_suserid(const ::std::string& value) {
  set_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    m_suserid_ = new ::std::string;
  }
  m_suserid_->assign(value);
}
inline void _SPUserBaseInfo::set_m_suserid(const char* value) {
  set_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    m_suserid_ = new ::std::string;
  }
  m_suserid_->assign(value);
}
inline void _SPUserBaseInfo::set_m_suserid(const char* value, size_t size) {
  set_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    m_suserid_ = new ::std::string;
  }
  m_suserid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _SPUserBaseInfo::mutable_m_suserid() {
  set_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    m_suserid_ = new ::std::string;
  }
  return m_suserid_;
}
inline ::std::string* _SPUserBaseInfo::release_m_suserid() {
  clear_has_m_suserid();
  if (m_suserid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_suserid_;
    m_suserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sNickName = 3;
inline bool _SPUserBaseInfo::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _SPUserBaseInfo::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _SPUserBaseInfo::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& _SPUserBaseInfo::m_snickname() const {
  return *m_snickname_;
}
inline void _SPUserBaseInfo::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _SPUserBaseInfo::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _SPUserBaseInfo::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _SPUserBaseInfo::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* _SPUserBaseInfo::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 m_lUSC = 4;
inline bool _SPUserBaseInfo::has_m_lusc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lusc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _SPUserBaseInfo::clear_has_m_lusc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _SPUserBaseInfo::clear_m_lusc() {
  m_lusc_ = 0;
  clear_has_m_lusc();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lusc() const {
  return m_lusc_;
}
inline void _SPUserBaseInfo::set_m_lusc(::google::protobuf::int32 value) {
  set_has_m_lusc();
  m_lusc_ = value;
}

// required int32 m_lJumin = 5;
inline bool _SPUserBaseInfo::has_m_ljumin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_ljumin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _SPUserBaseInfo::clear_has_m_ljumin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _SPUserBaseInfo::clear_m_ljumin() {
  m_ljumin_ = 0;
  clear_has_m_ljumin();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_ljumin() const {
  return m_ljumin_;
}
inline void _SPUserBaseInfo::set_m_ljumin(::google::protobuf::int32 value) {
  set_has_m_ljumin();
  m_ljumin_ = value;
}

// required int32 m_lFirstUSN = 6;
inline bool _SPUserBaseInfo::has_m_lfirstusn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lfirstusn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _SPUserBaseInfo::clear_has_m_lfirstusn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _SPUserBaseInfo::clear_m_lfirstusn() {
  m_lfirstusn_ = 0;
  clear_has_m_lfirstusn();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lfirstusn() const {
  return m_lfirstusn_;
}
inline void _SPUserBaseInfo::set_m_lfirstusn(::google::protobuf::int32 value) {
  set_has_m_lfirstusn();
  m_lfirstusn_ = value;
}

// required int32 m_lAgeIndex = 7;
inline bool _SPUserBaseInfo::has_m_lageindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lageindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _SPUserBaseInfo::clear_has_m_lageindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _SPUserBaseInfo::clear_m_lageindex() {
  m_lageindex_ = 0;
  clear_has_m_lageindex();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lageindex() const {
  return m_lageindex_;
}
inline void _SPUserBaseInfo::set_m_lageindex(::google::protobuf::int32 value) {
  set_has_m_lageindex();
  m_lageindex_ = value;
}

// required int32 m_lJobIndex = 8;
inline bool _SPUserBaseInfo::has_m_ljobindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_ljobindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _SPUserBaseInfo::clear_has_m_ljobindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _SPUserBaseInfo::clear_m_ljobindex() {
  m_ljobindex_ = 0;
  clear_has_m_ljobindex();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_ljobindex() const {
  return m_ljobindex_;
}
inline void _SPUserBaseInfo::set_m_ljobindex(::google::protobuf::int32 value) {
  set_has_m_ljobindex();
  m_ljobindex_ = value;
}

// required int32 m_lRegionIndex = 9;
inline bool _SPUserBaseInfo::has_m_lregionindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lregionindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _SPUserBaseInfo::clear_has_m_lregionindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _SPUserBaseInfo::clear_m_lregionindex() {
  m_lregionindex_ = 0;
  clear_has_m_lregionindex();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lregionindex() const {
  return m_lregionindex_;
}
inline void _SPUserBaseInfo::set_m_lregionindex(::google::protobuf::int32 value) {
  set_has_m_lregionindex();
  m_lregionindex_ = value;
}

// required int32 m_lGuildIndex = 10;
inline bool _SPUserBaseInfo::has_m_lguildindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lguildindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _SPUserBaseInfo::clear_has_m_lguildindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _SPUserBaseInfo::clear_m_lguildindex() {
  m_lguildindex_ = 0;
  clear_has_m_lguildindex();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lguildindex() const {
  return m_lguildindex_;
}
inline void _SPUserBaseInfo::set_m_lguildindex(::google::protobuf::int32 value) {
  set_has_m_lguildindex();
  m_lguildindex_ = value;
}

// required int32 m_lMemberIndex = 11;
inline bool _SPUserBaseInfo::has_m_lmemberindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lmemberindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _SPUserBaseInfo::clear_has_m_lmemberindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _SPUserBaseInfo::clear_m_lmemberindex() {
  m_lmemberindex_ = 0;
  clear_has_m_lmemberindex();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lmemberindex() const {
  return m_lmemberindex_;
}
inline void _SPUserBaseInfo::set_m_lmemberindex(::google::protobuf::int32 value) {
  set_has_m_lmemberindex();
  m_lmemberindex_ = value;
}

// required int32 m_lClientIP = 12;
inline bool _SPUserBaseInfo::has_m_lclientip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lclientip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void _SPUserBaseInfo::clear_has_m_lclientip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void _SPUserBaseInfo::clear_m_lclientip() {
  m_lclientip_ = 0;
  clear_has_m_lclientip();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lclientip() const {
  return m_lclientip_;
}
inline void _SPUserBaseInfo::set_m_lclientip(::google::protobuf::int32 value) {
  set_has_m_lclientip();
  m_lclientip_ = value;
}

// required int32 m_lGatewayIP = 13;
inline bool _SPUserBaseInfo::has_m_lgatewayip() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lgatewayip() {
  _has_bits_[0] |= 0x00001000u;
}
inline void _SPUserBaseInfo::clear_has_m_lgatewayip() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void _SPUserBaseInfo::clear_m_lgatewayip() {
  m_lgatewayip_ = 0;
  clear_has_m_lgatewayip();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lgatewayip() const {
  return m_lgatewayip_;
}
inline void _SPUserBaseInfo::set_m_lgatewayip(::google::protobuf::int32 value) {
  set_has_m_lgatewayip();
  m_lgatewayip_ = value;
}

// required int32 m_lMacAddress = 14;
inline bool _SPUserBaseInfo::has_m_lmacaddress() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_lmacaddress() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _SPUserBaseInfo::clear_has_m_lmacaddress() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _SPUserBaseInfo::clear_m_lmacaddress() {
  m_lmacaddress_ = 0;
  clear_has_m_lmacaddress();
}
inline ::google::protobuf::int32 _SPUserBaseInfo::m_lmacaddress() const {
  return m_lmacaddress_;
}
inline void _SPUserBaseInfo::set_m_lmacaddress(::google::protobuf::int32 value) {
  set_has_m_lmacaddress();
  m_lmacaddress_ = value;
}

// required string m_sMobileInfo = 15;
inline bool _SPUserBaseInfo::has_m_smobileinfo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_smobileinfo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void _SPUserBaseInfo::clear_has_m_smobileinfo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void _SPUserBaseInfo::clear_m_smobileinfo() {
  if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_->clear();
  }
  clear_has_m_smobileinfo();
}
inline const ::std::string& _SPUserBaseInfo::m_smobileinfo() const {
  return *m_smobileinfo_;
}
inline void _SPUserBaseInfo::set_m_smobileinfo(const ::std::string& value) {
  set_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_ = new ::std::string;
  }
  m_smobileinfo_->assign(value);
}
inline void _SPUserBaseInfo::set_m_smobileinfo(const char* value) {
  set_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_ = new ::std::string;
  }
  m_smobileinfo_->assign(value);
}
inline void _SPUserBaseInfo::set_m_smobileinfo(const char* value, size_t size) {
  set_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_ = new ::std::string;
  }
  m_smobileinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _SPUserBaseInfo::mutable_m_smobileinfo() {
  set_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    m_smobileinfo_ = new ::std::string;
  }
  return m_smobileinfo_;
}
inline ::std::string* _SPUserBaseInfo::release_m_smobileinfo() {
  clear_has_m_smobileinfo();
  if (m_smobileinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_smobileinfo_;
    m_smobileinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sAuthKey = 16;
inline bool _SPUserBaseInfo::has_m_sauthkey() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void _SPUserBaseInfo::set_has_m_sauthkey() {
  _has_bits_[0] |= 0x00008000u;
}
inline void _SPUserBaseInfo::clear_has_m_sauthkey() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void _SPUserBaseInfo::clear_m_sauthkey() {
  if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_->clear();
  }
  clear_has_m_sauthkey();
}
inline const ::std::string& _SPUserBaseInfo::m_sauthkey() const {
  return *m_sauthkey_;
}
inline void _SPUserBaseInfo::set_m_sauthkey(const ::std::string& value) {
  set_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_ = new ::std::string;
  }
  m_sauthkey_->assign(value);
}
inline void _SPUserBaseInfo::set_m_sauthkey(const char* value) {
  set_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_ = new ::std::string;
  }
  m_sauthkey_->assign(value);
}
inline void _SPUserBaseInfo::set_m_sauthkey(const char* value, size_t size) {
  set_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_ = new ::std::string;
  }
  m_sauthkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _SPUserBaseInfo::mutable_m_sauthkey() {
  set_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    m_sauthkey_ = new ::std::string;
  }
  return m_sauthkey_;
}
inline ::std::string* _SPUserBaseInfo::release_m_sauthkey() {
  clear_has_m_sauthkey();
  if (m_sauthkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sauthkey_;
    m_sauthkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// _MsgCS_Entry

// required int32 m_nVersion = 1;
inline bool _MsgCS_Entry::has_m_nversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_Entry::set_has_m_nversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_Entry::clear_has_m_nversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_Entry::clear_m_nversion() {
  m_nversion_ = 0;
  clear_has_m_nversion();
}
inline ::google::protobuf::int32 _MsgCS_Entry::m_nversion() const {
  return m_nversion_;
}
inline void _MsgCS_Entry::set_m_nversion(::google::protobuf::int32 value) {
  set_has_m_nversion();
  m_nversion_ = value;
}

// required sint32 m_bWelcomeSound = 2;
inline bool _MsgCS_Entry::has_m_bwelcomesound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgCS_Entry::set_has_m_bwelcomesound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgCS_Entry::clear_has_m_bwelcomesound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgCS_Entry::clear_m_bwelcomesound() {
  m_bwelcomesound_ = 0;
  clear_has_m_bwelcomesound();
}
inline ::google::protobuf::int32 _MsgCS_Entry::m_bwelcomesound() const {
  return m_bwelcomesound_;
}
inline void _MsgCS_Entry::set_m_bwelcomesound(::google::protobuf::int32 value) {
  set_has_m_bwelcomesound();
  m_bwelcomesound_ = value;
}

// required sint32 m_lSoundType = 3;
inline bool _MsgCS_Entry::has_m_lsoundtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgCS_Entry::set_has_m_lsoundtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgCS_Entry::clear_has_m_lsoundtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgCS_Entry::clear_m_lsoundtype() {
  m_lsoundtype_ = 0;
  clear_has_m_lsoundtype();
}
inline ::google::protobuf::int32 _MsgCS_Entry::m_lsoundtype() const {
  return m_lsoundtype_;
}
inline void _MsgCS_Entry::set_m_lsoundtype(::google::protobuf::int32 value) {
  set_has_m_lsoundtype();
  m_lsoundtype_ = value;
}

// required string m_sNickName = 4;
inline bool _MsgCS_Entry::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgCS_Entry::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgCS_Entry::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgCS_Entry::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& _MsgCS_Entry::m_snickname() const {
  return *m_snickname_;
}
inline void _MsgCS_Entry::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _MsgCS_Entry::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _MsgCS_Entry::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgCS_Entry::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* _MsgCS_Entry::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sAvt = 5;
inline bool _MsgCS_Entry::has_m_savt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgCS_Entry::set_has_m_savt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgCS_Entry::clear_has_m_savt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgCS_Entry::clear_m_savt() {
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    m_savt_->clear();
  }
  clear_has_m_savt();
}
inline const ::std::string& _MsgCS_Entry::m_savt() const {
  return *m_savt_;
}
inline void _MsgCS_Entry::set_m_savt(const ::std::string& value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void _MsgCS_Entry::set_m_savt(const char* value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void _MsgCS_Entry::set_m_savt(const char* value, size_t size) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgCS_Entry::mutable_m_savt() {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  return m_savt_;
}
inline ::std::string* _MsgCS_Entry::release_m_savt() {
  clear_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_savt_;
    m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint32 m_lCLevel = 6;
inline bool _MsgCS_Entry::has_m_lclevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _MsgCS_Entry::set_has_m_lclevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _MsgCS_Entry::clear_has_m_lclevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _MsgCS_Entry::clear_m_lclevel() {
  m_lclevel_ = 0;
  clear_has_m_lclevel();
}
inline ::google::protobuf::int32 _MsgCS_Entry::m_lclevel() const {
  return m_lclevel_;
}
inline void _MsgCS_Entry::set_m_lclevel(::google::protobuf::int32 value) {
  set_has_m_lclevel();
  m_lclevel_ = value;
}

// required sint32 m_lSex = 7;
inline bool _MsgCS_Entry::has_m_lsex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _MsgCS_Entry::set_has_m_lsex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _MsgCS_Entry::clear_has_m_lsex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _MsgCS_Entry::clear_m_lsex() {
  m_lsex_ = 0;
  clear_has_m_lsex();
}
inline ::google::protobuf::int32 _MsgCS_Entry::m_lsex() const {
  return m_lsex_;
}
inline void _MsgCS_Entry::set_m_lsex(::google::protobuf::int32 value) {
  set_has_m_lsex();
  m_lsex_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_Observe

// -------------------------------------------------------------------

// _MsgCS_Start

// -------------------------------------------------------------------

// _MsgCS_SelectedCardReq

// required sint32 m_lCardIdx = 1;
inline bool _MsgCS_SelectedCardReq::has_m_lcardidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_SelectedCardReq::set_has_m_lcardidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_SelectedCardReq::clear_has_m_lcardidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_SelectedCardReq::clear_m_lcardidx() {
  m_lcardidx_ = 0;
  clear_has_m_lcardidx();
}
inline ::google::protobuf::int32 _MsgCS_SelectedCardReq::m_lcardidx() const {
  return m_lcardidx_;
}
inline void _MsgCS_SelectedCardReq::set_m_lcardidx(::google::protobuf::int32 value) {
  set_has_m_lcardidx();
  m_lcardidx_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_BettingReq

// required sint32 m_lBetType = 1;
inline bool _MsgCS_BettingReq::has_m_lbettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_BettingReq::set_has_m_lbettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_BettingReq::clear_has_m_lbettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_BettingReq::clear_m_lbettype() {
  m_lbettype_ = 0;
  clear_has_m_lbettype();
}
inline ::google::protobuf::int32 _MsgCS_BettingReq::m_lbettype() const {
  return m_lbettype_;
}
inline void _MsgCS_BettingReq::set_m_lbettype(::google::protobuf::int32 value) {
  set_has_m_lbettype();
  m_lbettype_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_ChoiceRemoveCard

// required sint32 m_lUSN = 1;
inline bool _MsgCS_ChoiceRemoveCard::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_ChoiceRemoveCard::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_ChoiceRemoveCard::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_ChoiceRemoveCard::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgCS_ChoiceRemoveCard::m_lusn() const {
  return m_lusn_;
}
inline void _MsgCS_ChoiceRemoveCard::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nRemoveCardIndex = 2;
inline bool _MsgCS_ChoiceRemoveCard::has_m_nremovecardindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgCS_ChoiceRemoveCard::set_has_m_nremovecardindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgCS_ChoiceRemoveCard::clear_has_m_nremovecardindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgCS_ChoiceRemoveCard::clear_m_nremovecardindex() {
  m_nremovecardindex_ = 0;
  clear_has_m_nremovecardindex();
}
inline ::google::protobuf::int32 _MsgCS_ChoiceRemoveCard::m_nremovecardindex() const {
  return m_nremovecardindex_;
}
inline void _MsgCS_ChoiceRemoveCard::set_m_nremovecardindex(::google::protobuf::int32 value) {
  set_has_m_nremovecardindex();
  m_nremovecardindex_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_Purge

// required sint32 m_lType = 1;
inline bool _MsgCS_Purge::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_Purge::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_Purge::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_Purge::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 _MsgCS_Purge::m_ltype() const {
  return m_ltype_;
}
inline void _MsgCS_Purge::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// required sint32 m_lPurgeUSN = 2;
inline bool _MsgCS_Purge::has_m_lpurgeusn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgCS_Purge::set_has_m_lpurgeusn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgCS_Purge::clear_has_m_lpurgeusn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgCS_Purge::clear_m_lpurgeusn() {
  m_lpurgeusn_ = 0;
  clear_has_m_lpurgeusn();
}
inline ::google::protobuf::int32 _MsgCS_Purge::m_lpurgeusn() const {
  return m_lpurgeusn_;
}
inline void _MsgCS_Purge::set_m_lpurgeusn(::google::protobuf::int32 value) {
  set_has_m_lpurgeusn();
  m_lpurgeusn_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_Abuse

// required sint32 m_lType = 1;
inline bool _MsgCS_Abuse::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_Abuse::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_Abuse::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_Abuse::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 _MsgCS_Abuse::m_ltype() const {
  return m_ltype_;
}
inline void _MsgCS_Abuse::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// required string m_sDay = 2;
inline bool _MsgCS_Abuse::has_m_sday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgCS_Abuse::set_has_m_sday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgCS_Abuse::clear_has_m_sday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgCS_Abuse::clear_m_sday() {
  if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
    m_sday_->clear();
  }
  clear_has_m_sday();
}
inline const ::std::string& _MsgCS_Abuse::m_sday() const {
  return *m_sday_;
}
inline void _MsgCS_Abuse::set_m_sday(const ::std::string& value) {
  set_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    m_sday_ = new ::std::string;
  }
  m_sday_->assign(value);
}
inline void _MsgCS_Abuse::set_m_sday(const char* value) {
  set_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    m_sday_ = new ::std::string;
  }
  m_sday_->assign(value);
}
inline void _MsgCS_Abuse::set_m_sday(const char* value, size_t size) {
  set_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    m_sday_ = new ::std::string;
  }
  m_sday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgCS_Abuse::mutable_m_sday() {
  set_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    m_sday_ = new ::std::string;
  }
  return m_sday_;
}
inline ::std::string* _MsgCS_Abuse::release_m_sday() {
  clear_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sday_;
    m_sday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// _MsgCS_AskPurgeVote

// required sint32 m_lPurgeUSN = 1;
inline bool _MsgCS_AskPurgeVote::has_m_lpurgeusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_AskPurgeVote::set_has_m_lpurgeusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_AskPurgeVote::clear_has_m_lpurgeusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_AskPurgeVote::clear_m_lpurgeusn() {
  m_lpurgeusn_ = 0;
  clear_has_m_lpurgeusn();
}
inline ::google::protobuf::int32 _MsgCS_AskPurgeVote::m_lpurgeusn() const {
  return m_lpurgeusn_;
}
inline void _MsgCS_AskPurgeVote::set_m_lpurgeusn(::google::protobuf::int32 value) {
  set_has_m_lpurgeusn();
  m_lpurgeusn_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_AnswerPurgeVote

// required sint32 m_lAnswer = 1;
inline bool _MsgCS_AnswerPurgeVote::has_m_lanswer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_AnswerPurgeVote::set_has_m_lanswer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_AnswerPurgeVote::clear_has_m_lanswer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_AnswerPurgeVote::clear_m_lanswer() {
  m_lanswer_ = 0;
  clear_has_m_lanswer();
}
inline ::google::protobuf::int32 _MsgCS_AnswerPurgeVote::m_lanswer() const {
  return m_lanswer_;
}
inline void _MsgCS_AnswerPurgeVote::set_m_lanswer(::google::protobuf::int32 value) {
  set_has_m_lanswer();
  m_lanswer_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_WaitingUserTicketReq

// required int32 m_nType = 1;
inline bool _MsgCS_WaitingUserTicketReq::has_m_ntype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_WaitingUserTicketReq::set_has_m_ntype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_WaitingUserTicketReq::clear_has_m_ntype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_WaitingUserTicketReq::clear_m_ntype() {
  m_ntype_ = 0;
  clear_has_m_ntype();
}
inline ::google::protobuf::int32 _MsgCS_WaitingUserTicketReq::m_ntype() const {
  return m_ntype_;
}
inline void _MsgCS_WaitingUserTicketReq::set_m_ntype(::google::protobuf::int32 value) {
  set_has_m_ntype();
  m_ntype_ = value;
}

// required sint32 m_bValue = 2;
inline bool _MsgCS_WaitingUserTicketReq::has_m_bvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgCS_WaitingUserTicketReq::set_has_m_bvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgCS_WaitingUserTicketReq::clear_has_m_bvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgCS_WaitingUserTicketReq::clear_m_bvalue() {
  m_bvalue_ = 0;
  clear_has_m_bvalue();
}
inline ::google::protobuf::int32 _MsgCS_WaitingUserTicketReq::m_bvalue() const {
  return m_bvalue_;
}
inline void _MsgCS_WaitingUserTicketReq::set_m_bvalue(::google::protobuf::int32 value) {
  set_has_m_bvalue();
  m_bvalue_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_UpdateWaitingUserInfoReq

// -------------------------------------------------------------------

// _MsgCS_SoundType

// required sint32 m_lSoundType = 1;
inline bool _MsgCS_SoundType::has_m_lsoundtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_SoundType::set_has_m_lsoundtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_SoundType::clear_has_m_lsoundtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_SoundType::clear_m_lsoundtype() {
  m_lsoundtype_ = 0;
  clear_has_m_lsoundtype();
}
inline ::google::protobuf::int32 _MsgCS_SoundType::m_lsoundtype() const {
  return m_lsoundtype_;
}
inline void _MsgCS_SoundType::set_m_lsoundtype(::google::protobuf::int32 value) {
  set_has_m_lsoundtype();
  m_lsoundtype_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_ExitQue

// required sint32 m_lExit = 1;
inline bool _MsgCS_ExitQue::has_m_lexit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_ExitQue::set_has_m_lexit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_ExitQue::clear_has_m_lexit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_ExitQue::clear_m_lexit() {
  m_lexit_ = 0;
  clear_has_m_lexit();
}
inline ::google::protobuf::int32 _MsgCS_ExitQue::m_lexit() const {
  return m_lexit_;
}
inline void _MsgCS_ExitQue::set_m_lexit(::google::protobuf::int32 value) {
  set_has_m_lexit();
  m_lexit_ = value;
}

// required sint32 m_bAction = 2;
inline bool _MsgCS_ExitQue::has_m_baction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgCS_ExitQue::set_has_m_baction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgCS_ExitQue::clear_has_m_baction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgCS_ExitQue::clear_m_baction() {
  m_baction_ = 0;
  clear_has_m_baction();
}
inline ::google::protobuf::int32 _MsgCS_ExitQue::m_baction() const {
  return m_baction_;
}
inline void _MsgCS_ExitQue::set_m_baction(::google::protobuf::int32 value) {
  set_has_m_baction();
  m_baction_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_Continue

// required sint32 m_lExit = 1;
inline bool _MsgCS_Continue::has_m_lexit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_Continue::set_has_m_lexit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_Continue::clear_has_m_lexit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_Continue::clear_m_lexit() {
  m_lexit_ = 0;
  clear_has_m_lexit();
}
inline ::google::protobuf::int32 _MsgCS_Continue::m_lexit() const {
  return m_lexit_;
}
inline void _MsgCS_Continue::set_m_lexit(::google::protobuf::int32 value) {
  set_has_m_lexit();
  m_lexit_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_RuleSet

// required int32 m_nRuleIdx = 1;
inline bool _MsgCS_RuleSet::has_m_nruleidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_RuleSet::set_has_m_nruleidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_RuleSet::clear_has_m_nruleidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_RuleSet::clear_m_nruleidx() {
  m_nruleidx_ = 0;
  clear_has_m_nruleidx();
}
inline ::google::protobuf::int32 _MsgCS_RuleSet::m_nruleidx() const {
  return m_nruleidx_;
}
inline void _MsgCS_RuleSet::set_m_nruleidx(::google::protobuf::int32 value) {
  set_has_m_nruleidx();
  m_nruleidx_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_GameMasterCall

// -------------------------------------------------------------------

// _MsgCS_FieldReserved

// required int32 m_nReserved1 = 1;
inline bool _MsgCS_FieldReserved::has_m_nreserved1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_FieldReserved::set_has_m_nreserved1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_FieldReserved::clear_has_m_nreserved1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_FieldReserved::clear_m_nreserved1() {
  m_nreserved1_ = 0;
  clear_has_m_nreserved1();
}
inline ::google::protobuf::int32 _MsgCS_FieldReserved::m_nreserved1() const {
  return m_nreserved1_;
}
inline void _MsgCS_FieldReserved::set_m_nreserved1(::google::protobuf::int32 value) {
  set_has_m_nreserved1();
  m_nreserved1_ = value;
}

// required int32 m_nReserved2 = 2;
inline bool _MsgCS_FieldReserved::has_m_nreserved2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgCS_FieldReserved::set_has_m_nreserved2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgCS_FieldReserved::clear_has_m_nreserved2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgCS_FieldReserved::clear_m_nreserved2() {
  m_nreserved2_ = 0;
  clear_has_m_nreserved2();
}
inline ::google::protobuf::int32 _MsgCS_FieldReserved::m_nreserved2() const {
  return m_nreserved2_;
}
inline void _MsgCS_FieldReserved::set_m_nreserved2(::google::protobuf::int32 value) {
  set_has_m_nreserved2();
  m_nreserved2_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_JokboSet

// required sint32 m_lKey1 = 1;
inline bool _MsgCS_JokboSet::has_m_lkey1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_JokboSet::set_has_m_lkey1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_JokboSet::clear_has_m_lkey1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_JokboSet::clear_m_lkey1() {
  m_lkey1_ = 0;
  clear_has_m_lkey1();
}
inline ::google::protobuf::int32 _MsgCS_JokboSet::m_lkey1() const {
  return m_lkey1_;
}
inline void _MsgCS_JokboSet::set_m_lkey1(::google::protobuf::int32 value) {
  set_has_m_lkey1();
  m_lkey1_ = value;
}

// required sint32 m_lKey2 = 2;
inline bool _MsgCS_JokboSet::has_m_lkey2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgCS_JokboSet::set_has_m_lkey2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgCS_JokboSet::clear_has_m_lkey2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgCS_JokboSet::clear_m_lkey2() {
  m_lkey2_ = 0;
  clear_has_m_lkey2();
}
inline ::google::protobuf::int32 _MsgCS_JokboSet::m_lkey2() const {
  return m_lkey2_;
}
inline void _MsgCS_JokboSet::set_m_lkey2(::google::protobuf::int32 value) {
  set_has_m_lkey2();
  m_lkey2_ = value;
}

// required sint32 m_lKey3 = 3;
inline bool _MsgCS_JokboSet::has_m_lkey3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgCS_JokboSet::set_has_m_lkey3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgCS_JokboSet::clear_has_m_lkey3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgCS_JokboSet::clear_m_lkey3() {
  m_lkey3_ = 0;
  clear_has_m_lkey3();
}
inline ::google::protobuf::int32 _MsgCS_JokboSet::m_lkey3() const {
  return m_lkey3_;
}
inline void _MsgCS_JokboSet::set_m_lkey3(::google::protobuf::int32 value) {
  set_has_m_lkey3();
  m_lkey3_ = value;
}

// required sint32 m_lKey4 = 4;
inline bool _MsgCS_JokboSet::has_m_lkey4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgCS_JokboSet::set_has_m_lkey4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgCS_JokboSet::clear_has_m_lkey4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgCS_JokboSet::clear_m_lkey4() {
  m_lkey4_ = 0;
  clear_has_m_lkey4();
}
inline ::google::protobuf::int32 _MsgCS_JokboSet::m_lkey4() const {
  return m_lkey4_;
}
inline void _MsgCS_JokboSet::set_m_lkey4(::google::protobuf::int32 value) {
  set_has_m_lkey4();
  m_lkey4_ = value;
}

// required sint32 m_lKey5 = 5;
inline bool _MsgCS_JokboSet::has_m_lkey5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgCS_JokboSet::set_has_m_lkey5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgCS_JokboSet::clear_has_m_lkey5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgCS_JokboSet::clear_m_lkey5() {
  m_lkey5_ = 0;
  clear_has_m_lkey5();
}
inline ::google::protobuf::int32 _MsgCS_JokboSet::m_lkey5() const {
  return m_lkey5_;
}
inline void _MsgCS_JokboSet::set_m_lkey5(::google::protobuf::int32 value) {
  set_has_m_lkey5();
  m_lkey5_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_TestKeySetting

// required uint32 m_nChar = 1;
inline bool _MsgCS_TestKeySetting::has_m_nchar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_TestKeySetting::set_has_m_nchar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_TestKeySetting::clear_has_m_nchar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_TestKeySetting::clear_m_nchar() {
  m_nchar_ = 0u;
  clear_has_m_nchar();
}
inline ::google::protobuf::uint32 _MsgCS_TestKeySetting::m_nchar() const {
  return m_nchar_;
}
inline void _MsgCS_TestKeySetting::set_m_nchar(::google::protobuf::uint32 value) {
  set_has_m_nchar();
  m_nchar_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_CheckNotice

// required int32 m_nType = 1;
inline bool _MsgCS_CheckNotice::has_m_ntype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_CheckNotice::set_has_m_ntype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_CheckNotice::clear_has_m_ntype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_CheckNotice::clear_m_ntype() {
  m_ntype_ = 0;
  clear_has_m_ntype();
}
inline ::google::protobuf::int32 _MsgCS_CheckNotice::m_ntype() const {
  return m_ntype_;
}
inline void _MsgCS_CheckNotice::set_m_ntype(::google::protobuf::int32 value) {
  set_has_m_ntype();
  m_ntype_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_Ack

// required int32 m_nTagID = 1;
inline bool _MsgCS_Ack::has_m_ntagid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgCS_Ack::set_has_m_ntagid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgCS_Ack::clear_has_m_ntagid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgCS_Ack::clear_m_ntagid() {
  m_ntagid_ = 0;
  clear_has_m_ntagid();
}
inline ::google::protobuf::int32 _MsgCS_Ack::m_ntagid() const {
  return m_ntagid_;
}
inline void _MsgCS_Ack::set_m_ntagid(::google::protobuf::int32 value) {
  set_has_m_ntagid();
  m_ntagid_ = value;
}

// -------------------------------------------------------------------

// _MsgCS_Ping

// -------------------------------------------------------------------

// _MsgSC_UserJoinAns

// required sint32 m_lState = 1;
inline bool _MsgSC_UserJoinAns::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_UserJoinAns::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_UserJoinAns::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_UserJoinAns::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinAns::m_lstate() const {
  return m_lstate_;
}
inline void _MsgSC_UserJoinAns::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required int32 m_nEnter = 2;
inline bool _MsgSC_UserJoinAns::has_m_nenter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_UserJoinAns::set_has_m_nenter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_UserJoinAns::clear_has_m_nenter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_UserJoinAns::clear_m_nenter() {
  m_nenter_ = 0;
  clear_has_m_nenter();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinAns::m_nenter() const {
  return m_nenter_;
}
inline void _MsgSC_UserJoinAns::set_m_nenter(::google::protobuf::int32 value) {
  set_has_m_nenter();
  m_nenter_ = value;
}

// required int32 m_nSet = 3;
inline bool _MsgSC_UserJoinAns::has_m_nset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_UserJoinAns::set_has_m_nset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_UserJoinAns::clear_has_m_nset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_UserJoinAns::clear_m_nset() {
  m_nset_ = 0;
  clear_has_m_nset();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinAns::m_nset() const {
  return m_nset_;
}
inline void _MsgSC_UserJoinAns::set_m_nset(::google::protobuf::int32 value) {
  set_has_m_nset();
  m_nset_ = value;
}

// required int32 m_lChannel_idx = 4;
inline bool _MsgSC_UserJoinAns::has_m_lchannel_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_UserJoinAns::set_has_m_lchannel_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_UserJoinAns::clear_has_m_lchannel_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_UserJoinAns::clear_m_lchannel_idx() {
  m_lchannel_idx_ = 0;
  clear_has_m_lchannel_idx();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinAns::m_lchannel_idx() const {
  return m_lchannel_idx_;
}
inline void _MsgSC_UserJoinAns::set_m_lchannel_idx(::google::protobuf::int32 value) {
  set_has_m_lchannel_idx();
  m_lchannel_idx_ = value;
}

// required sint32 m_lOwnerUSN = 5;
inline bool _MsgSC_UserJoinAns::has_m_lownerusn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgSC_UserJoinAns::set_has_m_lownerusn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgSC_UserJoinAns::clear_has_m_lownerusn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgSC_UserJoinAns::clear_m_lownerusn() {
  m_lownerusn_ = 0;
  clear_has_m_lownerusn();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinAns::m_lownerusn() const {
  return m_lownerusn_;
}
inline void _MsgSC_UserJoinAns::set_m_lownerusn(::google::protobuf::int32 value) {
  set_has_m_lownerusn();
  m_lownerusn_ = value;
}

// required sint32 m_lBossUSN = 6;
inline bool _MsgSC_UserJoinAns::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _MsgSC_UserJoinAns::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _MsgSC_UserJoinAns::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _MsgSC_UserJoinAns::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinAns::m_lbossusn() const {
  return m_lbossusn_;
}
inline void _MsgSC_UserJoinAns::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required int32 m_nRoomPurgeCnt = 7;
inline bool _MsgSC_UserJoinAns::has_m_nroompurgecnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _MsgSC_UserJoinAns::set_has_m_nroompurgecnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _MsgSC_UserJoinAns::clear_has_m_nroompurgecnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _MsgSC_UserJoinAns::clear_m_nroompurgecnt() {
  m_nroompurgecnt_ = 0;
  clear_has_m_nroompurgecnt();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinAns::m_nroompurgecnt() const {
  return m_nroompurgecnt_;
}
inline void _MsgSC_UserJoinAns::set_m_nroompurgecnt(::google::protobuf::int32 value) {
  set_has_m_nroompurgecnt();
  m_nroompurgecnt_ = value;
}

// required .Game_Poker._Option m_option = 8;
inline bool _MsgSC_UserJoinAns::has_m_option() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _MsgSC_UserJoinAns::set_has_m_option() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _MsgSC_UserJoinAns::clear_has_m_option() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _MsgSC_UserJoinAns::clear_m_option() {
  if (m_option_ != NULL) m_option_->::Game_Poker::_Option::Clear();
  clear_has_m_option();
}
inline const ::Game_Poker::_Option& _MsgSC_UserJoinAns::m_option() const {
  return m_option_ != NULL ? *m_option_ : *default_instance_->m_option_;
}
inline ::Game_Poker::_Option* _MsgSC_UserJoinAns::mutable_m_option() {
  set_has_m_option();
  if (m_option_ == NULL) m_option_ = new ::Game_Poker::_Option;
  return m_option_;
}
inline ::Game_Poker::_Option* _MsgSC_UserJoinAns::release_m_option() {
  clear_has_m_option();
  ::Game_Poker::_Option* temp = m_option_;
  m_option_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// _MsgSC_UserJoinErr

// required sint32 m_lUSN = 1;
inline bool _MsgSC_UserJoinErr::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_UserJoinErr::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_UserJoinErr::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_UserJoinErr::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinErr::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_UserJoinErr::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lErrorCode = 2;
inline bool _MsgSC_UserJoinErr::has_m_lerrorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_UserJoinErr::set_has_m_lerrorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_UserJoinErr::clear_has_m_lerrorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_UserJoinErr::clear_m_lerrorcode() {
  m_lerrorcode_ = 0;
  clear_has_m_lerrorcode();
}
inline ::google::protobuf::int32 _MsgSC_UserJoinErr::m_lerrorcode() const {
  return m_lerrorcode_;
}
inline void _MsgSC_UserJoinErr::set_m_lerrorcode(::google::protobuf::int32 value) {
  set_has_m_lerrorcode();
  m_lerrorcode_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_UserDisconnect

// required sint32 m_lUSN = 1;
inline bool _MsgSC_UserDisconnect::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_UserDisconnect::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_UserDisconnect::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_UserDisconnect::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_UserDisconnect::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_UserDisconnect::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required .Game_Poker._UserInfo m_uinfo = 2;
inline bool _MsgSC_UserDisconnect::has_m_uinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_UserDisconnect::set_has_m_uinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_UserDisconnect::clear_has_m_uinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_UserDisconnect::clear_m_uinfo() {
  if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::_UserInfo::Clear();
  clear_has_m_uinfo();
}
inline const ::Game_Poker::_UserInfo& _MsgSC_UserDisconnect::m_uinfo() const {
  return m_uinfo_ != NULL ? *m_uinfo_ : *default_instance_->m_uinfo_;
}
inline ::Game_Poker::_UserInfo* _MsgSC_UserDisconnect::mutable_m_uinfo() {
  set_has_m_uinfo();
  if (m_uinfo_ == NULL) m_uinfo_ = new ::Game_Poker::_UserInfo;
  return m_uinfo_;
}
inline ::Game_Poker::_UserInfo* _MsgSC_UserDisconnect::release_m_uinfo() {
  clear_has_m_uinfo();
  ::Game_Poker::_UserInfo* temp = m_uinfo_;
  m_uinfo_ = NULL;
  return temp;
}

// required sint32 m_lState = 3;
inline bool _MsgSC_UserDisconnect::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_UserDisconnect::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_UserDisconnect::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_UserDisconnect::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 _MsgSC_UserDisconnect::m_lstate() const {
  return m_lstate_;
}
inline void _MsgSC_UserDisconnect::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required sint32 m_lOwnerUSN = 4;
inline bool _MsgSC_UserDisconnect::has_m_lownerusn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_UserDisconnect::set_has_m_lownerusn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_UserDisconnect::clear_has_m_lownerusn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_UserDisconnect::clear_m_lownerusn() {
  m_lownerusn_ = 0;
  clear_has_m_lownerusn();
}
inline ::google::protobuf::int32 _MsgSC_UserDisconnect::m_lownerusn() const {
  return m_lownerusn_;
}
inline void _MsgSC_UserDisconnect::set_m_lownerusn(::google::protobuf::int32 value) {
  set_has_m_lownerusn();
  m_lownerusn_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_CardData

// required int32 m_nDealCnt = 1;
inline bool _MsgSC_CardData::has_m_ndealcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_CardData::set_has_m_ndealcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_CardData::clear_has_m_ndealcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_CardData::clear_m_ndealcnt() {
  m_ndealcnt_ = 0;
  clear_has_m_ndealcnt();
}
inline ::google::protobuf::int32 _MsgSC_CardData::m_ndealcnt() const {
  return m_ndealcnt_;
}
inline void _MsgSC_CardData::set_m_ndealcnt(::google::protobuf::int32 value) {
  set_has_m_ndealcnt();
  m_ndealcnt_ = value;
}

// required sint32 m_lCardsDealt = 2;
inline bool _MsgSC_CardData::has_m_lcardsdealt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_CardData::set_has_m_lcardsdealt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_CardData::clear_has_m_lcardsdealt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_CardData::clear_m_lcardsdealt() {
  m_lcardsdealt_ = 0;
  clear_has_m_lcardsdealt();
}
inline ::google::protobuf::int32 _MsgSC_CardData::m_lcardsdealt() const {
  return m_lcardsdealt_;
}
inline void _MsgSC_CardData::set_m_lcardsdealt(::google::protobuf::int32 value) {
  set_has_m_lcardsdealt();
  m_lcardsdealt_ = value;
}

// repeated .Game_Poker._Cards m_tblCard = 3;
inline int _MsgSC_CardData::m_tblcard_size() const {
  return m_tblcard_.size();
}
inline void _MsgSC_CardData::clear_m_tblcard() {
  m_tblcard_.Clear();
}
inline const ::Game_Poker::_Cards& _MsgSC_CardData::m_tblcard(int index) const {
  return m_tblcard_.Get(index);
}
inline ::Game_Poker::_Cards* _MsgSC_CardData::mutable_m_tblcard(int index) {
  return m_tblcard_.Mutable(index);
}
inline ::Game_Poker::_Cards* _MsgSC_CardData::add_m_tblcard() {
  return m_tblcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
_MsgSC_CardData::m_tblcard() const {
  return m_tblcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
_MsgSC_CardData::mutable_m_tblcard() {
  return &m_tblcard_;
}

// repeated .Game_Poker._Money m_tblMoney = 4;
inline int _MsgSC_CardData::m_tblmoney_size() const {
  return m_tblmoney_.size();
}
inline void _MsgSC_CardData::clear_m_tblmoney() {
  m_tblmoney_.Clear();
}
inline const ::Game_Poker::_Money& _MsgSC_CardData::m_tblmoney(int index) const {
  return m_tblmoney_.Get(index);
}
inline ::Game_Poker::_Money* _MsgSC_CardData::mutable_m_tblmoney(int index) {
  return m_tblmoney_.Mutable(index);
}
inline ::Game_Poker::_Money* _MsgSC_CardData::add_m_tblmoney() {
  return m_tblmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
_MsgSC_CardData::m_tblmoney() const {
  return m_tblmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
_MsgSC_CardData::mutable_m_tblmoney() {
  return &m_tblmoney_;
}

// required sint64 m_llPoolMoney = 5;
inline bool _MsgSC_CardData::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgSC_CardData::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgSC_CardData::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgSC_CardData::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 _MsgSC_CardData::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void _MsgSC_CardData::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_EntryAns

// required sint32 m_lUSN = 1;
inline bool _MsgSC_EntryAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_EntryAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_EntryAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_EntryAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_EntryAns::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_EntryAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool _MsgSC_EntryAns::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_EntryAns::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_EntryAns::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_EntryAns::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _MsgSC_EntryAns::m_nindex() const {
  return m_nindex_;
}
inline void _MsgSC_EntryAns::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lOwnerUSN = 3;
inline bool _MsgSC_EntryAns::has_m_lownerusn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_EntryAns::set_has_m_lownerusn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_EntryAns::clear_has_m_lownerusn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_EntryAns::clear_m_lownerusn() {
  m_lownerusn_ = 0;
  clear_has_m_lownerusn();
}
inline ::google::protobuf::int32 _MsgSC_EntryAns::m_lownerusn() const {
  return m_lownerusn_;
}
inline void _MsgSC_EntryAns::set_m_lownerusn(::google::protobuf::int32 value) {
  set_has_m_lownerusn();
  m_lownerusn_ = value;
}

// repeated .Game_Poker._UserInfo m_tblUI = 4;
inline int _MsgSC_EntryAns::m_tblui_size() const {
  return m_tblui_.size();
}
inline void _MsgSC_EntryAns::clear_m_tblui() {
  m_tblui_.Clear();
}
inline const ::Game_Poker::_UserInfo& _MsgSC_EntryAns::m_tblui(int index) const {
  return m_tblui_.Get(index);
}
inline ::Game_Poker::_UserInfo* _MsgSC_EntryAns::mutable_m_tblui(int index) {
  return m_tblui_.Mutable(index);
}
inline ::Game_Poker::_UserInfo* _MsgSC_EntryAns::add_m_tblui() {
  return m_tblui_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo >&
_MsgSC_EntryAns::m_tblui() const {
  return m_tblui_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_UserInfo >*
_MsgSC_EntryAns::mutable_m_tblui() {
  return &m_tblui_;
}

// repeated .Game_Poker._Money m_tblMoney = 5;
inline int _MsgSC_EntryAns::m_tblmoney_size() const {
  return m_tblmoney_.size();
}
inline void _MsgSC_EntryAns::clear_m_tblmoney() {
  m_tblmoney_.Clear();
}
inline const ::Game_Poker::_Money& _MsgSC_EntryAns::m_tblmoney(int index) const {
  return m_tblmoney_.Get(index);
}
inline ::Game_Poker::_Money* _MsgSC_EntryAns::mutable_m_tblmoney(int index) {
  return m_tblmoney_.Mutable(index);
}
inline ::Game_Poker::_Money* _MsgSC_EntryAns::add_m_tblmoney() {
  return m_tblmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
_MsgSC_EntryAns::m_tblmoney() const {
  return m_tblmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
_MsgSC_EntryAns::mutable_m_tblmoney() {
  return &m_tblmoney_;
}

// required sint32 m_bWelcomeSound = 6;
inline bool _MsgSC_EntryAns::has_m_bwelcomesound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _MsgSC_EntryAns::set_has_m_bwelcomesound() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _MsgSC_EntryAns::clear_has_m_bwelcomesound() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _MsgSC_EntryAns::clear_m_bwelcomesound() {
  m_bwelcomesound_ = 0;
  clear_has_m_bwelcomesound();
}
inline ::google::protobuf::int32 _MsgSC_EntryAns::m_bwelcomesound() const {
  return m_bwelcomesound_;
}
inline void _MsgSC_EntryAns::set_m_bwelcomesound(::google::protobuf::int32 value) {
  set_has_m_bwelcomesound();
  m_bwelcomesound_ = value;
}

// required sint32 m_lObserveCnt = 7;
inline bool _MsgSC_EntryAns::has_m_lobservecnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _MsgSC_EntryAns::set_has_m_lobservecnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _MsgSC_EntryAns::clear_has_m_lobservecnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _MsgSC_EntryAns::clear_m_lobservecnt() {
  m_lobservecnt_ = 0;
  clear_has_m_lobservecnt();
}
inline ::google::protobuf::int32 _MsgSC_EntryAns::m_lobservecnt() const {
  return m_lobservecnt_;
}
inline void _MsgSC_EntryAns::set_m_lobservecnt(::google::protobuf::int32 value) {
  set_has_m_lobservecnt();
  m_lobservecnt_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_EntryReject

// required sint32 m_lType = 1;
inline bool _MsgSC_EntryReject::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_EntryReject::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_EntryReject::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_EntryReject::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 _MsgSC_EntryReject::m_ltype() const {
  return m_ltype_;
}
inline void _MsgSC_EntryReject::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// required sint64 m_llCMoney = 2;
inline bool _MsgSC_EntryReject::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_EntryReject::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_EntryReject::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_EntryReject::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 _MsgSC_EntryReject::m_llcmoney() const {
  return m_llcmoney_;
}
inline void _MsgSC_EntryReject::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_ObserveAns

// required sint32 m_lUSN = 1;
inline bool _MsgSC_ObserveAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_ObserveAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_ObserveAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_ObserveAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_ObserveAns::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_ObserveAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool _MsgSC_ObserveAns::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_ObserveAns::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_ObserveAns::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_ObserveAns::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _MsgSC_ObserveAns::m_nindex() const {
  return m_nindex_;
}
inline void _MsgSC_ObserveAns::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lOwnerUSN = 3;
inline bool _MsgSC_ObserveAns::has_m_lownerusn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_ObserveAns::set_has_m_lownerusn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_ObserveAns::clear_has_m_lownerusn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_ObserveAns::clear_m_lownerusn() {
  m_lownerusn_ = 0;
  clear_has_m_lownerusn();
}
inline ::google::protobuf::int32 _MsgSC_ObserveAns::m_lownerusn() const {
  return m_lownerusn_;
}
inline void _MsgSC_ObserveAns::set_m_lownerusn(::google::protobuf::int32 value) {
  set_has_m_lownerusn();
  m_lownerusn_ = value;
}

// required .Game_Poker._UserInfo m_uinfo = 4;
inline bool _MsgSC_ObserveAns::has_m_uinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_ObserveAns::set_has_m_uinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_ObserveAns::clear_has_m_uinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_ObserveAns::clear_m_uinfo() {
  if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::_UserInfo::Clear();
  clear_has_m_uinfo();
}
inline const ::Game_Poker::_UserInfo& _MsgSC_ObserveAns::m_uinfo() const {
  return m_uinfo_ != NULL ? *m_uinfo_ : *default_instance_->m_uinfo_;
}
inline ::Game_Poker::_UserInfo* _MsgSC_ObserveAns::mutable_m_uinfo() {
  set_has_m_uinfo();
  if (m_uinfo_ == NULL) m_uinfo_ = new ::Game_Poker::_UserInfo;
  return m_uinfo_;
}
inline ::Game_Poker::_UserInfo* _MsgSC_ObserveAns::release_m_uinfo() {
  clear_has_m_uinfo();
  ::Game_Poker::_UserInfo* temp = m_uinfo_;
  m_uinfo_ = NULL;
  return temp;
}

// required .Game_Poker._Money m_money = 5;
inline bool _MsgSC_ObserveAns::has_m_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgSC_ObserveAns::set_has_m_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgSC_ObserveAns::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgSC_ObserveAns::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::_Money& _MsgSC_ObserveAns::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_ObserveAns::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::_Money;
  return m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_ObserveAns::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::_Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// _MsgSC_StartReq

// -------------------------------------------------------------------

// _MsgSC_StartAns

// required sint32 m_lState = 1;
inline bool _MsgSC_StartAns::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_StartAns::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_StartAns::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_StartAns::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 _MsgSC_StartAns::m_lstate() const {
  return m_lstate_;
}
inline void _MsgSC_StartAns::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// repeated sint32 m_vtState = 2;
inline int _MsgSC_StartAns::m_vtstate_size() const {
  return m_vtstate_.size();
}
inline void _MsgSC_StartAns::clear_m_vtstate() {
  m_vtstate_.Clear();
}
inline ::google::protobuf::int32 _MsgSC_StartAns::m_vtstate(int index) const {
  return m_vtstate_.Get(index);
}
inline void _MsgSC_StartAns::set_m_vtstate(int index, ::google::protobuf::int32 value) {
  m_vtstate_.Set(index, value);
}
inline void _MsgSC_StartAns::add_m_vtstate(::google::protobuf::int32 value) {
  m_vtstate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
_MsgSC_StartAns::m_vtstate() const {
  return m_vtstate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
_MsgSC_StartAns::mutable_m_vtstate() {
  return &m_vtstate_;
}

// required sint64 m_llSystemTime = 3;
inline bool _MsgSC_StartAns::has_m_llsystemtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_StartAns::set_has_m_llsystemtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_StartAns::clear_has_m_llsystemtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_StartAns::clear_m_llsystemtime() {
  m_llsystemtime_ = GOOGLE_LONGLONG(0);
  clear_has_m_llsystemtime();
}
inline ::google::protobuf::int64 _MsgSC_StartAns::m_llsystemtime() const {
  return m_llsystemtime_;
}
inline void _MsgSC_StartAns::set_m_llsystemtime(::google::protobuf::int64 value) {
  set_has_m_llsystemtime();
  m_llsystemtime_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_NoStart

// -------------------------------------------------------------------

// _MsgSC_DealCards

// required sint32 m_lBossUSN = 1;
inline bool _MsgSC_DealCards::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_DealCards::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_DealCards::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_DealCards::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 _MsgSC_DealCards::m_lbossusn() const {
  return m_lbossusn_;
}
inline void _MsgSC_DealCards::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required sint32 m_lState = 2;
inline bool _MsgSC_DealCards::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_DealCards::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_DealCards::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_DealCards::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 _MsgSC_DealCards::m_lstate() const {
  return m_lstate_;
}
inline void _MsgSC_DealCards::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required int32 m_nType = 3;
inline bool _MsgSC_DealCards::has_m_ntype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_DealCards::set_has_m_ntype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_DealCards::clear_has_m_ntype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_DealCards::clear_m_ntype() {
  m_ntype_ = 0;
  clear_has_m_ntype();
}
inline ::google::protobuf::int32 _MsgSC_DealCards::m_ntype() const {
  return m_ntype_;
}
inline void _MsgSC_DealCards::set_m_ntype(::google::protobuf::int32 value) {
  set_has_m_ntype();
  m_ntype_ = value;
}

// repeated .Game_Poker._Cards m_tblCard = 4;
inline int _MsgSC_DealCards::m_tblcard_size() const {
  return m_tblcard_.size();
}
inline void _MsgSC_DealCards::clear_m_tblcard() {
  m_tblcard_.Clear();
}
inline const ::Game_Poker::_Cards& _MsgSC_DealCards::m_tblcard(int index) const {
  return m_tblcard_.Get(index);
}
inline ::Game_Poker::_Cards* _MsgSC_DealCards::mutable_m_tblcard(int index) {
  return m_tblcard_.Mutable(index);
}
inline ::Game_Poker::_Cards* _MsgSC_DealCards::add_m_tblcard() {
  return m_tblcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
_MsgSC_DealCards::m_tblcard() const {
  return m_tblcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
_MsgSC_DealCards::mutable_m_tblcard() {
  return &m_tblcard_;
}

// repeated .Game_Poker._Money m_tblMoney = 5;
inline int _MsgSC_DealCards::m_tblmoney_size() const {
  return m_tblmoney_.size();
}
inline void _MsgSC_DealCards::clear_m_tblmoney() {
  m_tblmoney_.Clear();
}
inline const ::Game_Poker::_Money& _MsgSC_DealCards::m_tblmoney(int index) const {
  return m_tblmoney_.Get(index);
}
inline ::Game_Poker::_Money* _MsgSC_DealCards::mutable_m_tblmoney(int index) {
  return m_tblmoney_.Mutable(index);
}
inline ::Game_Poker::_Money* _MsgSC_DealCards::add_m_tblmoney() {
  return m_tblmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
_MsgSC_DealCards::m_tblmoney() const {
  return m_tblmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
_MsgSC_DealCards::mutable_m_tblmoney() {
  return &m_tblmoney_;
}

// required sint64 m_llPoolMoney = 6;
inline bool _MsgSC_DealCards::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _MsgSC_DealCards::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _MsgSC_DealCards::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _MsgSC_DealCards::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 _MsgSC_DealCards::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void _MsgSC_DealCards::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_SelectedCardAns

// required sint32 m_lUSN = 1;
inline bool _MsgSC_SelectedCardAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_SelectedCardAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_SelectedCardAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_SelectedCardAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_SelectedCardAns::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_SelectedCardAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nSelect = 2;
inline bool _MsgSC_SelectedCardAns::has_m_nselect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_SelectedCardAns::set_has_m_nselect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_SelectedCardAns::clear_has_m_nselect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_SelectedCardAns::clear_m_nselect() {
  m_nselect_ = 0;
  clear_has_m_nselect();
}
inline ::google::protobuf::int32 _MsgSC_SelectedCardAns::m_nselect() const {
  return m_nselect_;
}
inline void _MsgSC_SelectedCardAns::set_m_nselect(::google::protobuf::int32 value) {
  set_has_m_nselect();
  m_nselect_ = value;
}

// required sint32 m_lCardIndex = 3;
inline bool _MsgSC_SelectedCardAns::has_m_lcardindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_SelectedCardAns::set_has_m_lcardindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_SelectedCardAns::clear_has_m_lcardindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_SelectedCardAns::clear_m_lcardindex() {
  m_lcardindex_ = 0;
  clear_has_m_lcardindex();
}
inline ::google::protobuf::int32 _MsgSC_SelectedCardAns::m_lcardindex() const {
  return m_lcardindex_;
}
inline void _MsgSC_SelectedCardAns::set_m_lcardindex(::google::protobuf::int32 value) {
  set_has_m_lcardindex();
  m_lcardindex_ = value;
}

// required sint32 m_lChoiceType = 4;
inline bool _MsgSC_SelectedCardAns::has_m_lchoicetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_SelectedCardAns::set_has_m_lchoicetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_SelectedCardAns::clear_has_m_lchoicetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_SelectedCardAns::clear_m_lchoicetype() {
  m_lchoicetype_ = 0;
  clear_has_m_lchoicetype();
}
inline ::google::protobuf::int32 _MsgSC_SelectedCardAns::m_lchoicetype() const {
  return m_lchoicetype_;
}
inline void _MsgSC_SelectedCardAns::set_m_lchoicetype(::google::protobuf::int32 value) {
  set_has_m_lchoicetype();
  m_lchoicetype_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_DealOpenCard

// required sint32 m_lState = 1;
inline bool _MsgSC_DealOpenCard::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_DealOpenCard::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_DealOpenCard::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_DealOpenCard::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 _MsgSC_DealOpenCard::m_lstate() const {
  return m_lstate_;
}
inline void _MsgSC_DealOpenCard::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// repeated .Game_Poker._Cards m_tblCard = 2;
inline int _MsgSC_DealOpenCard::m_tblcard_size() const {
  return m_tblcard_.size();
}
inline void _MsgSC_DealOpenCard::clear_m_tblcard() {
  m_tblcard_.Clear();
}
inline const ::Game_Poker::_Cards& _MsgSC_DealOpenCard::m_tblcard(int index) const {
  return m_tblcard_.Get(index);
}
inline ::Game_Poker::_Cards* _MsgSC_DealOpenCard::mutable_m_tblcard(int index) {
  return m_tblcard_.Mutable(index);
}
inline ::Game_Poker::_Cards* _MsgSC_DealOpenCard::add_m_tblcard() {
  return m_tblcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
_MsgSC_DealOpenCard::m_tblcard() const {
  return m_tblcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
_MsgSC_DealOpenCard::mutable_m_tblcard() {
  return &m_tblcard_;
}

// repeated sint32 m_vtState = 3;
inline int _MsgSC_DealOpenCard::m_vtstate_size() const {
  return m_vtstate_.size();
}
inline void _MsgSC_DealOpenCard::clear_m_vtstate() {
  m_vtstate_.Clear();
}
inline ::google::protobuf::int32 _MsgSC_DealOpenCard::m_vtstate(int index) const {
  return m_vtstate_.Get(index);
}
inline void _MsgSC_DealOpenCard::set_m_vtstate(int index, ::google::protobuf::int32 value) {
  m_vtstate_.Set(index, value);
}
inline void _MsgSC_DealOpenCard::add_m_vtstate(::google::protobuf::int32 value) {
  m_vtstate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
_MsgSC_DealOpenCard::m_vtstate() const {
  return m_vtstate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
_MsgSC_DealOpenCard::mutable_m_vtstate() {
  return &m_vtstate_;
}

// -------------------------------------------------------------------

// _MsgSC_DealCard

// required sint32 m_lBossUSN = 1;
inline bool _MsgSC_DealCard::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_DealCard::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_DealCard::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_DealCard::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 _MsgSC_DealCard::m_lbossusn() const {
  return m_lbossusn_;
}
inline void _MsgSC_DealCard::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required int32 m_nType = 2;
inline bool _MsgSC_DealCard::has_m_ntype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_DealCard::set_has_m_ntype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_DealCard::clear_has_m_ntype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_DealCard::clear_m_ntype() {
  m_ntype_ = 0;
  clear_has_m_ntype();
}
inline ::google::protobuf::int32 _MsgSC_DealCard::m_ntype() const {
  return m_ntype_;
}
inline void _MsgSC_DealCard::set_m_ntype(::google::protobuf::int32 value) {
  set_has_m_ntype();
  m_ntype_ = value;
}

// required sint32 m_lCardsDealt = 3;
inline bool _MsgSC_DealCard::has_m_lcardsdealt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_DealCard::set_has_m_lcardsdealt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_DealCard::clear_has_m_lcardsdealt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_DealCard::clear_m_lcardsdealt() {
  m_lcardsdealt_ = 0;
  clear_has_m_lcardsdealt();
}
inline ::google::protobuf::int32 _MsgSC_DealCard::m_lcardsdealt() const {
  return m_lcardsdealt_;
}
inline void _MsgSC_DealCard::set_m_lcardsdealt(::google::protobuf::int32 value) {
  set_has_m_lcardsdealt();
  m_lcardsdealt_ = value;
}

// repeated .Game_Poker._OneCard m_vtOneCard = 4;
inline int _MsgSC_DealCard::m_vtonecard_size() const {
  return m_vtonecard_.size();
}
inline void _MsgSC_DealCard::clear_m_vtonecard() {
  m_vtonecard_.Clear();
}
inline const ::Game_Poker::_OneCard& _MsgSC_DealCard::m_vtonecard(int index) const {
  return m_vtonecard_.Get(index);
}
inline ::Game_Poker::_OneCard* _MsgSC_DealCard::mutable_m_vtonecard(int index) {
  return m_vtonecard_.Mutable(index);
}
inline ::Game_Poker::_OneCard* _MsgSC_DealCard::add_m_vtonecard() {
  return m_vtonecard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard >&
_MsgSC_DealCard::m_vtonecard() const {
  return m_vtonecard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard >*
_MsgSC_DealCard::mutable_m_vtonecard() {
  return &m_vtonecard_;
}

// -------------------------------------------------------------------

// _MsgSC_Boss

// required sint32 m_lBossUSN = 1;
inline bool _MsgSC_Boss::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_Boss::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_Boss::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_Boss::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 _MsgSC_Boss::m_lbossusn() const {
  return m_lbossusn_;
}
inline void _MsgSC_Boss::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required int32 m_nBossRank = 2;
inline bool _MsgSC_Boss::has_m_nbossrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_Boss::set_has_m_nbossrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_Boss::clear_has_m_nbossrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_Boss::clear_m_nbossrank() {
  m_nbossrank_ = 0;
  clear_has_m_nbossrank();
}
inline ::google::protobuf::int32 _MsgSC_Boss::m_nbossrank() const {
  return m_nbossrank_;
}
inline void _MsgSC_Boss::set_m_nbossrank(::google::protobuf::int32 value) {
  set_has_m_nbossrank();
  m_nbossrank_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_Betting

// required sint32 m_lBetUSN = 1;
inline bool _MsgSC_Betting::has_m_lbetusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_Betting::set_has_m_lbetusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_Betting::clear_has_m_lbetusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_Betting::clear_m_lbetusn() {
  m_lbetusn_ = 0;
  clear_has_m_lbetusn();
}
inline ::google::protobuf::int32 _MsgSC_Betting::m_lbetusn() const {
  return m_lbetusn_;
}
inline void _MsgSC_Betting::set_m_lbetusn(::google::protobuf::int32 value) {
  set_has_m_lbetusn();
  m_lbetusn_ = value;
}

// required sint32 m_lBetBtnType = 2;
inline bool _MsgSC_Betting::has_m_lbetbtntype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_Betting::set_has_m_lbetbtntype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_Betting::clear_has_m_lbetbtntype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_Betting::clear_m_lbetbtntype() {
  m_lbetbtntype_ = 0;
  clear_has_m_lbetbtntype();
}
inline ::google::protobuf::int32 _MsgSC_Betting::m_lbetbtntype() const {
  return m_lbetbtntype_;
}
inline void _MsgSC_Betting::set_m_lbetbtntype(::google::protobuf::int32 value) {
  set_has_m_lbetbtntype();
  m_lbetbtntype_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_BettingAns

// required int32 m_nIndex = 1;
inline bool _MsgSC_BettingAns::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_BettingAns::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_BettingAns::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_BettingAns::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _MsgSC_BettingAns::m_nindex() const {
  return m_nindex_;
}
inline void _MsgSC_BettingAns::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lBetType = 2;
inline bool _MsgSC_BettingAns::has_m_lbettype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_BettingAns::set_has_m_lbettype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_BettingAns::clear_has_m_lbettype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_BettingAns::clear_m_lbettype() {
  m_lbettype_ = 0;
  clear_has_m_lbettype();
}
inline ::google::protobuf::int32 _MsgSC_BettingAns::m_lbettype() const {
  return m_lbettype_;
}
inline void _MsgSC_BettingAns::set_m_lbettype(::google::protobuf::int32 value) {
  set_has_m_lbettype();
  m_lbettype_ = value;
}

// required .Game_Poker._Money m_money = 3;
inline bool _MsgSC_BettingAns::has_m_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_BettingAns::set_has_m_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_BettingAns::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_BettingAns::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::_Money& _MsgSC_BettingAns::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_BettingAns::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::_Money;
  return m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_BettingAns::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::_Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// repeated .Game_Poker._VecMoney m_vtCallMoney = 4;
inline int _MsgSC_BettingAns::m_vtcallmoney_size() const {
  return m_vtcallmoney_.size();
}
inline void _MsgSC_BettingAns::clear_m_vtcallmoney() {
  m_vtcallmoney_.Clear();
}
inline const ::Game_Poker::_VecMoney& _MsgSC_BettingAns::m_vtcallmoney(int index) const {
  return m_vtcallmoney_.Get(index);
}
inline ::Game_Poker::_VecMoney* _MsgSC_BettingAns::mutable_m_vtcallmoney(int index) {
  return m_vtcallmoney_.Mutable(index);
}
inline ::Game_Poker::_VecMoney* _MsgSC_BettingAns::add_m_vtcallmoney() {
  return m_vtcallmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney >&
_MsgSC_BettingAns::m_vtcallmoney() const {
  return m_vtcallmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney >*
_MsgSC_BettingAns::mutable_m_vtcallmoney() {
  return &m_vtcallmoney_;
}

// required sint64 m_lPoolMoney = 5;
inline bool _MsgSC_BettingAns::has_m_lpoolmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgSC_BettingAns::set_has_m_lpoolmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgSC_BettingAns::clear_has_m_lpoolmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgSC_BettingAns::clear_m_lpoolmoney() {
  m_lpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lpoolmoney();
}
inline ::google::protobuf::int64 _MsgSC_BettingAns::m_lpoolmoney() const {
  return m_lpoolmoney_;
}
inline void _MsgSC_BettingAns::set_m_lpoolmoney(::google::protobuf::int64 value) {
  set_has_m_lpoolmoney();
  m_lpoolmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_BettingAnsMsg

// required sint32 m_lUSN = 1;
inline bool _MsgSC_BettingAnsMsg::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_BettingAnsMsg::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_BettingAnsMsg::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool _MsgSC_BettingAnsMsg::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _MsgSC_BettingAnsMsg::m_nindex() const {
  return m_nindex_;
}
inline void _MsgSC_BettingAnsMsg::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_BetType = 3;
inline bool _MsgSC_BettingAnsMsg::has_m_bettype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_bettype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_bettype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_bettype() {
  m_bettype_ = 0;
  clear_has_m_bettype();
}
inline ::google::protobuf::int32 _MsgSC_BettingAnsMsg::m_bettype() const {
  return m_bettype_;
}
inline void _MsgSC_BettingAnsMsg::set_m_bettype(::google::protobuf::int32 value) {
  set_has_m_bettype();
  m_bettype_ = value;
}

// required sint32 m_bBettingMoney = 4;
inline bool _MsgSC_BettingAnsMsg::has_m_bbettingmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_bbettingmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_bbettingmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_bbettingmoney() {
  m_bbettingmoney_ = 0;
  clear_has_m_bbettingmoney();
}
inline ::google::protobuf::int32 _MsgSC_BettingAnsMsg::m_bbettingmoney() const {
  return m_bbettingmoney_;
}
inline void _MsgSC_BettingAnsMsg::set_m_bbettingmoney(::google::protobuf::int32 value) {
  set_has_m_bbettingmoney();
  m_bbettingmoney_ = value;
}

// required sint32 m_bMoneyLack = 5;
inline bool _MsgSC_BettingAnsMsg::has_m_bmoneylack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_bmoneylack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_bmoneylack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_bmoneylack() {
  m_bmoneylack_ = 0;
  clear_has_m_bmoneylack();
}
inline ::google::protobuf::int32 _MsgSC_BettingAnsMsg::m_bmoneylack() const {
  return m_bmoneylack_;
}
inline void _MsgSC_BettingAnsMsg::set_m_bmoneylack(::google::protobuf::int32 value) {
  set_has_m_bmoneylack();
  m_bmoneylack_ = value;
}

// required sint32 m_bCallMoneyZero = 6;
inline bool _MsgSC_BettingAnsMsg::has_m_bcallmoneyzero() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_bcallmoneyzero() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_bcallmoneyzero() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_bcallmoneyzero() {
  m_bcallmoneyzero_ = 0;
  clear_has_m_bcallmoneyzero();
}
inline ::google::protobuf::int32 _MsgSC_BettingAnsMsg::m_bcallmoneyzero() const {
  return m_bcallmoneyzero_;
}
inline void _MsgSC_BettingAnsMsg::set_m_bcallmoneyzero(::google::protobuf::int32 value) {
  set_has_m_bcallmoneyzero();
  m_bcallmoneyzero_ = value;
}

// required sint64 m_llCallMoney = 7;
inline bool _MsgSC_BettingAnsMsg::has_m_llcallmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_llcallmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_llcallmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_llcallmoney() {
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallmoney();
}
inline ::google::protobuf::int64 _MsgSC_BettingAnsMsg::m_llcallmoney() const {
  return m_llcallmoney_;
}
inline void _MsgSC_BettingAnsMsg::set_m_llcallmoney(::google::protobuf::int64 value) {
  set_has_m_llcallmoney();
  m_llcallmoney_ = value;
}

// required sint64 m_llRaiseMoney = 8;
inline bool _MsgSC_BettingAnsMsg::has_m_llraisemoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_llraisemoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_llraisemoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_llraisemoney() {
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llraisemoney();
}
inline ::google::protobuf::int64 _MsgSC_BettingAnsMsg::m_llraisemoney() const {
  return m_llraisemoney_;
}
inline void _MsgSC_BettingAnsMsg::set_m_llraisemoney(::google::protobuf::int64 value) {
  set_has_m_llraisemoney();
  m_llraisemoney_ = value;
}

// required sint64 m_llSideMoney = 9;
inline bool _MsgSC_BettingAnsMsg::has_m_llsidemoney() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_llsidemoney() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_llsidemoney() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_llsidemoney() {
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llsidemoney();
}
inline ::google::protobuf::int64 _MsgSC_BettingAnsMsg::m_llsidemoney() const {
  return m_llsidemoney_;
}
inline void _MsgSC_BettingAnsMsg::set_m_llsidemoney(::google::protobuf::int64 value) {
  set_has_m_llsidemoney();
  m_llsidemoney_ = value;
}

// required sint32 m_lBetType = 10;
inline bool _MsgSC_BettingAnsMsg::has_m_lbettype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_lbettype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_lbettype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_lbettype() {
  m_lbettype_ = 0;
  clear_has_m_lbettype();
}
inline ::google::protobuf::int32 _MsgSC_BettingAnsMsg::m_lbettype() const {
  return m_lbettype_;
}
inline void _MsgSC_BettingAnsMsg::set_m_lbettype(::google::protobuf::int32 value) {
  set_has_m_lbettype();
  m_lbettype_ = value;
}

// required sint32 m_lBetTurn = 11;
inline bool _MsgSC_BettingAnsMsg::has_m_lbetturn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_lbetturn() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_lbetturn() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_lbetturn() {
  m_lbetturn_ = 0;
  clear_has_m_lbetturn();
}
inline ::google::protobuf::int32 _MsgSC_BettingAnsMsg::m_lbetturn() const {
  return m_lbetturn_;
}
inline void _MsgSC_BettingAnsMsg::set_m_lbetturn(::google::protobuf::int32 value) {
  set_has_m_lbetturn();
  m_lbetturn_ = value;
}

// required .Game_Poker._Money m_money = 12;
inline bool _MsgSC_BettingAnsMsg::has_m_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::_Money& _MsgSC_BettingAnsMsg::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_BettingAnsMsg::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::_Money;
  return m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_BettingAnsMsg::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::_Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// repeated .Game_Poker._VecMoney m_vtCallMoney = 13;
inline int _MsgSC_BettingAnsMsg::m_vtcallmoney_size() const {
  return m_vtcallmoney_.size();
}
inline void _MsgSC_BettingAnsMsg::clear_m_vtcallmoney() {
  m_vtcallmoney_.Clear();
}
inline const ::Game_Poker::_VecMoney& _MsgSC_BettingAnsMsg::m_vtcallmoney(int index) const {
  return m_vtcallmoney_.Get(index);
}
inline ::Game_Poker::_VecMoney* _MsgSC_BettingAnsMsg::mutable_m_vtcallmoney(int index) {
  return m_vtcallmoney_.Mutable(index);
}
inline ::Game_Poker::_VecMoney* _MsgSC_BettingAnsMsg::add_m_vtcallmoney() {
  return m_vtcallmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney >&
_MsgSC_BettingAnsMsg::m_vtcallmoney() const {
  return m_vtcallmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecMoney >*
_MsgSC_BettingAnsMsg::mutable_m_vtcallmoney() {
  return &m_vtcallmoney_;
}

// required sint64 m_llPoolMoney = 14;
inline bool _MsgSC_BettingAnsMsg::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _MsgSC_BettingAnsMsg::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _MsgSC_BettingAnsMsg::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _MsgSC_BettingAnsMsg::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 _MsgSC_BettingAnsMsg::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void _MsgSC_BettingAnsMsg::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_DealHiddenCard

// required sint32 m_lBossUSN = 1;
inline bool _MsgSC_DealHiddenCard::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_DealHiddenCard::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_DealHiddenCard::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_DealHiddenCard::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 _MsgSC_DealHiddenCard::m_lbossusn() const {
  return m_lbossusn_;
}
inline void _MsgSC_DealHiddenCard::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required sint32 m_lCardsDealt = 2;
inline bool _MsgSC_DealHiddenCard::has_m_lcardsdealt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_DealHiddenCard::set_has_m_lcardsdealt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_DealHiddenCard::clear_has_m_lcardsdealt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_DealHiddenCard::clear_m_lcardsdealt() {
  m_lcardsdealt_ = 0;
  clear_has_m_lcardsdealt();
}
inline ::google::protobuf::int32 _MsgSC_DealHiddenCard::m_lcardsdealt() const {
  return m_lcardsdealt_;
}
inline void _MsgSC_DealHiddenCard::set_m_lcardsdealt(::google::protobuf::int32 value) {
  set_has_m_lcardsdealt();
  m_lcardsdealt_ = value;
}

// repeated .Game_Poker._OneCard m_vtOneCard = 3;
inline int _MsgSC_DealHiddenCard::m_vtonecard_size() const {
  return m_vtonecard_.size();
}
inline void _MsgSC_DealHiddenCard::clear_m_vtonecard() {
  m_vtonecard_.Clear();
}
inline const ::Game_Poker::_OneCard& _MsgSC_DealHiddenCard::m_vtonecard(int index) const {
  return m_vtonecard_.Get(index);
}
inline ::Game_Poker::_OneCard* _MsgSC_DealHiddenCard::mutable_m_vtonecard(int index) {
  return m_vtonecard_.Mutable(index);
}
inline ::Game_Poker::_OneCard* _MsgSC_DealHiddenCard::add_m_vtonecard() {
  return m_vtonecard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard >&
_MsgSC_DealHiddenCard::m_vtonecard() const {
  return m_vtonecard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_OneCard >*
_MsgSC_DealHiddenCard::mutable_m_vtonecard() {
  return &m_vtonecard_;
}

// -------------------------------------------------------------------

// _MsgSC_AnteMoney

// required sint64 m_llAnteMoney = 1;
inline bool _MsgSC_AnteMoney::has_m_llantemoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_AnteMoney::set_has_m_llantemoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_AnteMoney::clear_has_m_llantemoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_AnteMoney::clear_m_llantemoney() {
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llantemoney();
}
inline ::google::protobuf::int64 _MsgSC_AnteMoney::m_llantemoney() const {
  return m_llantemoney_;
}
inline void _MsgSC_AnteMoney::set_m_llantemoney(::google::protobuf::int64 value) {
  set_has_m_llantemoney();
  m_llantemoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_RuleQuaterHalf

// required sint64 m_llRuleQuaterHalf = 1;
inline bool _MsgSC_RuleQuaterHalf::has_m_llrulequaterhalf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_RuleQuaterHalf::set_has_m_llrulequaterhalf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_RuleQuaterHalf::clear_has_m_llrulequaterhalf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_RuleQuaterHalf::clear_m_llrulequaterhalf() {
  m_llrulequaterhalf_ = GOOGLE_LONGLONG(0);
  clear_has_m_llrulequaterhalf();
}
inline ::google::protobuf::int64 _MsgSC_RuleQuaterHalf::m_llrulequaterhalf() const {
  return m_llrulequaterhalf_;
}
inline void _MsgSC_RuleQuaterHalf::set_m_llrulequaterhalf(::google::protobuf::int64 value) {
  set_has_m_llrulequaterhalf();
  m_llrulequaterhalf_ = value;
}

// required sint64 m_llPoolMoney = 2;
inline bool _MsgSC_RuleQuaterHalf::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_RuleQuaterHalf::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_RuleQuaterHalf::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_RuleQuaterHalf::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 _MsgSC_RuleQuaterHalf::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void _MsgSC_RuleQuaterHalf::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_Finished

// required sint32 m_lState = 1;
inline bool _MsgSC_Finished::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_Finished::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_Finished::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_Finished::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 _MsgSC_Finished::m_lstate() const {
  return m_lstate_;
}
inline void _MsgSC_Finished::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required sint32 m_bGiveUp = 2;
inline bool _MsgSC_Finished::has_m_bgiveup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_Finished::set_has_m_bgiveup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_Finished::clear_has_m_bgiveup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_Finished::clear_m_bgiveup() {
  m_bgiveup_ = 0;
  clear_has_m_bgiveup();
}
inline ::google::protobuf::int32 _MsgSC_Finished::m_bgiveup() const {
  return m_bgiveup_;
}
inline void _MsgSC_Finished::set_m_bgiveup(::google::protobuf::int32 value) {
  set_has_m_bgiveup();
  m_bgiveup_ = value;
}

// required sint32 m_lRank = 3;
inline bool _MsgSC_Finished::has_m_lrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_Finished::set_has_m_lrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_Finished::clear_has_m_lrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_Finished::clear_m_lrank() {
  m_lrank_ = 0;
  clear_has_m_lrank();
}
inline ::google::protobuf::int32 _MsgSC_Finished::m_lrank() const {
  return m_lrank_;
}
inline void _MsgSC_Finished::set_m_lrank(::google::protobuf::int32 value) {
  set_has_m_lrank();
  m_lrank_ = value;
}

// required sint32 m_lBossUSN = 4;
inline bool _MsgSC_Finished::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_Finished::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_Finished::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_Finished::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 _MsgSC_Finished::m_lbossusn() const {
  return m_lbossusn_;
}
inline void _MsgSC_Finished::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required sint64 m_llGiveMoney = 5;
inline bool _MsgSC_Finished::has_m_llgivemoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgSC_Finished::set_has_m_llgivemoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgSC_Finished::clear_has_m_llgivemoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgSC_Finished::clear_m_llgivemoney() {
  m_llgivemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llgivemoney();
}
inline ::google::protobuf::int64 _MsgSC_Finished::m_llgivemoney() const {
  return m_llgivemoney_;
}
inline void _MsgSC_Finished::set_m_llgivemoney(::google::protobuf::int64 value) {
  set_has_m_llgivemoney();
  m_llgivemoney_ = value;
}

// repeated int32 m_vtWin = 6;
inline int _MsgSC_Finished::m_vtwin_size() const {
  return m_vtwin_.size();
}
inline void _MsgSC_Finished::clear_m_vtwin() {
  m_vtwin_.Clear();
}
inline ::google::protobuf::int32 _MsgSC_Finished::m_vtwin(int index) const {
  return m_vtwin_.Get(index);
}
inline void _MsgSC_Finished::set_m_vtwin(int index, ::google::protobuf::int32 value) {
  m_vtwin_.Set(index, value);
}
inline void _MsgSC_Finished::add_m_vtwin(::google::protobuf::int32 value) {
  m_vtwin_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
_MsgSC_Finished::m_vtwin() const {
  return m_vtwin_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
_MsgSC_Finished::mutable_m_vtwin() {
  return &m_vtwin_;
}

// repeated int32 m_vtResult = 7;
inline int _MsgSC_Finished::m_vtresult_size() const {
  return m_vtresult_.size();
}
inline void _MsgSC_Finished::clear_m_vtresult() {
  m_vtresult_.Clear();
}
inline ::google::protobuf::int32 _MsgSC_Finished::m_vtresult(int index) const {
  return m_vtresult_.Get(index);
}
inline void _MsgSC_Finished::set_m_vtresult(int index, ::google::protobuf::int32 value) {
  m_vtresult_.Set(index, value);
}
inline void _MsgSC_Finished::add_m_vtresult(::google::protobuf::int32 value) {
  m_vtresult_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
_MsgSC_Finished::m_vtresult() const {
  return m_vtresult_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
_MsgSC_Finished::mutable_m_vtresult() {
  return &m_vtresult_;
}

// repeated sint64 m_vtGiveMoney = 8;
inline int _MsgSC_Finished::m_vtgivemoney_size() const {
  return m_vtgivemoney_.size();
}
inline void _MsgSC_Finished::clear_m_vtgivemoney() {
  m_vtgivemoney_.Clear();
}
inline ::google::protobuf::int64 _MsgSC_Finished::m_vtgivemoney(int index) const {
  return m_vtgivemoney_.Get(index);
}
inline void _MsgSC_Finished::set_m_vtgivemoney(int index, ::google::protobuf::int64 value) {
  m_vtgivemoney_.Set(index, value);
}
inline void _MsgSC_Finished::add_m_vtgivemoney(::google::protobuf::int64 value) {
  m_vtgivemoney_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
_MsgSC_Finished::m_vtgivemoney() const {
  return m_vtgivemoney_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
_MsgSC_Finished::mutable_m_vtgivemoney() {
  return &m_vtgivemoney_;
}

// repeated .Game_Poker._Cards m_tblCard = 9;
inline int _MsgSC_Finished::m_tblcard_size() const {
  return m_tblcard_.size();
}
inline void _MsgSC_Finished::clear_m_tblcard() {
  m_tblcard_.Clear();
}
inline const ::Game_Poker::_Cards& _MsgSC_Finished::m_tblcard(int index) const {
  return m_tblcard_.Get(index);
}
inline ::Game_Poker::_Cards* _MsgSC_Finished::mutable_m_tblcard(int index) {
  return m_tblcard_.Mutable(index);
}
inline ::Game_Poker::_Cards* _MsgSC_Finished::add_m_tblcard() {
  return m_tblcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >&
_MsgSC_Finished::m_tblcard() const {
  return m_tblcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Cards >*
_MsgSC_Finished::mutable_m_tblcard() {
  return &m_tblcard_;
}

// repeated .Game_Poker._Money m_tblMoney = 10;
inline int _MsgSC_Finished::m_tblmoney_size() const {
  return m_tblmoney_.size();
}
inline void _MsgSC_Finished::clear_m_tblmoney() {
  m_tblmoney_.Clear();
}
inline const ::Game_Poker::_Money& _MsgSC_Finished::m_tblmoney(int index) const {
  return m_tblmoney_.Get(index);
}
inline ::Game_Poker::_Money* _MsgSC_Finished::mutable_m_tblmoney(int index) {
  return m_tblmoney_.Mutable(index);
}
inline ::Game_Poker::_Money* _MsgSC_Finished::add_m_tblmoney() {
  return m_tblmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >&
_MsgSC_Finished::m_tblmoney() const {
  return m_tblmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_Money >*
_MsgSC_Finished::mutable_m_tblmoney() {
  return &m_tblmoney_;
}

// required sint64 m_llPoolMoney = 11;
inline bool _MsgSC_Finished::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _MsgSC_Finished::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _MsgSC_Finished::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _MsgSC_Finished::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 _MsgSC_Finished::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void _MsgSC_Finished::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
inline int _MsgSC_Finished::m_vtusermoney_size() const {
  return m_vtusermoney_.size();
}
inline void _MsgSC_Finished::clear_m_vtusermoney() {
  m_vtusermoney_.Clear();
}
inline const ::Game_Poker::UserMoney& _MsgSC_Finished::m_vtusermoney(int index) const {
  return m_vtusermoney_.Get(index);
}
inline ::Game_Poker::UserMoney* _MsgSC_Finished::mutable_m_vtusermoney(int index) {
  return m_vtusermoney_.Mutable(index);
}
inline ::Game_Poker::UserMoney* _MsgSC_Finished::add_m_vtusermoney() {
  return m_vtusermoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney >&
_MsgSC_Finished::m_vtusermoney() const {
  return m_vtusermoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney >*
_MsgSC_Finished::mutable_m_vtusermoney() {
  return &m_vtusermoney_;
}

// required sint32 m_lResultIdx = 13;
inline bool _MsgSC_Finished::has_m_lresultidx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void _MsgSC_Finished::set_has_m_lresultidx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void _MsgSC_Finished::clear_has_m_lresultidx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void _MsgSC_Finished::clear_m_lresultidx() {
  m_lresultidx_ = 0;
  clear_has_m_lresultidx();
}
inline ::google::protobuf::int32 _MsgSC_Finished::m_lresultidx() const {
  return m_lresultidx_;
}
inline void _MsgSC_Finished::set_m_lresultidx(::google::protobuf::int32 value) {
  set_has_m_lresultidx();
  m_lresultidx_ = value;
}

// required sint64 m_llJackpot = 14;
inline bool _MsgSC_Finished::has_m_lljackpot() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _MsgSC_Finished::set_has_m_lljackpot() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _MsgSC_Finished::clear_has_m_lljackpot() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _MsgSC_Finished::clear_m_lljackpot() {
  m_lljackpot_ = GOOGLE_LONGLONG(0);
  clear_has_m_lljackpot();
}
inline ::google::protobuf::int64 _MsgSC_Finished::m_lljackpot() const {
  return m_lljackpot_;
}
inline void _MsgSC_Finished::set_m_lljackpot(::google::protobuf::int64 value) {
  set_has_m_lljackpot();
  m_lljackpot_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_NewGame

// repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
inline int _MsgSC_NewGame::m_vtwinloseinfo_size() const {
  return m_vtwinloseinfo_.size();
}
inline void _MsgSC_NewGame::clear_m_vtwinloseinfo() {
  m_vtwinloseinfo_.Clear();
}
inline const ::Game_Poker::_WinLoseInfo& _MsgSC_NewGame::m_vtwinloseinfo(int index) const {
  return m_vtwinloseinfo_.Get(index);
}
inline ::Game_Poker::_WinLoseInfo* _MsgSC_NewGame::mutable_m_vtwinloseinfo(int index) {
  return m_vtwinloseinfo_.Mutable(index);
}
inline ::Game_Poker::_WinLoseInfo* _MsgSC_NewGame::add_m_vtwinloseinfo() {
  return m_vtwinloseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo >&
_MsgSC_NewGame::m_vtwinloseinfo() const {
  return m_vtwinloseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo >*
_MsgSC_NewGame::mutable_m_vtwinloseinfo() {
  return &m_vtwinloseinfo_;
}

// -------------------------------------------------------------------

// _MsgSC_ContinueAns

// required sint32 m_lUSN = 1;
inline bool _MsgSC_ContinueAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_ContinueAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_ContinueAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_ContinueAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_ContinueAns::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_ContinueAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_Continue

// repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
inline int _MsgSC_Continue::m_vtwinloseinfo_size() const {
  return m_vtwinloseinfo_.size();
}
inline void _MsgSC_Continue::clear_m_vtwinloseinfo() {
  m_vtwinloseinfo_.Clear();
}
inline const ::Game_Poker::_WinLoseInfo& _MsgSC_Continue::m_vtwinloseinfo(int index) const {
  return m_vtwinloseinfo_.Get(index);
}
inline ::Game_Poker::_WinLoseInfo* _MsgSC_Continue::mutable_m_vtwinloseinfo(int index) {
  return m_vtwinloseinfo_.Mutable(index);
}
inline ::Game_Poker::_WinLoseInfo* _MsgSC_Continue::add_m_vtwinloseinfo() {
  return m_vtwinloseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo >&
_MsgSC_Continue::m_vtwinloseinfo() const {
  return m_vtwinloseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WinLoseInfo >*
_MsgSC_Continue::mutable_m_vtwinloseinfo() {
  return &m_vtwinloseinfo_;
}

// -------------------------------------------------------------------

// _MsgSC_SystemMsg

// required sint32 m_lType = 1;
inline bool _MsgSC_SystemMsg::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_SystemMsg::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_SystemMsg::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_SystemMsg::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 _MsgSC_SystemMsg::m_ltype() const {
  return m_ltype_;
}
inline void _MsgSC_SystemMsg::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_PurgeAns

// -------------------------------------------------------------------

// _MsgSC_PurgeInfo

// repeated .Game_Poker._VecUSN m_vtPurgeUSN = 1;
inline int _MsgSC_PurgeInfo::m_vtpurgeusn_size() const {
  return m_vtpurgeusn_.size();
}
inline void _MsgSC_PurgeInfo::clear_m_vtpurgeusn() {
  m_vtpurgeusn_.Clear();
}
inline const ::Game_Poker::_VecUSN& _MsgSC_PurgeInfo::m_vtpurgeusn(int index) const {
  return m_vtpurgeusn_.Get(index);
}
inline ::Game_Poker::_VecUSN* _MsgSC_PurgeInfo::mutable_m_vtpurgeusn(int index) {
  return m_vtpurgeusn_.Mutable(index);
}
inline ::Game_Poker::_VecUSN* _MsgSC_PurgeInfo::add_m_vtpurgeusn() {
  return m_vtpurgeusn_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecUSN >&
_MsgSC_PurgeInfo::m_vtpurgeusn() const {
  return m_vtpurgeusn_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_VecUSN >*
_MsgSC_PurgeInfo::mutable_m_vtpurgeusn() {
  return &m_vtpurgeusn_;
}

// required int32 m_nCount = 2;
inline bool _MsgSC_PurgeInfo::has_m_ncount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_PurgeInfo::set_has_m_ncount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_PurgeInfo::clear_has_m_ncount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_PurgeInfo::clear_m_ncount() {
  m_ncount_ = 0;
  clear_has_m_ncount();
}
inline ::google::protobuf::int32 _MsgSC_PurgeInfo::m_ncount() const {
  return m_ncount_;
}
inline void _MsgSC_PurgeInfo::set_m_ncount(::google::protobuf::int32 value) {
  set_has_m_ncount();
  m_ncount_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_SetPurgeMoney

// required sint32 m_lUSN = 1;
inline bool _MsgSC_SetPurgeMoney::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_SetPurgeMoney::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_SetPurgeMoney::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_SetPurgeMoney::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_SetPurgeMoney::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_SetPurgeMoney::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required .Game_Poker._Money m_money = 2;
inline bool _MsgSC_SetPurgeMoney::has_m_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_SetPurgeMoney::set_has_m_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_SetPurgeMoney::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_SetPurgeMoney::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::_Money& _MsgSC_SetPurgeMoney::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_SetPurgeMoney::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::_Money;
  return m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_SetPurgeMoney::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::_Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// _MsgSC_AssaItemNotify

// required sint32 m_lUSN = 1;
inline bool _MsgSC_AssaItemNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_AssaItemNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_AssaItemNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_AssaItemNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_AssaItemNotify::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_AssaItemNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lRankType = 2;
inline bool _MsgSC_AssaItemNotify::has_m_lranktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_AssaItemNotify::set_has_m_lranktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_AssaItemNotify::clear_has_m_lranktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_AssaItemNotify::clear_m_lranktype() {
  m_lranktype_ = 0;
  clear_has_m_lranktype();
}
inline ::google::protobuf::int32 _MsgSC_AssaItemNotify::m_lranktype() const {
  return m_lranktype_;
}
inline void _MsgSC_AssaItemNotify::set_m_lranktype(::google::protobuf::int32 value) {
  set_has_m_lranktype();
  m_lranktype_ = value;
}

// required string m_sItem = 3;
inline bool _MsgSC_AssaItemNotify::has_m_sitem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_AssaItemNotify::set_has_m_sitem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_AssaItemNotify::clear_has_m_sitem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_AssaItemNotify::clear_m_sitem() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    m_sitem_->clear();
  }
  clear_has_m_sitem();
}
inline const ::std::string& _MsgSC_AssaItemNotify::m_sitem() const {
  return *m_sitem_;
}
inline void _MsgSC_AssaItemNotify::set_m_sitem(const ::std::string& value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void _MsgSC_AssaItemNotify::set_m_sitem(const char* value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void _MsgSC_AssaItemNotify::set_m_sitem(const char* value, size_t size) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgSC_AssaItemNotify::mutable_m_sitem() {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  return m_sitem_;
}
inline ::std::string* _MsgSC_AssaItemNotify::release_m_sitem() {
  clear_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sitem_;
    m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// _MsgSC_ThankYouItemNotify

// required sint32 m_lUSN = 1;
inline bool _MsgSC_ThankYouItemNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_ThankYouItemNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_ThankYouItemNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_ThankYouItemNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_ThankYouItemNotify::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_ThankYouItemNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lRankType = 2;
inline bool _MsgSC_ThankYouItemNotify::has_m_lranktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_ThankYouItemNotify::set_has_m_lranktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_ThankYouItemNotify::clear_has_m_lranktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_ThankYouItemNotify::clear_m_lranktype() {
  m_lranktype_ = 0;
  clear_has_m_lranktype();
}
inline ::google::protobuf::int32 _MsgSC_ThankYouItemNotify::m_lranktype() const {
  return m_lranktype_;
}
inline void _MsgSC_ThankYouItemNotify::set_m_lranktype(::google::protobuf::int32 value) {
  set_has_m_lranktype();
  m_lranktype_ = value;
}

// required sint64 m_llBasicDDangMoney = 3;
inline bool _MsgSC_ThankYouItemNotify::has_m_llbasicddangmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_ThankYouItemNotify::set_has_m_llbasicddangmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_ThankYouItemNotify::clear_has_m_llbasicddangmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_ThankYouItemNotify::clear_m_llbasicddangmoney() {
  m_llbasicddangmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llbasicddangmoney();
}
inline ::google::protobuf::int64 _MsgSC_ThankYouItemNotify::m_llbasicddangmoney() const {
  return m_llbasicddangmoney_;
}
inline void _MsgSC_ThankYouItemNotify::set_m_llbasicddangmoney(::google::protobuf::int64 value) {
  set_has_m_llbasicddangmoney();
  m_llbasicddangmoney_ = value;
}

// required string m_sItem = 4;
inline bool _MsgSC_ThankYouItemNotify::has_m_sitem() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_ThankYouItemNotify::set_has_m_sitem() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_ThankYouItemNotify::clear_has_m_sitem() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_ThankYouItemNotify::clear_m_sitem() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    m_sitem_->clear();
  }
  clear_has_m_sitem();
}
inline const ::std::string& _MsgSC_ThankYouItemNotify::m_sitem() const {
  return *m_sitem_;
}
inline void _MsgSC_ThankYouItemNotify::set_m_sitem(const ::std::string& value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void _MsgSC_ThankYouItemNotify::set_m_sitem(const char* value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void _MsgSC_ThankYouItemNotify::set_m_sitem(const char* value, size_t size) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgSC_ThankYouItemNotify::mutable_m_sitem() {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  return m_sitem_;
}
inline ::std::string* _MsgSC_ThankYouItemNotify::release_m_sitem() {
  clear_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sitem_;
    m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// _MsgSC_MadeItemNotify

// required sint32 m_lUSN = 1;
inline bool _MsgSC_MadeItemNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_MadeItemNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_MadeItemNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_MadeItemNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_MadeItemNotify::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_MadeItemNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lRankType = 2;
inline bool _MsgSC_MadeItemNotify::has_m_lranktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_MadeItemNotify::set_has_m_lranktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_MadeItemNotify::clear_has_m_lranktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_MadeItemNotify::clear_m_lranktype() {
  m_lranktype_ = 0;
  clear_has_m_lranktype();
}
inline ::google::protobuf::int32 _MsgSC_MadeItemNotify::m_lranktype() const {
  return m_lranktype_;
}
inline void _MsgSC_MadeItemNotify::set_m_lranktype(::google::protobuf::int32 value) {
  set_has_m_lranktype();
  m_lranktype_ = value;
}

// required string m_sItem = 3;
inline bool _MsgSC_MadeItemNotify::has_m_sitem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_MadeItemNotify::set_has_m_sitem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_MadeItemNotify::clear_has_m_sitem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_MadeItemNotify::clear_m_sitem() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    m_sitem_->clear();
  }
  clear_has_m_sitem();
}
inline const ::std::string& _MsgSC_MadeItemNotify::m_sitem() const {
  return *m_sitem_;
}
inline void _MsgSC_MadeItemNotify::set_m_sitem(const ::std::string& value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void _MsgSC_MadeItemNotify::set_m_sitem(const char* value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void _MsgSC_MadeItemNotify::set_m_sitem(const char* value, size_t size) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgSC_MadeItemNotify::mutable_m_sitem() {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  return m_sitem_;
}
inline ::std::string* _MsgSC_MadeItemNotify::release_m_sitem() {
  clear_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sitem_;
    m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// _MsgSC_ExtMoneyNotify

// required sint32 m_lUSN = 1;
inline bool _MsgSC_ExtMoneyNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_ExtMoneyNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_ExtMoneyNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_ExtMoneyNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_ExtMoneyNotify::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_ExtMoneyNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_bExtType = 2;
inline bool _MsgSC_ExtMoneyNotify::has_m_bexttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_ExtMoneyNotify::set_has_m_bexttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_ExtMoneyNotify::clear_has_m_bexttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_ExtMoneyNotify::clear_m_bexttype() {
  m_bexttype_ = 0;
  clear_has_m_bexttype();
}
inline ::google::protobuf::int32 _MsgSC_ExtMoneyNotify::m_bexttype() const {
  return m_bexttype_;
}
inline void _MsgSC_ExtMoneyNotify::set_m_bexttype(::google::protobuf::int32 value) {
  set_has_m_bexttype();
  m_bexttype_ = value;
}

// required sint64 m_llCMoney = 3;
inline bool _MsgSC_ExtMoneyNotify::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_ExtMoneyNotify::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_ExtMoneyNotify::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_ExtMoneyNotify::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 _MsgSC_ExtMoneyNotify::m_llcmoney() const {
  return m_llcmoney_;
}
inline void _MsgSC_ExtMoneyNotify::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// required sint64 m_llCashBox = 4;
inline bool _MsgSC_ExtMoneyNotify::has_m_llcashbox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_ExtMoneyNotify::set_has_m_llcashbox() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_ExtMoneyNotify::clear_has_m_llcashbox() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_ExtMoneyNotify::clear_m_llcashbox() {
  m_llcashbox_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcashbox();
}
inline ::google::protobuf::int64 _MsgSC_ExtMoneyNotify::m_llcashbox() const {
  return m_llcashbox_;
}
inline void _MsgSC_ExtMoneyNotify::set_m_llcashbox(::google::protobuf::int64 value) {
  set_has_m_llcashbox();
  m_llcashbox_ = value;
}

// required sint64 m_llExtMoney = 5;
inline bool _MsgSC_ExtMoneyNotify::has_m_llextmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgSC_ExtMoneyNotify::set_has_m_llextmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgSC_ExtMoneyNotify::clear_has_m_llextmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgSC_ExtMoneyNotify::clear_m_llextmoney() {
  m_llextmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llextmoney();
}
inline ::google::protobuf::int64 _MsgSC_ExtMoneyNotify::m_llextmoney() const {
  return m_llextmoney_;
}
inline void _MsgSC_ExtMoneyNotify::set_m_llextmoney(::google::protobuf::int64 value) {
  set_has_m_llextmoney();
  m_llextmoney_ = value;
}

// required sint64 m_llExtDate = 6;
inline bool _MsgSC_ExtMoneyNotify::has_m_llextdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _MsgSC_ExtMoneyNotify::set_has_m_llextdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _MsgSC_ExtMoneyNotify::clear_has_m_llextdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _MsgSC_ExtMoneyNotify::clear_m_llextdate() {
  m_llextdate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llextdate();
}
inline ::google::protobuf::int64 _MsgSC_ExtMoneyNotify::m_llextdate() const {
  return m_llextdate_;
}
inline void _MsgSC_ExtMoneyNotify::set_m_llextdate(::google::protobuf::int64 value) {
  set_has_m_llextdate();
  m_llextdate_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_GameEndSystemMsg

// required sint32 m_lType = 1;
inline bool _MsgSC_GameEndSystemMsg::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_GameEndSystemMsg::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_GameEndSystemMsg::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_GameEndSystemMsg::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 _MsgSC_GameEndSystemMsg::m_ltype() const {
  return m_ltype_;
}
inline void _MsgSC_GameEndSystemMsg::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// required sint32 m_lUSN = 2;
inline bool _MsgSC_GameEndSystemMsg::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_GameEndSystemMsg::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_GameEndSystemMsg::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_GameEndSystemMsg::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_GameEndSystemMsg::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_GameEndSystemMsg::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_bGiveUp = 3;
inline bool _MsgSC_GameEndSystemMsg::has_m_bgiveup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_GameEndSystemMsg::set_has_m_bgiveup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_GameEndSystemMsg::clear_has_m_bgiveup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_GameEndSystemMsg::clear_m_bgiveup() {
  m_bgiveup_ = 0;
  clear_has_m_bgiveup();
}
inline ::google::protobuf::int32 _MsgSC_GameEndSystemMsg::m_bgiveup() const {
  return m_bgiveup_;
}
inline void _MsgSC_GameEndSystemMsg::set_m_bgiveup(::google::protobuf::int32 value) {
  set_has_m_bgiveup();
  m_bgiveup_ = value;
}

// required sint64 m_llMoney = 4;
inline bool _MsgSC_GameEndSystemMsg::has_m_llmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_GameEndSystemMsg::set_has_m_llmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_GameEndSystemMsg::clear_has_m_llmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_GameEndSystemMsg::clear_m_llmoney() {
  m_llmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llmoney();
}
inline ::google::protobuf::int64 _MsgSC_GameEndSystemMsg::m_llmoney() const {
  return m_llmoney_;
}
inline void _MsgSC_GameEndSystemMsg::set_m_llmoney(::google::protobuf::int64 value) {
  set_has_m_llmoney();
  m_llmoney_ = value;
}

// required string m_sMsg = 5;
inline bool _MsgSC_GameEndSystemMsg::has_m_smsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _MsgSC_GameEndSystemMsg::set_has_m_smsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _MsgSC_GameEndSystemMsg::clear_has_m_smsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _MsgSC_GameEndSystemMsg::clear_m_smsg() {
  if (m_smsg_ != &::google::protobuf::internal::kEmptyString) {
    m_smsg_->clear();
  }
  clear_has_m_smsg();
}
inline const ::std::string& _MsgSC_GameEndSystemMsg::m_smsg() const {
  return *m_smsg_;
}
inline void _MsgSC_GameEndSystemMsg::set_m_smsg(const ::std::string& value) {
  set_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smsg_ = new ::std::string;
  }
  m_smsg_->assign(value);
}
inline void _MsgSC_GameEndSystemMsg::set_m_smsg(const char* value) {
  set_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smsg_ = new ::std::string;
  }
  m_smsg_->assign(value);
}
inline void _MsgSC_GameEndSystemMsg::set_m_smsg(const char* value, size_t size) {
  set_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smsg_ = new ::std::string;
  }
  m_smsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgSC_GameEndSystemMsg::mutable_m_smsg() {
  set_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smsg_ = new ::std::string;
  }
  return m_smsg_;
}
inline ::std::string* _MsgSC_GameEndSystemMsg::release_m_smsg() {
  clear_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_smsg_;
    m_smsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// _MsgSC_ChangeAvatarNotify

// required sint32 m_lUSN = 1;
inline bool _MsgSC_ChangeAvatarNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_ChangeAvatarNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_ChangeAvatarNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_ChangeAvatarNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_ChangeAvatarNotify::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_ChangeAvatarNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool _MsgSC_ChangeAvatarNotify::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_ChangeAvatarNotify::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_ChangeAvatarNotify::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_ChangeAvatarNotify::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _MsgSC_ChangeAvatarNotify::m_nindex() const {
  return m_nindex_;
}
inline void _MsgSC_ChangeAvatarNotify::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required .Game_Poker._UserInfo m_uinfo = 3;
inline bool _MsgSC_ChangeAvatarNotify::has_m_uinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_ChangeAvatarNotify::set_has_m_uinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_ChangeAvatarNotify::clear_has_m_uinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_ChangeAvatarNotify::clear_m_uinfo() {
  if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::_UserInfo::Clear();
  clear_has_m_uinfo();
}
inline const ::Game_Poker::_UserInfo& _MsgSC_ChangeAvatarNotify::m_uinfo() const {
  return m_uinfo_ != NULL ? *m_uinfo_ : *default_instance_->m_uinfo_;
}
inline ::Game_Poker::_UserInfo* _MsgSC_ChangeAvatarNotify::mutable_m_uinfo() {
  set_has_m_uinfo();
  if (m_uinfo_ == NULL) m_uinfo_ = new ::Game_Poker::_UserInfo;
  return m_uinfo_;
}
inline ::Game_Poker::_UserInfo* _MsgSC_ChangeAvatarNotify::release_m_uinfo() {
  clear_has_m_uinfo();
  ::Game_Poker::_UserInfo* temp = m_uinfo_;
  m_uinfo_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// _MsgSC_AbuseAns

// -------------------------------------------------------------------

// _MsgSC_SoundTypeAns

// required sint32 m_lUSN = 1;
inline bool _MsgSC_SoundTypeAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_SoundTypeAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_SoundTypeAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_SoundTypeAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_SoundTypeAns::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_SoundTypeAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool _MsgSC_SoundTypeAns::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_SoundTypeAns::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_SoundTypeAns::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_SoundTypeAns::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _MsgSC_SoundTypeAns::m_nindex() const {
  return m_nindex_;
}
inline void _MsgSC_SoundTypeAns::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lSoundType = 3;
inline bool _MsgSC_SoundTypeAns::has_m_lsoundtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_SoundTypeAns::set_has_m_lsoundtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_SoundTypeAns::clear_has_m_lsoundtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_SoundTypeAns::clear_m_lsoundtype() {
  m_lsoundtype_ = 0;
  clear_has_m_lsoundtype();
}
inline ::google::protobuf::int32 _MsgSC_SoundTypeAns::m_lsoundtype() const {
  return m_lsoundtype_;
}
inline void _MsgSC_SoundTypeAns::set_m_lsoundtype(::google::protobuf::int32 value) {
  set_has_m_lsoundtype();
  m_lsoundtype_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_FMoney

// required string m_sFMoney = 1;
inline bool _MsgSC_FMoney::has_m_sfmoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_FMoney::set_has_m_sfmoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_FMoney::clear_has_m_sfmoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_FMoney::clear_m_sfmoney() {
  if (m_sfmoney_ != &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_->clear();
  }
  clear_has_m_sfmoney();
}
inline const ::std::string& _MsgSC_FMoney::m_sfmoney() const {
  return *m_sfmoney_;
}
inline void _MsgSC_FMoney::set_m_sfmoney(const ::std::string& value) {
  set_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_ = new ::std::string;
  }
  m_sfmoney_->assign(value);
}
inline void _MsgSC_FMoney::set_m_sfmoney(const char* value) {
  set_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_ = new ::std::string;
  }
  m_sfmoney_->assign(value);
}
inline void _MsgSC_FMoney::set_m_sfmoney(const char* value, size_t size) {
  set_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_ = new ::std::string;
  }
  m_sfmoney_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgSC_FMoney::mutable_m_sfmoney() {
  set_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_ = new ::std::string;
  }
  return m_sfmoney_;
}
inline ::std::string* _MsgSC_FMoney::release_m_sfmoney() {
  clear_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sfmoney_;
    m_sfmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// _MsgSC_ItemNotify

// required sint32 m_lLimitTotalCnt = 1;
inline bool _MsgSC_ItemNotify::has_m_llimittotalcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_ItemNotify::set_has_m_llimittotalcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_ItemNotify::clear_has_m_llimittotalcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_ItemNotify::clear_m_llimittotalcnt() {
  m_llimittotalcnt_ = 0;
  clear_has_m_llimittotalcnt();
}
inline ::google::protobuf::int32 _MsgSC_ItemNotify::m_llimittotalcnt() const {
  return m_llimittotalcnt_;
}
inline void _MsgSC_ItemNotify::set_m_llimittotalcnt(::google::protobuf::int32 value) {
  set_has_m_llimittotalcnt();
  m_llimittotalcnt_ = value;
}

// required sint32 m_lLimitTodayCnt = 2;
inline bool _MsgSC_ItemNotify::has_m_llimittodaycnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_ItemNotify::set_has_m_llimittodaycnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_ItemNotify::clear_has_m_llimittodaycnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_ItemNotify::clear_m_llimittodaycnt() {
  m_llimittodaycnt_ = 0;
  clear_has_m_llimittodaycnt();
}
inline ::google::protobuf::int32 _MsgSC_ItemNotify::m_llimittodaycnt() const {
  return m_llimittodaycnt_;
}
inline void _MsgSC_ItemNotify::set_m_llimittodaycnt(::google::protobuf::int32 value) {
  set_has_m_llimittodaycnt();
  m_llimittodaycnt_ = value;
}

// required sint32 m_bInfinitySpeedItem = 3;
inline bool _MsgSC_ItemNotify::has_m_binfinityspeeditem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_ItemNotify::set_has_m_binfinityspeeditem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_ItemNotify::clear_has_m_binfinityspeeditem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_ItemNotify::clear_m_binfinityspeeditem() {
  m_binfinityspeeditem_ = 0;
  clear_has_m_binfinityspeeditem();
}
inline ::google::protobuf::int32 _MsgSC_ItemNotify::m_binfinityspeeditem() const {
  return m_binfinityspeeditem_;
}
inline void _MsgSC_ItemNotify::set_m_binfinityspeeditem(::google::protobuf::int32 value) {
  set_has_m_binfinityspeeditem();
  m_binfinityspeeditem_ = value;
}

// required sint64 m_llSpeedToTime = 4;
inline bool _MsgSC_ItemNotify::has_m_llspeedtotime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_ItemNotify::set_has_m_llspeedtotime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_ItemNotify::clear_has_m_llspeedtotime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_ItemNotify::clear_m_llspeedtotime() {
  m_llspeedtotime_ = GOOGLE_LONGLONG(0);
  clear_has_m_llspeedtotime();
}
inline ::google::protobuf::int64 _MsgSC_ItemNotify::m_llspeedtotime() const {
  return m_llspeedtotime_;
}
inline void _MsgSC_ItemNotify::set_m_llspeedtotime(::google::protobuf::int64 value) {
  set_has_m_llspeedtotime();
  m_llspeedtotime_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_DisconnectMoneyNotify

// required string m_sNickName = 1;
inline bool _MsgSC_DisconnectMoneyNotify::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_DisconnectMoneyNotify::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_DisconnectMoneyNotify::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_DisconnectMoneyNotify::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& _MsgSC_DisconnectMoneyNotify::m_snickname() const {
  return *m_snickname_;
}
inline void _MsgSC_DisconnectMoneyNotify::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _MsgSC_DisconnectMoneyNotify::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void _MsgSC_DisconnectMoneyNotify::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgSC_DisconnectMoneyNotify::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* _MsgSC_DisconnectMoneyNotify::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint64 m_llDisconnectMoney = 2;
inline bool _MsgSC_DisconnectMoneyNotify::has_m_lldisconnectmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_DisconnectMoneyNotify::set_has_m_lldisconnectmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_DisconnectMoneyNotify::clear_has_m_lldisconnectmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_DisconnectMoneyNotify::clear_m_lldisconnectmoney() {
  m_lldisconnectmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lldisconnectmoney();
}
inline ::google::protobuf::int64 _MsgSC_DisconnectMoneyNotify::m_lldisconnectmoney() const {
  return m_lldisconnectmoney_;
}
inline void _MsgSC_DisconnectMoneyNotify::set_m_lldisconnectmoney(::google::protobuf::int64 value) {
  set_has_m_lldisconnectmoney();
  m_lldisconnectmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_ExitNtf

// required sint32 m_lUSN = 1;
inline bool _MsgSC_ExitNtf::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_ExitNtf::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_ExitNtf::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_ExitNtf::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_ExitNtf::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_ExitNtf::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool _MsgSC_ExitNtf::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_ExitNtf::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_ExitNtf::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_ExitNtf::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 _MsgSC_ExitNtf::m_nindex() const {
  return m_nindex_;
}
inline void _MsgSC_ExitNtf::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lExit = 3;
inline bool _MsgSC_ExitNtf::has_m_lexit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_ExitNtf::set_has_m_lexit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_ExitNtf::clear_has_m_lexit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_ExitNtf::clear_m_lexit() {
  m_lexit_ = 0;
  clear_has_m_lexit();
}
inline ::google::protobuf::int32 _MsgSC_ExitNtf::m_lexit() const {
  return m_lexit_;
}
inline void _MsgSC_ExitNtf::set_m_lexit(::google::protobuf::int32 value) {
  set_has_m_lexit();
  m_lexit_ = value;
}

// required sint32 m_bExit = 4;
inline bool _MsgSC_ExitNtf::has_m_bexit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_ExitNtf::set_has_m_bexit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_ExitNtf::clear_has_m_bexit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_ExitNtf::clear_m_bexit() {
  m_bexit_ = 0;
  clear_has_m_bexit();
}
inline ::google::protobuf::int32 _MsgSC_ExitNtf::m_bexit() const {
  return m_bexit_;
}
inline void _MsgSC_ExitNtf::set_m_bexit(::google::protobuf::int32 value) {
  set_has_m_bexit();
  m_bexit_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_RematchOKAns

// required sint32 m_lUSN = 1;
inline bool _MsgSC_RematchOKAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_RematchOKAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_RematchOKAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_RematchOKAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_RematchOKAns::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_RematchOKAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint64 m_llPoolMoney = 2;
inline bool _MsgSC_RematchOKAns::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_RematchOKAns::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_RematchOKAns::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_RematchOKAns::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 _MsgSC_RematchOKAns::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void _MsgSC_RematchOKAns::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// required .Game_Poker._Money m_money = 3;
inline bool _MsgSC_RematchOKAns::has_m_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_RematchOKAns::set_has_m_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_RematchOKAns::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_RematchOKAns::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::_Money& _MsgSC_RematchOKAns::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_RematchOKAns::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::_Money;
  return m_money_;
}
inline ::Game_Poker::_Money* _MsgSC_RematchOKAns::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::_Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// required sint32 m_bRematchOK = 4;
inline bool _MsgSC_RematchOKAns::has_m_brematchok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _MsgSC_RematchOKAns::set_has_m_brematchok() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _MsgSC_RematchOKAns::clear_has_m_brematchok() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _MsgSC_RematchOKAns::clear_m_brematchok() {
  m_brematchok_ = 0;
  clear_has_m_brematchok();
}
inline ::google::protobuf::int32 _MsgSC_RematchOKAns::m_brematchok() const {
  return m_brematchok_;
}
inline void _MsgSC_RematchOKAns::set_m_brematchok(::google::protobuf::int32 value) {
  set_has_m_brematchok();
  m_brematchok_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_RuleNotify

// required int32 m_nRuleIdx = 1;
inline bool _MsgSC_RuleNotify::has_m_nruleidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_RuleNotify::set_has_m_nruleidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_RuleNotify::clear_has_m_nruleidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_RuleNotify::clear_m_nruleidx() {
  m_nruleidx_ = 0;
  clear_has_m_nruleidx();
}
inline ::google::protobuf::int32 _MsgSC_RuleNotify::m_nruleidx() const {
  return m_nruleidx_;
}
inline void _MsgSC_RuleNotify::set_m_nruleidx(::google::protobuf::int32 value) {
  set_has_m_nruleidx();
  m_nruleidx_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_AllowEntryWaitingUser

// -------------------------------------------------------------------

// _MsgSC_AllWaitingUserDataNtf

// required sint32 m_bSendWaitingUser = 1;
inline bool _MsgSC_AllWaitingUserDataNtf::has_m_bsendwaitinguser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_AllWaitingUserDataNtf::set_has_m_bsendwaitinguser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_AllWaitingUserDataNtf::clear_has_m_bsendwaitinguser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_AllWaitingUserDataNtf::clear_m_bsendwaitinguser() {
  m_bsendwaitinguser_ = 0;
  clear_has_m_bsendwaitinguser();
}
inline ::google::protobuf::int32 _MsgSC_AllWaitingUserDataNtf::m_bsendwaitinguser() const {
  return m_bsendwaitinguser_;
}
inline void _MsgSC_AllWaitingUserDataNtf::set_m_bsendwaitinguser(::google::protobuf::int32 value) {
  set_has_m_bsendwaitinguser();
  m_bsendwaitinguser_ = value;
}

// repeated .Game_Poker._WAITINGUSERDATA m_WaitingUserData = 2;
inline int _MsgSC_AllWaitingUserDataNtf::m_waitinguserdata_size() const {
  return m_waitinguserdata_.size();
}
inline void _MsgSC_AllWaitingUserDataNtf::clear_m_waitinguserdata() {
  m_waitinguserdata_.Clear();
}
inline const ::Game_Poker::_WAITINGUSERDATA& _MsgSC_AllWaitingUserDataNtf::m_waitinguserdata(int index) const {
  return m_waitinguserdata_.Get(index);
}
inline ::Game_Poker::_WAITINGUSERDATA* _MsgSC_AllWaitingUserDataNtf::mutable_m_waitinguserdata(int index) {
  return m_waitinguserdata_.Mutable(index);
}
inline ::Game_Poker::_WAITINGUSERDATA* _MsgSC_AllWaitingUserDataNtf::add_m_waitinguserdata() {
  return m_waitinguserdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WAITINGUSERDATA >&
_MsgSC_AllWaitingUserDataNtf::m_waitinguserdata() const {
  return m_waitinguserdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::_WAITINGUSERDATA >*
_MsgSC_AllWaitingUserDataNtf::mutable_m_waitinguserdata() {
  return &m_waitinguserdata_;
}

// -------------------------------------------------------------------

// _MsgSC_UserDataChangeNtf

// required .Game_Poker._RCUserData m_userData = 1;
inline bool _MsgSC_UserDataChangeNtf::has_m_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_UserDataChangeNtf::set_has_m_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_UserDataChangeNtf::clear_has_m_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_UserDataChangeNtf::clear_m_userdata() {
  if (m_userdata_ != NULL) m_userdata_->::Game_Poker::_RCUserData::Clear();
  clear_has_m_userdata();
}
inline const ::Game_Poker::_RCUserData& _MsgSC_UserDataChangeNtf::m_userdata() const {
  return m_userdata_ != NULL ? *m_userdata_ : *default_instance_->m_userdata_;
}
inline ::Game_Poker::_RCUserData* _MsgSC_UserDataChangeNtf::mutable_m_userdata() {
  set_has_m_userdata();
  if (m_userdata_ == NULL) m_userdata_ = new ::Game_Poker::_RCUserData;
  return m_userdata_;
}
inline ::Game_Poker::_RCUserData* _MsgSC_UserDataChangeNtf::release_m_userdata() {
  clear_has_m_userdata();
  ::Game_Poker::_RCUserData* temp = m_userdata_;
  m_userdata_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// _MsgSC_RefillMoneyNtf

// required sint32 m_lUSN = 1;
inline bool _MsgSC_RefillMoneyNtf::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_RefillMoneyNtf::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_RefillMoneyNtf::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_RefillMoneyNtf::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_RefillMoneyNtf::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_RefillMoneyNtf::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nRefillCnt = 2;
inline bool _MsgSC_RefillMoneyNtf::has_m_nrefillcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_RefillMoneyNtf::set_has_m_nrefillcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_RefillMoneyNtf::clear_has_m_nrefillcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_RefillMoneyNtf::clear_m_nrefillcnt() {
  m_nrefillcnt_ = 0;
  clear_has_m_nrefillcnt();
}
inline ::google::protobuf::int32 _MsgSC_RefillMoneyNtf::m_nrefillcnt() const {
  return m_nrefillcnt_;
}
inline void _MsgSC_RefillMoneyNtf::set_m_nrefillcnt(::google::protobuf::int32 value) {
  set_has_m_nrefillcnt();
  m_nrefillcnt_ = value;
}

// required sint64 m_llRefillMoney = 3;
inline bool _MsgSC_RefillMoneyNtf::has_m_llrefillmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_RefillMoneyNtf::set_has_m_llrefillmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_RefillMoneyNtf::clear_has_m_llrefillmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_RefillMoneyNtf::clear_m_llrefillmoney() {
  m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llrefillmoney();
}
inline ::google::protobuf::int64 _MsgSC_RefillMoneyNtf::m_llrefillmoney() const {
  return m_llrefillmoney_;
}
inline void _MsgSC_RefillMoneyNtf::set_m_llrefillmoney(::google::protobuf::int64 value) {
  set_has_m_llrefillmoney();
  m_llrefillmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_JackpotMoneyNtf

// required sint32 m_lUSN = 1;
inline bool _MsgSC_JackpotMoneyNtf::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_JackpotMoneyNtf::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_JackpotMoneyNtf::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_JackpotMoneyNtf::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_JackpotMoneyNtf::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_JackpotMoneyNtf::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint64 m_llJackpotMoney = 2;
inline bool _MsgSC_JackpotMoneyNtf::has_m_lljackpotmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_JackpotMoneyNtf::set_has_m_lljackpotmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_JackpotMoneyNtf::clear_has_m_lljackpotmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_JackpotMoneyNtf::clear_m_lljackpotmoney() {
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lljackpotmoney();
}
inline ::google::protobuf::int64 _MsgSC_JackpotMoneyNtf::m_lljackpotmoney() const {
  return m_lljackpotmoney_;
}
inline void _MsgSC_JackpotMoneyNtf::set_m_lljackpotmoney(::google::protobuf::int64 value) {
  set_has_m_lljackpotmoney();
  m_lljackpotmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_GuardianAngelMoney

// required sint32 m_lUSN = 1;
inline bool _MsgSC_GuardianAngelMoney::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_GuardianAngelMoney::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_GuardianAngelMoney::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_GuardianAngelMoney::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 _MsgSC_GuardianAngelMoney::m_lusn() const {
  return m_lusn_;
}
inline void _MsgSC_GuardianAngelMoney::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nGuardianAngelCnt = 2;
inline bool _MsgSC_GuardianAngelMoney::has_m_nguardianangelcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _MsgSC_GuardianAngelMoney::set_has_m_nguardianangelcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _MsgSC_GuardianAngelMoney::clear_has_m_nguardianangelcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _MsgSC_GuardianAngelMoney::clear_m_nguardianangelcnt() {
  m_nguardianangelcnt_ = 0;
  clear_has_m_nguardianangelcnt();
}
inline ::google::protobuf::int32 _MsgSC_GuardianAngelMoney::m_nguardianangelcnt() const {
  return m_nguardianangelcnt_;
}
inline void _MsgSC_GuardianAngelMoney::set_m_nguardianangelcnt(::google::protobuf::int32 value) {
  set_has_m_nguardianangelcnt();
  m_nguardianangelcnt_ = value;
}

// required sint64 m_llAngelMoney = 3;
inline bool _MsgSC_GuardianAngelMoney::has_m_llangelmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _MsgSC_GuardianAngelMoney::set_has_m_llangelmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _MsgSC_GuardianAngelMoney::clear_has_m_llangelmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _MsgSC_GuardianAngelMoney::clear_m_llangelmoney() {
  m_llangelmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llangelmoney();
}
inline ::google::protobuf::int64 _MsgSC_GuardianAngelMoney::m_llangelmoney() const {
  return m_llangelmoney_;
}
inline void _MsgSC_GuardianAngelMoney::set_m_llangelmoney(::google::protobuf::int64 value) {
  set_has_m_llangelmoney();
  m_llangelmoney_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_GameMasterCallNtf

// required sint32 m_lGMCall_USN = 1;
inline bool _MsgSC_GameMasterCallNtf::has_m_lgmcall_usn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_GameMasterCallNtf::set_has_m_lgmcall_usn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_GameMasterCallNtf::clear_has_m_lgmcall_usn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_GameMasterCallNtf::clear_m_lgmcall_usn() {
  m_lgmcall_usn_ = 0;
  clear_has_m_lgmcall_usn();
}
inline ::google::protobuf::int32 _MsgSC_GameMasterCallNtf::m_lgmcall_usn() const {
  return m_lgmcall_usn_;
}
inline void _MsgSC_GameMasterCallNtf::set_m_lgmcall_usn(::google::protobuf::int32 value) {
  set_has_m_lgmcall_usn();
  m_lgmcall_usn_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_ObserverCnt

// required int32 m_nObserverCnt = 1;
inline bool _MsgSC_ObserverCnt::has_m_nobservercnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_ObserverCnt::set_has_m_nobservercnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_ObserverCnt::clear_has_m_nobservercnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_ObserverCnt::clear_m_nobservercnt() {
  m_nobservercnt_ = 0;
  clear_has_m_nobservercnt();
}
inline ::google::protobuf::int32 _MsgSC_ObserverCnt::m_nobservercnt() const {
  return m_nobservercnt_;
}
inline void _MsgSC_ObserverCnt::set_m_nobservercnt(::google::protobuf::int32 value) {
  set_has_m_nobservercnt();
  m_nobservercnt_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_Bonus

// required sint64 m_llBonus = 1;
inline bool _MsgSC_Bonus::has_m_llbonus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_Bonus::set_has_m_llbonus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_Bonus::clear_has_m_llbonus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_Bonus::clear_m_llbonus() {
  m_llbonus_ = GOOGLE_LONGLONG(0);
  clear_has_m_llbonus();
}
inline ::google::protobuf::int64 _MsgSC_Bonus::m_llbonus() const {
  return m_llbonus_;
}
inline void _MsgSC_Bonus::set_m_llbonus(::google::protobuf::int64 value) {
  set_has_m_llbonus();
  m_llbonus_ = value;
}

// -------------------------------------------------------------------

// _MsgSC_PoliceNotify

// required string m_policeMsg = 1;
inline bool _MsgSC_PoliceNotify::has_m_policemsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _MsgSC_PoliceNotify::set_has_m_policemsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _MsgSC_PoliceNotify::clear_has_m_policemsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _MsgSC_PoliceNotify::clear_m_policemsg() {
  if (m_policemsg_ != &::google::protobuf::internal::kEmptyString) {
    m_policemsg_->clear();
  }
  clear_has_m_policemsg();
}
inline const ::std::string& _MsgSC_PoliceNotify::m_policemsg() const {
  return *m_policemsg_;
}
inline void _MsgSC_PoliceNotify::set_m_policemsg(const ::std::string& value) {
  set_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    m_policemsg_ = new ::std::string;
  }
  m_policemsg_->assign(value);
}
inline void _MsgSC_PoliceNotify::set_m_policemsg(const char* value) {
  set_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    m_policemsg_ = new ::std::string;
  }
  m_policemsg_->assign(value);
}
inline void _MsgSC_PoliceNotify::set_m_policemsg(const char* value, size_t size) {
  set_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    m_policemsg_ = new ::std::string;
  }
  m_policemsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* _MsgSC_PoliceNotify::mutable_m_policemsg() {
  set_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    m_policemsg_ = new ::std::string;
  }
  return m_policemsg_;
}
inline ::std::string* _MsgSC_PoliceNotify::release_m_policemsg() {
  clear_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_policemsg_;
    m_policemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game_Poker

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game_Poker::_Cards_state>() {
  return ::Game_Poker::_Cards_state_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Game_5fPoker_2eproto__INCLUDED
