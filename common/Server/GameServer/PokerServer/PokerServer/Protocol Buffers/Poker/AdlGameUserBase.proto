//
// GameUserBase: generated by XADL compiler 1.1 , 2011.1.28 15:28:51
//

#ifndef ADLGAMEUSERBASE_H
#define ADLGAMEUSERBASE_H

namespace adl { // start of namesapce

#include "AdlGameCommon.h"

enum{
	EMPTY_USER=-1,
};


struct UserInfoBase
{

	bool IsUser(){ return (m_lUSN>=0); }
	bool IsEmpty(){ return (m_lUSN<0); }
	virtual void Clear()
	{
		m_lUSN=EMPTY_USER;
		m_nIndex=-1;
		m_sNickName="";
		m_lCLevel=0;
		m_lSex=-1;
		m_lSoundType=0;
		m_sAvt.erase();
		m_nAvtType=0;
		m_lUserState=0;
		m_cWinLose_Today.Clear();
		m_llCMoney=0;
		m_llFMoney=0;
		m_lExit=0;
		m_lDieCardsDealt=0;
		m_lDisCnt=0;
		m_nItemType=0; //1:러브 2:드림 3:클럽 4:골드	
 	}
	LONG	m_lUSN;
	int	m_nIndex;
	std::string	m_sNickName;
	LONG	m_lCLevel;
	LONG	m_lSex;
	LONG	m_lSoundType;
	std::string	m_sAvt;
	int	m_nAvtType;
	LONG	m_lUserState;
	CWinLose	m_cWinLose_Today;
	__int64	m_llCMoney;
	__int64	m_llFMoney;
	LONG	m_lExit;
	LONG	m_lDieCardsDealt;
	LONG	m_lDisCnt;
	int	m_nItemType;
};

/*
PROCEDURE get_userdata(
	p_usn              IN      number,    -- 케릭터 번호
	p_win              out     number,    -- 승
	p_lose             out     number,    -- 패
	p_cmoney           out     number,    -- 보유 머니
	p_discnt           out     number,    -- Dis connect 횟수
	P_fccnt            out     number,    -- 포카드 횟수
	p_sfcnt            out     number,    -- 스트레이트 플러쉬 횟수
	p_rsfcnt           out     number,    -- 로얄  스트레이트 플러쉬 횟수
	P_playcount        out     number,    -- 최근일 Play 판수 
	p_playtotaltime    out     number,    -- 총 Play 시간
	p_playtotalcount   out     number,    -- 총 플레이 판수 
	p_firstplaydate    out     varchar2,  -- 첫번째 플레이 시간  
	p_lastlogondate    out     varchar2,  -- 마지막 접속 시간
	p_allincnt         out     number,    -- 올인 횟수
	p_lastallindate    out     varchar2,  -- 마지막 올인 일시
	p_todaywin         out     number,    -- 당일 승수 
	p_todaylose        out     number,    -- 당일 패수
	p_todaymoney       out     number,    -- 당일 머니 변동 금액 
	p_reserve01        out     number,    -- 예비 1
	p_reserve02        out     number,    -- 예비 2
	p_refillcnt        out     number,    -- 리필 받은 횟수
	p_LASTREFILLDATE   out     varchar2,  -- 리필 받은 날 
	p_safegrade        out     number,    -- 보험 등급
	p_safemoney        out     number,    -- 보험 금
	p_allinagain       out     number,    -- 올인 시킨 횟수
	p_playdaytime      out     number,    -- 당일 플레이 시간.
	p_avt              out     varchar2,  -- 아바타 정보 , 사진이면 사진 경로 ,  기본 아바타 이면 기본 아바타 이름
	p_avttype          out     number  ,  -- 아바타 타입 , 1이면 기본 , 2 이면 사진 , 3 이면 구입 아바타 기타 등등 
	p_result           out     number    -- 결과 값
);
/**/


struct RCUserBase
{

	virtual void Clear()
	{
		m_lUSN=EMPTY_USER;
		m_nIndex=-1;
		m_sNickName.clear();
		m_lCLevel=0;
		m_lSex=0;
		m_lWin=0;
		m_lLose=0;
		m_llCMoney=0;
		m_llFMoney=0;
		m_lDisCnt=0;
		m_cGamePlayTime.Clear();
		m_nAnllInCnt=0;
		m_llLastAllInDate=0;
		m_cWinLose_Today.Clear();
		m_llTodayMoney=0;
		m_nReserve01=0;
		m_nReserve02=0;
		m_cRefill.Clear();
		m_nSafeGrade=0;
		m_llSafeMoney=0;
		m_nAllInAgain=0;
		m_llPlayDayTime=0;
		m_sAvt.clear();
		m_nAvtType=0;
		m_ItemList.Clear();	
	}
	void SetItem(string & sReservedString4){ m_ItemList.SetItem(sReservedString4); }	
	bool IsItem(long lFucnsrl){ return m_ItemList.IsItem(lFucnsrl); }
	__int64 GetEndTime(long lFucnsrl){return m_ItemList.GetEndTime(lFucnsrl); }
	__int64 GetCount(long lFucnsrl){ return m_ItemList.GetCount(lFucnsrl); }
	long GetCount_long(long lFucnsrl){ return m_ItemList.GetCount_long(lFucnsrl); }

	LONG	m_lUSN;
	int	m_nIndex;
	std::string	m_sNickName;
	LONG	m_lCLevel;
	LONG	m_lSex;
	LONG	m_lWin;
	LONG	m_lLose;
	__int64	m_llCMoney;
	__int64	m_llFMoney;
	LONG	m_lDisCnt;
	CGamePlayTime	m_cGamePlayTime;
	int	m_nAnllInCnt;
	__int64	m_llLastAllInDate;
	CWinLose	m_cWinLose_Room;
	__int64	m_llTodayMoney;
	int	m_nReserve01;
	int	m_nReserve02;
	CRefill	m_cRefill;
	int	m_nSafeGrade;
	__int64	m_llSafeMoney;
	int	m_nAllInAgain;
	__int64	m_llPlayDayTime;
	std::string	m_sAvt;
	int	m_nAvtType;
	ItemList	m_ItemList;
};
}; // end of namespace : adl
#endif //!
