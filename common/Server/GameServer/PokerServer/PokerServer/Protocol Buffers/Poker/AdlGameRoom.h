//
// GameRoom: generated by XADL compiler 1.1 , 2011.8.24 16:38:0
//

#ifndef ADLGAMEROOM_H
#define ADLGAMEROOM_H

//#include "../../PB_Server/GameCommon.h"
#include "AdlGameUser_Poker.h"
#include "AdlGameCommon.h"

//#include "../../Protocol Buffers/Poker/Game_Poker.pb.h"
#include "../../protobuf/gameLogic.pb.h"

//#include "../../PB_Server/GameCommon.h"

//class UserInfo;

namespace adl { // start of namesapce

class Option
{
public:
	void Clear()
	{
		m_sRoomTitle.erase();
		m_sPassword.erase();
		m_lMaxUserCnt=0;
		m_lMaxPlayerUserCnt=MAX_PLAYER_COUNT;
		m_lMaxPlayerCardCnt=MAX_PLAYER_COUNT;	
		m_lChoiceMode=0;
		m_lBetRule=0;
		m_lBetType=0;
		m_lAddRule=0;
		m_lRoomType=0;
		m_lLimitMoney=0;
		m_llGameAnteMoney=0;
		m_lRematchJoin=0;
		m_llAnteMoney=0;
		m_bEcho=false;
		m_lMakeUSN=0;
		m_lCategory=0;
		m_lChannelID=0;
 	}
/*
	void PB2ADL()
	{
		m_sRoomTitle		= m_sroomtitle();
		m_sPassword			= m_spassword();
		m_lMaxUserCnt		= m_lmaxusercnt();
		m_lMaxPlayerUserCnt = m_lmaxplayerusercnt();
		m_lMaxPlayerCardCnt = m_lmaxplayercardcnt();
		m_lChoiceMode		= m_lchoicemode();
		m_lRoomType			= m_lroomtype();
		m_lBetRule			= m_lbetrule();
		m_lBetType			= m_lbettype();
		m_lAddRule			= m_laddrule();
		m_lRematchJoin		= m_lrematchjoin();
		m_lLimitMoney		= m_llimitmoney();
		m_llGameAnteMoney	= m_llgameantemoney();
		m_bEcho				= m_becho();
		m_lMakeUSN			= m_lmakeusn();
		m_lCategory			= m_lcategory();
		m_lChannelID		= m_lchannelid();
		m_llAnteMoney		= m_llantemoney();
	}
	
	void ADL2PB()
	{
		set_m_sroomtitle(m_sRoomTitle);
		set_m_spassword(m_sPassword);
		set_m_lmaxusercnt(m_lMaxUserCnt);
		set_m_lmaxplayerusercnt(m_lMaxPlayerUserCnt);
		set_m_lmaxplayercardcnt(m_lMaxPlayerCardCnt);
		set_m_lchoicemode(m_lChoiceMode);
		set_m_lroomtype(m_lRoomType);
		set_m_lbetrule(m_lBetRule);
		set_m_lbettype(m_lBetType);
		set_m_laddrule(m_lAddRule);
		set_m_lrematchjoin(m_lRematchJoin);
		set_m_llimitmoney(m_lLimitMoney);
		set_m_llgameantemoney(m_llGameAnteMoney);
		set_m_becho(m_bEcho);
		set_m_lmakeusn(m_lMakeUSN);
		set_m_lcategory(m_lCategory);
		set_m_lchannelid(m_lChannelID);
		set_m_llantemoney(m_llAnteMoney);
	}
	*/

	std::string	m_sRoomTitle;
	std::string	m_sPassword;
	LONG	m_lMaxUserCnt;
	LONG	m_lMaxPlayerUserCnt;
	LONG	m_lMaxPlayerCardCnt;
	LONG	m_lChoiceMode;
	LONG	m_lRoomType;
	LONG	m_lBetRule;
	LONG	m_lBetType;
	LONG	m_lAddRule;
	LONG	m_lRematchJoin;
	LONG	m_lLimitMoney;
	LONGLONG	m_llGameAnteMoney;
	LONG	m_bEcho;
	LONG	m_lMakeUSN;
	LONG	m_lCategory;
	LONG	m_lChannelID;
	LONGLONG	m_llAnteMoney;
};


class RCRoomData : public PKRCRoomData//, public PB_STL_Convertor
{
public:
	void Clear()
	{
		m_lGameMaster=-1;
		m_lRoomIndex=-1;
		m_lState=0;
		m_tblUI.Clear();
		m_tblCard.Clear();
		m_tblMoney.Clear();
		m_option.Clear();
		m_tblBettingMsg.Clear();
	}
	void Init(int nUserSize=MAX_PLAYER_COUNT, int nCardSize=MAX_PLAYER_COUNT)
	{
		m_tblUI.Init(nUserSize);
		m_tblMoney.Init(nUserSize);
		m_tblBettingMsg.Init(nUserSize);
		m_tblCard.Init(nCardSize);
	}

	Option& GetOPT(){return m_option;}
	const Option& GetOPT() const {return m_option;}
	UserInfo& GetUI(int index){return m_tblUI.GetUI(index);}
	const UserInfo& GetUI(int index) const {return m_tblUI.GetUI(index);}
	int GetUISize(void){ return (int)m_tblUI.size(); }
	Cards & GetCards(int idx){return m_tblCard.GetCards(idx);}
	const Cards & GetCards(int idx) const {return m_tblCard.GetCards(idx);}
	int GetCardsSize(void){ return (int)m_tblCard.size(); }
	Money & GetMoney(int idx){return m_tblMoney.GetMoney(idx);}
	const Money & GetMoney(int idx) const {return m_tblMoney.GetMoney(idx);}
	int GetMoneySize(void){ return (int)m_tblMoney.size(); }
	int GetUserCnt(void){
		int nUser=0;
		for(int i=0; i<(int)m_tblUI.size(); i++)
		{
			if(true==m_tblUI[i].IsEmpty()) continue;
			nUser++;
		}
		return nUser;
	}	
	LONGLONG GetAvgMoney(void){
		LONGLONG llAvgMoney=0;
		int nUser=0;
		for(int i=0; i<(int)m_tblUI.size(); i++)
		{
			if(true==m_tblUI[i].IsEmpty()) continue;
			Money& money=GetMoney(m_tblUI[i].m_nIndex);
			nUser++;
			llAvgMoney+=money.m_llCMoney;
		}
		if(0==nUser) return 0;
		return llAvgMoney/nUser;
	}	
	BettingMsg & GetBettingMsg(int idx){return m_tblBettingMsg.GetBettingMsg(idx);}
	const BettingMsg & GetBettingMsg(int idx) const {return m_tblBettingMsg.GetBettingMsg(idx);}
	int GetBettingMsgSize(void){ return (int)m_tblBettingMsg.size(); }
	LONG	m_lGameMaster;
	LONG	m_lRoomIndex;
	LONG	m_lState;
	Option	m_option;
	UITable	m_tblUI;
	CardTable	m_tblCard;
	MoneyTable	m_tblMoney;
	BettingMsgTable	m_tblBettingMsg;
};
}; // end of namespace : adl
#endif //!
