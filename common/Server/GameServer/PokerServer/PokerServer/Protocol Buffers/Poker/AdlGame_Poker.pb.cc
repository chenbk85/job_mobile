// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AdlGame_Poker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Game_Poker {

namespace {

const ::google::protobuf::Descriptor* Cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cards_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Cards_state_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Money_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWinLose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWinLose_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* VecMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VecMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* WinLoseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WinLoseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* VecUSN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VecUSN_reflection_ = NULL;
const ::google::protobuf::Descriptor* WAITINGUSERDATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WAITINGUSERDATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* RCUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RCUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Option_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Option_reflection_ = NULL;
const ::google::protobuf::Descriptor* BettingMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BettingMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BettingMsgTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BettingMsgTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* UITable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UITable_reflection_ = NULL;
const ::google::protobuf::Descriptor* RCRoomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RCRoomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_Observe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_Observe_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_Start_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_SelectedCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_SelectedCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_BettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_BettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_ChoiceRemoveCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_ChoiceRemoveCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_Purge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_Purge_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_Abuse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_Abuse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_AskPurgeVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_AskPurgeVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_AnswerPurgeVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_AnswerPurgeVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_WaitingUserTicketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_WaitingUserTicketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_UpdateWaitingUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_UpdateWaitingUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_SoundType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_SoundType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_ExitQue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_ExitQue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_Continue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_Continue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_RuleSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_RuleSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_GameMasterCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_GameMasterCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_FieldReserved_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_FieldReserved_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_JokboSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_JokboSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_TestKeySetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_TestKeySetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_CheckNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_CheckNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_Ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCS_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCS_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_UserJoinAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_UserJoinAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_UserJoinErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_UserJoinErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_UserDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_UserDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_CardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_CardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_EntryAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_EntryAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_EntryReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_EntryReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_ObserveAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_ObserveAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_StartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_StartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_StartAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_StartAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_NoStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_NoStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_DealCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_DealCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_SelectedCardAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_SelectedCardAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_DealOpenCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_DealOpenCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_DealCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_DealCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_Boss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_Boss_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_Betting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_Betting_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_BettingAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_BettingAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_BettingAnsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_BettingAnsMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_DealHiddenCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_DealHiddenCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_AnteMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_AnteMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_RuleQuaterHalf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_RuleQuaterHalf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_Finished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_Finished_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_NewGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_NewGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_ContinueAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_ContinueAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_Continue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_Continue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_SystemMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_SystemMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_PurgeAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_PurgeAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_PurgeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_PurgeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_SetPurgeMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_SetPurgeMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_AssaItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_AssaItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_ThankYouItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_ThankYouItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_MadeItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_MadeItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_ExtMoneyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_ExtMoneyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_GameEndSystemMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_GameEndSystemMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_ChangeAvatarNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_ChangeAvatarNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_AbuseAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_AbuseAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_SoundTypeAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_SoundTypeAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_FMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_FMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_ItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_ItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_DisconnectMoneyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_DisconnectMoneyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_ExitNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_ExitNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_RematchOKAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_RematchOKAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_RuleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_RuleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_AllowEntryWaitingUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_AllowEntryWaitingUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_AllWaitingUserDataNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_AllWaitingUserDataNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_UserDataChangeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_UserDataChangeNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_RefillMoneyNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_RefillMoneyNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_JackpotMoneyNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_JackpotMoneyNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_GuardianAngelMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_GuardianAngelMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_GameMasterCallNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_GameMasterCallNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_ObserverCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_ObserverCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_Bonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_Bonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSC_PoliceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSC_PoliceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayloadSC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayloadSC_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PayloadSC_TAGID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AdlGame_5fPoker_2eproto() {
  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AdlGame_Poker.proto");
  GOOGLE_CHECK(file != NULL);
  Cards_descriptor_ = file->message_type(0);
  static const int Cards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, m_vtcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, m_lresultidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, m_vuserusn_),
  };
  Cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cards_descriptor_,
      Cards::default_instance_,
      Cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cards));
  Cards_state_descriptor_ = Cards_descriptor_->enum_type(0);
  Money_descriptor_ = file->message_type(1);
  static const int Money_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_llcmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_llcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_llsidemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_llcallhabmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_lltakemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_lljackpotmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_lbetstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_lbetreceive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_lbetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_lresultidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, m_smoneymsg_),
  };
  Money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Money_descriptor_,
      Money::default_instance_,
      Money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Money));
  UserMoney_descriptor_ = file->message_type(2);
  static const int UserMoney_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_llmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_llcallhabmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_lltakemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_lldealmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_sdealertax_),
  };
  UserMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMoney_descriptor_,
      UserMoney::default_instance_,
      UserMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMoney));
  CWinLose_descriptor_ = file->message_type(3);
  static const int CWinLose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWinLose, m_lwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWinLose, m_llose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWinLose, m_lcontinue_),
  };
  CWinLose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWinLose_descriptor_,
      CWinLose::default_instance_,
      CWinLose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWinLose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWinLose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWinLose));
  UserInfo_descriptor_ = file->message_type(4);
  static const int UserInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_lclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_lsoundtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_savt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_luserstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_cwinlose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_cwinlose_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_cwinlose_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_llcmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_llfmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_lexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_nitemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_lack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_ljackpot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, m_ldiecardsdealt_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  OneCard_descriptor_ = file->message_type(5);
  static const int OneCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCard, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCard, m_lcardindex_),
  };
  OneCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneCard_descriptor_,
      OneCard::default_instance_,
      OneCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneCard));
  VecMoney_descriptor_ = file->message_type(6);
  static const int VecMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VecMoney, vecmoney_),
  };
  VecMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VecMoney_descriptor_,
      VecMoney::default_instance_,
      VecMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VecMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VecMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VecMoney));
  WinLoseInfo_descriptor_ = file->message_type(7);
  static const int WinLoseInfo_offsets_[1] = {
  };
  WinLoseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WinLoseInfo_descriptor_,
      WinLoseInfo::default_instance_,
      WinLoseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WinLoseInfo));
  VecUSN_descriptor_ = file->message_type(8);
  static const int VecUSN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VecUSN, usn_),
  };
  VecUSN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VecUSN_descriptor_,
      VecUSN::default_instance_,
      VecUSN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VecUSN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VecUSN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VecUSN));
  WAITINGUSERDATA_descriptor_ = file->message_type(9);
  static const int WAITINGUSERDATA_offsets_[1] = {
  };
  WAITINGUSERDATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WAITINGUSERDATA_descriptor_,
      WAITINGUSERDATA::default_instance_,
      WAITINGUSERDATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WAITINGUSERDATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WAITINGUSERDATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WAITINGUSERDATA));
  RCUserData_descriptor_ = file->message_type(10);
  static const int RCUserData_offsets_[1] = {
  };
  RCUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RCUserData_descriptor_,
      RCUserData::default_instance_,
      RCUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RCUserData));
  Option_descriptor_ = file->message_type(11);
  static const int Option_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_sroomtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_spassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lmaxusercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lmaxplayerusercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lmaxplayercardcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lchoicemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lroomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lbetrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lbettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_laddrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lrematchjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_llimitmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_llgameantemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_becho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lmakeusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_lchannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, m_llantemoney_),
  };
  Option_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Option_descriptor_,
      Option::default_instance_,
      Option_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Option, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Option));
  BettingMsg_descriptor_ = file->message_type(12);
  static const int BettingMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, m_bettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, m_bbettingmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, m_bmoneylack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, m_bcallmoneyzero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, m_llcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, m_llraisemoney_),
  };
  BettingMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BettingMsg_descriptor_,
      BettingMsg::default_instance_,
      BettingMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BettingMsg));
  BettingMsgTable_descriptor_ = file->message_type(13);
  static const int BettingMsgTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsgTable, bettingmsgtable_),
  };
  BettingMsgTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BettingMsgTable_descriptor_,
      BettingMsgTable::default_instance_,
      BettingMsgTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsgTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingMsgTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BettingMsgTable));
  MoneyTable_descriptor_ = file->message_type(14);
  static const int MoneyTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTable, moneytable_),
  };
  MoneyTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyTable_descriptor_,
      MoneyTable::default_instance_,
      MoneyTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyTable));
  CardTable_descriptor_ = file->message_type(15);
  static const int CardTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardTable, cardtable_),
  };
  CardTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardTable_descriptor_,
      CardTable::default_instance_,
      CardTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardTable));
  UITable_descriptor_ = file->message_type(16);
  static const int UITable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UITable, uitable_),
  };
  UITable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UITable_descriptor_,
      UITable::default_instance_,
      UITable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UITable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UITable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UITable));
  RCRoomData_descriptor_ = file->message_type(17);
  static const int RCRoomData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, m_lgamemaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, m_lroomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, m_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, m_tblui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, m_tblbettingmsg_),
  };
  RCRoomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RCRoomData_descriptor_,
      RCRoomData::default_instance_,
      RCRoomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RCRoomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RCRoomData));
  MsgCS_Entry_descriptor_ = file->message_type(18);
  static const int MsgCS_Entry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, m_nversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, m_bwelcomesound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, m_lsoundtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, m_savt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, m_lclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, m_lsex_),
  };
  MsgCS_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_Entry_descriptor_,
      MsgCS_Entry::default_instance_,
      MsgCS_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_Entry));
  MsgCS_Observe_descriptor_ = file->message_type(19);
  static const int MsgCS_Observe_offsets_[1] = {
  };
  MsgCS_Observe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_Observe_descriptor_,
      MsgCS_Observe::default_instance_,
      MsgCS_Observe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Observe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Observe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_Observe));
  MsgCS_Start_descriptor_ = file->message_type(20);
  static const int MsgCS_Start_offsets_[1] = {
  };
  MsgCS_Start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_Start_descriptor_,
      MsgCS_Start::default_instance_,
      MsgCS_Start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_Start));
  MsgCS_SelectedCardReq_descriptor_ = file->message_type(21);
  static const int MsgCS_SelectedCardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_SelectedCardReq, m_lcardidx_),
  };
  MsgCS_SelectedCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_SelectedCardReq_descriptor_,
      MsgCS_SelectedCardReq::default_instance_,
      MsgCS_SelectedCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_SelectedCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_SelectedCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_SelectedCardReq));
  MsgCS_BettingReq_descriptor_ = file->message_type(22);
  static const int MsgCS_BettingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_BettingReq, m_lbettype_),
  };
  MsgCS_BettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_BettingReq_descriptor_,
      MsgCS_BettingReq::default_instance_,
      MsgCS_BettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_BettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_BettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_BettingReq));
  MsgCS_ChoiceRemoveCard_descriptor_ = file->message_type(23);
  static const int MsgCS_ChoiceRemoveCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_ChoiceRemoveCard, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_ChoiceRemoveCard, m_nremovecardindex_),
  };
  MsgCS_ChoiceRemoveCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_ChoiceRemoveCard_descriptor_,
      MsgCS_ChoiceRemoveCard::default_instance_,
      MsgCS_ChoiceRemoveCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_ChoiceRemoveCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_ChoiceRemoveCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_ChoiceRemoveCard));
  MsgCS_Purge_descriptor_ = file->message_type(24);
  static const int MsgCS_Purge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Purge, m_ltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Purge, m_lpurgeusn_),
  };
  MsgCS_Purge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_Purge_descriptor_,
      MsgCS_Purge::default_instance_,
      MsgCS_Purge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Purge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Purge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_Purge));
  MsgCS_Abuse_descriptor_ = file->message_type(25);
  static const int MsgCS_Abuse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Abuse, m_ltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Abuse, m_sday_),
  };
  MsgCS_Abuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_Abuse_descriptor_,
      MsgCS_Abuse::default_instance_,
      MsgCS_Abuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Abuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Abuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_Abuse));
  MsgCS_AskPurgeVote_descriptor_ = file->message_type(26);
  static const int MsgCS_AskPurgeVote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_AskPurgeVote, m_lpurgeusn_),
  };
  MsgCS_AskPurgeVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_AskPurgeVote_descriptor_,
      MsgCS_AskPurgeVote::default_instance_,
      MsgCS_AskPurgeVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_AskPurgeVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_AskPurgeVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_AskPurgeVote));
  MsgCS_AnswerPurgeVote_descriptor_ = file->message_type(27);
  static const int MsgCS_AnswerPurgeVote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_AnswerPurgeVote, m_lanswer_),
  };
  MsgCS_AnswerPurgeVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_AnswerPurgeVote_descriptor_,
      MsgCS_AnswerPurgeVote::default_instance_,
      MsgCS_AnswerPurgeVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_AnswerPurgeVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_AnswerPurgeVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_AnswerPurgeVote));
  MsgCS_WaitingUserTicketReq_descriptor_ = file->message_type(28);
  static const int MsgCS_WaitingUserTicketReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_WaitingUserTicketReq, m_ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_WaitingUserTicketReq, m_bvalue_),
  };
  MsgCS_WaitingUserTicketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_WaitingUserTicketReq_descriptor_,
      MsgCS_WaitingUserTicketReq::default_instance_,
      MsgCS_WaitingUserTicketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_WaitingUserTicketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_WaitingUserTicketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_WaitingUserTicketReq));
  MsgCS_UpdateWaitingUserInfoReq_descriptor_ = file->message_type(29);
  static const int MsgCS_UpdateWaitingUserInfoReq_offsets_[1] = {
  };
  MsgCS_UpdateWaitingUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_UpdateWaitingUserInfoReq_descriptor_,
      MsgCS_UpdateWaitingUserInfoReq::default_instance_,
      MsgCS_UpdateWaitingUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_UpdateWaitingUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_UpdateWaitingUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_UpdateWaitingUserInfoReq));
  MsgCS_SoundType_descriptor_ = file->message_type(30);
  static const int MsgCS_SoundType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_SoundType, m_lsoundtype_),
  };
  MsgCS_SoundType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_SoundType_descriptor_,
      MsgCS_SoundType::default_instance_,
      MsgCS_SoundType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_SoundType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_SoundType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_SoundType));
  MsgCS_ExitQue_descriptor_ = file->message_type(31);
  static const int MsgCS_ExitQue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_ExitQue, m_lexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_ExitQue, m_baction_),
  };
  MsgCS_ExitQue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_ExitQue_descriptor_,
      MsgCS_ExitQue::default_instance_,
      MsgCS_ExitQue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_ExitQue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_ExitQue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_ExitQue));
  MsgCS_Continue_descriptor_ = file->message_type(32);
  static const int MsgCS_Continue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Continue, m_lexit_),
  };
  MsgCS_Continue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_Continue_descriptor_,
      MsgCS_Continue::default_instance_,
      MsgCS_Continue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Continue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Continue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_Continue));
  MsgCS_RuleSet_descriptor_ = file->message_type(33);
  static const int MsgCS_RuleSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_RuleSet, m_nruleidx_),
  };
  MsgCS_RuleSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_RuleSet_descriptor_,
      MsgCS_RuleSet::default_instance_,
      MsgCS_RuleSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_RuleSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_RuleSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_RuleSet));
  MsgCS_GameMasterCall_descriptor_ = file->message_type(34);
  static const int MsgCS_GameMasterCall_offsets_[1] = {
  };
  MsgCS_GameMasterCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_GameMasterCall_descriptor_,
      MsgCS_GameMasterCall::default_instance_,
      MsgCS_GameMasterCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_GameMasterCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_GameMasterCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_GameMasterCall));
  MsgCS_FieldReserved_descriptor_ = file->message_type(35);
  static const int MsgCS_FieldReserved_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_FieldReserved, m_nreserved1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_FieldReserved, m_nreserved2_),
  };
  MsgCS_FieldReserved_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_FieldReserved_descriptor_,
      MsgCS_FieldReserved::default_instance_,
      MsgCS_FieldReserved_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_FieldReserved, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_FieldReserved, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_FieldReserved));
  MsgCS_JokboSet_descriptor_ = file->message_type(36);
  static const int MsgCS_JokboSet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_JokboSet, m_lkey1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_JokboSet, m_lkey2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_JokboSet, m_lkey3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_JokboSet, m_lkey4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_JokboSet, m_lkey5_),
  };
  MsgCS_JokboSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_JokboSet_descriptor_,
      MsgCS_JokboSet::default_instance_,
      MsgCS_JokboSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_JokboSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_JokboSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_JokboSet));
  MsgCS_TestKeySetting_descriptor_ = file->message_type(37);
  static const int MsgCS_TestKeySetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_TestKeySetting, m_nchar_),
  };
  MsgCS_TestKeySetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_TestKeySetting_descriptor_,
      MsgCS_TestKeySetting::default_instance_,
      MsgCS_TestKeySetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_TestKeySetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_TestKeySetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_TestKeySetting));
  MsgCS_CheckNotice_descriptor_ = file->message_type(38);
  static const int MsgCS_CheckNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_CheckNotice, m_ntype_),
  };
  MsgCS_CheckNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_CheckNotice_descriptor_,
      MsgCS_CheckNotice::default_instance_,
      MsgCS_CheckNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_CheckNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_CheckNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_CheckNotice));
  MsgCS_Ack_descriptor_ = file->message_type(39);
  static const int MsgCS_Ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Ack, m_ntagid_),
  };
  MsgCS_Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_Ack_descriptor_,
      MsgCS_Ack::default_instance_,
      MsgCS_Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_Ack));
  MsgCS_Ping_descriptor_ = file->message_type(40);
  static const int MsgCS_Ping_offsets_[1] = {
  };
  MsgCS_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCS_Ping_descriptor_,
      MsgCS_Ping::default_instance_,
      MsgCS_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCS_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCS_Ping));
  MsgSC_UserJoinAns_descriptor_ = file->message_type(41);
  static const int MsgSC_UserJoinAns_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, m_nenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, m_nset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, m_lchannel_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, m_lownerusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, m_nroompurgecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, m_option_),
  };
  MsgSC_UserJoinAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_UserJoinAns_descriptor_,
      MsgSC_UserJoinAns::default_instance_,
      MsgSC_UserJoinAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_UserJoinAns));
  MsgSC_UserJoinErr_descriptor_ = file->message_type(42);
  static const int MsgSC_UserJoinErr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinErr, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinErr, m_lerrorcode_),
  };
  MsgSC_UserJoinErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_UserJoinErr_descriptor_,
      MsgSC_UserJoinErr::default_instance_,
      MsgSC_UserJoinErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserJoinErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_UserJoinErr));
  MsgSC_UserDisconnect_descriptor_ = file->message_type(43);
  static const int MsgSC_UserDisconnect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDisconnect, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDisconnect, m_uinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDisconnect, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDisconnect, m_lownerusn_),
  };
  MsgSC_UserDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_UserDisconnect_descriptor_,
      MsgSC_UserDisconnect::default_instance_,
      MsgSC_UserDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_UserDisconnect));
  MsgSC_CardData_descriptor_ = file->message_type(44);
  static const int MsgSC_CardData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_CardData, m_ndealcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_CardData, m_lcardsdealt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_CardData, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_CardData, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_CardData, m_llpoolmoney_),
  };
  MsgSC_CardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_CardData_descriptor_,
      MsgSC_CardData::default_instance_,
      MsgSC_CardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_CardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_CardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_CardData));
  MsgSC_EntryAns_descriptor_ = file->message_type(45);
  static const int MsgSC_EntryAns_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, m_lownerusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, m_tblui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, m_bwelcomesound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, m_lobservecnt_),
  };
  MsgSC_EntryAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_EntryAns_descriptor_,
      MsgSC_EntryAns::default_instance_,
      MsgSC_EntryAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_EntryAns));
  MsgSC_EntryReject_descriptor_ = file->message_type(46);
  static const int MsgSC_EntryReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryReject, m_ltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryReject, m_llcmoney_),
  };
  MsgSC_EntryReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_EntryReject_descriptor_,
      MsgSC_EntryReject::default_instance_,
      MsgSC_EntryReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_EntryReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_EntryReject));
  MsgSC_ObserveAns_descriptor_ = file->message_type(47);
  static const int MsgSC_ObserveAns_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserveAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserveAns, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserveAns, m_lownerusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserveAns, m_uinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserveAns, m_money_),
  };
  MsgSC_ObserveAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_ObserveAns_descriptor_,
      MsgSC_ObserveAns::default_instance_,
      MsgSC_ObserveAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserveAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserveAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_ObserveAns));
  MsgSC_StartReq_descriptor_ = file->message_type(48);
  static const int MsgSC_StartReq_offsets_[1] = {
  };
  MsgSC_StartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_StartReq_descriptor_,
      MsgSC_StartReq::default_instance_,
      MsgSC_StartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_StartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_StartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_StartReq));
  MsgSC_StartAns_descriptor_ = file->message_type(49);
  static const int MsgSC_StartAns_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_StartAns, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_StartAns, m_vtstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_StartAns, m_llsystemtime_),
  };
  MsgSC_StartAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_StartAns_descriptor_,
      MsgSC_StartAns::default_instance_,
      MsgSC_StartAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_StartAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_StartAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_StartAns));
  MsgSC_NoStart_descriptor_ = file->message_type(50);
  static const int MsgSC_NoStart_offsets_[1] = {
  };
  MsgSC_NoStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_NoStart_descriptor_,
      MsgSC_NoStart::default_instance_,
      MsgSC_NoStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_NoStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_NoStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_NoStart));
  MsgSC_DealCards_descriptor_ = file->message_type(51);
  static const int MsgSC_DealCards_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCards, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCards, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCards, m_ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCards, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCards, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCards, m_llpoolmoney_),
  };
  MsgSC_DealCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_DealCards_descriptor_,
      MsgSC_DealCards::default_instance_,
      MsgSC_DealCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_DealCards));
  MsgSC_SelectedCardAns_descriptor_ = file->message_type(52);
  static const int MsgSC_SelectedCardAns_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SelectedCardAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SelectedCardAns, m_nselect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SelectedCardAns, m_lcardindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SelectedCardAns, m_lchoicetype_),
  };
  MsgSC_SelectedCardAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_SelectedCardAns_descriptor_,
      MsgSC_SelectedCardAns::default_instance_,
      MsgSC_SelectedCardAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SelectedCardAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SelectedCardAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_SelectedCardAns));
  MsgSC_DealOpenCard_descriptor_ = file->message_type(53);
  static const int MsgSC_DealOpenCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealOpenCard, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealOpenCard, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealOpenCard, m_vtstate_),
  };
  MsgSC_DealOpenCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_DealOpenCard_descriptor_,
      MsgSC_DealOpenCard::default_instance_,
      MsgSC_DealOpenCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealOpenCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealOpenCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_DealOpenCard));
  MsgSC_DealCard_descriptor_ = file->message_type(54);
  static const int MsgSC_DealCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCard, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCard, m_ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCard, m_lcardsdealt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCard, m_vtonecard_),
  };
  MsgSC_DealCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_DealCard_descriptor_,
      MsgSC_DealCard::default_instance_,
      MsgSC_DealCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_DealCard));
  MsgSC_Boss_descriptor_ = file->message_type(55);
  static const int MsgSC_Boss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Boss, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Boss, m_nbossrank_),
  };
  MsgSC_Boss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_Boss_descriptor_,
      MsgSC_Boss::default_instance_,
      MsgSC_Boss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Boss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Boss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_Boss));
  MsgSC_Betting_descriptor_ = file->message_type(56);
  static const int MsgSC_Betting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Betting, m_lbetusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Betting, m_lbetbtntype_),
  };
  MsgSC_Betting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_Betting_descriptor_,
      MsgSC_Betting::default_instance_,
      MsgSC_Betting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Betting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Betting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_Betting));
  MsgSC_BettingAns_descriptor_ = file->message_type(57);
  static const int MsgSC_BettingAns_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAns, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAns, m_lbettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAns, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAns, m_vtcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAns, m_lpoolmoney_),
  };
  MsgSC_BettingAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_BettingAns_descriptor_,
      MsgSC_BettingAns::default_instance_,
      MsgSC_BettingAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_BettingAns));
  MsgSC_BettingAnsMsg_descriptor_ = file->message_type(58);
  static const int MsgSC_BettingAnsMsg_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_bettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_bbettingmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_bmoneylack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_bcallmoneyzero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_llcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_llraisemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_llsidemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_lbettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_lbetturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_vtcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, m_llpoolmoney_),
  };
  MsgSC_BettingAnsMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_BettingAnsMsg_descriptor_,
      MsgSC_BettingAnsMsg::default_instance_,
      MsgSC_BettingAnsMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_BettingAnsMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_BettingAnsMsg));
  MsgSC_DealHiddenCard_descriptor_ = file->message_type(59);
  static const int MsgSC_DealHiddenCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealHiddenCard, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealHiddenCard, m_lcardsdealt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealHiddenCard, m_vtonecard_),
  };
  MsgSC_DealHiddenCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_DealHiddenCard_descriptor_,
      MsgSC_DealHiddenCard::default_instance_,
      MsgSC_DealHiddenCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealHiddenCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DealHiddenCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_DealHiddenCard));
  MsgSC_AnteMoney_descriptor_ = file->message_type(60);
  static const int MsgSC_AnteMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AnteMoney, m_llantemoney_),
  };
  MsgSC_AnteMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_AnteMoney_descriptor_,
      MsgSC_AnteMoney::default_instance_,
      MsgSC_AnteMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AnteMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AnteMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_AnteMoney));
  MsgSC_RuleQuaterHalf_descriptor_ = file->message_type(61);
  static const int MsgSC_RuleQuaterHalf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RuleQuaterHalf, m_llrulequaterhalf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RuleQuaterHalf, m_llpoolmoney_),
  };
  MsgSC_RuleQuaterHalf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_RuleQuaterHalf_descriptor_,
      MsgSC_RuleQuaterHalf::default_instance_,
      MsgSC_RuleQuaterHalf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RuleQuaterHalf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RuleQuaterHalf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_RuleQuaterHalf));
  MsgSC_Finished_descriptor_ = file->message_type(62);
  static const int MsgSC_Finished_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_bgiveup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_lrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_llgivemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_vtwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_vtresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_vtgivemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_llpoolmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_vtusermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_lresultidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, m_lljackpot_),
  };
  MsgSC_Finished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_Finished_descriptor_,
      MsgSC_Finished::default_instance_,
      MsgSC_Finished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Finished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_Finished));
  MsgSC_NewGame_descriptor_ = file->message_type(63);
  static const int MsgSC_NewGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_NewGame, m_vtwinloseinfo_),
  };
  MsgSC_NewGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_NewGame_descriptor_,
      MsgSC_NewGame::default_instance_,
      MsgSC_NewGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_NewGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_NewGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_NewGame));
  MsgSC_ContinueAns_descriptor_ = file->message_type(64);
  static const int MsgSC_ContinueAns_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ContinueAns, m_lusn_),
  };
  MsgSC_ContinueAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_ContinueAns_descriptor_,
      MsgSC_ContinueAns::default_instance_,
      MsgSC_ContinueAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ContinueAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ContinueAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_ContinueAns));
  MsgSC_Continue_descriptor_ = file->message_type(65);
  static const int MsgSC_Continue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Continue, m_vtwinloseinfo_),
  };
  MsgSC_Continue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_Continue_descriptor_,
      MsgSC_Continue::default_instance_,
      MsgSC_Continue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Continue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Continue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_Continue));
  MsgSC_SystemMsg_descriptor_ = file->message_type(66);
  static const int MsgSC_SystemMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SystemMsg, m_ltype_),
  };
  MsgSC_SystemMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_SystemMsg_descriptor_,
      MsgSC_SystemMsg::default_instance_,
      MsgSC_SystemMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SystemMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SystemMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_SystemMsg));
  MsgSC_PurgeAns_descriptor_ = file->message_type(67);
  static const int MsgSC_PurgeAns_offsets_[1] = {
  };
  MsgSC_PurgeAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_PurgeAns_descriptor_,
      MsgSC_PurgeAns::default_instance_,
      MsgSC_PurgeAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PurgeAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PurgeAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_PurgeAns));
  MsgSC_PurgeInfo_descriptor_ = file->message_type(68);
  static const int MsgSC_PurgeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PurgeInfo, m_vtpurgeusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PurgeInfo, m_ncount_),
  };
  MsgSC_PurgeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_PurgeInfo_descriptor_,
      MsgSC_PurgeInfo::default_instance_,
      MsgSC_PurgeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PurgeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PurgeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_PurgeInfo));
  MsgSC_SetPurgeMoney_descriptor_ = file->message_type(69);
  static const int MsgSC_SetPurgeMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SetPurgeMoney, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SetPurgeMoney, m_money_),
  };
  MsgSC_SetPurgeMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_SetPurgeMoney_descriptor_,
      MsgSC_SetPurgeMoney::default_instance_,
      MsgSC_SetPurgeMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SetPurgeMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SetPurgeMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_SetPurgeMoney));
  MsgSC_AssaItemNotify_descriptor_ = file->message_type(70);
  static const int MsgSC_AssaItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AssaItemNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AssaItemNotify, m_lranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AssaItemNotify, m_sitem_),
  };
  MsgSC_AssaItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_AssaItemNotify_descriptor_,
      MsgSC_AssaItemNotify::default_instance_,
      MsgSC_AssaItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AssaItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AssaItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_AssaItemNotify));
  MsgSC_ThankYouItemNotify_descriptor_ = file->message_type(71);
  static const int MsgSC_ThankYouItemNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ThankYouItemNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ThankYouItemNotify, m_lranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ThankYouItemNotify, m_llbasicddangmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ThankYouItemNotify, m_sitem_),
  };
  MsgSC_ThankYouItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_ThankYouItemNotify_descriptor_,
      MsgSC_ThankYouItemNotify::default_instance_,
      MsgSC_ThankYouItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ThankYouItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ThankYouItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_ThankYouItemNotify));
  MsgSC_MadeItemNotify_descriptor_ = file->message_type(72);
  static const int MsgSC_MadeItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_MadeItemNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_MadeItemNotify, m_lranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_MadeItemNotify, m_sitem_),
  };
  MsgSC_MadeItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_MadeItemNotify_descriptor_,
      MsgSC_MadeItemNotify::default_instance_,
      MsgSC_MadeItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_MadeItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_MadeItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_MadeItemNotify));
  MsgSC_ExtMoneyNotify_descriptor_ = file->message_type(73);
  static const int MsgSC_ExtMoneyNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExtMoneyNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExtMoneyNotify, m_bexttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExtMoneyNotify, m_llcmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExtMoneyNotify, m_llcashbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExtMoneyNotify, m_llextmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExtMoneyNotify, m_llextdate_),
  };
  MsgSC_ExtMoneyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_ExtMoneyNotify_descriptor_,
      MsgSC_ExtMoneyNotify::default_instance_,
      MsgSC_ExtMoneyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExtMoneyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExtMoneyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_ExtMoneyNotify));
  MsgSC_GameEndSystemMsg_descriptor_ = file->message_type(74);
  static const int MsgSC_GameEndSystemMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameEndSystemMsg, m_ltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameEndSystemMsg, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameEndSystemMsg, m_bgiveup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameEndSystemMsg, m_llmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameEndSystemMsg, m_smsg_),
  };
  MsgSC_GameEndSystemMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_GameEndSystemMsg_descriptor_,
      MsgSC_GameEndSystemMsg::default_instance_,
      MsgSC_GameEndSystemMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameEndSystemMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameEndSystemMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_GameEndSystemMsg));
  MsgSC_ChangeAvatarNotify_descriptor_ = file->message_type(75);
  static const int MsgSC_ChangeAvatarNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ChangeAvatarNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ChangeAvatarNotify, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ChangeAvatarNotify, m_uinfo_),
  };
  MsgSC_ChangeAvatarNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_ChangeAvatarNotify_descriptor_,
      MsgSC_ChangeAvatarNotify::default_instance_,
      MsgSC_ChangeAvatarNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ChangeAvatarNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ChangeAvatarNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_ChangeAvatarNotify));
  MsgSC_AbuseAns_descriptor_ = file->message_type(76);
  static const int MsgSC_AbuseAns_offsets_[1] = {
  };
  MsgSC_AbuseAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_AbuseAns_descriptor_,
      MsgSC_AbuseAns::default_instance_,
      MsgSC_AbuseAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AbuseAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AbuseAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_AbuseAns));
  MsgSC_SoundTypeAns_descriptor_ = file->message_type(77);
  static const int MsgSC_SoundTypeAns_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SoundTypeAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SoundTypeAns, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SoundTypeAns, m_lsoundtype_),
  };
  MsgSC_SoundTypeAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_SoundTypeAns_descriptor_,
      MsgSC_SoundTypeAns::default_instance_,
      MsgSC_SoundTypeAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SoundTypeAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_SoundTypeAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_SoundTypeAns));
  MsgSC_FMoney_descriptor_ = file->message_type(78);
  static const int MsgSC_FMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_FMoney, m_sfmoney_),
  };
  MsgSC_FMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_FMoney_descriptor_,
      MsgSC_FMoney::default_instance_,
      MsgSC_FMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_FMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_FMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_FMoney));
  MsgSC_ItemNotify_descriptor_ = file->message_type(79);
  static const int MsgSC_ItemNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ItemNotify, m_llimittotalcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ItemNotify, m_llimittodaycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ItemNotify, m_binfinityspeeditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ItemNotify, m_llspeedtotime_),
  };
  MsgSC_ItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_ItemNotify_descriptor_,
      MsgSC_ItemNotify::default_instance_,
      MsgSC_ItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_ItemNotify));
  MsgSC_DisconnectMoneyNotify_descriptor_ = file->message_type(80);
  static const int MsgSC_DisconnectMoneyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DisconnectMoneyNotify, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DisconnectMoneyNotify, m_lldisconnectmoney_),
  };
  MsgSC_DisconnectMoneyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_DisconnectMoneyNotify_descriptor_,
      MsgSC_DisconnectMoneyNotify::default_instance_,
      MsgSC_DisconnectMoneyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DisconnectMoneyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_DisconnectMoneyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_DisconnectMoneyNotify));
  MsgSC_ExitNtf_descriptor_ = file->message_type(81);
  static const int MsgSC_ExitNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExitNtf, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExitNtf, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExitNtf, m_lexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExitNtf, m_bexit_),
  };
  MsgSC_ExitNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_ExitNtf_descriptor_,
      MsgSC_ExitNtf::default_instance_,
      MsgSC_ExitNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExitNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ExitNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_ExitNtf));
  MsgSC_RematchOKAns_descriptor_ = file->message_type(82);
  static const int MsgSC_RematchOKAns_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RematchOKAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RematchOKAns, m_llpoolmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RematchOKAns, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RematchOKAns, m_brematchok_),
  };
  MsgSC_RematchOKAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_RematchOKAns_descriptor_,
      MsgSC_RematchOKAns::default_instance_,
      MsgSC_RematchOKAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RematchOKAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RematchOKAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_RematchOKAns));
  MsgSC_RuleNotify_descriptor_ = file->message_type(83);
  static const int MsgSC_RuleNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RuleNotify, m_nruleidx_),
  };
  MsgSC_RuleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_RuleNotify_descriptor_,
      MsgSC_RuleNotify::default_instance_,
      MsgSC_RuleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RuleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RuleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_RuleNotify));
  MsgSC_AllowEntryWaitingUser_descriptor_ = file->message_type(84);
  static const int MsgSC_AllowEntryWaitingUser_offsets_[1] = {
  };
  MsgSC_AllowEntryWaitingUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_AllowEntryWaitingUser_descriptor_,
      MsgSC_AllowEntryWaitingUser::default_instance_,
      MsgSC_AllowEntryWaitingUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AllowEntryWaitingUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AllowEntryWaitingUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_AllowEntryWaitingUser));
  MsgSC_AllWaitingUserDataNtf_descriptor_ = file->message_type(85);
  static const int MsgSC_AllWaitingUserDataNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AllWaitingUserDataNtf, m_bsendwaitinguser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AllWaitingUserDataNtf, m_waitinguserdata_),
  };
  MsgSC_AllWaitingUserDataNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_AllWaitingUserDataNtf_descriptor_,
      MsgSC_AllWaitingUserDataNtf::default_instance_,
      MsgSC_AllWaitingUserDataNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AllWaitingUserDataNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_AllWaitingUserDataNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_AllWaitingUserDataNtf));
  MsgSC_UserDataChangeNtf_descriptor_ = file->message_type(86);
  static const int MsgSC_UserDataChangeNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDataChangeNtf, m_userdata_),
  };
  MsgSC_UserDataChangeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_UserDataChangeNtf_descriptor_,
      MsgSC_UserDataChangeNtf::default_instance_,
      MsgSC_UserDataChangeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDataChangeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_UserDataChangeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_UserDataChangeNtf));
  MsgSC_RefillMoneyNtf_descriptor_ = file->message_type(87);
  static const int MsgSC_RefillMoneyNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RefillMoneyNtf, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RefillMoneyNtf, m_nrefillcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RefillMoneyNtf, m_llrefillmoney_),
  };
  MsgSC_RefillMoneyNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_RefillMoneyNtf_descriptor_,
      MsgSC_RefillMoneyNtf::default_instance_,
      MsgSC_RefillMoneyNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RefillMoneyNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_RefillMoneyNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_RefillMoneyNtf));
  MsgSC_JackpotMoneyNtf_descriptor_ = file->message_type(88);
  static const int MsgSC_JackpotMoneyNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_JackpotMoneyNtf, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_JackpotMoneyNtf, m_lljackpotmoney_),
  };
  MsgSC_JackpotMoneyNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_JackpotMoneyNtf_descriptor_,
      MsgSC_JackpotMoneyNtf::default_instance_,
      MsgSC_JackpotMoneyNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_JackpotMoneyNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_JackpotMoneyNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_JackpotMoneyNtf));
  MsgSC_GuardianAngelMoney_descriptor_ = file->message_type(89);
  static const int MsgSC_GuardianAngelMoney_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GuardianAngelMoney, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GuardianAngelMoney, m_nguardianangelcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GuardianAngelMoney, m_llangelmoney_),
  };
  MsgSC_GuardianAngelMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_GuardianAngelMoney_descriptor_,
      MsgSC_GuardianAngelMoney::default_instance_,
      MsgSC_GuardianAngelMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GuardianAngelMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GuardianAngelMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_GuardianAngelMoney));
  MsgSC_GameMasterCallNtf_descriptor_ = file->message_type(90);
  static const int MsgSC_GameMasterCallNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameMasterCallNtf, m_lgmcall_usn_),
  };
  MsgSC_GameMasterCallNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_GameMasterCallNtf_descriptor_,
      MsgSC_GameMasterCallNtf::default_instance_,
      MsgSC_GameMasterCallNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameMasterCallNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_GameMasterCallNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_GameMasterCallNtf));
  MsgSC_ObserverCnt_descriptor_ = file->message_type(91);
  static const int MsgSC_ObserverCnt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserverCnt, m_nobservercnt_),
  };
  MsgSC_ObserverCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_ObserverCnt_descriptor_,
      MsgSC_ObserverCnt::default_instance_,
      MsgSC_ObserverCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserverCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_ObserverCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_ObserverCnt));
  MsgSC_Bonus_descriptor_ = file->message_type(92);
  static const int MsgSC_Bonus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Bonus, m_llbonus_),
  };
  MsgSC_Bonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_Bonus_descriptor_,
      MsgSC_Bonus::default_instance_,
      MsgSC_Bonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Bonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_Bonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_Bonus));
  MsgSC_PoliceNotify_descriptor_ = file->message_type(93);
  static const int MsgSC_PoliceNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PoliceNotify, m_policemsg_),
  };
  MsgSC_PoliceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSC_PoliceNotify_descriptor_,
      MsgSC_PoliceNotify::default_instance_,
      MsgSC_PoliceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PoliceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSC_PoliceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSC_PoliceNotify));
  PayloadSC_descriptor_ = file->message_type(94);
  static const int PayloadSC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadSC, mtagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadSC, bshared_),
  };
  PayloadSC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayloadSC_descriptor_,
      PayloadSC::default_instance_,
      PayloadSC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadSC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadSC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayloadSC));
  PayloadSC_TAGID_descriptor_ = PayloadSC_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AdlGame_5fPoker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cards_descriptor_, &Cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Money_descriptor_, &Money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMoney_descriptor_, &UserMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWinLose_descriptor_, &CWinLose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneCard_descriptor_, &OneCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VecMoney_descriptor_, &VecMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WinLoseInfo_descriptor_, &WinLoseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VecUSN_descriptor_, &VecUSN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WAITINGUSERDATA_descriptor_, &WAITINGUSERDATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RCUserData_descriptor_, &RCUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Option_descriptor_, &Option::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BettingMsg_descriptor_, &BettingMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BettingMsgTable_descriptor_, &BettingMsgTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyTable_descriptor_, &MoneyTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardTable_descriptor_, &CardTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UITable_descriptor_, &UITable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RCRoomData_descriptor_, &RCRoomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_Entry_descriptor_, &MsgCS_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_Observe_descriptor_, &MsgCS_Observe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_Start_descriptor_, &MsgCS_Start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_SelectedCardReq_descriptor_, &MsgCS_SelectedCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_BettingReq_descriptor_, &MsgCS_BettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_ChoiceRemoveCard_descriptor_, &MsgCS_ChoiceRemoveCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_Purge_descriptor_, &MsgCS_Purge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_Abuse_descriptor_, &MsgCS_Abuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_AskPurgeVote_descriptor_, &MsgCS_AskPurgeVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_AnswerPurgeVote_descriptor_, &MsgCS_AnswerPurgeVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_WaitingUserTicketReq_descriptor_, &MsgCS_WaitingUserTicketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_UpdateWaitingUserInfoReq_descriptor_, &MsgCS_UpdateWaitingUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_SoundType_descriptor_, &MsgCS_SoundType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_ExitQue_descriptor_, &MsgCS_ExitQue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_Continue_descriptor_, &MsgCS_Continue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_RuleSet_descriptor_, &MsgCS_RuleSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_GameMasterCall_descriptor_, &MsgCS_GameMasterCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_FieldReserved_descriptor_, &MsgCS_FieldReserved::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_JokboSet_descriptor_, &MsgCS_JokboSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_TestKeySetting_descriptor_, &MsgCS_TestKeySetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_CheckNotice_descriptor_, &MsgCS_CheckNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_Ack_descriptor_, &MsgCS_Ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCS_Ping_descriptor_, &MsgCS_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_UserJoinAns_descriptor_, &MsgSC_UserJoinAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_UserJoinErr_descriptor_, &MsgSC_UserJoinErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_UserDisconnect_descriptor_, &MsgSC_UserDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_CardData_descriptor_, &MsgSC_CardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_EntryAns_descriptor_, &MsgSC_EntryAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_EntryReject_descriptor_, &MsgSC_EntryReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_ObserveAns_descriptor_, &MsgSC_ObserveAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_StartReq_descriptor_, &MsgSC_StartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_StartAns_descriptor_, &MsgSC_StartAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_NoStart_descriptor_, &MsgSC_NoStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_DealCards_descriptor_, &MsgSC_DealCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_SelectedCardAns_descriptor_, &MsgSC_SelectedCardAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_DealOpenCard_descriptor_, &MsgSC_DealOpenCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_DealCard_descriptor_, &MsgSC_DealCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_Boss_descriptor_, &MsgSC_Boss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_Betting_descriptor_, &MsgSC_Betting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_BettingAns_descriptor_, &MsgSC_BettingAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_BettingAnsMsg_descriptor_, &MsgSC_BettingAnsMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_DealHiddenCard_descriptor_, &MsgSC_DealHiddenCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_AnteMoney_descriptor_, &MsgSC_AnteMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_RuleQuaterHalf_descriptor_, &MsgSC_RuleQuaterHalf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_Finished_descriptor_, &MsgSC_Finished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_NewGame_descriptor_, &MsgSC_NewGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_ContinueAns_descriptor_, &MsgSC_ContinueAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_Continue_descriptor_, &MsgSC_Continue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_SystemMsg_descriptor_, &MsgSC_SystemMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_PurgeAns_descriptor_, &MsgSC_PurgeAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_PurgeInfo_descriptor_, &MsgSC_PurgeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_SetPurgeMoney_descriptor_, &MsgSC_SetPurgeMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_AssaItemNotify_descriptor_, &MsgSC_AssaItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_ThankYouItemNotify_descriptor_, &MsgSC_ThankYouItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_MadeItemNotify_descriptor_, &MsgSC_MadeItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_ExtMoneyNotify_descriptor_, &MsgSC_ExtMoneyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_GameEndSystemMsg_descriptor_, &MsgSC_GameEndSystemMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_ChangeAvatarNotify_descriptor_, &MsgSC_ChangeAvatarNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_AbuseAns_descriptor_, &MsgSC_AbuseAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_SoundTypeAns_descriptor_, &MsgSC_SoundTypeAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_FMoney_descriptor_, &MsgSC_FMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_ItemNotify_descriptor_, &MsgSC_ItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_DisconnectMoneyNotify_descriptor_, &MsgSC_DisconnectMoneyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_ExitNtf_descriptor_, &MsgSC_ExitNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_RematchOKAns_descriptor_, &MsgSC_RematchOKAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_RuleNotify_descriptor_, &MsgSC_RuleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_AllowEntryWaitingUser_descriptor_, &MsgSC_AllowEntryWaitingUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_AllWaitingUserDataNtf_descriptor_, &MsgSC_AllWaitingUserDataNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_UserDataChangeNtf_descriptor_, &MsgSC_UserDataChangeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_RefillMoneyNtf_descriptor_, &MsgSC_RefillMoneyNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_JackpotMoneyNtf_descriptor_, &MsgSC_JackpotMoneyNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_GuardianAngelMoney_descriptor_, &MsgSC_GuardianAngelMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_GameMasterCallNtf_descriptor_, &MsgSC_GameMasterCallNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_ObserverCnt_descriptor_, &MsgSC_ObserverCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_Bonus_descriptor_, &MsgSC_Bonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSC_PoliceNotify_descriptor_, &MsgSC_PoliceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayloadSC_descriptor_, &PayloadSC::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto() {
  delete Cards::default_instance_;
  delete Cards_reflection_;
  delete Money::default_instance_;
  delete Money_reflection_;
  delete UserMoney::default_instance_;
  delete UserMoney_reflection_;
  delete CWinLose::default_instance_;
  delete CWinLose_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete OneCard::default_instance_;
  delete OneCard_reflection_;
  delete VecMoney::default_instance_;
  delete VecMoney_reflection_;
  delete WinLoseInfo::default_instance_;
  delete WinLoseInfo_reflection_;
  delete VecUSN::default_instance_;
  delete VecUSN_reflection_;
  delete WAITINGUSERDATA::default_instance_;
  delete WAITINGUSERDATA_reflection_;
  delete RCUserData::default_instance_;
  delete RCUserData_reflection_;
  delete Option::default_instance_;
  delete Option_reflection_;
  delete BettingMsg::default_instance_;
  delete BettingMsg_reflection_;
  delete BettingMsgTable::default_instance_;
  delete BettingMsgTable_reflection_;
  delete MoneyTable::default_instance_;
  delete MoneyTable_reflection_;
  delete CardTable::default_instance_;
  delete CardTable_reflection_;
  delete UITable::default_instance_;
  delete UITable_reflection_;
  delete RCRoomData::default_instance_;
  delete RCRoomData_reflection_;
  delete MsgCS_Entry::default_instance_;
  delete MsgCS_Entry_reflection_;
  delete MsgCS_Observe::default_instance_;
  delete MsgCS_Observe_reflection_;
  delete MsgCS_Start::default_instance_;
  delete MsgCS_Start_reflection_;
  delete MsgCS_SelectedCardReq::default_instance_;
  delete MsgCS_SelectedCardReq_reflection_;
  delete MsgCS_BettingReq::default_instance_;
  delete MsgCS_BettingReq_reflection_;
  delete MsgCS_ChoiceRemoveCard::default_instance_;
  delete MsgCS_ChoiceRemoveCard_reflection_;
  delete MsgCS_Purge::default_instance_;
  delete MsgCS_Purge_reflection_;
  delete MsgCS_Abuse::default_instance_;
  delete MsgCS_Abuse_reflection_;
  delete MsgCS_AskPurgeVote::default_instance_;
  delete MsgCS_AskPurgeVote_reflection_;
  delete MsgCS_AnswerPurgeVote::default_instance_;
  delete MsgCS_AnswerPurgeVote_reflection_;
  delete MsgCS_WaitingUserTicketReq::default_instance_;
  delete MsgCS_WaitingUserTicketReq_reflection_;
  delete MsgCS_UpdateWaitingUserInfoReq::default_instance_;
  delete MsgCS_UpdateWaitingUserInfoReq_reflection_;
  delete MsgCS_SoundType::default_instance_;
  delete MsgCS_SoundType_reflection_;
  delete MsgCS_ExitQue::default_instance_;
  delete MsgCS_ExitQue_reflection_;
  delete MsgCS_Continue::default_instance_;
  delete MsgCS_Continue_reflection_;
  delete MsgCS_RuleSet::default_instance_;
  delete MsgCS_RuleSet_reflection_;
  delete MsgCS_GameMasterCall::default_instance_;
  delete MsgCS_GameMasterCall_reflection_;
  delete MsgCS_FieldReserved::default_instance_;
  delete MsgCS_FieldReserved_reflection_;
  delete MsgCS_JokboSet::default_instance_;
  delete MsgCS_JokboSet_reflection_;
  delete MsgCS_TestKeySetting::default_instance_;
  delete MsgCS_TestKeySetting_reflection_;
  delete MsgCS_CheckNotice::default_instance_;
  delete MsgCS_CheckNotice_reflection_;
  delete MsgCS_Ack::default_instance_;
  delete MsgCS_Ack_reflection_;
  delete MsgCS_Ping::default_instance_;
  delete MsgCS_Ping_reflection_;
  delete MsgSC_UserJoinAns::default_instance_;
  delete MsgSC_UserJoinAns_reflection_;
  delete MsgSC_UserJoinErr::default_instance_;
  delete MsgSC_UserJoinErr_reflection_;
  delete MsgSC_UserDisconnect::default_instance_;
  delete MsgSC_UserDisconnect_reflection_;
  delete MsgSC_CardData::default_instance_;
  delete MsgSC_CardData_reflection_;
  delete MsgSC_EntryAns::default_instance_;
  delete MsgSC_EntryAns_reflection_;
  delete MsgSC_EntryReject::default_instance_;
  delete MsgSC_EntryReject_reflection_;
  delete MsgSC_ObserveAns::default_instance_;
  delete MsgSC_ObserveAns_reflection_;
  delete MsgSC_StartReq::default_instance_;
  delete MsgSC_StartReq_reflection_;
  delete MsgSC_StartAns::default_instance_;
  delete MsgSC_StartAns_reflection_;
  delete MsgSC_NoStart::default_instance_;
  delete MsgSC_NoStart_reflection_;
  delete MsgSC_DealCards::default_instance_;
  delete MsgSC_DealCards_reflection_;
  delete MsgSC_SelectedCardAns::default_instance_;
  delete MsgSC_SelectedCardAns_reflection_;
  delete MsgSC_DealOpenCard::default_instance_;
  delete MsgSC_DealOpenCard_reflection_;
  delete MsgSC_DealCard::default_instance_;
  delete MsgSC_DealCard_reflection_;
  delete MsgSC_Boss::default_instance_;
  delete MsgSC_Boss_reflection_;
  delete MsgSC_Betting::default_instance_;
  delete MsgSC_Betting_reflection_;
  delete MsgSC_BettingAns::default_instance_;
  delete MsgSC_BettingAns_reflection_;
  delete MsgSC_BettingAnsMsg::default_instance_;
  delete MsgSC_BettingAnsMsg_reflection_;
  delete MsgSC_DealHiddenCard::default_instance_;
  delete MsgSC_DealHiddenCard_reflection_;
  delete MsgSC_AnteMoney::default_instance_;
  delete MsgSC_AnteMoney_reflection_;
  delete MsgSC_RuleQuaterHalf::default_instance_;
  delete MsgSC_RuleQuaterHalf_reflection_;
  delete MsgSC_Finished::default_instance_;
  delete MsgSC_Finished_reflection_;
  delete MsgSC_NewGame::default_instance_;
  delete MsgSC_NewGame_reflection_;
  delete MsgSC_ContinueAns::default_instance_;
  delete MsgSC_ContinueAns_reflection_;
  delete MsgSC_Continue::default_instance_;
  delete MsgSC_Continue_reflection_;
  delete MsgSC_SystemMsg::default_instance_;
  delete MsgSC_SystemMsg_reflection_;
  delete MsgSC_PurgeAns::default_instance_;
  delete MsgSC_PurgeAns_reflection_;
  delete MsgSC_PurgeInfo::default_instance_;
  delete MsgSC_PurgeInfo_reflection_;
  delete MsgSC_SetPurgeMoney::default_instance_;
  delete MsgSC_SetPurgeMoney_reflection_;
  delete MsgSC_AssaItemNotify::default_instance_;
  delete MsgSC_AssaItemNotify_reflection_;
  delete MsgSC_ThankYouItemNotify::default_instance_;
  delete MsgSC_ThankYouItemNotify_reflection_;
  delete MsgSC_MadeItemNotify::default_instance_;
  delete MsgSC_MadeItemNotify_reflection_;
  delete MsgSC_ExtMoneyNotify::default_instance_;
  delete MsgSC_ExtMoneyNotify_reflection_;
  delete MsgSC_GameEndSystemMsg::default_instance_;
  delete MsgSC_GameEndSystemMsg_reflection_;
  delete MsgSC_ChangeAvatarNotify::default_instance_;
  delete MsgSC_ChangeAvatarNotify_reflection_;
  delete MsgSC_AbuseAns::default_instance_;
  delete MsgSC_AbuseAns_reflection_;
  delete MsgSC_SoundTypeAns::default_instance_;
  delete MsgSC_SoundTypeAns_reflection_;
  delete MsgSC_FMoney::default_instance_;
  delete MsgSC_FMoney_reflection_;
  delete MsgSC_ItemNotify::default_instance_;
  delete MsgSC_ItemNotify_reflection_;
  delete MsgSC_DisconnectMoneyNotify::default_instance_;
  delete MsgSC_DisconnectMoneyNotify_reflection_;
  delete MsgSC_ExitNtf::default_instance_;
  delete MsgSC_ExitNtf_reflection_;
  delete MsgSC_RematchOKAns::default_instance_;
  delete MsgSC_RematchOKAns_reflection_;
  delete MsgSC_RuleNotify::default_instance_;
  delete MsgSC_RuleNotify_reflection_;
  delete MsgSC_AllowEntryWaitingUser::default_instance_;
  delete MsgSC_AllowEntryWaitingUser_reflection_;
  delete MsgSC_AllWaitingUserDataNtf::default_instance_;
  delete MsgSC_AllWaitingUserDataNtf_reflection_;
  delete MsgSC_UserDataChangeNtf::default_instance_;
  delete MsgSC_UserDataChangeNtf_reflection_;
  delete MsgSC_RefillMoneyNtf::default_instance_;
  delete MsgSC_RefillMoneyNtf_reflection_;
  delete MsgSC_JackpotMoneyNtf::default_instance_;
  delete MsgSC_JackpotMoneyNtf_reflection_;
  delete MsgSC_GuardianAngelMoney::default_instance_;
  delete MsgSC_GuardianAngelMoney_reflection_;
  delete MsgSC_GameMasterCallNtf::default_instance_;
  delete MsgSC_GameMasterCallNtf_reflection_;
  delete MsgSC_ObserverCnt::default_instance_;
  delete MsgSC_ObserverCnt_reflection_;
  delete MsgSC_Bonus::default_instance_;
  delete MsgSC_Bonus_reflection_;
  delete MsgSC_PoliceNotify::default_instance_;
  delete MsgSC_PoliceNotify_reflection_;
  delete PayloadSC::default_instance_;
  delete PayloadSC_reflection_;
}

void protobuf_AddDesc_AdlGame_5fPoker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023AdlGame_Poker.proto\022\nGame_Poker\"\236\001\n\005Ca"
    "rds\022\021\n\tm_vtCards\030\001 \003(\005\022\024\n\014m_lResultIdx\030\002"
    " \003(\005\022&\n\nm_vUserUSN\030\003 \002(\0132\022.Game_Poker.Ve"
    "cUSN\"D\n\005state\022\023\n\017CARDTYPE_NORMAL\020\000\022\023\n\017CA"
    "RDTYPE_HIDDEN\020\001\022\021\n\rCARDTYPE_SAME\020\002\"\200\002\n\005M"
    "oney\022\022\n\nm_llCMoney\030\001 \002(\022\022\025\n\rm_llCallMone"
    "y\030\002 \002(\022\022\025\n\rm_llSideMoney\030\003 \002(\022\022\030\n\020m_llCa"
    "llHabMoney\030\004 \002(\022\022\025\n\rm_llTakeMoney\030\005 \002(\022\022"
    "\030\n\020m_llJackpotMoney\030\006 \002(\022\022\023\n\013m_lBetState"
    "\030\007 \002(\021\022\025\n\rm_lBetReceive\030\010 \002(\021\022\023\n\013m_lBetC"
    "ount\030\t \002(\021\022\024\n\014m_lResultIdx\030\n \002(\021\022\023\n\013m_sM"
    "oneyMsg\030\013 \002(\t\"\263\001\n\tUserMoney\022\016\n\006m_lUSN\030\001 "
    "\002(\021\022\020\n\010m_lState\030\002 \002(\021\022\021\n\tm_llMoney\030\003 \002(\022"
    "\022\030\n\020m_llCallHabMoney\030\004 \002(\022\022\025\n\rm_llTakeMo"
    "ney\030\005 \002(\022\022\025\n\rm_llDealMoney\030\006 \002(\022\022\023\n\013m_sN"
    "ickName\030\007 \002(\t\022\024\n\014m_sDealerTax\030\010 \002(\t\"@\n\010C"
    "WinLose\022\016\n\006m_lWin\030\001 \002(\021\022\017\n\007m_lLose\030\002 \002(\021"
    "\022\023\n\013m_lContinue\030\003 \002(\021\"\264\003\n\010UserInfo\022\016\n\006m_"
    "lUSN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002(\021\022\023\n\013m_sNickN"
    "ame\030\003 \002(\t\022\r\n\005m_sID\030\004 \002(\t\022\021\n\tm_lCLevel\030\005 "
    "\002(\021\022\024\n\014m_lSoundType\030\006 \002(\021\022\016\n\006m_sAvt\030\007 \002("
    "\t\022\024\n\014m_lUserState\030\010 \002(\021\022(\n\nm_cWinLose\030\t "
    "\002(\0132\024.Game_Poker.CWinLose\022.\n\020m_cWinLose_"
    "Today\030\n \002(\0132\024.Game_Poker.CWinLose\022-\n\017m_c"
    "WinLose_Room\030\013 \002(\0132\024.Game_Poker.CWinLose"
    "\022\022\n\nm_llCMoney\030\014 \002(\022\022\022\n\nm_llFMoney\030\r \002(\022"
    "\022\017\n\007m_lExit\030\016 \002(\021\022\023\n\013m_nItemType\030\017 \002(\021\022\016"
    "\n\006m_lAck\030\020 \002(\021\022\022\n\nm_lJackpot\030\021 \002(\021\022\030\n\020m_"
    "lDieCardsDealt\030\022 \002(\021\"1\n\007OneCard\022\020\n\010m_nIn"
    "dex\030\001 \002(\005\022\024\n\014m_lCardIndex\030\002 \002(\005\"\034\n\010VecMo"
    "ney\022\020\n\010VecMoney\030\001 \002(\022\"\r\n\013WinLoseInfo\"\025\n\006"
    "VecUSN\022\013\n\003USN\030\001 \002(\003\"\021\n\017WAITINGUSERDATA\"\014"
    "\n\nRCUserData\"\235\003\n\006Option\022\024\n\014m_sRoomTitle\030"
    "\001 \002(\t\022\023\n\013m_sPassword\030\002 \002(\t\022\025\n\rm_lMaxUser"
    "Cnt\030\003 \002(\005\022\033\n\023m_lMaxPlayerUserCnt\030\004 \002(\005\022\033"
    "\n\023m_lMaxPlayerCardCnt\030\005 \002(\005\022\025\n\rm_lChoice"
    "Mode\030\006 \002(\005\022\023\n\013m_lRoomType\030\007 \002(\005\022\022\n\nm_lBe"
    "tRule\030\010 \002(\005\022\022\n\nm_lBetType\030\t \002(\005\022\022\n\nm_lAd"
    "dRule\030\n \002(\005\022\026\n\016m_lRematchJoin\030\013 \002(\005\022\025\n\rm"
    "_lLimitMoney\030\014 \002(\005\022\031\n\021m_llGameAnteMoney\030"
    "\r \002(\022\022\017\n\007m_bEcho\030\016 \002(\005\022\022\n\nm_lMakeUSN\030\017 \002"
    "(\005\022\023\n\013m_lCategory\030\020 \002(\005\022\024\n\014m_lChannelID\030"
    "\021 \002(\005\022\025\n\rm_llAnteMoney\030\022 \002(\022\"\271\001\n\nBetting"
    "Msg\022\016\n\006m_lUSN\030\001 \002(\005\022\020\n\010m_nIndex\030\002 \002(\005\022\021\n"
    "\tm_BetType\030\003 \002(\005\022\027\n\017m_bBettingMoney\030\004 \002("
    "\005\022\024\n\014m_bMoneyLack\030\005 \002(\005\022\030\n\020m_bCallMoneyZ"
    "ero\030\006 \002(\005\022\025\n\rm_llCallMoney\030\007 \002(\003\022\026\n\016m_ll"
    "RaiseMoney\030\010 \002(\003\"B\n\017BettingMsgTable\022/\n\017B"
    "ettingMsgTable\030\001 \003(\0132\026.Game_Poker.Bettin"
    "gMsg\"3\n\nMoneyTable\022%\n\nMoneyTable\030\001 \003(\0132\021"
    ".Game_Poker.Money\"1\n\tCardTable\022$\n\tCardTa"
    "ble\030\001 \003(\0132\021.Game_Poker.Cards\"0\n\007UITable\022"
    "%\n\007UITable\030\001 \003(\0132\024.Game_Poker.UserInfo\"\243"
    "\002\n\nRCRoomData\022\025\n\rm_lGameMaster\030\001 \002(\005\022\024\n\014"
    "m_lRoomIndex\030\002 \002(\005\022\020\n\010m_lState\030\003 \002(\005\022$\n\010"
    "m_option\030\004 \002(\0132\022.Game_Poker.Option\022$\n\007m_"
    "tblUI\030\005 \002(\0132\023.Game_Poker.UITable\022(\n\tm_tb"
    "lCard\030\006 \002(\0132\025.Game_Poker.CardTable\022*\n\nm_"
    "tblMoney\030\007 \002(\0132\026.Game_Poker.MoneyTable\0224"
    "\n\017m_tblBettingMsg\030\010 \002(\0132\033.Game_Poker.Bet"
    "tingMsgTable\"\230\001\n\013MsgCS_Entry\022\022\n\nm_nVersi"
    "on\030\001 \002(\005\022\027\n\017m_bWelcomeSound\030\002 \002(\021\022\024\n\014m_l"
    "SoundType\030\003 \002(\021\022\023\n\013m_sNickName\030\004 \002(\t\022\016\n\006"
    "m_sAvt\030\005 \002(\t\022\021\n\tm_lCLevel\030\006 \002(\021\022\016\n\006m_lSe"
    "x\030\007 \002(\021\"\017\n\rMsgCS_Observe\"\r\n\013MsgCS_Start\""
    "+\n\025MsgCS_SelectedCardReq\022\022\n\nm_lCardIdx\030\001"
    " \002(\021\"&\n\020MsgCS_BettingReq\022\022\n\nm_lBetType\030\001"
    " \002(\021\"D\n\026MsgCS_ChoiceRemoveCard\022\016\n\006m_lUSN"
    "\030\001 \002(\021\022\032\n\022m_nRemoveCardIndex\030\002 \002(\005\"3\n\013Ms"
    "gCS_Purge\022\017\n\007m_lType\030\001 \002(\021\022\023\n\013m_lPurgeUS"
    "N\030\002 \002(\021\".\n\013MsgCS_Abuse\022\017\n\007m_lType\030\001 \002(\021\022"
    "\016\n\006m_sDay\030\002 \002(\t\")\n\022MsgCS_AskPurgeVote\022\023\n"
    "\013m_lPurgeUSN\030\001 \002(\021\"*\n\025MsgCS_AnswerPurgeV"
    "ote\022\021\n\tm_lAnswer\030\001 \002(\021\"\?\n\032MsgCS_WaitingU"
    "serTicketReq\022\017\n\007m_nType\030\001 \002(\005\022\020\n\010m_bValu"
    "e\030\002 \002(\021\" \n\036MsgCS_UpdateWaitingUserInfoRe"
    "q\"\'\n\017MsgCS_SoundType\022\024\n\014m_lSoundType\030\001 \002"
    "(\021\"3\n\rMsgCS_ExitQue\022\017\n\007m_lExit\030\001 \002(\021\022\021\n\t"
    "m_bAction\030\002 \002(\021\"!\n\016MsgCS_Continue\022\017\n\007m_l"
    "Exit\030\001 \002(\021\"#\n\rMsgCS_RuleSet\022\022\n\nm_nRuleId"
    "x\030\001 \002(\005\"\026\n\024MsgCS_GameMasterCall\"A\n\023MsgCS"
    "_FieldReserved\022\024\n\014m_nReserved1\030\001 \002(\005\022\024\n\014"
    "m_nReserved2\030\002 \002(\005\"e\n\016MsgCS_JokboSet\022\017\n\007"
    "m_lKey1\030\001 \002(\021\022\017\n\007m_lKey2\030\002 \002(\021\022\017\n\007m_lKey"
    "3\030\003 \002(\021\022\017\n\007m_lKey4\030\004 \002(\021\022\017\n\007m_lKey5\030\005 \002("
    "\021\"\'\n\024MsgCS_TestKeySetting\022\017\n\007m_nChar\030\001 \002"
    "(\r\"$\n\021MsgCS_CheckNotice\022\017\n\007m_nType\030\001 \002(\005"
    "\"\035\n\tMsgCS_Ack\022\020\n\010m_nTagID\030\001 \002(\005\"\014\n\nMsgCS"
    "_Ping\"\307\001\n\021MsgSC_UserJoinAns\022\020\n\010m_lState\030"
    "\001 \002(\021\022\020\n\010m_nEnter\030\002 \002(\005\022\016\n\006m_nSet\030\003 \002(\005\022"
    "\026\n\016m_lChannel_idx\030\004 \002(\005\022\023\n\013m_lOwnerUSN\030\005"
    " \002(\021\022\022\n\nm_lBossUSN\030\006 \002(\021\022\027\n\017m_nRoomPurge"
    "Cnt\030\007 \002(\005\022$\n\010m_option\030\010 \002(\0132\022.Game_Poker"
    ".Option\"9\n\021MsgSC_UserJoinErr\022\016\n\006m_lUSN\030\001"
    " \002(\021\022\024\n\014m_lErrorCode\030\002 \002(\021\"t\n\024MsgSC_User"
    "Disconnect\022\016\n\006m_lUSN\030\001 \002(\021\022%\n\007m_uinfo\030\002 "
    "\002(\0132\024.Game_Poker.UserInfo\022\020\n\010m_lState\030\003 "
    "\002(\021\022\023\n\013m_lOwnerUSN\030\004 \002(\021\"\237\001\n\016MsgSC_CardD"
    "ata\022\022\n\nm_nDealCnt\030\001 \002(\005\022\025\n\rm_lCardsDealt"
    "\030\002 \002(\021\022$\n\tm_tblCard\030\003 \003(\0132\021.Game_Poker.C"
    "ards\022%\n\nm_tblMoney\030\004 \003(\0132\021.Game_Poker.Mo"
    "ney\022\025\n\rm_llPoolMoney\030\005 \002(\022\"\305\001\n\016MsgSC_Ent"
    "ryAns\022\016\n\006m_lUSN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002(\005\022"
    "\023\n\013m_lOwnerUSN\030\003 \002(\021\022%\n\007m_tblUI\030\004 \003(\0132\024."
    "Game_Poker.UserInfo\022%\n\nm_tblMoney\030\005 \003(\0132"
    "\021.Game_Poker.Money\022\027\n\017m_bWelcomeSound\030\006 "
    "\002(\021\022\025\n\rm_lObserveCnt\030\007 \002(\021\"8\n\021MsgSC_Entr"
    "yReject\022\017\n\007m_lType\030\001 \002(\021\022\022\n\nm_llCMoney\030\002"
    " \002(\022\"\224\001\n\020MsgSC_ObserveAns\022\016\n\006m_lUSN\030\001 \002("
    "\021\022\020\n\010m_nIndex\030\002 \002(\005\022\023\n\013m_lOwnerUSN\030\003 \002(\021"
    "\022%\n\007m_uinfo\030\004 \002(\0132\024.Game_Poker.UserInfo\022"
    "\"\n\007m_money\030\005 \002(\0132\021.Game_Poker.Money\"\020\n\016M"
    "sgSC_StartReq\"M\n\016MsgSC_StartAns\022\020\n\010m_lSt"
    "ate\030\001 \002(\021\022\021\n\tm_vtState\030\002 \003(\021\022\026\n\016m_llSyst"
    "emTime\030\003 \002(\022\"\017\n\rMsgSC_NoStart\"\254\001\n\017MsgSC_"
    "DealCards\022\022\n\nm_lBossUSN\030\001 \002(\021\022\020\n\010m_lStat"
    "e\030\002 \002(\021\022\017\n\007m_nType\030\003 \002(\005\022$\n\tm_tblCard\030\004 "
    "\003(\0132\021.Game_Poker.Cards\022%\n\nm_tblMoney\030\005 \003"
    "(\0132\021.Game_Poker.Money\022\025\n\rm_llPoolMoney\030\006"
    " \002(\022\"g\n\025MsgSC_SelectedCardAns\022\016\n\006m_lUSN\030"
    "\001 \002(\021\022\021\n\tm_nSelect\030\002 \002(\005\022\024\n\014m_lCardIndex"
    "\030\003 \002(\021\022\025\n\rm_lChoiceType\030\004 \002(\021\"_\n\022MsgSC_D"
    "ealOpenCard\022\020\n\010m_lState\030\001 \002(\021\022$\n\tm_tblCa"
    "rd\030\002 \003(\0132\021.Game_Poker.Cards\022\021\n\tm_vtState"
    "\030\003 \003(\021\"v\n\016MsgSC_DealCard\022\022\n\nm_lBossUSN\030\001"
    " \002(\021\022\017\n\007m_nType\030\002 \002(\005\022\025\n\rm_lCardsDealt\030\003"
    " \002(\021\022(\n\013m_vtOneCard\030\004 \003(\0132\023.Game_Poker.O"
    "neCard\"5\n\nMsgSC_Boss\022\022\n\nm_lBossUSN\030\001 \002(\021"
    "\022\023\n\013m_nBossRank\030\002 \002(\005\"9\n\rMsgSC_Betting\022\021"
    "\n\tm_lBetUSN\030\001 \002(\021\022\025\n\rm_lBetBtnType\030\002 \002(\021"
    "\"\237\001\n\020MsgSC_BettingAns\022\020\n\010m_nIndex\030\001 \002(\005\022"
    "\022\n\nm_lBetType\030\002 \002(\021\022\"\n\007m_money\030\003 \002(\0132\021.G"
    "ame_Poker.Money\022+\n\rm_vtCallMoney\030\004 \003(\0132\024"
    ".Game_Poker.VecMoney\022\024\n\014m_lPoolMoney\030\005 \002"
    "(\022\"\351\002\n\023MsgSC_BettingAnsMsg\022\016\n\006m_lUSN\030\001 \002"
    "(\021\022\020\n\010m_nIndex\030\002 \002(\005\022\021\n\tm_BetType\030\003 \002(\021\022"
    "\027\n\017m_bBettingMoney\030\004 \002(\021\022\024\n\014m_bMoneyLack"
    "\030\005 \002(\021\022\030\n\020m_bCallMoneyZero\030\006 \002(\021\022\025\n\rm_ll"
    "CallMoney\030\007 \002(\022\022\026\n\016m_llRaiseMoney\030\010 \002(\022\022"
    "\025\n\rm_llSideMoney\030\t \002(\022\022\022\n\nm_lBetType\030\n \002"
    "(\021\022\022\n\nm_lBetTurn\030\013 \002(\021\022\"\n\007m_money\030\014 \002(\0132"
    "\021.Game_Poker.Money\022+\n\rm_vtCallMoney\030\r \003("
    "\0132\024.Game_Poker.VecMoney\022\025\n\rm_llPoolMoney"
    "\030\016 \002(\022\"k\n\024MsgSC_DealHiddenCard\022\022\n\nm_lBos"
    "sUSN\030\001 \002(\021\022\025\n\rm_lCardsDealt\030\002 \002(\021\022(\n\013m_v"
    "tOneCard\030\003 \003(\0132\023.Game_Poker.OneCard\"(\n\017M"
    "sgSC_AnteMoney\022\025\n\rm_llAnteMoney\030\001 \002(\022\"I\n"
    "\024MsgSC_RuleQuaterHalf\022\032\n\022m_llRuleQuaterH"
    "alf\030\001 \002(\022\022\025\n\rm_llPoolMoney\030\002 \002(\022\"\352\002\n\016Msg"
    "SC_Finished\022\020\n\010m_lState\030\001 \002(\021\022\021\n\tm_bGive"
    "Up\030\002 \002(\021\022\017\n\007m_lRank\030\003 \002(\021\022\022\n\nm_lBossUSN\030"
    "\004 \002(\021\022\025\n\rm_llGiveMoney\030\005 \002(\022\022\017\n\007m_vtWin\030"
    "\006 \003(\005\022\022\n\nm_vtResult\030\007 \003(\005\022\025\n\rm_vtGiveMon"
    "ey\030\010 \003(\022\022$\n\tm_tblCard\030\t \003(\0132\021.Game_Poker"
    ".Cards\022%\n\nm_tblMoney\030\n \003(\0132\021.Game_Poker."
    "Money\022\025\n\rm_llPoolMoney\030\013 \002(\022\022,\n\rm_vtUser"
    "Money\030\014 \003(\0132\025.Game_Poker.UserMoney\022\024\n\014m_"
    "lResultIdx\030\r \002(\021\022\023\n\013m_llJackpot\030\016 \002(\022\"A\n"
    "\rMsgSC_NewGame\0220\n\017m_vtWinLoseInfo\030\001 \003(\0132"
    "\027.Game_Poker.WinLoseInfo\"#\n\021MsgSC_Contin"
    "ueAns\022\016\n\006m_lUSN\030\001 \002(\021\"B\n\016MsgSC_Continue\022"
    "0\n\017m_vtWinLoseInfo\030\001 \003(\0132\027.Game_Poker.Wi"
    "nLoseInfo\"\"\n\017MsgSC_SystemMsg\022\017\n\007m_lType\030"
    "\001 \002(\021\"\020\n\016MsgSC_PurgeAns\"M\n\017MsgSC_PurgeIn"
    "fo\022(\n\014m_vtPurgeUSN\030\001 \003(\0132\022.Game_Poker.Ve"
    "cUSN\022\020\n\010m_nCount\030\002 \002(\005\"I\n\023MsgSC_SetPurge"
    "Money\022\016\n\006m_lUSN\030\001 \002(\021\022\"\n\007m_money\030\002 \002(\0132\021"
    ".Game_Poker.Money\"L\n\024MsgSC_AssaItemNotif"
    "y\022\016\n\006m_lUSN\030\001 \002(\021\022\023\n\013m_lRankType\030\002 \002(\021\022\017"
    "\n\007m_sItem\030\003 \002(\t\"m\n\030MsgSC_ThankYouItemNot"
    "ify\022\016\n\006m_lUSN\030\001 \002(\021\022\023\n\013m_lRankType\030\002 \002(\021"
    "\022\033\n\023m_llBasicDDangMoney\030\003 \002(\022\022\017\n\007m_sItem"
    "\030\004 \002(\t\"L\n\024MsgSC_MadeItemNotify\022\016\n\006m_lUSN"
    "\030\001 \002(\021\022\023\n\013m_lRankType\030\002 \002(\021\022\017\n\007m_sItem\030\003"
    " \002(\t\"\216\001\n\024MsgSC_ExtMoneyNotify\022\016\n\006m_lUSN\030"
    "\001 \002(\021\022\022\n\nm_bExtType\030\002 \002(\021\022\022\n\nm_llCMoney\030"
    "\003 \002(\022\022\023\n\013m_llCashBox\030\004 \002(\022\022\024\n\014m_llExtMon"
    "ey\030\005 \002(\022\022\023\n\013m_llExtDate\030\006 \002(\022\"o\n\026MsgSC_G"
    "ameEndSystemMsg\022\017\n\007m_lType\030\001 \002(\021\022\016\n\006m_lU"
    "SN\030\002 \002(\021\022\021\n\tm_bGiveUp\030\003 \002(\021\022\021\n\tm_llMoney"
    "\030\004 \002(\022\022\016\n\006m_sMsg\030\005 \002(\t\"c\n\030MsgSC_ChangeAv"
    "atarNotify\022\016\n\006m_lUSN\030\001 \002(\021\022\020\n\010m_nIndex\030\002"
    " \002(\005\022%\n\007m_uinfo\030\003 \002(\0132\024.Game_Poker.UserI"
    "nfo\"\020\n\016MsgSC_AbuseAns\"L\n\022MsgSC_SoundType"
    "Ans\022\016\n\006m_lUSN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002(\005\022\024\n"
    "\014m_lSoundType\030\003 \002(\021\"!\n\014MsgSC_FMoney\022\021\n\tm"
    "_sFMoney\030\001 \002(\t\"}\n\020MsgSC_ItemNotify\022\030\n\020m_"
    "lLimitTotalCnt\030\001 \002(\021\022\030\n\020m_lLimitTodayCnt"
    "\030\002 \002(\021\022\034\n\024m_bInfinitySpeedItem\030\003 \002(\021\022\027\n\017"
    "m_llSpeedToTime\030\004 \002(\022\"O\n\033MsgSC_Disconnec"
    "tMoneyNotify\022\023\n\013m_sNickName\030\001 \002(\t\022\033\n\023m_l"
    "lDisconnectMoney\030\002 \002(\022\"S\n\rMsgSC_ExitNtf\022"
    "\016\n\006m_lUSN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002(\005\022\017\n\007m_l"
    "Exit\030\003 \002(\021\022\017\n\007m_bExit\030\004 \002(\021\"u\n\022MsgSC_Rem"
    "atchOKAns\022\016\n\006m_lUSN\030\001 \002(\021\022\025\n\rm_llPoolMon"
    "ey\030\002 \002(\022\022\"\n\007m_money\030\003 \002(\0132\021.Game_Poker.M"
    "oney\022\024\n\014m_bRematchOK\030\004 \002(\021\"&\n\020MsgSC_Rule"
    "Notify\022\022\n\nm_nRuleIdx\030\001 \002(\005\"\035\n\033MsgSC_Allo"
    "wEntryWaitingUser\"q\n\033MsgSC_AllWaitingUse"
    "rDataNtf\022\032\n\022m_bSendWaitingUser\030\001 \002(\021\0226\n\021"
    "m_WaitingUserData\030\002 \003(\0132\033.Game_Poker.WAI"
    "TINGUSERDATA\"E\n\027MsgSC_UserDataChangeNtf\022"
    "*\n\nm_userData\030\001 \002(\0132\026.Game_Poker.RCUserD"
    "ata\"U\n\024MsgSC_RefillMoneyNtf\022\016\n\006m_lUSN\030\001 "
    "\002(\021\022\024\n\014m_nRefillCnt\030\002 \002(\005\022\027\n\017m_llRefillM"
    "oney\030\003 \002(\022\"A\n\025MsgSC_JackpotMoneyNtf\022\016\n\006m"
    "_lUSN\030\001 \002(\021\022\030\n\020m_llJackpotMoney\030\002 \002(\022\"_\n"
    "\030MsgSC_GuardianAngelMoney\022\016\n\006m_lUSN\030\001 \002("
    "\021\022\033\n\023m_nGuardianAngelCnt\030\002 \002(\005\022\026\n\016m_llAn"
    "gelMoney\030\003 \002(\022\"0\n\027MsgSC_GameMasterCallNt"
    "f\022\025\n\rm_lGMCall_USN\030\001 \002(\021\"+\n\021MsgSC_Observ"
    "erCnt\022\026\n\016m_nObserverCnt\030\001 \002(\005\" \n\013MsgSC_B"
    "onus\022\021\n\tm_llBonus\030\001 \002(\022\")\n\022MsgSC_PoliceN"
    "otify\022\023\n\013m_policeMsg\030\001 \002(\t\"\336\n\n\tPayloadSC"
    "\022\016\n\006mTagID\030\001 \002(\r\022\017\n\007bShared\030\002 \002(\010\"\257\n\n\005TA"
    "GID\022\n\n\006Header\020\000\022\r\n\t_Null_Tag\020\001\022\026\n\022msgUse"
    "rJoinAns_Tag\020\002\022\026\n\022msgUserJoinErr_Tag\020\003\022\031"
    "\n\025msgUserDisconnect_Tag\020\004\022\023\n\017msgCardData"
    "_Tag\020\005\022\023\n\017msgEntryAns_Tag\020\006\022\026\n\022msgEntryR"
    "eject_Tag\020\007\022\025\n\021msgObserveAns_Tag\020\010\022\023\n\017ms"
    "gStartReq_Tag\020\t\022\023\n\017msgStartAns_Tag\020\n\022\022\n\016"
    "msgNoStart_Tag\020\013\022\024\n\020msgDealCards_Tag\020\014\022\032"
    "\n\026msgSelectedCardAns_Tag\020\r\022\027\n\023msgDealOpe"
    "nCard_Tag\020\016\022\031\n\025msgDealHiddenCard_Tag\020\017\022\023"
    "\n\017msgDealCard_Tag\020\020\022\017\n\013msgBoss_Tag\020\021\022\022\n\016"
    "msgBetting_Tag\020\022\022\025\n\021msgBettingAns_Tag\020\023\022"
    "\030\n\024msgBettingAnsMsg_Tag\020\024\022\024\n\020msgAnteMone"
    "y_Tag\020\025\022\031\n\025msgRuleQuaterHalf_Tag\020\026\022\023\n\017ms"
    "gFinished_Tag\020\027\022\022\n\016msgNewGame_Tag\020\030\022\026\n\022m"
    "sgContinueAns_Tag\020\031\022\023\n\017msgContinue_Tag\020\032"
    "\022\024\n\020msgSystemMsg_Tag\020\033\022\023\n\017msgPurgeAns_Ta"
    "g\020\034\022\024\n\020msgPurgeInfo_Tag\020\035\022\030\n\024msgSetPurge"
    "Money_Tag\020\036\022\035\n\031msgThankYouItemNotify_Tag"
    "\020\037\022\031\n\025msgMadeItemNotify_Tag\020 \022\031\n\025msgAssa"
    "ItemNotify_Tag\020!\022\031\n\025msgExtMoneyNotify_Ta"
    "g\020\"\022\033\n\027msgGameEndSystemMsg_Tag\020#\022\035\n\031msgC"
    "hangeAvatarNotify_Tag\020$\022\023\n\017msgAbuseAns_T"
    "ag\020%\022\027\n\023msgSoundTypeAns_Tag\020&\022\021\n\rmsgFMon"
    "ey_Tag\020\'\022\025\n\021msgItemNotify_Tag\020(\022 \n\034msgDi"
    "sconnectMoneyNotify_Tag\020)\022\022\n\016msgExitNtf_"
    "Tag\020*\022 \n\034msgAllowEntryWaitingUser_Tag\020+\022"
    " \n\034msgAllWaitingUserDataNtf_Tag\020,\022\034\n\030msg"
    "UserDataChangeNtf_Tag\020-\022\031\n\025msgRefillMone"
    "yNtf_Tag\020.\022\032\n\026msgJackpotMoneyNtf_Tag\020/\022\025"
    "\n\021msgRuleNotify_Tag\0200\022\035\n\031msgGuardianAnge"
    "lMoney_Tag\0201\022\034\n\030msgGameMasterCallNtf_Tag"
    "\0202\022\026\n\022msgObserverCnt_Tag\0203\022\020\n\014msgBonus_T"
    "ag\0204\022\027\n\023msgPoliceNotify_Tag\0205\022\014\n\010_Max_Ta"
    "g\0206", 9923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AdlGame_Poker.proto", &protobuf_RegisterTypes);
  Cards::default_instance_ = new Cards();
  Money::default_instance_ = new Money();
  UserMoney::default_instance_ = new UserMoney();
  CWinLose::default_instance_ = new CWinLose();
  UserInfo::default_instance_ = new UserInfo();
  OneCard::default_instance_ = new OneCard();
  VecMoney::default_instance_ = new VecMoney();
  WinLoseInfo::default_instance_ = new WinLoseInfo();
  VecUSN::default_instance_ = new VecUSN();
  WAITINGUSERDATA::default_instance_ = new WAITINGUSERDATA();
  RCUserData::default_instance_ = new RCUserData();
  Option::default_instance_ = new Option();
  BettingMsg::default_instance_ = new BettingMsg();
  BettingMsgTable::default_instance_ = new BettingMsgTable();
  MoneyTable::default_instance_ = new MoneyTable();
  CardTable::default_instance_ = new CardTable();
  UITable::default_instance_ = new UITable();
  RCRoomData::default_instance_ = new RCRoomData();
  MsgCS_Entry::default_instance_ = new MsgCS_Entry();
  MsgCS_Observe::default_instance_ = new MsgCS_Observe();
  MsgCS_Start::default_instance_ = new MsgCS_Start();
  MsgCS_SelectedCardReq::default_instance_ = new MsgCS_SelectedCardReq();
  MsgCS_BettingReq::default_instance_ = new MsgCS_BettingReq();
  MsgCS_ChoiceRemoveCard::default_instance_ = new MsgCS_ChoiceRemoveCard();
  MsgCS_Purge::default_instance_ = new MsgCS_Purge();
  MsgCS_Abuse::default_instance_ = new MsgCS_Abuse();
  MsgCS_AskPurgeVote::default_instance_ = new MsgCS_AskPurgeVote();
  MsgCS_AnswerPurgeVote::default_instance_ = new MsgCS_AnswerPurgeVote();
  MsgCS_WaitingUserTicketReq::default_instance_ = new MsgCS_WaitingUserTicketReq();
  MsgCS_UpdateWaitingUserInfoReq::default_instance_ = new MsgCS_UpdateWaitingUserInfoReq();
  MsgCS_SoundType::default_instance_ = new MsgCS_SoundType();
  MsgCS_ExitQue::default_instance_ = new MsgCS_ExitQue();
  MsgCS_Continue::default_instance_ = new MsgCS_Continue();
  MsgCS_RuleSet::default_instance_ = new MsgCS_RuleSet();
  MsgCS_GameMasterCall::default_instance_ = new MsgCS_GameMasterCall();
  MsgCS_FieldReserved::default_instance_ = new MsgCS_FieldReserved();
  MsgCS_JokboSet::default_instance_ = new MsgCS_JokboSet();
  MsgCS_TestKeySetting::default_instance_ = new MsgCS_TestKeySetting();
  MsgCS_CheckNotice::default_instance_ = new MsgCS_CheckNotice();
  MsgCS_Ack::default_instance_ = new MsgCS_Ack();
  MsgCS_Ping::default_instance_ = new MsgCS_Ping();
  MsgSC_UserJoinAns::default_instance_ = new MsgSC_UserJoinAns();
  MsgSC_UserJoinErr::default_instance_ = new MsgSC_UserJoinErr();
  MsgSC_UserDisconnect::default_instance_ = new MsgSC_UserDisconnect();
  MsgSC_CardData::default_instance_ = new MsgSC_CardData();
  MsgSC_EntryAns::default_instance_ = new MsgSC_EntryAns();
  MsgSC_EntryReject::default_instance_ = new MsgSC_EntryReject();
  MsgSC_ObserveAns::default_instance_ = new MsgSC_ObserveAns();
  MsgSC_StartReq::default_instance_ = new MsgSC_StartReq();
  MsgSC_StartAns::default_instance_ = new MsgSC_StartAns();
  MsgSC_NoStart::default_instance_ = new MsgSC_NoStart();
  MsgSC_DealCards::default_instance_ = new MsgSC_DealCards();
  MsgSC_SelectedCardAns::default_instance_ = new MsgSC_SelectedCardAns();
  MsgSC_DealOpenCard::default_instance_ = new MsgSC_DealOpenCard();
  MsgSC_DealCard::default_instance_ = new MsgSC_DealCard();
  MsgSC_Boss::default_instance_ = new MsgSC_Boss();
  MsgSC_Betting::default_instance_ = new MsgSC_Betting();
  MsgSC_BettingAns::default_instance_ = new MsgSC_BettingAns();
  MsgSC_BettingAnsMsg::default_instance_ = new MsgSC_BettingAnsMsg();
  MsgSC_DealHiddenCard::default_instance_ = new MsgSC_DealHiddenCard();
  MsgSC_AnteMoney::default_instance_ = new MsgSC_AnteMoney();
  MsgSC_RuleQuaterHalf::default_instance_ = new MsgSC_RuleQuaterHalf();
  MsgSC_Finished::default_instance_ = new MsgSC_Finished();
  MsgSC_NewGame::default_instance_ = new MsgSC_NewGame();
  MsgSC_ContinueAns::default_instance_ = new MsgSC_ContinueAns();
  MsgSC_Continue::default_instance_ = new MsgSC_Continue();
  MsgSC_SystemMsg::default_instance_ = new MsgSC_SystemMsg();
  MsgSC_PurgeAns::default_instance_ = new MsgSC_PurgeAns();
  MsgSC_PurgeInfo::default_instance_ = new MsgSC_PurgeInfo();
  MsgSC_SetPurgeMoney::default_instance_ = new MsgSC_SetPurgeMoney();
  MsgSC_AssaItemNotify::default_instance_ = new MsgSC_AssaItemNotify();
  MsgSC_ThankYouItemNotify::default_instance_ = new MsgSC_ThankYouItemNotify();
  MsgSC_MadeItemNotify::default_instance_ = new MsgSC_MadeItemNotify();
  MsgSC_ExtMoneyNotify::default_instance_ = new MsgSC_ExtMoneyNotify();
  MsgSC_GameEndSystemMsg::default_instance_ = new MsgSC_GameEndSystemMsg();
  MsgSC_ChangeAvatarNotify::default_instance_ = new MsgSC_ChangeAvatarNotify();
  MsgSC_AbuseAns::default_instance_ = new MsgSC_AbuseAns();
  MsgSC_SoundTypeAns::default_instance_ = new MsgSC_SoundTypeAns();
  MsgSC_FMoney::default_instance_ = new MsgSC_FMoney();
  MsgSC_ItemNotify::default_instance_ = new MsgSC_ItemNotify();
  MsgSC_DisconnectMoneyNotify::default_instance_ = new MsgSC_DisconnectMoneyNotify();
  MsgSC_ExitNtf::default_instance_ = new MsgSC_ExitNtf();
  MsgSC_RematchOKAns::default_instance_ = new MsgSC_RematchOKAns();
  MsgSC_RuleNotify::default_instance_ = new MsgSC_RuleNotify();
  MsgSC_AllowEntryWaitingUser::default_instance_ = new MsgSC_AllowEntryWaitingUser();
  MsgSC_AllWaitingUserDataNtf::default_instance_ = new MsgSC_AllWaitingUserDataNtf();
  MsgSC_UserDataChangeNtf::default_instance_ = new MsgSC_UserDataChangeNtf();
  MsgSC_RefillMoneyNtf::default_instance_ = new MsgSC_RefillMoneyNtf();
  MsgSC_JackpotMoneyNtf::default_instance_ = new MsgSC_JackpotMoneyNtf();
  MsgSC_GuardianAngelMoney::default_instance_ = new MsgSC_GuardianAngelMoney();
  MsgSC_GameMasterCallNtf::default_instance_ = new MsgSC_GameMasterCallNtf();
  MsgSC_ObserverCnt::default_instance_ = new MsgSC_ObserverCnt();
  MsgSC_Bonus::default_instance_ = new MsgSC_Bonus();
  MsgSC_PoliceNotify::default_instance_ = new MsgSC_PoliceNotify();
  PayloadSC::default_instance_ = new PayloadSC();
  Cards::default_instance_->InitAsDefaultInstance();
  Money::default_instance_->InitAsDefaultInstance();
  UserMoney::default_instance_->InitAsDefaultInstance();
  CWinLose::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  OneCard::default_instance_->InitAsDefaultInstance();
  VecMoney::default_instance_->InitAsDefaultInstance();
  WinLoseInfo::default_instance_->InitAsDefaultInstance();
  VecUSN::default_instance_->InitAsDefaultInstance();
  WAITINGUSERDATA::default_instance_->InitAsDefaultInstance();
  RCUserData::default_instance_->InitAsDefaultInstance();
  Option::default_instance_->InitAsDefaultInstance();
  BettingMsg::default_instance_->InitAsDefaultInstance();
  BettingMsgTable::default_instance_->InitAsDefaultInstance();
  MoneyTable::default_instance_->InitAsDefaultInstance();
  CardTable::default_instance_->InitAsDefaultInstance();
  UITable::default_instance_->InitAsDefaultInstance();
  RCRoomData::default_instance_->InitAsDefaultInstance();
  MsgCS_Entry::default_instance_->InitAsDefaultInstance();
  MsgCS_Observe::default_instance_->InitAsDefaultInstance();
  MsgCS_Start::default_instance_->InitAsDefaultInstance();
  MsgCS_SelectedCardReq::default_instance_->InitAsDefaultInstance();
  MsgCS_BettingReq::default_instance_->InitAsDefaultInstance();
  MsgCS_ChoiceRemoveCard::default_instance_->InitAsDefaultInstance();
  MsgCS_Purge::default_instance_->InitAsDefaultInstance();
  MsgCS_Abuse::default_instance_->InitAsDefaultInstance();
  MsgCS_AskPurgeVote::default_instance_->InitAsDefaultInstance();
  MsgCS_AnswerPurgeVote::default_instance_->InitAsDefaultInstance();
  MsgCS_WaitingUserTicketReq::default_instance_->InitAsDefaultInstance();
  MsgCS_UpdateWaitingUserInfoReq::default_instance_->InitAsDefaultInstance();
  MsgCS_SoundType::default_instance_->InitAsDefaultInstance();
  MsgCS_ExitQue::default_instance_->InitAsDefaultInstance();
  MsgCS_Continue::default_instance_->InitAsDefaultInstance();
  MsgCS_RuleSet::default_instance_->InitAsDefaultInstance();
  MsgCS_GameMasterCall::default_instance_->InitAsDefaultInstance();
  MsgCS_FieldReserved::default_instance_->InitAsDefaultInstance();
  MsgCS_JokboSet::default_instance_->InitAsDefaultInstance();
  MsgCS_TestKeySetting::default_instance_->InitAsDefaultInstance();
  MsgCS_CheckNotice::default_instance_->InitAsDefaultInstance();
  MsgCS_Ack::default_instance_->InitAsDefaultInstance();
  MsgCS_Ping::default_instance_->InitAsDefaultInstance();
  MsgSC_UserJoinAns::default_instance_->InitAsDefaultInstance();
  MsgSC_UserJoinErr::default_instance_->InitAsDefaultInstance();
  MsgSC_UserDisconnect::default_instance_->InitAsDefaultInstance();
  MsgSC_CardData::default_instance_->InitAsDefaultInstance();
  MsgSC_EntryAns::default_instance_->InitAsDefaultInstance();
  MsgSC_EntryReject::default_instance_->InitAsDefaultInstance();
  MsgSC_ObserveAns::default_instance_->InitAsDefaultInstance();
  MsgSC_StartReq::default_instance_->InitAsDefaultInstance();
  MsgSC_StartAns::default_instance_->InitAsDefaultInstance();
  MsgSC_NoStart::default_instance_->InitAsDefaultInstance();
  MsgSC_DealCards::default_instance_->InitAsDefaultInstance();
  MsgSC_SelectedCardAns::default_instance_->InitAsDefaultInstance();
  MsgSC_DealOpenCard::default_instance_->InitAsDefaultInstance();
  MsgSC_DealCard::default_instance_->InitAsDefaultInstance();
  MsgSC_Boss::default_instance_->InitAsDefaultInstance();
  MsgSC_Betting::default_instance_->InitAsDefaultInstance();
  MsgSC_BettingAns::default_instance_->InitAsDefaultInstance();
  MsgSC_BettingAnsMsg::default_instance_->InitAsDefaultInstance();
  MsgSC_DealHiddenCard::default_instance_->InitAsDefaultInstance();
  MsgSC_AnteMoney::default_instance_->InitAsDefaultInstance();
  MsgSC_RuleQuaterHalf::default_instance_->InitAsDefaultInstance();
  MsgSC_Finished::default_instance_->InitAsDefaultInstance();
  MsgSC_NewGame::default_instance_->InitAsDefaultInstance();
  MsgSC_ContinueAns::default_instance_->InitAsDefaultInstance();
  MsgSC_Continue::default_instance_->InitAsDefaultInstance();
  MsgSC_SystemMsg::default_instance_->InitAsDefaultInstance();
  MsgSC_PurgeAns::default_instance_->InitAsDefaultInstance();
  MsgSC_PurgeInfo::default_instance_->InitAsDefaultInstance();
  MsgSC_SetPurgeMoney::default_instance_->InitAsDefaultInstance();
  MsgSC_AssaItemNotify::default_instance_->InitAsDefaultInstance();
  MsgSC_ThankYouItemNotify::default_instance_->InitAsDefaultInstance();
  MsgSC_MadeItemNotify::default_instance_->InitAsDefaultInstance();
  MsgSC_ExtMoneyNotify::default_instance_->InitAsDefaultInstance();
  MsgSC_GameEndSystemMsg::default_instance_->InitAsDefaultInstance();
  MsgSC_ChangeAvatarNotify::default_instance_->InitAsDefaultInstance();
  MsgSC_AbuseAns::default_instance_->InitAsDefaultInstance();
  MsgSC_SoundTypeAns::default_instance_->InitAsDefaultInstance();
  MsgSC_FMoney::default_instance_->InitAsDefaultInstance();
  MsgSC_ItemNotify::default_instance_->InitAsDefaultInstance();
  MsgSC_DisconnectMoneyNotify::default_instance_->InitAsDefaultInstance();
  MsgSC_ExitNtf::default_instance_->InitAsDefaultInstance();
  MsgSC_RematchOKAns::default_instance_->InitAsDefaultInstance();
  MsgSC_RuleNotify::default_instance_->InitAsDefaultInstance();
  MsgSC_AllowEntryWaitingUser::default_instance_->InitAsDefaultInstance();
  MsgSC_AllWaitingUserDataNtf::default_instance_->InitAsDefaultInstance();
  MsgSC_UserDataChangeNtf::default_instance_->InitAsDefaultInstance();
  MsgSC_RefillMoneyNtf::default_instance_->InitAsDefaultInstance();
  MsgSC_JackpotMoneyNtf::default_instance_->InitAsDefaultInstance();
  MsgSC_GuardianAngelMoney::default_instance_->InitAsDefaultInstance();
  MsgSC_GameMasterCallNtf::default_instance_->InitAsDefaultInstance();
  MsgSC_ObserverCnt::default_instance_->InitAsDefaultInstance();
  MsgSC_Bonus::default_instance_->InitAsDefaultInstance();
  MsgSC_PoliceNotify::default_instance_->InitAsDefaultInstance();
  PayloadSC::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AdlGame_5fPoker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AdlGame_5fPoker_2eproto {
  StaticDescriptorInitializer_AdlGame_5fPoker_2eproto() {
    protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  }
} static_descriptor_initializer_AdlGame_5fPoker_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Cards_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cards_state_descriptor_;
}
bool Cards_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Cards_state Cards::CARDTYPE_NORMAL;
const Cards_state Cards::CARDTYPE_HIDDEN;
const Cards_state Cards::CARDTYPE_SAME;
const Cards_state Cards::state_MIN;
const Cards_state Cards::state_MAX;
const int Cards::state_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Cards::kMVtCardsFieldNumber;
const int Cards::kMLResultIdxFieldNumber;
const int Cards::kMVUserUSNFieldNumber;
#endif  // !_MSC_VER

Cards::Cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cards::InitAsDefaultInstance() {
  m_vuserusn_ = const_cast< ::Game_Poker::VecUSN*>(&::Game_Poker::VecUSN::default_instance());
}

Cards::Cards(const Cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cards::SharedCtor() {
  _cached_size_ = 0;
  m_vuserusn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cards::~Cards() {
  SharedDtor();
}

void Cards::SharedDtor() {
  if (this != default_instance_) {
    delete m_vuserusn_;
  }
}

void Cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cards_descriptor_;
}

const Cards& Cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

Cards* Cards::default_instance_ = NULL;

Cards* Cards::New() const {
  return new Cards;
}

void Cards::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_m_vuserusn()) {
      if (m_vuserusn_ != NULL) m_vuserusn_->::Game_Poker::VecUSN::Clear();
    }
  }
  m_vtcards_.Clear();
  m_lresultidx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 m_vtCards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_m_vtcards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtcards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_m_vtCards;
        if (input->ExpectTag(16)) goto parse_m_lResultIdx;
        break;
      }
      
      // repeated int32 m_lResultIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_lresultidx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_lresultidx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lResultIdx;
        if (input->ExpectTag(26)) goto parse_m_vUserUSN;
        break;
      }
      
      // required .Game_Poker.VecUSN m_vUserUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vUserUSN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_vuserusn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 m_vtCards = 1;
  for (int i = 0; i < this->m_vtcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->m_vtcards(i), output);
  }
  
  // repeated int32 m_lResultIdx = 2;
  for (int i = 0; i < this->m_lresultidx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_lresultidx(i), output);
  }
  
  // required .Game_Poker.VecUSN m_vUserUSN = 3;
  if (has_m_vuserusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_vuserusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 m_vtCards = 1;
  for (int i = 0; i < this->m_vtcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->m_vtcards(i), target);
  }
  
  // repeated int32 m_lResultIdx = 2;
  for (int i = 0; i < this->m_lresultidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_lresultidx(i), target);
  }
  
  // required .Game_Poker.VecUSN m_vUserUSN = 3;
  if (has_m_vuserusn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_vuserusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .Game_Poker.VecUSN m_vUserUSN = 3;
    if (has_m_vuserusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_vuserusn());
    }
    
  }
  // repeated int32 m_vtCards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtcards(i));
    }
    total_size += 1 * this->m_vtcards_size() + data_size;
  }
  
  // repeated int32 m_lResultIdx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_lresultidx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_lresultidx(i));
    }
    total_size += 1 * this->m_lresultidx_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cards::MergeFrom(const Cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcards_.MergeFrom(from.m_vtcards_);
  m_lresultidx_.MergeFrom(from.m_lresultidx_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_m_vuserusn()) {
      mutable_m_vuserusn()->::Game_Poker::VecUSN::MergeFrom(from.m_vuserusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cards::CopyFrom(const Cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_m_vuserusn()) {
    if (!this->m_vuserusn().IsInitialized()) return false;
  }
  return true;
}

void Cards::Swap(Cards* other) {
  if (other != this) {
    m_vtcards_.Swap(&other->m_vtcards_);
    m_lresultidx_.Swap(&other->m_lresultidx_);
    std::swap(m_vuserusn_, other->m_vuserusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cards_descriptor_;
  metadata.reflection = Cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Money::kMLlCMoneyFieldNumber;
const int Money::kMLlCallMoneyFieldNumber;
const int Money::kMLlSideMoneyFieldNumber;
const int Money::kMLlCallHabMoneyFieldNumber;
const int Money::kMLlTakeMoneyFieldNumber;
const int Money::kMLlJackpotMoneyFieldNumber;
const int Money::kMLBetStateFieldNumber;
const int Money::kMLBetReceiveFieldNumber;
const int Money::kMLBetCountFieldNumber;
const int Money::kMLResultIdxFieldNumber;
const int Money::kMSMoneyMsgFieldNumber;
#endif  // !_MSC_VER

Money::Money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Money::InitAsDefaultInstance() {
}

Money::Money(const Money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Money::SharedCtor() {
  _cached_size_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  m_lbetstate_ = 0;
  m_lbetreceive_ = 0;
  m_lbetcount_ = 0;
  m_lresultidx_ = 0;
  m_smoneymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Money::~Money() {
  SharedDtor();
}

void Money::SharedDtor() {
  if (m_smoneymsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smoneymsg_;
  }
  if (this != default_instance_) {
  }
}

void Money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Money_descriptor_;
}

const Money& Money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

Money* Money::default_instance_ = NULL;

Money* Money::New() const {
  return new Money;
}

void Money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llsidemoney_ = GOOGLE_LONGLONG(0);
    m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
    m_lltakemoney_ = GOOGLE_LONGLONG(0);
    m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
    m_lbetstate_ = 0;
    m_lbetreceive_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lbetcount_ = 0;
    m_lresultidx_ = 0;
    if (has_m_smoneymsg()) {
      if (m_smoneymsg_ != &::google::protobuf::internal::kEmptyString) {
        m_smoneymsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llCMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llCallMoney;
        break;
      }
      
      // required sint64 m_llCallMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llSideMoney;
        break;
      }
      
      // required sint64 m_llSideMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSideMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsidemoney_)));
          set_has_m_llsidemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCallHabMoney;
        break;
      }
      
      // required sint64 m_llCallHabMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallHabMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallhabmoney_)));
          set_has_m_llcallhabmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llTakeMoney;
        break;
      }
      
      // required sint64 m_llTakeMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llTakeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lltakemoney_)));
          set_has_m_lltakemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llJackpotMoney;
        break;
      }
      
      // required sint64 m_llJackpotMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpotMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpotmoney_)));
          set_has_m_lljackpotmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lBetState;
        break;
      }
      
      // required sint32 m_lBetState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetstate_)));
          set_has_m_lbetstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lBetReceive;
        break;
      }
      
      // required sint32 m_lBetReceive = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetReceive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetreceive_)));
          set_has_m_lbetreceive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lBetCount;
        break;
      }
      
      // required sint32 m_lBetCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetcount_)));
          set_has_m_lbetcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lResultIdx;
        break;
      }
      
      // required sint32 m_lResultIdx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lresultidx_)));
          set_has_m_lresultidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_sMoneyMsg;
        break;
      }
      
      // required string m_sMoneyMsg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMoneyMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smoneymsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_smoneymsg().data(), this->m_smoneymsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llCMoney = 1;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llCallMoney = 2;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llcallmoney(), output);
  }
  
  // required sint64 m_llSideMoney = 3;
  if (has_m_llsidemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llsidemoney(), output);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcallhabmoney(), output);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lltakemoney(), output);
  }
  
  // required sint64 m_llJackpotMoney = 6;
  if (has_m_lljackpotmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_lljackpotmoney(), output);
  }
  
  // required sint32 m_lBetState = 7;
  if (has_m_lbetstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lbetstate(), output);
  }
  
  // required sint32 m_lBetReceive = 8;
  if (has_m_lbetreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->m_lbetreceive(), output);
  }
  
  // required sint32 m_lBetCount = 9;
  if (has_m_lbetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->m_lbetcount(), output);
  }
  
  // required sint32 m_lResultIdx = 10;
  if (has_m_lresultidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->m_lresultidx(), output);
  }
  
  // required string m_sMoneyMsg = 11;
  if (has_m_smoneymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smoneymsg().data(), this->m_smoneymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_smoneymsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llCMoney = 1;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llcmoney(), target);
  }
  
  // required sint64 m_llCallMoney = 2;
  if (has_m_llcallmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_llcallmoney(), target);
  }
  
  // required sint64 m_llSideMoney = 3;
  if (has_m_llsidemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llsidemoney(), target);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llcallhabmoney(), target);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_lltakemoney(), target);
  }
  
  // required sint64 m_llJackpotMoney = 6;
  if (has_m_lljackpotmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->m_lljackpotmoney(), target);
  }
  
  // required sint32 m_lBetState = 7;
  if (has_m_lbetstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->m_lbetstate(), target);
  }
  
  // required sint32 m_lBetReceive = 8;
  if (has_m_lbetreceive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->m_lbetreceive(), target);
  }
  
  // required sint32 m_lBetCount = 9;
  if (has_m_lbetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->m_lbetcount(), target);
  }
  
  // required sint32 m_lResultIdx = 10;
  if (has_m_lresultidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->m_lresultidx(), target);
  }
  
  // required string m_sMoneyMsg = 11;
  if (has_m_smoneymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smoneymsg().data(), this->m_smoneymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_smoneymsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Money::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llCMoney = 1;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llCallMoney = 2;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallmoney());
    }
    
    // required sint64 m_llSideMoney = 3;
    if (has_m_llsidemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsidemoney());
    }
    
    // required sint64 m_llCallHabMoney = 4;
    if (has_m_llcallhabmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallhabmoney());
    }
    
    // required sint64 m_llTakeMoney = 5;
    if (has_m_lltakemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lltakemoney());
    }
    
    // required sint64 m_llJackpotMoney = 6;
    if (has_m_lljackpotmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpotmoney());
    }
    
    // required sint32 m_lBetState = 7;
    if (has_m_lbetstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetstate());
    }
    
    // required sint32 m_lBetReceive = 8;
    if (has_m_lbetreceive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetreceive());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint32 m_lBetCount = 9;
    if (has_m_lbetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetcount());
    }
    
    // required sint32 m_lResultIdx = 10;
    if (has_m_lresultidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lresultidx());
    }
    
    // required string m_sMoneyMsg = 11;
    if (has_m_smoneymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smoneymsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Money::MergeFrom(const Money& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llsidemoney()) {
      set_m_llsidemoney(from.m_llsidemoney());
    }
    if (from.has_m_llcallhabmoney()) {
      set_m_llcallhabmoney(from.m_llcallhabmoney());
    }
    if (from.has_m_lltakemoney()) {
      set_m_lltakemoney(from.m_lltakemoney());
    }
    if (from.has_m_lljackpotmoney()) {
      set_m_lljackpotmoney(from.m_lljackpotmoney());
    }
    if (from.has_m_lbetstate()) {
      set_m_lbetstate(from.m_lbetstate());
    }
    if (from.has_m_lbetreceive()) {
      set_m_lbetreceive(from.m_lbetreceive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lbetcount()) {
      set_m_lbetcount(from.m_lbetcount());
    }
    if (from.has_m_lresultidx()) {
      set_m_lresultidx(from.m_lresultidx());
    }
    if (from.has_m_smoneymsg()) {
      set_m_smoneymsg(from.m_smoneymsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money::CopyFrom(const Money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void Money::Swap(Money* other) {
  if (other != this) {
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llsidemoney_, other->m_llsidemoney_);
    std::swap(m_llcallhabmoney_, other->m_llcallhabmoney_);
    std::swap(m_lltakemoney_, other->m_lltakemoney_);
    std::swap(m_lljackpotmoney_, other->m_lljackpotmoney_);
    std::swap(m_lbetstate_, other->m_lbetstate_);
    std::swap(m_lbetreceive_, other->m_lbetreceive_);
    std::swap(m_lbetcount_, other->m_lbetcount_);
    std::swap(m_lresultidx_, other->m_lresultidx_);
    std::swap(m_smoneymsg_, other->m_smoneymsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Money_descriptor_;
  metadata.reflection = Money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMoney::kMLUSNFieldNumber;
const int UserMoney::kMLStateFieldNumber;
const int UserMoney::kMLlMoneyFieldNumber;
const int UserMoney::kMLlCallHabMoneyFieldNumber;
const int UserMoney::kMLlTakeMoneyFieldNumber;
const int UserMoney::kMLlDealMoneyFieldNumber;
const int UserMoney::kMSNickNameFieldNumber;
const int UserMoney::kMSDealerTaxFieldNumber;
#endif  // !_MSC_VER

UserMoney::UserMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMoney::InitAsDefaultInstance() {
}

UserMoney::UserMoney(const UserMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lstate_ = 0;
  m_llmoney_ = GOOGLE_LONGLONG(0);
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  m_lldealmoney_ = GOOGLE_LONGLONG(0);
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sdealertax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMoney::~UserMoney() {
  SharedDtor();
}

void UserMoney::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_sdealertax_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sdealertax_;
  }
  if (this != default_instance_) {
  }
}

void UserMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMoney_descriptor_;
}

const UserMoney& UserMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

UserMoney* UserMoney::default_instance_ = NULL;

UserMoney* UserMoney::New() const {
  return new UserMoney;
}

void UserMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lstate_ = 0;
    m_llmoney_ = GOOGLE_LONGLONG(0);
    m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
    m_lltakemoney_ = GOOGLE_LONGLONG(0);
    m_lldealmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_sdealertax()) {
      if (m_sdealertax_ != &::google::protobuf::internal::kEmptyString) {
        m_sdealertax_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llMoney;
        break;
      }
      
      // required sint64 m_llMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llmoney_)));
          set_has_m_llmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCallHabMoney;
        break;
      }
      
      // required sint64 m_llCallHabMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallHabMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallhabmoney_)));
          set_has_m_llcallhabmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llTakeMoney;
        break;
      }
      
      // required sint64 m_llTakeMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llTakeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lltakemoney_)));
          set_has_m_lltakemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llDealMoney;
        break;
      }
      
      // required sint64 m_llDealMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llDealMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lldealmoney_)));
          set_has_m_lldealmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_sDealerTax;
        break;
      }
      
      // required string m_sDealerTax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sDealerTax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sdealertax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sdealertax().data(), this->m_sdealertax().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lstate(), output);
  }
  
  // required sint64 m_llMoney = 3;
  if (has_m_llmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llmoney(), output);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcallhabmoney(), output);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lltakemoney(), output);
  }
  
  // required sint64 m_llDealMoney = 6;
  if (has_m_lldealmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_lldealmoney(), output);
  }
  
  // required string m_sNickName = 7;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_snickname(), output);
  }
  
  // required string m_sDealerTax = 8;
  if (has_m_sdealertax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sdealertax().data(), this->m_sdealertax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_sdealertax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lstate(), target);
  }
  
  // required sint64 m_llMoney = 3;
  if (has_m_llmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llmoney(), target);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llcallhabmoney(), target);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_lltakemoney(), target);
  }
  
  // required sint64 m_llDealMoney = 6;
  if (has_m_lldealmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->m_lldealmoney(), target);
  }
  
  // required string m_sNickName = 7;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_snickname(), target);
  }
  
  // required string m_sDealerTax = 8;
  if (has_m_sdealertax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sdealertax().data(), this->m_sdealertax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_sdealertax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lState = 2;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint64 m_llMoney = 3;
    if (has_m_llmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llmoney());
    }
    
    // required sint64 m_llCallHabMoney = 4;
    if (has_m_llcallhabmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallhabmoney());
    }
    
    // required sint64 m_llTakeMoney = 5;
    if (has_m_lltakemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lltakemoney());
    }
    
    // required sint64 m_llDealMoney = 6;
    if (has_m_lldealmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lldealmoney());
    }
    
    // required string m_sNickName = 7;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sDealerTax = 8;
    if (has_m_sdealertax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sdealertax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMoney::MergeFrom(const UserMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_llmoney()) {
      set_m_llmoney(from.m_llmoney());
    }
    if (from.has_m_llcallhabmoney()) {
      set_m_llcallhabmoney(from.m_llcallhabmoney());
    }
    if (from.has_m_lltakemoney()) {
      set_m_lltakemoney(from.m_lltakemoney());
    }
    if (from.has_m_lldealmoney()) {
      set_m_lldealmoney(from.m_lldealmoney());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_sdealertax()) {
      set_m_sdealertax(from.m_sdealertax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMoney::CopyFrom(const UserMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void UserMoney::Swap(UserMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_llmoney_, other->m_llmoney_);
    std::swap(m_llcallhabmoney_, other->m_llcallhabmoney_);
    std::swap(m_lltakemoney_, other->m_lltakemoney_);
    std::swap(m_lldealmoney_, other->m_lldealmoney_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_sdealertax_, other->m_sdealertax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMoney_descriptor_;
  metadata.reflection = UserMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWinLose::kMLWinFieldNumber;
const int CWinLose::kMLLoseFieldNumber;
const int CWinLose::kMLContinueFieldNumber;
#endif  // !_MSC_VER

CWinLose::CWinLose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWinLose::InitAsDefaultInstance() {
}

CWinLose::CWinLose(const CWinLose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWinLose::SharedCtor() {
  _cached_size_ = 0;
  m_lwin_ = 0;
  m_llose_ = 0;
  m_lcontinue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWinLose::~CWinLose() {
  SharedDtor();
}

void CWinLose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWinLose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWinLose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWinLose_descriptor_;
}

const CWinLose& CWinLose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

CWinLose* CWinLose::default_instance_ = NULL;

CWinLose* CWinLose::New() const {
  return new CWinLose;
}

void CWinLose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lwin_ = 0;
    m_llose_ = 0;
    m_lcontinue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWinLose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lWin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lwin_)));
          set_has_m_lwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lLose;
        break;
      }
      
      // required sint32 m_lLose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llose_)));
          set_has_m_llose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lContinue;
        break;
      }
      
      // required sint32 m_lContinue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lContinue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcontinue_)));
          set_has_m_lcontinue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWinLose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lWin = 1;
  if (has_m_lwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lwin(), output);
  }
  
  // required sint32 m_lLose = 2;
  if (has_m_llose()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_llose(), output);
  }
  
  // required sint32 m_lContinue = 3;
  if (has_m_lcontinue()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcontinue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWinLose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lWin = 1;
  if (has_m_lwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lwin(), target);
  }
  
  // required sint32 m_lLose = 2;
  if (has_m_llose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_llose(), target);
  }
  
  // required sint32 m_lContinue = 3;
  if (has_m_lcontinue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lcontinue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWinLose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lWin = 1;
    if (has_m_lwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lwin());
    }
    
    // required sint32 m_lLose = 2;
    if (has_m_llose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llose());
    }
    
    // required sint32 m_lContinue = 3;
    if (has_m_lcontinue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcontinue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWinLose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWinLose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWinLose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWinLose::MergeFrom(const CWinLose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lwin()) {
      set_m_lwin(from.m_lwin());
    }
    if (from.has_m_llose()) {
      set_m_llose(from.m_llose());
    }
    if (from.has_m_lcontinue()) {
      set_m_lcontinue(from.m_lcontinue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWinLose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWinLose::CopyFrom(const CWinLose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWinLose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CWinLose::Swap(CWinLose* other) {
  if (other != this) {
    std::swap(m_lwin_, other->m_lwin_);
    std::swap(m_llose_, other->m_llose_);
    std::swap(m_lcontinue_, other->m_lcontinue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWinLose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWinLose_descriptor_;
  metadata.reflection = CWinLose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kMLUSNFieldNumber;
const int UserInfo::kMNIndexFieldNumber;
const int UserInfo::kMSNickNameFieldNumber;
const int UserInfo::kMSIDFieldNumber;
const int UserInfo::kMLCLevelFieldNumber;
const int UserInfo::kMLSoundTypeFieldNumber;
const int UserInfo::kMSAvtFieldNumber;
const int UserInfo::kMLUserStateFieldNumber;
const int UserInfo::kMCWinLoseFieldNumber;
const int UserInfo::kMCWinLoseTodayFieldNumber;
const int UserInfo::kMCWinLoseRoomFieldNumber;
const int UserInfo::kMLlCMoneyFieldNumber;
const int UserInfo::kMLlFMoneyFieldNumber;
const int UserInfo::kMLExitFieldNumber;
const int UserInfo::kMNItemTypeFieldNumber;
const int UserInfo::kMLAckFieldNumber;
const int UserInfo::kMLJackpotFieldNumber;
const int UserInfo::kMLDieCardsDealtFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
  m_cwinlose_ = const_cast< ::Game_Poker::CWinLose*>(&::Game_Poker::CWinLose::default_instance());
  m_cwinlose_today_ = const_cast< ::Game_Poker::CWinLose*>(&::Game_Poker::CWinLose::default_instance());
  m_cwinlose_room_ = const_cast< ::Game_Poker::CWinLose*>(&::Game_Poker::CWinLose::default_instance());
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsoundtype_ = 0;
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_luserstate_ = 0;
  m_cwinlose_ = NULL;
  m_cwinlose_today_ = NULL;
  m_cwinlose_room_ = NULL;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llfmoney_ = GOOGLE_LONGLONG(0);
  m_lexit_ = 0;
  m_nitemtype_ = 0;
  m_lack_ = 0;
  m_ljackpot_ = 0;
  m_ldiecardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_sid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sid_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
    delete m_cwinlose_;
    delete m_cwinlose_today_;
    delete m_cwinlose_room_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_sid()) {
      if (m_sid_ != &::google::protobuf::internal::kEmptyString) {
        m_sid_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsoundtype_ = 0;
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_luserstate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_cwinlose()) {
      if (m_cwinlose_ != NULL) m_cwinlose_->::Game_Poker::CWinLose::Clear();
    }
    if (has_m_cwinlose_today()) {
      if (m_cwinlose_today_ != NULL) m_cwinlose_today_->::Game_Poker::CWinLose::Clear();
    }
    if (has_m_cwinlose_room()) {
      if (m_cwinlose_room_ != NULL) m_cwinlose_room_->::Game_Poker::CWinLose::Clear();
    }
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llfmoney_ = GOOGLE_LONGLONG(0);
    m_lexit_ = 0;
    m_nitemtype_ = 0;
    m_lack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_ljackpot_ = 0;
    m_ldiecardsdealt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required sint32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sID;
        break;
      }
      
      // required string m_sID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sid().data(), this->m_sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lCLevel;
        break;
      }
      
      // required sint32 m_lCLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_sAvt;
        break;
      }
      
      // required string m_sAvt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_savt().data(), this->m_savt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lUserState;
        break;
      }
      
      // required sint32 m_lUserState = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lUserState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_luserstate_)));
          set_has_m_luserstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_cWinLose;
        break;
      }
      
      // required .Game_Poker.CWinLose m_cWinLose = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_cWinLose_Today;
        break;
      }
      
      // required .Game_Poker.CWinLose m_cWinLose_Today = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose_Today:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose_today()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_cWinLose_Room;
        break;
      }
      
      // required .Game_Poker.CWinLose m_cWinLose_Room = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose_Room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_llFMoney;
        break;
      }
      
      // required sint64 m_llFMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llFMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llfmoney_)));
          set_has_m_llfmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_lExit;
        break;
      }
      
      // required sint32 m_lExit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_nItemType;
        break;
      }
      
      // required sint32 m_nItemType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nItemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_nitemtype_)));
          set_has_m_nitemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_lAck;
        break;
      }
      
      // required sint32 m_lAck = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lack_)));
          set_has_m_lack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_lJackpot;
        break;
      }
      
      // required sint32 m_lJackpot = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJackpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ljackpot_)));
          set_has_m_ljackpot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_lDieCardsDealt;
        break;
      }
      
      // required sint32 m_lDieCardsDealt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lDieCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ldiecardsdealt_)));
          set_has_m_ldiecardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_nindex(), output);
  }
  
  // required string m_sNickName = 3;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_snickname(), output);
  }
  
  // required string m_sID = 4;
  if (has_m_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sid().data(), this->m_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_sid(), output);
  }
  
  // required sint32 m_lCLevel = 5;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lclevel(), output);
  }
  
  // required sint32 m_lSoundType = 6;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lsoundtype(), output);
  }
  
  // required string m_sAvt = 7;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_savt(), output);
  }
  
  // required sint32 m_lUserState = 8;
  if (has_m_luserstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->m_luserstate(), output);
  }
  
  // required .Game_Poker.CWinLose m_cWinLose = 9;
  if (has_m_cwinlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_cwinlose(), output);
  }
  
  // required .Game_Poker.CWinLose m_cWinLose_Today = 10;
  if (has_m_cwinlose_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_cwinlose_today(), output);
  }
  
  // required .Game_Poker.CWinLose m_cWinLose_Room = 11;
  if (has_m_cwinlose_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_cwinlose_room(), output);
  }
  
  // required sint64 m_llCMoney = 12;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(12, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llFMoney = 13;
  if (has_m_llfmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->m_llfmoney(), output);
  }
  
  // required sint32 m_lExit = 14;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->m_lexit(), output);
  }
  
  // required sint32 m_nItemType = 15;
  if (has_m_nitemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->m_nitemtype(), output);
  }
  
  // required sint32 m_lAck = 16;
  if (has_m_lack()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->m_lack(), output);
  }
  
  // required sint32 m_lJackpot = 17;
  if (has_m_ljackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->m_ljackpot(), output);
  }
  
  // required sint32 m_lDieCardsDealt = 18;
  if (has_m_ldiecardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->m_ldiecardsdealt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required string m_sNickName = 3;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_snickname(), target);
  }
  
  // required string m_sID = 4;
  if (has_m_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sid().data(), this->m_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_sid(), target);
  }
  
  // required sint32 m_lCLevel = 5;
  if (has_m_lclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->m_lclevel(), target);
  }
  
  // required sint32 m_lSoundType = 6;
  if (has_m_lsoundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_lsoundtype(), target);
  }
  
  // required string m_sAvt = 7;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_savt(), target);
  }
  
  // required sint32 m_lUserState = 8;
  if (has_m_luserstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->m_luserstate(), target);
  }
  
  // required .Game_Poker.CWinLose m_cWinLose = 9;
  if (has_m_cwinlose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_cwinlose(), target);
  }
  
  // required .Game_Poker.CWinLose m_cWinLose_Today = 10;
  if (has_m_cwinlose_today()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_cwinlose_today(), target);
  }
  
  // required .Game_Poker.CWinLose m_cWinLose_Room = 11;
  if (has_m_cwinlose_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_cwinlose_room(), target);
  }
  
  // required sint64 m_llCMoney = 12;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(12, this->m_llcmoney(), target);
  }
  
  // required sint64 m_llFMoney = 13;
  if (has_m_llfmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(13, this->m_llfmoney(), target);
  }
  
  // required sint32 m_lExit = 14;
  if (has_m_lexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->m_lexit(), target);
  }
  
  // required sint32 m_nItemType = 15;
  if (has_m_nitemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->m_nitemtype(), target);
  }
  
  // required sint32 m_lAck = 16;
  if (has_m_lack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->m_lack(), target);
  }
  
  // required sint32 m_lJackpot = 17;
  if (has_m_ljackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->m_ljackpot(), target);
  }
  
  // required sint32 m_lDieCardsDealt = 18;
  if (has_m_ldiecardsdealt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->m_ldiecardsdealt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_nindex());
    }
    
    // required string m_sNickName = 3;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sID = 4;
    if (has_m_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sid());
    }
    
    // required sint32 m_lCLevel = 5;
    if (has_m_lclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lclevel());
    }
    
    // required sint32 m_lSoundType = 6;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
    // required string m_sAvt = 7;
    if (has_m_savt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required sint32 m_lUserState = 8;
    if (has_m_luserstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_luserstate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Game_Poker.CWinLose m_cWinLose = 9;
    if (has_m_cwinlose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose());
    }
    
    // required .Game_Poker.CWinLose m_cWinLose_Today = 10;
    if (has_m_cwinlose_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose_today());
    }
    
    // required .Game_Poker.CWinLose m_cWinLose_Room = 11;
    if (has_m_cwinlose_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose_room());
    }
    
    // required sint64 m_llCMoney = 12;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llFMoney = 13;
    if (has_m_llfmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llfmoney());
    }
    
    // required sint32 m_lExit = 14;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_nItemType = 15;
    if (has_m_nitemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_nitemtype());
    }
    
    // required sint32 m_lAck = 16;
    if (has_m_lack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lack());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required sint32 m_lJackpot = 17;
    if (has_m_ljackpot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ljackpot());
    }
    
    // required sint32 m_lDieCardsDealt = 18;
    if (has_m_ldiecardsdealt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ldiecardsdealt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_sid()) {
      set_m_sid(from.m_sid());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_luserstate()) {
      set_m_luserstate(from.m_luserstate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_cwinlose()) {
      mutable_m_cwinlose()->::Game_Poker::CWinLose::MergeFrom(from.m_cwinlose());
    }
    if (from.has_m_cwinlose_today()) {
      mutable_m_cwinlose_today()->::Game_Poker::CWinLose::MergeFrom(from.m_cwinlose_today());
    }
    if (from.has_m_cwinlose_room()) {
      mutable_m_cwinlose_room()->::Game_Poker::CWinLose::MergeFrom(from.m_cwinlose_room());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llfmoney()) {
      set_m_llfmoney(from.m_llfmoney());
    }
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_nitemtype()) {
      set_m_nitemtype(from.m_nitemtype());
    }
    if (from.has_m_lack()) {
      set_m_lack(from.m_lack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_ljackpot()) {
      set_m_ljackpot(from.m_ljackpot());
    }
    if (from.has_m_ldiecardsdealt()) {
      set_m_ldiecardsdealt(from.m_ldiecardsdealt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  
  if (has_m_cwinlose()) {
    if (!this->m_cwinlose().IsInitialized()) return false;
  }
  if (has_m_cwinlose_today()) {
    if (!this->m_cwinlose_today().IsInitialized()) return false;
  }
  if (has_m_cwinlose_room()) {
    if (!this->m_cwinlose_room().IsInitialized()) return false;
  }
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_sid_, other->m_sid_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_luserstate_, other->m_luserstate_);
    std::swap(m_cwinlose_, other->m_cwinlose_);
    std::swap(m_cwinlose_today_, other->m_cwinlose_today_);
    std::swap(m_cwinlose_room_, other->m_cwinlose_room_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llfmoney_, other->m_llfmoney_);
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_nitemtype_, other->m_nitemtype_);
    std::swap(m_lack_, other->m_lack_);
    std::swap(m_ljackpot_, other->m_ljackpot_);
    std::swap(m_ldiecardsdealt_, other->m_ldiecardsdealt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneCard::kMNIndexFieldNumber;
const int OneCard::kMLCardIndexFieldNumber;
#endif  // !_MSC_VER

OneCard::OneCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneCard::InitAsDefaultInstance() {
}

OneCard::OneCard(const OneCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneCard::SharedCtor() {
  _cached_size_ = 0;
  m_nindex_ = 0;
  m_lcardindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneCard::~OneCard() {
  SharedDtor();
}

void OneCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneCard_descriptor_;
}

const OneCard& OneCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

OneCard* OneCard::default_instance_ = NULL;

OneCard* OneCard::New() const {
  return new OneCard;
}

void OneCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nindex_ = 0;
    m_lcardindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardIndex;
        break;
      }
      
      // required int32 m_lCardIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lcardindex_)));
          set_has_m_lcardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nindex(), output);
  }
  
  // required int32 m_lCardIndex = 2;
  if (has_m_lcardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lcardindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nindex(), target);
  }
  
  // required int32 m_lCardIndex = 2;
  if (has_m_lcardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lcardindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nIndex = 1;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required int32 m_lCardIndex = 2;
    if (has_m_lcardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lcardindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneCard::MergeFrom(const OneCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lcardindex()) {
      set_m_lcardindex(from.m_lcardindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneCard::CopyFrom(const OneCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OneCard::Swap(OneCard* other) {
  if (other != this) {
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lcardindex_, other->m_lcardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneCard_descriptor_;
  metadata.reflection = OneCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VecMoney::kVecMoneyFieldNumber;
#endif  // !_MSC_VER

VecMoney::VecMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VecMoney::InitAsDefaultInstance() {
}

VecMoney::VecMoney(const VecMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VecMoney::SharedCtor() {
  _cached_size_ = 0;
  vecmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VecMoney::~VecMoney() {
  SharedDtor();
}

void VecMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VecMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VecMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VecMoney_descriptor_;
}

const VecMoney& VecMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

VecMoney* VecMoney::default_instance_ = NULL;

VecMoney* VecMoney::New() const {
  return new VecMoney;
}

void VecMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vecmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VecMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 VecMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &vecmoney_)));
          set_has_vecmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VecMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 VecMoney = 1;
  if (has_vecmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->vecmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VecMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 VecMoney = 1;
  if (has_vecmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->vecmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VecMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 VecMoney = 1;
    if (has_vecmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->vecmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VecMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VecMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VecMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VecMoney::MergeFrom(const VecMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vecmoney()) {
      set_vecmoney(from.vecmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VecMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VecMoney::CopyFrom(const VecMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VecMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void VecMoney::Swap(VecMoney* other) {
  if (other != this) {
    std::swap(vecmoney_, other->vecmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VecMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VecMoney_descriptor_;
  metadata.reflection = VecMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WinLoseInfo::WinLoseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WinLoseInfo::InitAsDefaultInstance() {
}

WinLoseInfo::WinLoseInfo(const WinLoseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WinLoseInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WinLoseInfo::~WinLoseInfo() {
  SharedDtor();
}

void WinLoseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WinLoseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinLoseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WinLoseInfo_descriptor_;
}

const WinLoseInfo& WinLoseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

WinLoseInfo* WinLoseInfo::default_instance_ = NULL;

WinLoseInfo* WinLoseInfo::New() const {
  return new WinLoseInfo;
}

void WinLoseInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WinLoseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WinLoseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WinLoseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WinLoseInfo::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinLoseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WinLoseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WinLoseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WinLoseInfo::MergeFrom(const WinLoseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WinLoseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinLoseInfo::CopyFrom(const WinLoseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinLoseInfo::IsInitialized() const {
  
  return true;
}

void WinLoseInfo::Swap(WinLoseInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WinLoseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WinLoseInfo_descriptor_;
  metadata.reflection = WinLoseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VecUSN::kUSNFieldNumber;
#endif  // !_MSC_VER

VecUSN::VecUSN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VecUSN::InitAsDefaultInstance() {
}

VecUSN::VecUSN(const VecUSN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VecUSN::SharedCtor() {
  _cached_size_ = 0;
  usn_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VecUSN::~VecUSN() {
  SharedDtor();
}

void VecUSN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VecUSN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VecUSN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VecUSN_descriptor_;
}

const VecUSN& VecUSN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

VecUSN* VecUSN::default_instance_ = NULL;

VecUSN* VecUSN::New() const {
  return new VecUSN;
}

void VecUSN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usn_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VecUSN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 USN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usn_)));
          set_has_usn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VecUSN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 USN = 1;
  if (has_usn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->usn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VecUSN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 USN = 1;
  if (has_usn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->usn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VecUSN::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 USN = 1;
    if (has_usn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VecUSN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VecUSN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VecUSN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VecUSN::MergeFrom(const VecUSN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usn()) {
      set_usn(from.usn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VecUSN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VecUSN::CopyFrom(const VecUSN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VecUSN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void VecUSN::Swap(VecUSN* other) {
  if (other != this) {
    std::swap(usn_, other->usn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VecUSN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VecUSN_descriptor_;
  metadata.reflection = VecUSN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WAITINGUSERDATA::WAITINGUSERDATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WAITINGUSERDATA::InitAsDefaultInstance() {
}

WAITINGUSERDATA::WAITINGUSERDATA(const WAITINGUSERDATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WAITINGUSERDATA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WAITINGUSERDATA::~WAITINGUSERDATA() {
  SharedDtor();
}

void WAITINGUSERDATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WAITINGUSERDATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WAITINGUSERDATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WAITINGUSERDATA_descriptor_;
}

const WAITINGUSERDATA& WAITINGUSERDATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

WAITINGUSERDATA* WAITINGUSERDATA::default_instance_ = NULL;

WAITINGUSERDATA* WAITINGUSERDATA::New() const {
  return new WAITINGUSERDATA;
}

void WAITINGUSERDATA::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WAITINGUSERDATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WAITINGUSERDATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WAITINGUSERDATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WAITINGUSERDATA::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WAITINGUSERDATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WAITINGUSERDATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WAITINGUSERDATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WAITINGUSERDATA::MergeFrom(const WAITINGUSERDATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WAITINGUSERDATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WAITINGUSERDATA::CopyFrom(const WAITINGUSERDATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WAITINGUSERDATA::IsInitialized() const {
  
  return true;
}

void WAITINGUSERDATA::Swap(WAITINGUSERDATA* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WAITINGUSERDATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WAITINGUSERDATA_descriptor_;
  metadata.reflection = WAITINGUSERDATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RCUserData::RCUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RCUserData::InitAsDefaultInstance() {
}

RCUserData::RCUserData(const RCUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RCUserData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RCUserData::~RCUserData() {
  SharedDtor();
}

void RCUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RCUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RCUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCUserData_descriptor_;
}

const RCUserData& RCUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

RCUserData* RCUserData::default_instance_ = NULL;

RCUserData* RCUserData::New() const {
  return new RCUserData;
}

void RCUserData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RCUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RCUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RCUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RCUserData::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RCUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RCUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RCUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RCUserData::MergeFrom(const RCUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RCUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RCUserData::CopyFrom(const RCUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCUserData::IsInitialized() const {
  
  return true;
}

void RCUserData::Swap(RCUserData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RCUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RCUserData_descriptor_;
  metadata.reflection = RCUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Option::kMSRoomTitleFieldNumber;
const int Option::kMSPasswordFieldNumber;
const int Option::kMLMaxUserCntFieldNumber;
const int Option::kMLMaxPlayerUserCntFieldNumber;
const int Option::kMLMaxPlayerCardCntFieldNumber;
const int Option::kMLChoiceModeFieldNumber;
const int Option::kMLRoomTypeFieldNumber;
const int Option::kMLBetRuleFieldNumber;
const int Option::kMLBetTypeFieldNumber;
const int Option::kMLAddRuleFieldNumber;
const int Option::kMLRematchJoinFieldNumber;
const int Option::kMLLimitMoneyFieldNumber;
const int Option::kMLlGameAnteMoneyFieldNumber;
const int Option::kMBEchoFieldNumber;
const int Option::kMLMakeUSNFieldNumber;
const int Option::kMLCategoryFieldNumber;
const int Option::kMLChannelIDFieldNumber;
const int Option::kMLlAnteMoneyFieldNumber;
#endif  // !_MSC_VER

Option::Option()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Option::InitAsDefaultInstance() {
}

Option::Option(const Option& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Option::SharedCtor() {
  _cached_size_ = 0;
  m_sroomtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lmaxusercnt_ = 0;
  m_lmaxplayerusercnt_ = 0;
  m_lmaxplayercardcnt_ = 0;
  m_lchoicemode_ = 0;
  m_lroomtype_ = 0;
  m_lbetrule_ = 0;
  m_lbettype_ = 0;
  m_laddrule_ = 0;
  m_lrematchjoin_ = 0;
  m_llimitmoney_ = 0;
  m_llgameantemoney_ = GOOGLE_LONGLONG(0);
  m_becho_ = 0;
  m_lmakeusn_ = 0;
  m_lcategory_ = 0;
  m_lchannelid_ = 0;
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Option::~Option() {
  SharedDtor();
}

void Option::SharedDtor() {
  if (m_sroomtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sroomtitle_;
  }
  if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
    delete m_spassword_;
  }
  if (this != default_instance_) {
  }
}

void Option::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Option::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Option_descriptor_;
}

const Option& Option::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

Option* Option::default_instance_ = NULL;

Option* Option::New() const {
  return new Option;
}

void Option::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_sroomtitle()) {
      if (m_sroomtitle_ != &::google::protobuf::internal::kEmptyString) {
        m_sroomtitle_->clear();
      }
    }
    if (has_m_spassword()) {
      if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
        m_spassword_->clear();
      }
    }
    m_lmaxusercnt_ = 0;
    m_lmaxplayerusercnt_ = 0;
    m_lmaxplayercardcnt_ = 0;
    m_lchoicemode_ = 0;
    m_lroomtype_ = 0;
    m_lbetrule_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lbettype_ = 0;
    m_laddrule_ = 0;
    m_lrematchjoin_ = 0;
    m_llimitmoney_ = 0;
    m_llgameantemoney_ = GOOGLE_LONGLONG(0);
    m_becho_ = 0;
    m_lmakeusn_ = 0;
    m_lcategory_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_lchannelid_ = 0;
    m_llantemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Option::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sRoomTitle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sroomtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sroomtitle().data(), this->m_sroomtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sPassword;
        break;
      }
      
      // required string m_sPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_spassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_spassword().data(), this->m_spassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lMaxUserCnt;
        break;
      }
      
      // required int32 m_lMaxUserCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxUserCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxusercnt_)));
          set_has_m_lmaxusercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lMaxPlayerUserCnt;
        break;
      }
      
      // required int32 m_lMaxPlayerUserCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxPlayerUserCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxplayerusercnt_)));
          set_has_m_lmaxplayerusercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lMaxPlayerCardCnt;
        break;
      }
      
      // required int32 m_lMaxPlayerCardCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxPlayerCardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxplayercardcnt_)));
          set_has_m_lmaxplayercardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lChoiceMode;
        break;
      }
      
      // required int32 m_lChoiceMode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChoiceMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchoicemode_)));
          set_has_m_lchoicemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lRoomType;
        break;
      }
      
      // required int32 m_lRoomType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lroomtype_)));
          set_has_m_lroomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lBetRule;
        break;
      }
      
      // required int32 m_lBetRule = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbetrule_)));
          set_has_m_lbetrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lBetType;
        break;
      }
      
      // required int32 m_lBetType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lAddRule;
        break;
      }
      
      // required int32 m_lAddRule = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAddRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_laddrule_)));
          set_has_m_laddrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lRematchJoin;
        break;
      }
      
      // required int32 m_lRematchJoin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRematchJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lrematchjoin_)));
          set_has_m_lrematchjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_lLimitMoney;
        break;
      }
      
      // required int32 m_lLimitMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLimitMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_llimitmoney_)));
          set_has_m_llimitmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_llGameAnteMoney;
        break;
      }
      
      // required sint64 m_llGameAnteMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGameAnteMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llgameantemoney_)));
          set_has_m_llgameantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_bEcho;
        break;
      }
      
      // required int32 m_bEcho = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bEcho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_becho_)));
          set_has_m_becho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_lMakeUSN;
        break;
      }
      
      // required int32 m_lMakeUSN = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMakeUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmakeusn_)));
          set_has_m_lmakeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_lCategory;
        break;
      }
      
      // required int32 m_lCategory = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCategory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lcategory_)));
          set_has_m_lcategory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_lChannelID;
        break;
      }
      
      // required int32 m_lChannelID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChannelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchannelid_)));
          set_has_m_lchannelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_llAnteMoney;
        break;
      }
      
      // required sint64 m_llAnteMoney = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llAnteMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llantemoney_)));
          set_has_m_llantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Option::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sRoomTitle = 1;
  if (has_m_sroomtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sroomtitle().data(), this->m_sroomtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_sroomtitle(), output);
  }
  
  // required string m_sPassword = 2;
  if (has_m_spassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_spassword().data(), this->m_spassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_spassword(), output);
  }
  
  // required int32 m_lMaxUserCnt = 3;
  if (has_m_lmaxusercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lmaxusercnt(), output);
  }
  
  // required int32 m_lMaxPlayerUserCnt = 4;
  if (has_m_lmaxplayerusercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lmaxplayerusercnt(), output);
  }
  
  // required int32 m_lMaxPlayerCardCnt = 5;
  if (has_m_lmaxplayercardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_lmaxplayercardcnt(), output);
  }
  
  // required int32 m_lChoiceMode = 6;
  if (has_m_lchoicemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lchoicemode(), output);
  }
  
  // required int32 m_lRoomType = 7;
  if (has_m_lroomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lroomtype(), output);
  }
  
  // required int32 m_lBetRule = 8;
  if (has_m_lbetrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_lbetrule(), output);
  }
  
  // required int32 m_lBetType = 9;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_lbettype(), output);
  }
  
  // required int32 m_lAddRule = 10;
  if (has_m_laddrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_laddrule(), output);
  }
  
  // required int32 m_lRematchJoin = 11;
  if (has_m_lrematchjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_lrematchjoin(), output);
  }
  
  // required int32 m_lLimitMoney = 12;
  if (has_m_llimitmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_llimitmoney(), output);
  }
  
  // required sint64 m_llGameAnteMoney = 13;
  if (has_m_llgameantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->m_llgameantemoney(), output);
  }
  
  // required int32 m_bEcho = 14;
  if (has_m_becho()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_becho(), output);
  }
  
  // required int32 m_lMakeUSN = 15;
  if (has_m_lmakeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_lmakeusn(), output);
  }
  
  // required int32 m_lCategory = 16;
  if (has_m_lcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_lcategory(), output);
  }
  
  // required int32 m_lChannelID = 17;
  if (has_m_lchannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_lchannelid(), output);
  }
  
  // required sint64 m_llAnteMoney = 18;
  if (has_m_llantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(18, this->m_llantemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Option::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_sRoomTitle = 1;
  if (has_m_sroomtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sroomtitle().data(), this->m_sroomtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_sroomtitle(), target);
  }
  
  // required string m_sPassword = 2;
  if (has_m_spassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_spassword().data(), this->m_spassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_spassword(), target);
  }
  
  // required int32 m_lMaxUserCnt = 3;
  if (has_m_lmaxusercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lmaxusercnt(), target);
  }
  
  // required int32 m_lMaxPlayerUserCnt = 4;
  if (has_m_lmaxplayerusercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lmaxplayerusercnt(), target);
  }
  
  // required int32 m_lMaxPlayerCardCnt = 5;
  if (has_m_lmaxplayercardcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_lmaxplayercardcnt(), target);
  }
  
  // required int32 m_lChoiceMode = 6;
  if (has_m_lchoicemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lchoicemode(), target);
  }
  
  // required int32 m_lRoomType = 7;
  if (has_m_lroomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_lroomtype(), target);
  }
  
  // required int32 m_lBetRule = 8;
  if (has_m_lbetrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_lbetrule(), target);
  }
  
  // required int32 m_lBetType = 9;
  if (has_m_lbettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_lbettype(), target);
  }
  
  // required int32 m_lAddRule = 10;
  if (has_m_laddrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_laddrule(), target);
  }
  
  // required int32 m_lRematchJoin = 11;
  if (has_m_lrematchjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_lrematchjoin(), target);
  }
  
  // required int32 m_lLimitMoney = 12;
  if (has_m_llimitmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_llimitmoney(), target);
  }
  
  // required sint64 m_llGameAnteMoney = 13;
  if (has_m_llgameantemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(13, this->m_llgameantemoney(), target);
  }
  
  // required int32 m_bEcho = 14;
  if (has_m_becho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_becho(), target);
  }
  
  // required int32 m_lMakeUSN = 15;
  if (has_m_lmakeusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_lmakeusn(), target);
  }
  
  // required int32 m_lCategory = 16;
  if (has_m_lcategory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_lcategory(), target);
  }
  
  // required int32 m_lChannelID = 17;
  if (has_m_lchannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_lchannelid(), target);
  }
  
  // required sint64 m_llAnteMoney = 18;
  if (has_m_llantemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(18, this->m_llantemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Option::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sRoomTitle = 1;
    if (has_m_sroomtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sroomtitle());
    }
    
    // required string m_sPassword = 2;
    if (has_m_spassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_spassword());
    }
    
    // required int32 m_lMaxUserCnt = 3;
    if (has_m_lmaxusercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxusercnt());
    }
    
    // required int32 m_lMaxPlayerUserCnt = 4;
    if (has_m_lmaxplayerusercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxplayerusercnt());
    }
    
    // required int32 m_lMaxPlayerCardCnt = 5;
    if (has_m_lmaxplayercardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxplayercardcnt());
    }
    
    // required int32 m_lChoiceMode = 6;
    if (has_m_lchoicemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchoicemode());
    }
    
    // required int32 m_lRoomType = 7;
    if (has_m_lroomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lroomtype());
    }
    
    // required int32 m_lBetRule = 8;
    if (has_m_lbetrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbetrule());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_lBetType = 9;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbettype());
    }
    
    // required int32 m_lAddRule = 10;
    if (has_m_laddrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_laddrule());
    }
    
    // required int32 m_lRematchJoin = 11;
    if (has_m_lrematchjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lrematchjoin());
    }
    
    // required int32 m_lLimitMoney = 12;
    if (has_m_llimitmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_llimitmoney());
    }
    
    // required sint64 m_llGameAnteMoney = 13;
    if (has_m_llgameantemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llgameantemoney());
    }
    
    // required int32 m_bEcho = 14;
    if (has_m_becho()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_becho());
    }
    
    // required int32 m_lMakeUSN = 15;
    if (has_m_lmakeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmakeusn());
    }
    
    // required int32 m_lCategory = 16;
    if (has_m_lcategory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lcategory());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 m_lChannelID = 17;
    if (has_m_lchannelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchannelid());
    }
    
    // required sint64 m_llAnteMoney = 18;
    if (has_m_llantemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llantemoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Option::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Option* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Option*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Option::MergeFrom(const Option& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_sroomtitle()) {
      set_m_sroomtitle(from.m_sroomtitle());
    }
    if (from.has_m_spassword()) {
      set_m_spassword(from.m_spassword());
    }
    if (from.has_m_lmaxusercnt()) {
      set_m_lmaxusercnt(from.m_lmaxusercnt());
    }
    if (from.has_m_lmaxplayerusercnt()) {
      set_m_lmaxplayerusercnt(from.m_lmaxplayerusercnt());
    }
    if (from.has_m_lmaxplayercardcnt()) {
      set_m_lmaxplayercardcnt(from.m_lmaxplayercardcnt());
    }
    if (from.has_m_lchoicemode()) {
      set_m_lchoicemode(from.m_lchoicemode());
    }
    if (from.has_m_lroomtype()) {
      set_m_lroomtype(from.m_lroomtype());
    }
    if (from.has_m_lbetrule()) {
      set_m_lbetrule(from.m_lbetrule());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_laddrule()) {
      set_m_laddrule(from.m_laddrule());
    }
    if (from.has_m_lrematchjoin()) {
      set_m_lrematchjoin(from.m_lrematchjoin());
    }
    if (from.has_m_llimitmoney()) {
      set_m_llimitmoney(from.m_llimitmoney());
    }
    if (from.has_m_llgameantemoney()) {
      set_m_llgameantemoney(from.m_llgameantemoney());
    }
    if (from.has_m_becho()) {
      set_m_becho(from.m_becho());
    }
    if (from.has_m_lmakeusn()) {
      set_m_lmakeusn(from.m_lmakeusn());
    }
    if (from.has_m_lcategory()) {
      set_m_lcategory(from.m_lcategory());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_lchannelid()) {
      set_m_lchannelid(from.m_lchannelid());
    }
    if (from.has_m_llantemoney()) {
      set_m_llantemoney(from.m_llantemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Option::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Option::CopyFrom(const Option& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Option::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  
  return true;
}

void Option::Swap(Option* other) {
  if (other != this) {
    std::swap(m_sroomtitle_, other->m_sroomtitle_);
    std::swap(m_spassword_, other->m_spassword_);
    std::swap(m_lmaxusercnt_, other->m_lmaxusercnt_);
    std::swap(m_lmaxplayerusercnt_, other->m_lmaxplayerusercnt_);
    std::swap(m_lmaxplayercardcnt_, other->m_lmaxplayercardcnt_);
    std::swap(m_lchoicemode_, other->m_lchoicemode_);
    std::swap(m_lroomtype_, other->m_lroomtype_);
    std::swap(m_lbetrule_, other->m_lbetrule_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_laddrule_, other->m_laddrule_);
    std::swap(m_lrematchjoin_, other->m_lrematchjoin_);
    std::swap(m_llimitmoney_, other->m_llimitmoney_);
    std::swap(m_llgameantemoney_, other->m_llgameantemoney_);
    std::swap(m_becho_, other->m_becho_);
    std::swap(m_lmakeusn_, other->m_lmakeusn_);
    std::swap(m_lcategory_, other->m_lcategory_);
    std::swap(m_lchannelid_, other->m_lchannelid_);
    std::swap(m_llantemoney_, other->m_llantemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Option::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Option_descriptor_;
  metadata.reflection = Option_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BettingMsg::kMLUSNFieldNumber;
const int BettingMsg::kMNIndexFieldNumber;
const int BettingMsg::kMBetTypeFieldNumber;
const int BettingMsg::kMBBettingMoneyFieldNumber;
const int BettingMsg::kMBMoneyLackFieldNumber;
const int BettingMsg::kMBCallMoneyZeroFieldNumber;
const int BettingMsg::kMLlCallMoneyFieldNumber;
const int BettingMsg::kMLlRaiseMoneyFieldNumber;
#endif  // !_MSC_VER

BettingMsg::BettingMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BettingMsg::InitAsDefaultInstance() {
}

BettingMsg::BettingMsg(const BettingMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BettingMsg::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_bettype_ = 0;
  m_bbettingmoney_ = 0;
  m_bmoneylack_ = 0;
  m_bcallmoneyzero_ = 0;
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BettingMsg::~BettingMsg() {
  SharedDtor();
}

void BettingMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BettingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BettingMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BettingMsg_descriptor_;
}

const BettingMsg& BettingMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

BettingMsg* BettingMsg::default_instance_ = NULL;

BettingMsg* BettingMsg::New() const {
  return new BettingMsg;
}

void BettingMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_bettype_ = 0;
    m_bbettingmoney_ = 0;
    m_bmoneylack_ = 0;
    m_bcallmoneyzero_ = 0;
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llraisemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BettingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_BetType;
        break;
      }
      
      // required int32 m_BetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bettype_)));
          set_has_m_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bBettingMoney;
        break;
      }
      
      // required int32 m_bBettingMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bBettingMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bbettingmoney_)));
          set_has_m_bbettingmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bMoneyLack;
        break;
      }
      
      // required int32 m_bMoneyLack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bMoneyLack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmoneylack_)));
          set_has_m_bmoneylack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bCallMoneyZero;
        break;
      }
      
      // required int32 m_bCallMoneyZero = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallMoneyZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcallmoneyzero_)));
          set_has_m_bcallmoneyzero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_llCallMoney;
        break;
      }
      
      // required int64 m_llCallMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_llRaiseMoney;
        break;
      }
      
      // required int64 m_llRaiseMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRaiseMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llraisemoney_)));
          set_has_m_llraisemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BettingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required int32 m_BetType = 3;
  if (has_m_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_bettype(), output);
  }
  
  // required int32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bbettingmoney(), output);
  }
  
  // required int32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bmoneylack(), output);
  }
  
  // required int32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_bcallmoneyzero(), output);
  }
  
  // required int64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->m_llcallmoney(), output);
  }
  
  // required int64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_llraisemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BettingMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required int32 m_BetType = 3;
  if (has_m_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_bettype(), target);
  }
  
  // required int32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_bbettingmoney(), target);
  }
  
  // required int32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_bmoneylack(), target);
  }
  
  // required int32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_bcallmoneyzero(), target);
  }
  
  // required int64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->m_llcallmoney(), target);
  }
  
  // required int64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_llraisemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BettingMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required int32 m_BetType = 3;
    if (has_m_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bettype());
    }
    
    // required int32 m_bBettingMoney = 4;
    if (has_m_bbettingmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bbettingmoney());
    }
    
    // required int32 m_bMoneyLack = 5;
    if (has_m_bmoneylack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmoneylack());
    }
    
    // required int32 m_bCallMoneyZero = 6;
    if (has_m_bcallmoneyzero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcallmoneyzero());
    }
    
    // required int64 m_llCallMoney = 7;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llcallmoney());
    }
    
    // required int64 m_llRaiseMoney = 8;
    if (has_m_llraisemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llraisemoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BettingMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BettingMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BettingMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BettingMsg::MergeFrom(const BettingMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_bettype()) {
      set_m_bettype(from.m_bettype());
    }
    if (from.has_m_bbettingmoney()) {
      set_m_bbettingmoney(from.m_bbettingmoney());
    }
    if (from.has_m_bmoneylack()) {
      set_m_bmoneylack(from.m_bmoneylack());
    }
    if (from.has_m_bcallmoneyzero()) {
      set_m_bcallmoneyzero(from.m_bcallmoneyzero());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llraisemoney()) {
      set_m_llraisemoney(from.m_llraisemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BettingMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BettingMsg::CopyFrom(const BettingMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BettingMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void BettingMsg::Swap(BettingMsg* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_bettype_, other->m_bettype_);
    std::swap(m_bbettingmoney_, other->m_bbettingmoney_);
    std::swap(m_bmoneylack_, other->m_bmoneylack_);
    std::swap(m_bcallmoneyzero_, other->m_bcallmoneyzero_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llraisemoney_, other->m_llraisemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BettingMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BettingMsg_descriptor_;
  metadata.reflection = BettingMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BettingMsgTable::kBettingMsgTableFieldNumber;
#endif  // !_MSC_VER

BettingMsgTable::BettingMsgTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BettingMsgTable::InitAsDefaultInstance() {
}

BettingMsgTable::BettingMsgTable(const BettingMsgTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BettingMsgTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BettingMsgTable::~BettingMsgTable() {
  SharedDtor();
}

void BettingMsgTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BettingMsgTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BettingMsgTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BettingMsgTable_descriptor_;
}

const BettingMsgTable& BettingMsgTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

BettingMsgTable* BettingMsgTable::default_instance_ = NULL;

BettingMsgTable* BettingMsgTable::New() const {
  return new BettingMsgTable;
}

void BettingMsgTable::Clear() {
  bettingmsgtable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BettingMsgTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker.BettingMsg BettingMsgTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BettingMsgTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bettingmsgtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_BettingMsgTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BettingMsgTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker.BettingMsg BettingMsgTable = 1;
  for (int i = 0; i < this->bettingmsgtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bettingmsgtable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BettingMsgTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker.BettingMsg BettingMsgTable = 1;
  for (int i = 0; i < this->bettingmsgtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bettingmsgtable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BettingMsgTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker.BettingMsg BettingMsgTable = 1;
  total_size += 1 * this->bettingmsgtable_size();
  for (int i = 0; i < this->bettingmsgtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bettingmsgtable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BettingMsgTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BettingMsgTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BettingMsgTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BettingMsgTable::MergeFrom(const BettingMsgTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  bettingmsgtable_.MergeFrom(from.bettingmsgtable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BettingMsgTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BettingMsgTable::CopyFrom(const BettingMsgTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BettingMsgTable::IsInitialized() const {
  
  for (int i = 0; i < bettingmsgtable_size(); i++) {
    if (!this->bettingmsgtable(i).IsInitialized()) return false;
  }
  return true;
}

void BettingMsgTable::Swap(BettingMsgTable* other) {
  if (other != this) {
    bettingmsgtable_.Swap(&other->bettingmsgtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BettingMsgTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BettingMsgTable_descriptor_;
  metadata.reflection = BettingMsgTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyTable::kMoneyTableFieldNumber;
#endif  // !_MSC_VER

MoneyTable::MoneyTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyTable::InitAsDefaultInstance() {
}

MoneyTable::MoneyTable(const MoneyTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyTable::~MoneyTable() {
  SharedDtor();
}

void MoneyTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyTable_descriptor_;
}

const MoneyTable& MoneyTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MoneyTable* MoneyTable::default_instance_ = NULL;

MoneyTable* MoneyTable::New() const {
  return new MoneyTable;
}

void MoneyTable::Clear() {
  moneytable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker.Money MoneyTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MoneyTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneytable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MoneyTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker.Money MoneyTable = 1;
  for (int i = 0; i < this->moneytable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moneytable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker.Money MoneyTable = 1;
  for (int i = 0; i < this->moneytable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moneytable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker.Money MoneyTable = 1;
  total_size += 1 * this->moneytable_size();
  for (int i = 0; i < this->moneytable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneytable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyTable::MergeFrom(const MoneyTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneytable_.MergeFrom(from.moneytable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyTable::CopyFrom(const MoneyTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyTable::IsInitialized() const {
  
  for (int i = 0; i < moneytable_size(); i++) {
    if (!this->moneytable(i).IsInitialized()) return false;
  }
  return true;
}

void MoneyTable::Swap(MoneyTable* other) {
  if (other != this) {
    moneytable_.Swap(&other->moneytable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyTable_descriptor_;
  metadata.reflection = MoneyTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardTable::kCardTableFieldNumber;
#endif  // !_MSC_VER

CardTable::CardTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardTable::InitAsDefaultInstance() {
}

CardTable::CardTable(const CardTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardTable::~CardTable() {
  SharedDtor();
}

void CardTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardTable_descriptor_;
}

const CardTable& CardTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

CardTable* CardTable::default_instance_ = NULL;

CardTable* CardTable::New() const {
  return new CardTable;
}

void CardTable::Clear() {
  cardtable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker.Cards CardTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_CardTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker.Cards CardTable = 1;
  for (int i = 0; i < this->cardtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardtable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker.Cards CardTable = 1;
  for (int i = 0; i < this->cardtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardtable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker.Cards CardTable = 1;
  total_size += 1 * this->cardtable_size();
  for (int i = 0; i < this->cardtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardtable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardTable::MergeFrom(const CardTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardtable_.MergeFrom(from.cardtable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardTable::CopyFrom(const CardTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardTable::IsInitialized() const {
  
  for (int i = 0; i < cardtable_size(); i++) {
    if (!this->cardtable(i).IsInitialized()) return false;
  }
  return true;
}

void CardTable::Swap(CardTable* other) {
  if (other != this) {
    cardtable_.Swap(&other->cardtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardTable_descriptor_;
  metadata.reflection = CardTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UITable::kUITableFieldNumber;
#endif  // !_MSC_VER

UITable::UITable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UITable::InitAsDefaultInstance() {
}

UITable::UITable(const UITable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UITable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UITable::~UITable() {
  SharedDtor();
}

void UITable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UITable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UITable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UITable_descriptor_;
}

const UITable& UITable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

UITable* UITable::default_instance_ = NULL;

UITable* UITable::New() const {
  return new UITable;
}

void UITable::Clear() {
  uitable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UITable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker.UserInfo UITable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UITable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uitable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UITable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UITable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker.UserInfo UITable = 1;
  for (int i = 0; i < this->uitable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uitable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UITable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker.UserInfo UITable = 1;
  for (int i = 0; i < this->uitable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uitable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UITable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker.UserInfo UITable = 1;
  total_size += 1 * this->uitable_size();
  for (int i = 0; i < this->uitable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uitable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UITable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UITable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UITable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UITable::MergeFrom(const UITable& from) {
  GOOGLE_CHECK_NE(&from, this);
  uitable_.MergeFrom(from.uitable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UITable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UITable::CopyFrom(const UITable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UITable::IsInitialized() const {
  
  for (int i = 0; i < uitable_size(); i++) {
    if (!this->uitable(i).IsInitialized()) return false;
  }
  return true;
}

void UITable::Swap(UITable* other) {
  if (other != this) {
    uitable_.Swap(&other->uitable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UITable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UITable_descriptor_;
  metadata.reflection = UITable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RCRoomData::kMLGameMasterFieldNumber;
const int RCRoomData::kMLRoomIndexFieldNumber;
const int RCRoomData::kMLStateFieldNumber;
const int RCRoomData::kMOptionFieldNumber;
const int RCRoomData::kMTblUIFieldNumber;
const int RCRoomData::kMTblCardFieldNumber;
const int RCRoomData::kMTblMoneyFieldNumber;
const int RCRoomData::kMTblBettingMsgFieldNumber;
#endif  // !_MSC_VER

RCRoomData::RCRoomData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RCRoomData::InitAsDefaultInstance() {
  m_option_ = const_cast< ::Game_Poker::Option*>(&::Game_Poker::Option::default_instance());
  m_tblui_ = const_cast< ::Game_Poker::UITable*>(&::Game_Poker::UITable::default_instance());
  m_tblcard_ = const_cast< ::Game_Poker::CardTable*>(&::Game_Poker::CardTable::default_instance());
  m_tblmoney_ = const_cast< ::Game_Poker::MoneyTable*>(&::Game_Poker::MoneyTable::default_instance());
  m_tblbettingmsg_ = const_cast< ::Game_Poker::BettingMsgTable*>(&::Game_Poker::BettingMsgTable::default_instance());
}

RCRoomData::RCRoomData(const RCRoomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RCRoomData::SharedCtor() {
  _cached_size_ = 0;
  m_lgamemaster_ = 0;
  m_lroomindex_ = 0;
  m_lstate_ = 0;
  m_option_ = NULL;
  m_tblui_ = NULL;
  m_tblcard_ = NULL;
  m_tblmoney_ = NULL;
  m_tblbettingmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RCRoomData::~RCRoomData() {
  SharedDtor();
}

void RCRoomData::SharedDtor() {
  if (this != default_instance_) {
    delete m_option_;
    delete m_tblui_;
    delete m_tblcard_;
    delete m_tblmoney_;
    delete m_tblbettingmsg_;
  }
}

void RCRoomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RCRoomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCRoomData_descriptor_;
}

const RCRoomData& RCRoomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

RCRoomData* RCRoomData::default_instance_ = NULL;

RCRoomData* RCRoomData::New() const {
  return new RCRoomData;
}

void RCRoomData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lgamemaster_ = 0;
    m_lroomindex_ = 0;
    m_lstate_ = 0;
    if (has_m_option()) {
      if (m_option_ != NULL) m_option_->::Game_Poker::Option::Clear();
    }
    if (has_m_tblui()) {
      if (m_tblui_ != NULL) m_tblui_->::Game_Poker::UITable::Clear();
    }
    if (has_m_tblcard()) {
      if (m_tblcard_ != NULL) m_tblcard_->::Game_Poker::CardTable::Clear();
    }
    if (has_m_tblmoney()) {
      if (m_tblmoney_ != NULL) m_tblmoney_->::Game_Poker::MoneyTable::Clear();
    }
    if (has_m_tblbettingmsg()) {
      if (m_tblbettingmsg_ != NULL) m_tblbettingmsg_->::Game_Poker::BettingMsgTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RCRoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lGameMaster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgamemaster_)));
          set_has_m_lgamemaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRoomIndex;
        break;
      }
      
      // required int32 m_lRoomIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRoomIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lroomindex_)));
          set_has_m_lroomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lState;
        break;
      }
      
      // required int32 m_lState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_option;
        break;
      }
      
      // required .Game_Poker.Option m_option = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblUI;
        break;
      }
      
      // required .Game_Poker.UITable m_tblUI = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblUI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_tblCard;
        break;
      }
      
      // required .Game_Poker.CardTable m_tblCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_tblMoney;
        break;
      }
      
      // required .Game_Poker.MoneyTable m_tblMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_tblBettingMsg;
        break;
      }
      
      // required .Game_Poker.BettingMsgTable m_tblBettingMsg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblBettingMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblbettingmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RCRoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lGameMaster = 1;
  if (has_m_lgamemaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lgamemaster(), output);
  }
  
  // required int32 m_lRoomIndex = 2;
  if (has_m_lroomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lroomindex(), output);
  }
  
  // required int32 m_lState = 3;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lstate(), output);
  }
  
  // required .Game_Poker.Option m_option = 4;
  if (has_m_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_option(), output);
  }
  
  // required .Game_Poker.UITable m_tblUI = 5;
  if (has_m_tblui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_tblui(), output);
  }
  
  // required .Game_Poker.CardTable m_tblCard = 6;
  if (has_m_tblcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_tblcard(), output);
  }
  
  // required .Game_Poker.MoneyTable m_tblMoney = 7;
  if (has_m_tblmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_tblmoney(), output);
  }
  
  // required .Game_Poker.BettingMsgTable m_tblBettingMsg = 8;
  if (has_m_tblbettingmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_tblbettingmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RCRoomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lGameMaster = 1;
  if (has_m_lgamemaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lgamemaster(), target);
  }
  
  // required int32 m_lRoomIndex = 2;
  if (has_m_lroomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lroomindex(), target);
  }
  
  // required int32 m_lState = 3;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lstate(), target);
  }
  
  // required .Game_Poker.Option m_option = 4;
  if (has_m_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_option(), target);
  }
  
  // required .Game_Poker.UITable m_tblUI = 5;
  if (has_m_tblui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_tblui(), target);
  }
  
  // required .Game_Poker.CardTable m_tblCard = 6;
  if (has_m_tblcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_tblcard(), target);
  }
  
  // required .Game_Poker.MoneyTable m_tblMoney = 7;
  if (has_m_tblmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_tblmoney(), target);
  }
  
  // required .Game_Poker.BettingMsgTable m_tblBettingMsg = 8;
  if (has_m_tblbettingmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_tblbettingmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RCRoomData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lGameMaster = 1;
    if (has_m_lgamemaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgamemaster());
    }
    
    // required int32 m_lRoomIndex = 2;
    if (has_m_lroomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lroomindex());
    }
    
    // required int32 m_lState = 3;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lstate());
    }
    
    // required .Game_Poker.Option m_option = 4;
    if (has_m_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_option());
    }
    
    // required .Game_Poker.UITable m_tblUI = 5;
    if (has_m_tblui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblui());
    }
    
    // required .Game_Poker.CardTable m_tblCard = 6;
    if (has_m_tblcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblcard());
    }
    
    // required .Game_Poker.MoneyTable m_tblMoney = 7;
    if (has_m_tblmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblmoney());
    }
    
    // required .Game_Poker.BettingMsgTable m_tblBettingMsg = 8;
    if (has_m_tblbettingmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblbettingmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RCRoomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RCRoomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RCRoomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RCRoomData::MergeFrom(const RCRoomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lgamemaster()) {
      set_m_lgamemaster(from.m_lgamemaster());
    }
    if (from.has_m_lroomindex()) {
      set_m_lroomindex(from.m_lroomindex());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_option()) {
      mutable_m_option()->::Game_Poker::Option::MergeFrom(from.m_option());
    }
    if (from.has_m_tblui()) {
      mutable_m_tblui()->::Game_Poker::UITable::MergeFrom(from.m_tblui());
    }
    if (from.has_m_tblcard()) {
      mutable_m_tblcard()->::Game_Poker::CardTable::MergeFrom(from.m_tblcard());
    }
    if (from.has_m_tblmoney()) {
      mutable_m_tblmoney()->::Game_Poker::MoneyTable::MergeFrom(from.m_tblmoney());
    }
    if (from.has_m_tblbettingmsg()) {
      mutable_m_tblbettingmsg()->::Game_Poker::BettingMsgTable::MergeFrom(from.m_tblbettingmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RCRoomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RCRoomData::CopyFrom(const RCRoomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCRoomData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_m_option()) {
    if (!this->m_option().IsInitialized()) return false;
  }
  if (has_m_tblui()) {
    if (!this->m_tblui().IsInitialized()) return false;
  }
  if (has_m_tblcard()) {
    if (!this->m_tblcard().IsInitialized()) return false;
  }
  if (has_m_tblmoney()) {
    if (!this->m_tblmoney().IsInitialized()) return false;
  }
  if (has_m_tblbettingmsg()) {
    if (!this->m_tblbettingmsg().IsInitialized()) return false;
  }
  return true;
}

void RCRoomData::Swap(RCRoomData* other) {
  if (other != this) {
    std::swap(m_lgamemaster_, other->m_lgamemaster_);
    std::swap(m_lroomindex_, other->m_lroomindex_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_option_, other->m_option_);
    std::swap(m_tblui_, other->m_tblui_);
    std::swap(m_tblcard_, other->m_tblcard_);
    std::swap(m_tblmoney_, other->m_tblmoney_);
    std::swap(m_tblbettingmsg_, other->m_tblbettingmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RCRoomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RCRoomData_descriptor_;
  metadata.reflection = RCRoomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_Entry::kMNVersionFieldNumber;
const int MsgCS_Entry::kMBWelcomeSoundFieldNumber;
const int MsgCS_Entry::kMLSoundTypeFieldNumber;
const int MsgCS_Entry::kMSNickNameFieldNumber;
const int MsgCS_Entry::kMSAvtFieldNumber;
const int MsgCS_Entry::kMLCLevelFieldNumber;
const int MsgCS_Entry::kMLSexFieldNumber;
#endif  // !_MSC_VER

MsgCS_Entry::MsgCS_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_Entry::InitAsDefaultInstance() {
}

MsgCS_Entry::MsgCS_Entry(const MsgCS_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_Entry::SharedCtor() {
  _cached_size_ = 0;
  m_nversion_ = 0;
  m_bwelcomesound_ = 0;
  m_lsoundtype_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_Entry::~MsgCS_Entry() {
  SharedDtor();
}

void MsgCS_Entry::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
  }
}

void MsgCS_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_Entry_descriptor_;
}

const MsgCS_Entry& MsgCS_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_Entry* MsgCS_Entry::default_instance_ = NULL;

MsgCS_Entry* MsgCS_Entry::New() const {
  return new MsgCS_Entry;
}

void MsgCS_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nversion_ = 0;
    m_bwelcomesound_ = 0;
    m_lsoundtype_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nversion_)));
          set_has_m_nversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bWelcomeSound;
        break;
      }
      
      // required sint32 m_bWelcomeSound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bWelcomeSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bwelcomesound_)));
          set_has_m_bwelcomesound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_sAvt;
        break;
      }
      
      // required string m_sAvt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_savt().data(), this->m_savt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lCLevel;
        break;
      }
      
      // required sint32 m_lCLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lSex;
        break;
      }
      
      // required sint32 m_lSex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsex_)));
          set_has_m_lsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nVersion = 1;
  if (has_m_nversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nversion(), output);
  }
  
  // required sint32 m_bWelcomeSound = 2;
  if (has_m_bwelcomesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bwelcomesound(), output);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lsoundtype(), output);
  }
  
  // required string m_sNickName = 4;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_snickname(), output);
  }
  
  // required string m_sAvt = 5;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_savt(), output);
  }
  
  // required sint32 m_lCLevel = 6;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lclevel(), output);
  }
  
  // required sint32 m_lSex = 7;
  if (has_m_lsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lsex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nVersion = 1;
  if (has_m_nversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nversion(), target);
  }
  
  // required sint32 m_bWelcomeSound = 2;
  if (has_m_bwelcomesound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_bwelcomesound(), target);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lsoundtype(), target);
  }
  
  // required string m_sNickName = 4;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_snickname(), target);
  }
  
  // required string m_sAvt = 5;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_savt(), target);
  }
  
  // required sint32 m_lCLevel = 6;
  if (has_m_lclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_lclevel(), target);
  }
  
  // required sint32 m_lSex = 7;
  if (has_m_lsex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->m_lsex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_Entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nVersion = 1;
    if (has_m_nversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nversion());
    }
    
    // required sint32 m_bWelcomeSound = 2;
    if (has_m_bwelcomesound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bwelcomesound());
    }
    
    // required sint32 m_lSoundType = 3;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
    // required string m_sNickName = 4;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sAvt = 5;
    if (has_m_savt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required sint32 m_lCLevel = 6;
    if (has_m_lclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lclevel());
    }
    
    // required sint32 m_lSex = 7;
    if (has_m_lsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_Entry::MergeFrom(const MsgCS_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nversion()) {
      set_m_nversion(from.m_nversion());
    }
    if (from.has_m_bwelcomesound()) {
      set_m_bwelcomesound(from.m_bwelcomesound());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsex()) {
      set_m_lsex(from.m_lsex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_Entry::CopyFrom(const MsgCS_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void MsgCS_Entry::Swap(MsgCS_Entry* other) {
  if (other != this) {
    std::swap(m_nversion_, other->m_nversion_);
    std::swap(m_bwelcomesound_, other->m_bwelcomesound_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsex_, other->m_lsex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_Entry_descriptor_;
  metadata.reflection = MsgCS_Entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCS_Observe::MsgCS_Observe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_Observe::InitAsDefaultInstance() {
}

MsgCS_Observe::MsgCS_Observe(const MsgCS_Observe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_Observe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_Observe::~MsgCS_Observe() {
  SharedDtor();
}

void MsgCS_Observe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_Observe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_Observe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_Observe_descriptor_;
}

const MsgCS_Observe& MsgCS_Observe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_Observe* MsgCS_Observe::default_instance_ = NULL;

MsgCS_Observe* MsgCS_Observe::New() const {
  return new MsgCS_Observe;
}

void MsgCS_Observe::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_Observe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCS_Observe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_Observe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_Observe::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_Observe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_Observe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_Observe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_Observe::MergeFrom(const MsgCS_Observe& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_Observe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_Observe::CopyFrom(const MsgCS_Observe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_Observe::IsInitialized() const {
  
  return true;
}

void MsgCS_Observe::Swap(MsgCS_Observe* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_Observe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_Observe_descriptor_;
  metadata.reflection = MsgCS_Observe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCS_Start::MsgCS_Start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_Start::InitAsDefaultInstance() {
}

MsgCS_Start::MsgCS_Start(const MsgCS_Start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_Start::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_Start::~MsgCS_Start() {
  SharedDtor();
}

void MsgCS_Start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_Start_descriptor_;
}

const MsgCS_Start& MsgCS_Start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_Start* MsgCS_Start::default_instance_ = NULL;

MsgCS_Start* MsgCS_Start::New() const {
  return new MsgCS_Start;
}

void MsgCS_Start::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCS_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_Start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_Start::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_Start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_Start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_Start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_Start::MergeFrom(const MsgCS_Start& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_Start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_Start::CopyFrom(const MsgCS_Start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_Start::IsInitialized() const {
  
  return true;
}

void MsgCS_Start::Swap(MsgCS_Start* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_Start_descriptor_;
  metadata.reflection = MsgCS_Start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_SelectedCardReq::kMLCardIdxFieldNumber;
#endif  // !_MSC_VER

MsgCS_SelectedCardReq::MsgCS_SelectedCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_SelectedCardReq::InitAsDefaultInstance() {
}

MsgCS_SelectedCardReq::MsgCS_SelectedCardReq(const MsgCS_SelectedCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_SelectedCardReq::SharedCtor() {
  _cached_size_ = 0;
  m_lcardidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_SelectedCardReq::~MsgCS_SelectedCardReq() {
  SharedDtor();
}

void MsgCS_SelectedCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_SelectedCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_SelectedCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_SelectedCardReq_descriptor_;
}

const MsgCS_SelectedCardReq& MsgCS_SelectedCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_SelectedCardReq* MsgCS_SelectedCardReq::default_instance_ = NULL;

MsgCS_SelectedCardReq* MsgCS_SelectedCardReq::New() const {
  return new MsgCS_SelectedCardReq;
}

void MsgCS_SelectedCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lcardidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_SelectedCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lCardIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardidx_)));
          set_has_m_lcardidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_SelectedCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lCardIdx = 1;
  if (has_m_lcardidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lcardidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_SelectedCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lCardIdx = 1;
  if (has_m_lcardidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lcardidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_SelectedCardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lCardIdx = 1;
    if (has_m_lcardidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_SelectedCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_SelectedCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_SelectedCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_SelectedCardReq::MergeFrom(const MsgCS_SelectedCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lcardidx()) {
      set_m_lcardidx(from.m_lcardidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_SelectedCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_SelectedCardReq::CopyFrom(const MsgCS_SelectedCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_SelectedCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_SelectedCardReq::Swap(MsgCS_SelectedCardReq* other) {
  if (other != this) {
    std::swap(m_lcardidx_, other->m_lcardidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_SelectedCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_SelectedCardReq_descriptor_;
  metadata.reflection = MsgCS_SelectedCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_BettingReq::kMLBetTypeFieldNumber;
#endif  // !_MSC_VER

MsgCS_BettingReq::MsgCS_BettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_BettingReq::InitAsDefaultInstance() {
}

MsgCS_BettingReq::MsgCS_BettingReq(const MsgCS_BettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_BettingReq::SharedCtor() {
  _cached_size_ = 0;
  m_lbettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_BettingReq::~MsgCS_BettingReq() {
  SharedDtor();
}

void MsgCS_BettingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_BettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_BettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_BettingReq_descriptor_;
}

const MsgCS_BettingReq& MsgCS_BettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_BettingReq* MsgCS_BettingReq::default_instance_ = NULL;

MsgCS_BettingReq* MsgCS_BettingReq::New() const {
  return new MsgCS_BettingReq;
}

void MsgCS_BettingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbettype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_BettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_BettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBetType = 1;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbettype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_BettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBetType = 1;
  if (has_m_lbettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbettype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_BettingReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBetType = 1;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_BettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_BettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_BettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_BettingReq::MergeFrom(const MsgCS_BettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_BettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_BettingReq::CopyFrom(const MsgCS_BettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_BettingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_BettingReq::Swap(MsgCS_BettingReq* other) {
  if (other != this) {
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_BettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_BettingReq_descriptor_;
  metadata.reflection = MsgCS_BettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_ChoiceRemoveCard::kMLUSNFieldNumber;
const int MsgCS_ChoiceRemoveCard::kMNRemoveCardIndexFieldNumber;
#endif  // !_MSC_VER

MsgCS_ChoiceRemoveCard::MsgCS_ChoiceRemoveCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_ChoiceRemoveCard::InitAsDefaultInstance() {
}

MsgCS_ChoiceRemoveCard::MsgCS_ChoiceRemoveCard(const MsgCS_ChoiceRemoveCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_ChoiceRemoveCard::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nremovecardindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_ChoiceRemoveCard::~MsgCS_ChoiceRemoveCard() {
  SharedDtor();
}

void MsgCS_ChoiceRemoveCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_ChoiceRemoveCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_ChoiceRemoveCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_ChoiceRemoveCard_descriptor_;
}

const MsgCS_ChoiceRemoveCard& MsgCS_ChoiceRemoveCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_ChoiceRemoveCard* MsgCS_ChoiceRemoveCard::default_instance_ = NULL;

MsgCS_ChoiceRemoveCard* MsgCS_ChoiceRemoveCard::New() const {
  return new MsgCS_ChoiceRemoveCard;
}

void MsgCS_ChoiceRemoveCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nremovecardindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_ChoiceRemoveCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nRemoveCardIndex;
        break;
      }
      
      // required int32 m_nRemoveCardIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRemoveCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nremovecardindex_)));
          set_has_m_nremovecardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_ChoiceRemoveCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nRemoveCardIndex = 2;
  if (has_m_nremovecardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nremovecardindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_ChoiceRemoveCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nRemoveCardIndex = 2;
  if (has_m_nremovecardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nremovecardindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_ChoiceRemoveCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nRemoveCardIndex = 2;
    if (has_m_nremovecardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nremovecardindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_ChoiceRemoveCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_ChoiceRemoveCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_ChoiceRemoveCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_ChoiceRemoveCard::MergeFrom(const MsgCS_ChoiceRemoveCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nremovecardindex()) {
      set_m_nremovecardindex(from.m_nremovecardindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_ChoiceRemoveCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_ChoiceRemoveCard::CopyFrom(const MsgCS_ChoiceRemoveCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_ChoiceRemoveCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgCS_ChoiceRemoveCard::Swap(MsgCS_ChoiceRemoveCard* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nremovecardindex_, other->m_nremovecardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_ChoiceRemoveCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_ChoiceRemoveCard_descriptor_;
  metadata.reflection = MsgCS_ChoiceRemoveCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_Purge::kMLTypeFieldNumber;
const int MsgCS_Purge::kMLPurgeUSNFieldNumber;
#endif  // !_MSC_VER

MsgCS_Purge::MsgCS_Purge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_Purge::InitAsDefaultInstance() {
}

MsgCS_Purge::MsgCS_Purge(const MsgCS_Purge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_Purge::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_lpurgeusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_Purge::~MsgCS_Purge() {
  SharedDtor();
}

void MsgCS_Purge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_Purge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_Purge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_Purge_descriptor_;
}

const MsgCS_Purge& MsgCS_Purge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_Purge* MsgCS_Purge::default_instance_ = NULL;

MsgCS_Purge* MsgCS_Purge::New() const {
  return new MsgCS_Purge;
}

void MsgCS_Purge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_lpurgeusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_Purge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lPurgeUSN;
        break;
      }
      
      // required sint32 m_lPurgeUSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPurgeUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lpurgeusn_)));
          set_has_m_lpurgeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_Purge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint32 m_lPurgeUSN = 2;
  if (has_m_lpurgeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lpurgeusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_Purge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  // required sint32 m_lPurgeUSN = 2;
  if (has_m_lpurgeusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lpurgeusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_Purge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint32 m_lPurgeUSN = 2;
    if (has_m_lpurgeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lpurgeusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_Purge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_Purge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_Purge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_Purge::MergeFrom(const MsgCS_Purge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_lpurgeusn()) {
      set_m_lpurgeusn(from.m_lpurgeusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_Purge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_Purge::CopyFrom(const MsgCS_Purge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_Purge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgCS_Purge::Swap(MsgCS_Purge* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_lpurgeusn_, other->m_lpurgeusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_Purge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_Purge_descriptor_;
  metadata.reflection = MsgCS_Purge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_Abuse::kMLTypeFieldNumber;
const int MsgCS_Abuse::kMSDayFieldNumber;
#endif  // !_MSC_VER

MsgCS_Abuse::MsgCS_Abuse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_Abuse::InitAsDefaultInstance() {
}

MsgCS_Abuse::MsgCS_Abuse(const MsgCS_Abuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_Abuse::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_sday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_Abuse::~MsgCS_Abuse() {
  SharedDtor();
}

void MsgCS_Abuse::SharedDtor() {
  if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sday_;
  }
  if (this != default_instance_) {
  }
}

void MsgCS_Abuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_Abuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_Abuse_descriptor_;
}

const MsgCS_Abuse& MsgCS_Abuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_Abuse* MsgCS_Abuse::default_instance_ = NULL;

MsgCS_Abuse* MsgCS_Abuse::New() const {
  return new MsgCS_Abuse;
}

void MsgCS_Abuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    if (has_m_sday()) {
      if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
        m_sday_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_Abuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sDay;
        break;
      }
      
      // required string m_sDay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sday().data(), this->m_sday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_Abuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required string m_sDay = 2;
  if (has_m_sday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sday().data(), this->m_sday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_sday(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_Abuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  // required string m_sDay = 2;
  if (has_m_sday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sday().data(), this->m_sday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_sday(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_Abuse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required string m_sDay = 2;
    if (has_m_sday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sday());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_Abuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_Abuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_Abuse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_Abuse::MergeFrom(const MsgCS_Abuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_sday()) {
      set_m_sday(from.m_sday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_Abuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_Abuse::CopyFrom(const MsgCS_Abuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_Abuse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgCS_Abuse::Swap(MsgCS_Abuse* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_sday_, other->m_sday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_Abuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_Abuse_descriptor_;
  metadata.reflection = MsgCS_Abuse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_AskPurgeVote::kMLPurgeUSNFieldNumber;
#endif  // !_MSC_VER

MsgCS_AskPurgeVote::MsgCS_AskPurgeVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_AskPurgeVote::InitAsDefaultInstance() {
}

MsgCS_AskPurgeVote::MsgCS_AskPurgeVote(const MsgCS_AskPurgeVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_AskPurgeVote::SharedCtor() {
  _cached_size_ = 0;
  m_lpurgeusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_AskPurgeVote::~MsgCS_AskPurgeVote() {
  SharedDtor();
}

void MsgCS_AskPurgeVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_AskPurgeVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_AskPurgeVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_AskPurgeVote_descriptor_;
}

const MsgCS_AskPurgeVote& MsgCS_AskPurgeVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_AskPurgeVote* MsgCS_AskPurgeVote::default_instance_ = NULL;

MsgCS_AskPurgeVote* MsgCS_AskPurgeVote::New() const {
  return new MsgCS_AskPurgeVote;
}

void MsgCS_AskPurgeVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lpurgeusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_AskPurgeVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lPurgeUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lpurgeusn_)));
          set_has_m_lpurgeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_AskPurgeVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lPurgeUSN = 1;
  if (has_m_lpurgeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lpurgeusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_AskPurgeVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lPurgeUSN = 1;
  if (has_m_lpurgeusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lpurgeusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_AskPurgeVote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lPurgeUSN = 1;
    if (has_m_lpurgeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lpurgeusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_AskPurgeVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_AskPurgeVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_AskPurgeVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_AskPurgeVote::MergeFrom(const MsgCS_AskPurgeVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lpurgeusn()) {
      set_m_lpurgeusn(from.m_lpurgeusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_AskPurgeVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_AskPurgeVote::CopyFrom(const MsgCS_AskPurgeVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_AskPurgeVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_AskPurgeVote::Swap(MsgCS_AskPurgeVote* other) {
  if (other != this) {
    std::swap(m_lpurgeusn_, other->m_lpurgeusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_AskPurgeVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_AskPurgeVote_descriptor_;
  metadata.reflection = MsgCS_AskPurgeVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_AnswerPurgeVote::kMLAnswerFieldNumber;
#endif  // !_MSC_VER

MsgCS_AnswerPurgeVote::MsgCS_AnswerPurgeVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_AnswerPurgeVote::InitAsDefaultInstance() {
}

MsgCS_AnswerPurgeVote::MsgCS_AnswerPurgeVote(const MsgCS_AnswerPurgeVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_AnswerPurgeVote::SharedCtor() {
  _cached_size_ = 0;
  m_lanswer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_AnswerPurgeVote::~MsgCS_AnswerPurgeVote() {
  SharedDtor();
}

void MsgCS_AnswerPurgeVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_AnswerPurgeVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_AnswerPurgeVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_AnswerPurgeVote_descriptor_;
}

const MsgCS_AnswerPurgeVote& MsgCS_AnswerPurgeVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_AnswerPurgeVote* MsgCS_AnswerPurgeVote::default_instance_ = NULL;

MsgCS_AnswerPurgeVote* MsgCS_AnswerPurgeVote::New() const {
  return new MsgCS_AnswerPurgeVote;
}

void MsgCS_AnswerPurgeVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lanswer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_AnswerPurgeVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lAnswer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lanswer_)));
          set_has_m_lanswer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_AnswerPurgeVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lAnswer = 1;
  if (has_m_lanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lanswer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_AnswerPurgeVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lAnswer = 1;
  if (has_m_lanswer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lanswer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_AnswerPurgeVote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lAnswer = 1;
    if (has_m_lanswer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lanswer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_AnswerPurgeVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_AnswerPurgeVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_AnswerPurgeVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_AnswerPurgeVote::MergeFrom(const MsgCS_AnswerPurgeVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lanswer()) {
      set_m_lanswer(from.m_lanswer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_AnswerPurgeVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_AnswerPurgeVote::CopyFrom(const MsgCS_AnswerPurgeVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_AnswerPurgeVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_AnswerPurgeVote::Swap(MsgCS_AnswerPurgeVote* other) {
  if (other != this) {
    std::swap(m_lanswer_, other->m_lanswer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_AnswerPurgeVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_AnswerPurgeVote_descriptor_;
  metadata.reflection = MsgCS_AnswerPurgeVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_WaitingUserTicketReq::kMNTypeFieldNumber;
const int MsgCS_WaitingUserTicketReq::kMBValueFieldNumber;
#endif  // !_MSC_VER

MsgCS_WaitingUserTicketReq::MsgCS_WaitingUserTicketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_WaitingUserTicketReq::InitAsDefaultInstance() {
}

MsgCS_WaitingUserTicketReq::MsgCS_WaitingUserTicketReq(const MsgCS_WaitingUserTicketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_WaitingUserTicketReq::SharedCtor() {
  _cached_size_ = 0;
  m_ntype_ = 0;
  m_bvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_WaitingUserTicketReq::~MsgCS_WaitingUserTicketReq() {
  SharedDtor();
}

void MsgCS_WaitingUserTicketReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_WaitingUserTicketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_WaitingUserTicketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_WaitingUserTicketReq_descriptor_;
}

const MsgCS_WaitingUserTicketReq& MsgCS_WaitingUserTicketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_WaitingUserTicketReq* MsgCS_WaitingUserTicketReq::default_instance_ = NULL;

MsgCS_WaitingUserTicketReq* MsgCS_WaitingUserTicketReq::New() const {
  return new MsgCS_WaitingUserTicketReq;
}

void MsgCS_WaitingUserTicketReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntype_ = 0;
    m_bvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_WaitingUserTicketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bValue;
        break;
      }
      
      // required sint32 m_bValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bvalue_)));
          set_has_m_bvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_WaitingUserTicketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntype(), output);
  }
  
  // required sint32 m_bValue = 2;
  if (has_m_bvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_WaitingUserTicketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ntype(), target);
  }
  
  // required sint32 m_bValue = 2;
  if (has_m_bvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_bvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_WaitingUserTicketReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nType = 1;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint32 m_bValue = 2;
    if (has_m_bvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_WaitingUserTicketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_WaitingUserTicketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_WaitingUserTicketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_WaitingUserTicketReq::MergeFrom(const MsgCS_WaitingUserTicketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_bvalue()) {
      set_m_bvalue(from.m_bvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_WaitingUserTicketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_WaitingUserTicketReq::CopyFrom(const MsgCS_WaitingUserTicketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_WaitingUserTicketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgCS_WaitingUserTicketReq::Swap(MsgCS_WaitingUserTicketReq* other) {
  if (other != this) {
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(m_bvalue_, other->m_bvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_WaitingUserTicketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_WaitingUserTicketReq_descriptor_;
  metadata.reflection = MsgCS_WaitingUserTicketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCS_UpdateWaitingUserInfoReq::MsgCS_UpdateWaitingUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_UpdateWaitingUserInfoReq::InitAsDefaultInstance() {
}

MsgCS_UpdateWaitingUserInfoReq::MsgCS_UpdateWaitingUserInfoReq(const MsgCS_UpdateWaitingUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_UpdateWaitingUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_UpdateWaitingUserInfoReq::~MsgCS_UpdateWaitingUserInfoReq() {
  SharedDtor();
}

void MsgCS_UpdateWaitingUserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_UpdateWaitingUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_UpdateWaitingUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_UpdateWaitingUserInfoReq_descriptor_;
}

const MsgCS_UpdateWaitingUserInfoReq& MsgCS_UpdateWaitingUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_UpdateWaitingUserInfoReq* MsgCS_UpdateWaitingUserInfoReq::default_instance_ = NULL;

MsgCS_UpdateWaitingUserInfoReq* MsgCS_UpdateWaitingUserInfoReq::New() const {
  return new MsgCS_UpdateWaitingUserInfoReq;
}

void MsgCS_UpdateWaitingUserInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_UpdateWaitingUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCS_UpdateWaitingUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_UpdateWaitingUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_UpdateWaitingUserInfoReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_UpdateWaitingUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_UpdateWaitingUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_UpdateWaitingUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_UpdateWaitingUserInfoReq::MergeFrom(const MsgCS_UpdateWaitingUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_UpdateWaitingUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_UpdateWaitingUserInfoReq::CopyFrom(const MsgCS_UpdateWaitingUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_UpdateWaitingUserInfoReq::IsInitialized() const {
  
  return true;
}

void MsgCS_UpdateWaitingUserInfoReq::Swap(MsgCS_UpdateWaitingUserInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_UpdateWaitingUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_UpdateWaitingUserInfoReq_descriptor_;
  metadata.reflection = MsgCS_UpdateWaitingUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_SoundType::kMLSoundTypeFieldNumber;
#endif  // !_MSC_VER

MsgCS_SoundType::MsgCS_SoundType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_SoundType::InitAsDefaultInstance() {
}

MsgCS_SoundType::MsgCS_SoundType(const MsgCS_SoundType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_SoundType::SharedCtor() {
  _cached_size_ = 0;
  m_lsoundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_SoundType::~MsgCS_SoundType() {
  SharedDtor();
}

void MsgCS_SoundType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_SoundType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_SoundType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_SoundType_descriptor_;
}

const MsgCS_SoundType& MsgCS_SoundType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_SoundType* MsgCS_SoundType::default_instance_ = NULL;

MsgCS_SoundType* MsgCS_SoundType::New() const {
  return new MsgCS_SoundType;
}

void MsgCS_SoundType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lsoundtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_SoundType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lSoundType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_SoundType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lSoundType = 1;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lsoundtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_SoundType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lSoundType = 1;
  if (has_m_lsoundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lsoundtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_SoundType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lSoundType = 1;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_SoundType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_SoundType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_SoundType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_SoundType::MergeFrom(const MsgCS_SoundType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_SoundType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_SoundType::CopyFrom(const MsgCS_SoundType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_SoundType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_SoundType::Swap(MsgCS_SoundType* other) {
  if (other != this) {
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_SoundType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_SoundType_descriptor_;
  metadata.reflection = MsgCS_SoundType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_ExitQue::kMLExitFieldNumber;
const int MsgCS_ExitQue::kMBActionFieldNumber;
#endif  // !_MSC_VER

MsgCS_ExitQue::MsgCS_ExitQue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_ExitQue::InitAsDefaultInstance() {
}

MsgCS_ExitQue::MsgCS_ExitQue(const MsgCS_ExitQue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_ExitQue::SharedCtor() {
  _cached_size_ = 0;
  m_lexit_ = 0;
  m_baction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_ExitQue::~MsgCS_ExitQue() {
  SharedDtor();
}

void MsgCS_ExitQue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_ExitQue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_ExitQue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_ExitQue_descriptor_;
}

const MsgCS_ExitQue& MsgCS_ExitQue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_ExitQue* MsgCS_ExitQue::default_instance_ = NULL;

MsgCS_ExitQue* MsgCS_ExitQue::New() const {
  return new MsgCS_ExitQue;
}

void MsgCS_ExitQue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lexit_ = 0;
    m_baction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_ExitQue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lExit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bAction;
        break;
      }
      
      // required sint32 m_bAction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_baction_)));
          set_has_m_baction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_ExitQue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lexit(), output);
  }
  
  // required sint32 m_bAction = 2;
  if (has_m_baction()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_baction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_ExitQue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lexit(), target);
  }
  
  // required sint32 m_bAction = 2;
  if (has_m_baction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_baction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_ExitQue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lExit = 1;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_bAction = 2;
    if (has_m_baction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_baction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_ExitQue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_ExitQue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_ExitQue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_ExitQue::MergeFrom(const MsgCS_ExitQue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_baction()) {
      set_m_baction(from.m_baction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_ExitQue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_ExitQue::CopyFrom(const MsgCS_ExitQue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_ExitQue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgCS_ExitQue::Swap(MsgCS_ExitQue* other) {
  if (other != this) {
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_baction_, other->m_baction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_ExitQue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_ExitQue_descriptor_;
  metadata.reflection = MsgCS_ExitQue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_Continue::kMLExitFieldNumber;
#endif  // !_MSC_VER

MsgCS_Continue::MsgCS_Continue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_Continue::InitAsDefaultInstance() {
}

MsgCS_Continue::MsgCS_Continue(const MsgCS_Continue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_Continue::SharedCtor() {
  _cached_size_ = 0;
  m_lexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_Continue::~MsgCS_Continue() {
  SharedDtor();
}

void MsgCS_Continue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_Continue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_Continue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_Continue_descriptor_;
}

const MsgCS_Continue& MsgCS_Continue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_Continue* MsgCS_Continue::default_instance_ = NULL;

MsgCS_Continue* MsgCS_Continue::New() const {
  return new MsgCS_Continue;
}

void MsgCS_Continue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lexit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_Continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lExit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_Continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lexit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_Continue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lexit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_Continue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lExit = 1;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_Continue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_Continue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_Continue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_Continue::MergeFrom(const MsgCS_Continue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_Continue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_Continue::CopyFrom(const MsgCS_Continue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_Continue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_Continue::Swap(MsgCS_Continue* other) {
  if (other != this) {
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_Continue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_Continue_descriptor_;
  metadata.reflection = MsgCS_Continue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_RuleSet::kMNRuleIdxFieldNumber;
#endif  // !_MSC_VER

MsgCS_RuleSet::MsgCS_RuleSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_RuleSet::InitAsDefaultInstance() {
}

MsgCS_RuleSet::MsgCS_RuleSet(const MsgCS_RuleSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_RuleSet::SharedCtor() {
  _cached_size_ = 0;
  m_nruleidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_RuleSet::~MsgCS_RuleSet() {
  SharedDtor();
}

void MsgCS_RuleSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_RuleSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_RuleSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_RuleSet_descriptor_;
}

const MsgCS_RuleSet& MsgCS_RuleSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_RuleSet* MsgCS_RuleSet::default_instance_ = NULL;

MsgCS_RuleSet* MsgCS_RuleSet::New() const {
  return new MsgCS_RuleSet;
}

void MsgCS_RuleSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nruleidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_RuleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRuleIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nruleidx_)));
          set_has_m_nruleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_RuleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nruleidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_RuleSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nruleidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_RuleSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRuleIdx = 1;
    if (has_m_nruleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nruleidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_RuleSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_RuleSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_RuleSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_RuleSet::MergeFrom(const MsgCS_RuleSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nruleidx()) {
      set_m_nruleidx(from.m_nruleidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_RuleSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_RuleSet::CopyFrom(const MsgCS_RuleSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_RuleSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_RuleSet::Swap(MsgCS_RuleSet* other) {
  if (other != this) {
    std::swap(m_nruleidx_, other->m_nruleidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_RuleSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_RuleSet_descriptor_;
  metadata.reflection = MsgCS_RuleSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCS_GameMasterCall::MsgCS_GameMasterCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_GameMasterCall::InitAsDefaultInstance() {
}

MsgCS_GameMasterCall::MsgCS_GameMasterCall(const MsgCS_GameMasterCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_GameMasterCall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_GameMasterCall::~MsgCS_GameMasterCall() {
  SharedDtor();
}

void MsgCS_GameMasterCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_GameMasterCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_GameMasterCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_GameMasterCall_descriptor_;
}

const MsgCS_GameMasterCall& MsgCS_GameMasterCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_GameMasterCall* MsgCS_GameMasterCall::default_instance_ = NULL;

MsgCS_GameMasterCall* MsgCS_GameMasterCall::New() const {
  return new MsgCS_GameMasterCall;
}

void MsgCS_GameMasterCall::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_GameMasterCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCS_GameMasterCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_GameMasterCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_GameMasterCall::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_GameMasterCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_GameMasterCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_GameMasterCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_GameMasterCall::MergeFrom(const MsgCS_GameMasterCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_GameMasterCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_GameMasterCall::CopyFrom(const MsgCS_GameMasterCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_GameMasterCall::IsInitialized() const {
  
  return true;
}

void MsgCS_GameMasterCall::Swap(MsgCS_GameMasterCall* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_GameMasterCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_GameMasterCall_descriptor_;
  metadata.reflection = MsgCS_GameMasterCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_FieldReserved::kMNReserved1FieldNumber;
const int MsgCS_FieldReserved::kMNReserved2FieldNumber;
#endif  // !_MSC_VER

MsgCS_FieldReserved::MsgCS_FieldReserved()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_FieldReserved::InitAsDefaultInstance() {
}

MsgCS_FieldReserved::MsgCS_FieldReserved(const MsgCS_FieldReserved& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_FieldReserved::SharedCtor() {
  _cached_size_ = 0;
  m_nreserved1_ = 0;
  m_nreserved2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_FieldReserved::~MsgCS_FieldReserved() {
  SharedDtor();
}

void MsgCS_FieldReserved::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_FieldReserved::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_FieldReserved::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_FieldReserved_descriptor_;
}

const MsgCS_FieldReserved& MsgCS_FieldReserved::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_FieldReserved* MsgCS_FieldReserved::default_instance_ = NULL;

MsgCS_FieldReserved* MsgCS_FieldReserved::New() const {
  return new MsgCS_FieldReserved;
}

void MsgCS_FieldReserved::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nreserved1_ = 0;
    m_nreserved2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_FieldReserved::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nReserved1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserved1_)));
          set_has_m_nreserved1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nReserved2;
        break;
      }
      
      // required int32 m_nReserved2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nReserved2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserved2_)));
          set_has_m_nreserved2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_FieldReserved::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nReserved1 = 1;
  if (has_m_nreserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nreserved1(), output);
  }
  
  // required int32 m_nReserved2 = 2;
  if (has_m_nreserved2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nreserved2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_FieldReserved::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nReserved1 = 1;
  if (has_m_nreserved1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nreserved1(), target);
  }
  
  // required int32 m_nReserved2 = 2;
  if (has_m_nreserved2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nreserved2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_FieldReserved::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nReserved1 = 1;
    if (has_m_nreserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserved1());
    }
    
    // required int32 m_nReserved2 = 2;
    if (has_m_nreserved2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserved2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_FieldReserved::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_FieldReserved* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_FieldReserved*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_FieldReserved::MergeFrom(const MsgCS_FieldReserved& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nreserved1()) {
      set_m_nreserved1(from.m_nreserved1());
    }
    if (from.has_m_nreserved2()) {
      set_m_nreserved2(from.m_nreserved2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_FieldReserved::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_FieldReserved::CopyFrom(const MsgCS_FieldReserved& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_FieldReserved::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgCS_FieldReserved::Swap(MsgCS_FieldReserved* other) {
  if (other != this) {
    std::swap(m_nreserved1_, other->m_nreserved1_);
    std::swap(m_nreserved2_, other->m_nreserved2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_FieldReserved::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_FieldReserved_descriptor_;
  metadata.reflection = MsgCS_FieldReserved_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_JokboSet::kMLKey1FieldNumber;
const int MsgCS_JokboSet::kMLKey2FieldNumber;
const int MsgCS_JokboSet::kMLKey3FieldNumber;
const int MsgCS_JokboSet::kMLKey4FieldNumber;
const int MsgCS_JokboSet::kMLKey5FieldNumber;
#endif  // !_MSC_VER

MsgCS_JokboSet::MsgCS_JokboSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_JokboSet::InitAsDefaultInstance() {
}

MsgCS_JokboSet::MsgCS_JokboSet(const MsgCS_JokboSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_JokboSet::SharedCtor() {
  _cached_size_ = 0;
  m_lkey1_ = 0;
  m_lkey2_ = 0;
  m_lkey3_ = 0;
  m_lkey4_ = 0;
  m_lkey5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_JokboSet::~MsgCS_JokboSet() {
  SharedDtor();
}

void MsgCS_JokboSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_JokboSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_JokboSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_JokboSet_descriptor_;
}

const MsgCS_JokboSet& MsgCS_JokboSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_JokboSet* MsgCS_JokboSet::default_instance_ = NULL;

MsgCS_JokboSet* MsgCS_JokboSet::New() const {
  return new MsgCS_JokboSet;
}

void MsgCS_JokboSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lkey1_ = 0;
    m_lkey2_ = 0;
    m_lkey3_ = 0;
    m_lkey4_ = 0;
    m_lkey5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_JokboSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lKey1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey1_)));
          set_has_m_lkey1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lKey2;
        break;
      }
      
      // required sint32 m_lKey2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey2_)));
          set_has_m_lkey2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lKey3;
        break;
      }
      
      // required sint32 m_lKey3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey3_)));
          set_has_m_lkey3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lKey4;
        break;
      }
      
      // required sint32 m_lKey4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey4_)));
          set_has_m_lkey4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lKey5;
        break;
      }
      
      // required sint32 m_lKey5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey5_)));
          set_has_m_lkey5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_JokboSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lKey1 = 1;
  if (has_m_lkey1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lkey1(), output);
  }
  
  // required sint32 m_lKey2 = 2;
  if (has_m_lkey2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lkey2(), output);
  }
  
  // required sint32 m_lKey3 = 3;
  if (has_m_lkey3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lkey3(), output);
  }
  
  // required sint32 m_lKey4 = 4;
  if (has_m_lkey4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lkey4(), output);
  }
  
  // required sint32 m_lKey5 = 5;
  if (has_m_lkey5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lkey5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_JokboSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lKey1 = 1;
  if (has_m_lkey1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lkey1(), target);
  }
  
  // required sint32 m_lKey2 = 2;
  if (has_m_lkey2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lkey2(), target);
  }
  
  // required sint32 m_lKey3 = 3;
  if (has_m_lkey3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lkey3(), target);
  }
  
  // required sint32 m_lKey4 = 4;
  if (has_m_lkey4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lkey4(), target);
  }
  
  // required sint32 m_lKey5 = 5;
  if (has_m_lkey5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->m_lkey5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_JokboSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lKey1 = 1;
    if (has_m_lkey1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey1());
    }
    
    // required sint32 m_lKey2 = 2;
    if (has_m_lkey2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey2());
    }
    
    // required sint32 m_lKey3 = 3;
    if (has_m_lkey3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey3());
    }
    
    // required sint32 m_lKey4 = 4;
    if (has_m_lkey4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey4());
    }
    
    // required sint32 m_lKey5 = 5;
    if (has_m_lkey5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_JokboSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_JokboSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_JokboSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_JokboSet::MergeFrom(const MsgCS_JokboSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lkey1()) {
      set_m_lkey1(from.m_lkey1());
    }
    if (from.has_m_lkey2()) {
      set_m_lkey2(from.m_lkey2());
    }
    if (from.has_m_lkey3()) {
      set_m_lkey3(from.m_lkey3());
    }
    if (from.has_m_lkey4()) {
      set_m_lkey4(from.m_lkey4());
    }
    if (from.has_m_lkey5()) {
      set_m_lkey5(from.m_lkey5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_JokboSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_JokboSet::CopyFrom(const MsgCS_JokboSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_JokboSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MsgCS_JokboSet::Swap(MsgCS_JokboSet* other) {
  if (other != this) {
    std::swap(m_lkey1_, other->m_lkey1_);
    std::swap(m_lkey2_, other->m_lkey2_);
    std::swap(m_lkey3_, other->m_lkey3_);
    std::swap(m_lkey4_, other->m_lkey4_);
    std::swap(m_lkey5_, other->m_lkey5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_JokboSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_JokboSet_descriptor_;
  metadata.reflection = MsgCS_JokboSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_TestKeySetting::kMNCharFieldNumber;
#endif  // !_MSC_VER

MsgCS_TestKeySetting::MsgCS_TestKeySetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_TestKeySetting::InitAsDefaultInstance() {
}

MsgCS_TestKeySetting::MsgCS_TestKeySetting(const MsgCS_TestKeySetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_TestKeySetting::SharedCtor() {
  _cached_size_ = 0;
  m_nchar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_TestKeySetting::~MsgCS_TestKeySetting() {
  SharedDtor();
}

void MsgCS_TestKeySetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_TestKeySetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_TestKeySetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_TestKeySetting_descriptor_;
}

const MsgCS_TestKeySetting& MsgCS_TestKeySetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_TestKeySetting* MsgCS_TestKeySetting::default_instance_ = NULL;

MsgCS_TestKeySetting* MsgCS_TestKeySetting::New() const {
  return new MsgCS_TestKeySetting;
}

void MsgCS_TestKeySetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nchar_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_TestKeySetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_nChar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_nchar_)));
          set_has_m_nchar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_TestKeySetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_nChar = 1;
  if (has_m_nchar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_nchar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_TestKeySetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_nChar = 1;
  if (has_m_nchar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_nchar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_TestKeySetting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_nChar = 1;
    if (has_m_nchar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_nchar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_TestKeySetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_TestKeySetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_TestKeySetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_TestKeySetting::MergeFrom(const MsgCS_TestKeySetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nchar()) {
      set_m_nchar(from.m_nchar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_TestKeySetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_TestKeySetting::CopyFrom(const MsgCS_TestKeySetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_TestKeySetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_TestKeySetting::Swap(MsgCS_TestKeySetting* other) {
  if (other != this) {
    std::swap(m_nchar_, other->m_nchar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_TestKeySetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_TestKeySetting_descriptor_;
  metadata.reflection = MsgCS_TestKeySetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_CheckNotice::kMNTypeFieldNumber;
#endif  // !_MSC_VER

MsgCS_CheckNotice::MsgCS_CheckNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_CheckNotice::InitAsDefaultInstance() {
}

MsgCS_CheckNotice::MsgCS_CheckNotice(const MsgCS_CheckNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_CheckNotice::SharedCtor() {
  _cached_size_ = 0;
  m_ntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_CheckNotice::~MsgCS_CheckNotice() {
  SharedDtor();
}

void MsgCS_CheckNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_CheckNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_CheckNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_CheckNotice_descriptor_;
}

const MsgCS_CheckNotice& MsgCS_CheckNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_CheckNotice* MsgCS_CheckNotice::default_instance_ = NULL;

MsgCS_CheckNotice* MsgCS_CheckNotice::New() const {
  return new MsgCS_CheckNotice;
}

void MsgCS_CheckNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_CheckNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_CheckNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_CheckNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ntype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_CheckNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nType = 1;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_CheckNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_CheckNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_CheckNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_CheckNotice::MergeFrom(const MsgCS_CheckNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_CheckNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_CheckNotice::CopyFrom(const MsgCS_CheckNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_CheckNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_CheckNotice::Swap(MsgCS_CheckNotice* other) {
  if (other != this) {
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_CheckNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_CheckNotice_descriptor_;
  metadata.reflection = MsgCS_CheckNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCS_Ack::kMNTagIDFieldNumber;
#endif  // !_MSC_VER

MsgCS_Ack::MsgCS_Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_Ack::InitAsDefaultInstance() {
}

MsgCS_Ack::MsgCS_Ack(const MsgCS_Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_Ack::SharedCtor() {
  _cached_size_ = 0;
  m_ntagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_Ack::~MsgCS_Ack() {
  SharedDtor();
}

void MsgCS_Ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_Ack_descriptor_;
}

const MsgCS_Ack& MsgCS_Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_Ack* MsgCS_Ack::default_instance_ = NULL;

MsgCS_Ack* MsgCS_Ack::New() const {
  return new MsgCS_Ack;
}

void MsgCS_Ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntagid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nTagID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntagid_)));
          set_has_m_ntagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCS_Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nTagID = 1;
  if (has_m_ntagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntagid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nTagID = 1;
  if (has_m_ntagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ntagid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_Ack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nTagID = 1;
    if (has_m_ntagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntagid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_Ack::MergeFrom(const MsgCS_Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntagid()) {
      set_m_ntagid(from.m_ntagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_Ack::CopyFrom(const MsgCS_Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_Ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCS_Ack::Swap(MsgCS_Ack* other) {
  if (other != this) {
    std::swap(m_ntagid_, other->m_ntagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_Ack_descriptor_;
  metadata.reflection = MsgCS_Ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCS_Ping::MsgCS_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCS_Ping::InitAsDefaultInstance() {
}

MsgCS_Ping::MsgCS_Ping(const MsgCS_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCS_Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCS_Ping::~MsgCS_Ping() {
  SharedDtor();
}

void MsgCS_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCS_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCS_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCS_Ping_descriptor_;
}

const MsgCS_Ping& MsgCS_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgCS_Ping* MsgCS_Ping::default_instance_ = NULL;

MsgCS_Ping* MsgCS_Ping::New() const {
  return new MsgCS_Ping;
}

void MsgCS_Ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCS_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCS_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCS_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCS_Ping::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCS_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCS_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCS_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCS_Ping::MergeFrom(const MsgCS_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCS_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCS_Ping::CopyFrom(const MsgCS_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCS_Ping::IsInitialized() const {
  
  return true;
}

void MsgCS_Ping::Swap(MsgCS_Ping* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCS_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCS_Ping_descriptor_;
  metadata.reflection = MsgCS_Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_UserJoinAns::kMLStateFieldNumber;
const int MsgSC_UserJoinAns::kMNEnterFieldNumber;
const int MsgSC_UserJoinAns::kMNSetFieldNumber;
const int MsgSC_UserJoinAns::kMLChannelIdxFieldNumber;
const int MsgSC_UserJoinAns::kMLOwnerUSNFieldNumber;
const int MsgSC_UserJoinAns::kMLBossUSNFieldNumber;
const int MsgSC_UserJoinAns::kMNRoomPurgeCntFieldNumber;
const int MsgSC_UserJoinAns::kMOptionFieldNumber;
#endif  // !_MSC_VER

MsgSC_UserJoinAns::MsgSC_UserJoinAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_UserJoinAns::InitAsDefaultInstance() {
  m_option_ = const_cast< ::Game_Poker::Option*>(&::Game_Poker::Option::default_instance());
}

MsgSC_UserJoinAns::MsgSC_UserJoinAns(const MsgSC_UserJoinAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_UserJoinAns::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_nenter_ = 0;
  m_nset_ = 0;
  m_lchannel_idx_ = 0;
  m_lownerusn_ = 0;
  m_lbossusn_ = 0;
  m_nroompurgecnt_ = 0;
  m_option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_UserJoinAns::~MsgSC_UserJoinAns() {
  SharedDtor();
}

void MsgSC_UserJoinAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_option_;
  }
}

void MsgSC_UserJoinAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_UserJoinAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_UserJoinAns_descriptor_;
}

const MsgSC_UserJoinAns& MsgSC_UserJoinAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_UserJoinAns* MsgSC_UserJoinAns::default_instance_ = NULL;

MsgSC_UserJoinAns* MsgSC_UserJoinAns::New() const {
  return new MsgSC_UserJoinAns;
}

void MsgSC_UserJoinAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_nenter_ = 0;
    m_nset_ = 0;
    m_lchannel_idx_ = 0;
    m_lownerusn_ = 0;
    m_lbossusn_ = 0;
    m_nroompurgecnt_ = 0;
    if (has_m_option()) {
      if (m_option_ != NULL) m_option_->::Game_Poker::Option::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_UserJoinAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nEnter;
        break;
      }
      
      // required int32 m_nEnter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nenter_)));
          set_has_m_nenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nSet;
        break;
      }
      
      // required int32 m_nSet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nset_)));
          set_has_m_nset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lChannel_idx;
        break;
      }
      
      // required int32 m_lChannel_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChannel_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchannel_idx_)));
          set_has_m_lchannel_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lBossUSN;
        break;
      }
      
      // required sint32 m_lBossUSN = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBossUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_nRoomPurgeCnt;
        break;
      }
      
      // required int32 m_nRoomPurgeCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRoomPurgeCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nroompurgecnt_)));
          set_has_m_nroompurgecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_option;
        break;
      }
      
      // required .Game_Poker.Option m_option = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_UserJoinAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // required int32 m_nEnter = 2;
  if (has_m_nenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nenter(), output);
  }
  
  // required int32 m_nSet = 3;
  if (has_m_nset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_nset(), output);
  }
  
  // required int32 m_lChannel_idx = 4;
  if (has_m_lchannel_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lchannel_idx(), output);
  }
  
  // required sint32 m_lOwnerUSN = 5;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lownerusn(), output);
  }
  
  // required sint32 m_lBossUSN = 6;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lbossusn(), output);
  }
  
  // required int32 m_nRoomPurgeCnt = 7;
  if (has_m_nroompurgecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_nroompurgecnt(), output);
  }
  
  // required .Game_Poker.Option m_option = 8;
  if (has_m_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_option(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_UserJoinAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lstate(), target);
  }
  
  // required int32 m_nEnter = 2;
  if (has_m_nenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nenter(), target);
  }
  
  // required int32 m_nSet = 3;
  if (has_m_nset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_nset(), target);
  }
  
  // required int32 m_lChannel_idx = 4;
  if (has_m_lchannel_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lchannel_idx(), target);
  }
  
  // required sint32 m_lOwnerUSN = 5;
  if (has_m_lownerusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->m_lownerusn(), target);
  }
  
  // required sint32 m_lBossUSN = 6;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_lbossusn(), target);
  }
  
  // required int32 m_nRoomPurgeCnt = 7;
  if (has_m_nroompurgecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_nroompurgecnt(), target);
  }
  
  // required .Game_Poker.Option m_option = 8;
  if (has_m_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_option(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_UserJoinAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required int32 m_nEnter = 2;
    if (has_m_nenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nenter());
    }
    
    // required int32 m_nSet = 3;
    if (has_m_nset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nset());
    }
    
    // required int32 m_lChannel_idx = 4;
    if (has_m_lchannel_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchannel_idx());
    }
    
    // required sint32 m_lOwnerUSN = 5;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required sint32 m_lBossUSN = 6;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nRoomPurgeCnt = 7;
    if (has_m_nroompurgecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nroompurgecnt());
    }
    
    // required .Game_Poker.Option m_option = 8;
    if (has_m_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_option());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_UserJoinAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_UserJoinAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_UserJoinAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_UserJoinAns::MergeFrom(const MsgSC_UserJoinAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_nenter()) {
      set_m_nenter(from.m_nenter());
    }
    if (from.has_m_nset()) {
      set_m_nset(from.m_nset());
    }
    if (from.has_m_lchannel_idx()) {
      set_m_lchannel_idx(from.m_lchannel_idx());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_nroompurgecnt()) {
      set_m_nroompurgecnt(from.m_nroompurgecnt());
    }
    if (from.has_m_option()) {
      mutable_m_option()->::Game_Poker::Option::MergeFrom(from.m_option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_UserJoinAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_UserJoinAns::CopyFrom(const MsgSC_UserJoinAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_UserJoinAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_m_option()) {
    if (!this->m_option().IsInitialized()) return false;
  }
  return true;
}

void MsgSC_UserJoinAns::Swap(MsgSC_UserJoinAns* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_nenter_, other->m_nenter_);
    std::swap(m_nset_, other->m_nset_);
    std::swap(m_lchannel_idx_, other->m_lchannel_idx_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_nroompurgecnt_, other->m_nroompurgecnt_);
    std::swap(m_option_, other->m_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_UserJoinAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_UserJoinAns_descriptor_;
  metadata.reflection = MsgSC_UserJoinAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_UserJoinErr::kMLUSNFieldNumber;
const int MsgSC_UserJoinErr::kMLErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgSC_UserJoinErr::MsgSC_UserJoinErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_UserJoinErr::InitAsDefaultInstance() {
}

MsgSC_UserJoinErr::MsgSC_UserJoinErr(const MsgSC_UserJoinErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_UserJoinErr::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_UserJoinErr::~MsgSC_UserJoinErr() {
  SharedDtor();
}

void MsgSC_UserJoinErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_UserJoinErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_UserJoinErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_UserJoinErr_descriptor_;
}

const MsgSC_UserJoinErr& MsgSC_UserJoinErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_UserJoinErr* MsgSC_UserJoinErr::default_instance_ = NULL;

MsgSC_UserJoinErr* MsgSC_UserJoinErr::New() const {
  return new MsgSC_UserJoinErr;
}

void MsgSC_UserJoinErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_UserJoinErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lErrorCode;
        break;
      }
      
      // required sint32 m_lErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lerrorcode_)));
          set_has_m_lerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_UserJoinErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lErrorCode = 2;
  if (has_m_lerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lerrorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_UserJoinErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lErrorCode = 2;
  if (has_m_lerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lerrorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_UserJoinErr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lErrorCode = 2;
    if (has_m_lerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lerrorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_UserJoinErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_UserJoinErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_UserJoinErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_UserJoinErr::MergeFrom(const MsgSC_UserJoinErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lerrorcode()) {
      set_m_lerrorcode(from.m_lerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_UserJoinErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_UserJoinErr::CopyFrom(const MsgSC_UserJoinErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_UserJoinErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSC_UserJoinErr::Swap(MsgSC_UserJoinErr* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lerrorcode_, other->m_lerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_UserJoinErr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_UserJoinErr_descriptor_;
  metadata.reflection = MsgSC_UserJoinErr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_UserDisconnect::kMLUSNFieldNumber;
const int MsgSC_UserDisconnect::kMUinfoFieldNumber;
const int MsgSC_UserDisconnect::kMLStateFieldNumber;
const int MsgSC_UserDisconnect::kMLOwnerUSNFieldNumber;
#endif  // !_MSC_VER

MsgSC_UserDisconnect::MsgSC_UserDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_UserDisconnect::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::Game_Poker::UserInfo*>(&::Game_Poker::UserInfo::default_instance());
}

MsgSC_UserDisconnect::MsgSC_UserDisconnect(const MsgSC_UserDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_UserDisconnect::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_uinfo_ = NULL;
  m_lstate_ = 0;
  m_lownerusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_UserDisconnect::~MsgSC_UserDisconnect() {
  SharedDtor();
}

void MsgSC_UserDisconnect::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
  }
}

void MsgSC_UserDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_UserDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_UserDisconnect_descriptor_;
}

const MsgSC_UserDisconnect& MsgSC_UserDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_UserDisconnect* MsgSC_UserDisconnect::default_instance_ = NULL;

MsgSC_UserDisconnect* MsgSC_UserDisconnect::New() const {
  return new MsgSC_UserDisconnect;
}

void MsgSC_UserDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::UserInfo::Clear();
    }
    m_lstate_ = 0;
    m_lownerusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_UserDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_uinfo;
        break;
      }
      
      // required .Game_Poker.UserInfo m_uinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_UserDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required .Game_Poker.UserInfo m_uinfo = 2;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_uinfo(), output);
  }
  
  // required sint32 m_lState = 3;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lstate(), output);
  }
  
  // required sint32 m_lOwnerUSN = 4;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lownerusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_UserDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required .Game_Poker.UserInfo m_uinfo = 2;
  if (has_m_uinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_uinfo(), target);
  }
  
  // required sint32 m_lState = 3;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lstate(), target);
  }
  
  // required sint32 m_lOwnerUSN = 4;
  if (has_m_lownerusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lownerusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_UserDisconnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required .Game_Poker.UserInfo m_uinfo = 2;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
    // required sint32 m_lState = 3;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint32 m_lOwnerUSN = 4;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_UserDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_UserDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_UserDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_UserDisconnect::MergeFrom(const MsgSC_UserDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::Game_Poker::UserInfo::MergeFrom(from.m_uinfo());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_UserDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_UserDisconnect::CopyFrom(const MsgSC_UserDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_UserDisconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  return true;
}

void MsgSC_UserDisconnect::Swap(MsgSC_UserDisconnect* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_UserDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_UserDisconnect_descriptor_;
  metadata.reflection = MsgSC_UserDisconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_CardData::kMNDealCntFieldNumber;
const int MsgSC_CardData::kMLCardsDealtFieldNumber;
const int MsgSC_CardData::kMTblCardFieldNumber;
const int MsgSC_CardData::kMTblMoneyFieldNumber;
const int MsgSC_CardData::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_CardData::MsgSC_CardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_CardData::InitAsDefaultInstance() {
}

MsgSC_CardData::MsgSC_CardData(const MsgSC_CardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_CardData::SharedCtor() {
  _cached_size_ = 0;
  m_ndealcnt_ = 0;
  m_lcardsdealt_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_CardData::~MsgSC_CardData() {
  SharedDtor();
}

void MsgSC_CardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_CardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_CardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_CardData_descriptor_;
}

const MsgSC_CardData& MsgSC_CardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_CardData* MsgSC_CardData::default_instance_ = NULL;

MsgSC_CardData* MsgSC_CardData::New() const {
  return new MsgSC_CardData;
}

void MsgSC_CardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ndealcnt_ = 0;
    m_lcardsdealt_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_CardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nDealCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ndealcnt_)));
          set_has_m_ndealcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .Game_Poker.Cards m_tblCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tblCard;
        if (input->ExpectTag(34)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .Game_Poker.Money m_tblMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblMoney;
        if (input->ExpectTag(40)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_CardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nDealCnt = 1;
  if (has_m_ndealcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ndealcnt(), output);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lcardsdealt(), output);
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 3;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_tblcard(i), output);
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 4;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 5;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_CardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nDealCnt = 1;
  if (has_m_ndealcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ndealcnt(), target);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lcardsdealt(), target);
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 3;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_tblcard(i), target);
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 4;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_tblmoney(i), target);
  }
  
  // required sint64 m_llPoolMoney = 5;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_llpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_CardData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nDealCnt = 1;
    if (has_m_ndealcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ndealcnt());
    }
    
    // required sint32 m_lCardsDealt = 2;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
    // required sint64 m_llPoolMoney = 5;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .Game_Poker.Cards m_tblCard = 3;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 4;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_CardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_CardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_CardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_CardData::MergeFrom(const MsgSC_CardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ndealcnt()) {
      set_m_ndealcnt(from.m_ndealcnt());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_CardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_CardData::CopyFrom(const MsgSC_CardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_CardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_CardData::Swap(MsgSC_CardData* other) {
  if (other != this) {
    std::swap(m_ndealcnt_, other->m_ndealcnt_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_CardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_CardData_descriptor_;
  metadata.reflection = MsgSC_CardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_EntryAns::kMLUSNFieldNumber;
const int MsgSC_EntryAns::kMNIndexFieldNumber;
const int MsgSC_EntryAns::kMLOwnerUSNFieldNumber;
const int MsgSC_EntryAns::kMTblUIFieldNumber;
const int MsgSC_EntryAns::kMTblMoneyFieldNumber;
const int MsgSC_EntryAns::kMBWelcomeSoundFieldNumber;
const int MsgSC_EntryAns::kMLObserveCntFieldNumber;
#endif  // !_MSC_VER

MsgSC_EntryAns::MsgSC_EntryAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_EntryAns::InitAsDefaultInstance() {
}

MsgSC_EntryAns::MsgSC_EntryAns(const MsgSC_EntryAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_EntryAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lownerusn_ = 0;
  m_bwelcomesound_ = 0;
  m_lobservecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_EntryAns::~MsgSC_EntryAns() {
  SharedDtor();
}

void MsgSC_EntryAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_EntryAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_EntryAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_EntryAns_descriptor_;
}

const MsgSC_EntryAns& MsgSC_EntryAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_EntryAns* MsgSC_EntryAns::default_instance_ = NULL;

MsgSC_EntryAns* MsgSC_EntryAns::New() const {
  return new MsgSC_EntryAns;
}

void MsgSC_EntryAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lownerusn_ = 0;
    m_bwelcomesound_ = 0;
    m_lobservecnt_ = 0;
  }
  m_tblui_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_EntryAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblUI;
        break;
      }
      
      // repeated .Game_Poker.UserInfo m_tblUI = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblUI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblUI;
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .Game_Poker.Money m_tblMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        if (input->ExpectTag(48)) goto parse_m_bWelcomeSound;
        break;
      }
      
      // required sint32 m_bWelcomeSound = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bWelcomeSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bwelcomesound_)));
          set_has_m_bwelcomesound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lObserveCnt;
        break;
      }
      
      // required sint32 m_lObserveCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lObserveCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lobservecnt_)));
          set_has_m_lobservecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_EntryAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lownerusn(), output);
  }
  
  // repeated .Game_Poker.UserInfo m_tblUI = 4;
  for (int i = 0; i < this->m_tblui_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_tblui(i), output);
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_tblmoney(i), output);
  }
  
  // required sint32 m_bWelcomeSound = 6;
  if (has_m_bwelcomesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_bwelcomesound(), output);
  }
  
  // required sint32 m_lObserveCnt = 7;
  if (has_m_lobservecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lobservecnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_EntryAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lownerusn(), target);
  }
  
  // repeated .Game_Poker.UserInfo m_tblUI = 4;
  for (int i = 0; i < this->m_tblui_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_tblui(i), target);
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_tblmoney(i), target);
  }
  
  // required sint32 m_bWelcomeSound = 6;
  if (has_m_bwelcomesound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_bwelcomesound(), target);
  }
  
  // required sint32 m_lObserveCnt = 7;
  if (has_m_lobservecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->m_lobservecnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_EntryAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lOwnerUSN = 3;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required sint32 m_bWelcomeSound = 6;
    if (has_m_bwelcomesound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bwelcomesound());
    }
    
    // required sint32 m_lObserveCnt = 7;
    if (has_m_lobservecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lobservecnt());
    }
    
  }
  // repeated .Game_Poker.UserInfo m_tblUI = 4;
  total_size += 1 * this->m_tblui_size();
  for (int i = 0; i < this->m_tblui_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblui(i));
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 5;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_EntryAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_EntryAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_EntryAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_EntryAns::MergeFrom(const MsgSC_EntryAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblui_.MergeFrom(from.m_tblui_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_bwelcomesound()) {
      set_m_bwelcomesound(from.m_bwelcomesound());
    }
    if (from.has_m_lobservecnt()) {
      set_m_lobservecnt(from.m_lobservecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_EntryAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_EntryAns::CopyFrom(const MsgSC_EntryAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_EntryAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;
  
  for (int i = 0; i < m_tblui_size(); i++) {
    if (!this->m_tblui(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_EntryAns::Swap(MsgSC_EntryAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    m_tblui_.Swap(&other->m_tblui_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_bwelcomesound_, other->m_bwelcomesound_);
    std::swap(m_lobservecnt_, other->m_lobservecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_EntryAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_EntryAns_descriptor_;
  metadata.reflection = MsgSC_EntryAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_EntryReject::kMLTypeFieldNumber;
const int MsgSC_EntryReject::kMLlCMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_EntryReject::MsgSC_EntryReject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_EntryReject::InitAsDefaultInstance() {
}

MsgSC_EntryReject::MsgSC_EntryReject(const MsgSC_EntryReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_EntryReject::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_EntryReject::~MsgSC_EntryReject() {
  SharedDtor();
}

void MsgSC_EntryReject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_EntryReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_EntryReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_EntryReject_descriptor_;
}

const MsgSC_EntryReject& MsgSC_EntryReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_EntryReject* MsgSC_EntryReject::default_instance_ = NULL;

MsgSC_EntryReject* MsgSC_EntryReject::New() const {
  return new MsgSC_EntryReject;
}

void MsgSC_EntryReject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_EntryReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_EntryReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint64 m_llCMoney = 2;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llcmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_EntryReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  // required sint64 m_llCMoney = 2;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_llcmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_EntryReject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint64 m_llCMoney = 2;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_EntryReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_EntryReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_EntryReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_EntryReject::MergeFrom(const MsgSC_EntryReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_EntryReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_EntryReject::CopyFrom(const MsgSC_EntryReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_EntryReject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSC_EntryReject::Swap(MsgSC_EntryReject* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_EntryReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_EntryReject_descriptor_;
  metadata.reflection = MsgSC_EntryReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_ObserveAns::kMLUSNFieldNumber;
const int MsgSC_ObserveAns::kMNIndexFieldNumber;
const int MsgSC_ObserveAns::kMLOwnerUSNFieldNumber;
const int MsgSC_ObserveAns::kMUinfoFieldNumber;
const int MsgSC_ObserveAns::kMMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_ObserveAns::MsgSC_ObserveAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_ObserveAns::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::Game_Poker::UserInfo*>(&::Game_Poker::UserInfo::default_instance());
  m_money_ = const_cast< ::Game_Poker::Money*>(&::Game_Poker::Money::default_instance());
}

MsgSC_ObserveAns::MsgSC_ObserveAns(const MsgSC_ObserveAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_ObserveAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lownerusn_ = 0;
  m_uinfo_ = NULL;
  m_money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_ObserveAns::~MsgSC_ObserveAns() {
  SharedDtor();
}

void MsgSC_ObserveAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
    delete m_money_;
  }
}

void MsgSC_ObserveAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_ObserveAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_ObserveAns_descriptor_;
}

const MsgSC_ObserveAns& MsgSC_ObserveAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_ObserveAns* MsgSC_ObserveAns::default_instance_ = NULL;

MsgSC_ObserveAns* MsgSC_ObserveAns::New() const {
  return new MsgSC_ObserveAns;
}

void MsgSC_ObserveAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lownerusn_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::UserInfo::Clear();
    }
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_ObserveAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_uinfo;
        break;
      }
      
      // required .Game_Poker.UserInfo m_uinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker.Money m_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_ObserveAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lownerusn(), output);
  }
  
  // required .Game_Poker.UserInfo m_uinfo = 4;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_uinfo(), output);
  }
  
  // required .Game_Poker.Money m_money = 5;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_ObserveAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lownerusn(), target);
  }
  
  // required .Game_Poker.UserInfo m_uinfo = 4;
  if (has_m_uinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_uinfo(), target);
  }
  
  // required .Game_Poker.Money m_money = 5;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_ObserveAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lOwnerUSN = 3;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required .Game_Poker.UserInfo m_uinfo = 4;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
    // required .Game_Poker.Money m_money = 5;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_ObserveAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_ObserveAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_ObserveAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_ObserveAns::MergeFrom(const MsgSC_ObserveAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::Game_Poker::UserInfo::MergeFrom(from.m_uinfo());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::Money::MergeFrom(from.m_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_ObserveAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_ObserveAns::CopyFrom(const MsgSC_ObserveAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_ObserveAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void MsgSC_ObserveAns::Swap(MsgSC_ObserveAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_ObserveAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_ObserveAns_descriptor_;
  metadata.reflection = MsgSC_ObserveAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgSC_StartReq::MsgSC_StartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_StartReq::InitAsDefaultInstance() {
}

MsgSC_StartReq::MsgSC_StartReq(const MsgSC_StartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_StartReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_StartReq::~MsgSC_StartReq() {
  SharedDtor();
}

void MsgSC_StartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_StartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_StartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_StartReq_descriptor_;
}

const MsgSC_StartReq& MsgSC_StartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_StartReq* MsgSC_StartReq::default_instance_ = NULL;

MsgSC_StartReq* MsgSC_StartReq::New() const {
  return new MsgSC_StartReq;
}

void MsgSC_StartReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_StartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgSC_StartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_StartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_StartReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_StartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_StartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_StartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_StartReq::MergeFrom(const MsgSC_StartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_StartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_StartReq::CopyFrom(const MsgSC_StartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_StartReq::IsInitialized() const {
  
  return true;
}

void MsgSC_StartReq::Swap(MsgSC_StartReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_StartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_StartReq_descriptor_;
  metadata.reflection = MsgSC_StartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_StartAns::kMLStateFieldNumber;
const int MsgSC_StartAns::kMVtStateFieldNumber;
const int MsgSC_StartAns::kMLlSystemTimeFieldNumber;
#endif  // !_MSC_VER

MsgSC_StartAns::MsgSC_StartAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_StartAns::InitAsDefaultInstance() {
}

MsgSC_StartAns::MsgSC_StartAns(const MsgSC_StartAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_StartAns::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_llsystemtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_StartAns::~MsgSC_StartAns() {
  SharedDtor();
}

void MsgSC_StartAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_StartAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_StartAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_StartAns_descriptor_;
}

const MsgSC_StartAns& MsgSC_StartAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_StartAns* MsgSC_StartAns::default_instance_ = NULL;

MsgSC_StartAns* MsgSC_StartAns::New() const {
  return new MsgSC_StartAns;
}

void MsgSC_StartAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_llsystemtime_ = GOOGLE_LONGLONG(0);
  }
  m_vtstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_StartAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_vtState;
        break;
      }
      
      // repeated sint32 m_vtState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16, input, this->mutable_m_vtstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_m_vtstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_vtState;
        if (input->ExpectTag(24)) goto parse_m_llSystemTime;
        break;
      }
      
      // required sint64 m_llSystemTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSystemTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsystemtime_)));
          set_has_m_llsystemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_StartAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // repeated sint32 m_vtState = 2;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->m_vtstate(i), output);
  }
  
  // required sint64 m_llSystemTime = 3;
  if (has_m_llsystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llsystemtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_StartAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lstate(), target);
  }
  
  // repeated sint32 m_vtState = 2;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(2, this->m_vtstate(i), target);
  }
  
  // required sint64 m_llSystemTime = 3;
  if (has_m_llsystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llsystemtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_StartAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint64 m_llSystemTime = 3;
    if (has_m_llsystemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsystemtime());
    }
    
  }
  // repeated sint32 m_vtState = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->m_vtstate(i));
    }
    total_size += 1 * this->m_vtstate_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_StartAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_StartAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_StartAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_StartAns::MergeFrom(const MsgSC_StartAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtstate_.MergeFrom(from.m_vtstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_llsystemtime()) {
      set_m_llsystemtime(from.m_llsystemtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_StartAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_StartAns::CopyFrom(const MsgSC_StartAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_StartAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void MsgSC_StartAns::Swap(MsgSC_StartAns* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    m_vtstate_.Swap(&other->m_vtstate_);
    std::swap(m_llsystemtime_, other->m_llsystemtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_StartAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_StartAns_descriptor_;
  metadata.reflection = MsgSC_StartAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgSC_NoStart::MsgSC_NoStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_NoStart::InitAsDefaultInstance() {
}

MsgSC_NoStart::MsgSC_NoStart(const MsgSC_NoStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_NoStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_NoStart::~MsgSC_NoStart() {
  SharedDtor();
}

void MsgSC_NoStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_NoStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_NoStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_NoStart_descriptor_;
}

const MsgSC_NoStart& MsgSC_NoStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_NoStart* MsgSC_NoStart::default_instance_ = NULL;

MsgSC_NoStart* MsgSC_NoStart::New() const {
  return new MsgSC_NoStart;
}

void MsgSC_NoStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_NoStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgSC_NoStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_NoStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_NoStart::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_NoStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_NoStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_NoStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_NoStart::MergeFrom(const MsgSC_NoStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_NoStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_NoStart::CopyFrom(const MsgSC_NoStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_NoStart::IsInitialized() const {
  
  return true;
}

void MsgSC_NoStart::Swap(MsgSC_NoStart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_NoStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_NoStart_descriptor_;
  metadata.reflection = MsgSC_NoStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_DealCards::kMLBossUSNFieldNumber;
const int MsgSC_DealCards::kMLStateFieldNumber;
const int MsgSC_DealCards::kMNTypeFieldNumber;
const int MsgSC_DealCards::kMTblCardFieldNumber;
const int MsgSC_DealCards::kMTblMoneyFieldNumber;
const int MsgSC_DealCards::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_DealCards::MsgSC_DealCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_DealCards::InitAsDefaultInstance() {
}

MsgSC_DealCards::MsgSC_DealCards(const MsgSC_DealCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_DealCards::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_lstate_ = 0;
  m_ntype_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_DealCards::~MsgSC_DealCards() {
  SharedDtor();
}

void MsgSC_DealCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_DealCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_DealCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_DealCards_descriptor_;
}

const MsgSC_DealCards& MsgSC_DealCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_DealCards* MsgSC_DealCards::default_instance_ = NULL;

MsgSC_DealCards* MsgSC_DealCards::New() const {
  return new MsgSC_DealCards;
}

void MsgSC_DealCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_lstate_ = 0;
    m_ntype_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_DealCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nType;
        break;
      }
      
      // required int32 m_nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .Game_Poker.Cards m_tblCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblCard;
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .Game_Poker.Money m_tblMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        if (input->ExpectTag(48)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_DealCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lstate(), output);
  }
  
  // required int32 m_nType = 3;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ntype(), output);
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 4;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_tblcard(i), output);
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 6;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_llpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_DealCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbossusn(), target);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lstate(), target);
  }
  
  // required int32 m_nType = 3;
  if (has_m_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_ntype(), target);
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 4;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_tblcard(i), target);
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_tblmoney(i), target);
  }
  
  // required sint64 m_llPoolMoney = 6;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->m_llpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_DealCards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint32 m_lState = 2;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required int32 m_nType = 3;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint64 m_llPoolMoney = 6;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .Game_Poker.Cards m_tblCard = 4;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 5;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_DealCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_DealCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_DealCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_DealCards::MergeFrom(const MsgSC_DealCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_DealCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_DealCards::CopyFrom(const MsgSC_DealCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_DealCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_DealCards::Swap(MsgSC_DealCards* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_ntype_, other->m_ntype_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_DealCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_DealCards_descriptor_;
  metadata.reflection = MsgSC_DealCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_SelectedCardAns::kMLUSNFieldNumber;
const int MsgSC_SelectedCardAns::kMNSelectFieldNumber;
const int MsgSC_SelectedCardAns::kMLCardIndexFieldNumber;
const int MsgSC_SelectedCardAns::kMLChoiceTypeFieldNumber;
#endif  // !_MSC_VER

MsgSC_SelectedCardAns::MsgSC_SelectedCardAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_SelectedCardAns::InitAsDefaultInstance() {
}

MsgSC_SelectedCardAns::MsgSC_SelectedCardAns(const MsgSC_SelectedCardAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_SelectedCardAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nselect_ = 0;
  m_lcardindex_ = 0;
  m_lchoicetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_SelectedCardAns::~MsgSC_SelectedCardAns() {
  SharedDtor();
}

void MsgSC_SelectedCardAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_SelectedCardAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_SelectedCardAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_SelectedCardAns_descriptor_;
}

const MsgSC_SelectedCardAns& MsgSC_SelectedCardAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_SelectedCardAns* MsgSC_SelectedCardAns::default_instance_ = NULL;

MsgSC_SelectedCardAns* MsgSC_SelectedCardAns::New() const {
  return new MsgSC_SelectedCardAns;
}

void MsgSC_SelectedCardAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nselect_ = 0;
    m_lcardindex_ = 0;
    m_lchoicetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_SelectedCardAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nSelect;
        break;
      }
      
      // required int32 m_nSelect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSelect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nselect_)));
          set_has_m_nselect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lCardIndex;
        break;
      }
      
      // required sint32 m_lCardIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardindex_)));
          set_has_m_lcardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lChoiceType;
        break;
      }
      
      // required sint32 m_lChoiceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChoiceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lchoicetype_)));
          set_has_m_lchoicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_SelectedCardAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nSelect = 2;
  if (has_m_nselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nselect(), output);
  }
  
  // required sint32 m_lCardIndex = 3;
  if (has_m_lcardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcardindex(), output);
  }
  
  // required sint32 m_lChoiceType = 4;
  if (has_m_lchoicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lchoicetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_SelectedCardAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nSelect = 2;
  if (has_m_nselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nselect(), target);
  }
  
  // required sint32 m_lCardIndex = 3;
  if (has_m_lcardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lcardindex(), target);
  }
  
  // required sint32 m_lChoiceType = 4;
  if (has_m_lchoicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lchoicetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_SelectedCardAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nSelect = 2;
    if (has_m_nselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nselect());
    }
    
    // required sint32 m_lCardIndex = 3;
    if (has_m_lcardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardindex());
    }
    
    // required sint32 m_lChoiceType = 4;
    if (has_m_lchoicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lchoicetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_SelectedCardAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_SelectedCardAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_SelectedCardAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_SelectedCardAns::MergeFrom(const MsgSC_SelectedCardAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nselect()) {
      set_m_nselect(from.m_nselect());
    }
    if (from.has_m_lcardindex()) {
      set_m_lcardindex(from.m_lcardindex());
    }
    if (from.has_m_lchoicetype()) {
      set_m_lchoicetype(from.m_lchoicetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_SelectedCardAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_SelectedCardAns::CopyFrom(const MsgSC_SelectedCardAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_SelectedCardAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgSC_SelectedCardAns::Swap(MsgSC_SelectedCardAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nselect_, other->m_nselect_);
    std::swap(m_lcardindex_, other->m_lcardindex_);
    std::swap(m_lchoicetype_, other->m_lchoicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_SelectedCardAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_SelectedCardAns_descriptor_;
  metadata.reflection = MsgSC_SelectedCardAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_DealOpenCard::kMLStateFieldNumber;
const int MsgSC_DealOpenCard::kMTblCardFieldNumber;
const int MsgSC_DealOpenCard::kMVtStateFieldNumber;
#endif  // !_MSC_VER

MsgSC_DealOpenCard::MsgSC_DealOpenCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_DealOpenCard::InitAsDefaultInstance() {
}

MsgSC_DealOpenCard::MsgSC_DealOpenCard(const MsgSC_DealOpenCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_DealOpenCard::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_DealOpenCard::~MsgSC_DealOpenCard() {
  SharedDtor();
}

void MsgSC_DealOpenCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_DealOpenCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_DealOpenCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_DealOpenCard_descriptor_;
}

const MsgSC_DealOpenCard& MsgSC_DealOpenCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_DealOpenCard* MsgSC_DealOpenCard::default_instance_ = NULL;

MsgSC_DealOpenCard* MsgSC_DealOpenCard::New() const {
  return new MsgSC_DealOpenCard;
}

void MsgSC_DealOpenCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
  }
  m_tblcard_.Clear();
  m_vtstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_DealOpenCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .Game_Poker.Cards m_tblCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tblCard;
        if (input->ExpectTag(24)) goto parse_m_vtState;
        break;
      }
      
      // repeated sint32 m_vtState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24, input, this->mutable_m_vtstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_m_vtstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_vtState;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_DealOpenCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 2;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_tblcard(i), output);
  }
  
  // repeated sint32 m_vtState = 3;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->m_vtstate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_DealOpenCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lstate(), target);
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 2;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_tblcard(i), target);
  }
  
  // repeated sint32 m_vtState = 3;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(3, this->m_vtstate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_DealOpenCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
  }
  // repeated .Game_Poker.Cards m_tblCard = 2;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated sint32 m_vtState = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->m_vtstate(i));
    }
    total_size += 1 * this->m_vtstate_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_DealOpenCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_DealOpenCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_DealOpenCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_DealOpenCard::MergeFrom(const MsgSC_DealOpenCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_vtstate_.MergeFrom(from.m_vtstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_DealOpenCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_DealOpenCard::CopyFrom(const MsgSC_DealOpenCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_DealOpenCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_DealOpenCard::Swap(MsgSC_DealOpenCard* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_vtstate_.Swap(&other->m_vtstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_DealOpenCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_DealOpenCard_descriptor_;
  metadata.reflection = MsgSC_DealOpenCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_DealCard::kMLBossUSNFieldNumber;
const int MsgSC_DealCard::kMNTypeFieldNumber;
const int MsgSC_DealCard::kMLCardsDealtFieldNumber;
const int MsgSC_DealCard::kMVtOneCardFieldNumber;
#endif  // !_MSC_VER

MsgSC_DealCard::MsgSC_DealCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_DealCard::InitAsDefaultInstance() {
}

MsgSC_DealCard::MsgSC_DealCard(const MsgSC_DealCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_DealCard::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_ntype_ = 0;
  m_lcardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_DealCard::~MsgSC_DealCard() {
  SharedDtor();
}

void MsgSC_DealCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_DealCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_DealCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_DealCard_descriptor_;
}

const MsgSC_DealCard& MsgSC_DealCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_DealCard* MsgSC_DealCard::default_instance_ = NULL;

MsgSC_DealCard* MsgSC_DealCard::New() const {
  return new MsgSC_DealCard;
}

void MsgSC_DealCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_ntype_ = 0;
    m_lcardsdealt_ = 0;
  }
  m_vtonecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_DealCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nType;
        break;
      }
      
      // required int32 m_nType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtOneCard;
        break;
      }
      
      // repeated .Game_Poker.OneCard m_vtOneCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtOneCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtonecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtOneCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_DealCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required int32 m_nType = 2;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ntype(), output);
  }
  
  // required sint32 m_lCardsDealt = 3;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcardsdealt(), output);
  }
  
  // repeated .Game_Poker.OneCard m_vtOneCard = 4;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_vtonecard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_DealCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbossusn(), target);
  }
  
  // required int32 m_nType = 2;
  if (has_m_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ntype(), target);
  }
  
  // required sint32 m_lCardsDealt = 3;
  if (has_m_lcardsdealt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lcardsdealt(), target);
  }
  
  // repeated .Game_Poker.OneCard m_vtOneCard = 4;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_vtonecard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_DealCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nType = 2;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint32 m_lCardsDealt = 3;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
  }
  // repeated .Game_Poker.OneCard m_vtOneCard = 4;
  total_size += 1 * this->m_vtonecard_size();
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtonecard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_DealCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_DealCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_DealCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_DealCard::MergeFrom(const MsgSC_DealCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtonecard_.MergeFrom(from.m_vtonecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_DealCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_DealCard::CopyFrom(const MsgSC_DealCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_DealCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < m_vtonecard_size(); i++) {
    if (!this->m_vtonecard(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_DealCard::Swap(MsgSC_DealCard* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_vtonecard_.Swap(&other->m_vtonecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_DealCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_DealCard_descriptor_;
  metadata.reflection = MsgSC_DealCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_Boss::kMLBossUSNFieldNumber;
const int MsgSC_Boss::kMNBossRankFieldNumber;
#endif  // !_MSC_VER

MsgSC_Boss::MsgSC_Boss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_Boss::InitAsDefaultInstance() {
}

MsgSC_Boss::MsgSC_Boss(const MsgSC_Boss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_Boss::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_nbossrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_Boss::~MsgSC_Boss() {
  SharedDtor();
}

void MsgSC_Boss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_Boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_Boss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_Boss_descriptor_;
}

const MsgSC_Boss& MsgSC_Boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_Boss* MsgSC_Boss::default_instance_ = NULL;

MsgSC_Boss* MsgSC_Boss::New() const {
  return new MsgSC_Boss;
}

void MsgSC_Boss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_nbossrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_Boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nBossRank;
        break;
      }
      
      // required int32 m_nBossRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nBossRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nbossrank_)));
          set_has_m_nbossrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_Boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required int32 m_nBossRank = 2;
  if (has_m_nbossrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nbossrank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_Boss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbossusn(), target);
  }
  
  // required int32 m_nBossRank = 2;
  if (has_m_nbossrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nbossrank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_Boss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nBossRank = 2;
    if (has_m_nbossrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nbossrank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_Boss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_Boss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_Boss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_Boss::MergeFrom(const MsgSC_Boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_nbossrank()) {
      set_m_nbossrank(from.m_nbossrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_Boss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_Boss::CopyFrom(const MsgSC_Boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_Boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSC_Boss::Swap(MsgSC_Boss* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_nbossrank_, other->m_nbossrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_Boss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_Boss_descriptor_;
  metadata.reflection = MsgSC_Boss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_Betting::kMLBetUSNFieldNumber;
const int MsgSC_Betting::kMLBetBtnTypeFieldNumber;
#endif  // !_MSC_VER

MsgSC_Betting::MsgSC_Betting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_Betting::InitAsDefaultInstance() {
}

MsgSC_Betting::MsgSC_Betting(const MsgSC_Betting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_Betting::SharedCtor() {
  _cached_size_ = 0;
  m_lbetusn_ = 0;
  m_lbetbtntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_Betting::~MsgSC_Betting() {
  SharedDtor();
}

void MsgSC_Betting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_Betting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_Betting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_Betting_descriptor_;
}

const MsgSC_Betting& MsgSC_Betting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_Betting* MsgSC_Betting::default_instance_ = NULL;

MsgSC_Betting* MsgSC_Betting::New() const {
  return new MsgSC_Betting;
}

void MsgSC_Betting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbetusn_ = 0;
    m_lbetbtntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_Betting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBetUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetusn_)));
          set_has_m_lbetusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lBetBtnType;
        break;
      }
      
      // required sint32 m_lBetBtnType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetBtnType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetbtntype_)));
          set_has_m_lbetbtntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_Betting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBetUSN = 1;
  if (has_m_lbetusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbetusn(), output);
  }
  
  // required sint32 m_lBetBtnType = 2;
  if (has_m_lbetbtntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lbetbtntype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_Betting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBetUSN = 1;
  if (has_m_lbetusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbetusn(), target);
  }
  
  // required sint32 m_lBetBtnType = 2;
  if (has_m_lbetbtntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lbetbtntype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_Betting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBetUSN = 1;
    if (has_m_lbetusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetusn());
    }
    
    // required sint32 m_lBetBtnType = 2;
    if (has_m_lbetbtntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetbtntype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_Betting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_Betting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_Betting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_Betting::MergeFrom(const MsgSC_Betting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbetusn()) {
      set_m_lbetusn(from.m_lbetusn());
    }
    if (from.has_m_lbetbtntype()) {
      set_m_lbetbtntype(from.m_lbetbtntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_Betting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_Betting::CopyFrom(const MsgSC_Betting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_Betting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSC_Betting::Swap(MsgSC_Betting* other) {
  if (other != this) {
    std::swap(m_lbetusn_, other->m_lbetusn_);
    std::swap(m_lbetbtntype_, other->m_lbetbtntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_Betting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_Betting_descriptor_;
  metadata.reflection = MsgSC_Betting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_BettingAns::kMNIndexFieldNumber;
const int MsgSC_BettingAns::kMLBetTypeFieldNumber;
const int MsgSC_BettingAns::kMMoneyFieldNumber;
const int MsgSC_BettingAns::kMVtCallMoneyFieldNumber;
const int MsgSC_BettingAns::kMLPoolMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_BettingAns::MsgSC_BettingAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_BettingAns::InitAsDefaultInstance() {
  m_money_ = const_cast< ::Game_Poker::Money*>(&::Game_Poker::Money::default_instance());
}

MsgSC_BettingAns::MsgSC_BettingAns(const MsgSC_BettingAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_BettingAns::SharedCtor() {
  _cached_size_ = 0;
  m_nindex_ = 0;
  m_lbettype_ = 0;
  m_money_ = NULL;
  m_lpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_BettingAns::~MsgSC_BettingAns() {
  SharedDtor();
}

void MsgSC_BettingAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void MsgSC_BettingAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_BettingAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_BettingAns_descriptor_;
}

const MsgSC_BettingAns& MsgSC_BettingAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_BettingAns* MsgSC_BettingAns::default_instance_ = NULL;

MsgSC_BettingAns* MsgSC_BettingAns::New() const {
  return new MsgSC_BettingAns;
}

void MsgSC_BettingAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nindex_ = 0;
    m_lbettype_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
    }
    m_lpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_vtcallmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_BettingAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lBetType;
        break;
      }
      
      // required sint32 m_lBetType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker.Money m_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtCallMoney;
        break;
      }
      
      // repeated .Game_Poker.VecMoney m_vtCallMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtCallMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtcallmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtCallMoney;
        if (input->ExpectTag(40)) goto parse_m_lPoolMoney;
        break;
      }
      
      // required sint64 m_lPoolMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lpoolmoney_)));
          set_has_m_lpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_BettingAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nindex(), output);
  }
  
  // required sint32 m_lBetType = 2;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lbettype(), output);
  }
  
  // required .Game_Poker.Money m_money = 3;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_money(), output);
  }
  
  // repeated .Game_Poker.VecMoney m_vtCallMoney = 4;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_vtcallmoney(i), output);
  }
  
  // required sint64 m_lPoolMoney = 5;
  if (has_m_lpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_BettingAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nindex(), target);
  }
  
  // required sint32 m_lBetType = 2;
  if (has_m_lbettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lbettype(), target);
  }
  
  // required .Game_Poker.Money m_money = 3;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_money(), target);
  }
  
  // repeated .Game_Poker.VecMoney m_vtCallMoney = 4;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_vtcallmoney(i), target);
  }
  
  // required sint64 m_lPoolMoney = 5;
  if (has_m_lpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_lpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_BettingAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nIndex = 1;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lBetType = 2;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
    // required .Game_Poker.Money m_money = 3;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint64 m_lPoolMoney = 5;
    if (has_m_lpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lpoolmoney());
    }
    
  }
  // repeated .Game_Poker.VecMoney m_vtCallMoney = 4;
  total_size += 1 * this->m_vtcallmoney_size();
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtcallmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_BettingAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_BettingAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_BettingAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_BettingAns::MergeFrom(const MsgSC_BettingAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcallmoney_.MergeFrom(from.m_vtcallmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::Money::MergeFrom(from.m_money());
    }
    if (from.has_m_lpoolmoney()) {
      set_m_lpoolmoney(from.m_lpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_BettingAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_BettingAns::CopyFrom(const MsgSC_BettingAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_BettingAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtcallmoney_size(); i++) {
    if (!this->m_vtcallmoney(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_BettingAns::Swap(MsgSC_BettingAns* other) {
  if (other != this) {
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_money_, other->m_money_);
    m_vtcallmoney_.Swap(&other->m_vtcallmoney_);
    std::swap(m_lpoolmoney_, other->m_lpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_BettingAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_BettingAns_descriptor_;
  metadata.reflection = MsgSC_BettingAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_BettingAnsMsg::kMLUSNFieldNumber;
const int MsgSC_BettingAnsMsg::kMNIndexFieldNumber;
const int MsgSC_BettingAnsMsg::kMBetTypeFieldNumber;
const int MsgSC_BettingAnsMsg::kMBBettingMoneyFieldNumber;
const int MsgSC_BettingAnsMsg::kMBMoneyLackFieldNumber;
const int MsgSC_BettingAnsMsg::kMBCallMoneyZeroFieldNumber;
const int MsgSC_BettingAnsMsg::kMLlCallMoneyFieldNumber;
const int MsgSC_BettingAnsMsg::kMLlRaiseMoneyFieldNumber;
const int MsgSC_BettingAnsMsg::kMLlSideMoneyFieldNumber;
const int MsgSC_BettingAnsMsg::kMLBetTypeFieldNumber;
const int MsgSC_BettingAnsMsg::kMLBetTurnFieldNumber;
const int MsgSC_BettingAnsMsg::kMMoneyFieldNumber;
const int MsgSC_BettingAnsMsg::kMVtCallMoneyFieldNumber;
const int MsgSC_BettingAnsMsg::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_BettingAnsMsg::MsgSC_BettingAnsMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_BettingAnsMsg::InitAsDefaultInstance() {
  m_money_ = const_cast< ::Game_Poker::Money*>(&::Game_Poker::Money::default_instance());
}

MsgSC_BettingAnsMsg::MsgSC_BettingAnsMsg(const MsgSC_BettingAnsMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_BettingAnsMsg::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_bettype_ = 0;
  m_bbettingmoney_ = 0;
  m_bmoneylack_ = 0;
  m_bcallmoneyzero_ = 0;
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  m_lbettype_ = 0;
  m_lbetturn_ = 0;
  m_money_ = NULL;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_BettingAnsMsg::~MsgSC_BettingAnsMsg() {
  SharedDtor();
}

void MsgSC_BettingAnsMsg::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void MsgSC_BettingAnsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_BettingAnsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_BettingAnsMsg_descriptor_;
}

const MsgSC_BettingAnsMsg& MsgSC_BettingAnsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_BettingAnsMsg* MsgSC_BettingAnsMsg::default_instance_ = NULL;

MsgSC_BettingAnsMsg* MsgSC_BettingAnsMsg::New() const {
  return new MsgSC_BettingAnsMsg;
}

void MsgSC_BettingAnsMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_bettype_ = 0;
    m_bbettingmoney_ = 0;
    m_bmoneylack_ = 0;
    m_bcallmoneyzero_ = 0;
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llraisemoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_llsidemoney_ = GOOGLE_LONGLONG(0);
    m_lbettype_ = 0;
    m_lbetturn_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
    }
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_vtcallmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_BettingAnsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_BetType;
        break;
      }
      
      // required sint32 m_BetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bettype_)));
          set_has_m_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bBettingMoney;
        break;
      }
      
      // required sint32 m_bBettingMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bBettingMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bbettingmoney_)));
          set_has_m_bbettingmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bMoneyLack;
        break;
      }
      
      // required sint32 m_bMoneyLack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bMoneyLack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bmoneylack_)));
          set_has_m_bmoneylack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bCallMoneyZero;
        break;
      }
      
      // required sint32 m_bCallMoneyZero = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallMoneyZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bcallmoneyzero_)));
          set_has_m_bcallmoneyzero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_llCallMoney;
        break;
      }
      
      // required sint64 m_llCallMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_llRaiseMoney;
        break;
      }
      
      // required sint64 m_llRaiseMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRaiseMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llraisemoney_)));
          set_has_m_llraisemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_llSideMoney;
        break;
      }
      
      // required sint64 m_llSideMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSideMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsidemoney_)));
          set_has_m_llsidemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lBetType;
        break;
      }
      
      // required sint32 m_lBetType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lBetTurn;
        break;
      }
      
      // required sint32 m_lBetTurn = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetTurn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetturn_)));
          set_has_m_lbetturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker.Money m_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_vtCallMoney;
        break;
      }
      
      // repeated .Game_Poker.VecMoney m_vtCallMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtCallMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtcallmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_vtCallMoney;
        if (input->ExpectTag(112)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_BettingAnsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_BetType = 3;
  if (has_m_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_bettype(), output);
  }
  
  // required sint32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_bbettingmoney(), output);
  }
  
  // required sint32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_bmoneylack(), output);
  }
  
  // required sint32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_bcallmoneyzero(), output);
  }
  
  // required sint64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->m_llcallmoney(), output);
  }
  
  // required sint64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->m_llraisemoney(), output);
  }
  
  // required sint64 m_llSideMoney = 9;
  if (has_m_llsidemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->m_llsidemoney(), output);
  }
  
  // required sint32 m_lBetType = 10;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->m_lbettype(), output);
  }
  
  // required sint32 m_lBetTurn = 11;
  if (has_m_lbetturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->m_lbetturn(), output);
  }
  
  // required .Game_Poker.Money m_money = 12;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_money(), output);
  }
  
  // repeated .Game_Poker.VecMoney m_vtCallMoney = 13;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_vtcallmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 14;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(14, this->m_llpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_BettingAnsMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_BetType = 3;
  if (has_m_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_bettype(), target);
  }
  
  // required sint32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_bbettingmoney(), target);
  }
  
  // required sint32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->m_bmoneylack(), target);
  }
  
  // required sint32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_bcallmoneyzero(), target);
  }
  
  // required sint64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->m_llcallmoney(), target);
  }
  
  // required sint64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->m_llraisemoney(), target);
  }
  
  // required sint64 m_llSideMoney = 9;
  if (has_m_llsidemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(9, this->m_llsidemoney(), target);
  }
  
  // required sint32 m_lBetType = 10;
  if (has_m_lbettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->m_lbettype(), target);
  }
  
  // required sint32 m_lBetTurn = 11;
  if (has_m_lbetturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->m_lbetturn(), target);
  }
  
  // required .Game_Poker.Money m_money = 12;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_money(), target);
  }
  
  // repeated .Game_Poker.VecMoney m_vtCallMoney = 13;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_vtcallmoney(i), target);
  }
  
  // required sint64 m_llPoolMoney = 14;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(14, this->m_llpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_BettingAnsMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_BetType = 3;
    if (has_m_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bettype());
    }
    
    // required sint32 m_bBettingMoney = 4;
    if (has_m_bbettingmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bbettingmoney());
    }
    
    // required sint32 m_bMoneyLack = 5;
    if (has_m_bmoneylack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bmoneylack());
    }
    
    // required sint32 m_bCallMoneyZero = 6;
    if (has_m_bcallmoneyzero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bcallmoneyzero());
    }
    
    // required sint64 m_llCallMoney = 7;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallmoney());
    }
    
    // required sint64 m_llRaiseMoney = 8;
    if (has_m_llraisemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llraisemoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint64 m_llSideMoney = 9;
    if (has_m_llsidemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsidemoney());
    }
    
    // required sint32 m_lBetType = 10;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
    // required sint32 m_lBetTurn = 11;
    if (has_m_lbetturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetturn());
    }
    
    // required .Game_Poker.Money m_money = 12;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint64 m_llPoolMoney = 14;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .Game_Poker.VecMoney m_vtCallMoney = 13;
  total_size += 1 * this->m_vtcallmoney_size();
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtcallmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_BettingAnsMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_BettingAnsMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_BettingAnsMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_BettingAnsMsg::MergeFrom(const MsgSC_BettingAnsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcallmoney_.MergeFrom(from.m_vtcallmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_bettype()) {
      set_m_bettype(from.m_bettype());
    }
    if (from.has_m_bbettingmoney()) {
      set_m_bbettingmoney(from.m_bbettingmoney());
    }
    if (from.has_m_bmoneylack()) {
      set_m_bmoneylack(from.m_bmoneylack());
    }
    if (from.has_m_bcallmoneyzero()) {
      set_m_bcallmoneyzero(from.m_bcallmoneyzero());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llraisemoney()) {
      set_m_llraisemoney(from.m_llraisemoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_llsidemoney()) {
      set_m_llsidemoney(from.m_llsidemoney());
    }
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_lbetturn()) {
      set_m_lbetturn(from.m_lbetturn());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::Money::MergeFrom(from.m_money());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_BettingAnsMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_BettingAnsMsg::CopyFrom(const MsgSC_BettingAnsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_BettingAnsMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002fff) != 0x00002fff) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtcallmoney_size(); i++) {
    if (!this->m_vtcallmoney(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_BettingAnsMsg::Swap(MsgSC_BettingAnsMsg* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_bettype_, other->m_bettype_);
    std::swap(m_bbettingmoney_, other->m_bbettingmoney_);
    std::swap(m_bmoneylack_, other->m_bmoneylack_);
    std::swap(m_bcallmoneyzero_, other->m_bcallmoneyzero_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llraisemoney_, other->m_llraisemoney_);
    std::swap(m_llsidemoney_, other->m_llsidemoney_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_lbetturn_, other->m_lbetturn_);
    std::swap(m_money_, other->m_money_);
    m_vtcallmoney_.Swap(&other->m_vtcallmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_BettingAnsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_BettingAnsMsg_descriptor_;
  metadata.reflection = MsgSC_BettingAnsMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_DealHiddenCard::kMLBossUSNFieldNumber;
const int MsgSC_DealHiddenCard::kMLCardsDealtFieldNumber;
const int MsgSC_DealHiddenCard::kMVtOneCardFieldNumber;
#endif  // !_MSC_VER

MsgSC_DealHiddenCard::MsgSC_DealHiddenCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_DealHiddenCard::InitAsDefaultInstance() {
}

MsgSC_DealHiddenCard::MsgSC_DealHiddenCard(const MsgSC_DealHiddenCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_DealHiddenCard::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_lcardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_DealHiddenCard::~MsgSC_DealHiddenCard() {
  SharedDtor();
}

void MsgSC_DealHiddenCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_DealHiddenCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_DealHiddenCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_DealHiddenCard_descriptor_;
}

const MsgSC_DealHiddenCard& MsgSC_DealHiddenCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_DealHiddenCard* MsgSC_DealHiddenCard::default_instance_ = NULL;

MsgSC_DealHiddenCard* MsgSC_DealHiddenCard::New() const {
  return new MsgSC_DealHiddenCard;
}

void MsgSC_DealHiddenCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_lcardsdealt_ = 0;
  }
  m_vtonecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_DealHiddenCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vtOneCard;
        break;
      }
      
      // repeated .Game_Poker.OneCard m_vtOneCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtOneCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtonecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vtOneCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_DealHiddenCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lcardsdealt(), output);
  }
  
  // repeated .Game_Poker.OneCard m_vtOneCard = 3;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_vtonecard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_DealHiddenCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbossusn(), target);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lcardsdealt(), target);
  }
  
  // repeated .Game_Poker.OneCard m_vtOneCard = 3;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_vtonecard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_DealHiddenCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint32 m_lCardsDealt = 2;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
  }
  // repeated .Game_Poker.OneCard m_vtOneCard = 3;
  total_size += 1 * this->m_vtonecard_size();
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtonecard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_DealHiddenCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_DealHiddenCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_DealHiddenCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_DealHiddenCard::MergeFrom(const MsgSC_DealHiddenCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtonecard_.MergeFrom(from.m_vtonecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_DealHiddenCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_DealHiddenCard::CopyFrom(const MsgSC_DealHiddenCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_DealHiddenCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < m_vtonecard_size(); i++) {
    if (!this->m_vtonecard(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_DealHiddenCard::Swap(MsgSC_DealHiddenCard* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_vtonecard_.Swap(&other->m_vtonecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_DealHiddenCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_DealHiddenCard_descriptor_;
  metadata.reflection = MsgSC_DealHiddenCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_AnteMoney::kMLlAnteMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_AnteMoney::MsgSC_AnteMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_AnteMoney::InitAsDefaultInstance() {
}

MsgSC_AnteMoney::MsgSC_AnteMoney(const MsgSC_AnteMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_AnteMoney::SharedCtor() {
  _cached_size_ = 0;
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_AnteMoney::~MsgSC_AnteMoney() {
  SharedDtor();
}

void MsgSC_AnteMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_AnteMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_AnteMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_AnteMoney_descriptor_;
}

const MsgSC_AnteMoney& MsgSC_AnteMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_AnteMoney* MsgSC_AnteMoney::default_instance_ = NULL;

MsgSC_AnteMoney* MsgSC_AnteMoney::New() const {
  return new MsgSC_AnteMoney;
}

void MsgSC_AnteMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llantemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_AnteMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llAnteMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llantemoney_)));
          set_has_m_llantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_AnteMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llAnteMoney = 1;
  if (has_m_llantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llantemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_AnteMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llAnteMoney = 1;
  if (has_m_llantemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llantemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_AnteMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llAnteMoney = 1;
    if (has_m_llantemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llantemoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_AnteMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_AnteMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_AnteMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_AnteMoney::MergeFrom(const MsgSC_AnteMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llantemoney()) {
      set_m_llantemoney(from.m_llantemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_AnteMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_AnteMoney::CopyFrom(const MsgSC_AnteMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_AnteMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_AnteMoney::Swap(MsgSC_AnteMoney* other) {
  if (other != this) {
    std::swap(m_llantemoney_, other->m_llantemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_AnteMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_AnteMoney_descriptor_;
  metadata.reflection = MsgSC_AnteMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_RuleQuaterHalf::kMLlRuleQuaterHalfFieldNumber;
const int MsgSC_RuleQuaterHalf::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_RuleQuaterHalf::MsgSC_RuleQuaterHalf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_RuleQuaterHalf::InitAsDefaultInstance() {
}

MsgSC_RuleQuaterHalf::MsgSC_RuleQuaterHalf(const MsgSC_RuleQuaterHalf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_RuleQuaterHalf::SharedCtor() {
  _cached_size_ = 0;
  m_llrulequaterhalf_ = GOOGLE_LONGLONG(0);
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_RuleQuaterHalf::~MsgSC_RuleQuaterHalf() {
  SharedDtor();
}

void MsgSC_RuleQuaterHalf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_RuleQuaterHalf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_RuleQuaterHalf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_RuleQuaterHalf_descriptor_;
}

const MsgSC_RuleQuaterHalf& MsgSC_RuleQuaterHalf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_RuleQuaterHalf* MsgSC_RuleQuaterHalf::default_instance_ = NULL;

MsgSC_RuleQuaterHalf* MsgSC_RuleQuaterHalf::New() const {
  return new MsgSC_RuleQuaterHalf;
}

void MsgSC_RuleQuaterHalf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llrulequaterhalf_ = GOOGLE_LONGLONG(0);
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_RuleQuaterHalf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llRuleQuaterHalf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llrulequaterhalf_)));
          set_has_m_llrulequaterhalf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_RuleQuaterHalf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llRuleQuaterHalf = 1;
  if (has_m_llrulequaterhalf()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llrulequaterhalf(), output);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_RuleQuaterHalf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llRuleQuaterHalf = 1;
  if (has_m_llrulequaterhalf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llrulequaterhalf(), target);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_llpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_RuleQuaterHalf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llRuleQuaterHalf = 1;
    if (has_m_llrulequaterhalf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llrulequaterhalf());
    }
    
    // required sint64 m_llPoolMoney = 2;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_RuleQuaterHalf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_RuleQuaterHalf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_RuleQuaterHalf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_RuleQuaterHalf::MergeFrom(const MsgSC_RuleQuaterHalf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llrulequaterhalf()) {
      set_m_llrulequaterhalf(from.m_llrulequaterhalf());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_RuleQuaterHalf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_RuleQuaterHalf::CopyFrom(const MsgSC_RuleQuaterHalf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_RuleQuaterHalf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSC_RuleQuaterHalf::Swap(MsgSC_RuleQuaterHalf* other) {
  if (other != this) {
    std::swap(m_llrulequaterhalf_, other->m_llrulequaterhalf_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_RuleQuaterHalf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_RuleQuaterHalf_descriptor_;
  metadata.reflection = MsgSC_RuleQuaterHalf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_Finished::kMLStateFieldNumber;
const int MsgSC_Finished::kMBGiveUpFieldNumber;
const int MsgSC_Finished::kMLRankFieldNumber;
const int MsgSC_Finished::kMLBossUSNFieldNumber;
const int MsgSC_Finished::kMLlGiveMoneyFieldNumber;
const int MsgSC_Finished::kMVtWinFieldNumber;
const int MsgSC_Finished::kMVtResultFieldNumber;
const int MsgSC_Finished::kMVtGiveMoneyFieldNumber;
const int MsgSC_Finished::kMTblCardFieldNumber;
const int MsgSC_Finished::kMTblMoneyFieldNumber;
const int MsgSC_Finished::kMLlPoolMoneyFieldNumber;
const int MsgSC_Finished::kMVtUserMoneyFieldNumber;
const int MsgSC_Finished::kMLResultIdxFieldNumber;
const int MsgSC_Finished::kMLlJackpotFieldNumber;
#endif  // !_MSC_VER

MsgSC_Finished::MsgSC_Finished()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_Finished::InitAsDefaultInstance() {
}

MsgSC_Finished::MsgSC_Finished(const MsgSC_Finished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_Finished::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_bgiveup_ = 0;
  m_lrank_ = 0;
  m_lbossusn_ = 0;
  m_llgivemoney_ = GOOGLE_LONGLONG(0);
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  m_lresultidx_ = 0;
  m_lljackpot_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_Finished::~MsgSC_Finished() {
  SharedDtor();
}

void MsgSC_Finished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_Finished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_Finished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_Finished_descriptor_;
}

const MsgSC_Finished& MsgSC_Finished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_Finished* MsgSC_Finished::default_instance_ = NULL;

MsgSC_Finished* MsgSC_Finished::New() const {
  return new MsgSC_Finished;
}

void MsgSC_Finished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_bgiveup_ = 0;
    m_lrank_ = 0;
    m_lbossusn_ = 0;
    m_llgivemoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
    m_lresultidx_ = 0;
    m_lljackpot_ = GOOGLE_LONGLONG(0);
  }
  m_vtwin_.Clear();
  m_vtresult_.Clear();
  m_vtgivemoney_.Clear();
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  m_vtusermoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_Finished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bGiveUp;
        break;
      }
      
      // required sint32 m_bGiveUp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bGiveUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bgiveup_)));
          set_has_m_bgiveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lRank;
        break;
      }
      
      // required sint32 m_lRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lrank_)));
          set_has_m_lrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lBossUSN;
        break;
      }
      
      // required sint32 m_lBossUSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBossUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llGiveMoney;
        break;
      }
      
      // required sint64 m_llGiveMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llgivemoney_)));
          set_has_m_llgivemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vtWin;
        break;
      }
      
      // repeated int32 m_vtWin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_vtwin())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtwin())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vtWin;
        if (input->ExpectTag(56)) goto parse_m_vtResult;
        break;
      }
      
      // repeated int32 m_vtResult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_vtresult())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtresult())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_vtResult;
        if (input->ExpectTag(64)) goto parse_m_vtGiveMoney;
        break;
      }
      
      // repeated sint64 m_vtGiveMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtGiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 64, input, this->mutable_m_vtgivemoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_m_vtgivemoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_vtGiveMoney;
        if (input->ExpectTag(74)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .Game_Poker.Cards m_tblCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_tblCard;
        if (input->ExpectTag(82)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .Game_Poker.Money m_tblMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_tblMoney;
        if (input->ExpectTag(88)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_vtUserMoney;
        break;
      }
      
      // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtUserMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtusermoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_vtUserMoney;
        if (input->ExpectTag(104)) goto parse_m_lResultIdx;
        break;
      }
      
      // required sint32 m_lResultIdx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lresultidx_)));
          set_has_m_lresultidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_llJackpot;
        break;
      }
      
      // required sint64 m_llJackpot = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpot_)));
          set_has_m_lljackpot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_Finished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // required sint32 m_bGiveUp = 2;
  if (has_m_bgiveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bgiveup(), output);
  }
  
  // required sint32 m_lRank = 3;
  if (has_m_lrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lrank(), output);
  }
  
  // required sint32 m_lBossUSN = 4;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lbossusn(), output);
  }
  
  // required sint64 m_llGiveMoney = 5;
  if (has_m_llgivemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llgivemoney(), output);
  }
  
  // repeated int32 m_vtWin = 6;
  for (int i = 0; i < this->m_vtwin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_vtwin(i), output);
  }
  
  // repeated int32 m_vtResult = 7;
  for (int i = 0; i < this->m_vtresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_vtresult(i), output);
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      8, this->m_vtgivemoney(i), output);
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 9;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_tblcard(i), output);
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 10;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 11;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->m_llpoolmoney(), output);
  }
  
  // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_vtusermoney(i), output);
  }
  
  // required sint32 m_lResultIdx = 13;
  if (has_m_lresultidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->m_lresultidx(), output);
  }
  
  // required sint64 m_llJackpot = 14;
  if (has_m_lljackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(14, this->m_lljackpot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_Finished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lstate(), target);
  }
  
  // required sint32 m_bGiveUp = 2;
  if (has_m_bgiveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_bgiveup(), target);
  }
  
  // required sint32 m_lRank = 3;
  if (has_m_lrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lrank(), target);
  }
  
  // required sint32 m_lBossUSN = 4;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lbossusn(), target);
  }
  
  // required sint64 m_llGiveMoney = 5;
  if (has_m_llgivemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_llgivemoney(), target);
  }
  
  // repeated int32 m_vtWin = 6;
  for (int i = 0; i < this->m_vtwin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->m_vtwin(i), target);
  }
  
  // repeated int32 m_vtResult = 7;
  for (int i = 0; i < this->m_vtresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_vtresult(i), target);
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(8, this->m_vtgivemoney(i), target);
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 9;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_tblcard(i), target);
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 10;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_tblmoney(i), target);
  }
  
  // required sint64 m_llPoolMoney = 11;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(11, this->m_llpoolmoney(), target);
  }
  
  // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_vtusermoney(i), target);
  }
  
  // required sint32 m_lResultIdx = 13;
  if (has_m_lresultidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->m_lresultidx(), target);
  }
  
  // required sint64 m_llJackpot = 14;
  if (has_m_lljackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(14, this->m_lljackpot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_Finished::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint32 m_bGiveUp = 2;
    if (has_m_bgiveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bgiveup());
    }
    
    // required sint32 m_lRank = 3;
    if (has_m_lrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lrank());
    }
    
    // required sint32 m_lBossUSN = 4;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint64 m_llGiveMoney = 5;
    if (has_m_llgivemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llgivemoney());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required sint64 m_llPoolMoney = 11;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
    // required sint32 m_lResultIdx = 13;
    if (has_m_lresultidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lresultidx());
    }
    
    // required sint64 m_llJackpot = 14;
    if (has_m_lljackpot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpot());
    }
    
  }
  // repeated int32 m_vtWin = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtwin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtwin(i));
    }
    total_size += 1 * this->m_vtwin_size() + data_size;
  }
  
  // repeated int32 m_vtResult = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtresult(i));
    }
    total_size += 1 * this->m_vtresult_size() + data_size;
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->m_vtgivemoney(i));
    }
    total_size += 1 * this->m_vtgivemoney_size() + data_size;
  }
  
  // repeated .Game_Poker.Cards m_tblCard = 9;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .Game_Poker.Money m_tblMoney = 10;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
  total_size += 1 * this->m_vtusermoney_size();
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtusermoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_Finished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_Finished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_Finished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_Finished::MergeFrom(const MsgSC_Finished& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwin_.MergeFrom(from.m_vtwin_);
  m_vtresult_.MergeFrom(from.m_vtresult_);
  m_vtgivemoney_.MergeFrom(from.m_vtgivemoney_);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  m_vtusermoney_.MergeFrom(from.m_vtusermoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_bgiveup()) {
      set_m_bgiveup(from.m_bgiveup());
    }
    if (from.has_m_lrank()) {
      set_m_lrank(from.m_lrank());
    }
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_llgivemoney()) {
      set_m_llgivemoney(from.m_llgivemoney());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
    if (from.has_m_lresultidx()) {
      set_m_lresultidx(from.m_lresultidx());
    }
    if (from.has_m_lljackpot()) {
      set_m_lljackpot(from.m_lljackpot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_Finished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_Finished::CopyFrom(const MsgSC_Finished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_Finished::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000341f) != 0x0000341f) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtusermoney_size(); i++) {
    if (!this->m_vtusermoney(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_Finished::Swap(MsgSC_Finished* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_bgiveup_, other->m_bgiveup_);
    std::swap(m_lrank_, other->m_lrank_);
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_llgivemoney_, other->m_llgivemoney_);
    m_vtwin_.Swap(&other->m_vtwin_);
    m_vtresult_.Swap(&other->m_vtresult_);
    m_vtgivemoney_.Swap(&other->m_vtgivemoney_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    m_vtusermoney_.Swap(&other->m_vtusermoney_);
    std::swap(m_lresultidx_, other->m_lresultidx_);
    std::swap(m_lljackpot_, other->m_lljackpot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_Finished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_Finished_descriptor_;
  metadata.reflection = MsgSC_Finished_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_NewGame::kMVtWinLoseInfoFieldNumber;
#endif  // !_MSC_VER

MsgSC_NewGame::MsgSC_NewGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_NewGame::InitAsDefaultInstance() {
}

MsgSC_NewGame::MsgSC_NewGame(const MsgSC_NewGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_NewGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_NewGame::~MsgSC_NewGame() {
  SharedDtor();
}

void MsgSC_NewGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_NewGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_NewGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_NewGame_descriptor_;
}

const MsgSC_NewGame& MsgSC_NewGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_NewGame* MsgSC_NewGame::default_instance_ = NULL;

MsgSC_NewGame* MsgSC_NewGame::New() const {
  return new MsgSC_NewGame;
}

void MsgSC_NewGame::Clear() {
  m_vtwinloseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_NewGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtWinLoseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtwinloseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtWinLoseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_NewGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_vtwinloseinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_NewGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_vtwinloseinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_NewGame::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
  total_size += 1 * this->m_vtwinloseinfo_size();
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtwinloseinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_NewGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_NewGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_NewGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_NewGame::MergeFrom(const MsgSC_NewGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwinloseinfo_.MergeFrom(from.m_vtwinloseinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_NewGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_NewGame::CopyFrom(const MsgSC_NewGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_NewGame::IsInitialized() const {
  
  return true;
}

void MsgSC_NewGame::Swap(MsgSC_NewGame* other) {
  if (other != this) {
    m_vtwinloseinfo_.Swap(&other->m_vtwinloseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_NewGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_NewGame_descriptor_;
  metadata.reflection = MsgSC_NewGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_ContinueAns::kMLUSNFieldNumber;
#endif  // !_MSC_VER

MsgSC_ContinueAns::MsgSC_ContinueAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_ContinueAns::InitAsDefaultInstance() {
}

MsgSC_ContinueAns::MsgSC_ContinueAns(const MsgSC_ContinueAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_ContinueAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_ContinueAns::~MsgSC_ContinueAns() {
  SharedDtor();
}

void MsgSC_ContinueAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_ContinueAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_ContinueAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_ContinueAns_descriptor_;
}

const MsgSC_ContinueAns& MsgSC_ContinueAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_ContinueAns* MsgSC_ContinueAns::default_instance_ = NULL;

MsgSC_ContinueAns* MsgSC_ContinueAns::New() const {
  return new MsgSC_ContinueAns;
}

void MsgSC_ContinueAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_ContinueAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_ContinueAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_ContinueAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_ContinueAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_ContinueAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_ContinueAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_ContinueAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_ContinueAns::MergeFrom(const MsgSC_ContinueAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_ContinueAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_ContinueAns::CopyFrom(const MsgSC_ContinueAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_ContinueAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_ContinueAns::Swap(MsgSC_ContinueAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_ContinueAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_ContinueAns_descriptor_;
  metadata.reflection = MsgSC_ContinueAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_Continue::kMVtWinLoseInfoFieldNumber;
#endif  // !_MSC_VER

MsgSC_Continue::MsgSC_Continue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_Continue::InitAsDefaultInstance() {
}

MsgSC_Continue::MsgSC_Continue(const MsgSC_Continue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_Continue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_Continue::~MsgSC_Continue() {
  SharedDtor();
}

void MsgSC_Continue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_Continue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_Continue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_Continue_descriptor_;
}

const MsgSC_Continue& MsgSC_Continue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_Continue* MsgSC_Continue::default_instance_ = NULL;

MsgSC_Continue* MsgSC_Continue::New() const {
  return new MsgSC_Continue;
}

void MsgSC_Continue::Clear() {
  m_vtwinloseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_Continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtWinLoseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtwinloseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtWinLoseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_Continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_vtwinloseinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_Continue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_vtwinloseinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_Continue::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
  total_size += 1 * this->m_vtwinloseinfo_size();
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtwinloseinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_Continue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_Continue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_Continue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_Continue::MergeFrom(const MsgSC_Continue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwinloseinfo_.MergeFrom(from.m_vtwinloseinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_Continue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_Continue::CopyFrom(const MsgSC_Continue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_Continue::IsInitialized() const {
  
  return true;
}

void MsgSC_Continue::Swap(MsgSC_Continue* other) {
  if (other != this) {
    m_vtwinloseinfo_.Swap(&other->m_vtwinloseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_Continue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_Continue_descriptor_;
  metadata.reflection = MsgSC_Continue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_SystemMsg::kMLTypeFieldNumber;
#endif  // !_MSC_VER

MsgSC_SystemMsg::MsgSC_SystemMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_SystemMsg::InitAsDefaultInstance() {
}

MsgSC_SystemMsg::MsgSC_SystemMsg(const MsgSC_SystemMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_SystemMsg::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_SystemMsg::~MsgSC_SystemMsg() {
  SharedDtor();
}

void MsgSC_SystemMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_SystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_SystemMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_SystemMsg_descriptor_;
}

const MsgSC_SystemMsg& MsgSC_SystemMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_SystemMsg* MsgSC_SystemMsg::default_instance_ = NULL;

MsgSC_SystemMsg* MsgSC_SystemMsg::New() const {
  return new MsgSC_SystemMsg;
}

void MsgSC_SystemMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_SystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_SystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_SystemMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_SystemMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_SystemMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_SystemMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_SystemMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_SystemMsg::MergeFrom(const MsgSC_SystemMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_SystemMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_SystemMsg::CopyFrom(const MsgSC_SystemMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_SystemMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_SystemMsg::Swap(MsgSC_SystemMsg* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_SystemMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_SystemMsg_descriptor_;
  metadata.reflection = MsgSC_SystemMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgSC_PurgeAns::MsgSC_PurgeAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_PurgeAns::InitAsDefaultInstance() {
}

MsgSC_PurgeAns::MsgSC_PurgeAns(const MsgSC_PurgeAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_PurgeAns::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_PurgeAns::~MsgSC_PurgeAns() {
  SharedDtor();
}

void MsgSC_PurgeAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_PurgeAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_PurgeAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_PurgeAns_descriptor_;
}

const MsgSC_PurgeAns& MsgSC_PurgeAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_PurgeAns* MsgSC_PurgeAns::default_instance_ = NULL;

MsgSC_PurgeAns* MsgSC_PurgeAns::New() const {
  return new MsgSC_PurgeAns;
}

void MsgSC_PurgeAns::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_PurgeAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgSC_PurgeAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_PurgeAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_PurgeAns::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_PurgeAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_PurgeAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_PurgeAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_PurgeAns::MergeFrom(const MsgSC_PurgeAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_PurgeAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_PurgeAns::CopyFrom(const MsgSC_PurgeAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_PurgeAns::IsInitialized() const {
  
  return true;
}

void MsgSC_PurgeAns::Swap(MsgSC_PurgeAns* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_PurgeAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_PurgeAns_descriptor_;
  metadata.reflection = MsgSC_PurgeAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_PurgeInfo::kMVtPurgeUSNFieldNumber;
const int MsgSC_PurgeInfo::kMNCountFieldNumber;
#endif  // !_MSC_VER

MsgSC_PurgeInfo::MsgSC_PurgeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_PurgeInfo::InitAsDefaultInstance() {
}

MsgSC_PurgeInfo::MsgSC_PurgeInfo(const MsgSC_PurgeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_PurgeInfo::SharedCtor() {
  _cached_size_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_PurgeInfo::~MsgSC_PurgeInfo() {
  SharedDtor();
}

void MsgSC_PurgeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_PurgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_PurgeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_PurgeInfo_descriptor_;
}

const MsgSC_PurgeInfo& MsgSC_PurgeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_PurgeInfo* MsgSC_PurgeInfo::default_instance_ = NULL;

MsgSC_PurgeInfo* MsgSC_PurgeInfo::New() const {
  return new MsgSC_PurgeInfo;
}

void MsgSC_PurgeInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_ncount_ = 0;
  }
  m_vtpurgeusn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_PurgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker.VecUSN m_vtPurgeUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtPurgeUSN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtpurgeusn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtPurgeUSN;
        if (input->ExpectTag(16)) goto parse_m_nCount;
        break;
      }
      
      // required int32 m_nCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_PurgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker.VecUSN m_vtPurgeUSN = 1;
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_vtpurgeusn(i), output);
  }
  
  // required int32 m_nCount = 2;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ncount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_PurgeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker.VecUSN m_vtPurgeUSN = 1;
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_vtpurgeusn(i), target);
  }
  
  // required int32 m_nCount = 2;
  if (has_m_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ncount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_PurgeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 m_nCount = 2;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }
    
  }
  // repeated .Game_Poker.VecUSN m_vtPurgeUSN = 1;
  total_size += 1 * this->m_vtpurgeusn_size();
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtpurgeusn(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_PurgeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_PurgeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_PurgeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_PurgeInfo::MergeFrom(const MsgSC_PurgeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtpurgeusn_.MergeFrom(from.m_vtpurgeusn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_PurgeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_PurgeInfo::CopyFrom(const MsgSC_PurgeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_PurgeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < m_vtpurgeusn_size(); i++) {
    if (!this->m_vtpurgeusn(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSC_PurgeInfo::Swap(MsgSC_PurgeInfo* other) {
  if (other != this) {
    m_vtpurgeusn_.Swap(&other->m_vtpurgeusn_);
    std::swap(m_ncount_, other->m_ncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_PurgeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_PurgeInfo_descriptor_;
  metadata.reflection = MsgSC_PurgeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_SetPurgeMoney::kMLUSNFieldNumber;
const int MsgSC_SetPurgeMoney::kMMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_SetPurgeMoney::MsgSC_SetPurgeMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_SetPurgeMoney::InitAsDefaultInstance() {
  m_money_ = const_cast< ::Game_Poker::Money*>(&::Game_Poker::Money::default_instance());
}

MsgSC_SetPurgeMoney::MsgSC_SetPurgeMoney(const MsgSC_SetPurgeMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_SetPurgeMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_SetPurgeMoney::~MsgSC_SetPurgeMoney() {
  SharedDtor();
}

void MsgSC_SetPurgeMoney::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void MsgSC_SetPurgeMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_SetPurgeMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_SetPurgeMoney_descriptor_;
}

const MsgSC_SetPurgeMoney& MsgSC_SetPurgeMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_SetPurgeMoney* MsgSC_SetPurgeMoney::default_instance_ = NULL;

MsgSC_SetPurgeMoney* MsgSC_SetPurgeMoney::New() const {
  return new MsgSC_SetPurgeMoney;
}

void MsgSC_SetPurgeMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_SetPurgeMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker.Money m_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_SetPurgeMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required .Game_Poker.Money m_money = 2;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_SetPurgeMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required .Game_Poker.Money m_money = 2;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_SetPurgeMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required .Game_Poker.Money m_money = 2;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_SetPurgeMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_SetPurgeMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_SetPurgeMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_SetPurgeMoney::MergeFrom(const MsgSC_SetPurgeMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::Money::MergeFrom(from.m_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_SetPurgeMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_SetPurgeMoney::CopyFrom(const MsgSC_SetPurgeMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_SetPurgeMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void MsgSC_SetPurgeMoney::Swap(MsgSC_SetPurgeMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_SetPurgeMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_SetPurgeMoney_descriptor_;
  metadata.reflection = MsgSC_SetPurgeMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_AssaItemNotify::kMLUSNFieldNumber;
const int MsgSC_AssaItemNotify::kMLRankTypeFieldNumber;
const int MsgSC_AssaItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

MsgSC_AssaItemNotify::MsgSC_AssaItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_AssaItemNotify::InitAsDefaultInstance() {
}

MsgSC_AssaItemNotify::MsgSC_AssaItemNotify(const MsgSC_AssaItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_AssaItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_AssaItemNotify::~MsgSC_AssaItemNotify() {
  SharedDtor();
}

void MsgSC_AssaItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void MsgSC_AssaItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_AssaItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_AssaItemNotify_descriptor_;
}

const MsgSC_AssaItemNotify& MsgSC_AssaItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_AssaItemNotify* MsgSC_AssaItemNotify::default_instance_ = NULL;

MsgSC_AssaItemNotify* MsgSC_AssaItemNotify::New() const {
  return new MsgSC_AssaItemNotify;
}

void MsgSC_AssaItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_AssaItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sitem().data(), this->m_sitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_AssaItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_sitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_AssaItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lranktype(), target);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_sitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_AssaItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required string m_sItem = 3;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_AssaItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_AssaItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_AssaItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_AssaItemNotify::MergeFrom(const MsgSC_AssaItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_AssaItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_AssaItemNotify::CopyFrom(const MsgSC_AssaItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_AssaItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgSC_AssaItemNotify::Swap(MsgSC_AssaItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_AssaItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_AssaItemNotify_descriptor_;
  metadata.reflection = MsgSC_AssaItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_ThankYouItemNotify::kMLUSNFieldNumber;
const int MsgSC_ThankYouItemNotify::kMLRankTypeFieldNumber;
const int MsgSC_ThankYouItemNotify::kMLlBasicDDangMoneyFieldNumber;
const int MsgSC_ThankYouItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

MsgSC_ThankYouItemNotify::MsgSC_ThankYouItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_ThankYouItemNotify::InitAsDefaultInstance() {
}

MsgSC_ThankYouItemNotify::MsgSC_ThankYouItemNotify(const MsgSC_ThankYouItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_ThankYouItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_llbasicddangmoney_ = GOOGLE_LONGLONG(0);
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_ThankYouItemNotify::~MsgSC_ThankYouItemNotify() {
  SharedDtor();
}

void MsgSC_ThankYouItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void MsgSC_ThankYouItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_ThankYouItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_ThankYouItemNotify_descriptor_;
}

const MsgSC_ThankYouItemNotify& MsgSC_ThankYouItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_ThankYouItemNotify* MsgSC_ThankYouItemNotify::default_instance_ = NULL;

MsgSC_ThankYouItemNotify* MsgSC_ThankYouItemNotify::New() const {
  return new MsgSC_ThankYouItemNotify;
}

void MsgSC_ThankYouItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    m_llbasicddangmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_ThankYouItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llBasicDDangMoney;
        break;
      }
      
      // required sint64 m_llBasicDDangMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llBasicDDangMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llbasicddangmoney_)));
          set_has_m_llbasicddangmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sitem().data(), this->m_sitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_ThankYouItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required sint64 m_llBasicDDangMoney = 3;
  if (has_m_llbasicddangmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llbasicddangmoney(), output);
  }
  
  // required string m_sItem = 4;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_sitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_ThankYouItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lranktype(), target);
  }
  
  // required sint64 m_llBasicDDangMoney = 3;
  if (has_m_llbasicddangmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llbasicddangmoney(), target);
  }
  
  // required string m_sItem = 4;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_sitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_ThankYouItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required sint64 m_llBasicDDangMoney = 3;
    if (has_m_llbasicddangmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llbasicddangmoney());
    }
    
    // required string m_sItem = 4;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_ThankYouItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_ThankYouItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_ThankYouItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_ThankYouItemNotify::MergeFrom(const MsgSC_ThankYouItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_llbasicddangmoney()) {
      set_m_llbasicddangmoney(from.m_llbasicddangmoney());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_ThankYouItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_ThankYouItemNotify::CopyFrom(const MsgSC_ThankYouItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_ThankYouItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgSC_ThankYouItemNotify::Swap(MsgSC_ThankYouItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_llbasicddangmoney_, other->m_llbasicddangmoney_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_ThankYouItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_ThankYouItemNotify_descriptor_;
  metadata.reflection = MsgSC_ThankYouItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_MadeItemNotify::kMLUSNFieldNumber;
const int MsgSC_MadeItemNotify::kMLRankTypeFieldNumber;
const int MsgSC_MadeItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

MsgSC_MadeItemNotify::MsgSC_MadeItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_MadeItemNotify::InitAsDefaultInstance() {
}

MsgSC_MadeItemNotify::MsgSC_MadeItemNotify(const MsgSC_MadeItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_MadeItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_MadeItemNotify::~MsgSC_MadeItemNotify() {
  SharedDtor();
}

void MsgSC_MadeItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void MsgSC_MadeItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_MadeItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_MadeItemNotify_descriptor_;
}

const MsgSC_MadeItemNotify& MsgSC_MadeItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_MadeItemNotify* MsgSC_MadeItemNotify::default_instance_ = NULL;

MsgSC_MadeItemNotify* MsgSC_MadeItemNotify::New() const {
  return new MsgSC_MadeItemNotify;
}

void MsgSC_MadeItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_MadeItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sitem().data(), this->m_sitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_MadeItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_sitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_MadeItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lranktype(), target);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_sitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_MadeItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required string m_sItem = 3;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_MadeItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_MadeItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_MadeItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_MadeItemNotify::MergeFrom(const MsgSC_MadeItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_MadeItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_MadeItemNotify::CopyFrom(const MsgSC_MadeItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_MadeItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgSC_MadeItemNotify::Swap(MsgSC_MadeItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_MadeItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_MadeItemNotify_descriptor_;
  metadata.reflection = MsgSC_MadeItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_ExtMoneyNotify::kMLUSNFieldNumber;
const int MsgSC_ExtMoneyNotify::kMBExtTypeFieldNumber;
const int MsgSC_ExtMoneyNotify::kMLlCMoneyFieldNumber;
const int MsgSC_ExtMoneyNotify::kMLlCashBoxFieldNumber;
const int MsgSC_ExtMoneyNotify::kMLlExtMoneyFieldNumber;
const int MsgSC_ExtMoneyNotify::kMLlExtDateFieldNumber;
#endif  // !_MSC_VER

MsgSC_ExtMoneyNotify::MsgSC_ExtMoneyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_ExtMoneyNotify::InitAsDefaultInstance() {
}

MsgSC_ExtMoneyNotify::MsgSC_ExtMoneyNotify(const MsgSC_ExtMoneyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_ExtMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_bexttype_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llcashbox_ = GOOGLE_LONGLONG(0);
  m_llextmoney_ = GOOGLE_LONGLONG(0);
  m_llextdate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_ExtMoneyNotify::~MsgSC_ExtMoneyNotify() {
  SharedDtor();
}

void MsgSC_ExtMoneyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_ExtMoneyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_ExtMoneyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_ExtMoneyNotify_descriptor_;
}

const MsgSC_ExtMoneyNotify& MsgSC_ExtMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_ExtMoneyNotify* MsgSC_ExtMoneyNotify::default_instance_ = NULL;

MsgSC_ExtMoneyNotify* MsgSC_ExtMoneyNotify::New() const {
  return new MsgSC_ExtMoneyNotify;
}

void MsgSC_ExtMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_bexttype_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llcashbox_ = GOOGLE_LONGLONG(0);
    m_llextmoney_ = GOOGLE_LONGLONG(0);
    m_llextdate_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_ExtMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bExtType;
        break;
      }
      
      // required sint32 m_bExtType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bExtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bexttype_)));
          set_has_m_bexttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCashBox;
        break;
      }
      
      // required sint64 m_llCashBox = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCashBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcashbox_)));
          set_has_m_llcashbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llExtMoney;
        break;
      }
      
      // required sint64 m_llExtMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llExtMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llextmoney_)));
          set_has_m_llextmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llExtDate;
        break;
      }
      
      // required sint64 m_llExtDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llExtDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llextdate_)));
          set_has_m_llextdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_ExtMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_bExtType = 2;
  if (has_m_bexttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bexttype(), output);
  }
  
  // required sint64 m_llCMoney = 3;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llCashBox = 4;
  if (has_m_llcashbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcashbox(), output);
  }
  
  // required sint64 m_llExtMoney = 5;
  if (has_m_llextmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llextmoney(), output);
  }
  
  // required sint64 m_llExtDate = 6;
  if (has_m_llextdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_llextdate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_ExtMoneyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_bExtType = 2;
  if (has_m_bexttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_bexttype(), target);
  }
  
  // required sint64 m_llCMoney = 3;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llcmoney(), target);
  }
  
  // required sint64 m_llCashBox = 4;
  if (has_m_llcashbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llcashbox(), target);
  }
  
  // required sint64 m_llExtMoney = 5;
  if (has_m_llextmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_llextmoney(), target);
  }
  
  // required sint64 m_llExtDate = 6;
  if (has_m_llextdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->m_llextdate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_ExtMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_bExtType = 2;
    if (has_m_bexttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bexttype());
    }
    
    // required sint64 m_llCMoney = 3;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llCashBox = 4;
    if (has_m_llcashbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcashbox());
    }
    
    // required sint64 m_llExtMoney = 5;
    if (has_m_llextmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llextmoney());
    }
    
    // required sint64 m_llExtDate = 6;
    if (has_m_llextdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llextdate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_ExtMoneyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_ExtMoneyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_ExtMoneyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_ExtMoneyNotify::MergeFrom(const MsgSC_ExtMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_bexttype()) {
      set_m_bexttype(from.m_bexttype());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llcashbox()) {
      set_m_llcashbox(from.m_llcashbox());
    }
    if (from.has_m_llextmoney()) {
      set_m_llextmoney(from.m_llextmoney());
    }
    if (from.has_m_llextdate()) {
      set_m_llextdate(from.m_llextdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_ExtMoneyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_ExtMoneyNotify::CopyFrom(const MsgSC_ExtMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_ExtMoneyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void MsgSC_ExtMoneyNotify::Swap(MsgSC_ExtMoneyNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_bexttype_, other->m_bexttype_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llcashbox_, other->m_llcashbox_);
    std::swap(m_llextmoney_, other->m_llextmoney_);
    std::swap(m_llextdate_, other->m_llextdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_ExtMoneyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_ExtMoneyNotify_descriptor_;
  metadata.reflection = MsgSC_ExtMoneyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_GameEndSystemMsg::kMLTypeFieldNumber;
const int MsgSC_GameEndSystemMsg::kMLUSNFieldNumber;
const int MsgSC_GameEndSystemMsg::kMBGiveUpFieldNumber;
const int MsgSC_GameEndSystemMsg::kMLlMoneyFieldNumber;
const int MsgSC_GameEndSystemMsg::kMSMsgFieldNumber;
#endif  // !_MSC_VER

MsgSC_GameEndSystemMsg::MsgSC_GameEndSystemMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_GameEndSystemMsg::InitAsDefaultInstance() {
}

MsgSC_GameEndSystemMsg::MsgSC_GameEndSystemMsg(const MsgSC_GameEndSystemMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_GameEndSystemMsg::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_lusn_ = 0;
  m_bgiveup_ = 0;
  m_llmoney_ = GOOGLE_LONGLONG(0);
  m_smsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_GameEndSystemMsg::~MsgSC_GameEndSystemMsg() {
  SharedDtor();
}

void MsgSC_GameEndSystemMsg::SharedDtor() {
  if (m_smsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgSC_GameEndSystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_GameEndSystemMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_GameEndSystemMsg_descriptor_;
}

const MsgSC_GameEndSystemMsg& MsgSC_GameEndSystemMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_GameEndSystemMsg* MsgSC_GameEndSystemMsg::default_instance_ = NULL;

MsgSC_GameEndSystemMsg* MsgSC_GameEndSystemMsg::New() const {
  return new MsgSC_GameEndSystemMsg;
}

void MsgSC_GameEndSystemMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_lusn_ = 0;
    m_bgiveup_ = 0;
    m_llmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_smsg()) {
      if (m_smsg_ != &::google::protobuf::internal::kEmptyString) {
        m_smsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_GameEndSystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lUSN;
        break;
      }
      
      // required sint32 m_lUSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_bGiveUp;
        break;
      }
      
      // required sint32 m_bGiveUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bGiveUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bgiveup_)));
          set_has_m_bgiveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llMoney;
        break;
      }
      
      // required sint64 m_llMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llmoney_)));
          set_has_m_llmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_sMsg;
        break;
      }
      
      // required string m_sMsg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_smsg().data(), this->m_smsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_GameEndSystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint32 m_lUSN = 2;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lusn(), output);
  }
  
  // required sint32 m_bGiveUp = 3;
  if (has_m_bgiveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_bgiveup(), output);
  }
  
  // required sint64 m_llMoney = 4;
  if (has_m_llmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llmoney(), output);
  }
  
  // required string m_sMsg = 5;
  if (has_m_smsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smsg().data(), this->m_smsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_smsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_GameEndSystemMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  // required sint32 m_lUSN = 2;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lusn(), target);
  }
  
  // required sint32 m_bGiveUp = 3;
  if (has_m_bgiveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_bgiveup(), target);
  }
  
  // required sint64 m_llMoney = 4;
  if (has_m_llmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llmoney(), target);
  }
  
  // required string m_sMsg = 5;
  if (has_m_smsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smsg().data(), this->m_smsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_smsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_GameEndSystemMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint32 m_lUSN = 2;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_bGiveUp = 3;
    if (has_m_bgiveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bgiveup());
    }
    
    // required sint64 m_llMoney = 4;
    if (has_m_llmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llmoney());
    }
    
    // required string m_sMsg = 5;
    if (has_m_smsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_GameEndSystemMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_GameEndSystemMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_GameEndSystemMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_GameEndSystemMsg::MergeFrom(const MsgSC_GameEndSystemMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_bgiveup()) {
      set_m_bgiveup(from.m_bgiveup());
    }
    if (from.has_m_llmoney()) {
      set_m_llmoney(from.m_llmoney());
    }
    if (from.has_m_smsg()) {
      set_m_smsg(from.m_smsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_GameEndSystemMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_GameEndSystemMsg::CopyFrom(const MsgSC_GameEndSystemMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_GameEndSystemMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MsgSC_GameEndSystemMsg::Swap(MsgSC_GameEndSystemMsg* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_bgiveup_, other->m_bgiveup_);
    std::swap(m_llmoney_, other->m_llmoney_);
    std::swap(m_smsg_, other->m_smsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_GameEndSystemMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_GameEndSystemMsg_descriptor_;
  metadata.reflection = MsgSC_GameEndSystemMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_ChangeAvatarNotify::kMLUSNFieldNumber;
const int MsgSC_ChangeAvatarNotify::kMNIndexFieldNumber;
const int MsgSC_ChangeAvatarNotify::kMUinfoFieldNumber;
#endif  // !_MSC_VER

MsgSC_ChangeAvatarNotify::MsgSC_ChangeAvatarNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_ChangeAvatarNotify::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::Game_Poker::UserInfo*>(&::Game_Poker::UserInfo::default_instance());
}

MsgSC_ChangeAvatarNotify::MsgSC_ChangeAvatarNotify(const MsgSC_ChangeAvatarNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_ChangeAvatarNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_uinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_ChangeAvatarNotify::~MsgSC_ChangeAvatarNotify() {
  SharedDtor();
}

void MsgSC_ChangeAvatarNotify::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
  }
}

void MsgSC_ChangeAvatarNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_ChangeAvatarNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_ChangeAvatarNotify_descriptor_;
}

const MsgSC_ChangeAvatarNotify& MsgSC_ChangeAvatarNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_ChangeAvatarNotify* MsgSC_ChangeAvatarNotify::default_instance_ = NULL;

MsgSC_ChangeAvatarNotify* MsgSC_ChangeAvatarNotify::New() const {
  return new MsgSC_ChangeAvatarNotify;
}

void MsgSC_ChangeAvatarNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_ChangeAvatarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_uinfo;
        break;
      }
      
      // required .Game_Poker.UserInfo m_uinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_ChangeAvatarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required .Game_Poker.UserInfo m_uinfo = 3;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_uinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_ChangeAvatarNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required .Game_Poker.UserInfo m_uinfo = 3;
  if (has_m_uinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_uinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_ChangeAvatarNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required .Game_Poker.UserInfo m_uinfo = 3;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_ChangeAvatarNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_ChangeAvatarNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_ChangeAvatarNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_ChangeAvatarNotify::MergeFrom(const MsgSC_ChangeAvatarNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::Game_Poker::UserInfo::MergeFrom(from.m_uinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_ChangeAvatarNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_ChangeAvatarNotify::CopyFrom(const MsgSC_ChangeAvatarNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_ChangeAvatarNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  return true;
}

void MsgSC_ChangeAvatarNotify::Swap(MsgSC_ChangeAvatarNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_ChangeAvatarNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_ChangeAvatarNotify_descriptor_;
  metadata.reflection = MsgSC_ChangeAvatarNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgSC_AbuseAns::MsgSC_AbuseAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_AbuseAns::InitAsDefaultInstance() {
}

MsgSC_AbuseAns::MsgSC_AbuseAns(const MsgSC_AbuseAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_AbuseAns::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_AbuseAns::~MsgSC_AbuseAns() {
  SharedDtor();
}

void MsgSC_AbuseAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_AbuseAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_AbuseAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_AbuseAns_descriptor_;
}

const MsgSC_AbuseAns& MsgSC_AbuseAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_AbuseAns* MsgSC_AbuseAns::default_instance_ = NULL;

MsgSC_AbuseAns* MsgSC_AbuseAns::New() const {
  return new MsgSC_AbuseAns;
}

void MsgSC_AbuseAns::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_AbuseAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgSC_AbuseAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_AbuseAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_AbuseAns::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_AbuseAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_AbuseAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_AbuseAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_AbuseAns::MergeFrom(const MsgSC_AbuseAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_AbuseAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_AbuseAns::CopyFrom(const MsgSC_AbuseAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_AbuseAns::IsInitialized() const {
  
  return true;
}

void MsgSC_AbuseAns::Swap(MsgSC_AbuseAns* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_AbuseAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_AbuseAns_descriptor_;
  metadata.reflection = MsgSC_AbuseAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_SoundTypeAns::kMLUSNFieldNumber;
const int MsgSC_SoundTypeAns::kMNIndexFieldNumber;
const int MsgSC_SoundTypeAns::kMLSoundTypeFieldNumber;
#endif  // !_MSC_VER

MsgSC_SoundTypeAns::MsgSC_SoundTypeAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_SoundTypeAns::InitAsDefaultInstance() {
}

MsgSC_SoundTypeAns::MsgSC_SoundTypeAns(const MsgSC_SoundTypeAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_SoundTypeAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lsoundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_SoundTypeAns::~MsgSC_SoundTypeAns() {
  SharedDtor();
}

void MsgSC_SoundTypeAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_SoundTypeAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_SoundTypeAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_SoundTypeAns_descriptor_;
}

const MsgSC_SoundTypeAns& MsgSC_SoundTypeAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_SoundTypeAns* MsgSC_SoundTypeAns::default_instance_ = NULL;

MsgSC_SoundTypeAns* MsgSC_SoundTypeAns::New() const {
  return new MsgSC_SoundTypeAns;
}

void MsgSC_SoundTypeAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lsoundtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_SoundTypeAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_SoundTypeAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lsoundtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_SoundTypeAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lsoundtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_SoundTypeAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lSoundType = 3;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_SoundTypeAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_SoundTypeAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_SoundTypeAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_SoundTypeAns::MergeFrom(const MsgSC_SoundTypeAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_SoundTypeAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_SoundTypeAns::CopyFrom(const MsgSC_SoundTypeAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_SoundTypeAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgSC_SoundTypeAns::Swap(MsgSC_SoundTypeAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_SoundTypeAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_SoundTypeAns_descriptor_;
  metadata.reflection = MsgSC_SoundTypeAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_FMoney::kMSFMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_FMoney::MsgSC_FMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_FMoney::InitAsDefaultInstance() {
}

MsgSC_FMoney::MsgSC_FMoney(const MsgSC_FMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_FMoney::SharedCtor() {
  _cached_size_ = 0;
  m_sfmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_FMoney::~MsgSC_FMoney() {
  SharedDtor();
}

void MsgSC_FMoney::SharedDtor() {
  if (m_sfmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sfmoney_;
  }
  if (this != default_instance_) {
  }
}

void MsgSC_FMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_FMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_FMoney_descriptor_;
}

const MsgSC_FMoney& MsgSC_FMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_FMoney* MsgSC_FMoney::default_instance_ = NULL;

MsgSC_FMoney* MsgSC_FMoney::New() const {
  return new MsgSC_FMoney;
}

void MsgSC_FMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_sfmoney()) {
      if (m_sfmoney_ != &::google::protobuf::internal::kEmptyString) {
        m_sfmoney_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_FMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sFMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sfmoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sfmoney().data(), this->m_sfmoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_FMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sFMoney = 1;
  if (has_m_sfmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sfmoney().data(), this->m_sfmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_sfmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_FMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_sFMoney = 1;
  if (has_m_sfmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sfmoney().data(), this->m_sfmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_sfmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_FMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sFMoney = 1;
    if (has_m_sfmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sfmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_FMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_FMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_FMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_FMoney::MergeFrom(const MsgSC_FMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_sfmoney()) {
      set_m_sfmoney(from.m_sfmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_FMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_FMoney::CopyFrom(const MsgSC_FMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_FMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_FMoney::Swap(MsgSC_FMoney* other) {
  if (other != this) {
    std::swap(m_sfmoney_, other->m_sfmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_FMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_FMoney_descriptor_;
  metadata.reflection = MsgSC_FMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_ItemNotify::kMLLimitTotalCntFieldNumber;
const int MsgSC_ItemNotify::kMLLimitTodayCntFieldNumber;
const int MsgSC_ItemNotify::kMBInfinitySpeedItemFieldNumber;
const int MsgSC_ItemNotify::kMLlSpeedToTimeFieldNumber;
#endif  // !_MSC_VER

MsgSC_ItemNotify::MsgSC_ItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_ItemNotify::InitAsDefaultInstance() {
}

MsgSC_ItemNotify::MsgSC_ItemNotify(const MsgSC_ItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_ItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_llimittotalcnt_ = 0;
  m_llimittodaycnt_ = 0;
  m_binfinityspeeditem_ = 0;
  m_llspeedtotime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_ItemNotify::~MsgSC_ItemNotify() {
  SharedDtor();
}

void MsgSC_ItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_ItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_ItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_ItemNotify_descriptor_;
}

const MsgSC_ItemNotify& MsgSC_ItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_ItemNotify* MsgSC_ItemNotify::default_instance_ = NULL;

MsgSC_ItemNotify* MsgSC_ItemNotify::New() const {
  return new MsgSC_ItemNotify;
}

void MsgSC_ItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llimittotalcnt_ = 0;
    m_llimittodaycnt_ = 0;
    m_binfinityspeeditem_ = 0;
    m_llspeedtotime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_ItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lLimitTotalCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llimittotalcnt_)));
          set_has_m_llimittotalcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lLimitTodayCnt;
        break;
      }
      
      // required sint32 m_lLimitTodayCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLimitTodayCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llimittodaycnt_)));
          set_has_m_llimittodaycnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_bInfinitySpeedItem;
        break;
      }
      
      // required sint32 m_bInfinitySpeedItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bInfinitySpeedItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_binfinityspeeditem_)));
          set_has_m_binfinityspeeditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llSpeedToTime;
        break;
      }
      
      // required sint64 m_llSpeedToTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSpeedToTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llspeedtotime_)));
          set_has_m_llspeedtotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_ItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lLimitTotalCnt = 1;
  if (has_m_llimittotalcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_llimittotalcnt(), output);
  }
  
  // required sint32 m_lLimitTodayCnt = 2;
  if (has_m_llimittodaycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_llimittodaycnt(), output);
  }
  
  // required sint32 m_bInfinitySpeedItem = 3;
  if (has_m_binfinityspeeditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_binfinityspeeditem(), output);
  }
  
  // required sint64 m_llSpeedToTime = 4;
  if (has_m_llspeedtotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llspeedtotime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_ItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lLimitTotalCnt = 1;
  if (has_m_llimittotalcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_llimittotalcnt(), target);
  }
  
  // required sint32 m_lLimitTodayCnt = 2;
  if (has_m_llimittodaycnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_llimittodaycnt(), target);
  }
  
  // required sint32 m_bInfinitySpeedItem = 3;
  if (has_m_binfinityspeeditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_binfinityspeeditem(), target);
  }
  
  // required sint64 m_llSpeedToTime = 4;
  if (has_m_llspeedtotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llspeedtotime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_ItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lLimitTotalCnt = 1;
    if (has_m_llimittotalcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llimittotalcnt());
    }
    
    // required sint32 m_lLimitTodayCnt = 2;
    if (has_m_llimittodaycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llimittodaycnt());
    }
    
    // required sint32 m_bInfinitySpeedItem = 3;
    if (has_m_binfinityspeeditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_binfinityspeeditem());
    }
    
    // required sint64 m_llSpeedToTime = 4;
    if (has_m_llspeedtotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llspeedtotime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_ItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_ItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_ItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_ItemNotify::MergeFrom(const MsgSC_ItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llimittotalcnt()) {
      set_m_llimittotalcnt(from.m_llimittotalcnt());
    }
    if (from.has_m_llimittodaycnt()) {
      set_m_llimittodaycnt(from.m_llimittodaycnt());
    }
    if (from.has_m_binfinityspeeditem()) {
      set_m_binfinityspeeditem(from.m_binfinityspeeditem());
    }
    if (from.has_m_llspeedtotime()) {
      set_m_llspeedtotime(from.m_llspeedtotime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_ItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_ItemNotify::CopyFrom(const MsgSC_ItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_ItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgSC_ItemNotify::Swap(MsgSC_ItemNotify* other) {
  if (other != this) {
    std::swap(m_llimittotalcnt_, other->m_llimittotalcnt_);
    std::swap(m_llimittodaycnt_, other->m_llimittodaycnt_);
    std::swap(m_binfinityspeeditem_, other->m_binfinityspeeditem_);
    std::swap(m_llspeedtotime_, other->m_llspeedtotime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_ItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_ItemNotify_descriptor_;
  metadata.reflection = MsgSC_ItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_DisconnectMoneyNotify::kMSNickNameFieldNumber;
const int MsgSC_DisconnectMoneyNotify::kMLlDisconnectMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_DisconnectMoneyNotify::MsgSC_DisconnectMoneyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_DisconnectMoneyNotify::InitAsDefaultInstance() {
}

MsgSC_DisconnectMoneyNotify::MsgSC_DisconnectMoneyNotify(const MsgSC_DisconnectMoneyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_DisconnectMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lldisconnectmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_DisconnectMoneyNotify::~MsgSC_DisconnectMoneyNotify() {
  SharedDtor();
}

void MsgSC_DisconnectMoneyNotify::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgSC_DisconnectMoneyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_DisconnectMoneyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_DisconnectMoneyNotify_descriptor_;
}

const MsgSC_DisconnectMoneyNotify& MsgSC_DisconnectMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_DisconnectMoneyNotify* MsgSC_DisconnectMoneyNotify::default_instance_ = NULL;

MsgSC_DisconnectMoneyNotify* MsgSC_DisconnectMoneyNotify::New() const {
  return new MsgSC_DisconnectMoneyNotify;
}

void MsgSC_DisconnectMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    m_lldisconnectmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_DisconnectMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llDisconnectMoney;
        break;
      }
      
      // required sint64 m_llDisconnectMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llDisconnectMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lldisconnectmoney_)));
          set_has_m_lldisconnectmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_DisconnectMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sNickName = 1;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_snickname(), output);
  }
  
  // required sint64 m_llDisconnectMoney = 2;
  if (has_m_lldisconnectmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_lldisconnectmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_DisconnectMoneyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_sNickName = 1;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_snickname(), target);
  }
  
  // required sint64 m_llDisconnectMoney = 2;
  if (has_m_lldisconnectmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_lldisconnectmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_DisconnectMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sNickName = 1;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required sint64 m_llDisconnectMoney = 2;
    if (has_m_lldisconnectmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lldisconnectmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_DisconnectMoneyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_DisconnectMoneyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_DisconnectMoneyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_DisconnectMoneyNotify::MergeFrom(const MsgSC_DisconnectMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_lldisconnectmoney()) {
      set_m_lldisconnectmoney(from.m_lldisconnectmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_DisconnectMoneyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_DisconnectMoneyNotify::CopyFrom(const MsgSC_DisconnectMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_DisconnectMoneyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSC_DisconnectMoneyNotify::Swap(MsgSC_DisconnectMoneyNotify* other) {
  if (other != this) {
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_lldisconnectmoney_, other->m_lldisconnectmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_DisconnectMoneyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_DisconnectMoneyNotify_descriptor_;
  metadata.reflection = MsgSC_DisconnectMoneyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_ExitNtf::kMLUSNFieldNumber;
const int MsgSC_ExitNtf::kMNIndexFieldNumber;
const int MsgSC_ExitNtf::kMLExitFieldNumber;
const int MsgSC_ExitNtf::kMBExitFieldNumber;
#endif  // !_MSC_VER

MsgSC_ExitNtf::MsgSC_ExitNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_ExitNtf::InitAsDefaultInstance() {
}

MsgSC_ExitNtf::MsgSC_ExitNtf(const MsgSC_ExitNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_ExitNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lexit_ = 0;
  m_bexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_ExitNtf::~MsgSC_ExitNtf() {
  SharedDtor();
}

void MsgSC_ExitNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_ExitNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_ExitNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_ExitNtf_descriptor_;
}

const MsgSC_ExitNtf& MsgSC_ExitNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_ExitNtf* MsgSC_ExitNtf::default_instance_ = NULL;

MsgSC_ExitNtf* MsgSC_ExitNtf::New() const {
  return new MsgSC_ExitNtf;
}

void MsgSC_ExitNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lexit_ = 0;
    m_bexit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_ExitNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lExit;
        break;
      }
      
      // required sint32 m_lExit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bExit;
        break;
      }
      
      // required sint32 m_bExit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bexit_)));
          set_has_m_bexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_ExitNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lExit = 3;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lexit(), output);
  }
  
  // required sint32 m_bExit = 4;
  if (has_m_bexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_bexit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_ExitNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_lExit = 3;
  if (has_m_lexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lexit(), target);
  }
  
  // required sint32 m_bExit = 4;
  if (has_m_bexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_bexit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_ExitNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lExit = 3;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_bExit = 4;
    if (has_m_bexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bexit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_ExitNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_ExitNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_ExitNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_ExitNtf::MergeFrom(const MsgSC_ExitNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_bexit()) {
      set_m_bexit(from.m_bexit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_ExitNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_ExitNtf::CopyFrom(const MsgSC_ExitNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_ExitNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgSC_ExitNtf::Swap(MsgSC_ExitNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_bexit_, other->m_bexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_ExitNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_ExitNtf_descriptor_;
  metadata.reflection = MsgSC_ExitNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_RematchOKAns::kMLUSNFieldNumber;
const int MsgSC_RematchOKAns::kMLlPoolMoneyFieldNumber;
const int MsgSC_RematchOKAns::kMMoneyFieldNumber;
const int MsgSC_RematchOKAns::kMBRematchOKFieldNumber;
#endif  // !_MSC_VER

MsgSC_RematchOKAns::MsgSC_RematchOKAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_RematchOKAns::InitAsDefaultInstance() {
  m_money_ = const_cast< ::Game_Poker::Money*>(&::Game_Poker::Money::default_instance());
}

MsgSC_RematchOKAns::MsgSC_RematchOKAns(const MsgSC_RematchOKAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_RematchOKAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  m_money_ = NULL;
  m_brematchok_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_RematchOKAns::~MsgSC_RematchOKAns() {
  SharedDtor();
}

void MsgSC_RematchOKAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void MsgSC_RematchOKAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_RematchOKAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_RematchOKAns_descriptor_;
}

const MsgSC_RematchOKAns& MsgSC_RematchOKAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_RematchOKAns* MsgSC_RematchOKAns::default_instance_ = NULL;

MsgSC_RematchOKAns* MsgSC_RematchOKAns::New() const {
  return new MsgSC_RematchOKAns;
}

void MsgSC_RematchOKAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
    }
    m_brematchok_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_RematchOKAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker.Money m_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bRematchOK;
        break;
      }
      
      // required sint32 m_bRematchOK = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bRematchOK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_brematchok_)));
          set_has_m_brematchok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_RematchOKAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llpoolmoney(), output);
  }
  
  // required .Game_Poker.Money m_money = 3;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_money(), output);
  }
  
  // required sint32 m_bRematchOK = 4;
  if (has_m_brematchok()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_brematchok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_RematchOKAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_llpoolmoney(), target);
  }
  
  // required .Game_Poker.Money m_money = 3;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_money(), target);
  }
  
  // required sint32 m_bRematchOK = 4;
  if (has_m_brematchok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_brematchok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_RematchOKAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint64 m_llPoolMoney = 2;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
    // required .Game_Poker.Money m_money = 3;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint32 m_bRematchOK = 4;
    if (has_m_brematchok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_brematchok());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_RematchOKAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_RematchOKAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_RematchOKAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_RematchOKAns::MergeFrom(const MsgSC_RematchOKAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::Money::MergeFrom(from.m_money());
    }
    if (from.has_m_brematchok()) {
      set_m_brematchok(from.m_brematchok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_RematchOKAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_RematchOKAns::CopyFrom(const MsgSC_RematchOKAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_RematchOKAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void MsgSC_RematchOKAns::Swap(MsgSC_RematchOKAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_brematchok_, other->m_brematchok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_RematchOKAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_RematchOKAns_descriptor_;
  metadata.reflection = MsgSC_RematchOKAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_RuleNotify::kMNRuleIdxFieldNumber;
#endif  // !_MSC_VER

MsgSC_RuleNotify::MsgSC_RuleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_RuleNotify::InitAsDefaultInstance() {
}

MsgSC_RuleNotify::MsgSC_RuleNotify(const MsgSC_RuleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_RuleNotify::SharedCtor() {
  _cached_size_ = 0;
  m_nruleidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_RuleNotify::~MsgSC_RuleNotify() {
  SharedDtor();
}

void MsgSC_RuleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_RuleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_RuleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_RuleNotify_descriptor_;
}

const MsgSC_RuleNotify& MsgSC_RuleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_RuleNotify* MsgSC_RuleNotify::default_instance_ = NULL;

MsgSC_RuleNotify* MsgSC_RuleNotify::New() const {
  return new MsgSC_RuleNotify;
}

void MsgSC_RuleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nruleidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_RuleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRuleIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nruleidx_)));
          set_has_m_nruleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_RuleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nruleidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_RuleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nruleidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_RuleNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRuleIdx = 1;
    if (has_m_nruleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nruleidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_RuleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_RuleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_RuleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_RuleNotify::MergeFrom(const MsgSC_RuleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nruleidx()) {
      set_m_nruleidx(from.m_nruleidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_RuleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_RuleNotify::CopyFrom(const MsgSC_RuleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_RuleNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_RuleNotify::Swap(MsgSC_RuleNotify* other) {
  if (other != this) {
    std::swap(m_nruleidx_, other->m_nruleidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_RuleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_RuleNotify_descriptor_;
  metadata.reflection = MsgSC_RuleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgSC_AllowEntryWaitingUser::MsgSC_AllowEntryWaitingUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_AllowEntryWaitingUser::InitAsDefaultInstance() {
}

MsgSC_AllowEntryWaitingUser::MsgSC_AllowEntryWaitingUser(const MsgSC_AllowEntryWaitingUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_AllowEntryWaitingUser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_AllowEntryWaitingUser::~MsgSC_AllowEntryWaitingUser() {
  SharedDtor();
}

void MsgSC_AllowEntryWaitingUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_AllowEntryWaitingUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_AllowEntryWaitingUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_AllowEntryWaitingUser_descriptor_;
}

const MsgSC_AllowEntryWaitingUser& MsgSC_AllowEntryWaitingUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_AllowEntryWaitingUser* MsgSC_AllowEntryWaitingUser::default_instance_ = NULL;

MsgSC_AllowEntryWaitingUser* MsgSC_AllowEntryWaitingUser::New() const {
  return new MsgSC_AllowEntryWaitingUser;
}

void MsgSC_AllowEntryWaitingUser::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_AllowEntryWaitingUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgSC_AllowEntryWaitingUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_AllowEntryWaitingUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_AllowEntryWaitingUser::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_AllowEntryWaitingUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_AllowEntryWaitingUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_AllowEntryWaitingUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_AllowEntryWaitingUser::MergeFrom(const MsgSC_AllowEntryWaitingUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_AllowEntryWaitingUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_AllowEntryWaitingUser::CopyFrom(const MsgSC_AllowEntryWaitingUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_AllowEntryWaitingUser::IsInitialized() const {
  
  return true;
}

void MsgSC_AllowEntryWaitingUser::Swap(MsgSC_AllowEntryWaitingUser* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_AllowEntryWaitingUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_AllowEntryWaitingUser_descriptor_;
  metadata.reflection = MsgSC_AllowEntryWaitingUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_AllWaitingUserDataNtf::kMBSendWaitingUserFieldNumber;
const int MsgSC_AllWaitingUserDataNtf::kMWaitingUserDataFieldNumber;
#endif  // !_MSC_VER

MsgSC_AllWaitingUserDataNtf::MsgSC_AllWaitingUserDataNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_AllWaitingUserDataNtf::InitAsDefaultInstance() {
}

MsgSC_AllWaitingUserDataNtf::MsgSC_AllWaitingUserDataNtf(const MsgSC_AllWaitingUserDataNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_AllWaitingUserDataNtf::SharedCtor() {
  _cached_size_ = 0;
  m_bsendwaitinguser_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_AllWaitingUserDataNtf::~MsgSC_AllWaitingUserDataNtf() {
  SharedDtor();
}

void MsgSC_AllWaitingUserDataNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_AllWaitingUserDataNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_AllWaitingUserDataNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_AllWaitingUserDataNtf_descriptor_;
}

const MsgSC_AllWaitingUserDataNtf& MsgSC_AllWaitingUserDataNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_AllWaitingUserDataNtf* MsgSC_AllWaitingUserDataNtf::default_instance_ = NULL;

MsgSC_AllWaitingUserDataNtf* MsgSC_AllWaitingUserDataNtf::New() const {
  return new MsgSC_AllWaitingUserDataNtf;
}

void MsgSC_AllWaitingUserDataNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bsendwaitinguser_ = 0;
  }
  m_waitinguserdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_AllWaitingUserDataNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_bSendWaitingUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bsendwaitinguser_)));
          set_has_m_bsendwaitinguser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_WaitingUserData;
        break;
      }
      
      // repeated .Game_Poker.WAITINGUSERDATA m_WaitingUserData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WaitingUserData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_waitinguserdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_WaitingUserData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_AllWaitingUserDataNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_bSendWaitingUser = 1;
  if (has_m_bsendwaitinguser()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_bsendwaitinguser(), output);
  }
  
  // repeated .Game_Poker.WAITINGUSERDATA m_WaitingUserData = 2;
  for (int i = 0; i < this->m_waitinguserdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_waitinguserdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_AllWaitingUserDataNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_bSendWaitingUser = 1;
  if (has_m_bsendwaitinguser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_bsendwaitinguser(), target);
  }
  
  // repeated .Game_Poker.WAITINGUSERDATA m_WaitingUserData = 2;
  for (int i = 0; i < this->m_waitinguserdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_waitinguserdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_AllWaitingUserDataNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_bSendWaitingUser = 1;
    if (has_m_bsendwaitinguser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bsendwaitinguser());
    }
    
  }
  // repeated .Game_Poker.WAITINGUSERDATA m_WaitingUserData = 2;
  total_size += 1 * this->m_waitinguserdata_size();
  for (int i = 0; i < this->m_waitinguserdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_waitinguserdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_AllWaitingUserDataNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_AllWaitingUserDataNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_AllWaitingUserDataNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_AllWaitingUserDataNtf::MergeFrom(const MsgSC_AllWaitingUserDataNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_waitinguserdata_.MergeFrom(from.m_waitinguserdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bsendwaitinguser()) {
      set_m_bsendwaitinguser(from.m_bsendwaitinguser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_AllWaitingUserDataNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_AllWaitingUserDataNtf::CopyFrom(const MsgSC_AllWaitingUserDataNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_AllWaitingUserDataNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_AllWaitingUserDataNtf::Swap(MsgSC_AllWaitingUserDataNtf* other) {
  if (other != this) {
    std::swap(m_bsendwaitinguser_, other->m_bsendwaitinguser_);
    m_waitinguserdata_.Swap(&other->m_waitinguserdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_AllWaitingUserDataNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_AllWaitingUserDataNtf_descriptor_;
  metadata.reflection = MsgSC_AllWaitingUserDataNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_UserDataChangeNtf::kMUserDataFieldNumber;
#endif  // !_MSC_VER

MsgSC_UserDataChangeNtf::MsgSC_UserDataChangeNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_UserDataChangeNtf::InitAsDefaultInstance() {
  m_userdata_ = const_cast< ::Game_Poker::RCUserData*>(&::Game_Poker::RCUserData::default_instance());
}

MsgSC_UserDataChangeNtf::MsgSC_UserDataChangeNtf(const MsgSC_UserDataChangeNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_UserDataChangeNtf::SharedCtor() {
  _cached_size_ = 0;
  m_userdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_UserDataChangeNtf::~MsgSC_UserDataChangeNtf() {
  SharedDtor();
}

void MsgSC_UserDataChangeNtf::SharedDtor() {
  if (this != default_instance_) {
    delete m_userdata_;
  }
}

void MsgSC_UserDataChangeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_UserDataChangeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_UserDataChangeNtf_descriptor_;
}

const MsgSC_UserDataChangeNtf& MsgSC_UserDataChangeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_UserDataChangeNtf* MsgSC_UserDataChangeNtf::default_instance_ = NULL;

MsgSC_UserDataChangeNtf* MsgSC_UserDataChangeNtf::New() const {
  return new MsgSC_UserDataChangeNtf;
}

void MsgSC_UserDataChangeNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_userdata()) {
      if (m_userdata_ != NULL) m_userdata_->::Game_Poker::RCUserData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_UserDataChangeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Game_Poker.RCUserData m_userData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_userdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_UserDataChangeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Game_Poker.RCUserData m_userData = 1;
  if (has_m_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_userdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_UserDataChangeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Game_Poker.RCUserData m_userData = 1;
  if (has_m_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_userdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_UserDataChangeNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Game_Poker.RCUserData m_userData = 1;
    if (has_m_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_userdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_UserDataChangeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_UserDataChangeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_UserDataChangeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_UserDataChangeNtf::MergeFrom(const MsgSC_UserDataChangeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_userdata()) {
      mutable_m_userdata()->::Game_Poker::RCUserData::MergeFrom(from.m_userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_UserDataChangeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_UserDataChangeNtf::CopyFrom(const MsgSC_UserDataChangeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_UserDataChangeNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_UserDataChangeNtf::Swap(MsgSC_UserDataChangeNtf* other) {
  if (other != this) {
    std::swap(m_userdata_, other->m_userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_UserDataChangeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_UserDataChangeNtf_descriptor_;
  metadata.reflection = MsgSC_UserDataChangeNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_RefillMoneyNtf::kMLUSNFieldNumber;
const int MsgSC_RefillMoneyNtf::kMNRefillCntFieldNumber;
const int MsgSC_RefillMoneyNtf::kMLlRefillMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_RefillMoneyNtf::MsgSC_RefillMoneyNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_RefillMoneyNtf::InitAsDefaultInstance() {
}

MsgSC_RefillMoneyNtf::MsgSC_RefillMoneyNtf(const MsgSC_RefillMoneyNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_RefillMoneyNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nrefillcnt_ = 0;
  m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_RefillMoneyNtf::~MsgSC_RefillMoneyNtf() {
  SharedDtor();
}

void MsgSC_RefillMoneyNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_RefillMoneyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_RefillMoneyNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_RefillMoneyNtf_descriptor_;
}

const MsgSC_RefillMoneyNtf& MsgSC_RefillMoneyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_RefillMoneyNtf* MsgSC_RefillMoneyNtf::default_instance_ = NULL;

MsgSC_RefillMoneyNtf* MsgSC_RefillMoneyNtf::New() const {
  return new MsgSC_RefillMoneyNtf;
}

void MsgSC_RefillMoneyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nrefillcnt_ = 0;
    m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_RefillMoneyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nRefillCnt;
        break;
      }
      
      // required int32 m_nRefillCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRefillCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nrefillcnt_)));
          set_has_m_nrefillcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llRefillMoney;
        break;
      }
      
      // required sint64 m_llRefillMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRefillMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llrefillmoney_)));
          set_has_m_llrefillmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_RefillMoneyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nRefillCnt = 2;
  if (has_m_nrefillcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nrefillcnt(), output);
  }
  
  // required sint64 m_llRefillMoney = 3;
  if (has_m_llrefillmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llrefillmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_RefillMoneyNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nRefillCnt = 2;
  if (has_m_nrefillcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nrefillcnt(), target);
  }
  
  // required sint64 m_llRefillMoney = 3;
  if (has_m_llrefillmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llrefillmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_RefillMoneyNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nRefillCnt = 2;
    if (has_m_nrefillcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nrefillcnt());
    }
    
    // required sint64 m_llRefillMoney = 3;
    if (has_m_llrefillmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llrefillmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_RefillMoneyNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_RefillMoneyNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_RefillMoneyNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_RefillMoneyNtf::MergeFrom(const MsgSC_RefillMoneyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nrefillcnt()) {
      set_m_nrefillcnt(from.m_nrefillcnt());
    }
    if (from.has_m_llrefillmoney()) {
      set_m_llrefillmoney(from.m_llrefillmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_RefillMoneyNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_RefillMoneyNtf::CopyFrom(const MsgSC_RefillMoneyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_RefillMoneyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgSC_RefillMoneyNtf::Swap(MsgSC_RefillMoneyNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nrefillcnt_, other->m_nrefillcnt_);
    std::swap(m_llrefillmoney_, other->m_llrefillmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_RefillMoneyNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_RefillMoneyNtf_descriptor_;
  metadata.reflection = MsgSC_RefillMoneyNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_JackpotMoneyNtf::kMLUSNFieldNumber;
const int MsgSC_JackpotMoneyNtf::kMLlJackpotMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_JackpotMoneyNtf::MsgSC_JackpotMoneyNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_JackpotMoneyNtf::InitAsDefaultInstance() {
}

MsgSC_JackpotMoneyNtf::MsgSC_JackpotMoneyNtf(const MsgSC_JackpotMoneyNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_JackpotMoneyNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_JackpotMoneyNtf::~MsgSC_JackpotMoneyNtf() {
  SharedDtor();
}

void MsgSC_JackpotMoneyNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_JackpotMoneyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_JackpotMoneyNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_JackpotMoneyNtf_descriptor_;
}

const MsgSC_JackpotMoneyNtf& MsgSC_JackpotMoneyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_JackpotMoneyNtf* MsgSC_JackpotMoneyNtf::default_instance_ = NULL;

MsgSC_JackpotMoneyNtf* MsgSC_JackpotMoneyNtf::New() const {
  return new MsgSC_JackpotMoneyNtf;
}

void MsgSC_JackpotMoneyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_JackpotMoneyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llJackpotMoney;
        break;
      }
      
      // required sint64 m_llJackpotMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpotMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpotmoney_)));
          set_has_m_lljackpotmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_JackpotMoneyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint64 m_llJackpotMoney = 2;
  if (has_m_lljackpotmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_lljackpotmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_JackpotMoneyNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint64 m_llJackpotMoney = 2;
  if (has_m_lljackpotmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_lljackpotmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_JackpotMoneyNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint64 m_llJackpotMoney = 2;
    if (has_m_lljackpotmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpotmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_JackpotMoneyNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_JackpotMoneyNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_JackpotMoneyNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_JackpotMoneyNtf::MergeFrom(const MsgSC_JackpotMoneyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lljackpotmoney()) {
      set_m_lljackpotmoney(from.m_lljackpotmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_JackpotMoneyNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_JackpotMoneyNtf::CopyFrom(const MsgSC_JackpotMoneyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_JackpotMoneyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSC_JackpotMoneyNtf::Swap(MsgSC_JackpotMoneyNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lljackpotmoney_, other->m_lljackpotmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_JackpotMoneyNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_JackpotMoneyNtf_descriptor_;
  metadata.reflection = MsgSC_JackpotMoneyNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_GuardianAngelMoney::kMLUSNFieldNumber;
const int MsgSC_GuardianAngelMoney::kMNGuardianAngelCntFieldNumber;
const int MsgSC_GuardianAngelMoney::kMLlAngelMoneyFieldNumber;
#endif  // !_MSC_VER

MsgSC_GuardianAngelMoney::MsgSC_GuardianAngelMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_GuardianAngelMoney::InitAsDefaultInstance() {
}

MsgSC_GuardianAngelMoney::MsgSC_GuardianAngelMoney(const MsgSC_GuardianAngelMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_GuardianAngelMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nguardianangelcnt_ = 0;
  m_llangelmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_GuardianAngelMoney::~MsgSC_GuardianAngelMoney() {
  SharedDtor();
}

void MsgSC_GuardianAngelMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_GuardianAngelMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_GuardianAngelMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_GuardianAngelMoney_descriptor_;
}

const MsgSC_GuardianAngelMoney& MsgSC_GuardianAngelMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_GuardianAngelMoney* MsgSC_GuardianAngelMoney::default_instance_ = NULL;

MsgSC_GuardianAngelMoney* MsgSC_GuardianAngelMoney::New() const {
  return new MsgSC_GuardianAngelMoney;
}

void MsgSC_GuardianAngelMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nguardianangelcnt_ = 0;
    m_llangelmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_GuardianAngelMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nGuardianAngelCnt;
        break;
      }
      
      // required int32 m_nGuardianAngelCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nGuardianAngelCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nguardianangelcnt_)));
          set_has_m_nguardianangelcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llAngelMoney;
        break;
      }
      
      // required sint64 m_llAngelMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llAngelMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llangelmoney_)));
          set_has_m_llangelmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_GuardianAngelMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nGuardianAngelCnt = 2;
  if (has_m_nguardianangelcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nguardianangelcnt(), output);
  }
  
  // required sint64 m_llAngelMoney = 3;
  if (has_m_llangelmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llangelmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_GuardianAngelMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nGuardianAngelCnt = 2;
  if (has_m_nguardianangelcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nguardianangelcnt(), target);
  }
  
  // required sint64 m_llAngelMoney = 3;
  if (has_m_llangelmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llangelmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_GuardianAngelMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nGuardianAngelCnt = 2;
    if (has_m_nguardianangelcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nguardianangelcnt());
    }
    
    // required sint64 m_llAngelMoney = 3;
    if (has_m_llangelmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llangelmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_GuardianAngelMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_GuardianAngelMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_GuardianAngelMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_GuardianAngelMoney::MergeFrom(const MsgSC_GuardianAngelMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nguardianangelcnt()) {
      set_m_nguardianangelcnt(from.m_nguardianangelcnt());
    }
    if (from.has_m_llangelmoney()) {
      set_m_llangelmoney(from.m_llangelmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_GuardianAngelMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_GuardianAngelMoney::CopyFrom(const MsgSC_GuardianAngelMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_GuardianAngelMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgSC_GuardianAngelMoney::Swap(MsgSC_GuardianAngelMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nguardianangelcnt_, other->m_nguardianangelcnt_);
    std::swap(m_llangelmoney_, other->m_llangelmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_GuardianAngelMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_GuardianAngelMoney_descriptor_;
  metadata.reflection = MsgSC_GuardianAngelMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_GameMasterCallNtf::kMLGMCallUSNFieldNumber;
#endif  // !_MSC_VER

MsgSC_GameMasterCallNtf::MsgSC_GameMasterCallNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_GameMasterCallNtf::InitAsDefaultInstance() {
}

MsgSC_GameMasterCallNtf::MsgSC_GameMasterCallNtf(const MsgSC_GameMasterCallNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_GameMasterCallNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lgmcall_usn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_GameMasterCallNtf::~MsgSC_GameMasterCallNtf() {
  SharedDtor();
}

void MsgSC_GameMasterCallNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_GameMasterCallNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_GameMasterCallNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_GameMasterCallNtf_descriptor_;
}

const MsgSC_GameMasterCallNtf& MsgSC_GameMasterCallNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_GameMasterCallNtf* MsgSC_GameMasterCallNtf::default_instance_ = NULL;

MsgSC_GameMasterCallNtf* MsgSC_GameMasterCallNtf::New() const {
  return new MsgSC_GameMasterCallNtf;
}

void MsgSC_GameMasterCallNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lgmcall_usn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_GameMasterCallNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lGMCall_USN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lgmcall_usn_)));
          set_has_m_lgmcall_usn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_GameMasterCallNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lGMCall_USN = 1;
  if (has_m_lgmcall_usn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lgmcall_usn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_GameMasterCallNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lGMCall_USN = 1;
  if (has_m_lgmcall_usn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lgmcall_usn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_GameMasterCallNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lGMCall_USN = 1;
    if (has_m_lgmcall_usn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lgmcall_usn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_GameMasterCallNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_GameMasterCallNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_GameMasterCallNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_GameMasterCallNtf::MergeFrom(const MsgSC_GameMasterCallNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lgmcall_usn()) {
      set_m_lgmcall_usn(from.m_lgmcall_usn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_GameMasterCallNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_GameMasterCallNtf::CopyFrom(const MsgSC_GameMasterCallNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_GameMasterCallNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_GameMasterCallNtf::Swap(MsgSC_GameMasterCallNtf* other) {
  if (other != this) {
    std::swap(m_lgmcall_usn_, other->m_lgmcall_usn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_GameMasterCallNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_GameMasterCallNtf_descriptor_;
  metadata.reflection = MsgSC_GameMasterCallNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_ObserverCnt::kMNObserverCntFieldNumber;
#endif  // !_MSC_VER

MsgSC_ObserverCnt::MsgSC_ObserverCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_ObserverCnt::InitAsDefaultInstance() {
}

MsgSC_ObserverCnt::MsgSC_ObserverCnt(const MsgSC_ObserverCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_ObserverCnt::SharedCtor() {
  _cached_size_ = 0;
  m_nobservercnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_ObserverCnt::~MsgSC_ObserverCnt() {
  SharedDtor();
}

void MsgSC_ObserverCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_ObserverCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_ObserverCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_ObserverCnt_descriptor_;
}

const MsgSC_ObserverCnt& MsgSC_ObserverCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_ObserverCnt* MsgSC_ObserverCnt::default_instance_ = NULL;

MsgSC_ObserverCnt* MsgSC_ObserverCnt::New() const {
  return new MsgSC_ObserverCnt;
}

void MsgSC_ObserverCnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nobservercnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_ObserverCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nObserverCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nobservercnt_)));
          set_has_m_nobservercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_ObserverCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nObserverCnt = 1;
  if (has_m_nobservercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nobservercnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_ObserverCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nObserverCnt = 1;
  if (has_m_nobservercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nobservercnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_ObserverCnt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nObserverCnt = 1;
    if (has_m_nobservercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nobservercnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_ObserverCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_ObserverCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_ObserverCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_ObserverCnt::MergeFrom(const MsgSC_ObserverCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nobservercnt()) {
      set_m_nobservercnt(from.m_nobservercnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_ObserverCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_ObserverCnt::CopyFrom(const MsgSC_ObserverCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_ObserverCnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_ObserverCnt::Swap(MsgSC_ObserverCnt* other) {
  if (other != this) {
    std::swap(m_nobservercnt_, other->m_nobservercnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_ObserverCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_ObserverCnt_descriptor_;
  metadata.reflection = MsgSC_ObserverCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_Bonus::kMLlBonusFieldNumber;
#endif  // !_MSC_VER

MsgSC_Bonus::MsgSC_Bonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_Bonus::InitAsDefaultInstance() {
}

MsgSC_Bonus::MsgSC_Bonus(const MsgSC_Bonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_Bonus::SharedCtor() {
  _cached_size_ = 0;
  m_llbonus_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_Bonus::~MsgSC_Bonus() {
  SharedDtor();
}

void MsgSC_Bonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSC_Bonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_Bonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_Bonus_descriptor_;
}

const MsgSC_Bonus& MsgSC_Bonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_Bonus* MsgSC_Bonus::default_instance_ = NULL;

MsgSC_Bonus* MsgSC_Bonus::New() const {
  return new MsgSC_Bonus;
}

void MsgSC_Bonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llbonus_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_Bonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llBonus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llbonus_)));
          set_has_m_llbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_Bonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llBonus = 1;
  if (has_m_llbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llbonus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_Bonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llBonus = 1;
  if (has_m_llbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llbonus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_Bonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llBonus = 1;
    if (has_m_llbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llbonus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_Bonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_Bonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_Bonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_Bonus::MergeFrom(const MsgSC_Bonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llbonus()) {
      set_m_llbonus(from.m_llbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_Bonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_Bonus::CopyFrom(const MsgSC_Bonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_Bonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_Bonus::Swap(MsgSC_Bonus* other) {
  if (other != this) {
    std::swap(m_llbonus_, other->m_llbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_Bonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_Bonus_descriptor_;
  metadata.reflection = MsgSC_Bonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSC_PoliceNotify::kMPoliceMsgFieldNumber;
#endif  // !_MSC_VER

MsgSC_PoliceNotify::MsgSC_PoliceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSC_PoliceNotify::InitAsDefaultInstance() {
}

MsgSC_PoliceNotify::MsgSC_PoliceNotify(const MsgSC_PoliceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSC_PoliceNotify::SharedCtor() {
  _cached_size_ = 0;
  m_policemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSC_PoliceNotify::~MsgSC_PoliceNotify() {
  SharedDtor();
}

void MsgSC_PoliceNotify::SharedDtor() {
  if (m_policemsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_policemsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgSC_PoliceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSC_PoliceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSC_PoliceNotify_descriptor_;
}

const MsgSC_PoliceNotify& MsgSC_PoliceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

MsgSC_PoliceNotify* MsgSC_PoliceNotify::default_instance_ = NULL;

MsgSC_PoliceNotify* MsgSC_PoliceNotify::New() const {
  return new MsgSC_PoliceNotify;
}

void MsgSC_PoliceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_policemsg()) {
      if (m_policemsg_ != &::google::protobuf::internal::kEmptyString) {
        m_policemsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSC_PoliceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_policeMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_policemsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_policemsg().data(), this->m_policemsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSC_PoliceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_policeMsg = 1;
  if (has_m_policemsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_policemsg().data(), this->m_policemsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_policemsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSC_PoliceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_policeMsg = 1;
  if (has_m_policemsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_policemsg().data(), this->m_policemsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_policemsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSC_PoliceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_policeMsg = 1;
    if (has_m_policemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_policemsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSC_PoliceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSC_PoliceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSC_PoliceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSC_PoliceNotify::MergeFrom(const MsgSC_PoliceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_policemsg()) {
      set_m_policemsg(from.m_policemsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSC_PoliceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSC_PoliceNotify::CopyFrom(const MsgSC_PoliceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSC_PoliceNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgSC_PoliceNotify::Swap(MsgSC_PoliceNotify* other) {
  if (other != this) {
    std::swap(m_policemsg_, other->m_policemsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSC_PoliceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSC_PoliceNotify_descriptor_;
  metadata.reflection = MsgSC_PoliceNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PayloadSC_TAGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayloadSC_TAGID_descriptor_;
}
bool PayloadSC_TAGID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PayloadSC_TAGID PayloadSC::Header;
const PayloadSC_TAGID PayloadSC::_Null_Tag;
const PayloadSC_TAGID PayloadSC::msgUserJoinAns_Tag;
const PayloadSC_TAGID PayloadSC::msgUserJoinErr_Tag;
const PayloadSC_TAGID PayloadSC::msgUserDisconnect_Tag;
const PayloadSC_TAGID PayloadSC::msgCardData_Tag;
const PayloadSC_TAGID PayloadSC::msgEntryAns_Tag;
const PayloadSC_TAGID PayloadSC::msgEntryReject_Tag;
const PayloadSC_TAGID PayloadSC::msgObserveAns_Tag;
const PayloadSC_TAGID PayloadSC::msgStartReq_Tag;
const PayloadSC_TAGID PayloadSC::msgStartAns_Tag;
const PayloadSC_TAGID PayloadSC::msgNoStart_Tag;
const PayloadSC_TAGID PayloadSC::msgDealCards_Tag;
const PayloadSC_TAGID PayloadSC::msgSelectedCardAns_Tag;
const PayloadSC_TAGID PayloadSC::msgDealOpenCard_Tag;
const PayloadSC_TAGID PayloadSC::msgDealHiddenCard_Tag;
const PayloadSC_TAGID PayloadSC::msgDealCard_Tag;
const PayloadSC_TAGID PayloadSC::msgBoss_Tag;
const PayloadSC_TAGID PayloadSC::msgBetting_Tag;
const PayloadSC_TAGID PayloadSC::msgBettingAns_Tag;
const PayloadSC_TAGID PayloadSC::msgBettingAnsMsg_Tag;
const PayloadSC_TAGID PayloadSC::msgAnteMoney_Tag;
const PayloadSC_TAGID PayloadSC::msgRuleQuaterHalf_Tag;
const PayloadSC_TAGID PayloadSC::msgFinished_Tag;
const PayloadSC_TAGID PayloadSC::msgNewGame_Tag;
const PayloadSC_TAGID PayloadSC::msgContinueAns_Tag;
const PayloadSC_TAGID PayloadSC::msgContinue_Tag;
const PayloadSC_TAGID PayloadSC::msgSystemMsg_Tag;
const PayloadSC_TAGID PayloadSC::msgPurgeAns_Tag;
const PayloadSC_TAGID PayloadSC::msgPurgeInfo_Tag;
const PayloadSC_TAGID PayloadSC::msgSetPurgeMoney_Tag;
const PayloadSC_TAGID PayloadSC::msgThankYouItemNotify_Tag;
const PayloadSC_TAGID PayloadSC::msgMadeItemNotify_Tag;
const PayloadSC_TAGID PayloadSC::msgAssaItemNotify_Tag;
const PayloadSC_TAGID PayloadSC::msgExtMoneyNotify_Tag;
const PayloadSC_TAGID PayloadSC::msgGameEndSystemMsg_Tag;
const PayloadSC_TAGID PayloadSC::msgChangeAvatarNotify_Tag;
const PayloadSC_TAGID PayloadSC::msgAbuseAns_Tag;
const PayloadSC_TAGID PayloadSC::msgSoundTypeAns_Tag;
const PayloadSC_TAGID PayloadSC::msgFMoney_Tag;
const PayloadSC_TAGID PayloadSC::msgItemNotify_Tag;
const PayloadSC_TAGID PayloadSC::msgDisconnectMoneyNotify_Tag;
const PayloadSC_TAGID PayloadSC::msgExitNtf_Tag;
const PayloadSC_TAGID PayloadSC::msgAllowEntryWaitingUser_Tag;
const PayloadSC_TAGID PayloadSC::msgAllWaitingUserDataNtf_Tag;
const PayloadSC_TAGID PayloadSC::msgUserDataChangeNtf_Tag;
const PayloadSC_TAGID PayloadSC::msgRefillMoneyNtf_Tag;
const PayloadSC_TAGID PayloadSC::msgJackpotMoneyNtf_Tag;
const PayloadSC_TAGID PayloadSC::msgRuleNotify_Tag;
const PayloadSC_TAGID PayloadSC::msgGuardianAngelMoney_Tag;
const PayloadSC_TAGID PayloadSC::msgGameMasterCallNtf_Tag;
const PayloadSC_TAGID PayloadSC::msgObserverCnt_Tag;
const PayloadSC_TAGID PayloadSC::msgBonus_Tag;
const PayloadSC_TAGID PayloadSC::msgPoliceNotify_Tag;
const PayloadSC_TAGID PayloadSC::_Max_Tag;
const PayloadSC_TAGID PayloadSC::TAGID_MIN;
const PayloadSC_TAGID PayloadSC::TAGID_MAX;
const int PayloadSC::TAGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PayloadSC::kMTagIDFieldNumber;
const int PayloadSC::kBSharedFieldNumber;
#endif  // !_MSC_VER

PayloadSC::PayloadSC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayloadSC::InitAsDefaultInstance() {
}

PayloadSC::PayloadSC(const PayloadSC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayloadSC::SharedCtor() {
  _cached_size_ = 0;
  mtagid_ = 0u;
  bshared_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayloadSC::~PayloadSC() {
  SharedDtor();
}

void PayloadSC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PayloadSC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayloadSC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayloadSC_descriptor_;
}

const PayloadSC& PayloadSC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdlGame_5fPoker_2eproto();  return *default_instance_;
}

PayloadSC* PayloadSC::default_instance_ = NULL;

PayloadSC* PayloadSC::New() const {
  return new PayloadSC;
}

void PayloadSC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mtagid_ = 0u;
    bshared_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayloadSC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mTagID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtagid_)));
          set_has_mtagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bShared;
        break;
      }
      
      // required bool bShared = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bShared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshared_)));
          set_has_bshared();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayloadSC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mTagID = 1;
  if (has_mtagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mtagid(), output);
  }
  
  // required bool bShared = 2;
  if (has_bshared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bshared(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayloadSC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mTagID = 1;
  if (has_mtagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mtagid(), target);
  }
  
  // required bool bShared = 2;
  if (has_bshared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bshared(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayloadSC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mTagID = 1;
    if (has_mtagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mtagid());
    }
    
    // required bool bShared = 2;
    if (has_bshared()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayloadSC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayloadSC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayloadSC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayloadSC::MergeFrom(const PayloadSC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mtagid()) {
      set_mtagid(from.mtagid());
    }
    if (from.has_bshared()) {
      set_bshared(from.bshared());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayloadSC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadSC::CopyFrom(const PayloadSC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadSC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PayloadSC::Swap(PayloadSC* other) {
  if (other != this) {
    std::swap(mtagid_, other->mtagid_);
    std::swap(bshared_, other->bshared_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayloadSC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayloadSC_descriptor_;
  metadata.reflection = PayloadSC_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game_Poker

// @@protoc_insertion_point(global_scope)
