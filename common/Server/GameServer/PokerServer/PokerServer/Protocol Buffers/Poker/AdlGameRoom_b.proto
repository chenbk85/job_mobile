//
// AdlGameRoom_b.h: generated by XADL compiler 1.1 , 2011.8.24 16:38:0
//

#ifndef GAMEROOM_H
#define GAMEROOM_H

namespace adl { // start of namesapce
template<>
class BER<Option >
{
public:
	static DWORD Size(const Option& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<std::string >::Size(_obj.m_sRoomTitle);
		dwSize += BER<std::string >::Size(_obj.m_sPassword);
		dwSize += BER<LONG >::Size(_obj.m_lMaxUserCnt);
		dwSize += BER<LONG >::Size(_obj.m_lMaxPlayerUserCnt);
		dwSize += BER<LONG >::Size(_obj.m_lMaxPlayerCardCnt);
		dwSize += BER<LONG >::Size(_obj.m_lChoiceMode);
		dwSize += BER<LONG >::Size(_obj.m_lRoomType);
		dwSize += BER<LONG >::Size(_obj.m_lBetRule);
		dwSize += BER<LONG >::Size(_obj.m_lBetType);
		dwSize += BER<LONG >::Size(_obj.m_lAddRule);
		dwSize += BER<LONG >::Size(_obj.m_lRematchJoin);
		dwSize += BER<LONG >::Size(_obj.m_lLimitMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llGameAnteMoney);
		dwSize += BER<LONG >::Size(_obj.m_bEcho);
		dwSize += BER<LONG >::Size(_obj.m_lMakeUSN);
		dwSize += BER<LONG >::Size(_obj.m_lCategory);
		dwSize += BER<LONG >::Size(_obj.m_lChannelID);
		dwSize += BER<LONGLONG >::Size(_obj.m_llAnteMoney);
		return dwSize;
	}

	static bool Load(Option* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<std::string >::Load(&(_obj->m_sRoomTitle), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sPassword), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMaxUserCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMaxPlayerUserCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMaxPlayerCardCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lChoiceMode), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRoomType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lBetRule), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lBetType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lAddRule), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRematchJoin), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lLimitMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llGameAnteMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bEcho), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMakeUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCategory), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lChannelID), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llAnteMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const Option& _obj )
	{
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sRoomTitle ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sPassword ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMaxUserCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMaxPlayerUserCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMaxPlayerCardCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lChoiceMode ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRoomType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBetRule ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBetType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lAddRule ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRematchJoin ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lLimitMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llGameAnteMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bEcho ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMakeUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCategory ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lChannelID ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llAnteMoney ))
			return false;
		return true;
	}
	static bool Copy(Option* _obj, const Option& src)
	{
		if(!BER<std::string >::Copy(&(_obj->m_sRoomTitle), src.m_sRoomTitle))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sPassword), src.m_sPassword))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMaxUserCnt), src.m_lMaxUserCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMaxPlayerUserCnt), src.m_lMaxPlayerUserCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMaxPlayerCardCnt), src.m_lMaxPlayerCardCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lChoiceMode), src.m_lChoiceMode))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRoomType), src.m_lRoomType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lBetRule), src.m_lBetRule))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lBetType), src.m_lBetType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lAddRule), src.m_lAddRule))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRematchJoin), src.m_lRematchJoin))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lLimitMoney), src.m_lLimitMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llGameAnteMoney), src.m_llGameAnteMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bEcho), src.m_bEcho))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMakeUSN), src.m_lMakeUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCategory), src.m_lCategory))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lChannelID), src.m_lChannelID))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llAnteMoney), src.m_llAnteMoney))
			return false;
		return true;
	}

};

template<>
class BER<RCRoomData >
{
public:
	static DWORD Size(const RCRoomData& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lGameMaster);
		dwSize += BER<LONG >::Size(_obj.m_lRoomIndex);
		dwSize += BER<LONG >::Size(_obj.m_lState);
		dwSize += BER<Option >::Size(_obj.m_option);
		dwSize += BER<UITable >::Size(_obj.m_tblUI);
		dwSize += BER<CardTable >::Size(_obj.m_tblCard);
		dwSize += BER<MoneyTable >::Size(_obj.m_tblMoney);
		dwSize += BER<BettingMsgTable >::Size(_obj.m_tblBettingMsg);
		return dwSize;
	}

	static bool Load(RCRoomData* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lGameMaster), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRoomIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lState), ppBuf, pdwSize))
			return false;
		if(!BER<Option >::Load(&(_obj->m_option), ppBuf, pdwSize))
			return false;
		if(!BER<UITable >::Load(&(_obj->m_tblUI), ppBuf, pdwSize))
			return false;
		if(!BER<CardTable >::Load(&(_obj->m_tblCard), ppBuf, pdwSize))
			return false;
		if(!BER<MoneyTable >::Load(&(_obj->m_tblMoney), ppBuf, pdwSize))
			return false;
		if(!BER<BettingMsgTable >::Load(&(_obj->m_tblBettingMsg), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const RCRoomData& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGameMaster ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRoomIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lState ))
			return false;
		if(!BER<Option >::Store(ppBuf, pdwSize, _obj.m_option ))
			return false;
		if(!BER<UITable >::Store(ppBuf, pdwSize, _obj.m_tblUI ))
			return false;
		if(!BER<CardTable >::Store(ppBuf, pdwSize, _obj.m_tblCard ))
			return false;
		if(!BER<MoneyTable >::Store(ppBuf, pdwSize, _obj.m_tblMoney ))
			return false;
		if(!BER<BettingMsgTable >::Store(ppBuf, pdwSize, _obj.m_tblBettingMsg ))
			return false;
		return true;
	}
	static bool Copy(RCRoomData* _obj, const RCRoomData& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lGameMaster), src.m_lGameMaster))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRoomIndex), src.m_lRoomIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lState), src.m_lState))
			return false;
		if(!BER<Option >::Copy(&(_obj->m_option), src.m_option))
			return false;
		if(!BER<UITable >::Copy(&(_obj->m_tblUI), src.m_tblUI))
			return false;
		if(!BER<CardTable >::Copy(&(_obj->m_tblCard), src.m_tblCard))
			return false;
		if(!BER<MoneyTable >::Copy(&(_obj->m_tblMoney), src.m_tblMoney))
			return false;
		if(!BER<BettingMsgTable >::Copy(&(_obj->m_tblBettingMsg), src.m_tblBettingMsg))
			return false;
		return true;
	}

};

};

#endif //!
