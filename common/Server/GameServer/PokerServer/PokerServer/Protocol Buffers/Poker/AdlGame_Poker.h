//
// Game_Poker: generated by XADL compiler 1.1 , 2011.8.24 16:38:0
//

#ifndef ADLGAME_POKER_H
#define ADLGAME_POKER_H

#include "AdlGameRoom.h"
#include "AdlGameCommon.h"

namespace adl { // start of namesapce

//#include "AdlGameRoom.h"
//#include "AdlGameCommon.h"

	//using namespace adl;

///////////////////////////////////////////////////////////////////////////////////////////////////
// ADL Message & Payloads.
///////////////////////////////////////////////////////////////////////////////////////////////////

//=================================================================================================
//	Client -> GRC
//=================================================================================================

/*
class MsgCS_Entry
{
public:
	int	m_nVersion;
	LONG	m_bWelcomeSound;
	LONG	m_lSoundType;
	std::string	m_sNickName;
	std::string	m_sAvt;
	LONG	m_lCLevel;
	LONG	m_lSex;
};
*/

/*
class MsgCS_Observe
{
public:
};
*/

/*
class MsgCS_Start
{ 
public:
};
*/

/*
class MsgCS_SelectedCardReq
{ public:
	LONG	m_lCardIdx;
};
*/

/*
class MsgCS_BettingReq
{ public:
	LONG	m_lBetType;
};
*/

/*
class MsgCS_ChoiceRemoveCard
{ public:
	LONG	m_lUSN;
	int	m_nRemoveCardIndex;
};
*/

/*
class MsgCS_Purge
{ public:
	LONG	m_lType;
	LONG	m_lPurgeUSN;
};
*/

/*
class MsgCS_Abuse
{ public:
	LONG	m_lType;
	std::string	m_sDay;
};
*/

class MsgCS_AskPurgeVote
{ public:
	LONG	m_lPurgeUSN;
};


class MsgCS_AnswerPurgeVote
{ public:
	LONG	m_lAnswer;
};


class MsgCS_WaitingUserTicketReq
{ public:
	int	m_nType;
	LONG	m_bValue;
};


class MsgCS_UpdateWaitingUserInfoReq
{ public:
};

/*
class MsgCS_SoundType
{ public:
	LONG	m_lSoundType;
};
*/

/*
class MsgCS_ExitQue
{ public:
	LONG	m_lExit;
	LONG	m_bAction;
};
*/

/*
class MsgCS_Continue
{ public:
	LONG	m_lExit;
};
*/

/*
class MsgCS_RuleSet
{ public:
	int	m_nRuleIdx;
};
*/


class MsgCS_GameMasterCall
{ public:
};


class MsgCS_FieldReserved
{ public:
	int	m_nReserved1;
	int	m_nReserved2;
};

/*
class MsgCS_JokboSet
{ public:
	LONG	m_lKey1;
	LONG	m_lKey2;
	LONG	m_lKey3;
	LONG	m_lKey4;
	LONG	m_lKey5;
};
*/

class MsgCS_TestKeySetting
{ public:
	UINT	m_nChar;
};


class MsgCS_CheckNotice
{ public:
	int	m_nType;
};

/*
class MsgCS_Ack
{ public:
	int	m_nTagID;
};
*/


class MsgCS_Ping
{ public:
};

//=========================================================
//	CS Payloads...
//=========================================================

struct PayloadCS
{
	enum TAGID
	{
		_Null_Tag = 0,
		msgEntry_Tag, 
		msgObserve_Tag, 
		msgStart_Tag, 
		msgSelectedCardReq_Tag, 
		msgBettingReq_Tag, 
		msgChoiceRemoveCard_Tag, 
		msgPurge_Tag, 
		msgAbuse_Tag, 
		msgAskPurgeVote_Tag, 
		msgAnswerPurgeVote_Tag, 
		msgWaitingUserTicketReq_Tag, 
		msgUpdateWaitingUserInfoReq_Tag, 
		msgSoundType_Tag, 
		msgExitQue_Tag, 
		msgContinue_Tag, 
		msgRuleSet_Tag, 
		msgGameMasterCall_Tag, 
		msgFieldReserved_Tag, 
		msgJokboSet_Tag, 
		msgTestKeySetting_Tag, 
		msgCheckNotice_Tag, 
		msgAck_Tag, 
		msgPing_Tag, 
		_Max_Tag
	};
	DWORD mTagID;
	bool bShared;
	union
	{
		void* _ptr;
		/*
		MsgCS_Entry*	m_msgEntry;
		MsgCS_Observe*	m_msgObserve;
		MsgCS_Start*	m_msgStart;
		MsgCS_SelectedCardReq*	m_msgSelectedCardReq;
		MsgCS_BettingReq*	m_msgBettingReq;
		MsgCS_ChoiceRemoveCard*	m_msgChoiceRemoveCard;
		MsgCS_Purge*	m_msgPurge;
		MsgCS_Abuse*	m_msgAbuse;
		MsgCS_AskPurgeVote*	m_msgAskPurgeVote;
		MsgCS_AnswerPurgeVote*	m_msgAnswerPurgeVote;
		MsgCS_WaitingUserTicketReq*	m_msgWaitingUserTicketReq;
		MsgCS_UpdateWaitingUserInfoReq*	m_msgUpdateWaitingUserInfoReq;
		MsgCS_SoundType*	m_msgSoundType;
		MsgCS_ExitQue*	m_msgExitQue;
		MsgCS_Continue*	m_msgContinue;
		MsgCS_RuleSet*	m_msgRuleSet;
		MsgCS_GameMasterCall*	m_msgGameMasterCall;
		MsgCS_FieldReserved*	m_msgFieldReserved;
		MsgCS_JokboSet*	m_msgJokboSet;
		MsgCS_TestKeySetting*	m_msgTestKeySetting;
		MsgCS_CheckNotice*	m_msgCheckNotice;
		MsgCS_Ack*	m_msgAck;
		MsgCS_Ping*	m_msgPing;
		*/
	} un;
public :
	PayloadCS() : mTagID(0), bShared(false) { un._ptr = 0; }
	PayloadCS(void* ptr, DWORD dwTagID) : mTagID(dwTagID), bShared(true) { un._ptr = ptr; }
	explicit PayloadCS(UINT nTagID) : mTagID(nTagID), bShared(false) {
		switch(mTagID) {
			/*
		case msgEntry_Tag: un.m_msgEntry = new MsgCS_Entry; break;
		case msgObserve_Tag: un.m_msgObserve = new MsgCS_Observe; break;
		case msgStart_Tag: un.m_msgStart = new MsgCS_Start; break;
		case msgSelectedCardReq_Tag: un.m_msgSelectedCardReq = new MsgCS_SelectedCardReq; break;
		case msgBettingReq_Tag: un.m_msgBettingReq = new MsgCS_BettingReq; break;
		case msgChoiceRemoveCard_Tag: un.m_msgChoiceRemoveCard = new MsgCS_ChoiceRemoveCard; break;
		case msgPurge_Tag: un.m_msgPurge = new MsgCS_Purge; break;
		case msgAbuse_Tag: un.m_msgAbuse = new MsgCS_Abuse; break;
		case msgAskPurgeVote_Tag: un.m_msgAskPurgeVote = new MsgCS_AskPurgeVote; break;
		case msgAnswerPurgeVote_Tag: un.m_msgAnswerPurgeVote = new MsgCS_AnswerPurgeVote; break;
		case msgWaitingUserTicketReq_Tag: un.m_msgWaitingUserTicketReq = new MsgCS_WaitingUserTicketReq; break;
		case msgUpdateWaitingUserInfoReq_Tag: un.m_msgUpdateWaitingUserInfoReq = new MsgCS_UpdateWaitingUserInfoReq; break;
		case msgSoundType_Tag: un.m_msgSoundType = new MsgCS_SoundType; break;
		case msgExitQue_Tag: un.m_msgExitQue = new MsgCS_ExitQue; break;
		case msgContinue_Tag: un.m_msgContinue = new MsgCS_Continue; break;
		case msgRuleSet_Tag: un.m_msgRuleSet = new MsgCS_RuleSet; break;
		case msgGameMasterCall_Tag: un.m_msgGameMasterCall = new MsgCS_GameMasterCall; break;
		case msgFieldReserved_Tag: un.m_msgFieldReserved = new MsgCS_FieldReserved; break;
		case msgJokboSet_Tag: un.m_msgJokboSet = new MsgCS_JokboSet; break;
		case msgTestKeySetting_Tag: un.m_msgTestKeySetting = new MsgCS_TestKeySetting; break;
		case msgCheckNotice_Tag: un.m_msgCheckNotice = new MsgCS_CheckNotice; break;
		case msgAck_Tag: un.m_msgAck = new MsgCS_Ack; break;
		case msgPing_Tag: un.m_msgPing = new MsgCS_Ping; break;
		*/
		default: break;
		};
	}

	template<typename T> PayloadCS(DWORD dwTagID, const T& m) : mTagID(dwTagID), bShared(false)
	{
		un._ptr = (void *)(new T);
		*(T*)(un._ptr) = m;
	}

	~PayloadCS()
	{
		if (bShared) return;
		switch(mTagID) {
			/*
		case msgEntry_Tag: delete(un.m_msgEntry); break;
		case msgObserve_Tag: delete(un.m_msgObserve); break;
		case msgStart_Tag: delete(un.m_msgStart); break;
		case msgSelectedCardReq_Tag: delete(un.m_msgSelectedCardReq); break;
		case msgBettingReq_Tag: delete(un.m_msgBettingReq); break;
		case msgChoiceRemoveCard_Tag: delete(un.m_msgChoiceRemoveCard); break;
		case msgPurge_Tag: delete(un.m_msgPurge); break;
		case msgAbuse_Tag: delete(un.m_msgAbuse); break;
		case msgAskPurgeVote_Tag: delete(un.m_msgAskPurgeVote); break;
		case msgAnswerPurgeVote_Tag: delete(un.m_msgAnswerPurgeVote); break;
		case msgWaitingUserTicketReq_Tag: delete(un.m_msgWaitingUserTicketReq); break;
		case msgUpdateWaitingUserInfoReq_Tag: delete(un.m_msgUpdateWaitingUserInfoReq); break;
		case msgSoundType_Tag: delete(un.m_msgSoundType); break;
		case msgExitQue_Tag: delete(un.m_msgExitQue); break;
		case msgContinue_Tag: delete(un.m_msgContinue); break;
		case msgRuleSet_Tag: delete(un.m_msgRuleSet); break;
		case msgGameMasterCall_Tag: delete(un.m_msgGameMasterCall); break;
		case msgFieldReserved_Tag: delete(un.m_msgFieldReserved); break;
		case msgJokboSet_Tag: delete(un.m_msgJokboSet); break;
		case msgTestKeySetting_Tag: delete(un.m_msgTestKeySetting); break;
		case msgCheckNotice_Tag: delete(un.m_msgCheckNotice); break;
		case msgAck_Tag: delete(un.m_msgAck); break;
		case msgPing_Tag: delete(un.m_msgPing); break;
		*/
		default: break;
		}
	}
};


//=================================================================================================
//	GRC -> Client
//=================================================================================================


class MsgSC_UserJoinAns
{ public:
	LONG	m_lState;
	int	m_nEnter;
	int	m_nSet;
	int	m_lChannel_idx;
	LONG	m_lOwnerUSN;
	LONG	m_lBossUSN;
	int	m_nRoomPurgeCnt;
	Option	m_option;
};


class MsgSC_UserJoinErr
{ public:
	LONG	m_lUSN;
	LONG	m_lErrorCode;
};


class MsgSC_UserDisconnect
{ public:
	LONG	m_lUSN;
	UserInfo	m_uinfo;
	LONG	m_lState;
	LONG	m_lOwnerUSN;
};


class MsgSC_CardData
{ public:
	int	m_nDealCnt;
	LONG	m_lCardsDealt;
	std::vector<Cards>	m_tblCard;
	std::vector<Money>	m_tblMoney;
	LONGLONG	m_llPoolMoney;
};


class MsgSC_EntryAns
{ public:
	LONG	m_lUSN;
	int	m_nIndex;
	LONG	m_lOwnerUSN;
	std::vector<UserInfo>	m_tblUI;
	std::vector<Money>	m_tblMoney;
	LONG	m_bWelcomeSound;
	LONG	m_lObserveCnt;
};


class MsgSC_EntryReject
{ public:
	LONG	m_lType;
	LONGLONG	m_llCMoney;
};


class MsgSC_ObserveAns
{ public:
	LONG	m_lUSN;
	int	m_nIndex;
	LONG	m_lOwnerUSN;
	UserInfo	m_uinfo;
	Money	m_money;
};


class MsgSC_StartReq
{ public:
};


class MsgSC_StartAns
{ public:
	LONG	m_lState;
	std::vector<LONG>	m_vtState;
	LONGLONG	m_llSystemTime;
};


class MsgSC_NoStart
{ public:
};

/*
class MsgSC_DealCards
{ public:
	LONG	m_lBossUSN;
	LONG	m_lState;
	int	m_nType;
	std::vector<Cards>	m_tblCard;
	std::vector<Money>	m_tblMoney;
	LONGLONG	m_llPoolMoney;
};
*/

/*
class MsgSC_SelectedCardAns
{ public:
	LONG	m_lUSN;
	int	m_nSelect;
	LONG	m_lCardIndex;
	LONG	m_lChoiceType;
};
*/

typedef vector<OneCard> OneCardVector;

/*
class MsgSC_DealOpenCard
{ public:
	LONG	m_lState;
	std::vector<Cards>	m_tblCard;
	std::vector<LONG>	m_vtState;
};
*/

/*
class MsgSC_DealCard
{ public:
	LONG	m_lBossUSN;
	int	m_nType;
	LONG	m_lCardsDealt;
	OneCardVector	m_vtOneCard;
};
*/


class MsgSC_Boss
{ public:
	LONG	m_lBossUSN;
	int	m_nBossRank;
};


class MsgSC_Betting
{ public:
	LONG	m_lBetUSN;
	LONG	m_lBetBtnType;
};


class MsgSC_BettingAns
{ public:
	int	m_nIndex;
	LONG	m_lBetType;
	Money	m_money;
	VecMoney	m_vtCallMoney;
	LONGLONG	m_lPoolMoney;
};


class MsgSC_BettingAnsMsg
{ public:

public:
	void Clear()
	{
		m_lUSN=EMPTY_USER;
		m_nIndex=-1;
		m_BetType=-1;
		m_bBettingMoney=false;
		m_bMoneyLack=false;
		m_bCallMoneyZero=false;
		m_llCallMoney=0;
		m_llRaiseMoney=0;
		m_llPoolMoney=0;
		m_lBetType=0;
		m_lBetTurn=0;
	}
	LONG	m_lUSN;
	int	m_nIndex;
	LONG	m_BetType;
	LONG	m_bBettingMoney;
	LONG	m_bMoneyLack;
	LONG	m_bCallMoneyZero;
	LONGLONG	m_llCallMoney;
	LONGLONG	m_llRaiseMoney;
	LONGLONG	m_llSideMoney;
	LONG	m_lBetType;
	LONG	m_lBetTurn;
	Money	m_money;
	VecMoney	m_vtCallMoney;
	LONGLONG	m_llPoolMoney;
};


class MsgSC_DealHiddenCard
{ public:
	LONG	m_lBossUSN;
	LONG	m_lCardsDealt;
	OneCardVector	m_vtOneCard;
};

/*
class MsgSC_AnteMoney
{ public:
	LONGLONG	m_llAnteMoney;
};
*/

class MsgSC_RuleQuaterHalf
{ public:
	LONGLONG	m_llRuleQuaterHalf;
	LONGLONG	m_llPoolMoney;
};


class MsgSC_Finished
{ public:
	LONG	m_lState;
	LONG	m_bGiveUp;
	LONG	m_lRank;
	LONG	m_lBossUSN;
	LONGLONG	m_llGiveMoney;
	std::vector<int>	m_vtWin;
	std::vector<int>	m_vtResult;
	std::vector<LONGLONG>	m_vtGiveMoney;
	std::vector<Cards>	m_tblCard;
	std::vector<Money>	m_tblMoney;
	LONGLONG	m_llPoolMoney;
	std::vector<UserMoney>	m_vtUserMoney;
	LONG	m_lResultIdx;
	LONGLONG	m_llJackpot;
};

typedef vector<WinLoseInfo> VectorWinLoseInfo;


class MsgSC_NewGame
{ public:
	VectorWinLoseInfo	m_vtWinLoseInfo;
};


class MsgSC_ContinueAns
{ public:
	LONG	m_lUSN;
};


class MsgSC_Continue
{ public:
	VectorWinLoseInfo	m_vtWinLoseInfo;
};


class MsgSC_SystemMsg
{ public:
	LONG	m_lType;
};


class MsgSC_PurgeAns
{ public:
};


class MsgSC_PurgeInfo
{ public:
	VecUSN	m_vtPurgeUSN;
	int	m_nCount;
};


class MsgSC_SetPurgeMoney
{ public:
	LONG	m_lUSN;
	Money	m_money;
};


class MsgSC_AssaItemNotify
{ public:
	LONG	m_lUSN;
	LONG	m_lRankType;
	std::string	m_sItem;
};


class MsgSC_ThankYouItemNotify
{ public:
	LONG	m_lUSN;
	LONG	m_lRankType;
	LONGLONG	m_llBasicDDangMoney;
	std::string	m_sItem;
};


class MsgSC_MadeItemNotify
{ public:
	LONG	m_lUSN;
	LONG	m_lRankType;
	std::string	m_sItem;
};


class MsgSC_ExtMoneyNotify
{ public:
	LONG	m_lUSN;
	LONG	m_bExtType;
	LONGLONG	m_llCMoney;
	LONGLONG	m_llCashBox;
	LONGLONG	m_llExtMoney;
	LONGLONG	m_llExtDate;
};


class MsgSC_GameEndSystemMsg
{ public:
	LONG	m_lType;
	LONG	m_lUSN;
	LONG	m_bGiveUp;
	LONGLONG	m_llMoney;
	std::string	m_sMsg;
};


class MsgSC_ChangeAvatarNotify
{ public:
	LONG	m_lUSN;
	int	m_nIndex;
	UserInfo	m_uinfo;
};

/*
class MsgSC_AbuseAns
{ public:
};
*/

/*
class MsgSC_SoundTypeAns
{ public:
	LONG	m_lUSN;
	int	m_nIndex;
	LONG	m_lSoundType;
};
*/


class MsgSC_FMoney
{ public:
	std::string	m_sFMoney;
};


class MsgSC_ItemNotify
{ public:
	LONG	m_lLimitTotalCnt;
	LONG	m_lLimitTodayCnt;
	LONG	m_bInfinitySpeedItem;
	LONGLONG	m_llSpeedToTime;
};


class MsgSC_DisconnectMoneyNotify
{ public:
	std::string	m_sNickName;
	LONGLONG	m_llDisconnectMoney;
};


class MsgSC_ExitNtf
{ public:
	LONG	m_lUSN;
	int	m_nIndex;
	LONG	m_lExit;
	LONG	m_bExit;
};


class MsgSC_RematchOKAns
{ public:
	LONG	m_lUSN;
	LONGLONG	m_llPoolMoney;
	Money	m_money;
	LONG	m_bRematchOK;
};


class MsgSC_RuleNotify
{ public:
	int	m_nRuleIdx;
};


class MsgSC_AllowEntryWaitingUser
{ public:
};


class MsgSC_AllWaitingUserDataNtf
{ public:
	LONG	m_bSendWaitingUser;
	std::vector<WAITINGUSERDATA>	m_WaitingUserData;
};


class MsgSC_UserDataChangeNtf
{ public:
	RCUserData	m_userData;
};


class MsgSC_RefillMoneyNtf
{ public:
	LONG	m_lUSN;
	int	m_nRefillCnt;
	LONGLONG	m_llRefillMoney;
};


class MsgSC_JackpotMoneyNtf
{ public:
	LONG	m_lUSN;
	LONGLONG	m_llJackpotMoney;
};


class MsgSC_GuardianAngelMoney
{ public:
	LONG	m_lUSN;
	int	m_nGuardianAngelCnt;
	LONGLONG	m_llAngelMoney;
};


class MsgSC_GameMasterCallNtf
{ public:
	LONG	m_lGMCall_USN;
};


class MsgSC_ObserverCnt
{ public:
	int	m_nObserverCnt;
};


class MsgSC_Bonus
{ public:
	LONGLONG	m_llBonus;
};


class MsgSC_PoliceNotify
{ public:
	std::string	m_policeMsg;
};

//=========================================================
//	SC Payloads...
//=========================================================

struct PayloadSC
{
	enum TAGID
	{
		_Null_Tag = 0,
		msgUserJoinAns_Tag, 
		msgUserJoinErr_Tag, 
		msgUserDisconnect_Tag, 
		msgCardData_Tag, 
		msgEntryAns_Tag, 
		msgEntryReject_Tag, 
		msgObserveAns_Tag, 
		msgStartReq_Tag, 
		msgStartAns_Tag, 
		msgNoStart_Tag, 
		msgDealCards_Tag, 
		msgSelectedCardAns_Tag, 
		msgDealOpenCard_Tag, 
		msgDealHiddenCard_Tag, 
		msgDealCard_Tag, 
		msgBoss_Tag, 
		msgBetting_Tag, 
		msgBettingAns_Tag, 
		msgBettingAnsMsg_Tag, 
		msgAnteMoney_Tag, 
		msgRuleQuaterHalf_Tag, 
		msgFinished_Tag, 
		msgNewGame_Tag, 
		msgContinueAns_Tag, 
		msgContinue_Tag, 
		msgSystemMsg_Tag, 
		msgPurgeAns_Tag, 
		msgPurgeInfo_Tag, 
		msgSetPurgeMoney_Tag, 
		msgThankYouItemNotify_Tag, 
		msgMadeItemNotify_Tag, 
		msgAssaItemNotify_Tag, 
		msgExtMoneyNotify_Tag, 
		msgGameEndSystemMsg_Tag, 
		msgChangeAvatarNotify_Tag, 
		msgAbuseAns_Tag, 
		msgSoundTypeAns_Tag, 
		msgFMoney_Tag, 
		msgItemNotify_Tag, 
		msgDisconnectMoneyNotify_Tag, 
		msgExitNtf_Tag, 
		msgAllowEntryWaitingUser_Tag, 
		msgAllWaitingUserDataNtf_Tag, 
		msgUserDataChangeNtf_Tag, 
		msgRefillMoneyNtf_Tag, 
		msgJackpotMoneyNtf_Tag, 
		msgRuleNotify_Tag, 
		msgGuardianAngelMoney_Tag, 
		msgGameMasterCallNtf_Tag, 
		msgObserverCnt_Tag, 
		msgBonus_Tag, 
		msgPoliceNotify_Tag, 
		_Max_Tag
	};
	DWORD mTagID;
	bool bShared;
	union
	{
		void* _ptr;
		/*
		MsgSC_UserJoinAns*	m_msgUserJoinAns;
		MsgSC_UserJoinErr*	m_msgUserJoinErr;
		MsgSC_UserDisconnect*	m_msgUserDisconnect;
		MsgSC_CardData*	m_msgCardData;
		MsgSC_EntryAns*	m_msgEntryAns;
		MsgSC_EntryReject*	m_msgEntryReject;
		MsgSC_ObserveAns*	m_msgObserveAns;
		msgsc_startreq*	m_msgStartReq;
		MsgSC_StartAns*	m_msgStartAns;
		MsgSC_NoStart*	m_msgNoStart;
		MsgSC_DealCards*	m_msgDealCards;
		MsgSC_SelectedCardAns*	m_msgSelectedCardAns;
		MsgSC_DealOpenCard*	m_msgDealOpenCard;
		MsgSC_DealHiddenCard*	m_msgDealHiddenCard;
		MsgSC_DealCard*	m_msgDealCard;
		MsgSC_Boss*	m_msgBoss;
		MsgSC_Betting*	m_msgBetting;
		MsgSC_BettingAns*	m_msgBettingAns;
		MsgSC_BettingAnsMsg*	m_msgBettingAnsMsg;
		MsgSC_AnteMoney*	m_msgAnteMoney;
		MsgSC_RuleQuaterHalf*	m_msgRuleQuaterHalf;
		MsgSC_Finished*	m_msgFinished;
		MsgSC_NewGame*	m_msgNewGame;
		MsgSC_ContinueAns*	m_msgContinueAns;
		MsgSC_Continue*	m_msgContinue;
		MsgSC_SystemMsg*	m_msgSystemMsg;
		MsgSC_PurgeAns*	m_msgPurgeAns;
		MsgSC_PurgeInfo*	m_msgPurgeInfo;
		MsgSC_SetPurgeMoney*	m_msgSetPurgeMoney;
		MsgSC_ThankYouItemNotify*	m_msgThankYouItemNotify;
		MsgSC_MadeItemNotify*	m_msgMadeItemNotify;
		MsgSC_AssaItemNotify*	m_msgAssaItemNotify;
		MsgSC_ExtMoneyNotify*	m_msgExtMoneyNotify;
		MsgSC_GameEndSystemMsg*	m_msgGameEndSystemMsg;
		MsgSC_ChangeAvatarNotify*	m_msgChangeAvatarNotify;
		MsgSC_AbuseAns*	m_msgAbuseAns;
		MsgSC_SoundTypeAns*	m_msgSoundTypeAns;
		MsgSC_FMoney*	m_msgFMoney;
		MsgSC_ItemNotify*	m_msgItemNotify;
		MsgSC_DisconnectMoneyNotify*	m_msgDisconnectMoneyNotify;
		MsgSC_ExitNtf*	m_msgExitNtf;
		MsgSC_AllowEntryWaitingUser*	m_msgAllowEntryWaitingUser;
		MsgSC_AllWaitingUserDataNtf*	m_msgAllWaitingUserDataNtf;
		MsgSC_UserDataChangeNtf*	m_msgUserDataChangeNtf;
		MsgSC_RefillMoneyNtf*	m_msgRefillMoneyNtf;
		MsgSC_JackpotMoneyNtf*	m_msgJackpotMoneyNtf;
		MsgSC_RuleNotify*	m_msgRuleNotify;
		MsgSC_GuardianAngelMoney*	m_msgGuardianAngelMoney;
		MsgSC_GameMasterCallNtf*	m_msgGameMasterCallNtf;
		MsgSC_ObserverCnt*	m_msgObserverCnt;
		MsgSC_Bonus*	m_msgBonus;
		MsgSC_PoliceNotify*	m_msgPoliceNotify;
		*/
	} un;
public :
	PayloadSC() : mTagID(0), bShared(false) { un._ptr = 0; }
	PayloadSC(void* ptr, DWORD dwTagID) : mTagID(dwTagID), bShared(true) { un._ptr = ptr; }
	explicit PayloadSC(UINT nTagID) : mTagID(nTagID), bShared(false) {
		switch(mTagID) {
			/*
		case msgUserJoinAns_Tag: un.m_msgUserJoinAns = new MsgSC_UserJoinAns; break;
		case msgUserJoinErr_Tag: un.m_msgUserJoinErr = new MsgSC_UserJoinErr; break;
		case msgUserDisconnect_Tag: un.m_msgUserDisconnect = new MsgSC_UserDisconnect; break;
		case msgCardData_Tag: un.m_msgCardData = new MsgSC_CardData; break;
		case msgEntryAns_Tag: un.m_msgEntryAns = new MsgSC_EntryAns; break;
		case msgEntryReject_Tag: un.m_msgEntryReject = new MsgSC_EntryReject; break;
		case msgObserveAns_Tag: un.m_msgObserveAns = new MsgSC_ObserveAns; break;
		case msgStartReq_Tag: un.m_msgStartReq = new msgsc_startreq; break;
		case msgStartAns_Tag: un.m_msgStartAns = new MsgSC_StartAns; break;
		case msgNoStart_Tag: un.m_msgNoStart = new MsgSC_NoStart; break;
		case msgDealCards_Tag: un.m_msgDealCards = new MsgSC_DealCards; break;
		case msgSelectedCardAns_Tag: un.m_msgSelectedCardAns = new MsgSC_SelectedCardAns; break;
		case msgDealOpenCard_Tag: un.m_msgDealOpenCard = new MsgSC_DealOpenCard; break;
		case msgDealHiddenCard_Tag: un.m_msgDealHiddenCard = new MsgSC_DealHiddenCard; break;
		case msgDealCard_Tag: un.m_msgDealCard = new MsgSC_DealCard; break;
		case msgBoss_Tag: un.m_msgBoss = new MsgSC_Boss; break;
		case msgBetting_Tag: un.m_msgBetting = new MsgSC_Betting; break;
		case msgBettingAns_Tag: un.m_msgBettingAns = new MsgSC_BettingAns; break;
		case msgBettingAnsMsg_Tag: un.m_msgBettingAnsMsg = new MsgSC_BettingAnsMsg; break;
		case msgAnteMoney_Tag: un.m_msgAnteMoney = new MsgSC_AnteMoney; break;
		case msgRuleQuaterHalf_Tag: un.m_msgRuleQuaterHalf = new MsgSC_RuleQuaterHalf; break;
		case msgFinished_Tag: un.m_msgFinished = new MsgSC_Finished; break;
		case msgNewGame_Tag: un.m_msgNewGame = new MsgSC_NewGame; break;
		case msgContinueAns_Tag: un.m_msgContinueAns = new MsgSC_ContinueAns; break;
		case msgContinue_Tag: un.m_msgContinue = new MsgSC_Continue; break;
		case msgSystemMsg_Tag: un.m_msgSystemMsg = new MsgSC_SystemMsg; break;
		case msgPurgeAns_Tag: un.m_msgPurgeAns = new MsgSC_PurgeAns; break;
		case msgPurgeInfo_Tag: un.m_msgPurgeInfo = new MsgSC_PurgeInfo; break;
		case msgSetPurgeMoney_Tag: un.m_msgSetPurgeMoney = new MsgSC_SetPurgeMoney; break;
		case msgThankYouItemNotify_Tag: un.m_msgThankYouItemNotify = new MsgSC_ThankYouItemNotify; break;
		case msgMadeItemNotify_Tag: un.m_msgMadeItemNotify = new MsgSC_MadeItemNotify; break;
		case msgAssaItemNotify_Tag: un.m_msgAssaItemNotify = new MsgSC_AssaItemNotify; break;
		case msgExtMoneyNotify_Tag: un.m_msgExtMoneyNotify = new MsgSC_ExtMoneyNotify; break;
		case msgGameEndSystemMsg_Tag: un.m_msgGameEndSystemMsg = new MsgSC_GameEndSystemMsg; break;
		case msgChangeAvatarNotify_Tag: un.m_msgChangeAvatarNotify = new MsgSC_ChangeAvatarNotify; break;
		case msgAbuseAns_Tag: un.m_msgAbuseAns = new MsgSC_AbuseAns; break;
		case msgSoundTypeAns_Tag: un.m_msgSoundTypeAns = new MsgSC_SoundTypeAns; break;
		case msgFMoney_Tag: un.m_msgFMoney = new MsgSC_FMoney; break;
		case msgItemNotify_Tag: un.m_msgItemNotify = new MsgSC_ItemNotify; break;
		case msgDisconnectMoneyNotify_Tag: un.m_msgDisconnectMoneyNotify = new MsgSC_DisconnectMoneyNotify; break;
		case msgExitNtf_Tag: un.m_msgExitNtf = new MsgSC_ExitNtf; break;
		case msgAllowEntryWaitingUser_Tag: un.m_msgAllowEntryWaitingUser = new MsgSC_AllowEntryWaitingUser; break;
		case msgAllWaitingUserDataNtf_Tag: un.m_msgAllWaitingUserDataNtf = new MsgSC_AllWaitingUserDataNtf; break;
		case msgUserDataChangeNtf_Tag: un.m_msgUserDataChangeNtf = new MsgSC_UserDataChangeNtf; break;
		case msgRefillMoneyNtf_Tag: un.m_msgRefillMoneyNtf = new MsgSC_RefillMoneyNtf; break;
		case msgJackpotMoneyNtf_Tag: un.m_msgJackpotMoneyNtf = new MsgSC_JackpotMoneyNtf; break;
		case msgRuleNotify_Tag: un.m_msgRuleNotify = new MsgSC_RuleNotify; break;
		case msgGuardianAngelMoney_Tag: un.m_msgGuardianAngelMoney = new MsgSC_GuardianAngelMoney; break;
		case msgGameMasterCallNtf_Tag: un.m_msgGameMasterCallNtf = new MsgSC_GameMasterCallNtf; break;
		case msgObserverCnt_Tag: un.m_msgObserverCnt = new MsgSC_ObserverCnt; break;
		case msgBonus_Tag: un.m_msgBonus = new MsgSC_Bonus; break;
		case msgPoliceNotify_Tag: un.m_msgPoliceNotify = new MsgSC_PoliceNotify; break;
		*/
		default: break;
		};
	}

	template<typename T> PayloadSC(DWORD dwTagID, const T& m) : mTagID(dwTagID), bShared(false)
	{
		un._ptr = (void *)(new T);
		*(T*)(un._ptr) = m;
	}

	~PayloadSC()
	{
		if (bShared) return;
		switch(mTagID) {
			/*
		case msgUserJoinAns_Tag: delete(un.m_msgUserJoinAns); break;
		case msgUserJoinErr_Tag: delete(un.m_msgUserJoinErr); break;
		case msgUserDisconnect_Tag: delete(un.m_msgUserDisconnect); break;
		case msgCardData_Tag: delete(un.m_msgCardData); break;
		case msgEntryAns_Tag: delete(un.m_msgEntryAns); break;
		case msgEntryReject_Tag: delete(un.m_msgEntryReject); break;
		case msgObserveAns_Tag: delete(un.m_msgObserveAns); break;
		case msgStartReq_Tag: delete(un.m_msgStartReq); break;
		case msgStartAns_Tag: delete(un.m_msgStartAns); break;
		case msgNoStart_Tag: delete(un.m_msgNoStart); break;
		case msgDealCards_Tag: delete(un.m_msgDealCards); break;
		case msgSelectedCardAns_Tag: delete(un.m_msgSelectedCardAns); break;
		case msgDealOpenCard_Tag: delete(un.m_msgDealOpenCard); break;
		case msgDealHiddenCard_Tag: delete(un.m_msgDealHiddenCard); break;
		case msgDealCard_Tag: delete(un.m_msgDealCard); break;
		case msgBoss_Tag: delete(un.m_msgBoss); break;
		case msgBetting_Tag: delete(un.m_msgBetting); break;
		case msgBettingAns_Tag: delete(un.m_msgBettingAns); break;
		case msgBettingAnsMsg_Tag: delete(un.m_msgBettingAnsMsg); break;
		case msgAnteMoney_Tag: delete(un.m_msgAnteMoney); break;
		case msgRuleQuaterHalf_Tag: delete(un.m_msgRuleQuaterHalf); break;
		case msgFinished_Tag: delete(un.m_msgFinished); break;
		case msgNewGame_Tag: delete(un.m_msgNewGame); break;
		case msgContinueAns_Tag: delete(un.m_msgContinueAns); break;
		case msgContinue_Tag: delete(un.m_msgContinue); break;
		case msgSystemMsg_Tag: delete(un.m_msgSystemMsg); break;
		case msgPurgeAns_Tag: delete(un.m_msgPurgeAns); break;
		case msgPurgeInfo_Tag: delete(un.m_msgPurgeInfo); break;
		case msgSetPurgeMoney_Tag: delete(un.m_msgSetPurgeMoney); break;
		case msgThankYouItemNotify_Tag: delete(un.m_msgThankYouItemNotify); break;
		case msgMadeItemNotify_Tag: delete(un.m_msgMadeItemNotify); break;
		case msgAssaItemNotify_Tag: delete(un.m_msgAssaItemNotify); break;
		case msgExtMoneyNotify_Tag: delete(un.m_msgExtMoneyNotify); break;
		case msgGameEndSystemMsg_Tag: delete(un.m_msgGameEndSystemMsg); break;
		case msgChangeAvatarNotify_Tag: delete(un.m_msgChangeAvatarNotify); break;
		case msgAbuseAns_Tag: delete(un.m_msgAbuseAns); break;
		case msgSoundTypeAns_Tag: delete(un.m_msgSoundTypeAns); break;
		case msgFMoney_Tag: delete(un.m_msgFMoney); break;
		case msgItemNotify_Tag: delete(un.m_msgItemNotify); break;
		case msgDisconnectMoneyNotify_Tag: delete(un.m_msgDisconnectMoneyNotify); break;
		case msgExitNtf_Tag: delete(un.m_msgExitNtf); break;
		case msgAllowEntryWaitingUser_Tag: delete(un.m_msgAllowEntryWaitingUser); break;
		case msgAllWaitingUserDataNtf_Tag: delete(un.m_msgAllWaitingUserDataNtf); break;
		case msgUserDataChangeNtf_Tag: delete(un.m_msgUserDataChangeNtf); break;
		case msgRefillMoneyNtf_Tag: delete(un.m_msgRefillMoneyNtf); break;
		case msgJackpotMoneyNtf_Tag: delete(un.m_msgJackpotMoneyNtf); break;
		case msgRuleNotify_Tag: delete(un.m_msgRuleNotify); break;
		case msgGuardianAngelMoney_Tag: delete(un.m_msgGuardianAngelMoney); break;
		case msgGameMasterCallNtf_Tag: delete(un.m_msgGameMasterCallNtf); break;
		case msgObserverCnt_Tag: delete(un.m_msgObserverCnt); break;
		case msgBonus_Tag: delete(un.m_msgBonus); break;
		case msgPoliceNotify_Tag: delete(un.m_msgPoliceNotify); break;
		*/
		default: break;
		}
	}
};

}; // end of namespace : adl
#endif //!
