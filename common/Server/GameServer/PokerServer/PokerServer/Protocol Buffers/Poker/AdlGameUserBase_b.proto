//
// AdlGameUserBase_b.h: generated by XADL compiler 1.1 , 2011.1.28 15:28:51
//

#ifndef GAMEUSERBASE_H
#define GAMEUSERBASE_H

namespace adl { // start of namesapce
template<>
class BER<UserInfoBase >
{
public:
	static DWORD Size(const UserInfoBase& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<std::string >::Size(_obj.m_sNickName);
		dwSize += BER<LONG >::Size(_obj.m_lCLevel);
		dwSize += BER<LONG >::Size(_obj.m_lSex);
		dwSize += BER<LONG >::Size(_obj.m_lSoundType);
		dwSize += BER<std::string >::Size(_obj.m_sAvt);
		dwSize += BER<int >::Size(_obj.m_nAvtType);
		dwSize += BER<LONG >::Size(_obj.m_lUserState);
		dwSize += BER<CWinLose >::Size(_obj.m_cWinLose_Room);
		dwSize += BER<__int64 >::Size(_obj.m_llCMoney);
		dwSize += BER<__int64 >::Size(_obj.m_llFMoney);
		dwSize += BER<LONG >::Size(_obj.m_lExit);
		dwSize += BER<LONG >::Size(_obj.m_lDieCardsDealt);
		dwSize += BER<LONG >::Size(_obj.m_lDisCnt);
		dwSize += BER<int >::Size(_obj.m_nItemType);
		return dwSize;
	}

	static bool Load(UserInfoBase* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sNickName), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCLevel), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lSex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lSoundType), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sAvt), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nAvtType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lUserState), ppBuf, pdwSize))
			return false;
		if(!BER<CWinLose >::Load(&(_obj->m_cWinLose_Room), ppBuf, pdwSize))
			return false;
		if(!BER<__int64 >::Load(&(_obj->m_llCMoney), ppBuf, pdwSize))
			return false;
		if(!BER<__int64 >::Load(&(_obj->m_llFMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lExit), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lDieCardsDealt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lDisCnt), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nItemType), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const UserInfoBase& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sNickName ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCLevel ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSoundType ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sAvt ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nAvtType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUserState ))
			return false;
		if(!BER<CWinLose >::Store(ppBuf, pdwSize, _obj.m_cWinLose_Room ))
			return false;
		if(!BER<__int64 >::Store(ppBuf, pdwSize, _obj.m_llCMoney ))
			return false;
		if(!BER<__int64 >::Store(ppBuf, pdwSize, _obj.m_llFMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lExit ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lDieCardsDealt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lDisCnt ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nItemType ))
			return false;
		return true;
	}
	static bool Copy(UserInfoBase* _obj, const UserInfoBase& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sNickName), src.m_sNickName))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCLevel), src.m_lCLevel))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lSex), src.m_lSex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lSoundType), src.m_lSoundType))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sAvt), src.m_sAvt))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nAvtType), src.m_nAvtType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lUserState), src.m_lUserState))
			return false;
		if(!BER<CWinLose >::Copy(&(_obj->m_cWinLose_Room), src.m_cWinLose_Room))
			return false;
		if(!BER<__int64 >::Copy(&(_obj->m_llCMoney), src.m_llCMoney))
			return false;
		if(!BER<__int64 >::Copy(&(_obj->m_llFMoney), src.m_llFMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lExit), src.m_lExit))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lDieCardsDealt), src.m_lDieCardsDealt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lDisCnt), src.m_lDisCnt))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nItemType), src.m_nItemType))
			return false;
		return true;
	}

};

template<>
class BER<RCUserBase >
{
public:
	static DWORD Size(const RCUserBase& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<std::string >::Size(_obj.m_sNickName);
		dwSize += BER<LONG >::Size(_obj.m_lCLevel);
		dwSize += BER<LONG >::Size(_obj.m_lSex);
		dwSize += BER<LONG >::Size(_obj.m_lWin);
		dwSize += BER<LONG >::Size(_obj.m_lLose);
		dwSize += BER<__int64 >::Size(_obj.m_llCMoney);
		dwSize += BER<__int64 >::Size(_obj.m_llFMoney);
		dwSize += BER<LONG >::Size(_obj.m_lDisCnt);
		dwSize += BER<CGamePlayTime >::Size(_obj.m_cGamePlayTime);
		dwSize += BER<int >::Size(_obj.m_nAnllInCnt);
		dwSize += BER<__int64 >::Size(_obj.m_llLastAllInDate);
		dwSize += BER<CWinLose >::Size(_obj.m_cWinLose_Room);
		dwSize += BER<__int64 >::Size(_obj.m_llTodayMoney);
		dwSize += BER<int >::Size(_obj.m_nReserve01);
		dwSize += BER<int >::Size(_obj.m_nReserve02);
		dwSize += BER<CRefill >::Size(_obj.m_cRefill);
		dwSize += BER<int >::Size(_obj.m_nSafeGrade);
		dwSize += BER<__int64 >::Size(_obj.m_llSafeMoney);
		dwSize += BER<int >::Size(_obj.m_nAllInAgain);
		dwSize += BER<__int64 >::Size(_obj.m_llPlayDayTime);
		dwSize += BER<std::string >::Size(_obj.m_sAvt);
		dwSize += BER<int >::Size(_obj.m_nAvtType);
		dwSize += BER<ItemList >::Size(_obj.m_ItemList);
		return dwSize;
	}

	static bool Load(RCUserBase* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sNickName), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCLevel), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lSex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lWin), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lLose), ppBuf, pdwSize))
			return false;
		if(!BER<__int64 >::Load(&(_obj->m_llCMoney), ppBuf, pdwSize))
			return false;
		if(!BER<__int64 >::Load(&(_obj->m_llFMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lDisCnt), ppBuf, pdwSize))
			return false;
		if(!BER<CGamePlayTime >::Load(&(_obj->m_cGamePlayTime), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nAnllInCnt), ppBuf, pdwSize))
			return false;
		if(!BER<__int64 >::Load(&(_obj->m_llLastAllInDate), ppBuf, pdwSize))
			return false;
		if(!BER<CWinLose >::Load(&(_obj->m_cWinLose_Room), ppBuf, pdwSize))
			return false;
		if(!BER<__int64 >::Load(&(_obj->m_llTodayMoney), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nReserve01), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nReserve02), ppBuf, pdwSize))
			return false;
		if(!BER<CRefill >::Load(&(_obj->m_cRefill), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nSafeGrade), ppBuf, pdwSize))
			return false;
		if(!BER<__int64 >::Load(&(_obj->m_llSafeMoney), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nAllInAgain), ppBuf, pdwSize))
			return false;
		if(!BER<__int64 >::Load(&(_obj->m_llPlayDayTime), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sAvt), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nAvtType), ppBuf, pdwSize))
			return false;
		if(!BER<ItemList >::Load(&(_obj->m_ItemList), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const RCUserBase& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sNickName ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCLevel ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lWin ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lLose ))
			return false;
		if(!BER<__int64 >::Store(ppBuf, pdwSize, _obj.m_llCMoney ))
			return false;
		if(!BER<__int64 >::Store(ppBuf, pdwSize, _obj.m_llFMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lDisCnt ))
			return false;
		if(!BER<CGamePlayTime >::Store(ppBuf, pdwSize, _obj.m_cGamePlayTime ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nAnllInCnt ))
			return false;
		if(!BER<__int64 >::Store(ppBuf, pdwSize, _obj.m_llLastAllInDate ))
			return false;
		if(!BER<CWinLose >::Store(ppBuf, pdwSize, _obj.m_cWinLose_Room ))
			return false;
		if(!BER<__int64 >::Store(ppBuf, pdwSize, _obj.m_llTodayMoney ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nReserve01 ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nReserve02 ))
			return false;
		if(!BER<CRefill >::Store(ppBuf, pdwSize, _obj.m_cRefill ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nSafeGrade ))
			return false;
		if(!BER<__int64 >::Store(ppBuf, pdwSize, _obj.m_llSafeMoney ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nAllInAgain ))
			return false;
		if(!BER<__int64 >::Store(ppBuf, pdwSize, _obj.m_llPlayDayTime ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sAvt ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nAvtType ))
			return false;
		if(!BER<ItemList >::Store(ppBuf, pdwSize, _obj.m_ItemList ))
			return false;
		return true;
	}
	static bool Copy(RCUserBase* _obj, const RCUserBase& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sNickName), src.m_sNickName))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCLevel), src.m_lCLevel))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lSex), src.m_lSex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lWin), src.m_lWin))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lLose), src.m_lLose))
			return false;
		if(!BER<__int64 >::Copy(&(_obj->m_llCMoney), src.m_llCMoney))
			return false;
		if(!BER<__int64 >::Copy(&(_obj->m_llFMoney), src.m_llFMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lDisCnt), src.m_lDisCnt))
			return false;
		if(!BER<CGamePlayTime >::Copy(&(_obj->m_cGamePlayTime), src.m_cGamePlayTime))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nAnllInCnt), src.m_nAnllInCnt))
			return false;
		if(!BER<__int64 >::Copy(&(_obj->m_llLastAllInDate), src.m_llLastAllInDate))
			return false;
		if(!BER<CWinLose >::Copy(&(_obj->m_cWinLose_Room), src.m_cWinLose_Room))
			return false;
		if(!BER<__int64 >::Copy(&(_obj->m_llTodayMoney), src.m_llTodayMoney))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nReserve01), src.m_nReserve01))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nReserve02), src.m_nReserve02))
			return false;
		if(!BER<CRefill >::Copy(&(_obj->m_cRefill), src.m_cRefill))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nSafeGrade), src.m_nSafeGrade))
			return false;
		if(!BER<__int64 >::Copy(&(_obj->m_llSafeMoney), src.m_llSafeMoney))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nAllInAgain), src.m_nAllInAgain))
			return false;
		if(!BER<__int64 >::Copy(&(_obj->m_llPlayDayTime), src.m_llPlayDayTime))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sAvt), src.m_sAvt))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nAvtType), src.m_nAvtType))
			return false;
		if(!BER<ItemList >::Copy(&(_obj->m_ItemList), src.m_ItemList))
			return false;
		return true;
	}

};

};

#endif //!
