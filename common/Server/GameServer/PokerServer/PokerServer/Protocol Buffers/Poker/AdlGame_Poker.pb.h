// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdlGame_Poker.proto

#ifndef PROTOBUF_AdlGame_5fPoker_2eproto__INCLUDED
#define PROTOBUF_AdlGame_5fPoker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Game_Poker {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();

class Cards;
class Money;
class UserMoney;
class CWinLose;
class UserInfo;
class OneCard;
class VecMoney;
class WinLoseInfo;
class VecUSN;
class WAITINGUSERDATA;
class RCUserData;
class Option;
class BettingMsg;
class BettingMsgTable;
class MoneyTable;
class CardTable;
class UITable;
class RCRoomData;
class MsgCS_Entry;
class MsgCS_Observe;
class MsgCS_Start;
class MsgCS_SelectedCardReq;
class MsgCS_BettingReq;
class MsgCS_ChoiceRemoveCard;
class MsgCS_Purge;
class MsgCS_Abuse;
class MsgCS_AskPurgeVote;
class MsgCS_AnswerPurgeVote;
class MsgCS_WaitingUserTicketReq;
class MsgCS_UpdateWaitingUserInfoReq;
class MsgCS_SoundType;
class MsgCS_ExitQue;
class MsgCS_Continue;
class MsgCS_RuleSet;
class MsgCS_GameMasterCall;
class MsgCS_FieldReserved;
class MsgCS_JokboSet;
class MsgCS_TestKeySetting;
class MsgCS_CheckNotice;
class MsgCS_Ack;
class MsgCS_Ping;
class MsgSC_UserJoinAns;
class MsgSC_UserJoinErr;
class MsgSC_UserDisconnect;
class MsgSC_CardData;
class MsgSC_EntryAns;
class MsgSC_EntryReject;
class MsgSC_ObserveAns;
class MsgSC_StartReq;
class MsgSC_StartAns;
class MsgSC_NoStart;
class MsgSC_DealCards;
class MsgSC_SelectedCardAns;
class MsgSC_DealOpenCard;
class MsgSC_DealCard;
class MsgSC_Boss;
class MsgSC_Betting;
class MsgSC_BettingAns;
class MsgSC_BettingAnsMsg;
class MsgSC_DealHiddenCard;
class MsgSC_AnteMoney;
class MsgSC_RuleQuaterHalf;
class MsgSC_Finished;
class MsgSC_NewGame;
class MsgSC_ContinueAns;
class MsgSC_Continue;
class MsgSC_SystemMsg;
class MsgSC_PurgeAns;
class MsgSC_PurgeInfo;
class MsgSC_SetPurgeMoney;
class MsgSC_AssaItemNotify;
class MsgSC_ThankYouItemNotify;
class MsgSC_MadeItemNotify;
class MsgSC_ExtMoneyNotify;
class MsgSC_GameEndSystemMsg;
class MsgSC_ChangeAvatarNotify;
class MsgSC_AbuseAns;
class MsgSC_SoundTypeAns;
class MsgSC_FMoney;
class MsgSC_ItemNotify;
class MsgSC_DisconnectMoneyNotify;
class MsgSC_ExitNtf;
class MsgSC_RematchOKAns;
class MsgSC_RuleNotify;
class MsgSC_AllowEntryWaitingUser;
class MsgSC_AllWaitingUserDataNtf;
class MsgSC_UserDataChangeNtf;
class MsgSC_RefillMoneyNtf;
class MsgSC_JackpotMoneyNtf;
class MsgSC_GuardianAngelMoney;
class MsgSC_GameMasterCallNtf;
class MsgSC_ObserverCnt;
class MsgSC_Bonus;
class MsgSC_PoliceNotify;
class PayloadSC;

enum Cards_state {
  Cards_state_CARDTYPE_NORMAL = 0,
  Cards_state_CARDTYPE_HIDDEN = 1,
  Cards_state_CARDTYPE_SAME = 2
};
bool Cards_state_IsValid(int value);
const Cards_state Cards_state_state_MIN = Cards_state_CARDTYPE_NORMAL;
const Cards_state Cards_state_state_MAX = Cards_state_CARDTYPE_SAME;
const int Cards_state_state_ARRAYSIZE = Cards_state_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cards_state_descriptor();
inline const ::std::string& Cards_state_Name(Cards_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cards_state_descriptor(), value);
}
inline bool Cards_state_Parse(
    const ::std::string& name, Cards_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cards_state>(
    Cards_state_descriptor(), name, value);
}
enum PayloadSC_TAGID {
  PayloadSC_TAGID_Header = 0,
  PayloadSC_TAGID__Null_Tag = 1,
  PayloadSC_TAGID_msgUserJoinAns_Tag = 2,
  PayloadSC_TAGID_msgUserJoinErr_Tag = 3,
  PayloadSC_TAGID_msgUserDisconnect_Tag = 4,
  PayloadSC_TAGID_msgCardData_Tag = 5,
  PayloadSC_TAGID_msgEntryAns_Tag = 6,
  PayloadSC_TAGID_msgEntryReject_Tag = 7,
  PayloadSC_TAGID_msgObserveAns_Tag = 8,
  PayloadSC_TAGID_msgStartReq_Tag = 9,
  PayloadSC_TAGID_msgStartAns_Tag = 10,
  PayloadSC_TAGID_msgNoStart_Tag = 11,
  PayloadSC_TAGID_msgDealCards_Tag = 12,
  PayloadSC_TAGID_msgSelectedCardAns_Tag = 13,
  PayloadSC_TAGID_msgDealOpenCard_Tag = 14,
  PayloadSC_TAGID_msgDealHiddenCard_Tag = 15,
  PayloadSC_TAGID_msgDealCard_Tag = 16,
  PayloadSC_TAGID_msgBoss_Tag = 17,
  PayloadSC_TAGID_msgBetting_Tag = 18,
  PayloadSC_TAGID_msgBettingAns_Tag = 19,
  PayloadSC_TAGID_msgBettingAnsMsg_Tag = 20,
  PayloadSC_TAGID_msgAnteMoney_Tag = 21,
  PayloadSC_TAGID_msgRuleQuaterHalf_Tag = 22,
  PayloadSC_TAGID_msgFinished_Tag = 23,
  PayloadSC_TAGID_msgNewGame_Tag = 24,
  PayloadSC_TAGID_msgContinueAns_Tag = 25,
  PayloadSC_TAGID_msgContinue_Tag = 26,
  PayloadSC_TAGID_msgSystemMsg_Tag = 27,
  PayloadSC_TAGID_msgPurgeAns_Tag = 28,
  PayloadSC_TAGID_msgPurgeInfo_Tag = 29,
  PayloadSC_TAGID_msgSetPurgeMoney_Tag = 30,
  PayloadSC_TAGID_msgThankYouItemNotify_Tag = 31,
  PayloadSC_TAGID_msgMadeItemNotify_Tag = 32,
  PayloadSC_TAGID_msgAssaItemNotify_Tag = 33,
  PayloadSC_TAGID_msgExtMoneyNotify_Tag = 34,
  PayloadSC_TAGID_msgGameEndSystemMsg_Tag = 35,
  PayloadSC_TAGID_msgChangeAvatarNotify_Tag = 36,
  PayloadSC_TAGID_msgAbuseAns_Tag = 37,
  PayloadSC_TAGID_msgSoundTypeAns_Tag = 38,
  PayloadSC_TAGID_msgFMoney_Tag = 39,
  PayloadSC_TAGID_msgItemNotify_Tag = 40,
  PayloadSC_TAGID_msgDisconnectMoneyNotify_Tag = 41,
  PayloadSC_TAGID_msgExitNtf_Tag = 42,
  PayloadSC_TAGID_msgAllowEntryWaitingUser_Tag = 43,
  PayloadSC_TAGID_msgAllWaitingUserDataNtf_Tag = 44,
  PayloadSC_TAGID_msgUserDataChangeNtf_Tag = 45,
  PayloadSC_TAGID_msgRefillMoneyNtf_Tag = 46,
  PayloadSC_TAGID_msgJackpotMoneyNtf_Tag = 47,
  PayloadSC_TAGID_msgRuleNotify_Tag = 48,
  PayloadSC_TAGID_msgGuardianAngelMoney_Tag = 49,
  PayloadSC_TAGID_msgGameMasterCallNtf_Tag = 50,
  PayloadSC_TAGID_msgObserverCnt_Tag = 51,
  PayloadSC_TAGID_msgBonus_Tag = 52,
  PayloadSC_TAGID_msgPoliceNotify_Tag = 53,
  PayloadSC_TAGID__Max_Tag = 54
};
bool PayloadSC_TAGID_IsValid(int value);
const PayloadSC_TAGID PayloadSC_TAGID_TAGID_MIN = PayloadSC_TAGID_Header;
const PayloadSC_TAGID PayloadSC_TAGID_TAGID_MAX = PayloadSC_TAGID__Max_Tag;
const int PayloadSC_TAGID_TAGID_ARRAYSIZE = PayloadSC_TAGID_TAGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayloadSC_TAGID_descriptor();
inline const ::std::string& PayloadSC_TAGID_Name(PayloadSC_TAGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayloadSC_TAGID_descriptor(), value);
}
inline bool PayloadSC_TAGID_Parse(
    const ::std::string& name, PayloadSC_TAGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayloadSC_TAGID>(
    PayloadSC_TAGID_descriptor(), name, value);
}
// ===================================================================

class Cards : public ::google::protobuf::Message {
 public:
  Cards();
  virtual ~Cards();
  
  Cards(const Cards& from);
  
  inline Cards& operator=(const Cards& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cards& default_instance();
  
  void Swap(Cards* other);
  
  // implements Message ----------------------------------------------
  
  Cards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cards& from);
  void MergeFrom(const Cards& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Cards_state state;
  static const state CARDTYPE_NORMAL = Cards_state_CARDTYPE_NORMAL;
  static const state CARDTYPE_HIDDEN = Cards_state_CARDTYPE_HIDDEN;
  static const state CARDTYPE_SAME = Cards_state_CARDTYPE_SAME;
  static inline bool state_IsValid(int value) {
    return Cards_state_IsValid(value);
  }
  static const state state_MIN =
    Cards_state_state_MIN;
  static const state state_MAX =
    Cards_state_state_MAX;
  static const int state_ARRAYSIZE =
    Cards_state_state_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  state_descriptor() {
    return Cards_state_descriptor();
  }
  static inline const ::std::string& state_Name(state value) {
    return Cards_state_Name(value);
  }
  static inline bool state_Parse(const ::std::string& name,
      state* value) {
    return Cards_state_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 m_vtCards = 1;
  inline int m_vtcards_size() const;
  inline void clear_m_vtcards();
  static const int kMVtCardsFieldNumber = 1;
  inline ::google::protobuf::int32 m_vtcards(int index) const;
  inline void set_m_vtcards(int index, ::google::protobuf::int32 value);
  inline void add_m_vtcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtcards();
  
  // repeated int32 m_lResultIdx = 2;
  inline int m_lresultidx_size() const;
  inline void clear_m_lresultidx();
  static const int kMLResultIdxFieldNumber = 2;
  inline ::google::protobuf::int32 m_lresultidx(int index) const;
  inline void set_m_lresultidx(int index, ::google::protobuf::int32 value);
  inline void add_m_lresultidx(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_lresultidx() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_lresultidx();
  
  // required .Game_Poker.VecUSN m_vUserUSN = 3;
  inline bool has_m_vuserusn() const;
  inline void clear_m_vuserusn();
  static const int kMVUserUSNFieldNumber = 3;
  inline const ::Game_Poker::VecUSN& m_vuserusn() const;
  inline ::Game_Poker::VecUSN* mutable_m_vuserusn();
  inline ::Game_Poker::VecUSN* release_m_vuserusn();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.Cards)
 private:
  inline void set_has_m_vuserusn();
  inline void clear_has_m_vuserusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_lresultidx_;
  ::Game_Poker::VecUSN* m_vuserusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static Cards* default_instance_;
};
// -------------------------------------------------------------------

class Money : public ::google::protobuf::Message {
 public:
  Money();
  virtual ~Money();
  
  Money(const Money& from);
  
  inline Money& operator=(const Money& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Money& default_instance();
  
  void Swap(Money* other);
  
  // implements Message ----------------------------------------------
  
  Money* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Money& from);
  void MergeFrom(const Money& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llCMoney = 1;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llCallMoney = 2;
  inline bool has_m_llcallmoney() const;
  inline void clear_m_llcallmoney();
  static const int kMLlCallMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_llcallmoney() const;
  inline void set_m_llcallmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llSideMoney = 3;
  inline bool has_m_llsidemoney() const;
  inline void clear_m_llsidemoney();
  static const int kMLlSideMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llsidemoney() const;
  inline void set_m_llsidemoney(::google::protobuf::int64 value);
  
  // required sint64 m_llCallHabMoney = 4;
  inline bool has_m_llcallhabmoney() const;
  inline void clear_m_llcallhabmoney();
  static const int kMLlCallHabMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 m_llcallhabmoney() const;
  inline void set_m_llcallhabmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llTakeMoney = 5;
  inline bool has_m_lltakemoney() const;
  inline void clear_m_lltakemoney();
  static const int kMLlTakeMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_lltakemoney() const;
  inline void set_m_lltakemoney(::google::protobuf::int64 value);
  
  // required sint64 m_llJackpotMoney = 6;
  inline bool has_m_lljackpotmoney() const;
  inline void clear_m_lljackpotmoney();
  static const int kMLlJackpotMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 m_lljackpotmoney() const;
  inline void set_m_lljackpotmoney(::google::protobuf::int64 value);
  
  // required sint32 m_lBetState = 7;
  inline bool has_m_lbetstate() const;
  inline void clear_m_lbetstate();
  static const int kMLBetStateFieldNumber = 7;
  inline ::google::protobuf::int32 m_lbetstate() const;
  inline void set_m_lbetstate(::google::protobuf::int32 value);
  
  // required sint32 m_lBetReceive = 8;
  inline bool has_m_lbetreceive() const;
  inline void clear_m_lbetreceive();
  static const int kMLBetReceiveFieldNumber = 8;
  inline ::google::protobuf::int32 m_lbetreceive() const;
  inline void set_m_lbetreceive(::google::protobuf::int32 value);
  
  // required sint32 m_lBetCount = 9;
  inline bool has_m_lbetcount() const;
  inline void clear_m_lbetcount();
  static const int kMLBetCountFieldNumber = 9;
  inline ::google::protobuf::int32 m_lbetcount() const;
  inline void set_m_lbetcount(::google::protobuf::int32 value);
  
  // required sint32 m_lResultIdx = 10;
  inline bool has_m_lresultidx() const;
  inline void clear_m_lresultidx();
  static const int kMLResultIdxFieldNumber = 10;
  inline ::google::protobuf::int32 m_lresultidx() const;
  inline void set_m_lresultidx(::google::protobuf::int32 value);
  
  // required string m_sMoneyMsg = 11;
  inline bool has_m_smoneymsg() const;
  inline void clear_m_smoneymsg();
  static const int kMSMoneyMsgFieldNumber = 11;
  inline const ::std::string& m_smoneymsg() const;
  inline void set_m_smoneymsg(const ::std::string& value);
  inline void set_m_smoneymsg(const char* value);
  inline void set_m_smoneymsg(const char* value, size_t size);
  inline ::std::string* mutable_m_smoneymsg();
  inline ::std::string* release_m_smoneymsg();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.Money)
 private:
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  inline void set_has_m_llcallmoney();
  inline void clear_has_m_llcallmoney();
  inline void set_has_m_llsidemoney();
  inline void clear_has_m_llsidemoney();
  inline void set_has_m_llcallhabmoney();
  inline void clear_has_m_llcallhabmoney();
  inline void set_has_m_lltakemoney();
  inline void clear_has_m_lltakemoney();
  inline void set_has_m_lljackpotmoney();
  inline void clear_has_m_lljackpotmoney();
  inline void set_has_m_lbetstate();
  inline void clear_has_m_lbetstate();
  inline void set_has_m_lbetreceive();
  inline void clear_has_m_lbetreceive();
  inline void set_has_m_lbetcount();
  inline void clear_has_m_lbetcount();
  inline void set_has_m_lresultidx();
  inline void clear_has_m_lresultidx();
  inline void set_has_m_smoneymsg();
  inline void clear_has_m_smoneymsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int64 m_llcallmoney_;
  ::google::protobuf::int64 m_llsidemoney_;
  ::google::protobuf::int64 m_llcallhabmoney_;
  ::google::protobuf::int64 m_lltakemoney_;
  ::google::protobuf::int64 m_lljackpotmoney_;
  ::google::protobuf::int32 m_lbetstate_;
  ::google::protobuf::int32 m_lbetreceive_;
  ::google::protobuf::int32 m_lbetcount_;
  ::google::protobuf::int32 m_lresultidx_;
  ::std::string* m_smoneymsg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static Money* default_instance_;
};
// -------------------------------------------------------------------

class UserMoney : public ::google::protobuf::Message {
 public:
  UserMoney();
  virtual ~UserMoney();
  
  UserMoney(const UserMoney& from);
  
  inline UserMoney& operator=(const UserMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMoney& default_instance();
  
  void Swap(UserMoney* other);
  
  // implements Message ----------------------------------------------
  
  UserMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserMoney& from);
  void MergeFrom(const UserMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lState = 2;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required sint64 m_llMoney = 3;
  inline bool has_m_llmoney() const;
  inline void clear_m_llmoney();
  static const int kMLlMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llmoney() const;
  inline void set_m_llmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llCallHabMoney = 4;
  inline bool has_m_llcallhabmoney() const;
  inline void clear_m_llcallhabmoney();
  static const int kMLlCallHabMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 m_llcallhabmoney() const;
  inline void set_m_llcallhabmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llTakeMoney = 5;
  inline bool has_m_lltakemoney() const;
  inline void clear_m_lltakemoney();
  static const int kMLlTakeMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_lltakemoney() const;
  inline void set_m_lltakemoney(::google::protobuf::int64 value);
  
  // required sint64 m_llDealMoney = 6;
  inline bool has_m_lldealmoney() const;
  inline void clear_m_lldealmoney();
  static const int kMLlDealMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 m_lldealmoney() const;
  inline void set_m_lldealmoney(::google::protobuf::int64 value);
  
  // required string m_sNickName = 7;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 7;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required string m_sDealerTax = 8;
  inline bool has_m_sdealertax() const;
  inline void clear_m_sdealertax();
  static const int kMSDealerTaxFieldNumber = 8;
  inline const ::std::string& m_sdealertax() const;
  inline void set_m_sdealertax(const ::std::string& value);
  inline void set_m_sdealertax(const char* value);
  inline void set_m_sdealertax(const char* value, size_t size);
  inline ::std::string* mutable_m_sdealertax();
  inline ::std::string* release_m_sdealertax();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.UserMoney)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_llmoney();
  inline void clear_has_m_llmoney();
  inline void set_has_m_llcallhabmoney();
  inline void clear_has_m_llcallhabmoney();
  inline void set_has_m_lltakemoney();
  inline void clear_has_m_lltakemoney();
  inline void set_has_m_lldealmoney();
  inline void clear_has_m_lldealmoney();
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_sdealertax();
  inline void clear_has_m_sdealertax();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::int64 m_llmoney_;
  ::google::protobuf::int64 m_llcallhabmoney_;
  ::google::protobuf::int64 m_lltakemoney_;
  ::google::protobuf::int64 m_lldealmoney_;
  ::std::string* m_snickname_;
  ::std::string* m_sdealertax_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static UserMoney* default_instance_;
};
// -------------------------------------------------------------------

class CWinLose : public ::google::protobuf::Message {
 public:
  CWinLose();
  virtual ~CWinLose();
  
  CWinLose(const CWinLose& from);
  
  inline CWinLose& operator=(const CWinLose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CWinLose& default_instance();
  
  void Swap(CWinLose* other);
  
  // implements Message ----------------------------------------------
  
  CWinLose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CWinLose& from);
  void MergeFrom(const CWinLose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lWin = 1;
  inline bool has_m_lwin() const;
  inline void clear_m_lwin();
  static const int kMLWinFieldNumber = 1;
  inline ::google::protobuf::int32 m_lwin() const;
  inline void set_m_lwin(::google::protobuf::int32 value);
  
  // required sint32 m_lLose = 2;
  inline bool has_m_llose() const;
  inline void clear_m_llose();
  static const int kMLLoseFieldNumber = 2;
  inline ::google::protobuf::int32 m_llose() const;
  inline void set_m_llose(::google::protobuf::int32 value);
  
  // required sint32 m_lContinue = 3;
  inline bool has_m_lcontinue() const;
  inline void clear_m_lcontinue();
  static const int kMLContinueFieldNumber = 3;
  inline ::google::protobuf::int32 m_lcontinue() const;
  inline void set_m_lcontinue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.CWinLose)
 private:
  inline void set_has_m_lwin();
  inline void clear_has_m_lwin();
  inline void set_has_m_llose();
  inline void clear_has_m_llose();
  inline void set_has_m_lcontinue();
  inline void clear_has_m_lcontinue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lwin_;
  ::google::protobuf::int32 m_llose_;
  ::google::protobuf::int32 m_lcontinue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static CWinLose* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();
  
  UserInfo(const UserInfo& from);
  
  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();
  
  void Swap(UserInfo* other);
  
  // implements Message ----------------------------------------------
  
  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required string m_sNickName = 3;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 3;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required string m_sID = 4;
  inline bool has_m_sid() const;
  inline void clear_m_sid();
  static const int kMSIDFieldNumber = 4;
  inline const ::std::string& m_sid() const;
  inline void set_m_sid(const ::std::string& value);
  inline void set_m_sid(const char* value);
  inline void set_m_sid(const char* value, size_t size);
  inline ::std::string* mutable_m_sid();
  inline ::std::string* release_m_sid();
  
  // required sint32 m_lCLevel = 5;
  inline bool has_m_lclevel() const;
  inline void clear_m_lclevel();
  static const int kMLCLevelFieldNumber = 5;
  inline ::google::protobuf::int32 m_lclevel() const;
  inline void set_m_lclevel(::google::protobuf::int32 value);
  
  // required sint32 m_lSoundType = 6;
  inline bool has_m_lsoundtype() const;
  inline void clear_m_lsoundtype();
  static const int kMLSoundTypeFieldNumber = 6;
  inline ::google::protobuf::int32 m_lsoundtype() const;
  inline void set_m_lsoundtype(::google::protobuf::int32 value);
  
  // required string m_sAvt = 7;
  inline bool has_m_savt() const;
  inline void clear_m_savt();
  static const int kMSAvtFieldNumber = 7;
  inline const ::std::string& m_savt() const;
  inline void set_m_savt(const ::std::string& value);
  inline void set_m_savt(const char* value);
  inline void set_m_savt(const char* value, size_t size);
  inline ::std::string* mutable_m_savt();
  inline ::std::string* release_m_savt();
  
  // required sint32 m_lUserState = 8;
  inline bool has_m_luserstate() const;
  inline void clear_m_luserstate();
  static const int kMLUserStateFieldNumber = 8;
  inline ::google::protobuf::int32 m_luserstate() const;
  inline void set_m_luserstate(::google::protobuf::int32 value);
  
  // required .Game_Poker.CWinLose m_cWinLose = 9;
  inline bool has_m_cwinlose() const;
  inline void clear_m_cwinlose();
  static const int kMCWinLoseFieldNumber = 9;
  inline const ::Game_Poker::CWinLose& m_cwinlose() const;
  inline ::Game_Poker::CWinLose* mutable_m_cwinlose();
  inline ::Game_Poker::CWinLose* release_m_cwinlose();
  
  // required .Game_Poker.CWinLose m_cWinLose_Today = 10;
  inline bool has_m_cwinlose_today() const;
  inline void clear_m_cwinlose_today();
  static const int kMCWinLoseTodayFieldNumber = 10;
  inline const ::Game_Poker::CWinLose& m_cwinlose_today() const;
  inline ::Game_Poker::CWinLose* mutable_m_cwinlose_today();
  inline ::Game_Poker::CWinLose* release_m_cwinlose_today();
  
  // required .Game_Poker.CWinLose m_cWinLose_Room = 11;
  inline bool has_m_cwinlose_room() const;
  inline void clear_m_cwinlose_room();
  static const int kMCWinLoseRoomFieldNumber = 11;
  inline const ::Game_Poker::CWinLose& m_cwinlose_room() const;
  inline ::Game_Poker::CWinLose* mutable_m_cwinlose_room();
  inline ::Game_Poker::CWinLose* release_m_cwinlose_room();
  
  // required sint64 m_llCMoney = 12;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 12;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llFMoney = 13;
  inline bool has_m_llfmoney() const;
  inline void clear_m_llfmoney();
  static const int kMLlFMoneyFieldNumber = 13;
  inline ::google::protobuf::int64 m_llfmoney() const;
  inline void set_m_llfmoney(::google::protobuf::int64 value);
  
  // required sint32 m_lExit = 14;
  inline bool has_m_lexit() const;
  inline void clear_m_lexit();
  static const int kMLExitFieldNumber = 14;
  inline ::google::protobuf::int32 m_lexit() const;
  inline void set_m_lexit(::google::protobuf::int32 value);
  
  // required sint32 m_nItemType = 15;
  inline bool has_m_nitemtype() const;
  inline void clear_m_nitemtype();
  static const int kMNItemTypeFieldNumber = 15;
  inline ::google::protobuf::int32 m_nitemtype() const;
  inline void set_m_nitemtype(::google::protobuf::int32 value);
  
  // required sint32 m_lAck = 16;
  inline bool has_m_lack() const;
  inline void clear_m_lack();
  static const int kMLAckFieldNumber = 16;
  inline ::google::protobuf::int32 m_lack() const;
  inline void set_m_lack(::google::protobuf::int32 value);
  
  // required sint32 m_lJackpot = 17;
  inline bool has_m_ljackpot() const;
  inline void clear_m_ljackpot();
  static const int kMLJackpotFieldNumber = 17;
  inline ::google::protobuf::int32 m_ljackpot() const;
  inline void set_m_ljackpot(::google::protobuf::int32 value);
  
  // required sint32 m_lDieCardsDealt = 18;
  inline bool has_m_ldiecardsdealt() const;
  inline void clear_m_ldiecardsdealt();
  static const int kMLDieCardsDealtFieldNumber = 18;
  inline ::google::protobuf::int32 m_ldiecardsdealt() const;
  inline void set_m_ldiecardsdealt(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.UserInfo)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_sid();
  inline void clear_has_m_sid();
  inline void set_has_m_lclevel();
  inline void clear_has_m_lclevel();
  inline void set_has_m_lsoundtype();
  inline void clear_has_m_lsoundtype();
  inline void set_has_m_savt();
  inline void clear_has_m_savt();
  inline void set_has_m_luserstate();
  inline void clear_has_m_luserstate();
  inline void set_has_m_cwinlose();
  inline void clear_has_m_cwinlose();
  inline void set_has_m_cwinlose_today();
  inline void clear_has_m_cwinlose_today();
  inline void set_has_m_cwinlose_room();
  inline void clear_has_m_cwinlose_room();
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  inline void set_has_m_llfmoney();
  inline void clear_has_m_llfmoney();
  inline void set_has_m_lexit();
  inline void clear_has_m_lexit();
  inline void set_has_m_nitemtype();
  inline void clear_has_m_nitemtype();
  inline void set_has_m_lack();
  inline void clear_has_m_lack();
  inline void set_has_m_ljackpot();
  inline void clear_has_m_ljackpot();
  inline void set_has_m_ldiecardsdealt();
  inline void clear_has_m_ldiecardsdealt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::std::string* m_snickname_;
  ::std::string* m_sid_;
  ::google::protobuf::int32 m_lclevel_;
  ::google::protobuf::int32 m_lsoundtype_;
  ::std::string* m_savt_;
  ::Game_Poker::CWinLose* m_cwinlose_;
  ::Game_Poker::CWinLose* m_cwinlose_today_;
  ::Game_Poker::CWinLose* m_cwinlose_room_;
  ::google::protobuf::int32 m_luserstate_;
  ::google::protobuf::int32 m_lexit_;
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int64 m_llfmoney_;
  ::google::protobuf::int32 m_nitemtype_;
  ::google::protobuf::int32 m_lack_;
  ::google::protobuf::int32 m_ljackpot_;
  ::google::protobuf::int32 m_ldiecardsdealt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class OneCard : public ::google::protobuf::Message {
 public:
  OneCard();
  virtual ~OneCard();
  
  OneCard(const OneCard& from);
  
  inline OneCard& operator=(const OneCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OneCard& default_instance();
  
  void Swap(OneCard* other);
  
  // implements Message ----------------------------------------------
  
  OneCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneCard& from);
  void MergeFrom(const OneCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nIndex = 1;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 1;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required int32 m_lCardIndex = 2;
  inline bool has_m_lcardindex() const;
  inline void clear_m_lcardindex();
  static const int kMLCardIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_lcardindex() const;
  inline void set_m_lcardindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.OneCard)
 private:
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lcardindex();
  inline void clear_has_m_lcardindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_lcardindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static OneCard* default_instance_;
};
// -------------------------------------------------------------------

class VecMoney : public ::google::protobuf::Message {
 public:
  VecMoney();
  virtual ~VecMoney();
  
  VecMoney(const VecMoney& from);
  
  inline VecMoney& operator=(const VecMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VecMoney& default_instance();
  
  void Swap(VecMoney* other);
  
  // implements Message ----------------------------------------------
  
  VecMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VecMoney& from);
  void MergeFrom(const VecMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 VecMoney = 1;
  inline bool has_vecmoney() const;
  inline void clear_vecmoney();
  static const int kVecMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 vecmoney() const;
  inline void set_vecmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.VecMoney)
 private:
  inline void set_has_vecmoney();
  inline void clear_has_vecmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 vecmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static VecMoney* default_instance_;
};
// -------------------------------------------------------------------

class WinLoseInfo : public ::google::protobuf::Message {
 public:
  WinLoseInfo();
  virtual ~WinLoseInfo();
  
  WinLoseInfo(const WinLoseInfo& from);
  
  inline WinLoseInfo& operator=(const WinLoseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WinLoseInfo& default_instance();
  
  void Swap(WinLoseInfo* other);
  
  // implements Message ----------------------------------------------
  
  WinLoseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WinLoseInfo& from);
  void MergeFrom(const WinLoseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.WinLoseInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static WinLoseInfo* default_instance_;
};
// -------------------------------------------------------------------

class VecUSN : public ::google::protobuf::Message {
 public:
  VecUSN();
  virtual ~VecUSN();
  
  VecUSN(const VecUSN& from);
  
  inline VecUSN& operator=(const VecUSN& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VecUSN& default_instance();
  
  void Swap(VecUSN* other);
  
  // implements Message ----------------------------------------------
  
  VecUSN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VecUSN& from);
  void MergeFrom(const VecUSN& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 USN = 1;
  inline bool has_usn() const;
  inline void clear_usn();
  static const int kUSNFieldNumber = 1;
  inline ::google::protobuf::int64 usn() const;
  inline void set_usn(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.VecUSN)
 private:
  inline void set_has_usn();
  inline void clear_has_usn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 usn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static VecUSN* default_instance_;
};
// -------------------------------------------------------------------

class WAITINGUSERDATA : public ::google::protobuf::Message {
 public:
  WAITINGUSERDATA();
  virtual ~WAITINGUSERDATA();
  
  WAITINGUSERDATA(const WAITINGUSERDATA& from);
  
  inline WAITINGUSERDATA& operator=(const WAITINGUSERDATA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WAITINGUSERDATA& default_instance();
  
  void Swap(WAITINGUSERDATA* other);
  
  // implements Message ----------------------------------------------
  
  WAITINGUSERDATA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WAITINGUSERDATA& from);
  void MergeFrom(const WAITINGUSERDATA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.WAITINGUSERDATA)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static WAITINGUSERDATA* default_instance_;
};
// -------------------------------------------------------------------

class RCUserData : public ::google::protobuf::Message {
 public:
  RCUserData();
  virtual ~RCUserData();
  
  RCUserData(const RCUserData& from);
  
  inline RCUserData& operator=(const RCUserData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCUserData& default_instance();
  
  void Swap(RCUserData* other);
  
  // implements Message ----------------------------------------------
  
  RCUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RCUserData& from);
  void MergeFrom(const RCUserData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.RCUserData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static RCUserData* default_instance_;
};
// -------------------------------------------------------------------

class Option : public ::google::protobuf::Message {
 public:
  Option();
  virtual ~Option();
  
  Option(const Option& from);
  
  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Option& default_instance();
  
  void Swap(Option* other);
  
  // implements Message ----------------------------------------------
  
  Option* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Option& from);
  void MergeFrom(const Option& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string m_sRoomTitle = 1;
  inline bool has_m_sroomtitle() const;
  inline void clear_m_sroomtitle();
  static const int kMSRoomTitleFieldNumber = 1;
  inline const ::std::string& m_sroomtitle() const;
  inline void set_m_sroomtitle(const ::std::string& value);
  inline void set_m_sroomtitle(const char* value);
  inline void set_m_sroomtitle(const char* value, size_t size);
  inline ::std::string* mutable_m_sroomtitle();
  inline ::std::string* release_m_sroomtitle();
  
  // required string m_sPassword = 2;
  inline bool has_m_spassword() const;
  inline void clear_m_spassword();
  static const int kMSPasswordFieldNumber = 2;
  inline const ::std::string& m_spassword() const;
  inline void set_m_spassword(const ::std::string& value);
  inline void set_m_spassword(const char* value);
  inline void set_m_spassword(const char* value, size_t size);
  inline ::std::string* mutable_m_spassword();
  inline ::std::string* release_m_spassword();
  
  // required int32 m_lMaxUserCnt = 3;
  inline bool has_m_lmaxusercnt() const;
  inline void clear_m_lmaxusercnt();
  static const int kMLMaxUserCntFieldNumber = 3;
  inline ::google::protobuf::int32 m_lmaxusercnt() const;
  inline void set_m_lmaxusercnt(::google::protobuf::int32 value);
  
  // required int32 m_lMaxPlayerUserCnt = 4;
  inline bool has_m_lmaxplayerusercnt() const;
  inline void clear_m_lmaxplayerusercnt();
  static const int kMLMaxPlayerUserCntFieldNumber = 4;
  inline ::google::protobuf::int32 m_lmaxplayerusercnt() const;
  inline void set_m_lmaxplayerusercnt(::google::protobuf::int32 value);
  
  // required int32 m_lMaxPlayerCardCnt = 5;
  inline bool has_m_lmaxplayercardcnt() const;
  inline void clear_m_lmaxplayercardcnt();
  static const int kMLMaxPlayerCardCntFieldNumber = 5;
  inline ::google::protobuf::int32 m_lmaxplayercardcnt() const;
  inline void set_m_lmaxplayercardcnt(::google::protobuf::int32 value);
  
  // required int32 m_lChoiceMode = 6;
  inline bool has_m_lchoicemode() const;
  inline void clear_m_lchoicemode();
  static const int kMLChoiceModeFieldNumber = 6;
  inline ::google::protobuf::int32 m_lchoicemode() const;
  inline void set_m_lchoicemode(::google::protobuf::int32 value);
  
  // required int32 m_lRoomType = 7;
  inline bool has_m_lroomtype() const;
  inline void clear_m_lroomtype();
  static const int kMLRoomTypeFieldNumber = 7;
  inline ::google::protobuf::int32 m_lroomtype() const;
  inline void set_m_lroomtype(::google::protobuf::int32 value);
  
  // required int32 m_lBetRule = 8;
  inline bool has_m_lbetrule() const;
  inline void clear_m_lbetrule();
  static const int kMLBetRuleFieldNumber = 8;
  inline ::google::protobuf::int32 m_lbetrule() const;
  inline void set_m_lbetrule(::google::protobuf::int32 value);
  
  // required int32 m_lBetType = 9;
  inline bool has_m_lbettype() const;
  inline void clear_m_lbettype();
  static const int kMLBetTypeFieldNumber = 9;
  inline ::google::protobuf::int32 m_lbettype() const;
  inline void set_m_lbettype(::google::protobuf::int32 value);
  
  // required int32 m_lAddRule = 10;
  inline bool has_m_laddrule() const;
  inline void clear_m_laddrule();
  static const int kMLAddRuleFieldNumber = 10;
  inline ::google::protobuf::int32 m_laddrule() const;
  inline void set_m_laddrule(::google::protobuf::int32 value);
  
  // required int32 m_lRematchJoin = 11;
  inline bool has_m_lrematchjoin() const;
  inline void clear_m_lrematchjoin();
  static const int kMLRematchJoinFieldNumber = 11;
  inline ::google::protobuf::int32 m_lrematchjoin() const;
  inline void set_m_lrematchjoin(::google::protobuf::int32 value);
  
  // required int32 m_lLimitMoney = 12;
  inline bool has_m_llimitmoney() const;
  inline void clear_m_llimitmoney();
  static const int kMLLimitMoneyFieldNumber = 12;
  inline ::google::protobuf::int32 m_llimitmoney() const;
  inline void set_m_llimitmoney(::google::protobuf::int32 value);
  
  // required sint64 m_llGameAnteMoney = 13;
  inline bool has_m_llgameantemoney() const;
  inline void clear_m_llgameantemoney();
  static const int kMLlGameAnteMoneyFieldNumber = 13;
  inline ::google::protobuf::int64 m_llgameantemoney() const;
  inline void set_m_llgameantemoney(::google::protobuf::int64 value);
  
  // required int32 m_bEcho = 14;
  inline bool has_m_becho() const;
  inline void clear_m_becho();
  static const int kMBEchoFieldNumber = 14;
  inline ::google::protobuf::int32 m_becho() const;
  inline void set_m_becho(::google::protobuf::int32 value);
  
  // required int32 m_lMakeUSN = 15;
  inline bool has_m_lmakeusn() const;
  inline void clear_m_lmakeusn();
  static const int kMLMakeUSNFieldNumber = 15;
  inline ::google::protobuf::int32 m_lmakeusn() const;
  inline void set_m_lmakeusn(::google::protobuf::int32 value);
  
  // required int32 m_lCategory = 16;
  inline bool has_m_lcategory() const;
  inline void clear_m_lcategory();
  static const int kMLCategoryFieldNumber = 16;
  inline ::google::protobuf::int32 m_lcategory() const;
  inline void set_m_lcategory(::google::protobuf::int32 value);
  
  // required int32 m_lChannelID = 17;
  inline bool has_m_lchannelid() const;
  inline void clear_m_lchannelid();
  static const int kMLChannelIDFieldNumber = 17;
  inline ::google::protobuf::int32 m_lchannelid() const;
  inline void set_m_lchannelid(::google::protobuf::int32 value);
  
  // required sint64 m_llAnteMoney = 18;
  inline bool has_m_llantemoney() const;
  inline void clear_m_llantemoney();
  static const int kMLlAnteMoneyFieldNumber = 18;
  inline ::google::protobuf::int64 m_llantemoney() const;
  inline void set_m_llantemoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.Option)
 private:
  inline void set_has_m_sroomtitle();
  inline void clear_has_m_sroomtitle();
  inline void set_has_m_spassword();
  inline void clear_has_m_spassword();
  inline void set_has_m_lmaxusercnt();
  inline void clear_has_m_lmaxusercnt();
  inline void set_has_m_lmaxplayerusercnt();
  inline void clear_has_m_lmaxplayerusercnt();
  inline void set_has_m_lmaxplayercardcnt();
  inline void clear_has_m_lmaxplayercardcnt();
  inline void set_has_m_lchoicemode();
  inline void clear_has_m_lchoicemode();
  inline void set_has_m_lroomtype();
  inline void clear_has_m_lroomtype();
  inline void set_has_m_lbetrule();
  inline void clear_has_m_lbetrule();
  inline void set_has_m_lbettype();
  inline void clear_has_m_lbettype();
  inline void set_has_m_laddrule();
  inline void clear_has_m_laddrule();
  inline void set_has_m_lrematchjoin();
  inline void clear_has_m_lrematchjoin();
  inline void set_has_m_llimitmoney();
  inline void clear_has_m_llimitmoney();
  inline void set_has_m_llgameantemoney();
  inline void clear_has_m_llgameantemoney();
  inline void set_has_m_becho();
  inline void clear_has_m_becho();
  inline void set_has_m_lmakeusn();
  inline void clear_has_m_lmakeusn();
  inline void set_has_m_lcategory();
  inline void clear_has_m_lcategory();
  inline void set_has_m_lchannelid();
  inline void clear_has_m_lchannelid();
  inline void set_has_m_llantemoney();
  inline void clear_has_m_llantemoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_sroomtitle_;
  ::std::string* m_spassword_;
  ::google::protobuf::int32 m_lmaxusercnt_;
  ::google::protobuf::int32 m_lmaxplayerusercnt_;
  ::google::protobuf::int32 m_lmaxplayercardcnt_;
  ::google::protobuf::int32 m_lchoicemode_;
  ::google::protobuf::int32 m_lroomtype_;
  ::google::protobuf::int32 m_lbetrule_;
  ::google::protobuf::int32 m_lbettype_;
  ::google::protobuf::int32 m_laddrule_;
  ::google::protobuf::int32 m_lrematchjoin_;
  ::google::protobuf::int32 m_llimitmoney_;
  ::google::protobuf::int64 m_llgameantemoney_;
  ::google::protobuf::int32 m_becho_;
  ::google::protobuf::int32 m_lmakeusn_;
  ::google::protobuf::int32 m_lcategory_;
  ::google::protobuf::int32 m_lchannelid_;
  ::google::protobuf::int64 m_llantemoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static Option* default_instance_;
};
// -------------------------------------------------------------------

class BettingMsg : public ::google::protobuf::Message {
 public:
  BettingMsg();
  virtual ~BettingMsg();
  
  BettingMsg(const BettingMsg& from);
  
  inline BettingMsg& operator=(const BettingMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BettingMsg& default_instance();
  
  void Swap(BettingMsg* other);
  
  // implements Message ----------------------------------------------
  
  BettingMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BettingMsg& from);
  void MergeFrom(const BettingMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required int32 m_BetType = 3;
  inline bool has_m_bettype() const;
  inline void clear_m_bettype();
  static const int kMBetTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_bettype() const;
  inline void set_m_bettype(::google::protobuf::int32 value);
  
  // required int32 m_bBettingMoney = 4;
  inline bool has_m_bbettingmoney() const;
  inline void clear_m_bbettingmoney();
  static const int kMBBettingMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 m_bbettingmoney() const;
  inline void set_m_bbettingmoney(::google::protobuf::int32 value);
  
  // required int32 m_bMoneyLack = 5;
  inline bool has_m_bmoneylack() const;
  inline void clear_m_bmoneylack();
  static const int kMBMoneyLackFieldNumber = 5;
  inline ::google::protobuf::int32 m_bmoneylack() const;
  inline void set_m_bmoneylack(::google::protobuf::int32 value);
  
  // required int32 m_bCallMoneyZero = 6;
  inline bool has_m_bcallmoneyzero() const;
  inline void clear_m_bcallmoneyzero();
  static const int kMBCallMoneyZeroFieldNumber = 6;
  inline ::google::protobuf::int32 m_bcallmoneyzero() const;
  inline void set_m_bcallmoneyzero(::google::protobuf::int32 value);
  
  // required int64 m_llCallMoney = 7;
  inline bool has_m_llcallmoney() const;
  inline void clear_m_llcallmoney();
  static const int kMLlCallMoneyFieldNumber = 7;
  inline ::google::protobuf::int64 m_llcallmoney() const;
  inline void set_m_llcallmoney(::google::protobuf::int64 value);
  
  // required int64 m_llRaiseMoney = 8;
  inline bool has_m_llraisemoney() const;
  inline void clear_m_llraisemoney();
  static const int kMLlRaiseMoneyFieldNumber = 8;
  inline ::google::protobuf::int64 m_llraisemoney() const;
  inline void set_m_llraisemoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.BettingMsg)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_bettype();
  inline void clear_has_m_bettype();
  inline void set_has_m_bbettingmoney();
  inline void clear_has_m_bbettingmoney();
  inline void set_has_m_bmoneylack();
  inline void clear_has_m_bmoneylack();
  inline void set_has_m_bcallmoneyzero();
  inline void clear_has_m_bcallmoneyzero();
  inline void set_has_m_llcallmoney();
  inline void clear_has_m_llcallmoney();
  inline void set_has_m_llraisemoney();
  inline void clear_has_m_llraisemoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_bettype_;
  ::google::protobuf::int32 m_bbettingmoney_;
  ::google::protobuf::int32 m_bmoneylack_;
  ::google::protobuf::int32 m_bcallmoneyzero_;
  ::google::protobuf::int64 m_llcallmoney_;
  ::google::protobuf::int64 m_llraisemoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static BettingMsg* default_instance_;
};
// -------------------------------------------------------------------

class BettingMsgTable : public ::google::protobuf::Message {
 public:
  BettingMsgTable();
  virtual ~BettingMsgTable();
  
  BettingMsgTable(const BettingMsgTable& from);
  
  inline BettingMsgTable& operator=(const BettingMsgTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BettingMsgTable& default_instance();
  
  void Swap(BettingMsgTable* other);
  
  // implements Message ----------------------------------------------
  
  BettingMsgTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BettingMsgTable& from);
  void MergeFrom(const BettingMsgTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker.BettingMsg BettingMsgTable = 1;
  inline int bettingmsgtable_size() const;
  inline void clear_bettingmsgtable();
  static const int kBettingMsgTableFieldNumber = 1;
  inline const ::Game_Poker::BettingMsg& bettingmsgtable(int index) const;
  inline ::Game_Poker::BettingMsg* mutable_bettingmsgtable(int index);
  inline ::Game_Poker::BettingMsg* add_bettingmsgtable();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::BettingMsg >&
      bettingmsgtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::BettingMsg >*
      mutable_bettingmsgtable();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.BettingMsgTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::BettingMsg > bettingmsgtable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static BettingMsgTable* default_instance_;
};
// -------------------------------------------------------------------

class MoneyTable : public ::google::protobuf::Message {
 public:
  MoneyTable();
  virtual ~MoneyTable();
  
  MoneyTable(const MoneyTable& from);
  
  inline MoneyTable& operator=(const MoneyTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoneyTable& default_instance();
  
  void Swap(MoneyTable* other);
  
  // implements Message ----------------------------------------------
  
  MoneyTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoneyTable& from);
  void MergeFrom(const MoneyTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker.Money MoneyTable = 1;
  inline int moneytable_size() const;
  inline void clear_moneytable();
  static const int kMoneyTableFieldNumber = 1;
  inline const ::Game_Poker::Money& moneytable(int index) const;
  inline ::Game_Poker::Money* mutable_moneytable(int index);
  inline ::Game_Poker::Money* add_moneytable();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
      moneytable() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
      mutable_moneytable();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MoneyTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money > moneytable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MoneyTable* default_instance_;
};
// -------------------------------------------------------------------

class CardTable : public ::google::protobuf::Message {
 public:
  CardTable();
  virtual ~CardTable();
  
  CardTable(const CardTable& from);
  
  inline CardTable& operator=(const CardTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CardTable& default_instance();
  
  void Swap(CardTable* other);
  
  // implements Message ----------------------------------------------
  
  CardTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardTable& from);
  void MergeFrom(const CardTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker.Cards CardTable = 1;
  inline int cardtable_size() const;
  inline void clear_cardtable();
  static const int kCardTableFieldNumber = 1;
  inline const ::Game_Poker::Cards& cardtable(int index) const;
  inline ::Game_Poker::Cards* mutable_cardtable(int index);
  inline ::Game_Poker::Cards* add_cardtable();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
      cardtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
      mutable_cardtable();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.CardTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards > cardtable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static CardTable* default_instance_;
};
// -------------------------------------------------------------------

class UITable : public ::google::protobuf::Message {
 public:
  UITable();
  virtual ~UITable();
  
  UITable(const UITable& from);
  
  inline UITable& operator=(const UITable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UITable& default_instance();
  
  void Swap(UITable* other);
  
  // implements Message ----------------------------------------------
  
  UITable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UITable& from);
  void MergeFrom(const UITable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker.UserInfo UITable = 1;
  inline int uitable_size() const;
  inline void clear_uitable();
  static const int kUITableFieldNumber = 1;
  inline const ::Game_Poker::UserInfo& uitable(int index) const;
  inline ::Game_Poker::UserInfo* mutable_uitable(int index);
  inline ::Game_Poker::UserInfo* add_uitable();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo >&
      uitable() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo >*
      mutable_uitable();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.UITable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo > uitable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static UITable* default_instance_;
};
// -------------------------------------------------------------------

class RCRoomData : public ::google::protobuf::Message {
 public:
  RCRoomData();
  virtual ~RCRoomData();
  
  RCRoomData(const RCRoomData& from);
  
  inline RCRoomData& operator=(const RCRoomData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCRoomData& default_instance();
  
  void Swap(RCRoomData* other);
  
  // implements Message ----------------------------------------------
  
  RCRoomData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RCRoomData& from);
  void MergeFrom(const RCRoomData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_lGameMaster = 1;
  inline bool has_m_lgamemaster() const;
  inline void clear_m_lgamemaster();
  static const int kMLGameMasterFieldNumber = 1;
  inline ::google::protobuf::int32 m_lgamemaster() const;
  inline void set_m_lgamemaster(::google::protobuf::int32 value);
  
  // required int32 m_lRoomIndex = 2;
  inline bool has_m_lroomindex() const;
  inline void clear_m_lroomindex();
  static const int kMLRoomIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_lroomindex() const;
  inline void set_m_lroomindex(::google::protobuf::int32 value);
  
  // required int32 m_lState = 3;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required .Game_Poker.Option m_option = 4;
  inline bool has_m_option() const;
  inline void clear_m_option();
  static const int kMOptionFieldNumber = 4;
  inline const ::Game_Poker::Option& m_option() const;
  inline ::Game_Poker::Option* mutable_m_option();
  inline ::Game_Poker::Option* release_m_option();
  
  // required .Game_Poker.UITable m_tblUI = 5;
  inline bool has_m_tblui() const;
  inline void clear_m_tblui();
  static const int kMTblUIFieldNumber = 5;
  inline const ::Game_Poker::UITable& m_tblui() const;
  inline ::Game_Poker::UITable* mutable_m_tblui();
  inline ::Game_Poker::UITable* release_m_tblui();
  
  // required .Game_Poker.CardTable m_tblCard = 6;
  inline bool has_m_tblcard() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 6;
  inline const ::Game_Poker::CardTable& m_tblcard() const;
  inline ::Game_Poker::CardTable* mutable_m_tblcard();
  inline ::Game_Poker::CardTable* release_m_tblcard();
  
  // required .Game_Poker.MoneyTable m_tblMoney = 7;
  inline bool has_m_tblmoney() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 7;
  inline const ::Game_Poker::MoneyTable& m_tblmoney() const;
  inline ::Game_Poker::MoneyTable* mutable_m_tblmoney();
  inline ::Game_Poker::MoneyTable* release_m_tblmoney();
  
  // required .Game_Poker.BettingMsgTable m_tblBettingMsg = 8;
  inline bool has_m_tblbettingmsg() const;
  inline void clear_m_tblbettingmsg();
  static const int kMTblBettingMsgFieldNumber = 8;
  inline const ::Game_Poker::BettingMsgTable& m_tblbettingmsg() const;
  inline ::Game_Poker::BettingMsgTable* mutable_m_tblbettingmsg();
  inline ::Game_Poker::BettingMsgTable* release_m_tblbettingmsg();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.RCRoomData)
 private:
  inline void set_has_m_lgamemaster();
  inline void clear_has_m_lgamemaster();
  inline void set_has_m_lroomindex();
  inline void clear_has_m_lroomindex();
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_option();
  inline void clear_has_m_option();
  inline void set_has_m_tblui();
  inline void clear_has_m_tblui();
  inline void set_has_m_tblcard();
  inline void clear_has_m_tblcard();
  inline void set_has_m_tblmoney();
  inline void clear_has_m_tblmoney();
  inline void set_has_m_tblbettingmsg();
  inline void clear_has_m_tblbettingmsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lgamemaster_;
  ::google::protobuf::int32 m_lroomindex_;
  ::Game_Poker::Option* m_option_;
  ::Game_Poker::UITable* m_tblui_;
  ::Game_Poker::CardTable* m_tblcard_;
  ::Game_Poker::MoneyTable* m_tblmoney_;
  ::Game_Poker::BettingMsgTable* m_tblbettingmsg_;
  ::google::protobuf::int32 m_lstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static RCRoomData* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_Entry : public ::google::protobuf::Message {
 public:
  MsgCS_Entry();
  virtual ~MsgCS_Entry();
  
  MsgCS_Entry(const MsgCS_Entry& from);
  
  inline MsgCS_Entry& operator=(const MsgCS_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_Entry& default_instance();
  
  void Swap(MsgCS_Entry* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_Entry& from);
  void MergeFrom(const MsgCS_Entry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nVersion = 1;
  inline bool has_m_nversion() const;
  inline void clear_m_nversion();
  static const int kMNVersionFieldNumber = 1;
  inline ::google::protobuf::int32 m_nversion() const;
  inline void set_m_nversion(::google::protobuf::int32 value);
  
  // required sint32 m_bWelcomeSound = 2;
  inline bool has_m_bwelcomesound() const;
  inline void clear_m_bwelcomesound();
  static const int kMBWelcomeSoundFieldNumber = 2;
  inline ::google::protobuf::int32 m_bwelcomesound() const;
  inline void set_m_bwelcomesound(::google::protobuf::int32 value);
  
  // required sint32 m_lSoundType = 3;
  inline bool has_m_lsoundtype() const;
  inline void clear_m_lsoundtype();
  static const int kMLSoundTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_lsoundtype() const;
  inline void set_m_lsoundtype(::google::protobuf::int32 value);
  
  // required string m_sNickName = 4;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 4;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required string m_sAvt = 5;
  inline bool has_m_savt() const;
  inline void clear_m_savt();
  static const int kMSAvtFieldNumber = 5;
  inline const ::std::string& m_savt() const;
  inline void set_m_savt(const ::std::string& value);
  inline void set_m_savt(const char* value);
  inline void set_m_savt(const char* value, size_t size);
  inline ::std::string* mutable_m_savt();
  inline ::std::string* release_m_savt();
  
  // required sint32 m_lCLevel = 6;
  inline bool has_m_lclevel() const;
  inline void clear_m_lclevel();
  static const int kMLCLevelFieldNumber = 6;
  inline ::google::protobuf::int32 m_lclevel() const;
  inline void set_m_lclevel(::google::protobuf::int32 value);
  
  // required sint32 m_lSex = 7;
  inline bool has_m_lsex() const;
  inline void clear_m_lsex();
  static const int kMLSexFieldNumber = 7;
  inline ::google::protobuf::int32 m_lsex() const;
  inline void set_m_lsex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_Entry)
 private:
  inline void set_has_m_nversion();
  inline void clear_has_m_nversion();
  inline void set_has_m_bwelcomesound();
  inline void clear_has_m_bwelcomesound();
  inline void set_has_m_lsoundtype();
  inline void clear_has_m_lsoundtype();
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_savt();
  inline void clear_has_m_savt();
  inline void set_has_m_lclevel();
  inline void clear_has_m_lclevel();
  inline void set_has_m_lsex();
  inline void clear_has_m_lsex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nversion_;
  ::google::protobuf::int32 m_bwelcomesound_;
  ::std::string* m_snickname_;
  ::google::protobuf::int32 m_lsoundtype_;
  ::google::protobuf::int32 m_lclevel_;
  ::std::string* m_savt_;
  ::google::protobuf::int32 m_lsex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_Entry* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_Observe : public ::google::protobuf::Message {
 public:
  MsgCS_Observe();
  virtual ~MsgCS_Observe();
  
  MsgCS_Observe(const MsgCS_Observe& from);
  
  inline MsgCS_Observe& operator=(const MsgCS_Observe& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_Observe& default_instance();
  
  void Swap(MsgCS_Observe* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_Observe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_Observe& from);
  void MergeFrom(const MsgCS_Observe& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_Observe)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_Observe* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_Start : public ::google::protobuf::Message {
 public:
  MsgCS_Start();
  virtual ~MsgCS_Start();
  
  MsgCS_Start(const MsgCS_Start& from);
  
  inline MsgCS_Start& operator=(const MsgCS_Start& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_Start& default_instance();
  
  void Swap(MsgCS_Start* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_Start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_Start& from);
  void MergeFrom(const MsgCS_Start& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_Start)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_Start* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_SelectedCardReq : public ::google::protobuf::Message {
 public:
  MsgCS_SelectedCardReq();
  virtual ~MsgCS_SelectedCardReq();
  
  MsgCS_SelectedCardReq(const MsgCS_SelectedCardReq& from);
  
  inline MsgCS_SelectedCardReq& operator=(const MsgCS_SelectedCardReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_SelectedCardReq& default_instance();
  
  void Swap(MsgCS_SelectedCardReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_SelectedCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_SelectedCardReq& from);
  void MergeFrom(const MsgCS_SelectedCardReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lCardIdx = 1;
  inline bool has_m_lcardidx() const;
  inline void clear_m_lcardidx();
  static const int kMLCardIdxFieldNumber = 1;
  inline ::google::protobuf::int32 m_lcardidx() const;
  inline void set_m_lcardidx(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_SelectedCardReq)
 private:
  inline void set_has_m_lcardidx();
  inline void clear_has_m_lcardidx();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lcardidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_SelectedCardReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_BettingReq : public ::google::protobuf::Message {
 public:
  MsgCS_BettingReq();
  virtual ~MsgCS_BettingReq();
  
  MsgCS_BettingReq(const MsgCS_BettingReq& from);
  
  inline MsgCS_BettingReq& operator=(const MsgCS_BettingReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_BettingReq& default_instance();
  
  void Swap(MsgCS_BettingReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_BettingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_BettingReq& from);
  void MergeFrom(const MsgCS_BettingReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBetType = 1;
  inline bool has_m_lbettype() const;
  inline void clear_m_lbettype();
  static const int kMLBetTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbettype() const;
  inline void set_m_lbettype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_BettingReq)
 private:
  inline void set_has_m_lbettype();
  inline void clear_has_m_lbettype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbettype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_BettingReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_ChoiceRemoveCard : public ::google::protobuf::Message {
 public:
  MsgCS_ChoiceRemoveCard();
  virtual ~MsgCS_ChoiceRemoveCard();
  
  MsgCS_ChoiceRemoveCard(const MsgCS_ChoiceRemoveCard& from);
  
  inline MsgCS_ChoiceRemoveCard& operator=(const MsgCS_ChoiceRemoveCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_ChoiceRemoveCard& default_instance();
  
  void Swap(MsgCS_ChoiceRemoveCard* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_ChoiceRemoveCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_ChoiceRemoveCard& from);
  void MergeFrom(const MsgCS_ChoiceRemoveCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nRemoveCardIndex = 2;
  inline bool has_m_nremovecardindex() const;
  inline void clear_m_nremovecardindex();
  static const int kMNRemoveCardIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nremovecardindex() const;
  inline void set_m_nremovecardindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_ChoiceRemoveCard)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nremovecardindex();
  inline void clear_has_m_nremovecardindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nremovecardindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_ChoiceRemoveCard* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_Purge : public ::google::protobuf::Message {
 public:
  MsgCS_Purge();
  virtual ~MsgCS_Purge();
  
  MsgCS_Purge(const MsgCS_Purge& from);
  
  inline MsgCS_Purge& operator=(const MsgCS_Purge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_Purge& default_instance();
  
  void Swap(MsgCS_Purge* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_Purge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_Purge& from);
  void MergeFrom(const MsgCS_Purge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // required sint32 m_lPurgeUSN = 2;
  inline bool has_m_lpurgeusn() const;
  inline void clear_m_lpurgeusn();
  static const int kMLPurgeUSNFieldNumber = 2;
  inline ::google::protobuf::int32 m_lpurgeusn() const;
  inline void set_m_lpurgeusn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_Purge)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  inline void set_has_m_lpurgeusn();
  inline void clear_has_m_lpurgeusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ltype_;
  ::google::protobuf::int32 m_lpurgeusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_Purge* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_Abuse : public ::google::protobuf::Message {
 public:
  MsgCS_Abuse();
  virtual ~MsgCS_Abuse();
  
  MsgCS_Abuse(const MsgCS_Abuse& from);
  
  inline MsgCS_Abuse& operator=(const MsgCS_Abuse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_Abuse& default_instance();
  
  void Swap(MsgCS_Abuse* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_Abuse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_Abuse& from);
  void MergeFrom(const MsgCS_Abuse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // required string m_sDay = 2;
  inline bool has_m_sday() const;
  inline void clear_m_sday();
  static const int kMSDayFieldNumber = 2;
  inline const ::std::string& m_sday() const;
  inline void set_m_sday(const ::std::string& value);
  inline void set_m_sday(const char* value);
  inline void set_m_sday(const char* value, size_t size);
  inline ::std::string* mutable_m_sday();
  inline ::std::string* release_m_sday();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_Abuse)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  inline void set_has_m_sday();
  inline void clear_has_m_sday();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_sday_;
  ::google::protobuf::int32 m_ltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_Abuse* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_AskPurgeVote : public ::google::protobuf::Message {
 public:
  MsgCS_AskPurgeVote();
  virtual ~MsgCS_AskPurgeVote();
  
  MsgCS_AskPurgeVote(const MsgCS_AskPurgeVote& from);
  
  inline MsgCS_AskPurgeVote& operator=(const MsgCS_AskPurgeVote& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_AskPurgeVote& default_instance();
  
  void Swap(MsgCS_AskPurgeVote* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_AskPurgeVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_AskPurgeVote& from);
  void MergeFrom(const MsgCS_AskPurgeVote& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lPurgeUSN = 1;
  inline bool has_m_lpurgeusn() const;
  inline void clear_m_lpurgeusn();
  static const int kMLPurgeUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lpurgeusn() const;
  inline void set_m_lpurgeusn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_AskPurgeVote)
 private:
  inline void set_has_m_lpurgeusn();
  inline void clear_has_m_lpurgeusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lpurgeusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_AskPurgeVote* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_AnswerPurgeVote : public ::google::protobuf::Message {
 public:
  MsgCS_AnswerPurgeVote();
  virtual ~MsgCS_AnswerPurgeVote();
  
  MsgCS_AnswerPurgeVote(const MsgCS_AnswerPurgeVote& from);
  
  inline MsgCS_AnswerPurgeVote& operator=(const MsgCS_AnswerPurgeVote& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_AnswerPurgeVote& default_instance();
  
  void Swap(MsgCS_AnswerPurgeVote* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_AnswerPurgeVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_AnswerPurgeVote& from);
  void MergeFrom(const MsgCS_AnswerPurgeVote& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lAnswer = 1;
  inline bool has_m_lanswer() const;
  inline void clear_m_lanswer();
  static const int kMLAnswerFieldNumber = 1;
  inline ::google::protobuf::int32 m_lanswer() const;
  inline void set_m_lanswer(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_AnswerPurgeVote)
 private:
  inline void set_has_m_lanswer();
  inline void clear_has_m_lanswer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lanswer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_AnswerPurgeVote* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_WaitingUserTicketReq : public ::google::protobuf::Message {
 public:
  MsgCS_WaitingUserTicketReq();
  virtual ~MsgCS_WaitingUserTicketReq();
  
  MsgCS_WaitingUserTicketReq(const MsgCS_WaitingUserTicketReq& from);
  
  inline MsgCS_WaitingUserTicketReq& operator=(const MsgCS_WaitingUserTicketReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_WaitingUserTicketReq& default_instance();
  
  void Swap(MsgCS_WaitingUserTicketReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_WaitingUserTicketReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_WaitingUserTicketReq& from);
  void MergeFrom(const MsgCS_WaitingUserTicketReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nType = 1;
  inline bool has_m_ntype() const;
  inline void clear_m_ntype();
  static const int kMNTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ntype() const;
  inline void set_m_ntype(::google::protobuf::int32 value);
  
  // required sint32 m_bValue = 2;
  inline bool has_m_bvalue() const;
  inline void clear_m_bvalue();
  static const int kMBValueFieldNumber = 2;
  inline ::google::protobuf::int32 m_bvalue() const;
  inline void set_m_bvalue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_WaitingUserTicketReq)
 private:
  inline void set_has_m_ntype();
  inline void clear_has_m_ntype();
  inline void set_has_m_bvalue();
  inline void clear_has_m_bvalue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ntype_;
  ::google::protobuf::int32 m_bvalue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_WaitingUserTicketReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_UpdateWaitingUserInfoReq : public ::google::protobuf::Message {
 public:
  MsgCS_UpdateWaitingUserInfoReq();
  virtual ~MsgCS_UpdateWaitingUserInfoReq();
  
  MsgCS_UpdateWaitingUserInfoReq(const MsgCS_UpdateWaitingUserInfoReq& from);
  
  inline MsgCS_UpdateWaitingUserInfoReq& operator=(const MsgCS_UpdateWaitingUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_UpdateWaitingUserInfoReq& default_instance();
  
  void Swap(MsgCS_UpdateWaitingUserInfoReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_UpdateWaitingUserInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_UpdateWaitingUserInfoReq& from);
  void MergeFrom(const MsgCS_UpdateWaitingUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_UpdateWaitingUserInfoReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_UpdateWaitingUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_SoundType : public ::google::protobuf::Message {
 public:
  MsgCS_SoundType();
  virtual ~MsgCS_SoundType();
  
  MsgCS_SoundType(const MsgCS_SoundType& from);
  
  inline MsgCS_SoundType& operator=(const MsgCS_SoundType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_SoundType& default_instance();
  
  void Swap(MsgCS_SoundType* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_SoundType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_SoundType& from);
  void MergeFrom(const MsgCS_SoundType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lSoundType = 1;
  inline bool has_m_lsoundtype() const;
  inline void clear_m_lsoundtype();
  static const int kMLSoundTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_lsoundtype() const;
  inline void set_m_lsoundtype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_SoundType)
 private:
  inline void set_has_m_lsoundtype();
  inline void clear_has_m_lsoundtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lsoundtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_SoundType* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_ExitQue : public ::google::protobuf::Message {
 public:
  MsgCS_ExitQue();
  virtual ~MsgCS_ExitQue();
  
  MsgCS_ExitQue(const MsgCS_ExitQue& from);
  
  inline MsgCS_ExitQue& operator=(const MsgCS_ExitQue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_ExitQue& default_instance();
  
  void Swap(MsgCS_ExitQue* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_ExitQue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_ExitQue& from);
  void MergeFrom(const MsgCS_ExitQue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lExit = 1;
  inline bool has_m_lexit() const;
  inline void clear_m_lexit();
  static const int kMLExitFieldNumber = 1;
  inline ::google::protobuf::int32 m_lexit() const;
  inline void set_m_lexit(::google::protobuf::int32 value);
  
  // required sint32 m_bAction = 2;
  inline bool has_m_baction() const;
  inline void clear_m_baction();
  static const int kMBActionFieldNumber = 2;
  inline ::google::protobuf::int32 m_baction() const;
  inline void set_m_baction(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_ExitQue)
 private:
  inline void set_has_m_lexit();
  inline void clear_has_m_lexit();
  inline void set_has_m_baction();
  inline void clear_has_m_baction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lexit_;
  ::google::protobuf::int32 m_baction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_ExitQue* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_Continue : public ::google::protobuf::Message {
 public:
  MsgCS_Continue();
  virtual ~MsgCS_Continue();
  
  MsgCS_Continue(const MsgCS_Continue& from);
  
  inline MsgCS_Continue& operator=(const MsgCS_Continue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_Continue& default_instance();
  
  void Swap(MsgCS_Continue* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_Continue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_Continue& from);
  void MergeFrom(const MsgCS_Continue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lExit = 1;
  inline bool has_m_lexit() const;
  inline void clear_m_lexit();
  static const int kMLExitFieldNumber = 1;
  inline ::google::protobuf::int32 m_lexit() const;
  inline void set_m_lexit(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_Continue)
 private:
  inline void set_has_m_lexit();
  inline void clear_has_m_lexit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lexit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_Continue* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_RuleSet : public ::google::protobuf::Message {
 public:
  MsgCS_RuleSet();
  virtual ~MsgCS_RuleSet();
  
  MsgCS_RuleSet(const MsgCS_RuleSet& from);
  
  inline MsgCS_RuleSet& operator=(const MsgCS_RuleSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_RuleSet& default_instance();
  
  void Swap(MsgCS_RuleSet* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_RuleSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_RuleSet& from);
  void MergeFrom(const MsgCS_RuleSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nRuleIdx = 1;
  inline bool has_m_nruleidx() const;
  inline void clear_m_nruleidx();
  static const int kMNRuleIdxFieldNumber = 1;
  inline ::google::protobuf::int32 m_nruleidx() const;
  inline void set_m_nruleidx(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_RuleSet)
 private:
  inline void set_has_m_nruleidx();
  inline void clear_has_m_nruleidx();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nruleidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_RuleSet* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_GameMasterCall : public ::google::protobuf::Message {
 public:
  MsgCS_GameMasterCall();
  virtual ~MsgCS_GameMasterCall();
  
  MsgCS_GameMasterCall(const MsgCS_GameMasterCall& from);
  
  inline MsgCS_GameMasterCall& operator=(const MsgCS_GameMasterCall& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_GameMasterCall& default_instance();
  
  void Swap(MsgCS_GameMasterCall* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_GameMasterCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_GameMasterCall& from);
  void MergeFrom(const MsgCS_GameMasterCall& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_GameMasterCall)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_GameMasterCall* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_FieldReserved : public ::google::protobuf::Message {
 public:
  MsgCS_FieldReserved();
  virtual ~MsgCS_FieldReserved();
  
  MsgCS_FieldReserved(const MsgCS_FieldReserved& from);
  
  inline MsgCS_FieldReserved& operator=(const MsgCS_FieldReserved& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_FieldReserved& default_instance();
  
  void Swap(MsgCS_FieldReserved* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_FieldReserved* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_FieldReserved& from);
  void MergeFrom(const MsgCS_FieldReserved& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nReserved1 = 1;
  inline bool has_m_nreserved1() const;
  inline void clear_m_nreserved1();
  static const int kMNReserved1FieldNumber = 1;
  inline ::google::protobuf::int32 m_nreserved1() const;
  inline void set_m_nreserved1(::google::protobuf::int32 value);
  
  // required int32 m_nReserved2 = 2;
  inline bool has_m_nreserved2() const;
  inline void clear_m_nreserved2();
  static const int kMNReserved2FieldNumber = 2;
  inline ::google::protobuf::int32 m_nreserved2() const;
  inline void set_m_nreserved2(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_FieldReserved)
 private:
  inline void set_has_m_nreserved1();
  inline void clear_has_m_nreserved1();
  inline void set_has_m_nreserved2();
  inline void clear_has_m_nreserved2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nreserved1_;
  ::google::protobuf::int32 m_nreserved2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_FieldReserved* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_JokboSet : public ::google::protobuf::Message {
 public:
  MsgCS_JokboSet();
  virtual ~MsgCS_JokboSet();
  
  MsgCS_JokboSet(const MsgCS_JokboSet& from);
  
  inline MsgCS_JokboSet& operator=(const MsgCS_JokboSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_JokboSet& default_instance();
  
  void Swap(MsgCS_JokboSet* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_JokboSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_JokboSet& from);
  void MergeFrom(const MsgCS_JokboSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lKey1 = 1;
  inline bool has_m_lkey1() const;
  inline void clear_m_lkey1();
  static const int kMLKey1FieldNumber = 1;
  inline ::google::protobuf::int32 m_lkey1() const;
  inline void set_m_lkey1(::google::protobuf::int32 value);
  
  // required sint32 m_lKey2 = 2;
  inline bool has_m_lkey2() const;
  inline void clear_m_lkey2();
  static const int kMLKey2FieldNumber = 2;
  inline ::google::protobuf::int32 m_lkey2() const;
  inline void set_m_lkey2(::google::protobuf::int32 value);
  
  // required sint32 m_lKey3 = 3;
  inline bool has_m_lkey3() const;
  inline void clear_m_lkey3();
  static const int kMLKey3FieldNumber = 3;
  inline ::google::protobuf::int32 m_lkey3() const;
  inline void set_m_lkey3(::google::protobuf::int32 value);
  
  // required sint32 m_lKey4 = 4;
  inline bool has_m_lkey4() const;
  inline void clear_m_lkey4();
  static const int kMLKey4FieldNumber = 4;
  inline ::google::protobuf::int32 m_lkey4() const;
  inline void set_m_lkey4(::google::protobuf::int32 value);
  
  // required sint32 m_lKey5 = 5;
  inline bool has_m_lkey5() const;
  inline void clear_m_lkey5();
  static const int kMLKey5FieldNumber = 5;
  inline ::google::protobuf::int32 m_lkey5() const;
  inline void set_m_lkey5(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_JokboSet)
 private:
  inline void set_has_m_lkey1();
  inline void clear_has_m_lkey1();
  inline void set_has_m_lkey2();
  inline void clear_has_m_lkey2();
  inline void set_has_m_lkey3();
  inline void clear_has_m_lkey3();
  inline void set_has_m_lkey4();
  inline void clear_has_m_lkey4();
  inline void set_has_m_lkey5();
  inline void clear_has_m_lkey5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lkey1_;
  ::google::protobuf::int32 m_lkey2_;
  ::google::protobuf::int32 m_lkey3_;
  ::google::protobuf::int32 m_lkey4_;
  ::google::protobuf::int32 m_lkey5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_JokboSet* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_TestKeySetting : public ::google::protobuf::Message {
 public:
  MsgCS_TestKeySetting();
  virtual ~MsgCS_TestKeySetting();
  
  MsgCS_TestKeySetting(const MsgCS_TestKeySetting& from);
  
  inline MsgCS_TestKeySetting& operator=(const MsgCS_TestKeySetting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_TestKeySetting& default_instance();
  
  void Swap(MsgCS_TestKeySetting* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_TestKeySetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_TestKeySetting& from);
  void MergeFrom(const MsgCS_TestKeySetting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 m_nChar = 1;
  inline bool has_m_nchar() const;
  inline void clear_m_nchar();
  static const int kMNCharFieldNumber = 1;
  inline ::google::protobuf::uint32 m_nchar() const;
  inline void set_m_nchar(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_TestKeySetting)
 private:
  inline void set_has_m_nchar();
  inline void clear_has_m_nchar();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 m_nchar_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_TestKeySetting* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_CheckNotice : public ::google::protobuf::Message {
 public:
  MsgCS_CheckNotice();
  virtual ~MsgCS_CheckNotice();
  
  MsgCS_CheckNotice(const MsgCS_CheckNotice& from);
  
  inline MsgCS_CheckNotice& operator=(const MsgCS_CheckNotice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_CheckNotice& default_instance();
  
  void Swap(MsgCS_CheckNotice* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_CheckNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_CheckNotice& from);
  void MergeFrom(const MsgCS_CheckNotice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nType = 1;
  inline bool has_m_ntype() const;
  inline void clear_m_ntype();
  static const int kMNTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ntype() const;
  inline void set_m_ntype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_CheckNotice)
 private:
  inline void set_has_m_ntype();
  inline void clear_has_m_ntype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_CheckNotice* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_Ack : public ::google::protobuf::Message {
 public:
  MsgCS_Ack();
  virtual ~MsgCS_Ack();
  
  MsgCS_Ack(const MsgCS_Ack& from);
  
  inline MsgCS_Ack& operator=(const MsgCS_Ack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_Ack& default_instance();
  
  void Swap(MsgCS_Ack* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_Ack& from);
  void MergeFrom(const MsgCS_Ack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nTagID = 1;
  inline bool has_m_ntagid() const;
  inline void clear_m_ntagid();
  static const int kMNTagIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_ntagid() const;
  inline void set_m_ntagid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_Ack)
 private:
  inline void set_has_m_ntagid();
  inline void clear_has_m_ntagid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ntagid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_Ack* default_instance_;
};
// -------------------------------------------------------------------

class MsgCS_Ping : public ::google::protobuf::Message {
 public:
  MsgCS_Ping();
  virtual ~MsgCS_Ping();
  
  MsgCS_Ping(const MsgCS_Ping& from);
  
  inline MsgCS_Ping& operator=(const MsgCS_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCS_Ping& default_instance();
  
  void Swap(MsgCS_Ping* other);
  
  // implements Message ----------------------------------------------
  
  MsgCS_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCS_Ping& from);
  void MergeFrom(const MsgCS_Ping& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgCS_Ping)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgCS_Ping* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_UserJoinAns : public ::google::protobuf::Message {
 public:
  MsgSC_UserJoinAns();
  virtual ~MsgSC_UserJoinAns();
  
  MsgSC_UserJoinAns(const MsgSC_UserJoinAns& from);
  
  inline MsgSC_UserJoinAns& operator=(const MsgSC_UserJoinAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_UserJoinAns& default_instance();
  
  void Swap(MsgSC_UserJoinAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_UserJoinAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_UserJoinAns& from);
  void MergeFrom(const MsgSC_UserJoinAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lState = 1;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required int32 m_nEnter = 2;
  inline bool has_m_nenter() const;
  inline void clear_m_nenter();
  static const int kMNEnterFieldNumber = 2;
  inline ::google::protobuf::int32 m_nenter() const;
  inline void set_m_nenter(::google::protobuf::int32 value);
  
  // required int32 m_nSet = 3;
  inline bool has_m_nset() const;
  inline void clear_m_nset();
  static const int kMNSetFieldNumber = 3;
  inline ::google::protobuf::int32 m_nset() const;
  inline void set_m_nset(::google::protobuf::int32 value);
  
  // required int32 m_lChannel_idx = 4;
  inline bool has_m_lchannel_idx() const;
  inline void clear_m_lchannel_idx();
  static const int kMLChannelIdxFieldNumber = 4;
  inline ::google::protobuf::int32 m_lchannel_idx() const;
  inline void set_m_lchannel_idx(::google::protobuf::int32 value);
  
  // required sint32 m_lOwnerUSN = 5;
  inline bool has_m_lownerusn() const;
  inline void clear_m_lownerusn();
  static const int kMLOwnerUSNFieldNumber = 5;
  inline ::google::protobuf::int32 m_lownerusn() const;
  inline void set_m_lownerusn(::google::protobuf::int32 value);
  
  // required sint32 m_lBossUSN = 6;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 6;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required int32 m_nRoomPurgeCnt = 7;
  inline bool has_m_nroompurgecnt() const;
  inline void clear_m_nroompurgecnt();
  static const int kMNRoomPurgeCntFieldNumber = 7;
  inline ::google::protobuf::int32 m_nroompurgecnt() const;
  inline void set_m_nroompurgecnt(::google::protobuf::int32 value);
  
  // required .Game_Poker.Option m_option = 8;
  inline bool has_m_option() const;
  inline void clear_m_option();
  static const int kMOptionFieldNumber = 8;
  inline const ::Game_Poker::Option& m_option() const;
  inline ::Game_Poker::Option* mutable_m_option();
  inline ::Game_Poker::Option* release_m_option();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_UserJoinAns)
 private:
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_nenter();
  inline void clear_has_m_nenter();
  inline void set_has_m_nset();
  inline void clear_has_m_nset();
  inline void set_has_m_lchannel_idx();
  inline void clear_has_m_lchannel_idx();
  inline void set_has_m_lownerusn();
  inline void clear_has_m_lownerusn();
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_nroompurgecnt();
  inline void clear_has_m_nroompurgecnt();
  inline void set_has_m_option();
  inline void clear_has_m_option();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::int32 m_nenter_;
  ::google::protobuf::int32 m_nset_;
  ::google::protobuf::int32 m_lchannel_idx_;
  ::google::protobuf::int32 m_lownerusn_;
  ::google::protobuf::int32 m_lbossusn_;
  ::Game_Poker::Option* m_option_;
  ::google::protobuf::int32 m_nroompurgecnt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_UserJoinAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_UserJoinErr : public ::google::protobuf::Message {
 public:
  MsgSC_UserJoinErr();
  virtual ~MsgSC_UserJoinErr();
  
  MsgSC_UserJoinErr(const MsgSC_UserJoinErr& from);
  
  inline MsgSC_UserJoinErr& operator=(const MsgSC_UserJoinErr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_UserJoinErr& default_instance();
  
  void Swap(MsgSC_UserJoinErr* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_UserJoinErr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_UserJoinErr& from);
  void MergeFrom(const MsgSC_UserJoinErr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lErrorCode = 2;
  inline bool has_m_lerrorcode() const;
  inline void clear_m_lerrorcode();
  static const int kMLErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lerrorcode() const;
  inline void set_m_lerrorcode(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_UserJoinErr)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lerrorcode();
  inline void clear_has_m_lerrorcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lerrorcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_UserJoinErr* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_UserDisconnect : public ::google::protobuf::Message {
 public:
  MsgSC_UserDisconnect();
  virtual ~MsgSC_UserDisconnect();
  
  MsgSC_UserDisconnect(const MsgSC_UserDisconnect& from);
  
  inline MsgSC_UserDisconnect& operator=(const MsgSC_UserDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_UserDisconnect& default_instance();
  
  void Swap(MsgSC_UserDisconnect* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_UserDisconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_UserDisconnect& from);
  void MergeFrom(const MsgSC_UserDisconnect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required .Game_Poker.UserInfo m_uinfo = 2;
  inline bool has_m_uinfo() const;
  inline void clear_m_uinfo();
  static const int kMUinfoFieldNumber = 2;
  inline const ::Game_Poker::UserInfo& m_uinfo() const;
  inline ::Game_Poker::UserInfo* mutable_m_uinfo();
  inline ::Game_Poker::UserInfo* release_m_uinfo();
  
  // required sint32 m_lState = 3;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required sint32 m_lOwnerUSN = 4;
  inline bool has_m_lownerusn() const;
  inline void clear_m_lownerusn();
  static const int kMLOwnerUSNFieldNumber = 4;
  inline ::google::protobuf::int32 m_lownerusn() const;
  inline void set_m_lownerusn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_UserDisconnect)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_uinfo();
  inline void clear_has_m_uinfo();
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_lownerusn();
  inline void clear_has_m_lownerusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Game_Poker::UserInfo* m_uinfo_;
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::int32 m_lownerusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_UserDisconnect* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_CardData : public ::google::protobuf::Message {
 public:
  MsgSC_CardData();
  virtual ~MsgSC_CardData();
  
  MsgSC_CardData(const MsgSC_CardData& from);
  
  inline MsgSC_CardData& operator=(const MsgSC_CardData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_CardData& default_instance();
  
  void Swap(MsgSC_CardData* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_CardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_CardData& from);
  void MergeFrom(const MsgSC_CardData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nDealCnt = 1;
  inline bool has_m_ndealcnt() const;
  inline void clear_m_ndealcnt();
  static const int kMNDealCntFieldNumber = 1;
  inline ::google::protobuf::int32 m_ndealcnt() const;
  inline void set_m_ndealcnt(::google::protobuf::int32 value);
  
  // required sint32 m_lCardsDealt = 2;
  inline bool has_m_lcardsdealt() const;
  inline void clear_m_lcardsdealt();
  static const int kMLCardsDealtFieldNumber = 2;
  inline ::google::protobuf::int32 m_lcardsdealt() const;
  inline void set_m_lcardsdealt(::google::protobuf::int32 value);
  
  // repeated .Game_Poker.Cards m_tblCard = 3;
  inline int m_tblcard_size() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 3;
  inline const ::Game_Poker::Cards& m_tblcard(int index) const;
  inline ::Game_Poker::Cards* mutable_m_tblcard(int index);
  inline ::Game_Poker::Cards* add_m_tblcard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
      m_tblcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
      mutable_m_tblcard();
  
  // repeated .Game_Poker.Money m_tblMoney = 4;
  inline int m_tblmoney_size() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 4;
  inline const ::Game_Poker::Money& m_tblmoney(int index) const;
  inline ::Game_Poker::Money* mutable_m_tblmoney(int index);
  inline ::Game_Poker::Money* add_m_tblmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
      m_tblmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
      mutable_m_tblmoney();
  
  // required sint64 m_llPoolMoney = 5;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_CardData)
 private:
  inline void set_has_m_ndealcnt();
  inline void clear_has_m_ndealcnt();
  inline void set_has_m_lcardsdealt();
  inline void clear_has_m_lcardsdealt();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ndealcnt_;
  ::google::protobuf::int32 m_lcardsdealt_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards > m_tblcard_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money > m_tblmoney_;
  ::google::protobuf::int64 m_llpoolmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_CardData* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_EntryAns : public ::google::protobuf::Message {
 public:
  MsgSC_EntryAns();
  virtual ~MsgSC_EntryAns();
  
  MsgSC_EntryAns(const MsgSC_EntryAns& from);
  
  inline MsgSC_EntryAns& operator=(const MsgSC_EntryAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_EntryAns& default_instance();
  
  void Swap(MsgSC_EntryAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_EntryAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_EntryAns& from);
  void MergeFrom(const MsgSC_EntryAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lOwnerUSN = 3;
  inline bool has_m_lownerusn() const;
  inline void clear_m_lownerusn();
  static const int kMLOwnerUSNFieldNumber = 3;
  inline ::google::protobuf::int32 m_lownerusn() const;
  inline void set_m_lownerusn(::google::protobuf::int32 value);
  
  // repeated .Game_Poker.UserInfo m_tblUI = 4;
  inline int m_tblui_size() const;
  inline void clear_m_tblui();
  static const int kMTblUIFieldNumber = 4;
  inline const ::Game_Poker::UserInfo& m_tblui(int index) const;
  inline ::Game_Poker::UserInfo* mutable_m_tblui(int index);
  inline ::Game_Poker::UserInfo* add_m_tblui();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo >&
      m_tblui() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo >*
      mutable_m_tblui();
  
  // repeated .Game_Poker.Money m_tblMoney = 5;
  inline int m_tblmoney_size() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 5;
  inline const ::Game_Poker::Money& m_tblmoney(int index) const;
  inline ::Game_Poker::Money* mutable_m_tblmoney(int index);
  inline ::Game_Poker::Money* add_m_tblmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
      m_tblmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
      mutable_m_tblmoney();
  
  // required sint32 m_bWelcomeSound = 6;
  inline bool has_m_bwelcomesound() const;
  inline void clear_m_bwelcomesound();
  static const int kMBWelcomeSoundFieldNumber = 6;
  inline ::google::protobuf::int32 m_bwelcomesound() const;
  inline void set_m_bwelcomesound(::google::protobuf::int32 value);
  
  // required sint32 m_lObserveCnt = 7;
  inline bool has_m_lobservecnt() const;
  inline void clear_m_lobservecnt();
  static const int kMLObserveCntFieldNumber = 7;
  inline ::google::protobuf::int32 m_lobservecnt() const;
  inline void set_m_lobservecnt(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_EntryAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lownerusn();
  inline void clear_has_m_lownerusn();
  inline void set_has_m_bwelcomesound();
  inline void clear_has_m_bwelcomesound();
  inline void set_has_m_lobservecnt();
  inline void clear_has_m_lobservecnt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo > m_tblui_;
  ::google::protobuf::int32 m_lownerusn_;
  ::google::protobuf::int32 m_bwelcomesound_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money > m_tblmoney_;
  ::google::protobuf::int32 m_lobservecnt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_EntryAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_EntryReject : public ::google::protobuf::Message {
 public:
  MsgSC_EntryReject();
  virtual ~MsgSC_EntryReject();
  
  MsgSC_EntryReject(const MsgSC_EntryReject& from);
  
  inline MsgSC_EntryReject& operator=(const MsgSC_EntryReject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_EntryReject& default_instance();
  
  void Swap(MsgSC_EntryReject* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_EntryReject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_EntryReject& from);
  void MergeFrom(const MsgSC_EntryReject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // required sint64 m_llCMoney = 2;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_EntryReject)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int32 m_ltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_EntryReject* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_ObserveAns : public ::google::protobuf::Message {
 public:
  MsgSC_ObserveAns();
  virtual ~MsgSC_ObserveAns();
  
  MsgSC_ObserveAns(const MsgSC_ObserveAns& from);
  
  inline MsgSC_ObserveAns& operator=(const MsgSC_ObserveAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_ObserveAns& default_instance();
  
  void Swap(MsgSC_ObserveAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_ObserveAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_ObserveAns& from);
  void MergeFrom(const MsgSC_ObserveAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lOwnerUSN = 3;
  inline bool has_m_lownerusn() const;
  inline void clear_m_lownerusn();
  static const int kMLOwnerUSNFieldNumber = 3;
  inline ::google::protobuf::int32 m_lownerusn() const;
  inline void set_m_lownerusn(::google::protobuf::int32 value);
  
  // required .Game_Poker.UserInfo m_uinfo = 4;
  inline bool has_m_uinfo() const;
  inline void clear_m_uinfo();
  static const int kMUinfoFieldNumber = 4;
  inline const ::Game_Poker::UserInfo& m_uinfo() const;
  inline ::Game_Poker::UserInfo* mutable_m_uinfo();
  inline ::Game_Poker::UserInfo* release_m_uinfo();
  
  // required .Game_Poker.Money m_money = 5;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 5;
  inline const ::Game_Poker::Money& m_money() const;
  inline ::Game_Poker::Money* mutable_m_money();
  inline ::Game_Poker::Money* release_m_money();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_ObserveAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lownerusn();
  inline void clear_has_m_lownerusn();
  inline void set_has_m_uinfo();
  inline void clear_has_m_uinfo();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::Game_Poker::UserInfo* m_uinfo_;
  ::Game_Poker::Money* m_money_;
  ::google::protobuf::int32 m_lownerusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_ObserveAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_StartReq : public ::google::protobuf::Message {
 public:
  MsgSC_StartReq();
  virtual ~MsgSC_StartReq();
  
  MsgSC_StartReq(const MsgSC_StartReq& from);
  
  inline MsgSC_StartReq& operator=(const MsgSC_StartReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_StartReq& default_instance();
  
  void Swap(MsgSC_StartReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_StartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_StartReq& from);
  void MergeFrom(const MsgSC_StartReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_StartReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_StartReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_StartAns : public ::google::protobuf::Message {
 public:
  MsgSC_StartAns();
  virtual ~MsgSC_StartAns();
  
  MsgSC_StartAns(const MsgSC_StartAns& from);
  
  inline MsgSC_StartAns& operator=(const MsgSC_StartAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_StartAns& default_instance();
  
  void Swap(MsgSC_StartAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_StartAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_StartAns& from);
  void MergeFrom(const MsgSC_StartAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lState = 1;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // repeated sint32 m_vtState = 2;
  inline int m_vtstate_size() const;
  inline void clear_m_vtstate();
  static const int kMVtStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_vtstate(int index) const;
  inline void set_m_vtstate(int index, ::google::protobuf::int32 value);
  inline void add_m_vtstate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtstate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtstate();
  
  // required sint64 m_llSystemTime = 3;
  inline bool has_m_llsystemtime() const;
  inline void clear_m_llsystemtime();
  static const int kMLlSystemTimeFieldNumber = 3;
  inline ::google::protobuf::int64 m_llsystemtime() const;
  inline void set_m_llsystemtime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_StartAns)
 private:
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_llsystemtime();
  inline void clear_has_m_llsystemtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtstate_;
  ::google::protobuf::int64 m_llsystemtime_;
  ::google::protobuf::int32 m_lstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_StartAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_NoStart : public ::google::protobuf::Message {
 public:
  MsgSC_NoStart();
  virtual ~MsgSC_NoStart();
  
  MsgSC_NoStart(const MsgSC_NoStart& from);
  
  inline MsgSC_NoStart& operator=(const MsgSC_NoStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_NoStart& default_instance();
  
  void Swap(MsgSC_NoStart* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_NoStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_NoStart& from);
  void MergeFrom(const MsgSC_NoStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_NoStart)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_NoStart* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_DealCards : public ::google::protobuf::Message {
 public:
  MsgSC_DealCards();
  virtual ~MsgSC_DealCards();
  
  MsgSC_DealCards(const MsgSC_DealCards& from);
  
  inline MsgSC_DealCards& operator=(const MsgSC_DealCards& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_DealCards& default_instance();
  
  void Swap(MsgSC_DealCards* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_DealCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_DealCards& from);
  void MergeFrom(const MsgSC_DealCards& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBossUSN = 1;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required sint32 m_lState = 2;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required int32 m_nType = 3;
  inline bool has_m_ntype() const;
  inline void clear_m_ntype();
  static const int kMNTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_ntype() const;
  inline void set_m_ntype(::google::protobuf::int32 value);
  
  // repeated .Game_Poker.Cards m_tblCard = 4;
  inline int m_tblcard_size() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 4;
  inline const ::Game_Poker::Cards& m_tblcard(int index) const;
  inline ::Game_Poker::Cards* mutable_m_tblcard(int index);
  inline ::Game_Poker::Cards* add_m_tblcard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
      m_tblcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
      mutable_m_tblcard();
  
  // repeated .Game_Poker.Money m_tblMoney = 5;
  inline int m_tblmoney_size() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 5;
  inline const ::Game_Poker::Money& m_tblmoney(int index) const;
  inline ::Game_Poker::Money* mutable_m_tblmoney(int index);
  inline ::Game_Poker::Money* add_m_tblmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
      m_tblmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
      mutable_m_tblmoney();
  
  // required sint64 m_llPoolMoney = 6;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_DealCards)
 private:
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_ntype();
  inline void clear_has_m_ntype();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards > m_tblcard_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money > m_tblmoney_;
  ::google::protobuf::int64 m_llpoolmoney_;
  ::google::protobuf::int32 m_ntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_DealCards* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_SelectedCardAns : public ::google::protobuf::Message {
 public:
  MsgSC_SelectedCardAns();
  virtual ~MsgSC_SelectedCardAns();
  
  MsgSC_SelectedCardAns(const MsgSC_SelectedCardAns& from);
  
  inline MsgSC_SelectedCardAns& operator=(const MsgSC_SelectedCardAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_SelectedCardAns& default_instance();
  
  void Swap(MsgSC_SelectedCardAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_SelectedCardAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_SelectedCardAns& from);
  void MergeFrom(const MsgSC_SelectedCardAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nSelect = 2;
  inline bool has_m_nselect() const;
  inline void clear_m_nselect();
  static const int kMNSelectFieldNumber = 2;
  inline ::google::protobuf::int32 m_nselect() const;
  inline void set_m_nselect(::google::protobuf::int32 value);
  
  // required sint32 m_lCardIndex = 3;
  inline bool has_m_lcardindex() const;
  inline void clear_m_lcardindex();
  static const int kMLCardIndexFieldNumber = 3;
  inline ::google::protobuf::int32 m_lcardindex() const;
  inline void set_m_lcardindex(::google::protobuf::int32 value);
  
  // required sint32 m_lChoiceType = 4;
  inline bool has_m_lchoicetype() const;
  inline void clear_m_lchoicetype();
  static const int kMLChoiceTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_lchoicetype() const;
  inline void set_m_lchoicetype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_SelectedCardAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nselect();
  inline void clear_has_m_nselect();
  inline void set_has_m_lcardindex();
  inline void clear_has_m_lcardindex();
  inline void set_has_m_lchoicetype();
  inline void clear_has_m_lchoicetype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nselect_;
  ::google::protobuf::int32 m_lcardindex_;
  ::google::protobuf::int32 m_lchoicetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_SelectedCardAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_DealOpenCard : public ::google::protobuf::Message {
 public:
  MsgSC_DealOpenCard();
  virtual ~MsgSC_DealOpenCard();
  
  MsgSC_DealOpenCard(const MsgSC_DealOpenCard& from);
  
  inline MsgSC_DealOpenCard& operator=(const MsgSC_DealOpenCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_DealOpenCard& default_instance();
  
  void Swap(MsgSC_DealOpenCard* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_DealOpenCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_DealOpenCard& from);
  void MergeFrom(const MsgSC_DealOpenCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lState = 1;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // repeated .Game_Poker.Cards m_tblCard = 2;
  inline int m_tblcard_size() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 2;
  inline const ::Game_Poker::Cards& m_tblcard(int index) const;
  inline ::Game_Poker::Cards* mutable_m_tblcard(int index);
  inline ::Game_Poker::Cards* add_m_tblcard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
      m_tblcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
      mutable_m_tblcard();
  
  // repeated sint32 m_vtState = 3;
  inline int m_vtstate_size() const;
  inline void clear_m_vtstate();
  static const int kMVtStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_vtstate(int index) const;
  inline void set_m_vtstate(int index, ::google::protobuf::int32 value);
  inline void add_m_vtstate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtstate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtstate();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_DealOpenCard)
 private:
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards > m_tblcard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtstate_;
  ::google::protobuf::int32 m_lstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_DealOpenCard* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_DealCard : public ::google::protobuf::Message {
 public:
  MsgSC_DealCard();
  virtual ~MsgSC_DealCard();
  
  MsgSC_DealCard(const MsgSC_DealCard& from);
  
  inline MsgSC_DealCard& operator=(const MsgSC_DealCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_DealCard& default_instance();
  
  void Swap(MsgSC_DealCard* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_DealCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_DealCard& from);
  void MergeFrom(const MsgSC_DealCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBossUSN = 1;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required int32 m_nType = 2;
  inline bool has_m_ntype() const;
  inline void clear_m_ntype();
  static const int kMNTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_ntype() const;
  inline void set_m_ntype(::google::protobuf::int32 value);
  
  // required sint32 m_lCardsDealt = 3;
  inline bool has_m_lcardsdealt() const;
  inline void clear_m_lcardsdealt();
  static const int kMLCardsDealtFieldNumber = 3;
  inline ::google::protobuf::int32 m_lcardsdealt() const;
  inline void set_m_lcardsdealt(::google::protobuf::int32 value);
  
  // repeated .Game_Poker.OneCard m_vtOneCard = 4;
  inline int m_vtonecard_size() const;
  inline void clear_m_vtonecard();
  static const int kMVtOneCardFieldNumber = 4;
  inline const ::Game_Poker::OneCard& m_vtonecard(int index) const;
  inline ::Game_Poker::OneCard* mutable_m_vtonecard(int index);
  inline ::Game_Poker::OneCard* add_m_vtonecard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard >&
      m_vtonecard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard >*
      mutable_m_vtonecard();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_DealCard)
 private:
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_ntype();
  inline void clear_has_m_ntype();
  inline void set_has_m_lcardsdealt();
  inline void clear_has_m_lcardsdealt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int32 m_ntype_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard > m_vtonecard_;
  ::google::protobuf::int32 m_lcardsdealt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_DealCard* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_Boss : public ::google::protobuf::Message {
 public:
  MsgSC_Boss();
  virtual ~MsgSC_Boss();
  
  MsgSC_Boss(const MsgSC_Boss& from);
  
  inline MsgSC_Boss& operator=(const MsgSC_Boss& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_Boss& default_instance();
  
  void Swap(MsgSC_Boss* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_Boss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_Boss& from);
  void MergeFrom(const MsgSC_Boss& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBossUSN = 1;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required int32 m_nBossRank = 2;
  inline bool has_m_nbossrank() const;
  inline void clear_m_nbossrank();
  static const int kMNBossRankFieldNumber = 2;
  inline ::google::protobuf::int32 m_nbossrank() const;
  inline void set_m_nbossrank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_Boss)
 private:
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_nbossrank();
  inline void clear_has_m_nbossrank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int32 m_nbossrank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_Boss* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_Betting : public ::google::protobuf::Message {
 public:
  MsgSC_Betting();
  virtual ~MsgSC_Betting();
  
  MsgSC_Betting(const MsgSC_Betting& from);
  
  inline MsgSC_Betting& operator=(const MsgSC_Betting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_Betting& default_instance();
  
  void Swap(MsgSC_Betting* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_Betting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_Betting& from);
  void MergeFrom(const MsgSC_Betting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBetUSN = 1;
  inline bool has_m_lbetusn() const;
  inline void clear_m_lbetusn();
  static const int kMLBetUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbetusn() const;
  inline void set_m_lbetusn(::google::protobuf::int32 value);
  
  // required sint32 m_lBetBtnType = 2;
  inline bool has_m_lbetbtntype() const;
  inline void clear_m_lbetbtntype();
  static const int kMLBetBtnTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lbetbtntype() const;
  inline void set_m_lbetbtntype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_Betting)
 private:
  inline void set_has_m_lbetusn();
  inline void clear_has_m_lbetusn();
  inline void set_has_m_lbetbtntype();
  inline void clear_has_m_lbetbtntype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbetusn_;
  ::google::protobuf::int32 m_lbetbtntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_Betting* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_BettingAns : public ::google::protobuf::Message {
 public:
  MsgSC_BettingAns();
  virtual ~MsgSC_BettingAns();
  
  MsgSC_BettingAns(const MsgSC_BettingAns& from);
  
  inline MsgSC_BettingAns& operator=(const MsgSC_BettingAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_BettingAns& default_instance();
  
  void Swap(MsgSC_BettingAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_BettingAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_BettingAns& from);
  void MergeFrom(const MsgSC_BettingAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nIndex = 1;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 1;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lBetType = 2;
  inline bool has_m_lbettype() const;
  inline void clear_m_lbettype();
  static const int kMLBetTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lbettype() const;
  inline void set_m_lbettype(::google::protobuf::int32 value);
  
  // required .Game_Poker.Money m_money = 3;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 3;
  inline const ::Game_Poker::Money& m_money() const;
  inline ::Game_Poker::Money* mutable_m_money();
  inline ::Game_Poker::Money* release_m_money();
  
  // repeated .Game_Poker.VecMoney m_vtCallMoney = 4;
  inline int m_vtcallmoney_size() const;
  inline void clear_m_vtcallmoney();
  static const int kMVtCallMoneyFieldNumber = 4;
  inline const ::Game_Poker::VecMoney& m_vtcallmoney(int index) const;
  inline ::Game_Poker::VecMoney* mutable_m_vtcallmoney(int index);
  inline ::Game_Poker::VecMoney* add_m_vtcallmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney >&
      m_vtcallmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney >*
      mutable_m_vtcallmoney();
  
  // required sint64 m_lPoolMoney = 5;
  inline bool has_m_lpoolmoney() const;
  inline void clear_m_lpoolmoney();
  static const int kMLPoolMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_lpoolmoney() const;
  inline void set_m_lpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_BettingAns)
 private:
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lbettype();
  inline void clear_has_m_lbettype();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_lpoolmoney();
  inline void clear_has_m_lpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_lbettype_;
  ::Game_Poker::Money* m_money_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney > m_vtcallmoney_;
  ::google::protobuf::int64 m_lpoolmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_BettingAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_BettingAnsMsg : public ::google::protobuf::Message {
 public:
  MsgSC_BettingAnsMsg();
  virtual ~MsgSC_BettingAnsMsg();
  
  MsgSC_BettingAnsMsg(const MsgSC_BettingAnsMsg& from);
  
  inline MsgSC_BettingAnsMsg& operator=(const MsgSC_BettingAnsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_BettingAnsMsg& default_instance();
  
  void Swap(MsgSC_BettingAnsMsg* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_BettingAnsMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_BettingAnsMsg& from);
  void MergeFrom(const MsgSC_BettingAnsMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_BetType = 3;
  inline bool has_m_bettype() const;
  inline void clear_m_bettype();
  static const int kMBetTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_bettype() const;
  inline void set_m_bettype(::google::protobuf::int32 value);
  
  // required sint32 m_bBettingMoney = 4;
  inline bool has_m_bbettingmoney() const;
  inline void clear_m_bbettingmoney();
  static const int kMBBettingMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 m_bbettingmoney() const;
  inline void set_m_bbettingmoney(::google::protobuf::int32 value);
  
  // required sint32 m_bMoneyLack = 5;
  inline bool has_m_bmoneylack() const;
  inline void clear_m_bmoneylack();
  static const int kMBMoneyLackFieldNumber = 5;
  inline ::google::protobuf::int32 m_bmoneylack() const;
  inline void set_m_bmoneylack(::google::protobuf::int32 value);
  
  // required sint32 m_bCallMoneyZero = 6;
  inline bool has_m_bcallmoneyzero() const;
  inline void clear_m_bcallmoneyzero();
  static const int kMBCallMoneyZeroFieldNumber = 6;
  inline ::google::protobuf::int32 m_bcallmoneyzero() const;
  inline void set_m_bcallmoneyzero(::google::protobuf::int32 value);
  
  // required sint64 m_llCallMoney = 7;
  inline bool has_m_llcallmoney() const;
  inline void clear_m_llcallmoney();
  static const int kMLlCallMoneyFieldNumber = 7;
  inline ::google::protobuf::int64 m_llcallmoney() const;
  inline void set_m_llcallmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llRaiseMoney = 8;
  inline bool has_m_llraisemoney() const;
  inline void clear_m_llraisemoney();
  static const int kMLlRaiseMoneyFieldNumber = 8;
  inline ::google::protobuf::int64 m_llraisemoney() const;
  inline void set_m_llraisemoney(::google::protobuf::int64 value);
  
  // required sint64 m_llSideMoney = 9;
  inline bool has_m_llsidemoney() const;
  inline void clear_m_llsidemoney();
  static const int kMLlSideMoneyFieldNumber = 9;
  inline ::google::protobuf::int64 m_llsidemoney() const;
  inline void set_m_llsidemoney(::google::protobuf::int64 value);
  
  // required sint32 m_lBetType = 10;
  inline bool has_m_lbettype() const;
  inline void clear_m_lbettype();
  static const int kMLBetTypeFieldNumber = 10;
  inline ::google::protobuf::int32 m_lbettype() const;
  inline void set_m_lbettype(::google::protobuf::int32 value);
  
  // required sint32 m_lBetTurn = 11;
  inline bool has_m_lbetturn() const;
  inline void clear_m_lbetturn();
  static const int kMLBetTurnFieldNumber = 11;
  inline ::google::protobuf::int32 m_lbetturn() const;
  inline void set_m_lbetturn(::google::protobuf::int32 value);
  
  // required .Game_Poker.Money m_money = 12;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 12;
  inline const ::Game_Poker::Money& m_money() const;
  inline ::Game_Poker::Money* mutable_m_money();
  inline ::Game_Poker::Money* release_m_money();
  
  // repeated .Game_Poker.VecMoney m_vtCallMoney = 13;
  inline int m_vtcallmoney_size() const;
  inline void clear_m_vtcallmoney();
  static const int kMVtCallMoneyFieldNumber = 13;
  inline const ::Game_Poker::VecMoney& m_vtcallmoney(int index) const;
  inline ::Game_Poker::VecMoney* mutable_m_vtcallmoney(int index);
  inline ::Game_Poker::VecMoney* add_m_vtcallmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney >&
      m_vtcallmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney >*
      mutable_m_vtcallmoney();
  
  // required sint64 m_llPoolMoney = 14;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 14;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_BettingAnsMsg)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_bettype();
  inline void clear_has_m_bettype();
  inline void set_has_m_bbettingmoney();
  inline void clear_has_m_bbettingmoney();
  inline void set_has_m_bmoneylack();
  inline void clear_has_m_bmoneylack();
  inline void set_has_m_bcallmoneyzero();
  inline void clear_has_m_bcallmoneyzero();
  inline void set_has_m_llcallmoney();
  inline void clear_has_m_llcallmoney();
  inline void set_has_m_llraisemoney();
  inline void clear_has_m_llraisemoney();
  inline void set_has_m_llsidemoney();
  inline void clear_has_m_llsidemoney();
  inline void set_has_m_lbettype();
  inline void clear_has_m_lbettype();
  inline void set_has_m_lbetturn();
  inline void clear_has_m_lbetturn();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_bettype_;
  ::google::protobuf::int32 m_bbettingmoney_;
  ::google::protobuf::int32 m_bmoneylack_;
  ::google::protobuf::int32 m_bcallmoneyzero_;
  ::google::protobuf::int64 m_llcallmoney_;
  ::google::protobuf::int64 m_llraisemoney_;
  ::google::protobuf::int64 m_llsidemoney_;
  ::google::protobuf::int32 m_lbettype_;
  ::google::protobuf::int32 m_lbetturn_;
  ::Game_Poker::Money* m_money_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney > m_vtcallmoney_;
  ::google::protobuf::int64 m_llpoolmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_BettingAnsMsg* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_DealHiddenCard : public ::google::protobuf::Message {
 public:
  MsgSC_DealHiddenCard();
  virtual ~MsgSC_DealHiddenCard();
  
  MsgSC_DealHiddenCard(const MsgSC_DealHiddenCard& from);
  
  inline MsgSC_DealHiddenCard& operator=(const MsgSC_DealHiddenCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_DealHiddenCard& default_instance();
  
  void Swap(MsgSC_DealHiddenCard* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_DealHiddenCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_DealHiddenCard& from);
  void MergeFrom(const MsgSC_DealHiddenCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lBossUSN = 1;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required sint32 m_lCardsDealt = 2;
  inline bool has_m_lcardsdealt() const;
  inline void clear_m_lcardsdealt();
  static const int kMLCardsDealtFieldNumber = 2;
  inline ::google::protobuf::int32 m_lcardsdealt() const;
  inline void set_m_lcardsdealt(::google::protobuf::int32 value);
  
  // repeated .Game_Poker.OneCard m_vtOneCard = 3;
  inline int m_vtonecard_size() const;
  inline void clear_m_vtonecard();
  static const int kMVtOneCardFieldNumber = 3;
  inline const ::Game_Poker::OneCard& m_vtonecard(int index) const;
  inline ::Game_Poker::OneCard* mutable_m_vtonecard(int index);
  inline ::Game_Poker::OneCard* add_m_vtonecard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard >&
      m_vtonecard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard >*
      mutable_m_vtonecard();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_DealHiddenCard)
 private:
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_lcardsdealt();
  inline void clear_has_m_lcardsdealt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int32 m_lcardsdealt_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard > m_vtonecard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_DealHiddenCard* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_AnteMoney : public ::google::protobuf::Message {
 public:
  MsgSC_AnteMoney();
  virtual ~MsgSC_AnteMoney();
  
  MsgSC_AnteMoney(const MsgSC_AnteMoney& from);
  
  inline MsgSC_AnteMoney& operator=(const MsgSC_AnteMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_AnteMoney& default_instance();
  
  void Swap(MsgSC_AnteMoney* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_AnteMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_AnteMoney& from);
  void MergeFrom(const MsgSC_AnteMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llAnteMoney = 1;
  inline bool has_m_llantemoney() const;
  inline void clear_m_llantemoney();
  static const int kMLlAnteMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 m_llantemoney() const;
  inline void set_m_llantemoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_AnteMoney)
 private:
  inline void set_has_m_llantemoney();
  inline void clear_has_m_llantemoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llantemoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_AnteMoney* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_RuleQuaterHalf : public ::google::protobuf::Message {
 public:
  MsgSC_RuleQuaterHalf();
  virtual ~MsgSC_RuleQuaterHalf();
  
  MsgSC_RuleQuaterHalf(const MsgSC_RuleQuaterHalf& from);
  
  inline MsgSC_RuleQuaterHalf& operator=(const MsgSC_RuleQuaterHalf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_RuleQuaterHalf& default_instance();
  
  void Swap(MsgSC_RuleQuaterHalf* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_RuleQuaterHalf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_RuleQuaterHalf& from);
  void MergeFrom(const MsgSC_RuleQuaterHalf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llRuleQuaterHalf = 1;
  inline bool has_m_llrulequaterhalf() const;
  inline void clear_m_llrulequaterhalf();
  static const int kMLlRuleQuaterHalfFieldNumber = 1;
  inline ::google::protobuf::int64 m_llrulequaterhalf() const;
  inline void set_m_llrulequaterhalf(::google::protobuf::int64 value);
  
  // required sint64 m_llPoolMoney = 2;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_RuleQuaterHalf)
 private:
  inline void set_has_m_llrulequaterhalf();
  inline void clear_has_m_llrulequaterhalf();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llrulequaterhalf_;
  ::google::protobuf::int64 m_llpoolmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_RuleQuaterHalf* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_Finished : public ::google::protobuf::Message {
 public:
  MsgSC_Finished();
  virtual ~MsgSC_Finished();
  
  MsgSC_Finished(const MsgSC_Finished& from);
  
  inline MsgSC_Finished& operator=(const MsgSC_Finished& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_Finished& default_instance();
  
  void Swap(MsgSC_Finished* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_Finished* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_Finished& from);
  void MergeFrom(const MsgSC_Finished& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lState = 1;
  inline bool has_m_lstate() const;
  inline void clear_m_lstate();
  static const int kMLStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_lstate() const;
  inline void set_m_lstate(::google::protobuf::int32 value);
  
  // required sint32 m_bGiveUp = 2;
  inline bool has_m_bgiveup() const;
  inline void clear_m_bgiveup();
  static const int kMBGiveUpFieldNumber = 2;
  inline ::google::protobuf::int32 m_bgiveup() const;
  inline void set_m_bgiveup(::google::protobuf::int32 value);
  
  // required sint32 m_lRank = 3;
  inline bool has_m_lrank() const;
  inline void clear_m_lrank();
  static const int kMLRankFieldNumber = 3;
  inline ::google::protobuf::int32 m_lrank() const;
  inline void set_m_lrank(::google::protobuf::int32 value);
  
  // required sint32 m_lBossUSN = 4;
  inline bool has_m_lbossusn() const;
  inline void clear_m_lbossusn();
  static const int kMLBossUSNFieldNumber = 4;
  inline ::google::protobuf::int32 m_lbossusn() const;
  inline void set_m_lbossusn(::google::protobuf::int32 value);
  
  // required sint64 m_llGiveMoney = 5;
  inline bool has_m_llgivemoney() const;
  inline void clear_m_llgivemoney();
  static const int kMLlGiveMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_llgivemoney() const;
  inline void set_m_llgivemoney(::google::protobuf::int64 value);
  
  // repeated int32 m_vtWin = 6;
  inline int m_vtwin_size() const;
  inline void clear_m_vtwin();
  static const int kMVtWinFieldNumber = 6;
  inline ::google::protobuf::int32 m_vtwin(int index) const;
  inline void set_m_vtwin(int index, ::google::protobuf::int32 value);
  inline void add_m_vtwin(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtwin() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtwin();
  
  // repeated int32 m_vtResult = 7;
  inline int m_vtresult_size() const;
  inline void clear_m_vtresult();
  static const int kMVtResultFieldNumber = 7;
  inline ::google::protobuf::int32 m_vtresult(int index) const;
  inline void set_m_vtresult(int index, ::google::protobuf::int32 value);
  inline void add_m_vtresult(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vtresult() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vtresult();
  
  // repeated sint64 m_vtGiveMoney = 8;
  inline int m_vtgivemoney_size() const;
  inline void clear_m_vtgivemoney();
  static const int kMVtGiveMoneyFieldNumber = 8;
  inline ::google::protobuf::int64 m_vtgivemoney(int index) const;
  inline void set_m_vtgivemoney(int index, ::google::protobuf::int64 value);
  inline void add_m_vtgivemoney(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      m_vtgivemoney() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_m_vtgivemoney();
  
  // repeated .Game_Poker.Cards m_tblCard = 9;
  inline int m_tblcard_size() const;
  inline void clear_m_tblcard();
  static const int kMTblCardFieldNumber = 9;
  inline const ::Game_Poker::Cards& m_tblcard(int index) const;
  inline ::Game_Poker::Cards* mutable_m_tblcard(int index);
  inline ::Game_Poker::Cards* add_m_tblcard();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
      m_tblcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
      mutable_m_tblcard();
  
  // repeated .Game_Poker.Money m_tblMoney = 10;
  inline int m_tblmoney_size() const;
  inline void clear_m_tblmoney();
  static const int kMTblMoneyFieldNumber = 10;
  inline const ::Game_Poker::Money& m_tblmoney(int index) const;
  inline ::Game_Poker::Money* mutable_m_tblmoney(int index);
  inline ::Game_Poker::Money* add_m_tblmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
      m_tblmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
      mutable_m_tblmoney();
  
  // required sint64 m_llPoolMoney = 11;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
  inline int m_vtusermoney_size() const;
  inline void clear_m_vtusermoney();
  static const int kMVtUserMoneyFieldNumber = 12;
  inline const ::Game_Poker::UserMoney& m_vtusermoney(int index) const;
  inline ::Game_Poker::UserMoney* mutable_m_vtusermoney(int index);
  inline ::Game_Poker::UserMoney* add_m_vtusermoney();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney >&
      m_vtusermoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney >*
      mutable_m_vtusermoney();
  
  // required sint32 m_lResultIdx = 13;
  inline bool has_m_lresultidx() const;
  inline void clear_m_lresultidx();
  static const int kMLResultIdxFieldNumber = 13;
  inline ::google::protobuf::int32 m_lresultidx() const;
  inline void set_m_lresultidx(::google::protobuf::int32 value);
  
  // required sint64 m_llJackpot = 14;
  inline bool has_m_lljackpot() const;
  inline void clear_m_lljackpot();
  static const int kMLlJackpotFieldNumber = 14;
  inline ::google::protobuf::int64 m_lljackpot() const;
  inline void set_m_lljackpot(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_Finished)
 private:
  inline void set_has_m_lstate();
  inline void clear_has_m_lstate();
  inline void set_has_m_bgiveup();
  inline void clear_has_m_bgiveup();
  inline void set_has_m_lrank();
  inline void clear_has_m_lrank();
  inline void set_has_m_lbossusn();
  inline void clear_has_m_lbossusn();
  inline void set_has_m_llgivemoney();
  inline void clear_has_m_llgivemoney();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  inline void set_has_m_lresultidx();
  inline void clear_has_m_lresultidx();
  inline void set_has_m_lljackpot();
  inline void clear_has_m_lljackpot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lstate_;
  ::google::protobuf::int32 m_bgiveup_;
  ::google::protobuf::int32 m_lrank_;
  ::google::protobuf::int32 m_lbossusn_;
  ::google::protobuf::int64 m_llgivemoney_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtwin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vtresult_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > m_vtgivemoney_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards > m_tblcard_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money > m_tblmoney_;
  ::google::protobuf::int64 m_llpoolmoney_;
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney > m_vtusermoney_;
  ::google::protobuf::int64 m_lljackpot_;
  ::google::protobuf::int32 m_lresultidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_Finished* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_NewGame : public ::google::protobuf::Message {
 public:
  MsgSC_NewGame();
  virtual ~MsgSC_NewGame();
  
  MsgSC_NewGame(const MsgSC_NewGame& from);
  
  inline MsgSC_NewGame& operator=(const MsgSC_NewGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_NewGame& default_instance();
  
  void Swap(MsgSC_NewGame* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_NewGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_NewGame& from);
  void MergeFrom(const MsgSC_NewGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
  inline int m_vtwinloseinfo_size() const;
  inline void clear_m_vtwinloseinfo();
  static const int kMVtWinLoseInfoFieldNumber = 1;
  inline const ::Game_Poker::WinLoseInfo& m_vtwinloseinfo(int index) const;
  inline ::Game_Poker::WinLoseInfo* mutable_m_vtwinloseinfo(int index);
  inline ::Game_Poker::WinLoseInfo* add_m_vtwinloseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo >&
      m_vtwinloseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo >*
      mutable_m_vtwinloseinfo();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_NewGame)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo > m_vtwinloseinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_NewGame* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_ContinueAns : public ::google::protobuf::Message {
 public:
  MsgSC_ContinueAns();
  virtual ~MsgSC_ContinueAns();
  
  MsgSC_ContinueAns(const MsgSC_ContinueAns& from);
  
  inline MsgSC_ContinueAns& operator=(const MsgSC_ContinueAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_ContinueAns& default_instance();
  
  void Swap(MsgSC_ContinueAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_ContinueAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_ContinueAns& from);
  void MergeFrom(const MsgSC_ContinueAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_ContinueAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_ContinueAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_Continue : public ::google::protobuf::Message {
 public:
  MsgSC_Continue();
  virtual ~MsgSC_Continue();
  
  MsgSC_Continue(const MsgSC_Continue& from);
  
  inline MsgSC_Continue& operator=(const MsgSC_Continue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_Continue& default_instance();
  
  void Swap(MsgSC_Continue* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_Continue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_Continue& from);
  void MergeFrom(const MsgSC_Continue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
  inline int m_vtwinloseinfo_size() const;
  inline void clear_m_vtwinloseinfo();
  static const int kMVtWinLoseInfoFieldNumber = 1;
  inline const ::Game_Poker::WinLoseInfo& m_vtwinloseinfo(int index) const;
  inline ::Game_Poker::WinLoseInfo* mutable_m_vtwinloseinfo(int index);
  inline ::Game_Poker::WinLoseInfo* add_m_vtwinloseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo >&
      m_vtwinloseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo >*
      mutable_m_vtwinloseinfo();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_Continue)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo > m_vtwinloseinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_Continue* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_SystemMsg : public ::google::protobuf::Message {
 public:
  MsgSC_SystemMsg();
  virtual ~MsgSC_SystemMsg();
  
  MsgSC_SystemMsg(const MsgSC_SystemMsg& from);
  
  inline MsgSC_SystemMsg& operator=(const MsgSC_SystemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_SystemMsg& default_instance();
  
  void Swap(MsgSC_SystemMsg* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_SystemMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_SystemMsg& from);
  void MergeFrom(const MsgSC_SystemMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_SystemMsg)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_SystemMsg* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_PurgeAns : public ::google::protobuf::Message {
 public:
  MsgSC_PurgeAns();
  virtual ~MsgSC_PurgeAns();
  
  MsgSC_PurgeAns(const MsgSC_PurgeAns& from);
  
  inline MsgSC_PurgeAns& operator=(const MsgSC_PurgeAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_PurgeAns& default_instance();
  
  void Swap(MsgSC_PurgeAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_PurgeAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_PurgeAns& from);
  void MergeFrom(const MsgSC_PurgeAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_PurgeAns)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_PurgeAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_PurgeInfo : public ::google::protobuf::Message {
 public:
  MsgSC_PurgeInfo();
  virtual ~MsgSC_PurgeInfo();
  
  MsgSC_PurgeInfo(const MsgSC_PurgeInfo& from);
  
  inline MsgSC_PurgeInfo& operator=(const MsgSC_PurgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_PurgeInfo& default_instance();
  
  void Swap(MsgSC_PurgeInfo* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_PurgeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_PurgeInfo& from);
  void MergeFrom(const MsgSC_PurgeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Game_Poker.VecUSN m_vtPurgeUSN = 1;
  inline int m_vtpurgeusn_size() const;
  inline void clear_m_vtpurgeusn();
  static const int kMVtPurgeUSNFieldNumber = 1;
  inline const ::Game_Poker::VecUSN& m_vtpurgeusn(int index) const;
  inline ::Game_Poker::VecUSN* mutable_m_vtpurgeusn(int index);
  inline ::Game_Poker::VecUSN* add_m_vtpurgeusn();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecUSN >&
      m_vtpurgeusn() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecUSN >*
      mutable_m_vtpurgeusn();
  
  // required int32 m_nCount = 2;
  inline bool has_m_ncount() const;
  inline void clear_m_ncount();
  static const int kMNCountFieldNumber = 2;
  inline ::google::protobuf::int32 m_ncount() const;
  inline void set_m_ncount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_PurgeInfo)
 private:
  inline void set_has_m_ncount();
  inline void clear_has_m_ncount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecUSN > m_vtpurgeusn_;
  ::google::protobuf::int32 m_ncount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_PurgeInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_SetPurgeMoney : public ::google::protobuf::Message {
 public:
  MsgSC_SetPurgeMoney();
  virtual ~MsgSC_SetPurgeMoney();
  
  MsgSC_SetPurgeMoney(const MsgSC_SetPurgeMoney& from);
  
  inline MsgSC_SetPurgeMoney& operator=(const MsgSC_SetPurgeMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_SetPurgeMoney& default_instance();
  
  void Swap(MsgSC_SetPurgeMoney* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_SetPurgeMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_SetPurgeMoney& from);
  void MergeFrom(const MsgSC_SetPurgeMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required .Game_Poker.Money m_money = 2;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 2;
  inline const ::Game_Poker::Money& m_money() const;
  inline ::Game_Poker::Money* mutable_m_money();
  inline ::Game_Poker::Money* release_m_money();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_SetPurgeMoney)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Game_Poker::Money* m_money_;
  ::google::protobuf::int32 m_lusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_SetPurgeMoney* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_AssaItemNotify : public ::google::protobuf::Message {
 public:
  MsgSC_AssaItemNotify();
  virtual ~MsgSC_AssaItemNotify();
  
  MsgSC_AssaItemNotify(const MsgSC_AssaItemNotify& from);
  
  inline MsgSC_AssaItemNotify& operator=(const MsgSC_AssaItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_AssaItemNotify& default_instance();
  
  void Swap(MsgSC_AssaItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_AssaItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_AssaItemNotify& from);
  void MergeFrom(const MsgSC_AssaItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lRankType = 2;
  inline bool has_m_lranktype() const;
  inline void clear_m_lranktype();
  static const int kMLRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lranktype() const;
  inline void set_m_lranktype(::google::protobuf::int32 value);
  
  // required string m_sItem = 3;
  inline bool has_m_sitem() const;
  inline void clear_m_sitem();
  static const int kMSItemFieldNumber = 3;
  inline const ::std::string& m_sitem() const;
  inline void set_m_sitem(const ::std::string& value);
  inline void set_m_sitem(const char* value);
  inline void set_m_sitem(const char* value, size_t size);
  inline ::std::string* mutable_m_sitem();
  inline ::std::string* release_m_sitem();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_AssaItemNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lranktype();
  inline void clear_has_m_lranktype();
  inline void set_has_m_sitem();
  inline void clear_has_m_sitem();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lranktype_;
  ::std::string* m_sitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_AssaItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_ThankYouItemNotify : public ::google::protobuf::Message {
 public:
  MsgSC_ThankYouItemNotify();
  virtual ~MsgSC_ThankYouItemNotify();
  
  MsgSC_ThankYouItemNotify(const MsgSC_ThankYouItemNotify& from);
  
  inline MsgSC_ThankYouItemNotify& operator=(const MsgSC_ThankYouItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_ThankYouItemNotify& default_instance();
  
  void Swap(MsgSC_ThankYouItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_ThankYouItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_ThankYouItemNotify& from);
  void MergeFrom(const MsgSC_ThankYouItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lRankType = 2;
  inline bool has_m_lranktype() const;
  inline void clear_m_lranktype();
  static const int kMLRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lranktype() const;
  inline void set_m_lranktype(::google::protobuf::int32 value);
  
  // required sint64 m_llBasicDDangMoney = 3;
  inline bool has_m_llbasicddangmoney() const;
  inline void clear_m_llbasicddangmoney();
  static const int kMLlBasicDDangMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llbasicddangmoney() const;
  inline void set_m_llbasicddangmoney(::google::protobuf::int64 value);
  
  // required string m_sItem = 4;
  inline bool has_m_sitem() const;
  inline void clear_m_sitem();
  static const int kMSItemFieldNumber = 4;
  inline const ::std::string& m_sitem() const;
  inline void set_m_sitem(const ::std::string& value);
  inline void set_m_sitem(const char* value);
  inline void set_m_sitem(const char* value, size_t size);
  inline ::std::string* mutable_m_sitem();
  inline ::std::string* release_m_sitem();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_ThankYouItemNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lranktype();
  inline void clear_has_m_lranktype();
  inline void set_has_m_llbasicddangmoney();
  inline void clear_has_m_llbasicddangmoney();
  inline void set_has_m_sitem();
  inline void clear_has_m_sitem();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lranktype_;
  ::google::protobuf::int64 m_llbasicddangmoney_;
  ::std::string* m_sitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_ThankYouItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_MadeItemNotify : public ::google::protobuf::Message {
 public:
  MsgSC_MadeItemNotify();
  virtual ~MsgSC_MadeItemNotify();
  
  MsgSC_MadeItemNotify(const MsgSC_MadeItemNotify& from);
  
  inline MsgSC_MadeItemNotify& operator=(const MsgSC_MadeItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_MadeItemNotify& default_instance();
  
  void Swap(MsgSC_MadeItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_MadeItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_MadeItemNotify& from);
  void MergeFrom(const MsgSC_MadeItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_lRankType = 2;
  inline bool has_m_lranktype() const;
  inline void clear_m_lranktype();
  static const int kMLRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lranktype() const;
  inline void set_m_lranktype(::google::protobuf::int32 value);
  
  // required string m_sItem = 3;
  inline bool has_m_sitem() const;
  inline void clear_m_sitem();
  static const int kMSItemFieldNumber = 3;
  inline const ::std::string& m_sitem() const;
  inline void set_m_sitem(const ::std::string& value);
  inline void set_m_sitem(const char* value);
  inline void set_m_sitem(const char* value, size_t size);
  inline ::std::string* mutable_m_sitem();
  inline ::std::string* release_m_sitem();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_MadeItemNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lranktype();
  inline void clear_has_m_lranktype();
  inline void set_has_m_sitem();
  inline void clear_has_m_sitem();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_lranktype_;
  ::std::string* m_sitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_MadeItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_ExtMoneyNotify : public ::google::protobuf::Message {
 public:
  MsgSC_ExtMoneyNotify();
  virtual ~MsgSC_ExtMoneyNotify();
  
  MsgSC_ExtMoneyNotify(const MsgSC_ExtMoneyNotify& from);
  
  inline MsgSC_ExtMoneyNotify& operator=(const MsgSC_ExtMoneyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_ExtMoneyNotify& default_instance();
  
  void Swap(MsgSC_ExtMoneyNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_ExtMoneyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_ExtMoneyNotify& from);
  void MergeFrom(const MsgSC_ExtMoneyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_bExtType = 2;
  inline bool has_m_bexttype() const;
  inline void clear_m_bexttype();
  static const int kMBExtTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_bexttype() const;
  inline void set_m_bexttype(::google::protobuf::int32 value);
  
  // required sint64 m_llCMoney = 3;
  inline bool has_m_llcmoney() const;
  inline void clear_m_llcmoney();
  static const int kMLlCMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llcmoney() const;
  inline void set_m_llcmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llCashBox = 4;
  inline bool has_m_llcashbox() const;
  inline void clear_m_llcashbox();
  static const int kMLlCashBoxFieldNumber = 4;
  inline ::google::protobuf::int64 m_llcashbox() const;
  inline void set_m_llcashbox(::google::protobuf::int64 value);
  
  // required sint64 m_llExtMoney = 5;
  inline bool has_m_llextmoney() const;
  inline void clear_m_llextmoney();
  static const int kMLlExtMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 m_llextmoney() const;
  inline void set_m_llextmoney(::google::protobuf::int64 value);
  
  // required sint64 m_llExtDate = 6;
  inline bool has_m_llextdate() const;
  inline void clear_m_llextdate();
  static const int kMLlExtDateFieldNumber = 6;
  inline ::google::protobuf::int64 m_llextdate() const;
  inline void set_m_llextdate(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_ExtMoneyNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_bexttype();
  inline void clear_has_m_bexttype();
  inline void set_has_m_llcmoney();
  inline void clear_has_m_llcmoney();
  inline void set_has_m_llcashbox();
  inline void clear_has_m_llcashbox();
  inline void set_has_m_llextmoney();
  inline void clear_has_m_llextmoney();
  inline void set_has_m_llextdate();
  inline void clear_has_m_llextdate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_bexttype_;
  ::google::protobuf::int64 m_llcmoney_;
  ::google::protobuf::int64 m_llcashbox_;
  ::google::protobuf::int64 m_llextmoney_;
  ::google::protobuf::int64 m_llextdate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_ExtMoneyNotify* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_GameEndSystemMsg : public ::google::protobuf::Message {
 public:
  MsgSC_GameEndSystemMsg();
  virtual ~MsgSC_GameEndSystemMsg();
  
  MsgSC_GameEndSystemMsg(const MsgSC_GameEndSystemMsg& from);
  
  inline MsgSC_GameEndSystemMsg& operator=(const MsgSC_GameEndSystemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_GameEndSystemMsg& default_instance();
  
  void Swap(MsgSC_GameEndSystemMsg* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_GameEndSystemMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_GameEndSystemMsg& from);
  void MergeFrom(const MsgSC_GameEndSystemMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lType = 1;
  inline bool has_m_ltype() const;
  inline void clear_m_ltype();
  static const int kMLTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_ltype() const;
  inline void set_m_ltype(::google::protobuf::int32 value);
  
  // required sint32 m_lUSN = 2;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 2;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint32 m_bGiveUp = 3;
  inline bool has_m_bgiveup() const;
  inline void clear_m_bgiveup();
  static const int kMBGiveUpFieldNumber = 3;
  inline ::google::protobuf::int32 m_bgiveup() const;
  inline void set_m_bgiveup(::google::protobuf::int32 value);
  
  // required sint64 m_llMoney = 4;
  inline bool has_m_llmoney() const;
  inline void clear_m_llmoney();
  static const int kMLlMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 m_llmoney() const;
  inline void set_m_llmoney(::google::protobuf::int64 value);
  
  // required string m_sMsg = 5;
  inline bool has_m_smsg() const;
  inline void clear_m_smsg();
  static const int kMSMsgFieldNumber = 5;
  inline const ::std::string& m_smsg() const;
  inline void set_m_smsg(const ::std::string& value);
  inline void set_m_smsg(const char* value);
  inline void set_m_smsg(const char* value, size_t size);
  inline ::std::string* mutable_m_smsg();
  inline ::std::string* release_m_smsg();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_GameEndSystemMsg)
 private:
  inline void set_has_m_ltype();
  inline void clear_has_m_ltype();
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_bgiveup();
  inline void clear_has_m_bgiveup();
  inline void set_has_m_llmoney();
  inline void clear_has_m_llmoney();
  inline void set_has_m_smsg();
  inline void clear_has_m_smsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_ltype_;
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int64 m_llmoney_;
  ::std::string* m_smsg_;
  ::google::protobuf::int32 m_bgiveup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_GameEndSystemMsg* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_ChangeAvatarNotify : public ::google::protobuf::Message {
 public:
  MsgSC_ChangeAvatarNotify();
  virtual ~MsgSC_ChangeAvatarNotify();
  
  MsgSC_ChangeAvatarNotify(const MsgSC_ChangeAvatarNotify& from);
  
  inline MsgSC_ChangeAvatarNotify& operator=(const MsgSC_ChangeAvatarNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_ChangeAvatarNotify& default_instance();
  
  void Swap(MsgSC_ChangeAvatarNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_ChangeAvatarNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_ChangeAvatarNotify& from);
  void MergeFrom(const MsgSC_ChangeAvatarNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required .Game_Poker.UserInfo m_uinfo = 3;
  inline bool has_m_uinfo() const;
  inline void clear_m_uinfo();
  static const int kMUinfoFieldNumber = 3;
  inline const ::Game_Poker::UserInfo& m_uinfo() const;
  inline ::Game_Poker::UserInfo* mutable_m_uinfo();
  inline ::Game_Poker::UserInfo* release_m_uinfo();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_ChangeAvatarNotify)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_uinfo();
  inline void clear_has_m_uinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::Game_Poker::UserInfo* m_uinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_ChangeAvatarNotify* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_AbuseAns : public ::google::protobuf::Message {
 public:
  MsgSC_AbuseAns();
  virtual ~MsgSC_AbuseAns();
  
  MsgSC_AbuseAns(const MsgSC_AbuseAns& from);
  
  inline MsgSC_AbuseAns& operator=(const MsgSC_AbuseAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_AbuseAns& default_instance();
  
  void Swap(MsgSC_AbuseAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_AbuseAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_AbuseAns& from);
  void MergeFrom(const MsgSC_AbuseAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_AbuseAns)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_AbuseAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_SoundTypeAns : public ::google::protobuf::Message {
 public:
  MsgSC_SoundTypeAns();
  virtual ~MsgSC_SoundTypeAns();
  
  MsgSC_SoundTypeAns(const MsgSC_SoundTypeAns& from);
  
  inline MsgSC_SoundTypeAns& operator=(const MsgSC_SoundTypeAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_SoundTypeAns& default_instance();
  
  void Swap(MsgSC_SoundTypeAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_SoundTypeAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_SoundTypeAns& from);
  void MergeFrom(const MsgSC_SoundTypeAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lSoundType = 3;
  inline bool has_m_lsoundtype() const;
  inline void clear_m_lsoundtype();
  static const int kMLSoundTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_lsoundtype() const;
  inline void set_m_lsoundtype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_SoundTypeAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lsoundtype();
  inline void clear_has_m_lsoundtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_lsoundtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_SoundTypeAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_FMoney : public ::google::protobuf::Message {
 public:
  MsgSC_FMoney();
  virtual ~MsgSC_FMoney();
  
  MsgSC_FMoney(const MsgSC_FMoney& from);
  
  inline MsgSC_FMoney& operator=(const MsgSC_FMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_FMoney& default_instance();
  
  void Swap(MsgSC_FMoney* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_FMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_FMoney& from);
  void MergeFrom(const MsgSC_FMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string m_sFMoney = 1;
  inline bool has_m_sfmoney() const;
  inline void clear_m_sfmoney();
  static const int kMSFMoneyFieldNumber = 1;
  inline const ::std::string& m_sfmoney() const;
  inline void set_m_sfmoney(const ::std::string& value);
  inline void set_m_sfmoney(const char* value);
  inline void set_m_sfmoney(const char* value, size_t size);
  inline ::std::string* mutable_m_sfmoney();
  inline ::std::string* release_m_sfmoney();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_FMoney)
 private:
  inline void set_has_m_sfmoney();
  inline void clear_has_m_sfmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_sfmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_FMoney* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_ItemNotify : public ::google::protobuf::Message {
 public:
  MsgSC_ItemNotify();
  virtual ~MsgSC_ItemNotify();
  
  MsgSC_ItemNotify(const MsgSC_ItemNotify& from);
  
  inline MsgSC_ItemNotify& operator=(const MsgSC_ItemNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_ItemNotify& default_instance();
  
  void Swap(MsgSC_ItemNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_ItemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_ItemNotify& from);
  void MergeFrom(const MsgSC_ItemNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lLimitTotalCnt = 1;
  inline bool has_m_llimittotalcnt() const;
  inline void clear_m_llimittotalcnt();
  static const int kMLLimitTotalCntFieldNumber = 1;
  inline ::google::protobuf::int32 m_llimittotalcnt() const;
  inline void set_m_llimittotalcnt(::google::protobuf::int32 value);
  
  // required sint32 m_lLimitTodayCnt = 2;
  inline bool has_m_llimittodaycnt() const;
  inline void clear_m_llimittodaycnt();
  static const int kMLLimitTodayCntFieldNumber = 2;
  inline ::google::protobuf::int32 m_llimittodaycnt() const;
  inline void set_m_llimittodaycnt(::google::protobuf::int32 value);
  
  // required sint32 m_bInfinitySpeedItem = 3;
  inline bool has_m_binfinityspeeditem() const;
  inline void clear_m_binfinityspeeditem();
  static const int kMBInfinitySpeedItemFieldNumber = 3;
  inline ::google::protobuf::int32 m_binfinityspeeditem() const;
  inline void set_m_binfinityspeeditem(::google::protobuf::int32 value);
  
  // required sint64 m_llSpeedToTime = 4;
  inline bool has_m_llspeedtotime() const;
  inline void clear_m_llspeedtotime();
  static const int kMLlSpeedToTimeFieldNumber = 4;
  inline ::google::protobuf::int64 m_llspeedtotime() const;
  inline void set_m_llspeedtotime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_ItemNotify)
 private:
  inline void set_has_m_llimittotalcnt();
  inline void clear_has_m_llimittotalcnt();
  inline void set_has_m_llimittodaycnt();
  inline void clear_has_m_llimittodaycnt();
  inline void set_has_m_binfinityspeeditem();
  inline void clear_has_m_binfinityspeeditem();
  inline void set_has_m_llspeedtotime();
  inline void clear_has_m_llspeedtotime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_llimittotalcnt_;
  ::google::protobuf::int32 m_llimittodaycnt_;
  ::google::protobuf::int64 m_llspeedtotime_;
  ::google::protobuf::int32 m_binfinityspeeditem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_ItemNotify* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_DisconnectMoneyNotify : public ::google::protobuf::Message {
 public:
  MsgSC_DisconnectMoneyNotify();
  virtual ~MsgSC_DisconnectMoneyNotify();
  
  MsgSC_DisconnectMoneyNotify(const MsgSC_DisconnectMoneyNotify& from);
  
  inline MsgSC_DisconnectMoneyNotify& operator=(const MsgSC_DisconnectMoneyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_DisconnectMoneyNotify& default_instance();
  
  void Swap(MsgSC_DisconnectMoneyNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_DisconnectMoneyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_DisconnectMoneyNotify& from);
  void MergeFrom(const MsgSC_DisconnectMoneyNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string m_sNickName = 1;
  inline bool has_m_snickname() const;
  inline void clear_m_snickname();
  static const int kMSNickNameFieldNumber = 1;
  inline const ::std::string& m_snickname() const;
  inline void set_m_snickname(const ::std::string& value);
  inline void set_m_snickname(const char* value);
  inline void set_m_snickname(const char* value, size_t size);
  inline ::std::string* mutable_m_snickname();
  inline ::std::string* release_m_snickname();
  
  // required sint64 m_llDisconnectMoney = 2;
  inline bool has_m_lldisconnectmoney() const;
  inline void clear_m_lldisconnectmoney();
  static const int kMLlDisconnectMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_lldisconnectmoney() const;
  inline void set_m_lldisconnectmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_DisconnectMoneyNotify)
 private:
  inline void set_has_m_snickname();
  inline void clear_has_m_snickname();
  inline void set_has_m_lldisconnectmoney();
  inline void clear_has_m_lldisconnectmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_snickname_;
  ::google::protobuf::int64 m_lldisconnectmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_DisconnectMoneyNotify* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_ExitNtf : public ::google::protobuf::Message {
 public:
  MsgSC_ExitNtf();
  virtual ~MsgSC_ExitNtf();
  
  MsgSC_ExitNtf(const MsgSC_ExitNtf& from);
  
  inline MsgSC_ExitNtf& operator=(const MsgSC_ExitNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_ExitNtf& default_instance();
  
  void Swap(MsgSC_ExitNtf* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_ExitNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_ExitNtf& from);
  void MergeFrom(const MsgSC_ExitNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);
  
  // required sint32 m_lExit = 3;
  inline bool has_m_lexit() const;
  inline void clear_m_lexit();
  static const int kMLExitFieldNumber = 3;
  inline ::google::protobuf::int32 m_lexit() const;
  inline void set_m_lexit(::google::protobuf::int32 value);
  
  // required sint32 m_bExit = 4;
  inline bool has_m_bexit() const;
  inline void clear_m_bexit();
  static const int kMBExitFieldNumber = 4;
  inline ::google::protobuf::int32 m_bexit() const;
  inline void set_m_bexit(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_ExitNtf)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_lexit();
  inline void clear_has_m_lexit();
  inline void set_has_m_bexit();
  inline void clear_has_m_bexit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nindex_;
  ::google::protobuf::int32 m_lexit_;
  ::google::protobuf::int32 m_bexit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_ExitNtf* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_RematchOKAns : public ::google::protobuf::Message {
 public:
  MsgSC_RematchOKAns();
  virtual ~MsgSC_RematchOKAns();
  
  MsgSC_RematchOKAns(const MsgSC_RematchOKAns& from);
  
  inline MsgSC_RematchOKAns& operator=(const MsgSC_RematchOKAns& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_RematchOKAns& default_instance();
  
  void Swap(MsgSC_RematchOKAns* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_RematchOKAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_RematchOKAns& from);
  void MergeFrom(const MsgSC_RematchOKAns& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint64 m_llPoolMoney = 2;
  inline bool has_m_llpoolmoney() const;
  inline void clear_m_llpoolmoney();
  static const int kMLlPoolMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_llpoolmoney() const;
  inline void set_m_llpoolmoney(::google::protobuf::int64 value);
  
  // required .Game_Poker.Money m_money = 3;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 3;
  inline const ::Game_Poker::Money& m_money() const;
  inline ::Game_Poker::Money* mutable_m_money();
  inline ::Game_Poker::Money* release_m_money();
  
  // required sint32 m_bRematchOK = 4;
  inline bool has_m_brematchok() const;
  inline void clear_m_brematchok();
  static const int kMBRematchOKFieldNumber = 4;
  inline ::google::protobuf::int32 m_brematchok() const;
  inline void set_m_brematchok(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_RematchOKAns)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_llpoolmoney();
  inline void clear_has_m_llpoolmoney();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_brematchok();
  inline void clear_has_m_brematchok();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llpoolmoney_;
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_brematchok_;
  ::Game_Poker::Money* m_money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_RematchOKAns* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_RuleNotify : public ::google::protobuf::Message {
 public:
  MsgSC_RuleNotify();
  virtual ~MsgSC_RuleNotify();
  
  MsgSC_RuleNotify(const MsgSC_RuleNotify& from);
  
  inline MsgSC_RuleNotify& operator=(const MsgSC_RuleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_RuleNotify& default_instance();
  
  void Swap(MsgSC_RuleNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_RuleNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_RuleNotify& from);
  void MergeFrom(const MsgSC_RuleNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nRuleIdx = 1;
  inline bool has_m_nruleidx() const;
  inline void clear_m_nruleidx();
  static const int kMNRuleIdxFieldNumber = 1;
  inline ::google::protobuf::int32 m_nruleidx() const;
  inline void set_m_nruleidx(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_RuleNotify)
 private:
  inline void set_has_m_nruleidx();
  inline void clear_has_m_nruleidx();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nruleidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_RuleNotify* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_AllowEntryWaitingUser : public ::google::protobuf::Message {
 public:
  MsgSC_AllowEntryWaitingUser();
  virtual ~MsgSC_AllowEntryWaitingUser();
  
  MsgSC_AllowEntryWaitingUser(const MsgSC_AllowEntryWaitingUser& from);
  
  inline MsgSC_AllowEntryWaitingUser& operator=(const MsgSC_AllowEntryWaitingUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_AllowEntryWaitingUser& default_instance();
  
  void Swap(MsgSC_AllowEntryWaitingUser* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_AllowEntryWaitingUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_AllowEntryWaitingUser& from);
  void MergeFrom(const MsgSC_AllowEntryWaitingUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_AllowEntryWaitingUser)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_AllowEntryWaitingUser* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_AllWaitingUserDataNtf : public ::google::protobuf::Message {
 public:
  MsgSC_AllWaitingUserDataNtf();
  virtual ~MsgSC_AllWaitingUserDataNtf();
  
  MsgSC_AllWaitingUserDataNtf(const MsgSC_AllWaitingUserDataNtf& from);
  
  inline MsgSC_AllWaitingUserDataNtf& operator=(const MsgSC_AllWaitingUserDataNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_AllWaitingUserDataNtf& default_instance();
  
  void Swap(MsgSC_AllWaitingUserDataNtf* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_AllWaitingUserDataNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_AllWaitingUserDataNtf& from);
  void MergeFrom(const MsgSC_AllWaitingUserDataNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_bSendWaitingUser = 1;
  inline bool has_m_bsendwaitinguser() const;
  inline void clear_m_bsendwaitinguser();
  static const int kMBSendWaitingUserFieldNumber = 1;
  inline ::google::protobuf::int32 m_bsendwaitinguser() const;
  inline void set_m_bsendwaitinguser(::google::protobuf::int32 value);
  
  // repeated .Game_Poker.WAITINGUSERDATA m_WaitingUserData = 2;
  inline int m_waitinguserdata_size() const;
  inline void clear_m_waitinguserdata();
  static const int kMWaitingUserDataFieldNumber = 2;
  inline const ::Game_Poker::WAITINGUSERDATA& m_waitinguserdata(int index) const;
  inline ::Game_Poker::WAITINGUSERDATA* mutable_m_waitinguserdata(int index);
  inline ::Game_Poker::WAITINGUSERDATA* add_m_waitinguserdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::WAITINGUSERDATA >&
      m_waitinguserdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::WAITINGUSERDATA >*
      mutable_m_waitinguserdata();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_AllWaitingUserDataNtf)
 private:
  inline void set_has_m_bsendwaitinguser();
  inline void clear_has_m_bsendwaitinguser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Game_Poker::WAITINGUSERDATA > m_waitinguserdata_;
  ::google::protobuf::int32 m_bsendwaitinguser_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_AllWaitingUserDataNtf* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_UserDataChangeNtf : public ::google::protobuf::Message {
 public:
  MsgSC_UserDataChangeNtf();
  virtual ~MsgSC_UserDataChangeNtf();
  
  MsgSC_UserDataChangeNtf(const MsgSC_UserDataChangeNtf& from);
  
  inline MsgSC_UserDataChangeNtf& operator=(const MsgSC_UserDataChangeNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_UserDataChangeNtf& default_instance();
  
  void Swap(MsgSC_UserDataChangeNtf* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_UserDataChangeNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_UserDataChangeNtf& from);
  void MergeFrom(const MsgSC_UserDataChangeNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Game_Poker.RCUserData m_userData = 1;
  inline bool has_m_userdata() const;
  inline void clear_m_userdata();
  static const int kMUserDataFieldNumber = 1;
  inline const ::Game_Poker::RCUserData& m_userdata() const;
  inline ::Game_Poker::RCUserData* mutable_m_userdata();
  inline ::Game_Poker::RCUserData* release_m_userdata();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_UserDataChangeNtf)
 private:
  inline void set_has_m_userdata();
  inline void clear_has_m_userdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Game_Poker::RCUserData* m_userdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_UserDataChangeNtf* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_RefillMoneyNtf : public ::google::protobuf::Message {
 public:
  MsgSC_RefillMoneyNtf();
  virtual ~MsgSC_RefillMoneyNtf();
  
  MsgSC_RefillMoneyNtf(const MsgSC_RefillMoneyNtf& from);
  
  inline MsgSC_RefillMoneyNtf& operator=(const MsgSC_RefillMoneyNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_RefillMoneyNtf& default_instance();
  
  void Swap(MsgSC_RefillMoneyNtf* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_RefillMoneyNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_RefillMoneyNtf& from);
  void MergeFrom(const MsgSC_RefillMoneyNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nRefillCnt = 2;
  inline bool has_m_nrefillcnt() const;
  inline void clear_m_nrefillcnt();
  static const int kMNRefillCntFieldNumber = 2;
  inline ::google::protobuf::int32 m_nrefillcnt() const;
  inline void set_m_nrefillcnt(::google::protobuf::int32 value);
  
  // required sint64 m_llRefillMoney = 3;
  inline bool has_m_llrefillmoney() const;
  inline void clear_m_llrefillmoney();
  static const int kMLlRefillMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llrefillmoney() const;
  inline void set_m_llrefillmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_RefillMoneyNtf)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nrefillcnt();
  inline void clear_has_m_nrefillcnt();
  inline void set_has_m_llrefillmoney();
  inline void clear_has_m_llrefillmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nrefillcnt_;
  ::google::protobuf::int64 m_llrefillmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_RefillMoneyNtf* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_JackpotMoneyNtf : public ::google::protobuf::Message {
 public:
  MsgSC_JackpotMoneyNtf();
  virtual ~MsgSC_JackpotMoneyNtf();
  
  MsgSC_JackpotMoneyNtf(const MsgSC_JackpotMoneyNtf& from);
  
  inline MsgSC_JackpotMoneyNtf& operator=(const MsgSC_JackpotMoneyNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_JackpotMoneyNtf& default_instance();
  
  void Swap(MsgSC_JackpotMoneyNtf* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_JackpotMoneyNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_JackpotMoneyNtf& from);
  void MergeFrom(const MsgSC_JackpotMoneyNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required sint64 m_llJackpotMoney = 2;
  inline bool has_m_lljackpotmoney() const;
  inline void clear_m_lljackpotmoney();
  static const int kMLlJackpotMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 m_lljackpotmoney() const;
  inline void set_m_lljackpotmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_JackpotMoneyNtf)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_lljackpotmoney();
  inline void clear_has_m_lljackpotmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_lljackpotmoney_;
  ::google::protobuf::int32 m_lusn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_JackpotMoneyNtf* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_GuardianAngelMoney : public ::google::protobuf::Message {
 public:
  MsgSC_GuardianAngelMoney();
  virtual ~MsgSC_GuardianAngelMoney();
  
  MsgSC_GuardianAngelMoney(const MsgSC_GuardianAngelMoney& from);
  
  inline MsgSC_GuardianAngelMoney& operator=(const MsgSC_GuardianAngelMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_GuardianAngelMoney& default_instance();
  
  void Swap(MsgSC_GuardianAngelMoney* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_GuardianAngelMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_GuardianAngelMoney& from);
  void MergeFrom(const MsgSC_GuardianAngelMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lUSN = 1;
  inline bool has_m_lusn() const;
  inline void clear_m_lusn();
  static const int kMLUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lusn() const;
  inline void set_m_lusn(::google::protobuf::int32 value);
  
  // required int32 m_nGuardianAngelCnt = 2;
  inline bool has_m_nguardianangelcnt() const;
  inline void clear_m_nguardianangelcnt();
  static const int kMNGuardianAngelCntFieldNumber = 2;
  inline ::google::protobuf::int32 m_nguardianangelcnt() const;
  inline void set_m_nguardianangelcnt(::google::protobuf::int32 value);
  
  // required sint64 m_llAngelMoney = 3;
  inline bool has_m_llangelmoney() const;
  inline void clear_m_llangelmoney();
  static const int kMLlAngelMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 m_llangelmoney() const;
  inline void set_m_llangelmoney(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_GuardianAngelMoney)
 private:
  inline void set_has_m_lusn();
  inline void clear_has_m_lusn();
  inline void set_has_m_nguardianangelcnt();
  inline void clear_has_m_nguardianangelcnt();
  inline void set_has_m_llangelmoney();
  inline void clear_has_m_llangelmoney();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lusn_;
  ::google::protobuf::int32 m_nguardianangelcnt_;
  ::google::protobuf::int64 m_llangelmoney_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_GuardianAngelMoney* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_GameMasterCallNtf : public ::google::protobuf::Message {
 public:
  MsgSC_GameMasterCallNtf();
  virtual ~MsgSC_GameMasterCallNtf();
  
  MsgSC_GameMasterCallNtf(const MsgSC_GameMasterCallNtf& from);
  
  inline MsgSC_GameMasterCallNtf& operator=(const MsgSC_GameMasterCallNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_GameMasterCallNtf& default_instance();
  
  void Swap(MsgSC_GameMasterCallNtf* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_GameMasterCallNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_GameMasterCallNtf& from);
  void MergeFrom(const MsgSC_GameMasterCallNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 m_lGMCall_USN = 1;
  inline bool has_m_lgmcall_usn() const;
  inline void clear_m_lgmcall_usn();
  static const int kMLGMCallUSNFieldNumber = 1;
  inline ::google::protobuf::int32 m_lgmcall_usn() const;
  inline void set_m_lgmcall_usn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_GameMasterCallNtf)
 private:
  inline void set_has_m_lgmcall_usn();
  inline void clear_has_m_lgmcall_usn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_lgmcall_usn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_GameMasterCallNtf* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_ObserverCnt : public ::google::protobuf::Message {
 public:
  MsgSC_ObserverCnt();
  virtual ~MsgSC_ObserverCnt();
  
  MsgSC_ObserverCnt(const MsgSC_ObserverCnt& from);
  
  inline MsgSC_ObserverCnt& operator=(const MsgSC_ObserverCnt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_ObserverCnt& default_instance();
  
  void Swap(MsgSC_ObserverCnt* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_ObserverCnt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_ObserverCnt& from);
  void MergeFrom(const MsgSC_ObserverCnt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 m_nObserverCnt = 1;
  inline bool has_m_nobservercnt() const;
  inline void clear_m_nobservercnt();
  static const int kMNObserverCntFieldNumber = 1;
  inline ::google::protobuf::int32 m_nobservercnt() const;
  inline void set_m_nobservercnt(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_ObserverCnt)
 private:
  inline void set_has_m_nobservercnt();
  inline void clear_has_m_nobservercnt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 m_nobservercnt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_ObserverCnt* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_Bonus : public ::google::protobuf::Message {
 public:
  MsgSC_Bonus();
  virtual ~MsgSC_Bonus();
  
  MsgSC_Bonus(const MsgSC_Bonus& from);
  
  inline MsgSC_Bonus& operator=(const MsgSC_Bonus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_Bonus& default_instance();
  
  void Swap(MsgSC_Bonus* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_Bonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_Bonus& from);
  void MergeFrom(const MsgSC_Bonus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 m_llBonus = 1;
  inline bool has_m_llbonus() const;
  inline void clear_m_llbonus();
  static const int kMLlBonusFieldNumber = 1;
  inline ::google::protobuf::int64 m_llbonus() const;
  inline void set_m_llbonus(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_Bonus)
 private:
  inline void set_has_m_llbonus();
  inline void clear_has_m_llbonus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 m_llbonus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_Bonus* default_instance_;
};
// -------------------------------------------------------------------

class MsgSC_PoliceNotify : public ::google::protobuf::Message {
 public:
  MsgSC_PoliceNotify();
  virtual ~MsgSC_PoliceNotify();
  
  MsgSC_PoliceNotify(const MsgSC_PoliceNotify& from);
  
  inline MsgSC_PoliceNotify& operator=(const MsgSC_PoliceNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSC_PoliceNotify& default_instance();
  
  void Swap(MsgSC_PoliceNotify* other);
  
  // implements Message ----------------------------------------------
  
  MsgSC_PoliceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSC_PoliceNotify& from);
  void MergeFrom(const MsgSC_PoliceNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string m_policeMsg = 1;
  inline bool has_m_policemsg() const;
  inline void clear_m_policemsg();
  static const int kMPoliceMsgFieldNumber = 1;
  inline const ::std::string& m_policemsg() const;
  inline void set_m_policemsg(const ::std::string& value);
  inline void set_m_policemsg(const char* value);
  inline void set_m_policemsg(const char* value, size_t size);
  inline ::std::string* mutable_m_policemsg();
  inline ::std::string* release_m_policemsg();
  
  // @@protoc_insertion_point(class_scope:Game_Poker.MsgSC_PoliceNotify)
 private:
  inline void set_has_m_policemsg();
  inline void clear_has_m_policemsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* m_policemsg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static MsgSC_PoliceNotify* default_instance_;
};
// -------------------------------------------------------------------

class PayloadSC : public ::google::protobuf::Message {
 public:
  PayloadSC();
  virtual ~PayloadSC();
  
  PayloadSC(const PayloadSC& from);
  
  inline PayloadSC& operator=(const PayloadSC& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadSC& default_instance();
  
  void Swap(PayloadSC* other);
  
  // implements Message ----------------------------------------------
  
  PayloadSC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayloadSC& from);
  void MergeFrom(const PayloadSC& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PayloadSC_TAGID TAGID;
  static const TAGID Header = PayloadSC_TAGID_Header;
  static const TAGID _Null_Tag = PayloadSC_TAGID__Null_Tag;
  static const TAGID msgUserJoinAns_Tag = PayloadSC_TAGID_msgUserJoinAns_Tag;
  static const TAGID msgUserJoinErr_Tag = PayloadSC_TAGID_msgUserJoinErr_Tag;
  static const TAGID msgUserDisconnect_Tag = PayloadSC_TAGID_msgUserDisconnect_Tag;
  static const TAGID msgCardData_Tag = PayloadSC_TAGID_msgCardData_Tag;
  static const TAGID msgEntryAns_Tag = PayloadSC_TAGID_msgEntryAns_Tag;
  static const TAGID msgEntryReject_Tag = PayloadSC_TAGID_msgEntryReject_Tag;
  static const TAGID msgObserveAns_Tag = PayloadSC_TAGID_msgObserveAns_Tag;
  static const TAGID msgStartReq_Tag = PayloadSC_TAGID_msgStartReq_Tag;
  static const TAGID msgStartAns_Tag = PayloadSC_TAGID_msgStartAns_Tag;
  static const TAGID msgNoStart_Tag = PayloadSC_TAGID_msgNoStart_Tag;
  static const TAGID msgDealCards_Tag = PayloadSC_TAGID_msgDealCards_Tag;
  static const TAGID msgSelectedCardAns_Tag = PayloadSC_TAGID_msgSelectedCardAns_Tag;
  static const TAGID msgDealOpenCard_Tag = PayloadSC_TAGID_msgDealOpenCard_Tag;
  static const TAGID msgDealHiddenCard_Tag = PayloadSC_TAGID_msgDealHiddenCard_Tag;
  static const TAGID msgDealCard_Tag = PayloadSC_TAGID_msgDealCard_Tag;
  static const TAGID msgBoss_Tag = PayloadSC_TAGID_msgBoss_Tag;
  static const TAGID msgBetting_Tag = PayloadSC_TAGID_msgBetting_Tag;
  static const TAGID msgBettingAns_Tag = PayloadSC_TAGID_msgBettingAns_Tag;
  static const TAGID msgBettingAnsMsg_Tag = PayloadSC_TAGID_msgBettingAnsMsg_Tag;
  static const TAGID msgAnteMoney_Tag = PayloadSC_TAGID_msgAnteMoney_Tag;
  static const TAGID msgRuleQuaterHalf_Tag = PayloadSC_TAGID_msgRuleQuaterHalf_Tag;
  static const TAGID msgFinished_Tag = PayloadSC_TAGID_msgFinished_Tag;
  static const TAGID msgNewGame_Tag = PayloadSC_TAGID_msgNewGame_Tag;
  static const TAGID msgContinueAns_Tag = PayloadSC_TAGID_msgContinueAns_Tag;
  static const TAGID msgContinue_Tag = PayloadSC_TAGID_msgContinue_Tag;
  static const TAGID msgSystemMsg_Tag = PayloadSC_TAGID_msgSystemMsg_Tag;
  static const TAGID msgPurgeAns_Tag = PayloadSC_TAGID_msgPurgeAns_Tag;
  static const TAGID msgPurgeInfo_Tag = PayloadSC_TAGID_msgPurgeInfo_Tag;
  static const TAGID msgSetPurgeMoney_Tag = PayloadSC_TAGID_msgSetPurgeMoney_Tag;
  static const TAGID msgThankYouItemNotify_Tag = PayloadSC_TAGID_msgThankYouItemNotify_Tag;
  static const TAGID msgMadeItemNotify_Tag = PayloadSC_TAGID_msgMadeItemNotify_Tag;
  static const TAGID msgAssaItemNotify_Tag = PayloadSC_TAGID_msgAssaItemNotify_Tag;
  static const TAGID msgExtMoneyNotify_Tag = PayloadSC_TAGID_msgExtMoneyNotify_Tag;
  static const TAGID msgGameEndSystemMsg_Tag = PayloadSC_TAGID_msgGameEndSystemMsg_Tag;
  static const TAGID msgChangeAvatarNotify_Tag = PayloadSC_TAGID_msgChangeAvatarNotify_Tag;
  static const TAGID msgAbuseAns_Tag = PayloadSC_TAGID_msgAbuseAns_Tag;
  static const TAGID msgSoundTypeAns_Tag = PayloadSC_TAGID_msgSoundTypeAns_Tag;
  static const TAGID msgFMoney_Tag = PayloadSC_TAGID_msgFMoney_Tag;
  static const TAGID msgItemNotify_Tag = PayloadSC_TAGID_msgItemNotify_Tag;
  static const TAGID msgDisconnectMoneyNotify_Tag = PayloadSC_TAGID_msgDisconnectMoneyNotify_Tag;
  static const TAGID msgExitNtf_Tag = PayloadSC_TAGID_msgExitNtf_Tag;
  static const TAGID msgAllowEntryWaitingUser_Tag = PayloadSC_TAGID_msgAllowEntryWaitingUser_Tag;
  static const TAGID msgAllWaitingUserDataNtf_Tag = PayloadSC_TAGID_msgAllWaitingUserDataNtf_Tag;
  static const TAGID msgUserDataChangeNtf_Tag = PayloadSC_TAGID_msgUserDataChangeNtf_Tag;
  static const TAGID msgRefillMoneyNtf_Tag = PayloadSC_TAGID_msgRefillMoneyNtf_Tag;
  static const TAGID msgJackpotMoneyNtf_Tag = PayloadSC_TAGID_msgJackpotMoneyNtf_Tag;
  static const TAGID msgRuleNotify_Tag = PayloadSC_TAGID_msgRuleNotify_Tag;
  static const TAGID msgGuardianAngelMoney_Tag = PayloadSC_TAGID_msgGuardianAngelMoney_Tag;
  static const TAGID msgGameMasterCallNtf_Tag = PayloadSC_TAGID_msgGameMasterCallNtf_Tag;
  static const TAGID msgObserverCnt_Tag = PayloadSC_TAGID_msgObserverCnt_Tag;
  static const TAGID msgBonus_Tag = PayloadSC_TAGID_msgBonus_Tag;
  static const TAGID msgPoliceNotify_Tag = PayloadSC_TAGID_msgPoliceNotify_Tag;
  static const TAGID _Max_Tag = PayloadSC_TAGID__Max_Tag;
  static inline bool TAGID_IsValid(int value) {
    return PayloadSC_TAGID_IsValid(value);
  }
  static const TAGID TAGID_MIN =
    PayloadSC_TAGID_TAGID_MIN;
  static const TAGID TAGID_MAX =
    PayloadSC_TAGID_TAGID_MAX;
  static const int TAGID_ARRAYSIZE =
    PayloadSC_TAGID_TAGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TAGID_descriptor() {
    return PayloadSC_TAGID_descriptor();
  }
  static inline const ::std::string& TAGID_Name(TAGID value) {
    return PayloadSC_TAGID_Name(value);
  }
  static inline bool TAGID_Parse(const ::std::string& name,
      TAGID* value) {
    return PayloadSC_TAGID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 mTagID = 1;
  inline bool has_mtagid() const;
  inline void clear_mtagid();
  static const int kMTagIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mtagid() const;
  inline void set_mtagid(::google::protobuf::uint32 value);
  
  // required bool bShared = 2;
  inline bool has_bshared() const;
  inline void clear_bshared();
  static const int kBSharedFieldNumber = 2;
  inline bool bshared() const;
  inline void set_bshared(bool value);
  
  // @@protoc_insertion_point(class_scope:Game_Poker.PayloadSC)
 private:
  inline void set_has_mtagid();
  inline void clear_has_mtagid();
  inline void set_has_bshared();
  inline void clear_has_bshared();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mtagid_;
  bool bshared_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_AssignDesc_AdlGame_5fPoker_2eproto();
  friend void protobuf_ShutdownFile_AdlGame_5fPoker_2eproto();
  
  void InitAsDefaultInstance();
  static PayloadSC* default_instance_;
};
// ===================================================================


// ===================================================================

// Cards

// repeated int32 m_vtCards = 1;
inline int Cards::m_vtcards_size() const {
  return m_vtcards_.size();
}
inline void Cards::clear_m_vtcards() {
  m_vtcards_.Clear();
}
inline ::google::protobuf::int32 Cards::m_vtcards(int index) const {
  return m_vtcards_.Get(index);
}
inline void Cards::set_m_vtcards(int index, ::google::protobuf::int32 value) {
  m_vtcards_.Set(index, value);
}
inline void Cards::add_m_vtcards(::google::protobuf::int32 value) {
  m_vtcards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cards::m_vtcards() const {
  return m_vtcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cards::mutable_m_vtcards() {
  return &m_vtcards_;
}

// repeated int32 m_lResultIdx = 2;
inline int Cards::m_lresultidx_size() const {
  return m_lresultidx_.size();
}
inline void Cards::clear_m_lresultidx() {
  m_lresultidx_.Clear();
}
inline ::google::protobuf::int32 Cards::m_lresultidx(int index) const {
  return m_lresultidx_.Get(index);
}
inline void Cards::set_m_lresultidx(int index, ::google::protobuf::int32 value) {
  m_lresultidx_.Set(index, value);
}
inline void Cards::add_m_lresultidx(::google::protobuf::int32 value) {
  m_lresultidx_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cards::m_lresultidx() const {
  return m_lresultidx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cards::mutable_m_lresultidx() {
  return &m_lresultidx_;
}

// required .Game_Poker.VecUSN m_vUserUSN = 3;
inline bool Cards::has_m_vuserusn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Cards::set_has_m_vuserusn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Cards::clear_has_m_vuserusn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Cards::clear_m_vuserusn() {
  if (m_vuserusn_ != NULL) m_vuserusn_->::Game_Poker::VecUSN::Clear();
  clear_has_m_vuserusn();
}
inline const ::Game_Poker::VecUSN& Cards::m_vuserusn() const {
  return m_vuserusn_ != NULL ? *m_vuserusn_ : *default_instance_->m_vuserusn_;
}
inline ::Game_Poker::VecUSN* Cards::mutable_m_vuserusn() {
  set_has_m_vuserusn();
  if (m_vuserusn_ == NULL) m_vuserusn_ = new ::Game_Poker::VecUSN;
  return m_vuserusn_;
}
inline ::Game_Poker::VecUSN* Cards::release_m_vuserusn() {
  clear_has_m_vuserusn();
  ::Game_Poker::VecUSN* temp = m_vuserusn_;
  m_vuserusn_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Money

// required sint64 m_llCMoney = 1;
inline bool Money::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Money::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Money::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Money::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 Money::m_llcmoney() const {
  return m_llcmoney_;
}
inline void Money::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// required sint64 m_llCallMoney = 2;
inline bool Money::has_m_llcallmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Money::set_has_m_llcallmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Money::clear_has_m_llcallmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Money::clear_m_llcallmoney() {
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallmoney();
}
inline ::google::protobuf::int64 Money::m_llcallmoney() const {
  return m_llcallmoney_;
}
inline void Money::set_m_llcallmoney(::google::protobuf::int64 value) {
  set_has_m_llcallmoney();
  m_llcallmoney_ = value;
}

// required sint64 m_llSideMoney = 3;
inline bool Money::has_m_llsidemoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Money::set_has_m_llsidemoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Money::clear_has_m_llsidemoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Money::clear_m_llsidemoney() {
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llsidemoney();
}
inline ::google::protobuf::int64 Money::m_llsidemoney() const {
  return m_llsidemoney_;
}
inline void Money::set_m_llsidemoney(::google::protobuf::int64 value) {
  set_has_m_llsidemoney();
  m_llsidemoney_ = value;
}

// required sint64 m_llCallHabMoney = 4;
inline bool Money::has_m_llcallhabmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Money::set_has_m_llcallhabmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Money::clear_has_m_llcallhabmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Money::clear_m_llcallhabmoney() {
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallhabmoney();
}
inline ::google::protobuf::int64 Money::m_llcallhabmoney() const {
  return m_llcallhabmoney_;
}
inline void Money::set_m_llcallhabmoney(::google::protobuf::int64 value) {
  set_has_m_llcallhabmoney();
  m_llcallhabmoney_ = value;
}

// required sint64 m_llTakeMoney = 5;
inline bool Money::has_m_lltakemoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Money::set_has_m_lltakemoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Money::clear_has_m_lltakemoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Money::clear_m_lltakemoney() {
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lltakemoney();
}
inline ::google::protobuf::int64 Money::m_lltakemoney() const {
  return m_lltakemoney_;
}
inline void Money::set_m_lltakemoney(::google::protobuf::int64 value) {
  set_has_m_lltakemoney();
  m_lltakemoney_ = value;
}

// required sint64 m_llJackpotMoney = 6;
inline bool Money::has_m_lljackpotmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Money::set_has_m_lljackpotmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Money::clear_has_m_lljackpotmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Money::clear_m_lljackpotmoney() {
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lljackpotmoney();
}
inline ::google::protobuf::int64 Money::m_lljackpotmoney() const {
  return m_lljackpotmoney_;
}
inline void Money::set_m_lljackpotmoney(::google::protobuf::int64 value) {
  set_has_m_lljackpotmoney();
  m_lljackpotmoney_ = value;
}

// required sint32 m_lBetState = 7;
inline bool Money::has_m_lbetstate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Money::set_has_m_lbetstate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Money::clear_has_m_lbetstate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Money::clear_m_lbetstate() {
  m_lbetstate_ = 0;
  clear_has_m_lbetstate();
}
inline ::google::protobuf::int32 Money::m_lbetstate() const {
  return m_lbetstate_;
}
inline void Money::set_m_lbetstate(::google::protobuf::int32 value) {
  set_has_m_lbetstate();
  m_lbetstate_ = value;
}

// required sint32 m_lBetReceive = 8;
inline bool Money::has_m_lbetreceive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Money::set_has_m_lbetreceive() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Money::clear_has_m_lbetreceive() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Money::clear_m_lbetreceive() {
  m_lbetreceive_ = 0;
  clear_has_m_lbetreceive();
}
inline ::google::protobuf::int32 Money::m_lbetreceive() const {
  return m_lbetreceive_;
}
inline void Money::set_m_lbetreceive(::google::protobuf::int32 value) {
  set_has_m_lbetreceive();
  m_lbetreceive_ = value;
}

// required sint32 m_lBetCount = 9;
inline bool Money::has_m_lbetcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Money::set_has_m_lbetcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Money::clear_has_m_lbetcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Money::clear_m_lbetcount() {
  m_lbetcount_ = 0;
  clear_has_m_lbetcount();
}
inline ::google::protobuf::int32 Money::m_lbetcount() const {
  return m_lbetcount_;
}
inline void Money::set_m_lbetcount(::google::protobuf::int32 value) {
  set_has_m_lbetcount();
  m_lbetcount_ = value;
}

// required sint32 m_lResultIdx = 10;
inline bool Money::has_m_lresultidx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Money::set_has_m_lresultidx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Money::clear_has_m_lresultidx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Money::clear_m_lresultidx() {
  m_lresultidx_ = 0;
  clear_has_m_lresultidx();
}
inline ::google::protobuf::int32 Money::m_lresultidx() const {
  return m_lresultidx_;
}
inline void Money::set_m_lresultidx(::google::protobuf::int32 value) {
  set_has_m_lresultidx();
  m_lresultidx_ = value;
}

// required string m_sMoneyMsg = 11;
inline bool Money::has_m_smoneymsg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Money::set_has_m_smoneymsg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Money::clear_has_m_smoneymsg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Money::clear_m_smoneymsg() {
  if (m_smoneymsg_ != &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_->clear();
  }
  clear_has_m_smoneymsg();
}
inline const ::std::string& Money::m_smoneymsg() const {
  return *m_smoneymsg_;
}
inline void Money::set_m_smoneymsg(const ::std::string& value) {
  set_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_ = new ::std::string;
  }
  m_smoneymsg_->assign(value);
}
inline void Money::set_m_smoneymsg(const char* value) {
  set_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_ = new ::std::string;
  }
  m_smoneymsg_->assign(value);
}
inline void Money::set_m_smoneymsg(const char* value, size_t size) {
  set_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_ = new ::std::string;
  }
  m_smoneymsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Money::mutable_m_smoneymsg() {
  set_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smoneymsg_ = new ::std::string;
  }
  return m_smoneymsg_;
}
inline ::std::string* Money::release_m_smoneymsg() {
  clear_has_m_smoneymsg();
  if (m_smoneymsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_smoneymsg_;
    m_smoneymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserMoney

// required sint32 m_lUSN = 1;
inline bool UserMoney::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMoney::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMoney::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMoney::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 UserMoney::m_lusn() const {
  return m_lusn_;
}
inline void UserMoney::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lState = 2;
inline bool UserMoney::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMoney::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMoney::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMoney::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 UserMoney::m_lstate() const {
  return m_lstate_;
}
inline void UserMoney::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required sint64 m_llMoney = 3;
inline bool UserMoney::has_m_llmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMoney::set_has_m_llmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMoney::clear_has_m_llmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMoney::clear_m_llmoney() {
  m_llmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llmoney();
}
inline ::google::protobuf::int64 UserMoney::m_llmoney() const {
  return m_llmoney_;
}
inline void UserMoney::set_m_llmoney(::google::protobuf::int64 value) {
  set_has_m_llmoney();
  m_llmoney_ = value;
}

// required sint64 m_llCallHabMoney = 4;
inline bool UserMoney::has_m_llcallhabmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMoney::set_has_m_llcallhabmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMoney::clear_has_m_llcallhabmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMoney::clear_m_llcallhabmoney() {
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallhabmoney();
}
inline ::google::protobuf::int64 UserMoney::m_llcallhabmoney() const {
  return m_llcallhabmoney_;
}
inline void UserMoney::set_m_llcallhabmoney(::google::protobuf::int64 value) {
  set_has_m_llcallhabmoney();
  m_llcallhabmoney_ = value;
}

// required sint64 m_llTakeMoney = 5;
inline bool UserMoney::has_m_lltakemoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMoney::set_has_m_lltakemoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMoney::clear_has_m_lltakemoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMoney::clear_m_lltakemoney() {
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lltakemoney();
}
inline ::google::protobuf::int64 UserMoney::m_lltakemoney() const {
  return m_lltakemoney_;
}
inline void UserMoney::set_m_lltakemoney(::google::protobuf::int64 value) {
  set_has_m_lltakemoney();
  m_lltakemoney_ = value;
}

// required sint64 m_llDealMoney = 6;
inline bool UserMoney::has_m_lldealmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserMoney::set_has_m_lldealmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserMoney::clear_has_m_lldealmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserMoney::clear_m_lldealmoney() {
  m_lldealmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lldealmoney();
}
inline ::google::protobuf::int64 UserMoney::m_lldealmoney() const {
  return m_lldealmoney_;
}
inline void UserMoney::set_m_lldealmoney(::google::protobuf::int64 value) {
  set_has_m_lldealmoney();
  m_lldealmoney_ = value;
}

// required string m_sNickName = 7;
inline bool UserMoney::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserMoney::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserMoney::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserMoney::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& UserMoney::m_snickname() const {
  return *m_snickname_;
}
inline void UserMoney::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void UserMoney::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void UserMoney::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserMoney::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* UserMoney::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sDealerTax = 8;
inline bool UserMoney::has_m_sdealertax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserMoney::set_has_m_sdealertax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserMoney::clear_has_m_sdealertax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserMoney::clear_m_sdealertax() {
  if (m_sdealertax_ != &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_->clear();
  }
  clear_has_m_sdealertax();
}
inline const ::std::string& UserMoney::m_sdealertax() const {
  return *m_sdealertax_;
}
inline void UserMoney::set_m_sdealertax(const ::std::string& value) {
  set_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_ = new ::std::string;
  }
  m_sdealertax_->assign(value);
}
inline void UserMoney::set_m_sdealertax(const char* value) {
  set_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_ = new ::std::string;
  }
  m_sdealertax_->assign(value);
}
inline void UserMoney::set_m_sdealertax(const char* value, size_t size) {
  set_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_ = new ::std::string;
  }
  m_sdealertax_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserMoney::mutable_m_sdealertax() {
  set_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    m_sdealertax_ = new ::std::string;
  }
  return m_sdealertax_;
}
inline ::std::string* UserMoney::release_m_sdealertax() {
  clear_has_m_sdealertax();
  if (m_sdealertax_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sdealertax_;
    m_sdealertax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CWinLose

// required sint32 m_lWin = 1;
inline bool CWinLose::has_m_lwin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CWinLose::set_has_m_lwin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CWinLose::clear_has_m_lwin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CWinLose::clear_m_lwin() {
  m_lwin_ = 0;
  clear_has_m_lwin();
}
inline ::google::protobuf::int32 CWinLose::m_lwin() const {
  return m_lwin_;
}
inline void CWinLose::set_m_lwin(::google::protobuf::int32 value) {
  set_has_m_lwin();
  m_lwin_ = value;
}

// required sint32 m_lLose = 2;
inline bool CWinLose::has_m_llose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CWinLose::set_has_m_llose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CWinLose::clear_has_m_llose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CWinLose::clear_m_llose() {
  m_llose_ = 0;
  clear_has_m_llose();
}
inline ::google::protobuf::int32 CWinLose::m_llose() const {
  return m_llose_;
}
inline void CWinLose::set_m_llose(::google::protobuf::int32 value) {
  set_has_m_llose();
  m_llose_ = value;
}

// required sint32 m_lContinue = 3;
inline bool CWinLose::has_m_lcontinue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CWinLose::set_has_m_lcontinue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CWinLose::clear_has_m_lcontinue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CWinLose::clear_m_lcontinue() {
  m_lcontinue_ = 0;
  clear_has_m_lcontinue();
}
inline ::google::protobuf::int32 CWinLose::m_lcontinue() const {
  return m_lcontinue_;
}
inline void CWinLose::set_m_lcontinue(::google::protobuf::int32 value) {
  set_has_m_lcontinue();
  m_lcontinue_ = value;
}

// -------------------------------------------------------------------

// UserInfo

// required sint32 m_lUSN = 1;
inline bool UserInfo::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 UserInfo::m_lusn() const {
  return m_lusn_;
}
inline void UserInfo::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_nIndex = 2;
inline bool UserInfo::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 UserInfo::m_nindex() const {
  return m_nindex_;
}
inline void UserInfo::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required string m_sNickName = 3;
inline bool UserInfo::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& UserInfo::m_snickname() const {
  return *m_snickname_;
}
inline void UserInfo::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void UserInfo::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void UserInfo::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* UserInfo::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sID = 4;
inline bool UserInfo::has_m_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_m_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_m_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_m_sid() {
  if (m_sid_ != &::google::protobuf::internal::kEmptyString) {
    m_sid_->clear();
  }
  clear_has_m_sid();
}
inline const ::std::string& UserInfo::m_sid() const {
  return *m_sid_;
}
inline void UserInfo::set_m_sid(const ::std::string& value) {
  set_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    m_sid_ = new ::std::string;
  }
  m_sid_->assign(value);
}
inline void UserInfo::set_m_sid(const char* value) {
  set_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    m_sid_ = new ::std::string;
  }
  m_sid_->assign(value);
}
inline void UserInfo::set_m_sid(const char* value, size_t size) {
  set_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    m_sid_ = new ::std::string;
  }
  m_sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_m_sid() {
  set_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    m_sid_ = new ::std::string;
  }
  return m_sid_;
}
inline ::std::string* UserInfo::release_m_sid() {
  clear_has_m_sid();
  if (m_sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sid_;
    m_sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint32 m_lCLevel = 5;
inline bool UserInfo::has_m_lclevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_m_lclevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_m_lclevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_m_lclevel() {
  m_lclevel_ = 0;
  clear_has_m_lclevel();
}
inline ::google::protobuf::int32 UserInfo::m_lclevel() const {
  return m_lclevel_;
}
inline void UserInfo::set_m_lclevel(::google::protobuf::int32 value) {
  set_has_m_lclevel();
  m_lclevel_ = value;
}

// required sint32 m_lSoundType = 6;
inline bool UserInfo::has_m_lsoundtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_m_lsoundtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_m_lsoundtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_m_lsoundtype() {
  m_lsoundtype_ = 0;
  clear_has_m_lsoundtype();
}
inline ::google::protobuf::int32 UserInfo::m_lsoundtype() const {
  return m_lsoundtype_;
}
inline void UserInfo::set_m_lsoundtype(::google::protobuf::int32 value) {
  set_has_m_lsoundtype();
  m_lsoundtype_ = value;
}

// required string m_sAvt = 7;
inline bool UserInfo::has_m_savt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_m_savt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_m_savt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_m_savt() {
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    m_savt_->clear();
  }
  clear_has_m_savt();
}
inline const ::std::string& UserInfo::m_savt() const {
  return *m_savt_;
}
inline void UserInfo::set_m_savt(const ::std::string& value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void UserInfo::set_m_savt(const char* value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void UserInfo::set_m_savt(const char* value, size_t size) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_m_savt() {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  return m_savt_;
}
inline ::std::string* UserInfo::release_m_savt() {
  clear_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_savt_;
    m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint32 m_lUserState = 8;
inline bool UserInfo::has_m_luserstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_m_luserstate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_m_luserstate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_m_luserstate() {
  m_luserstate_ = 0;
  clear_has_m_luserstate();
}
inline ::google::protobuf::int32 UserInfo::m_luserstate() const {
  return m_luserstate_;
}
inline void UserInfo::set_m_luserstate(::google::protobuf::int32 value) {
  set_has_m_luserstate();
  m_luserstate_ = value;
}

// required .Game_Poker.CWinLose m_cWinLose = 9;
inline bool UserInfo::has_m_cwinlose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::set_has_m_cwinlose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo::clear_has_m_cwinlose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo::clear_m_cwinlose() {
  if (m_cwinlose_ != NULL) m_cwinlose_->::Game_Poker::CWinLose::Clear();
  clear_has_m_cwinlose();
}
inline const ::Game_Poker::CWinLose& UserInfo::m_cwinlose() const {
  return m_cwinlose_ != NULL ? *m_cwinlose_ : *default_instance_->m_cwinlose_;
}
inline ::Game_Poker::CWinLose* UserInfo::mutable_m_cwinlose() {
  set_has_m_cwinlose();
  if (m_cwinlose_ == NULL) m_cwinlose_ = new ::Game_Poker::CWinLose;
  return m_cwinlose_;
}
inline ::Game_Poker::CWinLose* UserInfo::release_m_cwinlose() {
  clear_has_m_cwinlose();
  ::Game_Poker::CWinLose* temp = m_cwinlose_;
  m_cwinlose_ = NULL;
  return temp;
}

// required .Game_Poker.CWinLose m_cWinLose_Today = 10;
inline bool UserInfo::has_m_cwinlose_today() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::set_has_m_cwinlose_today() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo::clear_has_m_cwinlose_today() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo::clear_m_cwinlose_today() {
  if (m_cwinlose_today_ != NULL) m_cwinlose_today_->::Game_Poker::CWinLose::Clear();
  clear_has_m_cwinlose_today();
}
inline const ::Game_Poker::CWinLose& UserInfo::m_cwinlose_today() const {
  return m_cwinlose_today_ != NULL ? *m_cwinlose_today_ : *default_instance_->m_cwinlose_today_;
}
inline ::Game_Poker::CWinLose* UserInfo::mutable_m_cwinlose_today() {
  set_has_m_cwinlose_today();
  if (m_cwinlose_today_ == NULL) m_cwinlose_today_ = new ::Game_Poker::CWinLose;
  return m_cwinlose_today_;
}
inline ::Game_Poker::CWinLose* UserInfo::release_m_cwinlose_today() {
  clear_has_m_cwinlose_today();
  ::Game_Poker::CWinLose* temp = m_cwinlose_today_;
  m_cwinlose_today_ = NULL;
  return temp;
}

// required .Game_Poker.CWinLose m_cWinLose_Room = 11;
inline bool UserInfo::has_m_cwinlose_room() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfo::set_has_m_cwinlose_room() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfo::clear_has_m_cwinlose_room() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfo::clear_m_cwinlose_room() {
  if (m_cwinlose_room_ != NULL) m_cwinlose_room_->::Game_Poker::CWinLose::Clear();
  clear_has_m_cwinlose_room();
}
inline const ::Game_Poker::CWinLose& UserInfo::m_cwinlose_room() const {
  return m_cwinlose_room_ != NULL ? *m_cwinlose_room_ : *default_instance_->m_cwinlose_room_;
}
inline ::Game_Poker::CWinLose* UserInfo::mutable_m_cwinlose_room() {
  set_has_m_cwinlose_room();
  if (m_cwinlose_room_ == NULL) m_cwinlose_room_ = new ::Game_Poker::CWinLose;
  return m_cwinlose_room_;
}
inline ::Game_Poker::CWinLose* UserInfo::release_m_cwinlose_room() {
  clear_has_m_cwinlose_room();
  ::Game_Poker::CWinLose* temp = m_cwinlose_room_;
  m_cwinlose_room_ = NULL;
  return temp;
}

// required sint64 m_llCMoney = 12;
inline bool UserInfo::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserInfo::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserInfo::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserInfo::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 UserInfo::m_llcmoney() const {
  return m_llcmoney_;
}
inline void UserInfo::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// required sint64 m_llFMoney = 13;
inline bool UserInfo::has_m_llfmoney() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserInfo::set_has_m_llfmoney() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserInfo::clear_has_m_llfmoney() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserInfo::clear_m_llfmoney() {
  m_llfmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llfmoney();
}
inline ::google::protobuf::int64 UserInfo::m_llfmoney() const {
  return m_llfmoney_;
}
inline void UserInfo::set_m_llfmoney(::google::protobuf::int64 value) {
  set_has_m_llfmoney();
  m_llfmoney_ = value;
}

// required sint32 m_lExit = 14;
inline bool UserInfo::has_m_lexit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserInfo::set_has_m_lexit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserInfo::clear_has_m_lexit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserInfo::clear_m_lexit() {
  m_lexit_ = 0;
  clear_has_m_lexit();
}
inline ::google::protobuf::int32 UserInfo::m_lexit() const {
  return m_lexit_;
}
inline void UserInfo::set_m_lexit(::google::protobuf::int32 value) {
  set_has_m_lexit();
  m_lexit_ = value;
}

// required sint32 m_nItemType = 15;
inline bool UserInfo::has_m_nitemtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserInfo::set_has_m_nitemtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserInfo::clear_has_m_nitemtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserInfo::clear_m_nitemtype() {
  m_nitemtype_ = 0;
  clear_has_m_nitemtype();
}
inline ::google::protobuf::int32 UserInfo::m_nitemtype() const {
  return m_nitemtype_;
}
inline void UserInfo::set_m_nitemtype(::google::protobuf::int32 value) {
  set_has_m_nitemtype();
  m_nitemtype_ = value;
}

// required sint32 m_lAck = 16;
inline bool UserInfo::has_m_lack() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserInfo::set_has_m_lack() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserInfo::clear_has_m_lack() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserInfo::clear_m_lack() {
  m_lack_ = 0;
  clear_has_m_lack();
}
inline ::google::protobuf::int32 UserInfo::m_lack() const {
  return m_lack_;
}
inline void UserInfo::set_m_lack(::google::protobuf::int32 value) {
  set_has_m_lack();
  m_lack_ = value;
}

// required sint32 m_lJackpot = 17;
inline bool UserInfo::has_m_ljackpot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserInfo::set_has_m_ljackpot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserInfo::clear_has_m_ljackpot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserInfo::clear_m_ljackpot() {
  m_ljackpot_ = 0;
  clear_has_m_ljackpot();
}
inline ::google::protobuf::int32 UserInfo::m_ljackpot() const {
  return m_ljackpot_;
}
inline void UserInfo::set_m_ljackpot(::google::protobuf::int32 value) {
  set_has_m_ljackpot();
  m_ljackpot_ = value;
}

// required sint32 m_lDieCardsDealt = 18;
inline bool UserInfo::has_m_ldiecardsdealt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserInfo::set_has_m_ldiecardsdealt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserInfo::clear_has_m_ldiecardsdealt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserInfo::clear_m_ldiecardsdealt() {
  m_ldiecardsdealt_ = 0;
  clear_has_m_ldiecardsdealt();
}
inline ::google::protobuf::int32 UserInfo::m_ldiecardsdealt() const {
  return m_ldiecardsdealt_;
}
inline void UserInfo::set_m_ldiecardsdealt(::google::protobuf::int32 value) {
  set_has_m_ldiecardsdealt();
  m_ldiecardsdealt_ = value;
}

// -------------------------------------------------------------------

// OneCard

// required int32 m_nIndex = 1;
inline bool OneCard::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneCard::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneCard::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneCard::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 OneCard::m_nindex() const {
  return m_nindex_;
}
inline void OneCard::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required int32 m_lCardIndex = 2;
inline bool OneCard::has_m_lcardindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneCard::set_has_m_lcardindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneCard::clear_has_m_lcardindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneCard::clear_m_lcardindex() {
  m_lcardindex_ = 0;
  clear_has_m_lcardindex();
}
inline ::google::protobuf::int32 OneCard::m_lcardindex() const {
  return m_lcardindex_;
}
inline void OneCard::set_m_lcardindex(::google::protobuf::int32 value) {
  set_has_m_lcardindex();
  m_lcardindex_ = value;
}

// -------------------------------------------------------------------

// VecMoney

// required sint64 VecMoney = 1;
inline bool VecMoney::has_vecmoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VecMoney::set_has_vecmoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VecMoney::clear_has_vecmoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VecMoney::clear_vecmoney() {
  vecmoney_ = GOOGLE_LONGLONG(0);
  clear_has_vecmoney();
}
inline ::google::protobuf::int64 VecMoney::vecmoney() const {
  return vecmoney_;
}
inline void VecMoney::set_vecmoney(::google::protobuf::int64 value) {
  set_has_vecmoney();
  vecmoney_ = value;
}

// -------------------------------------------------------------------

// WinLoseInfo

// -------------------------------------------------------------------

// VecUSN

// required int64 USN = 1;
inline bool VecUSN::has_usn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VecUSN::set_has_usn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VecUSN::clear_has_usn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VecUSN::clear_usn() {
  usn_ = GOOGLE_LONGLONG(0);
  clear_has_usn();
}
inline ::google::protobuf::int64 VecUSN::usn() const {
  return usn_;
}
inline void VecUSN::set_usn(::google::protobuf::int64 value) {
  set_has_usn();
  usn_ = value;
}

// -------------------------------------------------------------------

// WAITINGUSERDATA

// -------------------------------------------------------------------

// RCUserData

// -------------------------------------------------------------------

// Option

// required string m_sRoomTitle = 1;
inline bool Option::has_m_sroomtitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Option::set_has_m_sroomtitle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Option::clear_has_m_sroomtitle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Option::clear_m_sroomtitle() {
  if (m_sroomtitle_ != &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_->clear();
  }
  clear_has_m_sroomtitle();
}
inline const ::std::string& Option::m_sroomtitle() const {
  return *m_sroomtitle_;
}
inline void Option::set_m_sroomtitle(const ::std::string& value) {
  set_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_ = new ::std::string;
  }
  m_sroomtitle_->assign(value);
}
inline void Option::set_m_sroomtitle(const char* value) {
  set_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_ = new ::std::string;
  }
  m_sroomtitle_->assign(value);
}
inline void Option::set_m_sroomtitle(const char* value, size_t size) {
  set_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_ = new ::std::string;
  }
  m_sroomtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Option::mutable_m_sroomtitle() {
  set_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_sroomtitle_ = new ::std::string;
  }
  return m_sroomtitle_;
}
inline ::std::string* Option::release_m_sroomtitle() {
  clear_has_m_sroomtitle();
  if (m_sroomtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sroomtitle_;
    m_sroomtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sPassword = 2;
inline bool Option::has_m_spassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Option::set_has_m_spassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Option::clear_has_m_spassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Option::clear_m_spassword() {
  if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
    m_spassword_->clear();
  }
  clear_has_m_spassword();
}
inline const ::std::string& Option::m_spassword() const {
  return *m_spassword_;
}
inline void Option::set_m_spassword(const ::std::string& value) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(value);
}
inline void Option::set_m_spassword(const char* value) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(value);
}
inline void Option::set_m_spassword(const char* value, size_t size) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Option::mutable_m_spassword() {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  return m_spassword_;
}
inline ::std::string* Option::release_m_spassword() {
  clear_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_spassword_;
    m_spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 m_lMaxUserCnt = 3;
inline bool Option::has_m_lmaxusercnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Option::set_has_m_lmaxusercnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Option::clear_has_m_lmaxusercnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Option::clear_m_lmaxusercnt() {
  m_lmaxusercnt_ = 0;
  clear_has_m_lmaxusercnt();
}
inline ::google::protobuf::int32 Option::m_lmaxusercnt() const {
  return m_lmaxusercnt_;
}
inline void Option::set_m_lmaxusercnt(::google::protobuf::int32 value) {
  set_has_m_lmaxusercnt();
  m_lmaxusercnt_ = value;
}

// required int32 m_lMaxPlayerUserCnt = 4;
inline bool Option::has_m_lmaxplayerusercnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Option::set_has_m_lmaxplayerusercnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Option::clear_has_m_lmaxplayerusercnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Option::clear_m_lmaxplayerusercnt() {
  m_lmaxplayerusercnt_ = 0;
  clear_has_m_lmaxplayerusercnt();
}
inline ::google::protobuf::int32 Option::m_lmaxplayerusercnt() const {
  return m_lmaxplayerusercnt_;
}
inline void Option::set_m_lmaxplayerusercnt(::google::protobuf::int32 value) {
  set_has_m_lmaxplayerusercnt();
  m_lmaxplayerusercnt_ = value;
}

// required int32 m_lMaxPlayerCardCnt = 5;
inline bool Option::has_m_lmaxplayercardcnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Option::set_has_m_lmaxplayercardcnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Option::clear_has_m_lmaxplayercardcnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Option::clear_m_lmaxplayercardcnt() {
  m_lmaxplayercardcnt_ = 0;
  clear_has_m_lmaxplayercardcnt();
}
inline ::google::protobuf::int32 Option::m_lmaxplayercardcnt() const {
  return m_lmaxplayercardcnt_;
}
inline void Option::set_m_lmaxplayercardcnt(::google::protobuf::int32 value) {
  set_has_m_lmaxplayercardcnt();
  m_lmaxplayercardcnt_ = value;
}

// required int32 m_lChoiceMode = 6;
inline bool Option::has_m_lchoicemode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Option::set_has_m_lchoicemode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Option::clear_has_m_lchoicemode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Option::clear_m_lchoicemode() {
  m_lchoicemode_ = 0;
  clear_has_m_lchoicemode();
}
inline ::google::protobuf::int32 Option::m_lchoicemode() const {
  return m_lchoicemode_;
}
inline void Option::set_m_lchoicemode(::google::protobuf::int32 value) {
  set_has_m_lchoicemode();
  m_lchoicemode_ = value;
}

// required int32 m_lRoomType = 7;
inline bool Option::has_m_lroomtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Option::set_has_m_lroomtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Option::clear_has_m_lroomtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Option::clear_m_lroomtype() {
  m_lroomtype_ = 0;
  clear_has_m_lroomtype();
}
inline ::google::protobuf::int32 Option::m_lroomtype() const {
  return m_lroomtype_;
}
inline void Option::set_m_lroomtype(::google::protobuf::int32 value) {
  set_has_m_lroomtype();
  m_lroomtype_ = value;
}

// required int32 m_lBetRule = 8;
inline bool Option::has_m_lbetrule() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Option::set_has_m_lbetrule() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Option::clear_has_m_lbetrule() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Option::clear_m_lbetrule() {
  m_lbetrule_ = 0;
  clear_has_m_lbetrule();
}
inline ::google::protobuf::int32 Option::m_lbetrule() const {
  return m_lbetrule_;
}
inline void Option::set_m_lbetrule(::google::protobuf::int32 value) {
  set_has_m_lbetrule();
  m_lbetrule_ = value;
}

// required int32 m_lBetType = 9;
inline bool Option::has_m_lbettype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Option::set_has_m_lbettype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Option::clear_has_m_lbettype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Option::clear_m_lbettype() {
  m_lbettype_ = 0;
  clear_has_m_lbettype();
}
inline ::google::protobuf::int32 Option::m_lbettype() const {
  return m_lbettype_;
}
inline void Option::set_m_lbettype(::google::protobuf::int32 value) {
  set_has_m_lbettype();
  m_lbettype_ = value;
}

// required int32 m_lAddRule = 10;
inline bool Option::has_m_laddrule() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Option::set_has_m_laddrule() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Option::clear_has_m_laddrule() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Option::clear_m_laddrule() {
  m_laddrule_ = 0;
  clear_has_m_laddrule();
}
inline ::google::protobuf::int32 Option::m_laddrule() const {
  return m_laddrule_;
}
inline void Option::set_m_laddrule(::google::protobuf::int32 value) {
  set_has_m_laddrule();
  m_laddrule_ = value;
}

// required int32 m_lRematchJoin = 11;
inline bool Option::has_m_lrematchjoin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Option::set_has_m_lrematchjoin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Option::clear_has_m_lrematchjoin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Option::clear_m_lrematchjoin() {
  m_lrematchjoin_ = 0;
  clear_has_m_lrematchjoin();
}
inline ::google::protobuf::int32 Option::m_lrematchjoin() const {
  return m_lrematchjoin_;
}
inline void Option::set_m_lrematchjoin(::google::protobuf::int32 value) {
  set_has_m_lrematchjoin();
  m_lrematchjoin_ = value;
}

// required int32 m_lLimitMoney = 12;
inline bool Option::has_m_llimitmoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Option::set_has_m_llimitmoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Option::clear_has_m_llimitmoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Option::clear_m_llimitmoney() {
  m_llimitmoney_ = 0;
  clear_has_m_llimitmoney();
}
inline ::google::protobuf::int32 Option::m_llimitmoney() const {
  return m_llimitmoney_;
}
inline void Option::set_m_llimitmoney(::google::protobuf::int32 value) {
  set_has_m_llimitmoney();
  m_llimitmoney_ = value;
}

// required sint64 m_llGameAnteMoney = 13;
inline bool Option::has_m_llgameantemoney() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Option::set_has_m_llgameantemoney() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Option::clear_has_m_llgameantemoney() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Option::clear_m_llgameantemoney() {
  m_llgameantemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llgameantemoney();
}
inline ::google::protobuf::int64 Option::m_llgameantemoney() const {
  return m_llgameantemoney_;
}
inline void Option::set_m_llgameantemoney(::google::protobuf::int64 value) {
  set_has_m_llgameantemoney();
  m_llgameantemoney_ = value;
}

// required int32 m_bEcho = 14;
inline bool Option::has_m_becho() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Option::set_has_m_becho() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Option::clear_has_m_becho() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Option::clear_m_becho() {
  m_becho_ = 0;
  clear_has_m_becho();
}
inline ::google::protobuf::int32 Option::m_becho() const {
  return m_becho_;
}
inline void Option::set_m_becho(::google::protobuf::int32 value) {
  set_has_m_becho();
  m_becho_ = value;
}

// required int32 m_lMakeUSN = 15;
inline bool Option::has_m_lmakeusn() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Option::set_has_m_lmakeusn() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Option::clear_has_m_lmakeusn() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Option::clear_m_lmakeusn() {
  m_lmakeusn_ = 0;
  clear_has_m_lmakeusn();
}
inline ::google::protobuf::int32 Option::m_lmakeusn() const {
  return m_lmakeusn_;
}
inline void Option::set_m_lmakeusn(::google::protobuf::int32 value) {
  set_has_m_lmakeusn();
  m_lmakeusn_ = value;
}

// required int32 m_lCategory = 16;
inline bool Option::has_m_lcategory() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Option::set_has_m_lcategory() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Option::clear_has_m_lcategory() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Option::clear_m_lcategory() {
  m_lcategory_ = 0;
  clear_has_m_lcategory();
}
inline ::google::protobuf::int32 Option::m_lcategory() const {
  return m_lcategory_;
}
inline void Option::set_m_lcategory(::google::protobuf::int32 value) {
  set_has_m_lcategory();
  m_lcategory_ = value;
}

// required int32 m_lChannelID = 17;
inline bool Option::has_m_lchannelid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Option::set_has_m_lchannelid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Option::clear_has_m_lchannelid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Option::clear_m_lchannelid() {
  m_lchannelid_ = 0;
  clear_has_m_lchannelid();
}
inline ::google::protobuf::int32 Option::m_lchannelid() const {
  return m_lchannelid_;
}
inline void Option::set_m_lchannelid(::google::protobuf::int32 value) {
  set_has_m_lchannelid();
  m_lchannelid_ = value;
}

// required sint64 m_llAnteMoney = 18;
inline bool Option::has_m_llantemoney() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Option::set_has_m_llantemoney() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Option::clear_has_m_llantemoney() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Option::clear_m_llantemoney() {
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llantemoney();
}
inline ::google::protobuf::int64 Option::m_llantemoney() const {
  return m_llantemoney_;
}
inline void Option::set_m_llantemoney(::google::protobuf::int64 value) {
  set_has_m_llantemoney();
  m_llantemoney_ = value;
}

// -------------------------------------------------------------------

// BettingMsg

// required int32 m_lUSN = 1;
inline bool BettingMsg::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BettingMsg::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BettingMsg::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BettingMsg::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 BettingMsg::m_lusn() const {
  return m_lusn_;
}
inline void BettingMsg::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool BettingMsg::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BettingMsg::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BettingMsg::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BettingMsg::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 BettingMsg::m_nindex() const {
  return m_nindex_;
}
inline void BettingMsg::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required int32 m_BetType = 3;
inline bool BettingMsg::has_m_bettype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BettingMsg::set_has_m_bettype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BettingMsg::clear_has_m_bettype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BettingMsg::clear_m_bettype() {
  m_bettype_ = 0;
  clear_has_m_bettype();
}
inline ::google::protobuf::int32 BettingMsg::m_bettype() const {
  return m_bettype_;
}
inline void BettingMsg::set_m_bettype(::google::protobuf::int32 value) {
  set_has_m_bettype();
  m_bettype_ = value;
}

// required int32 m_bBettingMoney = 4;
inline bool BettingMsg::has_m_bbettingmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BettingMsg::set_has_m_bbettingmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BettingMsg::clear_has_m_bbettingmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BettingMsg::clear_m_bbettingmoney() {
  m_bbettingmoney_ = 0;
  clear_has_m_bbettingmoney();
}
inline ::google::protobuf::int32 BettingMsg::m_bbettingmoney() const {
  return m_bbettingmoney_;
}
inline void BettingMsg::set_m_bbettingmoney(::google::protobuf::int32 value) {
  set_has_m_bbettingmoney();
  m_bbettingmoney_ = value;
}

// required int32 m_bMoneyLack = 5;
inline bool BettingMsg::has_m_bmoneylack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BettingMsg::set_has_m_bmoneylack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BettingMsg::clear_has_m_bmoneylack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BettingMsg::clear_m_bmoneylack() {
  m_bmoneylack_ = 0;
  clear_has_m_bmoneylack();
}
inline ::google::protobuf::int32 BettingMsg::m_bmoneylack() const {
  return m_bmoneylack_;
}
inline void BettingMsg::set_m_bmoneylack(::google::protobuf::int32 value) {
  set_has_m_bmoneylack();
  m_bmoneylack_ = value;
}

// required int32 m_bCallMoneyZero = 6;
inline bool BettingMsg::has_m_bcallmoneyzero() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BettingMsg::set_has_m_bcallmoneyzero() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BettingMsg::clear_has_m_bcallmoneyzero() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BettingMsg::clear_m_bcallmoneyzero() {
  m_bcallmoneyzero_ = 0;
  clear_has_m_bcallmoneyzero();
}
inline ::google::protobuf::int32 BettingMsg::m_bcallmoneyzero() const {
  return m_bcallmoneyzero_;
}
inline void BettingMsg::set_m_bcallmoneyzero(::google::protobuf::int32 value) {
  set_has_m_bcallmoneyzero();
  m_bcallmoneyzero_ = value;
}

// required int64 m_llCallMoney = 7;
inline bool BettingMsg::has_m_llcallmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BettingMsg::set_has_m_llcallmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BettingMsg::clear_has_m_llcallmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BettingMsg::clear_m_llcallmoney() {
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallmoney();
}
inline ::google::protobuf::int64 BettingMsg::m_llcallmoney() const {
  return m_llcallmoney_;
}
inline void BettingMsg::set_m_llcallmoney(::google::protobuf::int64 value) {
  set_has_m_llcallmoney();
  m_llcallmoney_ = value;
}

// required int64 m_llRaiseMoney = 8;
inline bool BettingMsg::has_m_llraisemoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BettingMsg::set_has_m_llraisemoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BettingMsg::clear_has_m_llraisemoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BettingMsg::clear_m_llraisemoney() {
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llraisemoney();
}
inline ::google::protobuf::int64 BettingMsg::m_llraisemoney() const {
  return m_llraisemoney_;
}
inline void BettingMsg::set_m_llraisemoney(::google::protobuf::int64 value) {
  set_has_m_llraisemoney();
  m_llraisemoney_ = value;
}

// -------------------------------------------------------------------

// BettingMsgTable

// repeated .Game_Poker.BettingMsg BettingMsgTable = 1;
inline int BettingMsgTable::bettingmsgtable_size() const {
  return bettingmsgtable_.size();
}
inline void BettingMsgTable::clear_bettingmsgtable() {
  bettingmsgtable_.Clear();
}
inline const ::Game_Poker::BettingMsg& BettingMsgTable::bettingmsgtable(int index) const {
  return bettingmsgtable_.Get(index);
}
inline ::Game_Poker::BettingMsg* BettingMsgTable::mutable_bettingmsgtable(int index) {
  return bettingmsgtable_.Mutable(index);
}
inline ::Game_Poker::BettingMsg* BettingMsgTable::add_bettingmsgtable() {
  return bettingmsgtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::BettingMsg >&
BettingMsgTable::bettingmsgtable() const {
  return bettingmsgtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::BettingMsg >*
BettingMsgTable::mutable_bettingmsgtable() {
  return &bettingmsgtable_;
}

// -------------------------------------------------------------------

// MoneyTable

// repeated .Game_Poker.Money MoneyTable = 1;
inline int MoneyTable::moneytable_size() const {
  return moneytable_.size();
}
inline void MoneyTable::clear_moneytable() {
  moneytable_.Clear();
}
inline const ::Game_Poker::Money& MoneyTable::moneytable(int index) const {
  return moneytable_.Get(index);
}
inline ::Game_Poker::Money* MoneyTable::mutable_moneytable(int index) {
  return moneytable_.Mutable(index);
}
inline ::Game_Poker::Money* MoneyTable::add_moneytable() {
  return moneytable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
MoneyTable::moneytable() const {
  return moneytable_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
MoneyTable::mutable_moneytable() {
  return &moneytable_;
}

// -------------------------------------------------------------------

// CardTable

// repeated .Game_Poker.Cards CardTable = 1;
inline int CardTable::cardtable_size() const {
  return cardtable_.size();
}
inline void CardTable::clear_cardtable() {
  cardtable_.Clear();
}
inline const ::Game_Poker::Cards& CardTable::cardtable(int index) const {
  return cardtable_.Get(index);
}
inline ::Game_Poker::Cards* CardTable::mutable_cardtable(int index) {
  return cardtable_.Mutable(index);
}
inline ::Game_Poker::Cards* CardTable::add_cardtable() {
  return cardtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
CardTable::cardtable() const {
  return cardtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
CardTable::mutable_cardtable() {
  return &cardtable_;
}

// -------------------------------------------------------------------

// UITable

// repeated .Game_Poker.UserInfo UITable = 1;
inline int UITable::uitable_size() const {
  return uitable_.size();
}
inline void UITable::clear_uitable() {
  uitable_.Clear();
}
inline const ::Game_Poker::UserInfo& UITable::uitable(int index) const {
  return uitable_.Get(index);
}
inline ::Game_Poker::UserInfo* UITable::mutable_uitable(int index) {
  return uitable_.Mutable(index);
}
inline ::Game_Poker::UserInfo* UITable::add_uitable() {
  return uitable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo >&
UITable::uitable() const {
  return uitable_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo >*
UITable::mutable_uitable() {
  return &uitable_;
}

// -------------------------------------------------------------------

// RCRoomData

// required int32 m_lGameMaster = 1;
inline bool RCRoomData::has_m_lgamemaster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RCRoomData::set_has_m_lgamemaster() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RCRoomData::clear_has_m_lgamemaster() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RCRoomData::clear_m_lgamemaster() {
  m_lgamemaster_ = 0;
  clear_has_m_lgamemaster();
}
inline ::google::protobuf::int32 RCRoomData::m_lgamemaster() const {
  return m_lgamemaster_;
}
inline void RCRoomData::set_m_lgamemaster(::google::protobuf::int32 value) {
  set_has_m_lgamemaster();
  m_lgamemaster_ = value;
}

// required int32 m_lRoomIndex = 2;
inline bool RCRoomData::has_m_lroomindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RCRoomData::set_has_m_lroomindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RCRoomData::clear_has_m_lroomindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RCRoomData::clear_m_lroomindex() {
  m_lroomindex_ = 0;
  clear_has_m_lroomindex();
}
inline ::google::protobuf::int32 RCRoomData::m_lroomindex() const {
  return m_lroomindex_;
}
inline void RCRoomData::set_m_lroomindex(::google::protobuf::int32 value) {
  set_has_m_lroomindex();
  m_lroomindex_ = value;
}

// required int32 m_lState = 3;
inline bool RCRoomData::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RCRoomData::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RCRoomData::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RCRoomData::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 RCRoomData::m_lstate() const {
  return m_lstate_;
}
inline void RCRoomData::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required .Game_Poker.Option m_option = 4;
inline bool RCRoomData::has_m_option() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RCRoomData::set_has_m_option() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RCRoomData::clear_has_m_option() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RCRoomData::clear_m_option() {
  if (m_option_ != NULL) m_option_->::Game_Poker::Option::Clear();
  clear_has_m_option();
}
inline const ::Game_Poker::Option& RCRoomData::m_option() const {
  return m_option_ != NULL ? *m_option_ : *default_instance_->m_option_;
}
inline ::Game_Poker::Option* RCRoomData::mutable_m_option() {
  set_has_m_option();
  if (m_option_ == NULL) m_option_ = new ::Game_Poker::Option;
  return m_option_;
}
inline ::Game_Poker::Option* RCRoomData::release_m_option() {
  clear_has_m_option();
  ::Game_Poker::Option* temp = m_option_;
  m_option_ = NULL;
  return temp;
}

// required .Game_Poker.UITable m_tblUI = 5;
inline bool RCRoomData::has_m_tblui() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RCRoomData::set_has_m_tblui() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RCRoomData::clear_has_m_tblui() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RCRoomData::clear_m_tblui() {
  if (m_tblui_ != NULL) m_tblui_->::Game_Poker::UITable::Clear();
  clear_has_m_tblui();
}
inline const ::Game_Poker::UITable& RCRoomData::m_tblui() const {
  return m_tblui_ != NULL ? *m_tblui_ : *default_instance_->m_tblui_;
}
inline ::Game_Poker::UITable* RCRoomData::mutable_m_tblui() {
  set_has_m_tblui();
  if (m_tblui_ == NULL) m_tblui_ = new ::Game_Poker::UITable;
  return m_tblui_;
}
inline ::Game_Poker::UITable* RCRoomData::release_m_tblui() {
  clear_has_m_tblui();
  ::Game_Poker::UITable* temp = m_tblui_;
  m_tblui_ = NULL;
  return temp;
}

// required .Game_Poker.CardTable m_tblCard = 6;
inline bool RCRoomData::has_m_tblcard() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RCRoomData::set_has_m_tblcard() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RCRoomData::clear_has_m_tblcard() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RCRoomData::clear_m_tblcard() {
  if (m_tblcard_ != NULL) m_tblcard_->::Game_Poker::CardTable::Clear();
  clear_has_m_tblcard();
}
inline const ::Game_Poker::CardTable& RCRoomData::m_tblcard() const {
  return m_tblcard_ != NULL ? *m_tblcard_ : *default_instance_->m_tblcard_;
}
inline ::Game_Poker::CardTable* RCRoomData::mutable_m_tblcard() {
  set_has_m_tblcard();
  if (m_tblcard_ == NULL) m_tblcard_ = new ::Game_Poker::CardTable;
  return m_tblcard_;
}
inline ::Game_Poker::CardTable* RCRoomData::release_m_tblcard() {
  clear_has_m_tblcard();
  ::Game_Poker::CardTable* temp = m_tblcard_;
  m_tblcard_ = NULL;
  return temp;
}

// required .Game_Poker.MoneyTable m_tblMoney = 7;
inline bool RCRoomData::has_m_tblmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RCRoomData::set_has_m_tblmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RCRoomData::clear_has_m_tblmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RCRoomData::clear_m_tblmoney() {
  if (m_tblmoney_ != NULL) m_tblmoney_->::Game_Poker::MoneyTable::Clear();
  clear_has_m_tblmoney();
}
inline const ::Game_Poker::MoneyTable& RCRoomData::m_tblmoney() const {
  return m_tblmoney_ != NULL ? *m_tblmoney_ : *default_instance_->m_tblmoney_;
}
inline ::Game_Poker::MoneyTable* RCRoomData::mutable_m_tblmoney() {
  set_has_m_tblmoney();
  if (m_tblmoney_ == NULL) m_tblmoney_ = new ::Game_Poker::MoneyTable;
  return m_tblmoney_;
}
inline ::Game_Poker::MoneyTable* RCRoomData::release_m_tblmoney() {
  clear_has_m_tblmoney();
  ::Game_Poker::MoneyTable* temp = m_tblmoney_;
  m_tblmoney_ = NULL;
  return temp;
}

// required .Game_Poker.BettingMsgTable m_tblBettingMsg = 8;
inline bool RCRoomData::has_m_tblbettingmsg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RCRoomData::set_has_m_tblbettingmsg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RCRoomData::clear_has_m_tblbettingmsg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RCRoomData::clear_m_tblbettingmsg() {
  if (m_tblbettingmsg_ != NULL) m_tblbettingmsg_->::Game_Poker::BettingMsgTable::Clear();
  clear_has_m_tblbettingmsg();
}
inline const ::Game_Poker::BettingMsgTable& RCRoomData::m_tblbettingmsg() const {
  return m_tblbettingmsg_ != NULL ? *m_tblbettingmsg_ : *default_instance_->m_tblbettingmsg_;
}
inline ::Game_Poker::BettingMsgTable* RCRoomData::mutable_m_tblbettingmsg() {
  set_has_m_tblbettingmsg();
  if (m_tblbettingmsg_ == NULL) m_tblbettingmsg_ = new ::Game_Poker::BettingMsgTable;
  return m_tblbettingmsg_;
}
inline ::Game_Poker::BettingMsgTable* RCRoomData::release_m_tblbettingmsg() {
  clear_has_m_tblbettingmsg();
  ::Game_Poker::BettingMsgTable* temp = m_tblbettingmsg_;
  m_tblbettingmsg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MsgCS_Entry

// required int32 m_nVersion = 1;
inline bool MsgCS_Entry::has_m_nversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_Entry::set_has_m_nversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_Entry::clear_has_m_nversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_Entry::clear_m_nversion() {
  m_nversion_ = 0;
  clear_has_m_nversion();
}
inline ::google::protobuf::int32 MsgCS_Entry::m_nversion() const {
  return m_nversion_;
}
inline void MsgCS_Entry::set_m_nversion(::google::protobuf::int32 value) {
  set_has_m_nversion();
  m_nversion_ = value;
}

// required sint32 m_bWelcomeSound = 2;
inline bool MsgCS_Entry::has_m_bwelcomesound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCS_Entry::set_has_m_bwelcomesound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCS_Entry::clear_has_m_bwelcomesound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCS_Entry::clear_m_bwelcomesound() {
  m_bwelcomesound_ = 0;
  clear_has_m_bwelcomesound();
}
inline ::google::protobuf::int32 MsgCS_Entry::m_bwelcomesound() const {
  return m_bwelcomesound_;
}
inline void MsgCS_Entry::set_m_bwelcomesound(::google::protobuf::int32 value) {
  set_has_m_bwelcomesound();
  m_bwelcomesound_ = value;
}

// required sint32 m_lSoundType = 3;
inline bool MsgCS_Entry::has_m_lsoundtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgCS_Entry::set_has_m_lsoundtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgCS_Entry::clear_has_m_lsoundtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgCS_Entry::clear_m_lsoundtype() {
  m_lsoundtype_ = 0;
  clear_has_m_lsoundtype();
}
inline ::google::protobuf::int32 MsgCS_Entry::m_lsoundtype() const {
  return m_lsoundtype_;
}
inline void MsgCS_Entry::set_m_lsoundtype(::google::protobuf::int32 value) {
  set_has_m_lsoundtype();
  m_lsoundtype_ = value;
}

// required string m_sNickName = 4;
inline bool MsgCS_Entry::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgCS_Entry::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgCS_Entry::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgCS_Entry::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& MsgCS_Entry::m_snickname() const {
  return *m_snickname_;
}
inline void MsgCS_Entry::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void MsgCS_Entry::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void MsgCS_Entry::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgCS_Entry::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* MsgCS_Entry::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string m_sAvt = 5;
inline bool MsgCS_Entry::has_m_savt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgCS_Entry::set_has_m_savt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgCS_Entry::clear_has_m_savt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgCS_Entry::clear_m_savt() {
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    m_savt_->clear();
  }
  clear_has_m_savt();
}
inline const ::std::string& MsgCS_Entry::m_savt() const {
  return *m_savt_;
}
inline void MsgCS_Entry::set_m_savt(const ::std::string& value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void MsgCS_Entry::set_m_savt(const char* value) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(value);
}
inline void MsgCS_Entry::set_m_savt(const char* value, size_t size) {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  m_savt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgCS_Entry::mutable_m_savt() {
  set_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    m_savt_ = new ::std::string;
  }
  return m_savt_;
}
inline ::std::string* MsgCS_Entry::release_m_savt() {
  clear_has_m_savt();
  if (m_savt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_savt_;
    m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint32 m_lCLevel = 6;
inline bool MsgCS_Entry::has_m_lclevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgCS_Entry::set_has_m_lclevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgCS_Entry::clear_has_m_lclevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgCS_Entry::clear_m_lclevel() {
  m_lclevel_ = 0;
  clear_has_m_lclevel();
}
inline ::google::protobuf::int32 MsgCS_Entry::m_lclevel() const {
  return m_lclevel_;
}
inline void MsgCS_Entry::set_m_lclevel(::google::protobuf::int32 value) {
  set_has_m_lclevel();
  m_lclevel_ = value;
}

// required sint32 m_lSex = 7;
inline bool MsgCS_Entry::has_m_lsex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgCS_Entry::set_has_m_lsex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgCS_Entry::clear_has_m_lsex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgCS_Entry::clear_m_lsex() {
  m_lsex_ = 0;
  clear_has_m_lsex();
}
inline ::google::protobuf::int32 MsgCS_Entry::m_lsex() const {
  return m_lsex_;
}
inline void MsgCS_Entry::set_m_lsex(::google::protobuf::int32 value) {
  set_has_m_lsex();
  m_lsex_ = value;
}

// -------------------------------------------------------------------

// MsgCS_Observe

// -------------------------------------------------------------------

// MsgCS_Start

// -------------------------------------------------------------------

// MsgCS_SelectedCardReq

// required sint32 m_lCardIdx = 1;
inline bool MsgCS_SelectedCardReq::has_m_lcardidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_SelectedCardReq::set_has_m_lcardidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_SelectedCardReq::clear_has_m_lcardidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_SelectedCardReq::clear_m_lcardidx() {
  m_lcardidx_ = 0;
  clear_has_m_lcardidx();
}
inline ::google::protobuf::int32 MsgCS_SelectedCardReq::m_lcardidx() const {
  return m_lcardidx_;
}
inline void MsgCS_SelectedCardReq::set_m_lcardidx(::google::protobuf::int32 value) {
  set_has_m_lcardidx();
  m_lcardidx_ = value;
}

// -------------------------------------------------------------------

// MsgCS_BettingReq

// required sint32 m_lBetType = 1;
inline bool MsgCS_BettingReq::has_m_lbettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_BettingReq::set_has_m_lbettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_BettingReq::clear_has_m_lbettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_BettingReq::clear_m_lbettype() {
  m_lbettype_ = 0;
  clear_has_m_lbettype();
}
inline ::google::protobuf::int32 MsgCS_BettingReq::m_lbettype() const {
  return m_lbettype_;
}
inline void MsgCS_BettingReq::set_m_lbettype(::google::protobuf::int32 value) {
  set_has_m_lbettype();
  m_lbettype_ = value;
}

// -------------------------------------------------------------------

// MsgCS_ChoiceRemoveCard

// required sint32 m_lUSN = 1;
inline bool MsgCS_ChoiceRemoveCard::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_ChoiceRemoveCard::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_ChoiceRemoveCard::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_ChoiceRemoveCard::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgCS_ChoiceRemoveCard::m_lusn() const {
  return m_lusn_;
}
inline void MsgCS_ChoiceRemoveCard::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nRemoveCardIndex = 2;
inline bool MsgCS_ChoiceRemoveCard::has_m_nremovecardindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCS_ChoiceRemoveCard::set_has_m_nremovecardindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCS_ChoiceRemoveCard::clear_has_m_nremovecardindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCS_ChoiceRemoveCard::clear_m_nremovecardindex() {
  m_nremovecardindex_ = 0;
  clear_has_m_nremovecardindex();
}
inline ::google::protobuf::int32 MsgCS_ChoiceRemoveCard::m_nremovecardindex() const {
  return m_nremovecardindex_;
}
inline void MsgCS_ChoiceRemoveCard::set_m_nremovecardindex(::google::protobuf::int32 value) {
  set_has_m_nremovecardindex();
  m_nremovecardindex_ = value;
}

// -------------------------------------------------------------------

// MsgCS_Purge

// required sint32 m_lType = 1;
inline bool MsgCS_Purge::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_Purge::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_Purge::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_Purge::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 MsgCS_Purge::m_ltype() const {
  return m_ltype_;
}
inline void MsgCS_Purge::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// required sint32 m_lPurgeUSN = 2;
inline bool MsgCS_Purge::has_m_lpurgeusn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCS_Purge::set_has_m_lpurgeusn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCS_Purge::clear_has_m_lpurgeusn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCS_Purge::clear_m_lpurgeusn() {
  m_lpurgeusn_ = 0;
  clear_has_m_lpurgeusn();
}
inline ::google::protobuf::int32 MsgCS_Purge::m_lpurgeusn() const {
  return m_lpurgeusn_;
}
inline void MsgCS_Purge::set_m_lpurgeusn(::google::protobuf::int32 value) {
  set_has_m_lpurgeusn();
  m_lpurgeusn_ = value;
}

// -------------------------------------------------------------------

// MsgCS_Abuse

// required sint32 m_lType = 1;
inline bool MsgCS_Abuse::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_Abuse::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_Abuse::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_Abuse::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 MsgCS_Abuse::m_ltype() const {
  return m_ltype_;
}
inline void MsgCS_Abuse::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// required string m_sDay = 2;
inline bool MsgCS_Abuse::has_m_sday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCS_Abuse::set_has_m_sday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCS_Abuse::clear_has_m_sday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCS_Abuse::clear_m_sday() {
  if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
    m_sday_->clear();
  }
  clear_has_m_sday();
}
inline const ::std::string& MsgCS_Abuse::m_sday() const {
  return *m_sday_;
}
inline void MsgCS_Abuse::set_m_sday(const ::std::string& value) {
  set_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    m_sday_ = new ::std::string;
  }
  m_sday_->assign(value);
}
inline void MsgCS_Abuse::set_m_sday(const char* value) {
  set_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    m_sday_ = new ::std::string;
  }
  m_sday_->assign(value);
}
inline void MsgCS_Abuse::set_m_sday(const char* value, size_t size) {
  set_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    m_sday_ = new ::std::string;
  }
  m_sday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgCS_Abuse::mutable_m_sday() {
  set_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    m_sday_ = new ::std::string;
  }
  return m_sday_;
}
inline ::std::string* MsgCS_Abuse::release_m_sday() {
  clear_has_m_sday();
  if (m_sday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sday_;
    m_sday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgCS_AskPurgeVote

// required sint32 m_lPurgeUSN = 1;
inline bool MsgCS_AskPurgeVote::has_m_lpurgeusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_AskPurgeVote::set_has_m_lpurgeusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_AskPurgeVote::clear_has_m_lpurgeusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_AskPurgeVote::clear_m_lpurgeusn() {
  m_lpurgeusn_ = 0;
  clear_has_m_lpurgeusn();
}
inline ::google::protobuf::int32 MsgCS_AskPurgeVote::m_lpurgeusn() const {
  return m_lpurgeusn_;
}
inline void MsgCS_AskPurgeVote::set_m_lpurgeusn(::google::protobuf::int32 value) {
  set_has_m_lpurgeusn();
  m_lpurgeusn_ = value;
}

// -------------------------------------------------------------------

// MsgCS_AnswerPurgeVote

// required sint32 m_lAnswer = 1;
inline bool MsgCS_AnswerPurgeVote::has_m_lanswer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_AnswerPurgeVote::set_has_m_lanswer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_AnswerPurgeVote::clear_has_m_lanswer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_AnswerPurgeVote::clear_m_lanswer() {
  m_lanswer_ = 0;
  clear_has_m_lanswer();
}
inline ::google::protobuf::int32 MsgCS_AnswerPurgeVote::m_lanswer() const {
  return m_lanswer_;
}
inline void MsgCS_AnswerPurgeVote::set_m_lanswer(::google::protobuf::int32 value) {
  set_has_m_lanswer();
  m_lanswer_ = value;
}

// -------------------------------------------------------------------

// MsgCS_WaitingUserTicketReq

// required int32 m_nType = 1;
inline bool MsgCS_WaitingUserTicketReq::has_m_ntype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_WaitingUserTicketReq::set_has_m_ntype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_WaitingUserTicketReq::clear_has_m_ntype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_WaitingUserTicketReq::clear_m_ntype() {
  m_ntype_ = 0;
  clear_has_m_ntype();
}
inline ::google::protobuf::int32 MsgCS_WaitingUserTicketReq::m_ntype() const {
  return m_ntype_;
}
inline void MsgCS_WaitingUserTicketReq::set_m_ntype(::google::protobuf::int32 value) {
  set_has_m_ntype();
  m_ntype_ = value;
}

// required sint32 m_bValue = 2;
inline bool MsgCS_WaitingUserTicketReq::has_m_bvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCS_WaitingUserTicketReq::set_has_m_bvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCS_WaitingUserTicketReq::clear_has_m_bvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCS_WaitingUserTicketReq::clear_m_bvalue() {
  m_bvalue_ = 0;
  clear_has_m_bvalue();
}
inline ::google::protobuf::int32 MsgCS_WaitingUserTicketReq::m_bvalue() const {
  return m_bvalue_;
}
inline void MsgCS_WaitingUserTicketReq::set_m_bvalue(::google::protobuf::int32 value) {
  set_has_m_bvalue();
  m_bvalue_ = value;
}

// -------------------------------------------------------------------

// MsgCS_UpdateWaitingUserInfoReq

// -------------------------------------------------------------------

// MsgCS_SoundType

// required sint32 m_lSoundType = 1;
inline bool MsgCS_SoundType::has_m_lsoundtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_SoundType::set_has_m_lsoundtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_SoundType::clear_has_m_lsoundtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_SoundType::clear_m_lsoundtype() {
  m_lsoundtype_ = 0;
  clear_has_m_lsoundtype();
}
inline ::google::protobuf::int32 MsgCS_SoundType::m_lsoundtype() const {
  return m_lsoundtype_;
}
inline void MsgCS_SoundType::set_m_lsoundtype(::google::protobuf::int32 value) {
  set_has_m_lsoundtype();
  m_lsoundtype_ = value;
}

// -------------------------------------------------------------------

// MsgCS_ExitQue

// required sint32 m_lExit = 1;
inline bool MsgCS_ExitQue::has_m_lexit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_ExitQue::set_has_m_lexit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_ExitQue::clear_has_m_lexit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_ExitQue::clear_m_lexit() {
  m_lexit_ = 0;
  clear_has_m_lexit();
}
inline ::google::protobuf::int32 MsgCS_ExitQue::m_lexit() const {
  return m_lexit_;
}
inline void MsgCS_ExitQue::set_m_lexit(::google::protobuf::int32 value) {
  set_has_m_lexit();
  m_lexit_ = value;
}

// required sint32 m_bAction = 2;
inline bool MsgCS_ExitQue::has_m_baction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCS_ExitQue::set_has_m_baction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCS_ExitQue::clear_has_m_baction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCS_ExitQue::clear_m_baction() {
  m_baction_ = 0;
  clear_has_m_baction();
}
inline ::google::protobuf::int32 MsgCS_ExitQue::m_baction() const {
  return m_baction_;
}
inline void MsgCS_ExitQue::set_m_baction(::google::protobuf::int32 value) {
  set_has_m_baction();
  m_baction_ = value;
}

// -------------------------------------------------------------------

// MsgCS_Continue

// required sint32 m_lExit = 1;
inline bool MsgCS_Continue::has_m_lexit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_Continue::set_has_m_lexit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_Continue::clear_has_m_lexit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_Continue::clear_m_lexit() {
  m_lexit_ = 0;
  clear_has_m_lexit();
}
inline ::google::protobuf::int32 MsgCS_Continue::m_lexit() const {
  return m_lexit_;
}
inline void MsgCS_Continue::set_m_lexit(::google::protobuf::int32 value) {
  set_has_m_lexit();
  m_lexit_ = value;
}

// -------------------------------------------------------------------

// MsgCS_RuleSet

// required int32 m_nRuleIdx = 1;
inline bool MsgCS_RuleSet::has_m_nruleidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_RuleSet::set_has_m_nruleidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_RuleSet::clear_has_m_nruleidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_RuleSet::clear_m_nruleidx() {
  m_nruleidx_ = 0;
  clear_has_m_nruleidx();
}
inline ::google::protobuf::int32 MsgCS_RuleSet::m_nruleidx() const {
  return m_nruleidx_;
}
inline void MsgCS_RuleSet::set_m_nruleidx(::google::protobuf::int32 value) {
  set_has_m_nruleidx();
  m_nruleidx_ = value;
}

// -------------------------------------------------------------------

// MsgCS_GameMasterCall

// -------------------------------------------------------------------

// MsgCS_FieldReserved

// required int32 m_nReserved1 = 1;
inline bool MsgCS_FieldReserved::has_m_nreserved1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_FieldReserved::set_has_m_nreserved1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_FieldReserved::clear_has_m_nreserved1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_FieldReserved::clear_m_nreserved1() {
  m_nreserved1_ = 0;
  clear_has_m_nreserved1();
}
inline ::google::protobuf::int32 MsgCS_FieldReserved::m_nreserved1() const {
  return m_nreserved1_;
}
inline void MsgCS_FieldReserved::set_m_nreserved1(::google::protobuf::int32 value) {
  set_has_m_nreserved1();
  m_nreserved1_ = value;
}

// required int32 m_nReserved2 = 2;
inline bool MsgCS_FieldReserved::has_m_nreserved2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCS_FieldReserved::set_has_m_nreserved2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCS_FieldReserved::clear_has_m_nreserved2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCS_FieldReserved::clear_m_nreserved2() {
  m_nreserved2_ = 0;
  clear_has_m_nreserved2();
}
inline ::google::protobuf::int32 MsgCS_FieldReserved::m_nreserved2() const {
  return m_nreserved2_;
}
inline void MsgCS_FieldReserved::set_m_nreserved2(::google::protobuf::int32 value) {
  set_has_m_nreserved2();
  m_nreserved2_ = value;
}

// -------------------------------------------------------------------

// MsgCS_JokboSet

// required sint32 m_lKey1 = 1;
inline bool MsgCS_JokboSet::has_m_lkey1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_JokboSet::set_has_m_lkey1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_JokboSet::clear_has_m_lkey1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_JokboSet::clear_m_lkey1() {
  m_lkey1_ = 0;
  clear_has_m_lkey1();
}
inline ::google::protobuf::int32 MsgCS_JokboSet::m_lkey1() const {
  return m_lkey1_;
}
inline void MsgCS_JokboSet::set_m_lkey1(::google::protobuf::int32 value) {
  set_has_m_lkey1();
  m_lkey1_ = value;
}

// required sint32 m_lKey2 = 2;
inline bool MsgCS_JokboSet::has_m_lkey2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCS_JokboSet::set_has_m_lkey2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCS_JokboSet::clear_has_m_lkey2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCS_JokboSet::clear_m_lkey2() {
  m_lkey2_ = 0;
  clear_has_m_lkey2();
}
inline ::google::protobuf::int32 MsgCS_JokboSet::m_lkey2() const {
  return m_lkey2_;
}
inline void MsgCS_JokboSet::set_m_lkey2(::google::protobuf::int32 value) {
  set_has_m_lkey2();
  m_lkey2_ = value;
}

// required sint32 m_lKey3 = 3;
inline bool MsgCS_JokboSet::has_m_lkey3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgCS_JokboSet::set_has_m_lkey3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgCS_JokboSet::clear_has_m_lkey3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgCS_JokboSet::clear_m_lkey3() {
  m_lkey3_ = 0;
  clear_has_m_lkey3();
}
inline ::google::protobuf::int32 MsgCS_JokboSet::m_lkey3() const {
  return m_lkey3_;
}
inline void MsgCS_JokboSet::set_m_lkey3(::google::protobuf::int32 value) {
  set_has_m_lkey3();
  m_lkey3_ = value;
}

// required sint32 m_lKey4 = 4;
inline bool MsgCS_JokboSet::has_m_lkey4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgCS_JokboSet::set_has_m_lkey4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgCS_JokboSet::clear_has_m_lkey4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgCS_JokboSet::clear_m_lkey4() {
  m_lkey4_ = 0;
  clear_has_m_lkey4();
}
inline ::google::protobuf::int32 MsgCS_JokboSet::m_lkey4() const {
  return m_lkey4_;
}
inline void MsgCS_JokboSet::set_m_lkey4(::google::protobuf::int32 value) {
  set_has_m_lkey4();
  m_lkey4_ = value;
}

// required sint32 m_lKey5 = 5;
inline bool MsgCS_JokboSet::has_m_lkey5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgCS_JokboSet::set_has_m_lkey5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgCS_JokboSet::clear_has_m_lkey5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgCS_JokboSet::clear_m_lkey5() {
  m_lkey5_ = 0;
  clear_has_m_lkey5();
}
inline ::google::protobuf::int32 MsgCS_JokboSet::m_lkey5() const {
  return m_lkey5_;
}
inline void MsgCS_JokboSet::set_m_lkey5(::google::protobuf::int32 value) {
  set_has_m_lkey5();
  m_lkey5_ = value;
}

// -------------------------------------------------------------------

// MsgCS_TestKeySetting

// required uint32 m_nChar = 1;
inline bool MsgCS_TestKeySetting::has_m_nchar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_TestKeySetting::set_has_m_nchar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_TestKeySetting::clear_has_m_nchar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_TestKeySetting::clear_m_nchar() {
  m_nchar_ = 0u;
  clear_has_m_nchar();
}
inline ::google::protobuf::uint32 MsgCS_TestKeySetting::m_nchar() const {
  return m_nchar_;
}
inline void MsgCS_TestKeySetting::set_m_nchar(::google::protobuf::uint32 value) {
  set_has_m_nchar();
  m_nchar_ = value;
}

// -------------------------------------------------------------------

// MsgCS_CheckNotice

// required int32 m_nType = 1;
inline bool MsgCS_CheckNotice::has_m_ntype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_CheckNotice::set_has_m_ntype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_CheckNotice::clear_has_m_ntype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_CheckNotice::clear_m_ntype() {
  m_ntype_ = 0;
  clear_has_m_ntype();
}
inline ::google::protobuf::int32 MsgCS_CheckNotice::m_ntype() const {
  return m_ntype_;
}
inline void MsgCS_CheckNotice::set_m_ntype(::google::protobuf::int32 value) {
  set_has_m_ntype();
  m_ntype_ = value;
}

// -------------------------------------------------------------------

// MsgCS_Ack

// required int32 m_nTagID = 1;
inline bool MsgCS_Ack::has_m_ntagid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCS_Ack::set_has_m_ntagid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCS_Ack::clear_has_m_ntagid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCS_Ack::clear_m_ntagid() {
  m_ntagid_ = 0;
  clear_has_m_ntagid();
}
inline ::google::protobuf::int32 MsgCS_Ack::m_ntagid() const {
  return m_ntagid_;
}
inline void MsgCS_Ack::set_m_ntagid(::google::protobuf::int32 value) {
  set_has_m_ntagid();
  m_ntagid_ = value;
}

// -------------------------------------------------------------------

// MsgCS_Ping

// -------------------------------------------------------------------

// MsgSC_UserJoinAns

// required sint32 m_lState = 1;
inline bool MsgSC_UserJoinAns::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_UserJoinAns::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_UserJoinAns::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_UserJoinAns::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 MsgSC_UserJoinAns::m_lstate() const {
  return m_lstate_;
}
inline void MsgSC_UserJoinAns::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required int32 m_nEnter = 2;
inline bool MsgSC_UserJoinAns::has_m_nenter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_UserJoinAns::set_has_m_nenter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_UserJoinAns::clear_has_m_nenter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_UserJoinAns::clear_m_nenter() {
  m_nenter_ = 0;
  clear_has_m_nenter();
}
inline ::google::protobuf::int32 MsgSC_UserJoinAns::m_nenter() const {
  return m_nenter_;
}
inline void MsgSC_UserJoinAns::set_m_nenter(::google::protobuf::int32 value) {
  set_has_m_nenter();
  m_nenter_ = value;
}

// required int32 m_nSet = 3;
inline bool MsgSC_UserJoinAns::has_m_nset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_UserJoinAns::set_has_m_nset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_UserJoinAns::clear_has_m_nset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_UserJoinAns::clear_m_nset() {
  m_nset_ = 0;
  clear_has_m_nset();
}
inline ::google::protobuf::int32 MsgSC_UserJoinAns::m_nset() const {
  return m_nset_;
}
inline void MsgSC_UserJoinAns::set_m_nset(::google::protobuf::int32 value) {
  set_has_m_nset();
  m_nset_ = value;
}

// required int32 m_lChannel_idx = 4;
inline bool MsgSC_UserJoinAns::has_m_lchannel_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_UserJoinAns::set_has_m_lchannel_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_UserJoinAns::clear_has_m_lchannel_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_UserJoinAns::clear_m_lchannel_idx() {
  m_lchannel_idx_ = 0;
  clear_has_m_lchannel_idx();
}
inline ::google::protobuf::int32 MsgSC_UserJoinAns::m_lchannel_idx() const {
  return m_lchannel_idx_;
}
inline void MsgSC_UserJoinAns::set_m_lchannel_idx(::google::protobuf::int32 value) {
  set_has_m_lchannel_idx();
  m_lchannel_idx_ = value;
}

// required sint32 m_lOwnerUSN = 5;
inline bool MsgSC_UserJoinAns::has_m_lownerusn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgSC_UserJoinAns::set_has_m_lownerusn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgSC_UserJoinAns::clear_has_m_lownerusn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgSC_UserJoinAns::clear_m_lownerusn() {
  m_lownerusn_ = 0;
  clear_has_m_lownerusn();
}
inline ::google::protobuf::int32 MsgSC_UserJoinAns::m_lownerusn() const {
  return m_lownerusn_;
}
inline void MsgSC_UserJoinAns::set_m_lownerusn(::google::protobuf::int32 value) {
  set_has_m_lownerusn();
  m_lownerusn_ = value;
}

// required sint32 m_lBossUSN = 6;
inline bool MsgSC_UserJoinAns::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgSC_UserJoinAns::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgSC_UserJoinAns::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgSC_UserJoinAns::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 MsgSC_UserJoinAns::m_lbossusn() const {
  return m_lbossusn_;
}
inline void MsgSC_UserJoinAns::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required int32 m_nRoomPurgeCnt = 7;
inline bool MsgSC_UserJoinAns::has_m_nroompurgecnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgSC_UserJoinAns::set_has_m_nroompurgecnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgSC_UserJoinAns::clear_has_m_nroompurgecnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgSC_UserJoinAns::clear_m_nroompurgecnt() {
  m_nroompurgecnt_ = 0;
  clear_has_m_nroompurgecnt();
}
inline ::google::protobuf::int32 MsgSC_UserJoinAns::m_nroompurgecnt() const {
  return m_nroompurgecnt_;
}
inline void MsgSC_UserJoinAns::set_m_nroompurgecnt(::google::protobuf::int32 value) {
  set_has_m_nroompurgecnt();
  m_nroompurgecnt_ = value;
}

// required .Game_Poker.Option m_option = 8;
inline bool MsgSC_UserJoinAns::has_m_option() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgSC_UserJoinAns::set_has_m_option() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgSC_UserJoinAns::clear_has_m_option() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgSC_UserJoinAns::clear_m_option() {
  if (m_option_ != NULL) m_option_->::Game_Poker::Option::Clear();
  clear_has_m_option();
}
inline const ::Game_Poker::Option& MsgSC_UserJoinAns::m_option() const {
  return m_option_ != NULL ? *m_option_ : *default_instance_->m_option_;
}
inline ::Game_Poker::Option* MsgSC_UserJoinAns::mutable_m_option() {
  set_has_m_option();
  if (m_option_ == NULL) m_option_ = new ::Game_Poker::Option;
  return m_option_;
}
inline ::Game_Poker::Option* MsgSC_UserJoinAns::release_m_option() {
  clear_has_m_option();
  ::Game_Poker::Option* temp = m_option_;
  m_option_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MsgSC_UserJoinErr

// required sint32 m_lUSN = 1;
inline bool MsgSC_UserJoinErr::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_UserJoinErr::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_UserJoinErr::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_UserJoinErr::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_UserJoinErr::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_UserJoinErr::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lErrorCode = 2;
inline bool MsgSC_UserJoinErr::has_m_lerrorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_UserJoinErr::set_has_m_lerrorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_UserJoinErr::clear_has_m_lerrorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_UserJoinErr::clear_m_lerrorcode() {
  m_lerrorcode_ = 0;
  clear_has_m_lerrorcode();
}
inline ::google::protobuf::int32 MsgSC_UserJoinErr::m_lerrorcode() const {
  return m_lerrorcode_;
}
inline void MsgSC_UserJoinErr::set_m_lerrorcode(::google::protobuf::int32 value) {
  set_has_m_lerrorcode();
  m_lerrorcode_ = value;
}

// -------------------------------------------------------------------

// MsgSC_UserDisconnect

// required sint32 m_lUSN = 1;
inline bool MsgSC_UserDisconnect::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_UserDisconnect::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_UserDisconnect::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_UserDisconnect::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_UserDisconnect::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_UserDisconnect::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required .Game_Poker.UserInfo m_uinfo = 2;
inline bool MsgSC_UserDisconnect::has_m_uinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_UserDisconnect::set_has_m_uinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_UserDisconnect::clear_has_m_uinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_UserDisconnect::clear_m_uinfo() {
  if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::UserInfo::Clear();
  clear_has_m_uinfo();
}
inline const ::Game_Poker::UserInfo& MsgSC_UserDisconnect::m_uinfo() const {
  return m_uinfo_ != NULL ? *m_uinfo_ : *default_instance_->m_uinfo_;
}
inline ::Game_Poker::UserInfo* MsgSC_UserDisconnect::mutable_m_uinfo() {
  set_has_m_uinfo();
  if (m_uinfo_ == NULL) m_uinfo_ = new ::Game_Poker::UserInfo;
  return m_uinfo_;
}
inline ::Game_Poker::UserInfo* MsgSC_UserDisconnect::release_m_uinfo() {
  clear_has_m_uinfo();
  ::Game_Poker::UserInfo* temp = m_uinfo_;
  m_uinfo_ = NULL;
  return temp;
}

// required sint32 m_lState = 3;
inline bool MsgSC_UserDisconnect::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_UserDisconnect::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_UserDisconnect::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_UserDisconnect::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 MsgSC_UserDisconnect::m_lstate() const {
  return m_lstate_;
}
inline void MsgSC_UserDisconnect::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required sint32 m_lOwnerUSN = 4;
inline bool MsgSC_UserDisconnect::has_m_lownerusn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_UserDisconnect::set_has_m_lownerusn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_UserDisconnect::clear_has_m_lownerusn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_UserDisconnect::clear_m_lownerusn() {
  m_lownerusn_ = 0;
  clear_has_m_lownerusn();
}
inline ::google::protobuf::int32 MsgSC_UserDisconnect::m_lownerusn() const {
  return m_lownerusn_;
}
inline void MsgSC_UserDisconnect::set_m_lownerusn(::google::protobuf::int32 value) {
  set_has_m_lownerusn();
  m_lownerusn_ = value;
}

// -------------------------------------------------------------------

// MsgSC_CardData

// required int32 m_nDealCnt = 1;
inline bool MsgSC_CardData::has_m_ndealcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_CardData::set_has_m_ndealcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_CardData::clear_has_m_ndealcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_CardData::clear_m_ndealcnt() {
  m_ndealcnt_ = 0;
  clear_has_m_ndealcnt();
}
inline ::google::protobuf::int32 MsgSC_CardData::m_ndealcnt() const {
  return m_ndealcnt_;
}
inline void MsgSC_CardData::set_m_ndealcnt(::google::protobuf::int32 value) {
  set_has_m_ndealcnt();
  m_ndealcnt_ = value;
}

// required sint32 m_lCardsDealt = 2;
inline bool MsgSC_CardData::has_m_lcardsdealt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_CardData::set_has_m_lcardsdealt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_CardData::clear_has_m_lcardsdealt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_CardData::clear_m_lcardsdealt() {
  m_lcardsdealt_ = 0;
  clear_has_m_lcardsdealt();
}
inline ::google::protobuf::int32 MsgSC_CardData::m_lcardsdealt() const {
  return m_lcardsdealt_;
}
inline void MsgSC_CardData::set_m_lcardsdealt(::google::protobuf::int32 value) {
  set_has_m_lcardsdealt();
  m_lcardsdealt_ = value;
}

// repeated .Game_Poker.Cards m_tblCard = 3;
inline int MsgSC_CardData::m_tblcard_size() const {
  return m_tblcard_.size();
}
inline void MsgSC_CardData::clear_m_tblcard() {
  m_tblcard_.Clear();
}
inline const ::Game_Poker::Cards& MsgSC_CardData::m_tblcard(int index) const {
  return m_tblcard_.Get(index);
}
inline ::Game_Poker::Cards* MsgSC_CardData::mutable_m_tblcard(int index) {
  return m_tblcard_.Mutable(index);
}
inline ::Game_Poker::Cards* MsgSC_CardData::add_m_tblcard() {
  return m_tblcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
MsgSC_CardData::m_tblcard() const {
  return m_tblcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
MsgSC_CardData::mutable_m_tblcard() {
  return &m_tblcard_;
}

// repeated .Game_Poker.Money m_tblMoney = 4;
inline int MsgSC_CardData::m_tblmoney_size() const {
  return m_tblmoney_.size();
}
inline void MsgSC_CardData::clear_m_tblmoney() {
  m_tblmoney_.Clear();
}
inline const ::Game_Poker::Money& MsgSC_CardData::m_tblmoney(int index) const {
  return m_tblmoney_.Get(index);
}
inline ::Game_Poker::Money* MsgSC_CardData::mutable_m_tblmoney(int index) {
  return m_tblmoney_.Mutable(index);
}
inline ::Game_Poker::Money* MsgSC_CardData::add_m_tblmoney() {
  return m_tblmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
MsgSC_CardData::m_tblmoney() const {
  return m_tblmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
MsgSC_CardData::mutable_m_tblmoney() {
  return &m_tblmoney_;
}

// required sint64 m_llPoolMoney = 5;
inline bool MsgSC_CardData::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgSC_CardData::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgSC_CardData::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgSC_CardData::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 MsgSC_CardData::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void MsgSC_CardData::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_EntryAns

// required sint32 m_lUSN = 1;
inline bool MsgSC_EntryAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_EntryAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_EntryAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_EntryAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_EntryAns::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_EntryAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool MsgSC_EntryAns::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_EntryAns::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_EntryAns::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_EntryAns::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 MsgSC_EntryAns::m_nindex() const {
  return m_nindex_;
}
inline void MsgSC_EntryAns::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lOwnerUSN = 3;
inline bool MsgSC_EntryAns::has_m_lownerusn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_EntryAns::set_has_m_lownerusn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_EntryAns::clear_has_m_lownerusn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_EntryAns::clear_m_lownerusn() {
  m_lownerusn_ = 0;
  clear_has_m_lownerusn();
}
inline ::google::protobuf::int32 MsgSC_EntryAns::m_lownerusn() const {
  return m_lownerusn_;
}
inline void MsgSC_EntryAns::set_m_lownerusn(::google::protobuf::int32 value) {
  set_has_m_lownerusn();
  m_lownerusn_ = value;
}

// repeated .Game_Poker.UserInfo m_tblUI = 4;
inline int MsgSC_EntryAns::m_tblui_size() const {
  return m_tblui_.size();
}
inline void MsgSC_EntryAns::clear_m_tblui() {
  m_tblui_.Clear();
}
inline const ::Game_Poker::UserInfo& MsgSC_EntryAns::m_tblui(int index) const {
  return m_tblui_.Get(index);
}
inline ::Game_Poker::UserInfo* MsgSC_EntryAns::mutable_m_tblui(int index) {
  return m_tblui_.Mutable(index);
}
inline ::Game_Poker::UserInfo* MsgSC_EntryAns::add_m_tblui() {
  return m_tblui_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo >&
MsgSC_EntryAns::m_tblui() const {
  return m_tblui_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserInfo >*
MsgSC_EntryAns::mutable_m_tblui() {
  return &m_tblui_;
}

// repeated .Game_Poker.Money m_tblMoney = 5;
inline int MsgSC_EntryAns::m_tblmoney_size() const {
  return m_tblmoney_.size();
}
inline void MsgSC_EntryAns::clear_m_tblmoney() {
  m_tblmoney_.Clear();
}
inline const ::Game_Poker::Money& MsgSC_EntryAns::m_tblmoney(int index) const {
  return m_tblmoney_.Get(index);
}
inline ::Game_Poker::Money* MsgSC_EntryAns::mutable_m_tblmoney(int index) {
  return m_tblmoney_.Mutable(index);
}
inline ::Game_Poker::Money* MsgSC_EntryAns::add_m_tblmoney() {
  return m_tblmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
MsgSC_EntryAns::m_tblmoney() const {
  return m_tblmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
MsgSC_EntryAns::mutable_m_tblmoney() {
  return &m_tblmoney_;
}

// required sint32 m_bWelcomeSound = 6;
inline bool MsgSC_EntryAns::has_m_bwelcomesound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgSC_EntryAns::set_has_m_bwelcomesound() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgSC_EntryAns::clear_has_m_bwelcomesound() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgSC_EntryAns::clear_m_bwelcomesound() {
  m_bwelcomesound_ = 0;
  clear_has_m_bwelcomesound();
}
inline ::google::protobuf::int32 MsgSC_EntryAns::m_bwelcomesound() const {
  return m_bwelcomesound_;
}
inline void MsgSC_EntryAns::set_m_bwelcomesound(::google::protobuf::int32 value) {
  set_has_m_bwelcomesound();
  m_bwelcomesound_ = value;
}

// required sint32 m_lObserveCnt = 7;
inline bool MsgSC_EntryAns::has_m_lobservecnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgSC_EntryAns::set_has_m_lobservecnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgSC_EntryAns::clear_has_m_lobservecnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgSC_EntryAns::clear_m_lobservecnt() {
  m_lobservecnt_ = 0;
  clear_has_m_lobservecnt();
}
inline ::google::protobuf::int32 MsgSC_EntryAns::m_lobservecnt() const {
  return m_lobservecnt_;
}
inline void MsgSC_EntryAns::set_m_lobservecnt(::google::protobuf::int32 value) {
  set_has_m_lobservecnt();
  m_lobservecnt_ = value;
}

// -------------------------------------------------------------------

// MsgSC_EntryReject

// required sint32 m_lType = 1;
inline bool MsgSC_EntryReject::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_EntryReject::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_EntryReject::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_EntryReject::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 MsgSC_EntryReject::m_ltype() const {
  return m_ltype_;
}
inline void MsgSC_EntryReject::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// required sint64 m_llCMoney = 2;
inline bool MsgSC_EntryReject::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_EntryReject::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_EntryReject::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_EntryReject::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 MsgSC_EntryReject::m_llcmoney() const {
  return m_llcmoney_;
}
inline void MsgSC_EntryReject::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_ObserveAns

// required sint32 m_lUSN = 1;
inline bool MsgSC_ObserveAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_ObserveAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_ObserveAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_ObserveAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_ObserveAns::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_ObserveAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool MsgSC_ObserveAns::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_ObserveAns::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_ObserveAns::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_ObserveAns::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 MsgSC_ObserveAns::m_nindex() const {
  return m_nindex_;
}
inline void MsgSC_ObserveAns::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lOwnerUSN = 3;
inline bool MsgSC_ObserveAns::has_m_lownerusn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_ObserveAns::set_has_m_lownerusn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_ObserveAns::clear_has_m_lownerusn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_ObserveAns::clear_m_lownerusn() {
  m_lownerusn_ = 0;
  clear_has_m_lownerusn();
}
inline ::google::protobuf::int32 MsgSC_ObserveAns::m_lownerusn() const {
  return m_lownerusn_;
}
inline void MsgSC_ObserveAns::set_m_lownerusn(::google::protobuf::int32 value) {
  set_has_m_lownerusn();
  m_lownerusn_ = value;
}

// required .Game_Poker.UserInfo m_uinfo = 4;
inline bool MsgSC_ObserveAns::has_m_uinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_ObserveAns::set_has_m_uinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_ObserveAns::clear_has_m_uinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_ObserveAns::clear_m_uinfo() {
  if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::UserInfo::Clear();
  clear_has_m_uinfo();
}
inline const ::Game_Poker::UserInfo& MsgSC_ObserveAns::m_uinfo() const {
  return m_uinfo_ != NULL ? *m_uinfo_ : *default_instance_->m_uinfo_;
}
inline ::Game_Poker::UserInfo* MsgSC_ObserveAns::mutable_m_uinfo() {
  set_has_m_uinfo();
  if (m_uinfo_ == NULL) m_uinfo_ = new ::Game_Poker::UserInfo;
  return m_uinfo_;
}
inline ::Game_Poker::UserInfo* MsgSC_ObserveAns::release_m_uinfo() {
  clear_has_m_uinfo();
  ::Game_Poker::UserInfo* temp = m_uinfo_;
  m_uinfo_ = NULL;
  return temp;
}

// required .Game_Poker.Money m_money = 5;
inline bool MsgSC_ObserveAns::has_m_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgSC_ObserveAns::set_has_m_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgSC_ObserveAns::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgSC_ObserveAns::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::Money& MsgSC_ObserveAns::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::Money* MsgSC_ObserveAns::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::Money;
  return m_money_;
}
inline ::Game_Poker::Money* MsgSC_ObserveAns::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MsgSC_StartReq

// -------------------------------------------------------------------

// MsgSC_StartAns

// required sint32 m_lState = 1;
inline bool MsgSC_StartAns::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_StartAns::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_StartAns::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_StartAns::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 MsgSC_StartAns::m_lstate() const {
  return m_lstate_;
}
inline void MsgSC_StartAns::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// repeated sint32 m_vtState = 2;
inline int MsgSC_StartAns::m_vtstate_size() const {
  return m_vtstate_.size();
}
inline void MsgSC_StartAns::clear_m_vtstate() {
  m_vtstate_.Clear();
}
inline ::google::protobuf::int32 MsgSC_StartAns::m_vtstate(int index) const {
  return m_vtstate_.Get(index);
}
inline void MsgSC_StartAns::set_m_vtstate(int index, ::google::protobuf::int32 value) {
  m_vtstate_.Set(index, value);
}
inline void MsgSC_StartAns::add_m_vtstate(::google::protobuf::int32 value) {
  m_vtstate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgSC_StartAns::m_vtstate() const {
  return m_vtstate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgSC_StartAns::mutable_m_vtstate() {
  return &m_vtstate_;
}

// required sint64 m_llSystemTime = 3;
inline bool MsgSC_StartAns::has_m_llsystemtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_StartAns::set_has_m_llsystemtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_StartAns::clear_has_m_llsystemtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_StartAns::clear_m_llsystemtime() {
  m_llsystemtime_ = GOOGLE_LONGLONG(0);
  clear_has_m_llsystemtime();
}
inline ::google::protobuf::int64 MsgSC_StartAns::m_llsystemtime() const {
  return m_llsystemtime_;
}
inline void MsgSC_StartAns::set_m_llsystemtime(::google::protobuf::int64 value) {
  set_has_m_llsystemtime();
  m_llsystemtime_ = value;
}

// -------------------------------------------------------------------

// MsgSC_NoStart

// -------------------------------------------------------------------

// MsgSC_DealCards

// required sint32 m_lBossUSN = 1;
inline bool MsgSC_DealCards::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_DealCards::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_DealCards::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_DealCards::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 MsgSC_DealCards::m_lbossusn() const {
  return m_lbossusn_;
}
inline void MsgSC_DealCards::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required sint32 m_lState = 2;
inline bool MsgSC_DealCards::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_DealCards::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_DealCards::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_DealCards::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 MsgSC_DealCards::m_lstate() const {
  return m_lstate_;
}
inline void MsgSC_DealCards::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required int32 m_nType = 3;
inline bool MsgSC_DealCards::has_m_ntype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_DealCards::set_has_m_ntype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_DealCards::clear_has_m_ntype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_DealCards::clear_m_ntype() {
  m_ntype_ = 0;
  clear_has_m_ntype();
}
inline ::google::protobuf::int32 MsgSC_DealCards::m_ntype() const {
  return m_ntype_;
}
inline void MsgSC_DealCards::set_m_ntype(::google::protobuf::int32 value) {
  set_has_m_ntype();
  m_ntype_ = value;
}

// repeated .Game_Poker.Cards m_tblCard = 4;
inline int MsgSC_DealCards::m_tblcard_size() const {
  return m_tblcard_.size();
}
inline void MsgSC_DealCards::clear_m_tblcard() {
  m_tblcard_.Clear();
}
inline const ::Game_Poker::Cards& MsgSC_DealCards::m_tblcard(int index) const {
  return m_tblcard_.Get(index);
}
inline ::Game_Poker::Cards* MsgSC_DealCards::mutable_m_tblcard(int index) {
  return m_tblcard_.Mutable(index);
}
inline ::Game_Poker::Cards* MsgSC_DealCards::add_m_tblcard() {
  return m_tblcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
MsgSC_DealCards::m_tblcard() const {
  return m_tblcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
MsgSC_DealCards::mutable_m_tblcard() {
  return &m_tblcard_;
}

// repeated .Game_Poker.Money m_tblMoney = 5;
inline int MsgSC_DealCards::m_tblmoney_size() const {
  return m_tblmoney_.size();
}
inline void MsgSC_DealCards::clear_m_tblmoney() {
  m_tblmoney_.Clear();
}
inline const ::Game_Poker::Money& MsgSC_DealCards::m_tblmoney(int index) const {
  return m_tblmoney_.Get(index);
}
inline ::Game_Poker::Money* MsgSC_DealCards::mutable_m_tblmoney(int index) {
  return m_tblmoney_.Mutable(index);
}
inline ::Game_Poker::Money* MsgSC_DealCards::add_m_tblmoney() {
  return m_tblmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
MsgSC_DealCards::m_tblmoney() const {
  return m_tblmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
MsgSC_DealCards::mutable_m_tblmoney() {
  return &m_tblmoney_;
}

// required sint64 m_llPoolMoney = 6;
inline bool MsgSC_DealCards::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgSC_DealCards::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgSC_DealCards::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgSC_DealCards::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 MsgSC_DealCards::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void MsgSC_DealCards::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_SelectedCardAns

// required sint32 m_lUSN = 1;
inline bool MsgSC_SelectedCardAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_SelectedCardAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_SelectedCardAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_SelectedCardAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_SelectedCardAns::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_SelectedCardAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nSelect = 2;
inline bool MsgSC_SelectedCardAns::has_m_nselect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_SelectedCardAns::set_has_m_nselect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_SelectedCardAns::clear_has_m_nselect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_SelectedCardAns::clear_m_nselect() {
  m_nselect_ = 0;
  clear_has_m_nselect();
}
inline ::google::protobuf::int32 MsgSC_SelectedCardAns::m_nselect() const {
  return m_nselect_;
}
inline void MsgSC_SelectedCardAns::set_m_nselect(::google::protobuf::int32 value) {
  set_has_m_nselect();
  m_nselect_ = value;
}

// required sint32 m_lCardIndex = 3;
inline bool MsgSC_SelectedCardAns::has_m_lcardindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_SelectedCardAns::set_has_m_lcardindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_SelectedCardAns::clear_has_m_lcardindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_SelectedCardAns::clear_m_lcardindex() {
  m_lcardindex_ = 0;
  clear_has_m_lcardindex();
}
inline ::google::protobuf::int32 MsgSC_SelectedCardAns::m_lcardindex() const {
  return m_lcardindex_;
}
inline void MsgSC_SelectedCardAns::set_m_lcardindex(::google::protobuf::int32 value) {
  set_has_m_lcardindex();
  m_lcardindex_ = value;
}

// required sint32 m_lChoiceType = 4;
inline bool MsgSC_SelectedCardAns::has_m_lchoicetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_SelectedCardAns::set_has_m_lchoicetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_SelectedCardAns::clear_has_m_lchoicetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_SelectedCardAns::clear_m_lchoicetype() {
  m_lchoicetype_ = 0;
  clear_has_m_lchoicetype();
}
inline ::google::protobuf::int32 MsgSC_SelectedCardAns::m_lchoicetype() const {
  return m_lchoicetype_;
}
inline void MsgSC_SelectedCardAns::set_m_lchoicetype(::google::protobuf::int32 value) {
  set_has_m_lchoicetype();
  m_lchoicetype_ = value;
}

// -------------------------------------------------------------------

// MsgSC_DealOpenCard

// required sint32 m_lState = 1;
inline bool MsgSC_DealOpenCard::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_DealOpenCard::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_DealOpenCard::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_DealOpenCard::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 MsgSC_DealOpenCard::m_lstate() const {
  return m_lstate_;
}
inline void MsgSC_DealOpenCard::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// repeated .Game_Poker.Cards m_tblCard = 2;
inline int MsgSC_DealOpenCard::m_tblcard_size() const {
  return m_tblcard_.size();
}
inline void MsgSC_DealOpenCard::clear_m_tblcard() {
  m_tblcard_.Clear();
}
inline const ::Game_Poker::Cards& MsgSC_DealOpenCard::m_tblcard(int index) const {
  return m_tblcard_.Get(index);
}
inline ::Game_Poker::Cards* MsgSC_DealOpenCard::mutable_m_tblcard(int index) {
  return m_tblcard_.Mutable(index);
}
inline ::Game_Poker::Cards* MsgSC_DealOpenCard::add_m_tblcard() {
  return m_tblcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
MsgSC_DealOpenCard::m_tblcard() const {
  return m_tblcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
MsgSC_DealOpenCard::mutable_m_tblcard() {
  return &m_tblcard_;
}

// repeated sint32 m_vtState = 3;
inline int MsgSC_DealOpenCard::m_vtstate_size() const {
  return m_vtstate_.size();
}
inline void MsgSC_DealOpenCard::clear_m_vtstate() {
  m_vtstate_.Clear();
}
inline ::google::protobuf::int32 MsgSC_DealOpenCard::m_vtstate(int index) const {
  return m_vtstate_.Get(index);
}
inline void MsgSC_DealOpenCard::set_m_vtstate(int index, ::google::protobuf::int32 value) {
  m_vtstate_.Set(index, value);
}
inline void MsgSC_DealOpenCard::add_m_vtstate(::google::protobuf::int32 value) {
  m_vtstate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgSC_DealOpenCard::m_vtstate() const {
  return m_vtstate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgSC_DealOpenCard::mutable_m_vtstate() {
  return &m_vtstate_;
}

// -------------------------------------------------------------------

// MsgSC_DealCard

// required sint32 m_lBossUSN = 1;
inline bool MsgSC_DealCard::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_DealCard::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_DealCard::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_DealCard::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 MsgSC_DealCard::m_lbossusn() const {
  return m_lbossusn_;
}
inline void MsgSC_DealCard::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required int32 m_nType = 2;
inline bool MsgSC_DealCard::has_m_ntype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_DealCard::set_has_m_ntype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_DealCard::clear_has_m_ntype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_DealCard::clear_m_ntype() {
  m_ntype_ = 0;
  clear_has_m_ntype();
}
inline ::google::protobuf::int32 MsgSC_DealCard::m_ntype() const {
  return m_ntype_;
}
inline void MsgSC_DealCard::set_m_ntype(::google::protobuf::int32 value) {
  set_has_m_ntype();
  m_ntype_ = value;
}

// required sint32 m_lCardsDealt = 3;
inline bool MsgSC_DealCard::has_m_lcardsdealt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_DealCard::set_has_m_lcardsdealt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_DealCard::clear_has_m_lcardsdealt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_DealCard::clear_m_lcardsdealt() {
  m_lcardsdealt_ = 0;
  clear_has_m_lcardsdealt();
}
inline ::google::protobuf::int32 MsgSC_DealCard::m_lcardsdealt() const {
  return m_lcardsdealt_;
}
inline void MsgSC_DealCard::set_m_lcardsdealt(::google::protobuf::int32 value) {
  set_has_m_lcardsdealt();
  m_lcardsdealt_ = value;
}

// repeated .Game_Poker.OneCard m_vtOneCard = 4;
inline int MsgSC_DealCard::m_vtonecard_size() const {
  return m_vtonecard_.size();
}
inline void MsgSC_DealCard::clear_m_vtonecard() {
  m_vtonecard_.Clear();
}
inline const ::Game_Poker::OneCard& MsgSC_DealCard::m_vtonecard(int index) const {
  return m_vtonecard_.Get(index);
}
inline ::Game_Poker::OneCard* MsgSC_DealCard::mutable_m_vtonecard(int index) {
  return m_vtonecard_.Mutable(index);
}
inline ::Game_Poker::OneCard* MsgSC_DealCard::add_m_vtonecard() {
  return m_vtonecard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard >&
MsgSC_DealCard::m_vtonecard() const {
  return m_vtonecard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard >*
MsgSC_DealCard::mutable_m_vtonecard() {
  return &m_vtonecard_;
}

// -------------------------------------------------------------------

// MsgSC_Boss

// required sint32 m_lBossUSN = 1;
inline bool MsgSC_Boss::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_Boss::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_Boss::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_Boss::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 MsgSC_Boss::m_lbossusn() const {
  return m_lbossusn_;
}
inline void MsgSC_Boss::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required int32 m_nBossRank = 2;
inline bool MsgSC_Boss::has_m_nbossrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_Boss::set_has_m_nbossrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_Boss::clear_has_m_nbossrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_Boss::clear_m_nbossrank() {
  m_nbossrank_ = 0;
  clear_has_m_nbossrank();
}
inline ::google::protobuf::int32 MsgSC_Boss::m_nbossrank() const {
  return m_nbossrank_;
}
inline void MsgSC_Boss::set_m_nbossrank(::google::protobuf::int32 value) {
  set_has_m_nbossrank();
  m_nbossrank_ = value;
}

// -------------------------------------------------------------------

// MsgSC_Betting

// required sint32 m_lBetUSN = 1;
inline bool MsgSC_Betting::has_m_lbetusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_Betting::set_has_m_lbetusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_Betting::clear_has_m_lbetusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_Betting::clear_m_lbetusn() {
  m_lbetusn_ = 0;
  clear_has_m_lbetusn();
}
inline ::google::protobuf::int32 MsgSC_Betting::m_lbetusn() const {
  return m_lbetusn_;
}
inline void MsgSC_Betting::set_m_lbetusn(::google::protobuf::int32 value) {
  set_has_m_lbetusn();
  m_lbetusn_ = value;
}

// required sint32 m_lBetBtnType = 2;
inline bool MsgSC_Betting::has_m_lbetbtntype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_Betting::set_has_m_lbetbtntype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_Betting::clear_has_m_lbetbtntype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_Betting::clear_m_lbetbtntype() {
  m_lbetbtntype_ = 0;
  clear_has_m_lbetbtntype();
}
inline ::google::protobuf::int32 MsgSC_Betting::m_lbetbtntype() const {
  return m_lbetbtntype_;
}
inline void MsgSC_Betting::set_m_lbetbtntype(::google::protobuf::int32 value) {
  set_has_m_lbetbtntype();
  m_lbetbtntype_ = value;
}

// -------------------------------------------------------------------

// MsgSC_BettingAns

// required int32 m_nIndex = 1;
inline bool MsgSC_BettingAns::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_BettingAns::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_BettingAns::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_BettingAns::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 MsgSC_BettingAns::m_nindex() const {
  return m_nindex_;
}
inline void MsgSC_BettingAns::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lBetType = 2;
inline bool MsgSC_BettingAns::has_m_lbettype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_BettingAns::set_has_m_lbettype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_BettingAns::clear_has_m_lbettype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_BettingAns::clear_m_lbettype() {
  m_lbettype_ = 0;
  clear_has_m_lbettype();
}
inline ::google::protobuf::int32 MsgSC_BettingAns::m_lbettype() const {
  return m_lbettype_;
}
inline void MsgSC_BettingAns::set_m_lbettype(::google::protobuf::int32 value) {
  set_has_m_lbettype();
  m_lbettype_ = value;
}

// required .Game_Poker.Money m_money = 3;
inline bool MsgSC_BettingAns::has_m_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_BettingAns::set_has_m_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_BettingAns::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_BettingAns::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::Money& MsgSC_BettingAns::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::Money* MsgSC_BettingAns::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::Money;
  return m_money_;
}
inline ::Game_Poker::Money* MsgSC_BettingAns::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// repeated .Game_Poker.VecMoney m_vtCallMoney = 4;
inline int MsgSC_BettingAns::m_vtcallmoney_size() const {
  return m_vtcallmoney_.size();
}
inline void MsgSC_BettingAns::clear_m_vtcallmoney() {
  m_vtcallmoney_.Clear();
}
inline const ::Game_Poker::VecMoney& MsgSC_BettingAns::m_vtcallmoney(int index) const {
  return m_vtcallmoney_.Get(index);
}
inline ::Game_Poker::VecMoney* MsgSC_BettingAns::mutable_m_vtcallmoney(int index) {
  return m_vtcallmoney_.Mutable(index);
}
inline ::Game_Poker::VecMoney* MsgSC_BettingAns::add_m_vtcallmoney() {
  return m_vtcallmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney >&
MsgSC_BettingAns::m_vtcallmoney() const {
  return m_vtcallmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney >*
MsgSC_BettingAns::mutable_m_vtcallmoney() {
  return &m_vtcallmoney_;
}

// required sint64 m_lPoolMoney = 5;
inline bool MsgSC_BettingAns::has_m_lpoolmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgSC_BettingAns::set_has_m_lpoolmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgSC_BettingAns::clear_has_m_lpoolmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgSC_BettingAns::clear_m_lpoolmoney() {
  m_lpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lpoolmoney();
}
inline ::google::protobuf::int64 MsgSC_BettingAns::m_lpoolmoney() const {
  return m_lpoolmoney_;
}
inline void MsgSC_BettingAns::set_m_lpoolmoney(::google::protobuf::int64 value) {
  set_has_m_lpoolmoney();
  m_lpoolmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_BettingAnsMsg

// required sint32 m_lUSN = 1;
inline bool MsgSC_BettingAnsMsg::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_BettingAnsMsg::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_BettingAnsMsg::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_BettingAnsMsg::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool MsgSC_BettingAnsMsg::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_BettingAnsMsg::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 MsgSC_BettingAnsMsg::m_nindex() const {
  return m_nindex_;
}
inline void MsgSC_BettingAnsMsg::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_BetType = 3;
inline bool MsgSC_BettingAnsMsg::has_m_bettype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_bettype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_bettype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_BettingAnsMsg::clear_m_bettype() {
  m_bettype_ = 0;
  clear_has_m_bettype();
}
inline ::google::protobuf::int32 MsgSC_BettingAnsMsg::m_bettype() const {
  return m_bettype_;
}
inline void MsgSC_BettingAnsMsg::set_m_bettype(::google::protobuf::int32 value) {
  set_has_m_bettype();
  m_bettype_ = value;
}

// required sint32 m_bBettingMoney = 4;
inline bool MsgSC_BettingAnsMsg::has_m_bbettingmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_bbettingmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_bbettingmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_BettingAnsMsg::clear_m_bbettingmoney() {
  m_bbettingmoney_ = 0;
  clear_has_m_bbettingmoney();
}
inline ::google::protobuf::int32 MsgSC_BettingAnsMsg::m_bbettingmoney() const {
  return m_bbettingmoney_;
}
inline void MsgSC_BettingAnsMsg::set_m_bbettingmoney(::google::protobuf::int32 value) {
  set_has_m_bbettingmoney();
  m_bbettingmoney_ = value;
}

// required sint32 m_bMoneyLack = 5;
inline bool MsgSC_BettingAnsMsg::has_m_bmoneylack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_bmoneylack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_bmoneylack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgSC_BettingAnsMsg::clear_m_bmoneylack() {
  m_bmoneylack_ = 0;
  clear_has_m_bmoneylack();
}
inline ::google::protobuf::int32 MsgSC_BettingAnsMsg::m_bmoneylack() const {
  return m_bmoneylack_;
}
inline void MsgSC_BettingAnsMsg::set_m_bmoneylack(::google::protobuf::int32 value) {
  set_has_m_bmoneylack();
  m_bmoneylack_ = value;
}

// required sint32 m_bCallMoneyZero = 6;
inline bool MsgSC_BettingAnsMsg::has_m_bcallmoneyzero() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_bcallmoneyzero() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_bcallmoneyzero() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgSC_BettingAnsMsg::clear_m_bcallmoneyzero() {
  m_bcallmoneyzero_ = 0;
  clear_has_m_bcallmoneyzero();
}
inline ::google::protobuf::int32 MsgSC_BettingAnsMsg::m_bcallmoneyzero() const {
  return m_bcallmoneyzero_;
}
inline void MsgSC_BettingAnsMsg::set_m_bcallmoneyzero(::google::protobuf::int32 value) {
  set_has_m_bcallmoneyzero();
  m_bcallmoneyzero_ = value;
}

// required sint64 m_llCallMoney = 7;
inline bool MsgSC_BettingAnsMsg::has_m_llcallmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_llcallmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_llcallmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgSC_BettingAnsMsg::clear_m_llcallmoney() {
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcallmoney();
}
inline ::google::protobuf::int64 MsgSC_BettingAnsMsg::m_llcallmoney() const {
  return m_llcallmoney_;
}
inline void MsgSC_BettingAnsMsg::set_m_llcallmoney(::google::protobuf::int64 value) {
  set_has_m_llcallmoney();
  m_llcallmoney_ = value;
}

// required sint64 m_llRaiseMoney = 8;
inline bool MsgSC_BettingAnsMsg::has_m_llraisemoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_llraisemoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_llraisemoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgSC_BettingAnsMsg::clear_m_llraisemoney() {
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llraisemoney();
}
inline ::google::protobuf::int64 MsgSC_BettingAnsMsg::m_llraisemoney() const {
  return m_llraisemoney_;
}
inline void MsgSC_BettingAnsMsg::set_m_llraisemoney(::google::protobuf::int64 value) {
  set_has_m_llraisemoney();
  m_llraisemoney_ = value;
}

// required sint64 m_llSideMoney = 9;
inline bool MsgSC_BettingAnsMsg::has_m_llsidemoney() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_llsidemoney() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_llsidemoney() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgSC_BettingAnsMsg::clear_m_llsidemoney() {
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llsidemoney();
}
inline ::google::protobuf::int64 MsgSC_BettingAnsMsg::m_llsidemoney() const {
  return m_llsidemoney_;
}
inline void MsgSC_BettingAnsMsg::set_m_llsidemoney(::google::protobuf::int64 value) {
  set_has_m_llsidemoney();
  m_llsidemoney_ = value;
}

// required sint32 m_lBetType = 10;
inline bool MsgSC_BettingAnsMsg::has_m_lbettype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_lbettype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_lbettype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgSC_BettingAnsMsg::clear_m_lbettype() {
  m_lbettype_ = 0;
  clear_has_m_lbettype();
}
inline ::google::protobuf::int32 MsgSC_BettingAnsMsg::m_lbettype() const {
  return m_lbettype_;
}
inline void MsgSC_BettingAnsMsg::set_m_lbettype(::google::protobuf::int32 value) {
  set_has_m_lbettype();
  m_lbettype_ = value;
}

// required sint32 m_lBetTurn = 11;
inline bool MsgSC_BettingAnsMsg::has_m_lbetturn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_lbetturn() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_lbetturn() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgSC_BettingAnsMsg::clear_m_lbetturn() {
  m_lbetturn_ = 0;
  clear_has_m_lbetturn();
}
inline ::google::protobuf::int32 MsgSC_BettingAnsMsg::m_lbetturn() const {
  return m_lbetturn_;
}
inline void MsgSC_BettingAnsMsg::set_m_lbetturn(::google::protobuf::int32 value) {
  set_has_m_lbetturn();
  m_lbetturn_ = value;
}

// required .Game_Poker.Money m_money = 12;
inline bool MsgSC_BettingAnsMsg::has_m_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgSC_BettingAnsMsg::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::Money& MsgSC_BettingAnsMsg::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::Money* MsgSC_BettingAnsMsg::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::Money;
  return m_money_;
}
inline ::Game_Poker::Money* MsgSC_BettingAnsMsg::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// repeated .Game_Poker.VecMoney m_vtCallMoney = 13;
inline int MsgSC_BettingAnsMsg::m_vtcallmoney_size() const {
  return m_vtcallmoney_.size();
}
inline void MsgSC_BettingAnsMsg::clear_m_vtcallmoney() {
  m_vtcallmoney_.Clear();
}
inline const ::Game_Poker::VecMoney& MsgSC_BettingAnsMsg::m_vtcallmoney(int index) const {
  return m_vtcallmoney_.Get(index);
}
inline ::Game_Poker::VecMoney* MsgSC_BettingAnsMsg::mutable_m_vtcallmoney(int index) {
  return m_vtcallmoney_.Mutable(index);
}
inline ::Game_Poker::VecMoney* MsgSC_BettingAnsMsg::add_m_vtcallmoney() {
  return m_vtcallmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney >&
MsgSC_BettingAnsMsg::m_vtcallmoney() const {
  return m_vtcallmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecMoney >*
MsgSC_BettingAnsMsg::mutable_m_vtcallmoney() {
  return &m_vtcallmoney_;
}

// required sint64 m_llPoolMoney = 14;
inline bool MsgSC_BettingAnsMsg::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MsgSC_BettingAnsMsg::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MsgSC_BettingAnsMsg::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MsgSC_BettingAnsMsg::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 MsgSC_BettingAnsMsg::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void MsgSC_BettingAnsMsg::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_DealHiddenCard

// required sint32 m_lBossUSN = 1;
inline bool MsgSC_DealHiddenCard::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_DealHiddenCard::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_DealHiddenCard::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_DealHiddenCard::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 MsgSC_DealHiddenCard::m_lbossusn() const {
  return m_lbossusn_;
}
inline void MsgSC_DealHiddenCard::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required sint32 m_lCardsDealt = 2;
inline bool MsgSC_DealHiddenCard::has_m_lcardsdealt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_DealHiddenCard::set_has_m_lcardsdealt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_DealHiddenCard::clear_has_m_lcardsdealt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_DealHiddenCard::clear_m_lcardsdealt() {
  m_lcardsdealt_ = 0;
  clear_has_m_lcardsdealt();
}
inline ::google::protobuf::int32 MsgSC_DealHiddenCard::m_lcardsdealt() const {
  return m_lcardsdealt_;
}
inline void MsgSC_DealHiddenCard::set_m_lcardsdealt(::google::protobuf::int32 value) {
  set_has_m_lcardsdealt();
  m_lcardsdealt_ = value;
}

// repeated .Game_Poker.OneCard m_vtOneCard = 3;
inline int MsgSC_DealHiddenCard::m_vtonecard_size() const {
  return m_vtonecard_.size();
}
inline void MsgSC_DealHiddenCard::clear_m_vtonecard() {
  m_vtonecard_.Clear();
}
inline const ::Game_Poker::OneCard& MsgSC_DealHiddenCard::m_vtonecard(int index) const {
  return m_vtonecard_.Get(index);
}
inline ::Game_Poker::OneCard* MsgSC_DealHiddenCard::mutable_m_vtonecard(int index) {
  return m_vtonecard_.Mutable(index);
}
inline ::Game_Poker::OneCard* MsgSC_DealHiddenCard::add_m_vtonecard() {
  return m_vtonecard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard >&
MsgSC_DealHiddenCard::m_vtonecard() const {
  return m_vtonecard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::OneCard >*
MsgSC_DealHiddenCard::mutable_m_vtonecard() {
  return &m_vtonecard_;
}

// -------------------------------------------------------------------

// MsgSC_AnteMoney

// required sint64 m_llAnteMoney = 1;
inline bool MsgSC_AnteMoney::has_m_llantemoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_AnteMoney::set_has_m_llantemoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_AnteMoney::clear_has_m_llantemoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_AnteMoney::clear_m_llantemoney() {
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llantemoney();
}
inline ::google::protobuf::int64 MsgSC_AnteMoney::m_llantemoney() const {
  return m_llantemoney_;
}
inline void MsgSC_AnteMoney::set_m_llantemoney(::google::protobuf::int64 value) {
  set_has_m_llantemoney();
  m_llantemoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_RuleQuaterHalf

// required sint64 m_llRuleQuaterHalf = 1;
inline bool MsgSC_RuleQuaterHalf::has_m_llrulequaterhalf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_RuleQuaterHalf::set_has_m_llrulequaterhalf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_RuleQuaterHalf::clear_has_m_llrulequaterhalf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_RuleQuaterHalf::clear_m_llrulequaterhalf() {
  m_llrulequaterhalf_ = GOOGLE_LONGLONG(0);
  clear_has_m_llrulequaterhalf();
}
inline ::google::protobuf::int64 MsgSC_RuleQuaterHalf::m_llrulequaterhalf() const {
  return m_llrulequaterhalf_;
}
inline void MsgSC_RuleQuaterHalf::set_m_llrulequaterhalf(::google::protobuf::int64 value) {
  set_has_m_llrulequaterhalf();
  m_llrulequaterhalf_ = value;
}

// required sint64 m_llPoolMoney = 2;
inline bool MsgSC_RuleQuaterHalf::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_RuleQuaterHalf::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_RuleQuaterHalf::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_RuleQuaterHalf::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 MsgSC_RuleQuaterHalf::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void MsgSC_RuleQuaterHalf::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_Finished

// required sint32 m_lState = 1;
inline bool MsgSC_Finished::has_m_lstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_Finished::set_has_m_lstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_Finished::clear_has_m_lstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_Finished::clear_m_lstate() {
  m_lstate_ = 0;
  clear_has_m_lstate();
}
inline ::google::protobuf::int32 MsgSC_Finished::m_lstate() const {
  return m_lstate_;
}
inline void MsgSC_Finished::set_m_lstate(::google::protobuf::int32 value) {
  set_has_m_lstate();
  m_lstate_ = value;
}

// required sint32 m_bGiveUp = 2;
inline bool MsgSC_Finished::has_m_bgiveup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_Finished::set_has_m_bgiveup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_Finished::clear_has_m_bgiveup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_Finished::clear_m_bgiveup() {
  m_bgiveup_ = 0;
  clear_has_m_bgiveup();
}
inline ::google::protobuf::int32 MsgSC_Finished::m_bgiveup() const {
  return m_bgiveup_;
}
inline void MsgSC_Finished::set_m_bgiveup(::google::protobuf::int32 value) {
  set_has_m_bgiveup();
  m_bgiveup_ = value;
}

// required sint32 m_lRank = 3;
inline bool MsgSC_Finished::has_m_lrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_Finished::set_has_m_lrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_Finished::clear_has_m_lrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_Finished::clear_m_lrank() {
  m_lrank_ = 0;
  clear_has_m_lrank();
}
inline ::google::protobuf::int32 MsgSC_Finished::m_lrank() const {
  return m_lrank_;
}
inline void MsgSC_Finished::set_m_lrank(::google::protobuf::int32 value) {
  set_has_m_lrank();
  m_lrank_ = value;
}

// required sint32 m_lBossUSN = 4;
inline bool MsgSC_Finished::has_m_lbossusn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_Finished::set_has_m_lbossusn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_Finished::clear_has_m_lbossusn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_Finished::clear_m_lbossusn() {
  m_lbossusn_ = 0;
  clear_has_m_lbossusn();
}
inline ::google::protobuf::int32 MsgSC_Finished::m_lbossusn() const {
  return m_lbossusn_;
}
inline void MsgSC_Finished::set_m_lbossusn(::google::protobuf::int32 value) {
  set_has_m_lbossusn();
  m_lbossusn_ = value;
}

// required sint64 m_llGiveMoney = 5;
inline bool MsgSC_Finished::has_m_llgivemoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgSC_Finished::set_has_m_llgivemoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgSC_Finished::clear_has_m_llgivemoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgSC_Finished::clear_m_llgivemoney() {
  m_llgivemoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llgivemoney();
}
inline ::google::protobuf::int64 MsgSC_Finished::m_llgivemoney() const {
  return m_llgivemoney_;
}
inline void MsgSC_Finished::set_m_llgivemoney(::google::protobuf::int64 value) {
  set_has_m_llgivemoney();
  m_llgivemoney_ = value;
}

// repeated int32 m_vtWin = 6;
inline int MsgSC_Finished::m_vtwin_size() const {
  return m_vtwin_.size();
}
inline void MsgSC_Finished::clear_m_vtwin() {
  m_vtwin_.Clear();
}
inline ::google::protobuf::int32 MsgSC_Finished::m_vtwin(int index) const {
  return m_vtwin_.Get(index);
}
inline void MsgSC_Finished::set_m_vtwin(int index, ::google::protobuf::int32 value) {
  m_vtwin_.Set(index, value);
}
inline void MsgSC_Finished::add_m_vtwin(::google::protobuf::int32 value) {
  m_vtwin_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgSC_Finished::m_vtwin() const {
  return m_vtwin_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgSC_Finished::mutable_m_vtwin() {
  return &m_vtwin_;
}

// repeated int32 m_vtResult = 7;
inline int MsgSC_Finished::m_vtresult_size() const {
  return m_vtresult_.size();
}
inline void MsgSC_Finished::clear_m_vtresult() {
  m_vtresult_.Clear();
}
inline ::google::protobuf::int32 MsgSC_Finished::m_vtresult(int index) const {
  return m_vtresult_.Get(index);
}
inline void MsgSC_Finished::set_m_vtresult(int index, ::google::protobuf::int32 value) {
  m_vtresult_.Set(index, value);
}
inline void MsgSC_Finished::add_m_vtresult(::google::protobuf::int32 value) {
  m_vtresult_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgSC_Finished::m_vtresult() const {
  return m_vtresult_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgSC_Finished::mutable_m_vtresult() {
  return &m_vtresult_;
}

// repeated sint64 m_vtGiveMoney = 8;
inline int MsgSC_Finished::m_vtgivemoney_size() const {
  return m_vtgivemoney_.size();
}
inline void MsgSC_Finished::clear_m_vtgivemoney() {
  m_vtgivemoney_.Clear();
}
inline ::google::protobuf::int64 MsgSC_Finished::m_vtgivemoney(int index) const {
  return m_vtgivemoney_.Get(index);
}
inline void MsgSC_Finished::set_m_vtgivemoney(int index, ::google::protobuf::int64 value) {
  m_vtgivemoney_.Set(index, value);
}
inline void MsgSC_Finished::add_m_vtgivemoney(::google::protobuf::int64 value) {
  m_vtgivemoney_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MsgSC_Finished::m_vtgivemoney() const {
  return m_vtgivemoney_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MsgSC_Finished::mutable_m_vtgivemoney() {
  return &m_vtgivemoney_;
}

// repeated .Game_Poker.Cards m_tblCard = 9;
inline int MsgSC_Finished::m_tblcard_size() const {
  return m_tblcard_.size();
}
inline void MsgSC_Finished::clear_m_tblcard() {
  m_tblcard_.Clear();
}
inline const ::Game_Poker::Cards& MsgSC_Finished::m_tblcard(int index) const {
  return m_tblcard_.Get(index);
}
inline ::Game_Poker::Cards* MsgSC_Finished::mutable_m_tblcard(int index) {
  return m_tblcard_.Mutable(index);
}
inline ::Game_Poker::Cards* MsgSC_Finished::add_m_tblcard() {
  return m_tblcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >&
MsgSC_Finished::m_tblcard() const {
  return m_tblcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Cards >*
MsgSC_Finished::mutable_m_tblcard() {
  return &m_tblcard_;
}

// repeated .Game_Poker.Money m_tblMoney = 10;
inline int MsgSC_Finished::m_tblmoney_size() const {
  return m_tblmoney_.size();
}
inline void MsgSC_Finished::clear_m_tblmoney() {
  m_tblmoney_.Clear();
}
inline const ::Game_Poker::Money& MsgSC_Finished::m_tblmoney(int index) const {
  return m_tblmoney_.Get(index);
}
inline ::Game_Poker::Money* MsgSC_Finished::mutable_m_tblmoney(int index) {
  return m_tblmoney_.Mutable(index);
}
inline ::Game_Poker::Money* MsgSC_Finished::add_m_tblmoney() {
  return m_tblmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >&
MsgSC_Finished::m_tblmoney() const {
  return m_tblmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::Money >*
MsgSC_Finished::mutable_m_tblmoney() {
  return &m_tblmoney_;
}

// required sint64 m_llPoolMoney = 11;
inline bool MsgSC_Finished::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgSC_Finished::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgSC_Finished::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgSC_Finished::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 MsgSC_Finished::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void MsgSC_Finished::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
inline int MsgSC_Finished::m_vtusermoney_size() const {
  return m_vtusermoney_.size();
}
inline void MsgSC_Finished::clear_m_vtusermoney() {
  m_vtusermoney_.Clear();
}
inline const ::Game_Poker::UserMoney& MsgSC_Finished::m_vtusermoney(int index) const {
  return m_vtusermoney_.Get(index);
}
inline ::Game_Poker::UserMoney* MsgSC_Finished::mutable_m_vtusermoney(int index) {
  return m_vtusermoney_.Mutable(index);
}
inline ::Game_Poker::UserMoney* MsgSC_Finished::add_m_vtusermoney() {
  return m_vtusermoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney >&
MsgSC_Finished::m_vtusermoney() const {
  return m_vtusermoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::UserMoney >*
MsgSC_Finished::mutable_m_vtusermoney() {
  return &m_vtusermoney_;
}

// required sint32 m_lResultIdx = 13;
inline bool MsgSC_Finished::has_m_lresultidx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MsgSC_Finished::set_has_m_lresultidx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MsgSC_Finished::clear_has_m_lresultidx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MsgSC_Finished::clear_m_lresultidx() {
  m_lresultidx_ = 0;
  clear_has_m_lresultidx();
}
inline ::google::protobuf::int32 MsgSC_Finished::m_lresultidx() const {
  return m_lresultidx_;
}
inline void MsgSC_Finished::set_m_lresultidx(::google::protobuf::int32 value) {
  set_has_m_lresultidx();
  m_lresultidx_ = value;
}

// required sint64 m_llJackpot = 14;
inline bool MsgSC_Finished::has_m_lljackpot() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MsgSC_Finished::set_has_m_lljackpot() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MsgSC_Finished::clear_has_m_lljackpot() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MsgSC_Finished::clear_m_lljackpot() {
  m_lljackpot_ = GOOGLE_LONGLONG(0);
  clear_has_m_lljackpot();
}
inline ::google::protobuf::int64 MsgSC_Finished::m_lljackpot() const {
  return m_lljackpot_;
}
inline void MsgSC_Finished::set_m_lljackpot(::google::protobuf::int64 value) {
  set_has_m_lljackpot();
  m_lljackpot_ = value;
}

// -------------------------------------------------------------------

// MsgSC_NewGame

// repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
inline int MsgSC_NewGame::m_vtwinloseinfo_size() const {
  return m_vtwinloseinfo_.size();
}
inline void MsgSC_NewGame::clear_m_vtwinloseinfo() {
  m_vtwinloseinfo_.Clear();
}
inline const ::Game_Poker::WinLoseInfo& MsgSC_NewGame::m_vtwinloseinfo(int index) const {
  return m_vtwinloseinfo_.Get(index);
}
inline ::Game_Poker::WinLoseInfo* MsgSC_NewGame::mutable_m_vtwinloseinfo(int index) {
  return m_vtwinloseinfo_.Mutable(index);
}
inline ::Game_Poker::WinLoseInfo* MsgSC_NewGame::add_m_vtwinloseinfo() {
  return m_vtwinloseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo >&
MsgSC_NewGame::m_vtwinloseinfo() const {
  return m_vtwinloseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo >*
MsgSC_NewGame::mutable_m_vtwinloseinfo() {
  return &m_vtwinloseinfo_;
}

// -------------------------------------------------------------------

// MsgSC_ContinueAns

// required sint32 m_lUSN = 1;
inline bool MsgSC_ContinueAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_ContinueAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_ContinueAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_ContinueAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_ContinueAns::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_ContinueAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// -------------------------------------------------------------------

// MsgSC_Continue

// repeated .Game_Poker.WinLoseInfo m_vtWinLoseInfo = 1;
inline int MsgSC_Continue::m_vtwinloseinfo_size() const {
  return m_vtwinloseinfo_.size();
}
inline void MsgSC_Continue::clear_m_vtwinloseinfo() {
  m_vtwinloseinfo_.Clear();
}
inline const ::Game_Poker::WinLoseInfo& MsgSC_Continue::m_vtwinloseinfo(int index) const {
  return m_vtwinloseinfo_.Get(index);
}
inline ::Game_Poker::WinLoseInfo* MsgSC_Continue::mutable_m_vtwinloseinfo(int index) {
  return m_vtwinloseinfo_.Mutable(index);
}
inline ::Game_Poker::WinLoseInfo* MsgSC_Continue::add_m_vtwinloseinfo() {
  return m_vtwinloseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo >&
MsgSC_Continue::m_vtwinloseinfo() const {
  return m_vtwinloseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::WinLoseInfo >*
MsgSC_Continue::mutable_m_vtwinloseinfo() {
  return &m_vtwinloseinfo_;
}

// -------------------------------------------------------------------

// MsgSC_SystemMsg

// required sint32 m_lType = 1;
inline bool MsgSC_SystemMsg::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_SystemMsg::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_SystemMsg::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_SystemMsg::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 MsgSC_SystemMsg::m_ltype() const {
  return m_ltype_;
}
inline void MsgSC_SystemMsg::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// -------------------------------------------------------------------

// MsgSC_PurgeAns

// -------------------------------------------------------------------

// MsgSC_PurgeInfo

// repeated .Game_Poker.VecUSN m_vtPurgeUSN = 1;
inline int MsgSC_PurgeInfo::m_vtpurgeusn_size() const {
  return m_vtpurgeusn_.size();
}
inline void MsgSC_PurgeInfo::clear_m_vtpurgeusn() {
  m_vtpurgeusn_.Clear();
}
inline const ::Game_Poker::VecUSN& MsgSC_PurgeInfo::m_vtpurgeusn(int index) const {
  return m_vtpurgeusn_.Get(index);
}
inline ::Game_Poker::VecUSN* MsgSC_PurgeInfo::mutable_m_vtpurgeusn(int index) {
  return m_vtpurgeusn_.Mutable(index);
}
inline ::Game_Poker::VecUSN* MsgSC_PurgeInfo::add_m_vtpurgeusn() {
  return m_vtpurgeusn_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecUSN >&
MsgSC_PurgeInfo::m_vtpurgeusn() const {
  return m_vtpurgeusn_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::VecUSN >*
MsgSC_PurgeInfo::mutable_m_vtpurgeusn() {
  return &m_vtpurgeusn_;
}

// required int32 m_nCount = 2;
inline bool MsgSC_PurgeInfo::has_m_ncount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_PurgeInfo::set_has_m_ncount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_PurgeInfo::clear_has_m_ncount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_PurgeInfo::clear_m_ncount() {
  m_ncount_ = 0;
  clear_has_m_ncount();
}
inline ::google::protobuf::int32 MsgSC_PurgeInfo::m_ncount() const {
  return m_ncount_;
}
inline void MsgSC_PurgeInfo::set_m_ncount(::google::protobuf::int32 value) {
  set_has_m_ncount();
  m_ncount_ = value;
}

// -------------------------------------------------------------------

// MsgSC_SetPurgeMoney

// required sint32 m_lUSN = 1;
inline bool MsgSC_SetPurgeMoney::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_SetPurgeMoney::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_SetPurgeMoney::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_SetPurgeMoney::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_SetPurgeMoney::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_SetPurgeMoney::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required .Game_Poker.Money m_money = 2;
inline bool MsgSC_SetPurgeMoney::has_m_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_SetPurgeMoney::set_has_m_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_SetPurgeMoney::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_SetPurgeMoney::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::Money& MsgSC_SetPurgeMoney::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::Money* MsgSC_SetPurgeMoney::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::Money;
  return m_money_;
}
inline ::Game_Poker::Money* MsgSC_SetPurgeMoney::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MsgSC_AssaItemNotify

// required sint32 m_lUSN = 1;
inline bool MsgSC_AssaItemNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_AssaItemNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_AssaItemNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_AssaItemNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_AssaItemNotify::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_AssaItemNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lRankType = 2;
inline bool MsgSC_AssaItemNotify::has_m_lranktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_AssaItemNotify::set_has_m_lranktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_AssaItemNotify::clear_has_m_lranktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_AssaItemNotify::clear_m_lranktype() {
  m_lranktype_ = 0;
  clear_has_m_lranktype();
}
inline ::google::protobuf::int32 MsgSC_AssaItemNotify::m_lranktype() const {
  return m_lranktype_;
}
inline void MsgSC_AssaItemNotify::set_m_lranktype(::google::protobuf::int32 value) {
  set_has_m_lranktype();
  m_lranktype_ = value;
}

// required string m_sItem = 3;
inline bool MsgSC_AssaItemNotify::has_m_sitem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_AssaItemNotify::set_has_m_sitem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_AssaItemNotify::clear_has_m_sitem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_AssaItemNotify::clear_m_sitem() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    m_sitem_->clear();
  }
  clear_has_m_sitem();
}
inline const ::std::string& MsgSC_AssaItemNotify::m_sitem() const {
  return *m_sitem_;
}
inline void MsgSC_AssaItemNotify::set_m_sitem(const ::std::string& value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void MsgSC_AssaItemNotify::set_m_sitem(const char* value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void MsgSC_AssaItemNotify::set_m_sitem(const char* value, size_t size) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgSC_AssaItemNotify::mutable_m_sitem() {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  return m_sitem_;
}
inline ::std::string* MsgSC_AssaItemNotify::release_m_sitem() {
  clear_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sitem_;
    m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgSC_ThankYouItemNotify

// required sint32 m_lUSN = 1;
inline bool MsgSC_ThankYouItemNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_ThankYouItemNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_ThankYouItemNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_ThankYouItemNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_ThankYouItemNotify::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_ThankYouItemNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lRankType = 2;
inline bool MsgSC_ThankYouItemNotify::has_m_lranktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_ThankYouItemNotify::set_has_m_lranktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_ThankYouItemNotify::clear_has_m_lranktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_ThankYouItemNotify::clear_m_lranktype() {
  m_lranktype_ = 0;
  clear_has_m_lranktype();
}
inline ::google::protobuf::int32 MsgSC_ThankYouItemNotify::m_lranktype() const {
  return m_lranktype_;
}
inline void MsgSC_ThankYouItemNotify::set_m_lranktype(::google::protobuf::int32 value) {
  set_has_m_lranktype();
  m_lranktype_ = value;
}

// required sint64 m_llBasicDDangMoney = 3;
inline bool MsgSC_ThankYouItemNotify::has_m_llbasicddangmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_ThankYouItemNotify::set_has_m_llbasicddangmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_ThankYouItemNotify::clear_has_m_llbasicddangmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_ThankYouItemNotify::clear_m_llbasicddangmoney() {
  m_llbasicddangmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llbasicddangmoney();
}
inline ::google::protobuf::int64 MsgSC_ThankYouItemNotify::m_llbasicddangmoney() const {
  return m_llbasicddangmoney_;
}
inline void MsgSC_ThankYouItemNotify::set_m_llbasicddangmoney(::google::protobuf::int64 value) {
  set_has_m_llbasicddangmoney();
  m_llbasicddangmoney_ = value;
}

// required string m_sItem = 4;
inline bool MsgSC_ThankYouItemNotify::has_m_sitem() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_ThankYouItemNotify::set_has_m_sitem() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_ThankYouItemNotify::clear_has_m_sitem() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_ThankYouItemNotify::clear_m_sitem() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    m_sitem_->clear();
  }
  clear_has_m_sitem();
}
inline const ::std::string& MsgSC_ThankYouItemNotify::m_sitem() const {
  return *m_sitem_;
}
inline void MsgSC_ThankYouItemNotify::set_m_sitem(const ::std::string& value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void MsgSC_ThankYouItemNotify::set_m_sitem(const char* value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void MsgSC_ThankYouItemNotify::set_m_sitem(const char* value, size_t size) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgSC_ThankYouItemNotify::mutable_m_sitem() {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  return m_sitem_;
}
inline ::std::string* MsgSC_ThankYouItemNotify::release_m_sitem() {
  clear_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sitem_;
    m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgSC_MadeItemNotify

// required sint32 m_lUSN = 1;
inline bool MsgSC_MadeItemNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_MadeItemNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_MadeItemNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_MadeItemNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_MadeItemNotify::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_MadeItemNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_lRankType = 2;
inline bool MsgSC_MadeItemNotify::has_m_lranktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_MadeItemNotify::set_has_m_lranktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_MadeItemNotify::clear_has_m_lranktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_MadeItemNotify::clear_m_lranktype() {
  m_lranktype_ = 0;
  clear_has_m_lranktype();
}
inline ::google::protobuf::int32 MsgSC_MadeItemNotify::m_lranktype() const {
  return m_lranktype_;
}
inline void MsgSC_MadeItemNotify::set_m_lranktype(::google::protobuf::int32 value) {
  set_has_m_lranktype();
  m_lranktype_ = value;
}

// required string m_sItem = 3;
inline bool MsgSC_MadeItemNotify::has_m_sitem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_MadeItemNotify::set_has_m_sitem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_MadeItemNotify::clear_has_m_sitem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_MadeItemNotify::clear_m_sitem() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    m_sitem_->clear();
  }
  clear_has_m_sitem();
}
inline const ::std::string& MsgSC_MadeItemNotify::m_sitem() const {
  return *m_sitem_;
}
inline void MsgSC_MadeItemNotify::set_m_sitem(const ::std::string& value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void MsgSC_MadeItemNotify::set_m_sitem(const char* value) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(value);
}
inline void MsgSC_MadeItemNotify::set_m_sitem(const char* value, size_t size) {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  m_sitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgSC_MadeItemNotify::mutable_m_sitem() {
  set_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    m_sitem_ = new ::std::string;
  }
  return m_sitem_;
}
inline ::std::string* MsgSC_MadeItemNotify::release_m_sitem() {
  clear_has_m_sitem();
  if (m_sitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sitem_;
    m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgSC_ExtMoneyNotify

// required sint32 m_lUSN = 1;
inline bool MsgSC_ExtMoneyNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_ExtMoneyNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_ExtMoneyNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_ExtMoneyNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_ExtMoneyNotify::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_ExtMoneyNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_bExtType = 2;
inline bool MsgSC_ExtMoneyNotify::has_m_bexttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_ExtMoneyNotify::set_has_m_bexttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_ExtMoneyNotify::clear_has_m_bexttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_ExtMoneyNotify::clear_m_bexttype() {
  m_bexttype_ = 0;
  clear_has_m_bexttype();
}
inline ::google::protobuf::int32 MsgSC_ExtMoneyNotify::m_bexttype() const {
  return m_bexttype_;
}
inline void MsgSC_ExtMoneyNotify::set_m_bexttype(::google::protobuf::int32 value) {
  set_has_m_bexttype();
  m_bexttype_ = value;
}

// required sint64 m_llCMoney = 3;
inline bool MsgSC_ExtMoneyNotify::has_m_llcmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_ExtMoneyNotify::set_has_m_llcmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_ExtMoneyNotify::clear_has_m_llcmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_ExtMoneyNotify::clear_m_llcmoney() {
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcmoney();
}
inline ::google::protobuf::int64 MsgSC_ExtMoneyNotify::m_llcmoney() const {
  return m_llcmoney_;
}
inline void MsgSC_ExtMoneyNotify::set_m_llcmoney(::google::protobuf::int64 value) {
  set_has_m_llcmoney();
  m_llcmoney_ = value;
}

// required sint64 m_llCashBox = 4;
inline bool MsgSC_ExtMoneyNotify::has_m_llcashbox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_ExtMoneyNotify::set_has_m_llcashbox() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_ExtMoneyNotify::clear_has_m_llcashbox() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_ExtMoneyNotify::clear_m_llcashbox() {
  m_llcashbox_ = GOOGLE_LONGLONG(0);
  clear_has_m_llcashbox();
}
inline ::google::protobuf::int64 MsgSC_ExtMoneyNotify::m_llcashbox() const {
  return m_llcashbox_;
}
inline void MsgSC_ExtMoneyNotify::set_m_llcashbox(::google::protobuf::int64 value) {
  set_has_m_llcashbox();
  m_llcashbox_ = value;
}

// required sint64 m_llExtMoney = 5;
inline bool MsgSC_ExtMoneyNotify::has_m_llextmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgSC_ExtMoneyNotify::set_has_m_llextmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgSC_ExtMoneyNotify::clear_has_m_llextmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgSC_ExtMoneyNotify::clear_m_llextmoney() {
  m_llextmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llextmoney();
}
inline ::google::protobuf::int64 MsgSC_ExtMoneyNotify::m_llextmoney() const {
  return m_llextmoney_;
}
inline void MsgSC_ExtMoneyNotify::set_m_llextmoney(::google::protobuf::int64 value) {
  set_has_m_llextmoney();
  m_llextmoney_ = value;
}

// required sint64 m_llExtDate = 6;
inline bool MsgSC_ExtMoneyNotify::has_m_llextdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgSC_ExtMoneyNotify::set_has_m_llextdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgSC_ExtMoneyNotify::clear_has_m_llextdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgSC_ExtMoneyNotify::clear_m_llextdate() {
  m_llextdate_ = GOOGLE_LONGLONG(0);
  clear_has_m_llextdate();
}
inline ::google::protobuf::int64 MsgSC_ExtMoneyNotify::m_llextdate() const {
  return m_llextdate_;
}
inline void MsgSC_ExtMoneyNotify::set_m_llextdate(::google::protobuf::int64 value) {
  set_has_m_llextdate();
  m_llextdate_ = value;
}

// -------------------------------------------------------------------

// MsgSC_GameEndSystemMsg

// required sint32 m_lType = 1;
inline bool MsgSC_GameEndSystemMsg::has_m_ltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_GameEndSystemMsg::set_has_m_ltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_GameEndSystemMsg::clear_has_m_ltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_GameEndSystemMsg::clear_m_ltype() {
  m_ltype_ = 0;
  clear_has_m_ltype();
}
inline ::google::protobuf::int32 MsgSC_GameEndSystemMsg::m_ltype() const {
  return m_ltype_;
}
inline void MsgSC_GameEndSystemMsg::set_m_ltype(::google::protobuf::int32 value) {
  set_has_m_ltype();
  m_ltype_ = value;
}

// required sint32 m_lUSN = 2;
inline bool MsgSC_GameEndSystemMsg::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_GameEndSystemMsg::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_GameEndSystemMsg::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_GameEndSystemMsg::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_GameEndSystemMsg::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_GameEndSystemMsg::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint32 m_bGiveUp = 3;
inline bool MsgSC_GameEndSystemMsg::has_m_bgiveup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_GameEndSystemMsg::set_has_m_bgiveup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_GameEndSystemMsg::clear_has_m_bgiveup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_GameEndSystemMsg::clear_m_bgiveup() {
  m_bgiveup_ = 0;
  clear_has_m_bgiveup();
}
inline ::google::protobuf::int32 MsgSC_GameEndSystemMsg::m_bgiveup() const {
  return m_bgiveup_;
}
inline void MsgSC_GameEndSystemMsg::set_m_bgiveup(::google::protobuf::int32 value) {
  set_has_m_bgiveup();
  m_bgiveup_ = value;
}

// required sint64 m_llMoney = 4;
inline bool MsgSC_GameEndSystemMsg::has_m_llmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_GameEndSystemMsg::set_has_m_llmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_GameEndSystemMsg::clear_has_m_llmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_GameEndSystemMsg::clear_m_llmoney() {
  m_llmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llmoney();
}
inline ::google::protobuf::int64 MsgSC_GameEndSystemMsg::m_llmoney() const {
  return m_llmoney_;
}
inline void MsgSC_GameEndSystemMsg::set_m_llmoney(::google::protobuf::int64 value) {
  set_has_m_llmoney();
  m_llmoney_ = value;
}

// required string m_sMsg = 5;
inline bool MsgSC_GameEndSystemMsg::has_m_smsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgSC_GameEndSystemMsg::set_has_m_smsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgSC_GameEndSystemMsg::clear_has_m_smsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgSC_GameEndSystemMsg::clear_m_smsg() {
  if (m_smsg_ != &::google::protobuf::internal::kEmptyString) {
    m_smsg_->clear();
  }
  clear_has_m_smsg();
}
inline const ::std::string& MsgSC_GameEndSystemMsg::m_smsg() const {
  return *m_smsg_;
}
inline void MsgSC_GameEndSystemMsg::set_m_smsg(const ::std::string& value) {
  set_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smsg_ = new ::std::string;
  }
  m_smsg_->assign(value);
}
inline void MsgSC_GameEndSystemMsg::set_m_smsg(const char* value) {
  set_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smsg_ = new ::std::string;
  }
  m_smsg_->assign(value);
}
inline void MsgSC_GameEndSystemMsg::set_m_smsg(const char* value, size_t size) {
  set_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smsg_ = new ::std::string;
  }
  m_smsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgSC_GameEndSystemMsg::mutable_m_smsg() {
  set_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    m_smsg_ = new ::std::string;
  }
  return m_smsg_;
}
inline ::std::string* MsgSC_GameEndSystemMsg::release_m_smsg() {
  clear_has_m_smsg();
  if (m_smsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_smsg_;
    m_smsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgSC_ChangeAvatarNotify

// required sint32 m_lUSN = 1;
inline bool MsgSC_ChangeAvatarNotify::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_ChangeAvatarNotify::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_ChangeAvatarNotify::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_ChangeAvatarNotify::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_ChangeAvatarNotify::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_ChangeAvatarNotify::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool MsgSC_ChangeAvatarNotify::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_ChangeAvatarNotify::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_ChangeAvatarNotify::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_ChangeAvatarNotify::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 MsgSC_ChangeAvatarNotify::m_nindex() const {
  return m_nindex_;
}
inline void MsgSC_ChangeAvatarNotify::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required .Game_Poker.UserInfo m_uinfo = 3;
inline bool MsgSC_ChangeAvatarNotify::has_m_uinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_ChangeAvatarNotify::set_has_m_uinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_ChangeAvatarNotify::clear_has_m_uinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_ChangeAvatarNotify::clear_m_uinfo() {
  if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::UserInfo::Clear();
  clear_has_m_uinfo();
}
inline const ::Game_Poker::UserInfo& MsgSC_ChangeAvatarNotify::m_uinfo() const {
  return m_uinfo_ != NULL ? *m_uinfo_ : *default_instance_->m_uinfo_;
}
inline ::Game_Poker::UserInfo* MsgSC_ChangeAvatarNotify::mutable_m_uinfo() {
  set_has_m_uinfo();
  if (m_uinfo_ == NULL) m_uinfo_ = new ::Game_Poker::UserInfo;
  return m_uinfo_;
}
inline ::Game_Poker::UserInfo* MsgSC_ChangeAvatarNotify::release_m_uinfo() {
  clear_has_m_uinfo();
  ::Game_Poker::UserInfo* temp = m_uinfo_;
  m_uinfo_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MsgSC_AbuseAns

// -------------------------------------------------------------------

// MsgSC_SoundTypeAns

// required sint32 m_lUSN = 1;
inline bool MsgSC_SoundTypeAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_SoundTypeAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_SoundTypeAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_SoundTypeAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_SoundTypeAns::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_SoundTypeAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool MsgSC_SoundTypeAns::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_SoundTypeAns::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_SoundTypeAns::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_SoundTypeAns::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 MsgSC_SoundTypeAns::m_nindex() const {
  return m_nindex_;
}
inline void MsgSC_SoundTypeAns::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lSoundType = 3;
inline bool MsgSC_SoundTypeAns::has_m_lsoundtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_SoundTypeAns::set_has_m_lsoundtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_SoundTypeAns::clear_has_m_lsoundtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_SoundTypeAns::clear_m_lsoundtype() {
  m_lsoundtype_ = 0;
  clear_has_m_lsoundtype();
}
inline ::google::protobuf::int32 MsgSC_SoundTypeAns::m_lsoundtype() const {
  return m_lsoundtype_;
}
inline void MsgSC_SoundTypeAns::set_m_lsoundtype(::google::protobuf::int32 value) {
  set_has_m_lsoundtype();
  m_lsoundtype_ = value;
}

// -------------------------------------------------------------------

// MsgSC_FMoney

// required string m_sFMoney = 1;
inline bool MsgSC_FMoney::has_m_sfmoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_FMoney::set_has_m_sfmoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_FMoney::clear_has_m_sfmoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_FMoney::clear_m_sfmoney() {
  if (m_sfmoney_ != &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_->clear();
  }
  clear_has_m_sfmoney();
}
inline const ::std::string& MsgSC_FMoney::m_sfmoney() const {
  return *m_sfmoney_;
}
inline void MsgSC_FMoney::set_m_sfmoney(const ::std::string& value) {
  set_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_ = new ::std::string;
  }
  m_sfmoney_->assign(value);
}
inline void MsgSC_FMoney::set_m_sfmoney(const char* value) {
  set_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_ = new ::std::string;
  }
  m_sfmoney_->assign(value);
}
inline void MsgSC_FMoney::set_m_sfmoney(const char* value, size_t size) {
  set_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_ = new ::std::string;
  }
  m_sfmoney_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgSC_FMoney::mutable_m_sfmoney() {
  set_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    m_sfmoney_ = new ::std::string;
  }
  return m_sfmoney_;
}
inline ::std::string* MsgSC_FMoney::release_m_sfmoney() {
  clear_has_m_sfmoney();
  if (m_sfmoney_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sfmoney_;
    m_sfmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgSC_ItemNotify

// required sint32 m_lLimitTotalCnt = 1;
inline bool MsgSC_ItemNotify::has_m_llimittotalcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_ItemNotify::set_has_m_llimittotalcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_ItemNotify::clear_has_m_llimittotalcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_ItemNotify::clear_m_llimittotalcnt() {
  m_llimittotalcnt_ = 0;
  clear_has_m_llimittotalcnt();
}
inline ::google::protobuf::int32 MsgSC_ItemNotify::m_llimittotalcnt() const {
  return m_llimittotalcnt_;
}
inline void MsgSC_ItemNotify::set_m_llimittotalcnt(::google::protobuf::int32 value) {
  set_has_m_llimittotalcnt();
  m_llimittotalcnt_ = value;
}

// required sint32 m_lLimitTodayCnt = 2;
inline bool MsgSC_ItemNotify::has_m_llimittodaycnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_ItemNotify::set_has_m_llimittodaycnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_ItemNotify::clear_has_m_llimittodaycnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_ItemNotify::clear_m_llimittodaycnt() {
  m_llimittodaycnt_ = 0;
  clear_has_m_llimittodaycnt();
}
inline ::google::protobuf::int32 MsgSC_ItemNotify::m_llimittodaycnt() const {
  return m_llimittodaycnt_;
}
inline void MsgSC_ItemNotify::set_m_llimittodaycnt(::google::protobuf::int32 value) {
  set_has_m_llimittodaycnt();
  m_llimittodaycnt_ = value;
}

// required sint32 m_bInfinitySpeedItem = 3;
inline bool MsgSC_ItemNotify::has_m_binfinityspeeditem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_ItemNotify::set_has_m_binfinityspeeditem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_ItemNotify::clear_has_m_binfinityspeeditem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_ItemNotify::clear_m_binfinityspeeditem() {
  m_binfinityspeeditem_ = 0;
  clear_has_m_binfinityspeeditem();
}
inline ::google::protobuf::int32 MsgSC_ItemNotify::m_binfinityspeeditem() const {
  return m_binfinityspeeditem_;
}
inline void MsgSC_ItemNotify::set_m_binfinityspeeditem(::google::protobuf::int32 value) {
  set_has_m_binfinityspeeditem();
  m_binfinityspeeditem_ = value;
}

// required sint64 m_llSpeedToTime = 4;
inline bool MsgSC_ItemNotify::has_m_llspeedtotime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_ItemNotify::set_has_m_llspeedtotime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_ItemNotify::clear_has_m_llspeedtotime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_ItemNotify::clear_m_llspeedtotime() {
  m_llspeedtotime_ = GOOGLE_LONGLONG(0);
  clear_has_m_llspeedtotime();
}
inline ::google::protobuf::int64 MsgSC_ItemNotify::m_llspeedtotime() const {
  return m_llspeedtotime_;
}
inline void MsgSC_ItemNotify::set_m_llspeedtotime(::google::protobuf::int64 value) {
  set_has_m_llspeedtotime();
  m_llspeedtotime_ = value;
}

// -------------------------------------------------------------------

// MsgSC_DisconnectMoneyNotify

// required string m_sNickName = 1;
inline bool MsgSC_DisconnectMoneyNotify::has_m_snickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_DisconnectMoneyNotify::set_has_m_snickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_DisconnectMoneyNotify::clear_has_m_snickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_DisconnectMoneyNotify::clear_m_snickname() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    m_snickname_->clear();
  }
  clear_has_m_snickname();
}
inline const ::std::string& MsgSC_DisconnectMoneyNotify::m_snickname() const {
  return *m_snickname_;
}
inline void MsgSC_DisconnectMoneyNotify::set_m_snickname(const ::std::string& value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void MsgSC_DisconnectMoneyNotify::set_m_snickname(const char* value) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(value);
}
inline void MsgSC_DisconnectMoneyNotify::set_m_snickname(const char* value, size_t size) {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  m_snickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgSC_DisconnectMoneyNotify::mutable_m_snickname() {
  set_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    m_snickname_ = new ::std::string;
  }
  return m_snickname_;
}
inline ::std::string* MsgSC_DisconnectMoneyNotify::release_m_snickname() {
  clear_has_m_snickname();
  if (m_snickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_snickname_;
    m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint64 m_llDisconnectMoney = 2;
inline bool MsgSC_DisconnectMoneyNotify::has_m_lldisconnectmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_DisconnectMoneyNotify::set_has_m_lldisconnectmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_DisconnectMoneyNotify::clear_has_m_lldisconnectmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_DisconnectMoneyNotify::clear_m_lldisconnectmoney() {
  m_lldisconnectmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lldisconnectmoney();
}
inline ::google::protobuf::int64 MsgSC_DisconnectMoneyNotify::m_lldisconnectmoney() const {
  return m_lldisconnectmoney_;
}
inline void MsgSC_DisconnectMoneyNotify::set_m_lldisconnectmoney(::google::protobuf::int64 value) {
  set_has_m_lldisconnectmoney();
  m_lldisconnectmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_ExitNtf

// required sint32 m_lUSN = 1;
inline bool MsgSC_ExitNtf::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_ExitNtf::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_ExitNtf::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_ExitNtf::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_ExitNtf::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_ExitNtf::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nIndex = 2;
inline bool MsgSC_ExitNtf::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_ExitNtf::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_ExitNtf::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_ExitNtf::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 MsgSC_ExitNtf::m_nindex() const {
  return m_nindex_;
}
inline void MsgSC_ExitNtf::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required sint32 m_lExit = 3;
inline bool MsgSC_ExitNtf::has_m_lexit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_ExitNtf::set_has_m_lexit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_ExitNtf::clear_has_m_lexit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_ExitNtf::clear_m_lexit() {
  m_lexit_ = 0;
  clear_has_m_lexit();
}
inline ::google::protobuf::int32 MsgSC_ExitNtf::m_lexit() const {
  return m_lexit_;
}
inline void MsgSC_ExitNtf::set_m_lexit(::google::protobuf::int32 value) {
  set_has_m_lexit();
  m_lexit_ = value;
}

// required sint32 m_bExit = 4;
inline bool MsgSC_ExitNtf::has_m_bexit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_ExitNtf::set_has_m_bexit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_ExitNtf::clear_has_m_bexit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_ExitNtf::clear_m_bexit() {
  m_bexit_ = 0;
  clear_has_m_bexit();
}
inline ::google::protobuf::int32 MsgSC_ExitNtf::m_bexit() const {
  return m_bexit_;
}
inline void MsgSC_ExitNtf::set_m_bexit(::google::protobuf::int32 value) {
  set_has_m_bexit();
  m_bexit_ = value;
}

// -------------------------------------------------------------------

// MsgSC_RematchOKAns

// required sint32 m_lUSN = 1;
inline bool MsgSC_RematchOKAns::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_RematchOKAns::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_RematchOKAns::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_RematchOKAns::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_RematchOKAns::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_RematchOKAns::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint64 m_llPoolMoney = 2;
inline bool MsgSC_RematchOKAns::has_m_llpoolmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_RematchOKAns::set_has_m_llpoolmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_RematchOKAns::clear_has_m_llpoolmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_RematchOKAns::clear_m_llpoolmoney() {
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llpoolmoney();
}
inline ::google::protobuf::int64 MsgSC_RematchOKAns::m_llpoolmoney() const {
  return m_llpoolmoney_;
}
inline void MsgSC_RematchOKAns::set_m_llpoolmoney(::google::protobuf::int64 value) {
  set_has_m_llpoolmoney();
  m_llpoolmoney_ = value;
}

// required .Game_Poker.Money m_money = 3;
inline bool MsgSC_RematchOKAns::has_m_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_RematchOKAns::set_has_m_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_RematchOKAns::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_RematchOKAns::clear_m_money() {
  if (m_money_ != NULL) m_money_->::Game_Poker::Money::Clear();
  clear_has_m_money();
}
inline const ::Game_Poker::Money& MsgSC_RematchOKAns::m_money() const {
  return m_money_ != NULL ? *m_money_ : *default_instance_->m_money_;
}
inline ::Game_Poker::Money* MsgSC_RematchOKAns::mutable_m_money() {
  set_has_m_money();
  if (m_money_ == NULL) m_money_ = new ::Game_Poker::Money;
  return m_money_;
}
inline ::Game_Poker::Money* MsgSC_RematchOKAns::release_m_money() {
  clear_has_m_money();
  ::Game_Poker::Money* temp = m_money_;
  m_money_ = NULL;
  return temp;
}

// required sint32 m_bRematchOK = 4;
inline bool MsgSC_RematchOKAns::has_m_brematchok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSC_RematchOKAns::set_has_m_brematchok() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSC_RematchOKAns::clear_has_m_brematchok() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSC_RematchOKAns::clear_m_brematchok() {
  m_brematchok_ = 0;
  clear_has_m_brematchok();
}
inline ::google::protobuf::int32 MsgSC_RematchOKAns::m_brematchok() const {
  return m_brematchok_;
}
inline void MsgSC_RematchOKAns::set_m_brematchok(::google::protobuf::int32 value) {
  set_has_m_brematchok();
  m_brematchok_ = value;
}

// -------------------------------------------------------------------

// MsgSC_RuleNotify

// required int32 m_nRuleIdx = 1;
inline bool MsgSC_RuleNotify::has_m_nruleidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_RuleNotify::set_has_m_nruleidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_RuleNotify::clear_has_m_nruleidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_RuleNotify::clear_m_nruleidx() {
  m_nruleidx_ = 0;
  clear_has_m_nruleidx();
}
inline ::google::protobuf::int32 MsgSC_RuleNotify::m_nruleidx() const {
  return m_nruleidx_;
}
inline void MsgSC_RuleNotify::set_m_nruleidx(::google::protobuf::int32 value) {
  set_has_m_nruleidx();
  m_nruleidx_ = value;
}

// -------------------------------------------------------------------

// MsgSC_AllowEntryWaitingUser

// -------------------------------------------------------------------

// MsgSC_AllWaitingUserDataNtf

// required sint32 m_bSendWaitingUser = 1;
inline bool MsgSC_AllWaitingUserDataNtf::has_m_bsendwaitinguser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_AllWaitingUserDataNtf::set_has_m_bsendwaitinguser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_AllWaitingUserDataNtf::clear_has_m_bsendwaitinguser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_AllWaitingUserDataNtf::clear_m_bsendwaitinguser() {
  m_bsendwaitinguser_ = 0;
  clear_has_m_bsendwaitinguser();
}
inline ::google::protobuf::int32 MsgSC_AllWaitingUserDataNtf::m_bsendwaitinguser() const {
  return m_bsendwaitinguser_;
}
inline void MsgSC_AllWaitingUserDataNtf::set_m_bsendwaitinguser(::google::protobuf::int32 value) {
  set_has_m_bsendwaitinguser();
  m_bsendwaitinguser_ = value;
}

// repeated .Game_Poker.WAITINGUSERDATA m_WaitingUserData = 2;
inline int MsgSC_AllWaitingUserDataNtf::m_waitinguserdata_size() const {
  return m_waitinguserdata_.size();
}
inline void MsgSC_AllWaitingUserDataNtf::clear_m_waitinguserdata() {
  m_waitinguserdata_.Clear();
}
inline const ::Game_Poker::WAITINGUSERDATA& MsgSC_AllWaitingUserDataNtf::m_waitinguserdata(int index) const {
  return m_waitinguserdata_.Get(index);
}
inline ::Game_Poker::WAITINGUSERDATA* MsgSC_AllWaitingUserDataNtf::mutable_m_waitinguserdata(int index) {
  return m_waitinguserdata_.Mutable(index);
}
inline ::Game_Poker::WAITINGUSERDATA* MsgSC_AllWaitingUserDataNtf::add_m_waitinguserdata() {
  return m_waitinguserdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game_Poker::WAITINGUSERDATA >&
MsgSC_AllWaitingUserDataNtf::m_waitinguserdata() const {
  return m_waitinguserdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game_Poker::WAITINGUSERDATA >*
MsgSC_AllWaitingUserDataNtf::mutable_m_waitinguserdata() {
  return &m_waitinguserdata_;
}

// -------------------------------------------------------------------

// MsgSC_UserDataChangeNtf

// required .Game_Poker.RCUserData m_userData = 1;
inline bool MsgSC_UserDataChangeNtf::has_m_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_UserDataChangeNtf::set_has_m_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_UserDataChangeNtf::clear_has_m_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_UserDataChangeNtf::clear_m_userdata() {
  if (m_userdata_ != NULL) m_userdata_->::Game_Poker::RCUserData::Clear();
  clear_has_m_userdata();
}
inline const ::Game_Poker::RCUserData& MsgSC_UserDataChangeNtf::m_userdata() const {
  return m_userdata_ != NULL ? *m_userdata_ : *default_instance_->m_userdata_;
}
inline ::Game_Poker::RCUserData* MsgSC_UserDataChangeNtf::mutable_m_userdata() {
  set_has_m_userdata();
  if (m_userdata_ == NULL) m_userdata_ = new ::Game_Poker::RCUserData;
  return m_userdata_;
}
inline ::Game_Poker::RCUserData* MsgSC_UserDataChangeNtf::release_m_userdata() {
  clear_has_m_userdata();
  ::Game_Poker::RCUserData* temp = m_userdata_;
  m_userdata_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MsgSC_RefillMoneyNtf

// required sint32 m_lUSN = 1;
inline bool MsgSC_RefillMoneyNtf::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_RefillMoneyNtf::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_RefillMoneyNtf::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_RefillMoneyNtf::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_RefillMoneyNtf::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_RefillMoneyNtf::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nRefillCnt = 2;
inline bool MsgSC_RefillMoneyNtf::has_m_nrefillcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_RefillMoneyNtf::set_has_m_nrefillcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_RefillMoneyNtf::clear_has_m_nrefillcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_RefillMoneyNtf::clear_m_nrefillcnt() {
  m_nrefillcnt_ = 0;
  clear_has_m_nrefillcnt();
}
inline ::google::protobuf::int32 MsgSC_RefillMoneyNtf::m_nrefillcnt() const {
  return m_nrefillcnt_;
}
inline void MsgSC_RefillMoneyNtf::set_m_nrefillcnt(::google::protobuf::int32 value) {
  set_has_m_nrefillcnt();
  m_nrefillcnt_ = value;
}

// required sint64 m_llRefillMoney = 3;
inline bool MsgSC_RefillMoneyNtf::has_m_llrefillmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_RefillMoneyNtf::set_has_m_llrefillmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_RefillMoneyNtf::clear_has_m_llrefillmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_RefillMoneyNtf::clear_m_llrefillmoney() {
  m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llrefillmoney();
}
inline ::google::protobuf::int64 MsgSC_RefillMoneyNtf::m_llrefillmoney() const {
  return m_llrefillmoney_;
}
inline void MsgSC_RefillMoneyNtf::set_m_llrefillmoney(::google::protobuf::int64 value) {
  set_has_m_llrefillmoney();
  m_llrefillmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_JackpotMoneyNtf

// required sint32 m_lUSN = 1;
inline bool MsgSC_JackpotMoneyNtf::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_JackpotMoneyNtf::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_JackpotMoneyNtf::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_JackpotMoneyNtf::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_JackpotMoneyNtf::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_JackpotMoneyNtf::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required sint64 m_llJackpotMoney = 2;
inline bool MsgSC_JackpotMoneyNtf::has_m_lljackpotmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_JackpotMoneyNtf::set_has_m_lljackpotmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_JackpotMoneyNtf::clear_has_m_lljackpotmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_JackpotMoneyNtf::clear_m_lljackpotmoney() {
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_lljackpotmoney();
}
inline ::google::protobuf::int64 MsgSC_JackpotMoneyNtf::m_lljackpotmoney() const {
  return m_lljackpotmoney_;
}
inline void MsgSC_JackpotMoneyNtf::set_m_lljackpotmoney(::google::protobuf::int64 value) {
  set_has_m_lljackpotmoney();
  m_lljackpotmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_GuardianAngelMoney

// required sint32 m_lUSN = 1;
inline bool MsgSC_GuardianAngelMoney::has_m_lusn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_GuardianAngelMoney::set_has_m_lusn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_GuardianAngelMoney::clear_has_m_lusn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_GuardianAngelMoney::clear_m_lusn() {
  m_lusn_ = 0;
  clear_has_m_lusn();
}
inline ::google::protobuf::int32 MsgSC_GuardianAngelMoney::m_lusn() const {
  return m_lusn_;
}
inline void MsgSC_GuardianAngelMoney::set_m_lusn(::google::protobuf::int32 value) {
  set_has_m_lusn();
  m_lusn_ = value;
}

// required int32 m_nGuardianAngelCnt = 2;
inline bool MsgSC_GuardianAngelMoney::has_m_nguardianangelcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSC_GuardianAngelMoney::set_has_m_nguardianangelcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSC_GuardianAngelMoney::clear_has_m_nguardianangelcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSC_GuardianAngelMoney::clear_m_nguardianangelcnt() {
  m_nguardianangelcnt_ = 0;
  clear_has_m_nguardianangelcnt();
}
inline ::google::protobuf::int32 MsgSC_GuardianAngelMoney::m_nguardianangelcnt() const {
  return m_nguardianangelcnt_;
}
inline void MsgSC_GuardianAngelMoney::set_m_nguardianangelcnt(::google::protobuf::int32 value) {
  set_has_m_nguardianangelcnt();
  m_nguardianangelcnt_ = value;
}

// required sint64 m_llAngelMoney = 3;
inline bool MsgSC_GuardianAngelMoney::has_m_llangelmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSC_GuardianAngelMoney::set_has_m_llangelmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSC_GuardianAngelMoney::clear_has_m_llangelmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSC_GuardianAngelMoney::clear_m_llangelmoney() {
  m_llangelmoney_ = GOOGLE_LONGLONG(0);
  clear_has_m_llangelmoney();
}
inline ::google::protobuf::int64 MsgSC_GuardianAngelMoney::m_llangelmoney() const {
  return m_llangelmoney_;
}
inline void MsgSC_GuardianAngelMoney::set_m_llangelmoney(::google::protobuf::int64 value) {
  set_has_m_llangelmoney();
  m_llangelmoney_ = value;
}

// -------------------------------------------------------------------

// MsgSC_GameMasterCallNtf

// required sint32 m_lGMCall_USN = 1;
inline bool MsgSC_GameMasterCallNtf::has_m_lgmcall_usn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_GameMasterCallNtf::set_has_m_lgmcall_usn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_GameMasterCallNtf::clear_has_m_lgmcall_usn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_GameMasterCallNtf::clear_m_lgmcall_usn() {
  m_lgmcall_usn_ = 0;
  clear_has_m_lgmcall_usn();
}
inline ::google::protobuf::int32 MsgSC_GameMasterCallNtf::m_lgmcall_usn() const {
  return m_lgmcall_usn_;
}
inline void MsgSC_GameMasterCallNtf::set_m_lgmcall_usn(::google::protobuf::int32 value) {
  set_has_m_lgmcall_usn();
  m_lgmcall_usn_ = value;
}

// -------------------------------------------------------------------

// MsgSC_ObserverCnt

// required int32 m_nObserverCnt = 1;
inline bool MsgSC_ObserverCnt::has_m_nobservercnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_ObserverCnt::set_has_m_nobservercnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_ObserverCnt::clear_has_m_nobservercnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_ObserverCnt::clear_m_nobservercnt() {
  m_nobservercnt_ = 0;
  clear_has_m_nobservercnt();
}
inline ::google::protobuf::int32 MsgSC_ObserverCnt::m_nobservercnt() const {
  return m_nobservercnt_;
}
inline void MsgSC_ObserverCnt::set_m_nobservercnt(::google::protobuf::int32 value) {
  set_has_m_nobservercnt();
  m_nobservercnt_ = value;
}

// -------------------------------------------------------------------

// MsgSC_Bonus

// required sint64 m_llBonus = 1;
inline bool MsgSC_Bonus::has_m_llbonus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_Bonus::set_has_m_llbonus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_Bonus::clear_has_m_llbonus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_Bonus::clear_m_llbonus() {
  m_llbonus_ = GOOGLE_LONGLONG(0);
  clear_has_m_llbonus();
}
inline ::google::protobuf::int64 MsgSC_Bonus::m_llbonus() const {
  return m_llbonus_;
}
inline void MsgSC_Bonus::set_m_llbonus(::google::protobuf::int64 value) {
  set_has_m_llbonus();
  m_llbonus_ = value;
}

// -------------------------------------------------------------------

// MsgSC_PoliceNotify

// required string m_policeMsg = 1;
inline bool MsgSC_PoliceNotify::has_m_policemsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSC_PoliceNotify::set_has_m_policemsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSC_PoliceNotify::clear_has_m_policemsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSC_PoliceNotify::clear_m_policemsg() {
  if (m_policemsg_ != &::google::protobuf::internal::kEmptyString) {
    m_policemsg_->clear();
  }
  clear_has_m_policemsg();
}
inline const ::std::string& MsgSC_PoliceNotify::m_policemsg() const {
  return *m_policemsg_;
}
inline void MsgSC_PoliceNotify::set_m_policemsg(const ::std::string& value) {
  set_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    m_policemsg_ = new ::std::string;
  }
  m_policemsg_->assign(value);
}
inline void MsgSC_PoliceNotify::set_m_policemsg(const char* value) {
  set_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    m_policemsg_ = new ::std::string;
  }
  m_policemsg_->assign(value);
}
inline void MsgSC_PoliceNotify::set_m_policemsg(const char* value, size_t size) {
  set_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    m_policemsg_ = new ::std::string;
  }
  m_policemsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgSC_PoliceNotify::mutable_m_policemsg() {
  set_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    m_policemsg_ = new ::std::string;
  }
  return m_policemsg_;
}
inline ::std::string* MsgSC_PoliceNotify::release_m_policemsg() {
  clear_has_m_policemsg();
  if (m_policemsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_policemsg_;
    m_policemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PayloadSC

// required uint32 mTagID = 1;
inline bool PayloadSC::has_mtagid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayloadSC::set_has_mtagid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayloadSC::clear_has_mtagid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayloadSC::clear_mtagid() {
  mtagid_ = 0u;
  clear_has_mtagid();
}
inline ::google::protobuf::uint32 PayloadSC::mtagid() const {
  return mtagid_;
}
inline void PayloadSC::set_mtagid(::google::protobuf::uint32 value) {
  set_has_mtagid();
  mtagid_ = value;
}

// required bool bShared = 2;
inline bool PayloadSC::has_bshared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayloadSC::set_has_bshared() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayloadSC::clear_has_bshared() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayloadSC::clear_bshared() {
  bshared_ = false;
  clear_has_bshared();
}
inline bool PayloadSC::bshared() const {
  return bshared_;
}
inline void PayloadSC::set_bshared(bool value) {
  set_has_bshared();
  bshared_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game_Poker

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game_Poker::Cards_state>() {
  return ::Game_Poker::Cards_state_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game_Poker::PayloadSC_TAGID>() {
  return ::Game_Poker::PayloadSC_TAGID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AdlGame_5fPoker_2eproto__INCLUDED
