//
// AdlGameUser_Poker_b.h: generated by XADL compiler 1.1 , 2011.8.24 16:38:0
//

#ifndef GAMEUSER_POKER_H
#define GAMEUSER_POKER_H

namespace adl { // start of namesapce
template<>
class BER<UserInfo >
{
public:
	static DWORD Size(const UserInfo& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<std::string >::Size(_obj.m_sNickName);
		dwSize += BER<std::string >::Size(_obj.m_sID);
		dwSize += BER<LONG >::Size(_obj.m_lCLevel);
		dwSize += BER<LONG >::Size(_obj.m_lSoundType);
		dwSize += BER<std::string >::Size(_obj.m_sAvt);
		dwSize += BER<LONG >::Size(_obj.m_lUserState);
		dwSize += BER<CWinLose >::Size(_obj.m_cWinLose);
		dwSize += BER<CWinLose >::Size(_obj.m_cWinLose_Today);
		dwSize += BER<CWinLose >::Size(_obj.m_cWinLose_Room);
		dwSize += BER<LONGLONG >::Size(_obj.m_llCMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llFMoney);
		dwSize += BER<LONG >::Size(_obj.m_lExit);
		dwSize += BER<int >::Size(_obj.m_nItemType);
		dwSize += BER<LONG >::Size(_obj.m_lAck);
		dwSize += BER<LONG >::Size(_obj.m_lJackpot);
		dwSize += BER<LONG >::Size(_obj.m_lDieCardsDealt);
		return dwSize;
	}

	static bool Load(UserInfo* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sNickName), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sID), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCLevel), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lSoundType), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sAvt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lUserState), ppBuf, pdwSize))
			return false;
		if(!BER<CWinLose >::Load(&(_obj->m_cWinLose), ppBuf, pdwSize))
			return false;
		if(!BER<CWinLose >::Load(&(_obj->m_cWinLose_Today), ppBuf, pdwSize))
			return false;
		if(!BER<CWinLose >::Load(&(_obj->m_cWinLose_Room), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llCMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llFMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lExit), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nItemType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lAck), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lJackpot), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lDieCardsDealt), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const UserInfo& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sNickName ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sID ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCLevel ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSoundType ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sAvt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUserState ))
			return false;
		if(!BER<CWinLose >::Store(ppBuf, pdwSize, _obj.m_cWinLose ))
			return false;
		if(!BER<CWinLose >::Store(ppBuf, pdwSize, _obj.m_cWinLose_Today ))
			return false;
		if(!BER<CWinLose >::Store(ppBuf, pdwSize, _obj.m_cWinLose_Room ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llCMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llFMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lExit ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nItemType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lAck ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lJackpot ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lDieCardsDealt ))
			return false;
		return true;
	}
	static bool Copy(UserInfo* _obj, const UserInfo& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sNickName), src.m_sNickName))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sID), src.m_sID))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCLevel), src.m_lCLevel))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lSoundType), src.m_lSoundType))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sAvt), src.m_sAvt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lUserState), src.m_lUserState))
			return false;
		if(!BER<CWinLose >::Copy(&(_obj->m_cWinLose), src.m_cWinLose))
			return false;
		if(!BER<CWinLose >::Copy(&(_obj->m_cWinLose_Today), src.m_cWinLose_Today))
			return false;
		if(!BER<CWinLose >::Copy(&(_obj->m_cWinLose_Room), src.m_cWinLose_Room))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llCMoney), src.m_llCMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llFMoney), src.m_llFMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lExit), src.m_lExit))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nItemType), src.m_nItemType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lAck), src.m_lAck))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lJackpot), src.m_lJackpot))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lDieCardsDealt), src.m_lDieCardsDealt))
			return false;
		return true;
	}

};

template<>
class BER<RCUser >
{
public:
	static DWORD Size(const RCUser& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONG >::Size(_obj.m_lJumin);
		dwSize += BER<LONG >::Size(_obj.m_lFirstUSN);
		dwSize += BER<LONG >::Size(_obj.m_lAgeIndex);
		dwSize += BER<LONG >::Size(_obj.m_lJobIndex);
		dwSize += BER<LONG >::Size(_obj.m_lRegionIndex);
		dwSize += BER<LONG >::Size(_obj.m_lGuildIndex);
		dwSize += BER<LONG >::Size(_obj.m_lMemberIndex);
		dwSize += BER<LONG >::Size(_obj.m_lClientIP);
		dwSize += BER<LONG >::Size(_obj.m_lGatewayIP);
		dwSize += BER<LONG >::Size(_obj.m_lMacAddress);
		dwSize += BER<std::string >::Size(_obj.m_sMobileInfo);
		dwSize += BER<std::string >::Size(_obj.m_sAuthKey);
		dwSize += BER<std::string >::Size(_obj.m_sUserGameData);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<std::string >::Size(_obj.m_sNickName);
		dwSize += BER<std::string >::Size(_obj.m_sUserID);
		dwSize += BER<std::string >::Size(_obj.m_sAvt);
		dwSize += BER<LONG >::Size(_obj.m_lCLevel);
		dwSize += BER<LONG >::Size(_obj.m_lSex);
		dwSize += BER<LONGLONG >::Size(_obj.m_llCMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llFMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llSafeMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPlastAllinDate);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPlastLogonDay);
		dwSize += BER<LONG >::Size(_obj.m_lMTodayPlayCount);
		dwSize += BER<LONG >::Size(_obj.m_lMTodayPlayTime);
		dwSize += BER<LONG >::Size(_obj.m_lPTotalPlayCount);
		dwSize += BER<CRefill >::Size(_obj.m_cRefill);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPExtMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPExtendDate);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPBonusDate);
		dwSize += BER<LONG >::Size(_obj.m_lMMonthPlayCount);
		dwSize += BER<LONG >::Size(_obj.m_lMMonthPlayTime);
		dwSize += BER<CWinLose >::Size(_obj.m_cWinLose);
		dwSize += BER<LONG >::Size(_obj.m_lGDisCnt);
		dwSize += BER<LONGLONG >::Size(_obj.m_llGlastLogonDay);
		dwSize += BER<LONGLONG >::Size(_obj.m_llGRegDate);
		dwSize += BER<LONGLONG >::Size(_obj.m_llGFirstPlayDate);
		dwSize += BER<LONG >::Size(_obj.m_lGTodayPlayCount);
		dwSize += BER<LONG >::Size(_obj.m_lGTodayPlayTime);
		dwSize += BER<LONG >::Size(_obj.m_lGTotalPlayCount);
		dwSize += BER<LONG >::Size(_obj.m_lGTotalPlayTime);
		dwSize += BER<LONG >::Size(_obj.m_lGAllinCnt);
		dwSize += BER<LONG >::Size(_obj.m_lGAllinOut);
		dwSize += BER<LONGLONG >::Size(_obj.m_llGLastAllinDate);
		dwSize += BER<CWinLose >::Size(_obj.m_cWinLose_Today);
		dwSize += BER<LONGLONG >::Size(_obj.m_llGTodayMoney);
		dwSize += BER<LONG >::Size(_obj.m_lFourCardCnt);
		dwSize += BER<LONG >::Size(_obj.m_lStraightFlushCnt);
		dwSize += BER<LONG >::Size(_obj.m_lRoyalStraightFlushCnt);
		dwSize += BER<int >::Size(_obj.m_nReserve01);
		dwSize += BER<int >::Size(_obj.m_nReserve02);
		dwSize += BER<ItemList >::Size(_obj.m_ItemList);
		dwSize += BER<LONGLONG >::Size(_obj.m_llJoinDate);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPlayDate);
		return dwSize;
	}

	static bool Load(RCUser* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lJumin), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lFirstUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lAgeIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lJobIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRegionIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGuildIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMemberIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lClientIP), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGatewayIP), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMacAddress), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sMobileInfo), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sAuthKey), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sUserGameData), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sNickName), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sUserID), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sAvt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCLevel), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lSex), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llCMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llFMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llSafeMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPlastAllinDate), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPlastLogonDay), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMTodayPlayCount), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMTodayPlayTime), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lPTotalPlayCount), ppBuf, pdwSize))
			return false;
		if(!BER<CRefill >::Load(&(_obj->m_cRefill), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPExtMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPExtendDate), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPBonusDate), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMMonthPlayCount), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lMMonthPlayTime), ppBuf, pdwSize))
			return false;
		if(!BER<CWinLose >::Load(&(_obj->m_cWinLose), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGDisCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llGlastLogonDay), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llGRegDate), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llGFirstPlayDate), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGTodayPlayCount), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGTodayPlayTime), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGTotalPlayCount), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGTotalPlayTime), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGAllinCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lGAllinOut), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llGLastAllinDate), ppBuf, pdwSize))
			return false;
		if(!BER<CWinLose >::Load(&(_obj->m_cWinLose_Today), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llGTodayMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lFourCardCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lStraightFlushCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRoyalStraightFlushCnt), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nReserve01), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nReserve02), ppBuf, pdwSize))
			return false;
		if(!BER<ItemList >::Load(&(_obj->m_ItemList), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llJoinDate), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPlayDate), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const RCUser& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lJumin ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lFirstUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lAgeIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lJobIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRegionIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGuildIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMemberIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lClientIP ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGatewayIP ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMacAddress ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sMobileInfo ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sAuthKey ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sUserGameData ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sNickName ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sUserID ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sAvt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCLevel ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSex ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llCMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llFMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llSafeMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPlastAllinDate ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPlastLogonDay ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMTodayPlayCount ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMTodayPlayTime ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lPTotalPlayCount ))
			return false;
		if(!BER<CRefill >::Store(ppBuf, pdwSize, _obj.m_cRefill ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPExtMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPExtendDate ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPBonusDate ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMMonthPlayCount ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lMMonthPlayTime ))
			return false;
		if(!BER<CWinLose >::Store(ppBuf, pdwSize, _obj.m_cWinLose ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGDisCnt ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llGlastLogonDay ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llGRegDate ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llGFirstPlayDate ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGTodayPlayCount ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGTodayPlayTime ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGTotalPlayCount ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGTotalPlayTime ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGAllinCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGAllinOut ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llGLastAllinDate ))
			return false;
		if(!BER<CWinLose >::Store(ppBuf, pdwSize, _obj.m_cWinLose_Today ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llGTodayMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lFourCardCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lStraightFlushCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRoyalStraightFlushCnt ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nReserve01 ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nReserve02 ))
			return false;
		if(!BER<ItemList >::Store(ppBuf, pdwSize, _obj.m_ItemList ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llJoinDate ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPlayDate ))
			return false;
		return true;
	}
	static bool Copy(RCUser* _obj, const RCUser& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lJumin), src.m_lJumin))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lFirstUSN), src.m_lFirstUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lAgeIndex), src.m_lAgeIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lJobIndex), src.m_lJobIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRegionIndex), src.m_lRegionIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGuildIndex), src.m_lGuildIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMemberIndex), src.m_lMemberIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lClientIP), src.m_lClientIP))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGatewayIP), src.m_lGatewayIP))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMacAddress), src.m_lMacAddress))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sMobileInfo), src.m_sMobileInfo))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sAuthKey), src.m_sAuthKey))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sUserGameData), src.m_sUserGameData))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sNickName), src.m_sNickName))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sUserID), src.m_sUserID))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sAvt), src.m_sAvt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCLevel), src.m_lCLevel))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lSex), src.m_lSex))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llCMoney), src.m_llCMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llFMoney), src.m_llFMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llSafeMoney), src.m_llSafeMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPlastAllinDate), src.m_llPlastAllinDate))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPlastLogonDay), src.m_llPlastLogonDay))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMTodayPlayCount), src.m_lMTodayPlayCount))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMTodayPlayTime), src.m_lMTodayPlayTime))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lPTotalPlayCount), src.m_lPTotalPlayCount))
			return false;
		if(!BER<CRefill >::Copy(&(_obj->m_cRefill), src.m_cRefill))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPExtMoney), src.m_llPExtMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPExtendDate), src.m_llPExtendDate))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPBonusDate), src.m_llPBonusDate))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMMonthPlayCount), src.m_lMMonthPlayCount))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lMMonthPlayTime), src.m_lMMonthPlayTime))
			return false;
		if(!BER<CWinLose >::Copy(&(_obj->m_cWinLose), src.m_cWinLose))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGDisCnt), src.m_lGDisCnt))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llGlastLogonDay), src.m_llGlastLogonDay))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llGRegDate), src.m_llGRegDate))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llGFirstPlayDate), src.m_llGFirstPlayDate))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGTodayPlayCount), src.m_lGTodayPlayCount))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGTodayPlayTime), src.m_lGTodayPlayTime))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGTotalPlayCount), src.m_lGTotalPlayCount))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGTotalPlayTime), src.m_lGTotalPlayTime))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGAllinCnt), src.m_lGAllinCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lGAllinOut), src.m_lGAllinOut))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llGLastAllinDate), src.m_llGLastAllinDate))
			return false;
		if(!BER<CWinLose >::Copy(&(_obj->m_cWinLose_Today), src.m_cWinLose_Today))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llGTodayMoney), src.m_llGTodayMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lFourCardCnt), src.m_lFourCardCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lStraightFlushCnt), src.m_lStraightFlushCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRoyalStraightFlushCnt), src.m_lRoyalStraightFlushCnt))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nReserve01), src.m_nReserve01))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nReserve02), src.m_nReserve02))
			return false;
		if(!BER<ItemList >::Copy(&(_obj->m_ItemList), src.m_ItemList))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llJoinDate), src.m_llJoinDate))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPlayDate), src.m_llPlayDate))
			return false;
		return true;
	}

};

};

#endif //!
