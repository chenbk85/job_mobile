//
// AdlGame_Poker_b.h: generated by XADL compiler 1.1 , 2011.8.24 16:38:0
//

#ifndef GAME_POKER_H
#define GAME_POKER_H

namespace adl { // start of namesapce
template<>
class BER<MsgCS_Entry >
{
public:
	static DWORD Size(const MsgCS_Entry& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nVersion);
		dwSize += BER<LONG >::Size(_obj.m_bWelcomeSound);
		dwSize += BER<LONG >::Size(_obj.m_lSoundType);
		dwSize += BER<std::string >::Size(_obj.m_sNickName);
		dwSize += BER<std::string >::Size(_obj.m_sAvt);
		dwSize += BER<LONG >::Size(_obj.m_lCLevel);
		dwSize += BER<LONG >::Size(_obj.m_lSex);
		return dwSize;
	}

	static bool Load(MsgCS_Entry* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nVersion), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bWelcomeSound), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lSoundType), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sNickName), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sAvt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCLevel), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lSex), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_Entry& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nVersion ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bWelcomeSound ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSoundType ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sNickName ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sAvt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCLevel ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSex ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_Entry* _obj, const MsgCS_Entry& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nVersion), src.m_nVersion))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bWelcomeSound), src.m_bWelcomeSound))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lSoundType), src.m_lSoundType))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sNickName), src.m_sNickName))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sAvt), src.m_sAvt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCLevel), src.m_lCLevel))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lSex), src.m_lSex))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_Observe >
{
public:
	static DWORD Size(const MsgCS_Observe& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgCS_Observe* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_Observe& _obj )
	{
		return true;
	}
	static bool Copy(MsgCS_Observe* _obj, const MsgCS_Observe& src)
	{
		return true;
	}

};

template<>
class BER<MsgCS_Start >
{
public:
	static DWORD Size(const MsgCS_Start& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgCS_Start* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_Start& _obj )
	{
		return true;
	}
	static bool Copy(MsgCS_Start* _obj, const MsgCS_Start& src)
	{
		return true;
	}

};

template<>
class BER<MsgCS_SelectedCardReq >
{
public:
	static DWORD Size(const MsgCS_SelectedCardReq& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lCardIdx);
		return dwSize;
	}

	static bool Load(MsgCS_SelectedCardReq* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lCardIdx), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_SelectedCardReq& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCardIdx ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_SelectedCardReq* _obj, const MsgCS_SelectedCardReq& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lCardIdx), src.m_lCardIdx))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_BettingReq >
{
public:
	static DWORD Size(const MsgCS_BettingReq& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lBetType);
		return dwSize;
	}

	static bool Load(MsgCS_BettingReq* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lBetType), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_BettingReq& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBetType ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_BettingReq* _obj, const MsgCS_BettingReq& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lBetType), src.m_lBetType))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_ChoiceRemoveCard >
{
public:
	static DWORD Size(const MsgCS_ChoiceRemoveCard& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nRemoveCardIndex);
		return dwSize;
	}

	static bool Load(MsgCS_ChoiceRemoveCard* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nRemoveCardIndex), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_ChoiceRemoveCard& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nRemoveCardIndex ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_ChoiceRemoveCard* _obj, const MsgCS_ChoiceRemoveCard& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nRemoveCardIndex), src.m_nRemoveCardIndex))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_Purge >
{
public:
	static DWORD Size(const MsgCS_Purge& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lType);
		dwSize += BER<LONG >::Size(_obj.m_lPurgeUSN);
		return dwSize;
	}

	static bool Load(MsgCS_Purge* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lPurgeUSN), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_Purge& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lPurgeUSN ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_Purge* _obj, const MsgCS_Purge& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lType), src.m_lType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lPurgeUSN), src.m_lPurgeUSN))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_Abuse >
{
public:
	static DWORD Size(const MsgCS_Abuse& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lType);
		dwSize += BER<std::string >::Size(_obj.m_sDay);
		return dwSize;
	}

	static bool Load(MsgCS_Abuse* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lType), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sDay), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_Abuse& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lType ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sDay ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_Abuse* _obj, const MsgCS_Abuse& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lType), src.m_lType))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sDay), src.m_sDay))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_AskPurgeVote >
{
public:
	static DWORD Size(const MsgCS_AskPurgeVote& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lPurgeUSN);
		return dwSize;
	}

	static bool Load(MsgCS_AskPurgeVote* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lPurgeUSN), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_AskPurgeVote& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lPurgeUSN ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_AskPurgeVote* _obj, const MsgCS_AskPurgeVote& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lPurgeUSN), src.m_lPurgeUSN))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_AnswerPurgeVote >
{
public:
	static DWORD Size(const MsgCS_AnswerPurgeVote& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lAnswer);
		return dwSize;
	}

	static bool Load(MsgCS_AnswerPurgeVote* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lAnswer), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_AnswerPurgeVote& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lAnswer ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_AnswerPurgeVote* _obj, const MsgCS_AnswerPurgeVote& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lAnswer), src.m_lAnswer))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_WaitingUserTicketReq >
{
public:
	static DWORD Size(const MsgCS_WaitingUserTicketReq& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nType);
		dwSize += BER<LONG >::Size(_obj.m_bValue);
		return dwSize;
	}

	static bool Load(MsgCS_WaitingUserTicketReq* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bValue), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_WaitingUserTicketReq& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bValue ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_WaitingUserTicketReq* _obj, const MsgCS_WaitingUserTicketReq& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nType), src.m_nType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bValue), src.m_bValue))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_UpdateWaitingUserInfoReq >
{
public:
	static DWORD Size(const MsgCS_UpdateWaitingUserInfoReq& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgCS_UpdateWaitingUserInfoReq* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_UpdateWaitingUserInfoReq& _obj )
	{
		return true;
	}
	static bool Copy(MsgCS_UpdateWaitingUserInfoReq* _obj, const MsgCS_UpdateWaitingUserInfoReq& src)
	{
		return true;
	}

};

template<>
class BER<MsgCS_SoundType >
{
public:
	static DWORD Size(const MsgCS_SoundType& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lSoundType);
		return dwSize;
	}

	static bool Load(MsgCS_SoundType* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lSoundType), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_SoundType& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSoundType ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_SoundType* _obj, const MsgCS_SoundType& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lSoundType), src.m_lSoundType))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_ExitQue >
{
public:
	static DWORD Size(const MsgCS_ExitQue& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lExit);
		dwSize += BER<LONG >::Size(_obj.m_bAction);
		return dwSize;
	}

	static bool Load(MsgCS_ExitQue* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lExit), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bAction), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_ExitQue& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lExit ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bAction ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_ExitQue* _obj, const MsgCS_ExitQue& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lExit), src.m_lExit))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bAction), src.m_bAction))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_Continue >
{
public:
	static DWORD Size(const MsgCS_Continue& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lExit);
		return dwSize;
	}

	static bool Load(MsgCS_Continue* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lExit), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_Continue& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lExit ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_Continue* _obj, const MsgCS_Continue& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lExit), src.m_lExit))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_RuleSet >
{
public:
	static DWORD Size(const MsgCS_RuleSet& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nRuleIdx);
		return dwSize;
	}

	static bool Load(MsgCS_RuleSet* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nRuleIdx), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_RuleSet& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nRuleIdx ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_RuleSet* _obj, const MsgCS_RuleSet& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nRuleIdx), src.m_nRuleIdx))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_GameMasterCall >
{
public:
	static DWORD Size(const MsgCS_GameMasterCall& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgCS_GameMasterCall* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_GameMasterCall& _obj )
	{
		return true;
	}
	static bool Copy(MsgCS_GameMasterCall* _obj, const MsgCS_GameMasterCall& src)
	{
		return true;
	}

};

template<>
class BER<MsgCS_FieldReserved >
{
public:
	static DWORD Size(const MsgCS_FieldReserved& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nReserved1);
		dwSize += BER<int >::Size(_obj.m_nReserved2);
		return dwSize;
	}

	static bool Load(MsgCS_FieldReserved* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nReserved1), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nReserved2), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_FieldReserved& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nReserved1 ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nReserved2 ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_FieldReserved* _obj, const MsgCS_FieldReserved& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nReserved1), src.m_nReserved1))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nReserved2), src.m_nReserved2))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_JokboSet >
{
public:
	static DWORD Size(const MsgCS_JokboSet& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lKey1);
		dwSize += BER<LONG >::Size(_obj.m_lKey2);
		dwSize += BER<LONG >::Size(_obj.m_lKey3);
		dwSize += BER<LONG >::Size(_obj.m_lKey4);
		dwSize += BER<LONG >::Size(_obj.m_lKey5);
		return dwSize;
	}

	static bool Load(MsgCS_JokboSet* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lKey1), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lKey2), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lKey3), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lKey4), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lKey5), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_JokboSet& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lKey1 ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lKey2 ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lKey3 ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lKey4 ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lKey5 ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_JokboSet* _obj, const MsgCS_JokboSet& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lKey1), src.m_lKey1))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lKey2), src.m_lKey2))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lKey3), src.m_lKey3))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lKey4), src.m_lKey4))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lKey5), src.m_lKey5))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_TestKeySetting >
{
public:
	static DWORD Size(const MsgCS_TestKeySetting& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<UINT >::Size(_obj.m_nChar);
		return dwSize;
	}

	static bool Load(MsgCS_TestKeySetting* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<UINT >::Load(&(_obj->m_nChar), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_TestKeySetting& _obj )
	{
		if(!BER<UINT >::Store(ppBuf, pdwSize, _obj.m_nChar ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_TestKeySetting* _obj, const MsgCS_TestKeySetting& src)
	{
		if(!BER<UINT >::Copy(&(_obj->m_nChar), src.m_nChar))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_CheckNotice >
{
public:
	static DWORD Size(const MsgCS_CheckNotice& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nType);
		return dwSize;
	}

	static bool Load(MsgCS_CheckNotice* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nType), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_CheckNotice& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nType ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_CheckNotice* _obj, const MsgCS_CheckNotice& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nType), src.m_nType))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_Ack >
{
public:
	static DWORD Size(const MsgCS_Ack& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nTagID);
		return dwSize;
	}

	static bool Load(MsgCS_Ack* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nTagID), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_Ack& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nTagID ))
			return false;
		return true;
	}
	static bool Copy(MsgCS_Ack* _obj, const MsgCS_Ack& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nTagID), src.m_nTagID))
			return false;
		return true;
	}

};

template<>
class BER<MsgCS_Ping >
{
public:
	static DWORD Size(const MsgCS_Ping& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgCS_Ping* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgCS_Ping& _obj )
	{
		return true;
	}
	static bool Copy(MsgCS_Ping* _obj, const MsgCS_Ping& src)
	{
		return true;
	}

};

template<>
class BER<PayloadCS>
{
public:
	template<typename T>
	static DWORD Size(const T& _obj)
	{
		DWORD dwSize = BER<UINT>::Size(_obj.mTagID);
		switch(_obj.mTagID)
		{
		case PayloadCS::msgEntry_Tag: 
			dwSize += BER<MsgCS_Entry >::Size(*_obj.un.m_msgEntry);
			break;
		case PayloadCS::msgObserve_Tag: 
			dwSize += BER<MsgCS_Observe >::Size(*_obj.un.m_msgObserve);
			break;
		case PayloadCS::msgStart_Tag: 
			dwSize += BER<MsgCS_Start >::Size(*_obj.un.m_msgStart);
			break;
		case PayloadCS::msgSelectedCardReq_Tag: 
			dwSize += BER<MsgCS_SelectedCardReq >::Size(*_obj.un.m_msgSelectedCardReq);
			break;
		case PayloadCS::msgBettingReq_Tag: 
			dwSize += BER<MsgCS_BettingReq >::Size(*_obj.un.m_msgBettingReq);
			break;
		case PayloadCS::msgChoiceRemoveCard_Tag: 
			dwSize += BER<MsgCS_ChoiceRemoveCard >::Size(*_obj.un.m_msgChoiceRemoveCard);
			break;
		case PayloadCS::msgPurge_Tag: 
			dwSize += BER<MsgCS_Purge >::Size(*_obj.un.m_msgPurge);
			break;
		case PayloadCS::msgAbuse_Tag: 
			dwSize += BER<MsgCS_Abuse >::Size(*_obj.un.m_msgAbuse);
			break;
		case PayloadCS::msgAskPurgeVote_Tag: 
			dwSize += BER<MsgCS_AskPurgeVote >::Size(*_obj.un.m_msgAskPurgeVote);
			break;
		case PayloadCS::msgAnswerPurgeVote_Tag: 
			dwSize += BER<MsgCS_AnswerPurgeVote >::Size(*_obj.un.m_msgAnswerPurgeVote);
			break;
		case PayloadCS::msgWaitingUserTicketReq_Tag: 
			dwSize += BER<MsgCS_WaitingUserTicketReq >::Size(*_obj.un.m_msgWaitingUserTicketReq);
			break;
		case PayloadCS::msgUpdateWaitingUserInfoReq_Tag: 
			dwSize += BER<MsgCS_UpdateWaitingUserInfoReq >::Size(*_obj.un.m_msgUpdateWaitingUserInfoReq);
			break;
		case PayloadCS::msgSoundType_Tag: 
			dwSize += BER<MsgCS_SoundType >::Size(*_obj.un.m_msgSoundType);
			break;
		case PayloadCS::msgExitQue_Tag: 
			dwSize += BER<MsgCS_ExitQue >::Size(*_obj.un.m_msgExitQue);
			break;
		case PayloadCS::msgContinue_Tag: 
			dwSize += BER<MsgCS_Continue >::Size(*_obj.un.m_msgContinue);
			break;
		case PayloadCS::msgRuleSet_Tag: 
			dwSize += BER<MsgCS_RuleSet >::Size(*_obj.un.m_msgRuleSet);
			break;
		case PayloadCS::msgGameMasterCall_Tag: 
			dwSize += BER<MsgCS_GameMasterCall >::Size(*_obj.un.m_msgGameMasterCall);
			break;
		case PayloadCS::msgFieldReserved_Tag: 
			dwSize += BER<MsgCS_FieldReserved >::Size(*_obj.un.m_msgFieldReserved);
			break;
		case PayloadCS::msgJokboSet_Tag: 
			dwSize += BER<MsgCS_JokboSet >::Size(*_obj.un.m_msgJokboSet);
			break;
		case PayloadCS::msgTestKeySetting_Tag: 
			dwSize += BER<MsgCS_TestKeySetting >::Size(*_obj.un.m_msgTestKeySetting);
			break;
		case PayloadCS::msgCheckNotice_Tag: 
			dwSize += BER<MsgCS_CheckNotice >::Size(*_obj.un.m_msgCheckNotice);
			break;
		case PayloadCS::msgAck_Tag: 
			dwSize += BER<MsgCS_Ack >::Size(*_obj.un.m_msgAck);
			break;
		case PayloadCS::msgPing_Tag: 
			dwSize += BER<MsgCS_Ping >::Size(*_obj.un.m_msgPing);
			break;
		}
		return dwSize;
	}

	static bool Load(PayloadCS* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		_obj->mTagID = 0;
		if(!BER<DWORD>::Load(&_obj->mTagID, ppBuf, pdwSize))
			return false;
		switch(_obj->mTagID)
		{
		case 0:
			return false;
		case PayloadCS::msgEntry_Tag: 
			_obj->un.m_msgEntry = new MsgCS_Entry;
			if(!BER<MsgCS_Entry>::Load(_obj->un.m_msgEntry, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgObserve_Tag: 
			_obj->un.m_msgObserve = new MsgCS_Observe;
			if(!BER<MsgCS_Observe>::Load(_obj->un.m_msgObserve, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgStart_Tag: 
			_obj->un.m_msgStart = new MsgCS_Start;
			if(!BER<MsgCS_Start>::Load(_obj->un.m_msgStart, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgSelectedCardReq_Tag: 
			_obj->un.m_msgSelectedCardReq = new MsgCS_SelectedCardReq;
			if(!BER<MsgCS_SelectedCardReq>::Load(_obj->un.m_msgSelectedCardReq, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgBettingReq_Tag: 
			_obj->un.m_msgBettingReq = new MsgCS_BettingReq;
			if(!BER<MsgCS_BettingReq>::Load(_obj->un.m_msgBettingReq, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgChoiceRemoveCard_Tag: 
			_obj->un.m_msgChoiceRemoveCard = new MsgCS_ChoiceRemoveCard;
			if(!BER<MsgCS_ChoiceRemoveCard>::Load(_obj->un.m_msgChoiceRemoveCard, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgPurge_Tag: 
			_obj->un.m_msgPurge = new MsgCS_Purge;
			if(!BER<MsgCS_Purge>::Load(_obj->un.m_msgPurge, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgAbuse_Tag: 
			_obj->un.m_msgAbuse = new MsgCS_Abuse;
			if(!BER<MsgCS_Abuse>::Load(_obj->un.m_msgAbuse, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgAskPurgeVote_Tag: 
			_obj->un.m_msgAskPurgeVote = new MsgCS_AskPurgeVote;
			if(!BER<MsgCS_AskPurgeVote>::Load(_obj->un.m_msgAskPurgeVote, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgAnswerPurgeVote_Tag: 
			_obj->un.m_msgAnswerPurgeVote = new MsgCS_AnswerPurgeVote;
			if(!BER<MsgCS_AnswerPurgeVote>::Load(_obj->un.m_msgAnswerPurgeVote, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgWaitingUserTicketReq_Tag: 
			_obj->un.m_msgWaitingUserTicketReq = new MsgCS_WaitingUserTicketReq;
			if(!BER<MsgCS_WaitingUserTicketReq>::Load(_obj->un.m_msgWaitingUserTicketReq, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgUpdateWaitingUserInfoReq_Tag: 
			_obj->un.m_msgUpdateWaitingUserInfoReq = new MsgCS_UpdateWaitingUserInfoReq;
			if(!BER<MsgCS_UpdateWaitingUserInfoReq>::Load(_obj->un.m_msgUpdateWaitingUserInfoReq, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgSoundType_Tag: 
			_obj->un.m_msgSoundType = new MsgCS_SoundType;
			if(!BER<MsgCS_SoundType>::Load(_obj->un.m_msgSoundType, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgExitQue_Tag: 
			_obj->un.m_msgExitQue = new MsgCS_ExitQue;
			if(!BER<MsgCS_ExitQue>::Load(_obj->un.m_msgExitQue, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgContinue_Tag: 
			_obj->un.m_msgContinue = new MsgCS_Continue;
			if(!BER<MsgCS_Continue>::Load(_obj->un.m_msgContinue, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgRuleSet_Tag: 
			_obj->un.m_msgRuleSet = new MsgCS_RuleSet;
			if(!BER<MsgCS_RuleSet>::Load(_obj->un.m_msgRuleSet, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgGameMasterCall_Tag: 
			_obj->un.m_msgGameMasterCall = new MsgCS_GameMasterCall;
			if(!BER<MsgCS_GameMasterCall>::Load(_obj->un.m_msgGameMasterCall, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgFieldReserved_Tag: 
			_obj->un.m_msgFieldReserved = new MsgCS_FieldReserved;
			if(!BER<MsgCS_FieldReserved>::Load(_obj->un.m_msgFieldReserved, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgJokboSet_Tag: 
			_obj->un.m_msgJokboSet = new MsgCS_JokboSet;
			if(!BER<MsgCS_JokboSet>::Load(_obj->un.m_msgJokboSet, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgTestKeySetting_Tag: 
			_obj->un.m_msgTestKeySetting = new MsgCS_TestKeySetting;
			if(!BER<MsgCS_TestKeySetting>::Load(_obj->un.m_msgTestKeySetting, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgCheckNotice_Tag: 
			_obj->un.m_msgCheckNotice = new MsgCS_CheckNotice;
			if(!BER<MsgCS_CheckNotice>::Load(_obj->un.m_msgCheckNotice, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgAck_Tag: 
			_obj->un.m_msgAck = new MsgCS_Ack;
			if(!BER<MsgCS_Ack>::Load(_obj->un.m_msgAck, ppBuf, pdwSize))
				return false;
			break;
		case PayloadCS::msgPing_Tag: 
			_obj->un.m_msgPing = new MsgCS_Ping;
			if(!BER<MsgCS_Ping>::Load(_obj->un.m_msgPing, ppBuf, pdwSize))
				return false;
			break;
		default:
			return false;
		}
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const PayloadCS& _obj )
	{
		if(!BER<DWORD>::Store((LPBYTE*)ppBuf, pdwSize, _obj.mTagID))
			return false;
		switch(_obj.mTagID)
		{
		case 0:
			return false;
		case PayloadCS::msgEntry_Tag: 
			if(!BER<MsgCS_Entry>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgEntry)))
				return false;
			break;
		case PayloadCS::msgObserve_Tag: 
			if(!BER<MsgCS_Observe>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgObserve)))
				return false;
			break;
		case PayloadCS::msgStart_Tag: 
			if(!BER<MsgCS_Start>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgStart)))
				return false;
			break;
		case PayloadCS::msgSelectedCardReq_Tag: 
			if(!BER<MsgCS_SelectedCardReq>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgSelectedCardReq)))
				return false;
			break;
		case PayloadCS::msgBettingReq_Tag: 
			if(!BER<MsgCS_BettingReq>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgBettingReq)))
				return false;
			break;
		case PayloadCS::msgChoiceRemoveCard_Tag: 
			if(!BER<MsgCS_ChoiceRemoveCard>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgChoiceRemoveCard)))
				return false;
			break;
		case PayloadCS::msgPurge_Tag: 
			if(!BER<MsgCS_Purge>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgPurge)))
				return false;
			break;
		case PayloadCS::msgAbuse_Tag: 
			if(!BER<MsgCS_Abuse>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAbuse)))
				return false;
			break;
		case PayloadCS::msgAskPurgeVote_Tag: 
			if(!BER<MsgCS_AskPurgeVote>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAskPurgeVote)))
				return false;
			break;
		case PayloadCS::msgAnswerPurgeVote_Tag: 
			if(!BER<MsgCS_AnswerPurgeVote>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAnswerPurgeVote)))
				return false;
			break;
		case PayloadCS::msgWaitingUserTicketReq_Tag: 
			if(!BER<MsgCS_WaitingUserTicketReq>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgWaitingUserTicketReq)))
				return false;
			break;
		case PayloadCS::msgUpdateWaitingUserInfoReq_Tag: 
			if(!BER<MsgCS_UpdateWaitingUserInfoReq>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgUpdateWaitingUserInfoReq)))
				return false;
			break;
		case PayloadCS::msgSoundType_Tag: 
			if(!BER<MsgCS_SoundType>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgSoundType)))
				return false;
			break;
		case PayloadCS::msgExitQue_Tag: 
			if(!BER<MsgCS_ExitQue>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgExitQue)))
				return false;
			break;
		case PayloadCS::msgContinue_Tag: 
			if(!BER<MsgCS_Continue>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgContinue)))
				return false;
			break;
		case PayloadCS::msgRuleSet_Tag: 
			if(!BER<MsgCS_RuleSet>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgRuleSet)))
				return false;
			break;
		case PayloadCS::msgGameMasterCall_Tag: 
			if(!BER<MsgCS_GameMasterCall>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgGameMasterCall)))
				return false;
			break;
		case PayloadCS::msgFieldReserved_Tag: 
			if(!BER<MsgCS_FieldReserved>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgFieldReserved)))
				return false;
			break;
		case PayloadCS::msgJokboSet_Tag: 
			if(!BER<MsgCS_JokboSet>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgJokboSet)))
				return false;
			break;
		case PayloadCS::msgTestKeySetting_Tag: 
			if(!BER<MsgCS_TestKeySetting>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgTestKeySetting)))
				return false;
			break;
		case PayloadCS::msgCheckNotice_Tag: 
			if(!BER<MsgCS_CheckNotice>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgCheckNotice)))
				return false;
			break;
		case PayloadCS::msgAck_Tag: 
			if(!BER<MsgCS_Ack>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAck)))
				return false;
			break;
		case PayloadCS::msgPing_Tag: 
			if(!BER<MsgCS_Ping>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgPing)))
				return false;
			break;
		default:
			return false;
		}
		if (*pdwSize)
			return false;
		return true;
	}

	static bool Copy(PayloadCS* _obj, const PayloadCS& src)
	{
		_obj->mTagID = 0;
		if(!BER<DWORD>::Copy(&_obj->mTagID, src.mTagID))
			return false;
		switch(_obj->mTagID)
		{
		case 0:
			return false;
		case PayloadCS::msgEntry_Tag: 
			_obj->un.m_msgEntry = new MsgCS_Entry;
			if(!BER<MsgCS_Entry>::Copy(_obj->un.m_msgEntry, *(src.un.m_msgEntry)))
				return false;
			break;
		case PayloadCS::msgObserve_Tag: 
			_obj->un.m_msgObserve = new MsgCS_Observe;
			if(!BER<MsgCS_Observe>::Copy(_obj->un.m_msgObserve, *(src.un.m_msgObserve)))
				return false;
			break;
		case PayloadCS::msgStart_Tag: 
			_obj->un.m_msgStart = new MsgCS_Start;
			if(!BER<MsgCS_Start>::Copy(_obj->un.m_msgStart, *(src.un.m_msgStart)))
				return false;
			break;
		case PayloadCS::msgSelectedCardReq_Tag: 
			_obj->un.m_msgSelectedCardReq = new MsgCS_SelectedCardReq;
			if(!BER<MsgCS_SelectedCardReq>::Copy(_obj->un.m_msgSelectedCardReq, *(src.un.m_msgSelectedCardReq)))
				return false;
			break;
		case PayloadCS::msgBettingReq_Tag: 
			_obj->un.m_msgBettingReq = new MsgCS_BettingReq;
			if(!BER<MsgCS_BettingReq>::Copy(_obj->un.m_msgBettingReq, *(src.un.m_msgBettingReq)))
				return false;
			break;
		case PayloadCS::msgChoiceRemoveCard_Tag: 
			_obj->un.m_msgChoiceRemoveCard = new MsgCS_ChoiceRemoveCard;
			if(!BER<MsgCS_ChoiceRemoveCard>::Copy(_obj->un.m_msgChoiceRemoveCard, *(src.un.m_msgChoiceRemoveCard)))
				return false;
			break;
		case PayloadCS::msgPurge_Tag: 
			_obj->un.m_msgPurge = new MsgCS_Purge;
			if(!BER<MsgCS_Purge>::Copy(_obj->un.m_msgPurge, *(src.un.m_msgPurge)))
				return false;
			break;
		case PayloadCS::msgAbuse_Tag: 
			_obj->un.m_msgAbuse = new MsgCS_Abuse;
			if(!BER<MsgCS_Abuse>::Copy(_obj->un.m_msgAbuse, *(src.un.m_msgAbuse)))
				return false;
			break;
		case PayloadCS::msgAskPurgeVote_Tag: 
			_obj->un.m_msgAskPurgeVote = new MsgCS_AskPurgeVote;
			if(!BER<MsgCS_AskPurgeVote>::Copy(_obj->un.m_msgAskPurgeVote, *(src.un.m_msgAskPurgeVote)))
				return false;
			break;
		case PayloadCS::msgAnswerPurgeVote_Tag: 
			_obj->un.m_msgAnswerPurgeVote = new MsgCS_AnswerPurgeVote;
			if(!BER<MsgCS_AnswerPurgeVote>::Copy(_obj->un.m_msgAnswerPurgeVote, *(src.un.m_msgAnswerPurgeVote)))
				return false;
			break;
		case PayloadCS::msgWaitingUserTicketReq_Tag: 
			_obj->un.m_msgWaitingUserTicketReq = new MsgCS_WaitingUserTicketReq;
			if(!BER<MsgCS_WaitingUserTicketReq>::Copy(_obj->un.m_msgWaitingUserTicketReq, *(src.un.m_msgWaitingUserTicketReq)))
				return false;
			break;
		case PayloadCS::msgUpdateWaitingUserInfoReq_Tag: 
			_obj->un.m_msgUpdateWaitingUserInfoReq = new MsgCS_UpdateWaitingUserInfoReq;
			if(!BER<MsgCS_UpdateWaitingUserInfoReq>::Copy(_obj->un.m_msgUpdateWaitingUserInfoReq, *(src.un.m_msgUpdateWaitingUserInfoReq)))
				return false;
			break;
		case PayloadCS::msgSoundType_Tag: 
			_obj->un.m_msgSoundType = new MsgCS_SoundType;
			if(!BER<MsgCS_SoundType>::Copy(_obj->un.m_msgSoundType, *(src.un.m_msgSoundType)))
				return false;
			break;
		case PayloadCS::msgExitQue_Tag: 
			_obj->un.m_msgExitQue = new MsgCS_ExitQue;
			if(!BER<MsgCS_ExitQue>::Copy(_obj->un.m_msgExitQue, *(src.un.m_msgExitQue)))
				return false;
			break;
		case PayloadCS::msgContinue_Tag: 
			_obj->un.m_msgContinue = new MsgCS_Continue;
			if(!BER<MsgCS_Continue>::Copy(_obj->un.m_msgContinue, *(src.un.m_msgContinue)))
				return false;
			break;
		case PayloadCS::msgRuleSet_Tag: 
			_obj->un.m_msgRuleSet = new MsgCS_RuleSet;
			if(!BER<MsgCS_RuleSet>::Copy(_obj->un.m_msgRuleSet, *(src.un.m_msgRuleSet)))
				return false;
			break;
		case PayloadCS::msgGameMasterCall_Tag: 
			_obj->un.m_msgGameMasterCall = new MsgCS_GameMasterCall;
			if(!BER<MsgCS_GameMasterCall>::Copy(_obj->un.m_msgGameMasterCall, *(src.un.m_msgGameMasterCall)))
				return false;
			break;
		case PayloadCS::msgFieldReserved_Tag: 
			_obj->un.m_msgFieldReserved = new MsgCS_FieldReserved;
			if(!BER<MsgCS_FieldReserved>::Copy(_obj->un.m_msgFieldReserved, *(src.un.m_msgFieldReserved)))
				return false;
			break;
		case PayloadCS::msgJokboSet_Tag: 
			_obj->un.m_msgJokboSet = new MsgCS_JokboSet;
			if(!BER<MsgCS_JokboSet>::Copy(_obj->un.m_msgJokboSet, *(src.un.m_msgJokboSet)))
				return false;
			break;
		case PayloadCS::msgTestKeySetting_Tag: 
			_obj->un.m_msgTestKeySetting = new MsgCS_TestKeySetting;
			if(!BER<MsgCS_TestKeySetting>::Copy(_obj->un.m_msgTestKeySetting, *(src.un.m_msgTestKeySetting)))
				return false;
			break;
		case PayloadCS::msgCheckNotice_Tag: 
			_obj->un.m_msgCheckNotice = new MsgCS_CheckNotice;
			if(!BER<MsgCS_CheckNotice>::Copy(_obj->un.m_msgCheckNotice, *(src.un.m_msgCheckNotice)))
				return false;
			break;
		case PayloadCS::msgAck_Tag: 
			_obj->un.m_msgAck = new MsgCS_Ack;
			if(!BER<MsgCS_Ack>::Copy(_obj->un.m_msgAck, *(src.un.m_msgAck)))
				return false;
			break;
		case PayloadCS::msgPing_Tag: 
			_obj->un.m_msgPing = new MsgCS_Ping;
			if(!BER<MsgCS_Ping>::Copy(_obj->un.m_msgPing, *(src.un.m_msgPing)))
				return false;
			break;
		default:
			return false;
		}
		return true;
	}
};

template<>
class BER<MsgSC_UserJoinAns >
{
public:
	static DWORD Size(const MsgSC_UserJoinAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lState);
		dwSize += BER<int >::Size(_obj.m_nEnter);
		dwSize += BER<int >::Size(_obj.m_nSet);
		dwSize += BER<int >::Size(_obj.m_lChannel_idx);
		dwSize += BER<LONG >::Size(_obj.m_lOwnerUSN);
		dwSize += BER<LONG >::Size(_obj.m_lBossUSN);
		dwSize += BER<int >::Size(_obj.m_nRoomPurgeCnt);
		dwSize += BER<Option >::Size(_obj.m_option);
		return dwSize;
	}

	static bool Load(MsgSC_UserJoinAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lState), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nEnter), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nSet), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_lChannel_idx), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lOwnerUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lBossUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nRoomPurgeCnt), ppBuf, pdwSize))
			return false;
		if(!BER<Option >::Load(&(_obj->m_option), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_UserJoinAns& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lState ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nEnter ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nSet ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_lChannel_idx ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lOwnerUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBossUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nRoomPurgeCnt ))
			return false;
		if(!BER<Option >::Store(ppBuf, pdwSize, _obj.m_option ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_UserJoinAns* _obj, const MsgSC_UserJoinAns& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lState), src.m_lState))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nEnter), src.m_nEnter))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nSet), src.m_nSet))
			return false;
		if(!BER<int >::Copy(&(_obj->m_lChannel_idx), src.m_lChannel_idx))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lOwnerUSN), src.m_lOwnerUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lBossUSN), src.m_lBossUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nRoomPurgeCnt), src.m_nRoomPurgeCnt))
			return false;
		if(!BER<Option >::Copy(&(_obj->m_option), src.m_option))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_UserJoinErr >
{
public:
	static DWORD Size(const MsgSC_UserJoinErr& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONG >::Size(_obj.m_lErrorCode);
		return dwSize;
	}

	static bool Load(MsgSC_UserJoinErr* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lErrorCode), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_UserJoinErr& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lErrorCode ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_UserJoinErr* _obj, const MsgSC_UserJoinErr& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lErrorCode), src.m_lErrorCode))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_UserDisconnect >
{
public:
	static DWORD Size(const MsgSC_UserDisconnect& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<UserInfo >::Size(_obj.m_uinfo);
		dwSize += BER<LONG >::Size(_obj.m_lState);
		dwSize += BER<LONG >::Size(_obj.m_lOwnerUSN);
		return dwSize;
	}

	static bool Load(MsgSC_UserDisconnect* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<UserInfo >::Load(&(_obj->m_uinfo), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lState), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lOwnerUSN), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_UserDisconnect& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<UserInfo >::Store(ppBuf, pdwSize, _obj.m_uinfo ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lState ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lOwnerUSN ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_UserDisconnect* _obj, const MsgSC_UserDisconnect& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<UserInfo >::Copy(&(_obj->m_uinfo), src.m_uinfo))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lState), src.m_lState))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lOwnerUSN), src.m_lOwnerUSN))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_CardData >
{
public:
	static DWORD Size(const MsgSC_CardData& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nDealCnt);
		dwSize += BER<LONG >::Size(_obj.m_lCardsDealt);
		dwSize += BER<std::vector<Cards> >::Size(_obj.m_tblCard);
		dwSize += BER<std::vector<Money> >::Size(_obj.m_tblMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPoolMoney);
		return dwSize;
	}

	static bool Load(MsgSC_CardData* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nDealCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCardsDealt), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<Cards> >::Load(&(_obj->m_tblCard), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<Money> >::Load(&(_obj->m_tblMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPoolMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_CardData& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nDealCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCardsDealt ))
			return false;
		if(!BER<std::vector<Cards> >::Store(ppBuf, pdwSize, _obj.m_tblCard ))
			return false;
		if(!BER<std::vector<Money> >::Store(ppBuf, pdwSize, _obj.m_tblMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPoolMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_CardData* _obj, const MsgSC_CardData& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nDealCnt), src.m_nDealCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCardsDealt), src.m_lCardsDealt))
			return false;
		if(!BER<std::vector<Cards> >::Copy(&(_obj->m_tblCard), src.m_tblCard))
			return false;
		if(!BER<std::vector<Money> >::Copy(&(_obj->m_tblMoney), src.m_tblMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPoolMoney), src.m_llPoolMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_EntryAns >
{
public:
	static DWORD Size(const MsgSC_EntryAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<LONG >::Size(_obj.m_lOwnerUSN);
		dwSize += BER<std::vector<UserInfo> >::Size(_obj.m_tblUI);
		dwSize += BER<std::vector<Money> >::Size(_obj.m_tblMoney);
		dwSize += BER<LONG >::Size(_obj.m_bWelcomeSound);
		dwSize += BER<LONG >::Size(_obj.m_lObserveCnt);
		return dwSize;
	}

	static bool Load(MsgSC_EntryAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lOwnerUSN), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<UserInfo> >::Load(&(_obj->m_tblUI), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<Money> >::Load(&(_obj->m_tblMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bWelcomeSound), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lObserveCnt), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_EntryAns& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lOwnerUSN ))
			return false;
		if(!BER<std::vector<UserInfo> >::Store(ppBuf, pdwSize, _obj.m_tblUI ))
			return false;
		if(!BER<std::vector<Money> >::Store(ppBuf, pdwSize, _obj.m_tblMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bWelcomeSound ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lObserveCnt ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_EntryAns* _obj, const MsgSC_EntryAns& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lOwnerUSN), src.m_lOwnerUSN))
			return false;
		if(!BER<std::vector<UserInfo> >::Copy(&(_obj->m_tblUI), src.m_tblUI))
			return false;
		if(!BER<std::vector<Money> >::Copy(&(_obj->m_tblMoney), src.m_tblMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bWelcomeSound), src.m_bWelcomeSound))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lObserveCnt), src.m_lObserveCnt))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_EntryReject >
{
public:
	static DWORD Size(const MsgSC_EntryReject& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lType);
		dwSize += BER<LONGLONG >::Size(_obj.m_llCMoney);
		return dwSize;
	}

	static bool Load(MsgSC_EntryReject* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lType), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llCMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_EntryReject& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lType ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llCMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_EntryReject* _obj, const MsgSC_EntryReject& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lType), src.m_lType))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llCMoney), src.m_llCMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_ObserveAns >
{
public:
	static DWORD Size(const MsgSC_ObserveAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<LONG >::Size(_obj.m_lOwnerUSN);
		dwSize += BER<UserInfo >::Size(_obj.m_uinfo);
		dwSize += BER<Money >::Size(_obj.m_money);
		return dwSize;
	}

	static bool Load(MsgSC_ObserveAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lOwnerUSN), ppBuf, pdwSize))
			return false;
		if(!BER<UserInfo >::Load(&(_obj->m_uinfo), ppBuf, pdwSize))
			return false;
		if(!BER<Money >::Load(&(_obj->m_money), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_ObserveAns& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lOwnerUSN ))
			return false;
		if(!BER<UserInfo >::Store(ppBuf, pdwSize, _obj.m_uinfo ))
			return false;
		if(!BER<Money >::Store(ppBuf, pdwSize, _obj.m_money ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_ObserveAns* _obj, const MsgSC_ObserveAns& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lOwnerUSN), src.m_lOwnerUSN))
			return false;
		if(!BER<UserInfo >::Copy(&(_obj->m_uinfo), src.m_uinfo))
			return false;
		if(!BER<Money >::Copy(&(_obj->m_money), src.m_money))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_StartReq >
{
public:
	static DWORD Size(const MsgSC_StartReq& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgSC_StartReq* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_StartReq& _obj )
	{
		return true;
	}
	static bool Copy(MsgSC_StartReq* _obj, const MsgSC_StartReq& src)
	{
		return true;
	}

};

template<>
class BER<MsgSC_StartAns >
{
public:
	static DWORD Size(const MsgSC_StartAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lState);
		dwSize += BER<std::vector<LONG> >::Size(_obj.m_vtState);
		dwSize += BER<LONGLONG >::Size(_obj.m_llSystemTime);
		return dwSize;
	}

	static bool Load(MsgSC_StartAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lState), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<LONG> >::Load(&(_obj->m_vtState), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llSystemTime), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_StartAns& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lState ))
			return false;
		if(!BER<std::vector<LONG> >::Store(ppBuf, pdwSize, _obj.m_vtState ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llSystemTime ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_StartAns* _obj, const MsgSC_StartAns& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lState), src.m_lState))
			return false;
		if(!BER<std::vector<LONG> >::Copy(&(_obj->m_vtState), src.m_vtState))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llSystemTime), src.m_llSystemTime))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_NoStart >
{
public:
	static DWORD Size(const MsgSC_NoStart& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgSC_NoStart* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_NoStart& _obj )
	{
		return true;
	}
	static bool Copy(MsgSC_NoStart* _obj, const MsgSC_NoStart& src)
	{
		return true;
	}

};

template<>
class BER<MsgSC_DealCards >
{
public:
	static DWORD Size(const MsgSC_DealCards& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lBossUSN);
		dwSize += BER<LONG >::Size(_obj.m_lState);
		dwSize += BER<int >::Size(_obj.m_nType);
		dwSize += BER<std::vector<Cards> >::Size(_obj.m_tblCard);
		dwSize += BER<std::vector<Money> >::Size(_obj.m_tblMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPoolMoney);
		return dwSize;
	}

	static bool Load(MsgSC_DealCards* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lBossUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lState), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nType), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<Cards> >::Load(&(_obj->m_tblCard), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<Money> >::Load(&(_obj->m_tblMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPoolMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_DealCards& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBossUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lState ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nType ))
			return false;
		if(!BER<std::vector<Cards> >::Store(ppBuf, pdwSize, _obj.m_tblCard ))
			return false;
		if(!BER<std::vector<Money> >::Store(ppBuf, pdwSize, _obj.m_tblMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPoolMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_DealCards* _obj, const MsgSC_DealCards& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lBossUSN), src.m_lBossUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lState), src.m_lState))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nType), src.m_nType))
			return false;
		if(!BER<std::vector<Cards> >::Copy(&(_obj->m_tblCard), src.m_tblCard))
			return false;
		if(!BER<std::vector<Money> >::Copy(&(_obj->m_tblMoney), src.m_tblMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPoolMoney), src.m_llPoolMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_SelectedCardAns >
{
public:
	static DWORD Size(const MsgSC_SelectedCardAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nSelect);
		dwSize += BER<LONG >::Size(_obj.m_lCardIndex);
		dwSize += BER<LONG >::Size(_obj.m_lChoiceType);
		return dwSize;
	}

	static bool Load(MsgSC_SelectedCardAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nSelect), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCardIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lChoiceType), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_SelectedCardAns& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nSelect ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCardIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lChoiceType ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_SelectedCardAns* _obj, const MsgSC_SelectedCardAns& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nSelect), src.m_nSelect))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCardIndex), src.m_lCardIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lChoiceType), src.m_lChoiceType))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_DealOpenCard >
{
public:
	static DWORD Size(const MsgSC_DealOpenCard& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lState);
		dwSize += BER<std::vector<Cards> >::Size(_obj.m_tblCard);
		dwSize += BER<std::vector<LONG> >::Size(_obj.m_vtState);
		return dwSize;
	}

	static bool Load(MsgSC_DealOpenCard* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lState), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<Cards> >::Load(&(_obj->m_tblCard), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<LONG> >::Load(&(_obj->m_vtState), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_DealOpenCard& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lState ))
			return false;
		if(!BER<std::vector<Cards> >::Store(ppBuf, pdwSize, _obj.m_tblCard ))
			return false;
		if(!BER<std::vector<LONG> >::Store(ppBuf, pdwSize, _obj.m_vtState ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_DealOpenCard* _obj, const MsgSC_DealOpenCard& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lState), src.m_lState))
			return false;
		if(!BER<std::vector<Cards> >::Copy(&(_obj->m_tblCard), src.m_tblCard))
			return false;
		if(!BER<std::vector<LONG> >::Copy(&(_obj->m_vtState), src.m_vtState))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_DealCard >
{
public:
	static DWORD Size(const MsgSC_DealCard& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lBossUSN);
		dwSize += BER<int >::Size(_obj.m_nType);
		dwSize += BER<LONG >::Size(_obj.m_lCardsDealt);
		dwSize += BER<OneCardVector >::Size(_obj.m_vtOneCard);
		return dwSize;
	}

	static bool Load(MsgSC_DealCard* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lBossUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCardsDealt), ppBuf, pdwSize))
			return false;
		if(!BER<OneCardVector >::Load(&(_obj->m_vtOneCard), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_DealCard& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBossUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCardsDealt ))
			return false;
		if(!BER<OneCardVector >::Store(ppBuf, pdwSize, _obj.m_vtOneCard ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_DealCard* _obj, const MsgSC_DealCard& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lBossUSN), src.m_lBossUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nType), src.m_nType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCardsDealt), src.m_lCardsDealt))
			return false;
		if(!BER<OneCardVector >::Copy(&(_obj->m_vtOneCard), src.m_vtOneCard))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_Boss >
{
public:
	static DWORD Size(const MsgSC_Boss& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lBossUSN);
		dwSize += BER<int >::Size(_obj.m_nBossRank);
		return dwSize;
	}

	static bool Load(MsgSC_Boss* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lBossUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nBossRank), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_Boss& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBossUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nBossRank ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_Boss* _obj, const MsgSC_Boss& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lBossUSN), src.m_lBossUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nBossRank), src.m_nBossRank))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_Betting >
{
public:
	static DWORD Size(const MsgSC_Betting& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lBetUSN);
		dwSize += BER<LONG >::Size(_obj.m_lBetBtnType);
		return dwSize;
	}

	static bool Load(MsgSC_Betting* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lBetUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lBetBtnType), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_Betting& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBetUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBetBtnType ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_Betting* _obj, const MsgSC_Betting& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lBetUSN), src.m_lBetUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lBetBtnType), src.m_lBetBtnType))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_BettingAns >
{
public:
	static DWORD Size(const MsgSC_BettingAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<LONG >::Size(_obj.m_lBetType);
		dwSize += BER<Money >::Size(_obj.m_money);
		dwSize += BER<VecMoney >::Size(_obj.m_vtCallMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_lPoolMoney);
		return dwSize;
	}

	static bool Load(MsgSC_BettingAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lBetType), ppBuf, pdwSize))
			return false;
		if(!BER<Money >::Load(&(_obj->m_money), ppBuf, pdwSize))
			return false;
		if(!BER<VecMoney >::Load(&(_obj->m_vtCallMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_lPoolMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_BettingAns& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBetType ))
			return false;
		if(!BER<Money >::Store(ppBuf, pdwSize, _obj.m_money ))
			return false;
		if(!BER<VecMoney >::Store(ppBuf, pdwSize, _obj.m_vtCallMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_lPoolMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_BettingAns* _obj, const MsgSC_BettingAns& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lBetType), src.m_lBetType))
			return false;
		if(!BER<Money >::Copy(&(_obj->m_money), src.m_money))
			return false;
		if(!BER<VecMoney >::Copy(&(_obj->m_vtCallMoney), src.m_vtCallMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_lPoolMoney), src.m_lPoolMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_BettingAnsMsg >
{
public:
	static DWORD Size(const MsgSC_BettingAnsMsg& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<LONG >::Size(_obj.m_BetType);
		dwSize += BER<LONG >::Size(_obj.m_bBettingMoney);
		dwSize += BER<LONG >::Size(_obj.m_bMoneyLack);
		dwSize += BER<LONG >::Size(_obj.m_bCallMoneyZero);
		dwSize += BER<LONGLONG >::Size(_obj.m_llCallMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llRaiseMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llSideMoney);
		dwSize += BER<LONG >::Size(_obj.m_lBetType);
		dwSize += BER<LONG >::Size(_obj.m_lBetTurn);
		dwSize += BER<Money >::Size(_obj.m_money);
		dwSize += BER<VecMoney >::Size(_obj.m_vtCallMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPoolMoney);
		return dwSize;
	}

	static bool Load(MsgSC_BettingAnsMsg* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_BetType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bBettingMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bMoneyLack), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bCallMoneyZero), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llCallMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llRaiseMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llSideMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lBetType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lBetTurn), ppBuf, pdwSize))
			return false;
		if(!BER<Money >::Load(&(_obj->m_money), ppBuf, pdwSize))
			return false;
		if(!BER<VecMoney >::Load(&(_obj->m_vtCallMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPoolMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_BettingAnsMsg& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_BetType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bBettingMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bMoneyLack ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bCallMoneyZero ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llCallMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llRaiseMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llSideMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBetType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBetTurn ))
			return false;
		if(!BER<Money >::Store(ppBuf, pdwSize, _obj.m_money ))
			return false;
		if(!BER<VecMoney >::Store(ppBuf, pdwSize, _obj.m_vtCallMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPoolMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_BettingAnsMsg* _obj, const MsgSC_BettingAnsMsg& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_BetType), src.m_BetType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bBettingMoney), src.m_bBettingMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bMoneyLack), src.m_bMoneyLack))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bCallMoneyZero), src.m_bCallMoneyZero))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llCallMoney), src.m_llCallMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llRaiseMoney), src.m_llRaiseMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llSideMoney), src.m_llSideMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lBetType), src.m_lBetType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lBetTurn), src.m_lBetTurn))
			return false;
		if(!BER<Money >::Copy(&(_obj->m_money), src.m_money))
			return false;
		if(!BER<VecMoney >::Copy(&(_obj->m_vtCallMoney), src.m_vtCallMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPoolMoney), src.m_llPoolMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_DealHiddenCard >
{
public:
	static DWORD Size(const MsgSC_DealHiddenCard& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lBossUSN);
		dwSize += BER<LONG >::Size(_obj.m_lCardsDealt);
		dwSize += BER<OneCardVector >::Size(_obj.m_vtOneCard);
		return dwSize;
	}

	static bool Load(MsgSC_DealHiddenCard* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lBossUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lCardsDealt), ppBuf, pdwSize))
			return false;
		if(!BER<OneCardVector >::Load(&(_obj->m_vtOneCard), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_DealHiddenCard& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBossUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lCardsDealt ))
			return false;
		if(!BER<OneCardVector >::Store(ppBuf, pdwSize, _obj.m_vtOneCard ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_DealHiddenCard* _obj, const MsgSC_DealHiddenCard& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lBossUSN), src.m_lBossUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lCardsDealt), src.m_lCardsDealt))
			return false;
		if(!BER<OneCardVector >::Copy(&(_obj->m_vtOneCard), src.m_vtOneCard))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_AnteMoney >
{
public:
	static DWORD Size(const MsgSC_AnteMoney& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONGLONG >::Size(_obj.m_llAnteMoney);
		return dwSize;
	}

	static bool Load(MsgSC_AnteMoney* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONGLONG >::Load(&(_obj->m_llAnteMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_AnteMoney& _obj )
	{
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llAnteMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_AnteMoney* _obj, const MsgSC_AnteMoney& src)
	{
		if(!BER<LONGLONG >::Copy(&(_obj->m_llAnteMoney), src.m_llAnteMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_RuleQuaterHalf >
{
public:
	static DWORD Size(const MsgSC_RuleQuaterHalf& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONGLONG >::Size(_obj.m_llRuleQuaterHalf);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPoolMoney);
		return dwSize;
	}

	static bool Load(MsgSC_RuleQuaterHalf* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONGLONG >::Load(&(_obj->m_llRuleQuaterHalf), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPoolMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_RuleQuaterHalf& _obj )
	{
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llRuleQuaterHalf ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPoolMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_RuleQuaterHalf* _obj, const MsgSC_RuleQuaterHalf& src)
	{
		if(!BER<LONGLONG >::Copy(&(_obj->m_llRuleQuaterHalf), src.m_llRuleQuaterHalf))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPoolMoney), src.m_llPoolMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_Finished >
{
public:
	static DWORD Size(const MsgSC_Finished& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lState);
		dwSize += BER<LONG >::Size(_obj.m_bGiveUp);
		dwSize += BER<LONG >::Size(_obj.m_lRank);
		dwSize += BER<LONG >::Size(_obj.m_lBossUSN);
		dwSize += BER<LONGLONG >::Size(_obj.m_llGiveMoney);
		dwSize += BER<std::vector<int> >::Size(_obj.m_vtWin);
		dwSize += BER<std::vector<int> >::Size(_obj.m_vtResult);
		dwSize += BER<std::vector<LONGLONG> >::Size(_obj.m_vtGiveMoney);
		dwSize += BER<std::vector<Cards> >::Size(_obj.m_tblCard);
		dwSize += BER<std::vector<Money> >::Size(_obj.m_tblMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPoolMoney);
		dwSize += BER<std::vector<UserMoney> >::Size(_obj.m_vtUserMoney);
		dwSize += BER<LONG >::Size(_obj.m_lResultIdx);
		dwSize += BER<LONGLONG >::Size(_obj.m_llJackpot);
		return dwSize;
	}

	static bool Load(MsgSC_Finished* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lState), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bGiveUp), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRank), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lBossUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llGiveMoney), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<int> >::Load(&(_obj->m_vtWin), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<int> >::Load(&(_obj->m_vtResult), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<LONGLONG> >::Load(&(_obj->m_vtGiveMoney), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<Cards> >::Load(&(_obj->m_tblCard), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<Money> >::Load(&(_obj->m_tblMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPoolMoney), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<UserMoney> >::Load(&(_obj->m_vtUserMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lResultIdx), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llJackpot), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_Finished& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lState ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bGiveUp ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRank ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lBossUSN ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llGiveMoney ))
			return false;
		if(!BER<std::vector<int> >::Store(ppBuf, pdwSize, _obj.m_vtWin ))
			return false;
		if(!BER<std::vector<int> >::Store(ppBuf, pdwSize, _obj.m_vtResult ))
			return false;
		if(!BER<std::vector<LONGLONG> >::Store(ppBuf, pdwSize, _obj.m_vtGiveMoney ))
			return false;
		if(!BER<std::vector<Cards> >::Store(ppBuf, pdwSize, _obj.m_tblCard ))
			return false;
		if(!BER<std::vector<Money> >::Store(ppBuf, pdwSize, _obj.m_tblMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPoolMoney ))
			return false;
		if(!BER<std::vector<UserMoney> >::Store(ppBuf, pdwSize, _obj.m_vtUserMoney ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lResultIdx ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llJackpot ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_Finished* _obj, const MsgSC_Finished& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lState), src.m_lState))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bGiveUp), src.m_bGiveUp))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRank), src.m_lRank))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lBossUSN), src.m_lBossUSN))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llGiveMoney), src.m_llGiveMoney))
			return false;
		if(!BER<std::vector<int> >::Copy(&(_obj->m_vtWin), src.m_vtWin))
			return false;
		if(!BER<std::vector<int> >::Copy(&(_obj->m_vtResult), src.m_vtResult))
			return false;
		if(!BER<std::vector<LONGLONG> >::Copy(&(_obj->m_vtGiveMoney), src.m_vtGiveMoney))
			return false;
		if(!BER<std::vector<Cards> >::Copy(&(_obj->m_tblCard), src.m_tblCard))
			return false;
		if(!BER<std::vector<Money> >::Copy(&(_obj->m_tblMoney), src.m_tblMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPoolMoney), src.m_llPoolMoney))
			return false;
		if(!BER<std::vector<UserMoney> >::Copy(&(_obj->m_vtUserMoney), src.m_vtUserMoney))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lResultIdx), src.m_lResultIdx))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llJackpot), src.m_llJackpot))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_NewGame >
{
public:
	static DWORD Size(const MsgSC_NewGame& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<VectorWinLoseInfo >::Size(_obj.m_vtWinLoseInfo);
		return dwSize;
	}

	static bool Load(MsgSC_NewGame* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<VectorWinLoseInfo >::Load(&(_obj->m_vtWinLoseInfo), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_NewGame& _obj )
	{
		if(!BER<VectorWinLoseInfo >::Store(ppBuf, pdwSize, _obj.m_vtWinLoseInfo ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_NewGame* _obj, const MsgSC_NewGame& src)
	{
		if(!BER<VectorWinLoseInfo >::Copy(&(_obj->m_vtWinLoseInfo), src.m_vtWinLoseInfo))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_ContinueAns >
{
public:
	static DWORD Size(const MsgSC_ContinueAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		return dwSize;
	}

	static bool Load(MsgSC_ContinueAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_ContinueAns& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_ContinueAns* _obj, const MsgSC_ContinueAns& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_Continue >
{
public:
	static DWORD Size(const MsgSC_Continue& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<VectorWinLoseInfo >::Size(_obj.m_vtWinLoseInfo);
		return dwSize;
	}

	static bool Load(MsgSC_Continue* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<VectorWinLoseInfo >::Load(&(_obj->m_vtWinLoseInfo), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_Continue& _obj )
	{
		if(!BER<VectorWinLoseInfo >::Store(ppBuf, pdwSize, _obj.m_vtWinLoseInfo ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_Continue* _obj, const MsgSC_Continue& src)
	{
		if(!BER<VectorWinLoseInfo >::Copy(&(_obj->m_vtWinLoseInfo), src.m_vtWinLoseInfo))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_SystemMsg >
{
public:
	static DWORD Size(const MsgSC_SystemMsg& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lType);
		return dwSize;
	}

	static bool Load(MsgSC_SystemMsg* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lType), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_SystemMsg& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lType ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_SystemMsg* _obj, const MsgSC_SystemMsg& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lType), src.m_lType))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_PurgeAns >
{
public:
	static DWORD Size(const MsgSC_PurgeAns& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgSC_PurgeAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_PurgeAns& _obj )
	{
		return true;
	}
	static bool Copy(MsgSC_PurgeAns* _obj, const MsgSC_PurgeAns& src)
	{
		return true;
	}

};

template<>
class BER<MsgSC_PurgeInfo >
{
public:
	static DWORD Size(const MsgSC_PurgeInfo& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<VecUSN >::Size(_obj.m_vtPurgeUSN);
		dwSize += BER<int >::Size(_obj.m_nCount);
		return dwSize;
	}

	static bool Load(MsgSC_PurgeInfo* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<VecUSN >::Load(&(_obj->m_vtPurgeUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nCount), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_PurgeInfo& _obj )
	{
		if(!BER<VecUSN >::Store(ppBuf, pdwSize, _obj.m_vtPurgeUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nCount ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_PurgeInfo* _obj, const MsgSC_PurgeInfo& src)
	{
		if(!BER<VecUSN >::Copy(&(_obj->m_vtPurgeUSN), src.m_vtPurgeUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nCount), src.m_nCount))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_SetPurgeMoney >
{
public:
	static DWORD Size(const MsgSC_SetPurgeMoney& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<Money >::Size(_obj.m_money);
		return dwSize;
	}

	static bool Load(MsgSC_SetPurgeMoney* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<Money >::Load(&(_obj->m_money), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_SetPurgeMoney& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<Money >::Store(ppBuf, pdwSize, _obj.m_money ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_SetPurgeMoney* _obj, const MsgSC_SetPurgeMoney& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<Money >::Copy(&(_obj->m_money), src.m_money))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_AssaItemNotify >
{
public:
	static DWORD Size(const MsgSC_AssaItemNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONG >::Size(_obj.m_lRankType);
		dwSize += BER<std::string >::Size(_obj.m_sItem);
		return dwSize;
	}

	static bool Load(MsgSC_AssaItemNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRankType), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sItem), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_AssaItemNotify& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRankType ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sItem ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_AssaItemNotify* _obj, const MsgSC_AssaItemNotify& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRankType), src.m_lRankType))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sItem), src.m_sItem))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_ThankYouItemNotify >
{
public:
	static DWORD Size(const MsgSC_ThankYouItemNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONG >::Size(_obj.m_lRankType);
		dwSize += BER<LONGLONG >::Size(_obj.m_llBasicDDangMoney);
		dwSize += BER<std::string >::Size(_obj.m_sItem);
		return dwSize;
	}

	static bool Load(MsgSC_ThankYouItemNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRankType), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llBasicDDangMoney), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sItem), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_ThankYouItemNotify& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRankType ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llBasicDDangMoney ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sItem ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_ThankYouItemNotify* _obj, const MsgSC_ThankYouItemNotify& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRankType), src.m_lRankType))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llBasicDDangMoney), src.m_llBasicDDangMoney))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sItem), src.m_sItem))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_MadeItemNotify >
{
public:
	static DWORD Size(const MsgSC_MadeItemNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONG >::Size(_obj.m_lRankType);
		dwSize += BER<std::string >::Size(_obj.m_sItem);
		return dwSize;
	}

	static bool Load(MsgSC_MadeItemNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lRankType), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sItem), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_MadeItemNotify& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lRankType ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sItem ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_MadeItemNotify* _obj, const MsgSC_MadeItemNotify& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lRankType), src.m_lRankType))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sItem), src.m_sItem))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_ExtMoneyNotify >
{
public:
	static DWORD Size(const MsgSC_ExtMoneyNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONG >::Size(_obj.m_bExtType);
		dwSize += BER<LONGLONG >::Size(_obj.m_llCMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llCashBox);
		dwSize += BER<LONGLONG >::Size(_obj.m_llExtMoney);
		dwSize += BER<LONGLONG >::Size(_obj.m_llExtDate);
		return dwSize;
	}

	static bool Load(MsgSC_ExtMoneyNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bExtType), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llCMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llCashBox), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llExtMoney), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llExtDate), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_ExtMoneyNotify& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bExtType ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llCMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llCashBox ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llExtMoney ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llExtDate ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_ExtMoneyNotify* _obj, const MsgSC_ExtMoneyNotify& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bExtType), src.m_bExtType))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llCMoney), src.m_llCMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llCashBox), src.m_llCashBox))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llExtMoney), src.m_llExtMoney))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llExtDate), src.m_llExtDate))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_GameEndSystemMsg >
{
public:
	static DWORD Size(const MsgSC_GameEndSystemMsg& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lType);
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONG >::Size(_obj.m_bGiveUp);
		dwSize += BER<LONGLONG >::Size(_obj.m_llMoney);
		dwSize += BER<std::string >::Size(_obj.m_sMsg);
		return dwSize;
	}

	static bool Load(MsgSC_GameEndSystemMsg* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lType), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bGiveUp), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llMoney), ppBuf, pdwSize))
			return false;
		if(!BER<std::string >::Load(&(_obj->m_sMsg), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_GameEndSystemMsg& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lType ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bGiveUp ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llMoney ))
			return false;
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sMsg ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_GameEndSystemMsg* _obj, const MsgSC_GameEndSystemMsg& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lType), src.m_lType))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bGiveUp), src.m_bGiveUp))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llMoney), src.m_llMoney))
			return false;
		if(!BER<std::string >::Copy(&(_obj->m_sMsg), src.m_sMsg))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_ChangeAvatarNotify >
{
public:
	static DWORD Size(const MsgSC_ChangeAvatarNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<UserInfo >::Size(_obj.m_uinfo);
		return dwSize;
	}

	static bool Load(MsgSC_ChangeAvatarNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<UserInfo >::Load(&(_obj->m_uinfo), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_ChangeAvatarNotify& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<UserInfo >::Store(ppBuf, pdwSize, _obj.m_uinfo ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_ChangeAvatarNotify* _obj, const MsgSC_ChangeAvatarNotify& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<UserInfo >::Copy(&(_obj->m_uinfo), src.m_uinfo))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_AbuseAns >
{
public:
	static DWORD Size(const MsgSC_AbuseAns& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgSC_AbuseAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_AbuseAns& _obj )
	{
		return true;
	}
	static bool Copy(MsgSC_AbuseAns* _obj, const MsgSC_AbuseAns& src)
	{
		return true;
	}

};

template<>
class BER<MsgSC_SoundTypeAns >
{
public:
	static DWORD Size(const MsgSC_SoundTypeAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<LONG >::Size(_obj.m_lSoundType);
		return dwSize;
	}

	static bool Load(MsgSC_SoundTypeAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lSoundType), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_SoundTypeAns& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lSoundType ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_SoundTypeAns* _obj, const MsgSC_SoundTypeAns& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lSoundType), src.m_lSoundType))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_FMoney >
{
public:
	static DWORD Size(const MsgSC_FMoney& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<std::string >::Size(_obj.m_sFMoney);
		return dwSize;
	}

	static bool Load(MsgSC_FMoney* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<std::string >::Load(&(_obj->m_sFMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_FMoney& _obj )
	{
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sFMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_FMoney* _obj, const MsgSC_FMoney& src)
	{
		if(!BER<std::string >::Copy(&(_obj->m_sFMoney), src.m_sFMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_ItemNotify >
{
public:
	static DWORD Size(const MsgSC_ItemNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lLimitTotalCnt);
		dwSize += BER<LONG >::Size(_obj.m_lLimitTodayCnt);
		dwSize += BER<LONG >::Size(_obj.m_bInfinitySpeedItem);
		dwSize += BER<LONGLONG >::Size(_obj.m_llSpeedToTime);
		return dwSize;
	}

	static bool Load(MsgSC_ItemNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lLimitTotalCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lLimitTodayCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bInfinitySpeedItem), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llSpeedToTime), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_ItemNotify& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lLimitTotalCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lLimitTodayCnt ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bInfinitySpeedItem ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llSpeedToTime ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_ItemNotify* _obj, const MsgSC_ItemNotify& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lLimitTotalCnt), src.m_lLimitTotalCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lLimitTodayCnt), src.m_lLimitTodayCnt))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bInfinitySpeedItem), src.m_bInfinitySpeedItem))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llSpeedToTime), src.m_llSpeedToTime))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_DisconnectMoneyNotify >
{
public:
	static DWORD Size(const MsgSC_DisconnectMoneyNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<std::string >::Size(_obj.m_sNickName);
		dwSize += BER<LONGLONG >::Size(_obj.m_llDisconnectMoney);
		return dwSize;
	}

	static bool Load(MsgSC_DisconnectMoneyNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<std::string >::Load(&(_obj->m_sNickName), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llDisconnectMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_DisconnectMoneyNotify& _obj )
	{
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_sNickName ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llDisconnectMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_DisconnectMoneyNotify* _obj, const MsgSC_DisconnectMoneyNotify& src)
	{
		if(!BER<std::string >::Copy(&(_obj->m_sNickName), src.m_sNickName))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llDisconnectMoney), src.m_llDisconnectMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_ExitNtf >
{
public:
	static DWORD Size(const MsgSC_ExitNtf& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nIndex);
		dwSize += BER<LONG >::Size(_obj.m_lExit);
		dwSize += BER<LONG >::Size(_obj.m_bExit);
		return dwSize;
	}

	static bool Load(MsgSC_ExitNtf* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nIndex), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_lExit), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bExit), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_ExitNtf& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nIndex ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lExit ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bExit ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_ExitNtf* _obj, const MsgSC_ExitNtf& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nIndex), src.m_nIndex))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_lExit), src.m_lExit))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bExit), src.m_bExit))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_RematchOKAns >
{
public:
	static DWORD Size(const MsgSC_RematchOKAns& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONGLONG >::Size(_obj.m_llPoolMoney);
		dwSize += BER<Money >::Size(_obj.m_money);
		dwSize += BER<LONG >::Size(_obj.m_bRematchOK);
		return dwSize;
	}

	static bool Load(MsgSC_RematchOKAns* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llPoolMoney), ppBuf, pdwSize))
			return false;
		if(!BER<Money >::Load(&(_obj->m_money), ppBuf, pdwSize))
			return false;
		if(!BER<LONG >::Load(&(_obj->m_bRematchOK), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_RematchOKAns& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llPoolMoney ))
			return false;
		if(!BER<Money >::Store(ppBuf, pdwSize, _obj.m_money ))
			return false;
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bRematchOK ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_RematchOKAns* _obj, const MsgSC_RematchOKAns& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llPoolMoney), src.m_llPoolMoney))
			return false;
		if(!BER<Money >::Copy(&(_obj->m_money), src.m_money))
			return false;
		if(!BER<LONG >::Copy(&(_obj->m_bRematchOK), src.m_bRematchOK))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_RuleNotify >
{
public:
	static DWORD Size(const MsgSC_RuleNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nRuleIdx);
		return dwSize;
	}

	static bool Load(MsgSC_RuleNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nRuleIdx), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_RuleNotify& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nRuleIdx ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_RuleNotify* _obj, const MsgSC_RuleNotify& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nRuleIdx), src.m_nRuleIdx))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_AllowEntryWaitingUser >
{
public:
	static DWORD Size(const MsgSC_AllowEntryWaitingUser& _obj)
	{
		DWORD dwSize = 0;
		return dwSize;
	}

	static bool Load(MsgSC_AllowEntryWaitingUser* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_AllowEntryWaitingUser& _obj )
	{
		return true;
	}
	static bool Copy(MsgSC_AllowEntryWaitingUser* _obj, const MsgSC_AllowEntryWaitingUser& src)
	{
		return true;
	}

};

template<>
class BER<MsgSC_AllWaitingUserDataNtf >
{
public:
	static DWORD Size(const MsgSC_AllWaitingUserDataNtf& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_bSendWaitingUser);
		dwSize += BER<std::vector<WAITINGUSERDATA> >::Size(_obj.m_WaitingUserData);
		return dwSize;
	}

	static bool Load(MsgSC_AllWaitingUserDataNtf* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_bSendWaitingUser), ppBuf, pdwSize))
			return false;
		if(!BER<std::vector<WAITINGUSERDATA> >::Load(&(_obj->m_WaitingUserData), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_AllWaitingUserDataNtf& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_bSendWaitingUser ))
			return false;
		if(!BER<std::vector<WAITINGUSERDATA> >::Store(ppBuf, pdwSize, _obj.m_WaitingUserData ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_AllWaitingUserDataNtf* _obj, const MsgSC_AllWaitingUserDataNtf& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_bSendWaitingUser), src.m_bSendWaitingUser))
			return false;
		if(!BER<std::vector<WAITINGUSERDATA> >::Copy(&(_obj->m_WaitingUserData), src.m_WaitingUserData))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_UserDataChangeNtf >
{
public:
	static DWORD Size(const MsgSC_UserDataChangeNtf& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<RCUserData >::Size(_obj.m_userData);
		return dwSize;
	}

	static bool Load(MsgSC_UserDataChangeNtf* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<RCUserData >::Load(&(_obj->m_userData), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_UserDataChangeNtf& _obj )
	{
		if(!BER<RCUserData >::Store(ppBuf, pdwSize, _obj.m_userData ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_UserDataChangeNtf* _obj, const MsgSC_UserDataChangeNtf& src)
	{
		if(!BER<RCUserData >::Copy(&(_obj->m_userData), src.m_userData))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_RefillMoneyNtf >
{
public:
	static DWORD Size(const MsgSC_RefillMoneyNtf& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nRefillCnt);
		dwSize += BER<LONGLONG >::Size(_obj.m_llRefillMoney);
		return dwSize;
	}

	static bool Load(MsgSC_RefillMoneyNtf* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nRefillCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llRefillMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_RefillMoneyNtf& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nRefillCnt ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llRefillMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_RefillMoneyNtf* _obj, const MsgSC_RefillMoneyNtf& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nRefillCnt), src.m_nRefillCnt))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llRefillMoney), src.m_llRefillMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_JackpotMoneyNtf >
{
public:
	static DWORD Size(const MsgSC_JackpotMoneyNtf& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<LONGLONG >::Size(_obj.m_llJackpotMoney);
		return dwSize;
	}

	static bool Load(MsgSC_JackpotMoneyNtf* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llJackpotMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_JackpotMoneyNtf& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llJackpotMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_JackpotMoneyNtf* _obj, const MsgSC_JackpotMoneyNtf& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llJackpotMoney), src.m_llJackpotMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_GuardianAngelMoney >
{
public:
	static DWORD Size(const MsgSC_GuardianAngelMoney& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lUSN);
		dwSize += BER<int >::Size(_obj.m_nGuardianAngelCnt);
		dwSize += BER<LONGLONG >::Size(_obj.m_llAngelMoney);
		return dwSize;
	}

	static bool Load(MsgSC_GuardianAngelMoney* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lUSN), ppBuf, pdwSize))
			return false;
		if(!BER<int >::Load(&(_obj->m_nGuardianAngelCnt), ppBuf, pdwSize))
			return false;
		if(!BER<LONGLONG >::Load(&(_obj->m_llAngelMoney), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_GuardianAngelMoney& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lUSN ))
			return false;
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nGuardianAngelCnt ))
			return false;
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llAngelMoney ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_GuardianAngelMoney* _obj, const MsgSC_GuardianAngelMoney& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lUSN), src.m_lUSN))
			return false;
		if(!BER<int >::Copy(&(_obj->m_nGuardianAngelCnt), src.m_nGuardianAngelCnt))
			return false;
		if(!BER<LONGLONG >::Copy(&(_obj->m_llAngelMoney), src.m_llAngelMoney))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_GameMasterCallNtf >
{
public:
	static DWORD Size(const MsgSC_GameMasterCallNtf& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONG >::Size(_obj.m_lGMCall_USN);
		return dwSize;
	}

	static bool Load(MsgSC_GameMasterCallNtf* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONG >::Load(&(_obj->m_lGMCall_USN), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_GameMasterCallNtf& _obj )
	{
		if(!BER<LONG >::Store(ppBuf, pdwSize, _obj.m_lGMCall_USN ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_GameMasterCallNtf* _obj, const MsgSC_GameMasterCallNtf& src)
	{
		if(!BER<LONG >::Copy(&(_obj->m_lGMCall_USN), src.m_lGMCall_USN))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_ObserverCnt >
{
public:
	static DWORD Size(const MsgSC_ObserverCnt& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<int >::Size(_obj.m_nObserverCnt);
		return dwSize;
	}

	static bool Load(MsgSC_ObserverCnt* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<int >::Load(&(_obj->m_nObserverCnt), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_ObserverCnt& _obj )
	{
		if(!BER<int >::Store(ppBuf, pdwSize, _obj.m_nObserverCnt ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_ObserverCnt* _obj, const MsgSC_ObserverCnt& src)
	{
		if(!BER<int >::Copy(&(_obj->m_nObserverCnt), src.m_nObserverCnt))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_Bonus >
{
public:
	static DWORD Size(const MsgSC_Bonus& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<LONGLONG >::Size(_obj.m_llBonus);
		return dwSize;
	}

	static bool Load(MsgSC_Bonus* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<LONGLONG >::Load(&(_obj->m_llBonus), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_Bonus& _obj )
	{
		if(!BER<LONGLONG >::Store(ppBuf, pdwSize, _obj.m_llBonus ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_Bonus* _obj, const MsgSC_Bonus& src)
	{
		if(!BER<LONGLONG >::Copy(&(_obj->m_llBonus), src.m_llBonus))
			return false;
		return true;
	}

};

template<>
class BER<MsgSC_PoliceNotify >
{
public:
	static DWORD Size(const MsgSC_PoliceNotify& _obj)
	{
		DWORD dwSize = 0;
		dwSize += BER<std::string >::Size(_obj.m_policeMsg);
		return dwSize;
	}

	static bool Load(MsgSC_PoliceNotify* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		if(!BER<std::string >::Load(&(_obj->m_policeMsg), ppBuf, pdwSize))
			return false;
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const MsgSC_PoliceNotify& _obj )
	{
		if(!BER<std::string >::Store(ppBuf, pdwSize, _obj.m_policeMsg ))
			return false;
		return true;
	}
	static bool Copy(MsgSC_PoliceNotify* _obj, const MsgSC_PoliceNotify& src)
	{
		if(!BER<std::string >::Copy(&(_obj->m_policeMsg), src.m_policeMsg))
			return false;
		return true;
	}

};

template<>
class BER<PayloadSC>
{
public:
	template<typename T>
	static DWORD Size(const T& _obj)
	{
		DWORD dwSize = BER<UINT>::Size(_obj.mTagID);
		switch(_obj.mTagID)
		{
		case PayloadSC::msgUserJoinAns_Tag: 
			dwSize += BER<MsgSC_UserJoinAns >::Size(*_obj.un.m_msgUserJoinAns);
			break;
		case PayloadSC::msgUserJoinErr_Tag: 
			dwSize += BER<MsgSC_UserJoinErr >::Size(*_obj.un.m_msgUserJoinErr);
			break;
		case PayloadSC::msgUserDisconnect_Tag: 
			dwSize += BER<MsgSC_UserDisconnect >::Size(*_obj.un.m_msgUserDisconnect);
			break;
		case PayloadSC::msgCardData_Tag: 
			dwSize += BER<MsgSC_CardData >::Size(*_obj.un.m_msgCardData);
			break;
		case PayloadSC::msgEntryAns_Tag: 
			dwSize += BER<MsgSC_EntryAns >::Size(*_obj.un.m_msgEntryAns);
			break;
		case PayloadSC::msgEntryReject_Tag: 
			dwSize += BER<MsgSC_EntryReject >::Size(*_obj.un.m_msgEntryReject);
			break;
		case PayloadSC::msgObserveAns_Tag: 
			dwSize += BER<MsgSC_ObserveAns >::Size(*_obj.un.m_msgObserveAns);
			break;
		case PayloadSC::msgStartReq_Tag: 
			dwSize += BER<MsgSC_StartReq >::Size(*_obj.un.m_msgStartReq);
			break;
		case PayloadSC::msgStartAns_Tag: 
			dwSize += BER<MsgSC_StartAns >::Size(*_obj.un.m_msgStartAns);
			break;
		case PayloadSC::msgNoStart_Tag: 
			dwSize += BER<MsgSC_NoStart >::Size(*_obj.un.m_msgNoStart);
			break;
		case PayloadSC::msgDealCards_Tag: 
			dwSize += BER<MsgSC_DealCards >::Size(*_obj.un.m_msgDealCards);
			break;
		case PayloadSC::msgSelectedCardAns_Tag: 
			dwSize += BER<MsgSC_SelectedCardAns >::Size(*_obj.un.m_msgSelectedCardAns);
			break;
		case PayloadSC::msgDealOpenCard_Tag: 
			dwSize += BER<MsgSC_DealOpenCard >::Size(*_obj.un.m_msgDealOpenCard);
			break;
		case PayloadSC::msgDealHiddenCard_Tag: 
			dwSize += BER<MsgSC_DealHiddenCard >::Size(*_obj.un.m_msgDealHiddenCard);
			break;
		case PayloadSC::msgDealCard_Tag: 
			dwSize += BER<MsgSC_DealCard >::Size(*_obj.un.m_msgDealCard);
			break;
		case PayloadSC::msgBoss_Tag: 
			dwSize += BER<MsgSC_Boss >::Size(*_obj.un.m_msgBoss);
			break;
		case PayloadSC::msgBetting_Tag: 
			dwSize += BER<MsgSC_Betting >::Size(*_obj.un.m_msgBetting);
			break;
		case PayloadSC::msgBettingAns_Tag: 
			dwSize += BER<MsgSC_BettingAns >::Size(*_obj.un.m_msgBettingAns);
			break;
		case PayloadSC::msgBettingAnsMsg_Tag: 
			dwSize += BER<MsgSC_BettingAnsMsg >::Size(*_obj.un.m_msgBettingAnsMsg);
			break;
		case PayloadSC::msgAnteMoney_Tag: 
			dwSize += BER<MsgSC_AnteMoney >::Size(*_obj.un.m_msgAnteMoney);
			break;
		case PayloadSC::msgRuleQuaterHalf_Tag: 
			dwSize += BER<MsgSC_RuleQuaterHalf >::Size(*_obj.un.m_msgRuleQuaterHalf);
			break;
		case PayloadSC::msgFinished_Tag: 
			dwSize += BER<MsgSC_Finished >::Size(*_obj.un.m_msgFinished);
			break;
		case PayloadSC::msgNewGame_Tag: 
			dwSize += BER<MsgSC_NewGame >::Size(*_obj.un.m_msgNewGame);
			break;
		case PayloadSC::msgContinueAns_Tag: 
			dwSize += BER<MsgSC_ContinueAns >::Size(*_obj.un.m_msgContinueAns);
			break;
		case PayloadSC::msgContinue_Tag: 
			dwSize += BER<MsgSC_Continue >::Size(*_obj.un.m_msgContinue);
			break;
		case PayloadSC::msgSystemMsg_Tag: 
			dwSize += BER<MsgSC_SystemMsg >::Size(*_obj.un.m_msgSystemMsg);
			break;
		case PayloadSC::msgPurgeAns_Tag: 
			dwSize += BER<MsgSC_PurgeAns >::Size(*_obj.un.m_msgPurgeAns);
			break;
		case PayloadSC::msgPurgeInfo_Tag: 
			dwSize += BER<MsgSC_PurgeInfo >::Size(*_obj.un.m_msgPurgeInfo);
			break;
		case PayloadSC::msgSetPurgeMoney_Tag: 
			dwSize += BER<MsgSC_SetPurgeMoney >::Size(*_obj.un.m_msgSetPurgeMoney);
			break;
		case PayloadSC::msgThankYouItemNotify_Tag: 
			dwSize += BER<MsgSC_ThankYouItemNotify >::Size(*_obj.un.m_msgThankYouItemNotify);
			break;
		case PayloadSC::msgMadeItemNotify_Tag: 
			dwSize += BER<MsgSC_MadeItemNotify >::Size(*_obj.un.m_msgMadeItemNotify);
			break;
		case PayloadSC::msgAssaItemNotify_Tag: 
			dwSize += BER<MsgSC_AssaItemNotify >::Size(*_obj.un.m_msgAssaItemNotify);
			break;
		case PayloadSC::msgExtMoneyNotify_Tag: 
			dwSize += BER<MsgSC_ExtMoneyNotify >::Size(*_obj.un.m_msgExtMoneyNotify);
			break;
		case PayloadSC::msgGameEndSystemMsg_Tag: 
			dwSize += BER<MsgSC_GameEndSystemMsg >::Size(*_obj.un.m_msgGameEndSystemMsg);
			break;
		case PayloadSC::msgChangeAvatarNotify_Tag: 
			dwSize += BER<MsgSC_ChangeAvatarNotify >::Size(*_obj.un.m_msgChangeAvatarNotify);
			break;
		case PayloadSC::msgAbuseAns_Tag: 
			dwSize += BER<MsgSC_AbuseAns >::Size(*_obj.un.m_msgAbuseAns);
			break;
		case PayloadSC::msgSoundTypeAns_Tag: 
			dwSize += BER<MsgSC_SoundTypeAns >::Size(*_obj.un.m_msgSoundTypeAns);
			break;
		case PayloadSC::msgFMoney_Tag: 
			dwSize += BER<MsgSC_FMoney >::Size(*_obj.un.m_msgFMoney);
			break;
		case PayloadSC::msgItemNotify_Tag: 
			dwSize += BER<MsgSC_ItemNotify >::Size(*_obj.un.m_msgItemNotify);
			break;
		case PayloadSC::msgDisconnectMoneyNotify_Tag: 
			dwSize += BER<MsgSC_DisconnectMoneyNotify >::Size(*_obj.un.m_msgDisconnectMoneyNotify);
			break;
		case PayloadSC::msgExitNtf_Tag: 
			dwSize += BER<MsgSC_ExitNtf >::Size(*_obj.un.m_msgExitNtf);
			break;
		case PayloadSC::msgAllowEntryWaitingUser_Tag: 
			dwSize += BER<MsgSC_AllowEntryWaitingUser >::Size(*_obj.un.m_msgAllowEntryWaitingUser);
			break;
		case PayloadSC::msgAllWaitingUserDataNtf_Tag: 
			dwSize += BER<MsgSC_AllWaitingUserDataNtf >::Size(*_obj.un.m_msgAllWaitingUserDataNtf);
			break;
		case PayloadSC::msgUserDataChangeNtf_Tag: 
			dwSize += BER<MsgSC_UserDataChangeNtf >::Size(*_obj.un.m_msgUserDataChangeNtf);
			break;
		case PayloadSC::msgRefillMoneyNtf_Tag: 
			dwSize += BER<MsgSC_RefillMoneyNtf >::Size(*_obj.un.m_msgRefillMoneyNtf);
			break;
		case PayloadSC::msgJackpotMoneyNtf_Tag: 
			dwSize += BER<MsgSC_JackpotMoneyNtf >::Size(*_obj.un.m_msgJackpotMoneyNtf);
			break;
		case PayloadSC::msgRuleNotify_Tag: 
			dwSize += BER<MsgSC_RuleNotify >::Size(*_obj.un.m_msgRuleNotify);
			break;
		case PayloadSC::msgGuardianAngelMoney_Tag: 
			dwSize += BER<MsgSC_GuardianAngelMoney >::Size(*_obj.un.m_msgGuardianAngelMoney);
			break;
		case PayloadSC::msgGameMasterCallNtf_Tag: 
			dwSize += BER<MsgSC_GameMasterCallNtf >::Size(*_obj.un.m_msgGameMasterCallNtf);
			break;
		case PayloadSC::msgObserverCnt_Tag: 
			dwSize += BER<MsgSC_ObserverCnt >::Size(*_obj.un.m_msgObserverCnt);
			break;
		case PayloadSC::msgBonus_Tag: 
			dwSize += BER<MsgSC_Bonus >::Size(*_obj.un.m_msgBonus);
			break;
		case PayloadSC::msgPoliceNotify_Tag: 
			dwSize += BER<MsgSC_PoliceNotify >::Size(*_obj.un.m_msgPoliceNotify);
			break;
		}
		return dwSize;
	}

	static bool Load(PayloadSC* _obj, LPBYTE* ppBuf, LPDWORD pdwSize)
	{
		_obj->mTagID = 0;
		if(!BER<DWORD>::Load(&_obj->mTagID, ppBuf, pdwSize))
			return false;
		switch(_obj->mTagID)
		{
		case 0:
			return false;
		case PayloadSC::msgUserJoinAns_Tag: 
			_obj->un.m_msgUserJoinAns = new MsgSC_UserJoinAns;
			if(!BER<MsgSC_UserJoinAns>::Load(_obj->un.m_msgUserJoinAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgUserJoinErr_Tag: 
			_obj->un.m_msgUserJoinErr = new MsgSC_UserJoinErr;
			if(!BER<MsgSC_UserJoinErr>::Load(_obj->un.m_msgUserJoinErr, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgUserDisconnect_Tag: 
			_obj->un.m_msgUserDisconnect = new MsgSC_UserDisconnect;
			if(!BER<MsgSC_UserDisconnect>::Load(_obj->un.m_msgUserDisconnect, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgCardData_Tag: 
			_obj->un.m_msgCardData = new MsgSC_CardData;
			if(!BER<MsgSC_CardData>::Load(_obj->un.m_msgCardData, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgEntryAns_Tag: 
			_obj->un.m_msgEntryAns = new MsgSC_EntryAns;
			if(!BER<MsgSC_EntryAns>::Load(_obj->un.m_msgEntryAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgEntryReject_Tag: 
			_obj->un.m_msgEntryReject = new MsgSC_EntryReject;
			if(!BER<MsgSC_EntryReject>::Load(_obj->un.m_msgEntryReject, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgObserveAns_Tag: 
			_obj->un.m_msgObserveAns = new MsgSC_ObserveAns;
			if(!BER<MsgSC_ObserveAns>::Load(_obj->un.m_msgObserveAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgStartReq_Tag: 
			_obj->un.m_msgStartReq = new MsgSC_StartReq;
			if(!BER<MsgSC_StartReq>::Load(_obj->un.m_msgStartReq, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgStartAns_Tag: 
			_obj->un.m_msgStartAns = new MsgSC_StartAns;
			if(!BER<MsgSC_StartAns>::Load(_obj->un.m_msgStartAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgNoStart_Tag: 
			_obj->un.m_msgNoStart = new MsgSC_NoStart;
			if(!BER<MsgSC_NoStart>::Load(_obj->un.m_msgNoStart, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgDealCards_Tag: 
			_obj->un.m_msgDealCards = new MsgSC_DealCards;
			if(!BER<MsgSC_DealCards>::Load(_obj->un.m_msgDealCards, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgSelectedCardAns_Tag: 
			_obj->un.m_msgSelectedCardAns = new MsgSC_SelectedCardAns;
			if(!BER<MsgSC_SelectedCardAns>::Load(_obj->un.m_msgSelectedCardAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgDealOpenCard_Tag: 
			_obj->un.m_msgDealOpenCard = new MsgSC_DealOpenCard;
			if(!BER<MsgSC_DealOpenCard>::Load(_obj->un.m_msgDealOpenCard, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgDealHiddenCard_Tag: 
			_obj->un.m_msgDealHiddenCard = new MsgSC_DealHiddenCard;
			if(!BER<MsgSC_DealHiddenCard>::Load(_obj->un.m_msgDealHiddenCard, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgDealCard_Tag: 
			_obj->un.m_msgDealCard = new MsgSC_DealCard;
			if(!BER<MsgSC_DealCard>::Load(_obj->un.m_msgDealCard, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgBoss_Tag: 
			_obj->un.m_msgBoss = new MsgSC_Boss;
			if(!BER<MsgSC_Boss>::Load(_obj->un.m_msgBoss, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgBetting_Tag: 
			_obj->un.m_msgBetting = new MsgSC_Betting;
			if(!BER<MsgSC_Betting>::Load(_obj->un.m_msgBetting, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgBettingAns_Tag: 
			_obj->un.m_msgBettingAns = new MsgSC_BettingAns;
			if(!BER<MsgSC_BettingAns>::Load(_obj->un.m_msgBettingAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgBettingAnsMsg_Tag: 
			_obj->un.m_msgBettingAnsMsg = new MsgSC_BettingAnsMsg;
			if(!BER<MsgSC_BettingAnsMsg>::Load(_obj->un.m_msgBettingAnsMsg, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgAnteMoney_Tag: 
			_obj->un.m_msgAnteMoney = new MsgSC_AnteMoney;
			if(!BER<MsgSC_AnteMoney>::Load(_obj->un.m_msgAnteMoney, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgRuleQuaterHalf_Tag: 
			_obj->un.m_msgRuleQuaterHalf = new MsgSC_RuleQuaterHalf;
			if(!BER<MsgSC_RuleQuaterHalf>::Load(_obj->un.m_msgRuleQuaterHalf, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgFinished_Tag: 
			_obj->un.m_msgFinished = new MsgSC_Finished;
			if(!BER<MsgSC_Finished>::Load(_obj->un.m_msgFinished, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgNewGame_Tag: 
			_obj->un.m_msgNewGame = new MsgSC_NewGame;
			if(!BER<MsgSC_NewGame>::Load(_obj->un.m_msgNewGame, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgContinueAns_Tag: 
			_obj->un.m_msgContinueAns = new MsgSC_ContinueAns;
			if(!BER<MsgSC_ContinueAns>::Load(_obj->un.m_msgContinueAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgContinue_Tag: 
			_obj->un.m_msgContinue = new MsgSC_Continue;
			if(!BER<MsgSC_Continue>::Load(_obj->un.m_msgContinue, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgSystemMsg_Tag: 
			_obj->un.m_msgSystemMsg = new MsgSC_SystemMsg;
			if(!BER<MsgSC_SystemMsg>::Load(_obj->un.m_msgSystemMsg, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgPurgeAns_Tag: 
			_obj->un.m_msgPurgeAns = new MsgSC_PurgeAns;
			if(!BER<MsgSC_PurgeAns>::Load(_obj->un.m_msgPurgeAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgPurgeInfo_Tag: 
			_obj->un.m_msgPurgeInfo = new MsgSC_PurgeInfo;
			if(!BER<MsgSC_PurgeInfo>::Load(_obj->un.m_msgPurgeInfo, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgSetPurgeMoney_Tag: 
			_obj->un.m_msgSetPurgeMoney = new MsgSC_SetPurgeMoney;
			if(!BER<MsgSC_SetPurgeMoney>::Load(_obj->un.m_msgSetPurgeMoney, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgThankYouItemNotify_Tag: 
			_obj->un.m_msgThankYouItemNotify = new MsgSC_ThankYouItemNotify;
			if(!BER<MsgSC_ThankYouItemNotify>::Load(_obj->un.m_msgThankYouItemNotify, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgMadeItemNotify_Tag: 
			_obj->un.m_msgMadeItemNotify = new MsgSC_MadeItemNotify;
			if(!BER<MsgSC_MadeItemNotify>::Load(_obj->un.m_msgMadeItemNotify, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgAssaItemNotify_Tag: 
			_obj->un.m_msgAssaItemNotify = new MsgSC_AssaItemNotify;
			if(!BER<MsgSC_AssaItemNotify>::Load(_obj->un.m_msgAssaItemNotify, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgExtMoneyNotify_Tag: 
			_obj->un.m_msgExtMoneyNotify = new MsgSC_ExtMoneyNotify;
			if(!BER<MsgSC_ExtMoneyNotify>::Load(_obj->un.m_msgExtMoneyNotify, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgGameEndSystemMsg_Tag: 
			_obj->un.m_msgGameEndSystemMsg = new MsgSC_GameEndSystemMsg;
			if(!BER<MsgSC_GameEndSystemMsg>::Load(_obj->un.m_msgGameEndSystemMsg, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgChangeAvatarNotify_Tag: 
			_obj->un.m_msgChangeAvatarNotify = new MsgSC_ChangeAvatarNotify;
			if(!BER<MsgSC_ChangeAvatarNotify>::Load(_obj->un.m_msgChangeAvatarNotify, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgAbuseAns_Tag: 
			_obj->un.m_msgAbuseAns = new MsgSC_AbuseAns;
			if(!BER<MsgSC_AbuseAns>::Load(_obj->un.m_msgAbuseAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgSoundTypeAns_Tag: 
			_obj->un.m_msgSoundTypeAns = new MsgSC_SoundTypeAns;
			if(!BER<MsgSC_SoundTypeAns>::Load(_obj->un.m_msgSoundTypeAns, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgFMoney_Tag: 
			_obj->un.m_msgFMoney = new MsgSC_FMoney;
			if(!BER<MsgSC_FMoney>::Load(_obj->un.m_msgFMoney, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgItemNotify_Tag: 
			_obj->un.m_msgItemNotify = new MsgSC_ItemNotify;
			if(!BER<MsgSC_ItemNotify>::Load(_obj->un.m_msgItemNotify, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgDisconnectMoneyNotify_Tag: 
			_obj->un.m_msgDisconnectMoneyNotify = new MsgSC_DisconnectMoneyNotify;
			if(!BER<MsgSC_DisconnectMoneyNotify>::Load(_obj->un.m_msgDisconnectMoneyNotify, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgExitNtf_Tag: 
			_obj->un.m_msgExitNtf = new MsgSC_ExitNtf;
			if(!BER<MsgSC_ExitNtf>::Load(_obj->un.m_msgExitNtf, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgAllowEntryWaitingUser_Tag: 
			_obj->un.m_msgAllowEntryWaitingUser = new MsgSC_AllowEntryWaitingUser;
			if(!BER<MsgSC_AllowEntryWaitingUser>::Load(_obj->un.m_msgAllowEntryWaitingUser, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgAllWaitingUserDataNtf_Tag: 
			_obj->un.m_msgAllWaitingUserDataNtf = new MsgSC_AllWaitingUserDataNtf;
			if(!BER<MsgSC_AllWaitingUserDataNtf>::Load(_obj->un.m_msgAllWaitingUserDataNtf, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgUserDataChangeNtf_Tag: 
			_obj->un.m_msgUserDataChangeNtf = new MsgSC_UserDataChangeNtf;
			if(!BER<MsgSC_UserDataChangeNtf>::Load(_obj->un.m_msgUserDataChangeNtf, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgRefillMoneyNtf_Tag: 
			_obj->un.m_msgRefillMoneyNtf = new MsgSC_RefillMoneyNtf;
			if(!BER<MsgSC_RefillMoneyNtf>::Load(_obj->un.m_msgRefillMoneyNtf, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgJackpotMoneyNtf_Tag: 
			_obj->un.m_msgJackpotMoneyNtf = new MsgSC_JackpotMoneyNtf;
			if(!BER<MsgSC_JackpotMoneyNtf>::Load(_obj->un.m_msgJackpotMoneyNtf, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgRuleNotify_Tag: 
			_obj->un.m_msgRuleNotify = new MsgSC_RuleNotify;
			if(!BER<MsgSC_RuleNotify>::Load(_obj->un.m_msgRuleNotify, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgGuardianAngelMoney_Tag: 
			_obj->un.m_msgGuardianAngelMoney = new MsgSC_GuardianAngelMoney;
			if(!BER<MsgSC_GuardianAngelMoney>::Load(_obj->un.m_msgGuardianAngelMoney, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgGameMasterCallNtf_Tag: 
			_obj->un.m_msgGameMasterCallNtf = new MsgSC_GameMasterCallNtf;
			if(!BER<MsgSC_GameMasterCallNtf>::Load(_obj->un.m_msgGameMasterCallNtf, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgObserverCnt_Tag: 
			_obj->un.m_msgObserverCnt = new MsgSC_ObserverCnt;
			if(!BER<MsgSC_ObserverCnt>::Load(_obj->un.m_msgObserverCnt, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgBonus_Tag: 
			_obj->un.m_msgBonus = new MsgSC_Bonus;
			if(!BER<MsgSC_Bonus>::Load(_obj->un.m_msgBonus, ppBuf, pdwSize))
				return false;
			break;
		case PayloadSC::msgPoliceNotify_Tag: 
			_obj->un.m_msgPoliceNotify = new MsgSC_PoliceNotify;
			if(!BER<MsgSC_PoliceNotify>::Load(_obj->un.m_msgPoliceNotify, ppBuf, pdwSize))
				return false;
			break;
		default:
			return false;
		}
		return true;
	}

	static bool Store(LPBYTE* ppBuf, LPDWORD pdwSize, const PayloadSC& _obj )
	{
		if(!BER<DWORD>::Store((LPBYTE*)ppBuf, pdwSize, _obj.mTagID))
			return false;
		switch(_obj.mTagID)
		{
		case 0:
			return false;
		case PayloadSC::msgUserJoinAns_Tag: 
			if(!BER<MsgSC_UserJoinAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgUserJoinAns)))
				return false;
			break;
		case PayloadSC::msgUserJoinErr_Tag: 
			if(!BER<MsgSC_UserJoinErr>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgUserJoinErr)))
				return false;
			break;
		case PayloadSC::msgUserDisconnect_Tag: 
			if(!BER<MsgSC_UserDisconnect>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgUserDisconnect)))
				return false;
			break;
		case PayloadSC::msgCardData_Tag: 
			if(!BER<MsgSC_CardData>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgCardData)))
				return false;
			break;
		case PayloadSC::msgEntryAns_Tag: 
			if(!BER<MsgSC_EntryAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgEntryAns)))
				return false;
			break;
		case PayloadSC::msgEntryReject_Tag: 
			if(!BER<MsgSC_EntryReject>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgEntryReject)))
				return false;
			break;
		case PayloadSC::msgObserveAns_Tag: 
			if(!BER<MsgSC_ObserveAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgObserveAns)))
				return false;
			break;
		case PayloadSC::msgStartReq_Tag: 
			if(!BER<MsgSC_StartReq>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgStartReq)))
				return false;
			break;
		case PayloadSC::msgStartAns_Tag: 
			if(!BER<MsgSC_StartAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgStartAns)))
				return false;
			break;
		case PayloadSC::msgNoStart_Tag: 
			if(!BER<MsgSC_NoStart>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgNoStart)))
				return false;
			break;
		case PayloadSC::msgDealCards_Tag: 
			if(!BER<MsgSC_DealCards>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgDealCards)))
				return false;
			break;
		case PayloadSC::msgSelectedCardAns_Tag: 
			if(!BER<MsgSC_SelectedCardAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgSelectedCardAns)))
				return false;
			break;
		case PayloadSC::msgDealOpenCard_Tag: 
			if(!BER<MsgSC_DealOpenCard>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgDealOpenCard)))
				return false;
			break;
		case PayloadSC::msgDealHiddenCard_Tag: 
			if(!BER<MsgSC_DealHiddenCard>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgDealHiddenCard)))
				return false;
			break;
		case PayloadSC::msgDealCard_Tag: 
			if(!BER<MsgSC_DealCard>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgDealCard)))
				return false;
			break;
		case PayloadSC::msgBoss_Tag: 
			if(!BER<MsgSC_Boss>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgBoss)))
				return false;
			break;
		case PayloadSC::msgBetting_Tag: 
			if(!BER<MsgSC_Betting>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgBetting)))
				return false;
			break;
		case PayloadSC::msgBettingAns_Tag: 
			if(!BER<MsgSC_BettingAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgBettingAns)))
				return false;
			break;
		case PayloadSC::msgBettingAnsMsg_Tag: 
			if(!BER<MsgSC_BettingAnsMsg>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgBettingAnsMsg)))
				return false;
			break;
		case PayloadSC::msgAnteMoney_Tag: 
			if(!BER<MsgSC_AnteMoney>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAnteMoney)))
				return false;
			break;
		case PayloadSC::msgRuleQuaterHalf_Tag: 
			if(!BER<MsgSC_RuleQuaterHalf>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgRuleQuaterHalf)))
				return false;
			break;
		case PayloadSC::msgFinished_Tag: 
			if(!BER<MsgSC_Finished>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgFinished)))
				return false;
			break;
		case PayloadSC::msgNewGame_Tag: 
			if(!BER<MsgSC_NewGame>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgNewGame)))
				return false;
			break;
		case PayloadSC::msgContinueAns_Tag: 
			if(!BER<MsgSC_ContinueAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgContinueAns)))
				return false;
			break;
		case PayloadSC::msgContinue_Tag: 
			if(!BER<MsgSC_Continue>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgContinue)))
				return false;
			break;
		case PayloadSC::msgSystemMsg_Tag: 
			if(!BER<MsgSC_SystemMsg>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgSystemMsg)))
				return false;
			break;
		case PayloadSC::msgPurgeAns_Tag: 
			if(!BER<MsgSC_PurgeAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgPurgeAns)))
				return false;
			break;
		case PayloadSC::msgPurgeInfo_Tag: 
			if(!BER<MsgSC_PurgeInfo>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgPurgeInfo)))
				return false;
			break;
		case PayloadSC::msgSetPurgeMoney_Tag: 
			if(!BER<MsgSC_SetPurgeMoney>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgSetPurgeMoney)))
				return false;
			break;
		case PayloadSC::msgThankYouItemNotify_Tag: 
			if(!BER<MsgSC_ThankYouItemNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgThankYouItemNotify)))
				return false;
			break;
		case PayloadSC::msgMadeItemNotify_Tag: 
			if(!BER<MsgSC_MadeItemNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgMadeItemNotify)))
				return false;
			break;
		case PayloadSC::msgAssaItemNotify_Tag: 
			if(!BER<MsgSC_AssaItemNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAssaItemNotify)))
				return false;
			break;
		case PayloadSC::msgExtMoneyNotify_Tag: 
			if(!BER<MsgSC_ExtMoneyNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgExtMoneyNotify)))
				return false;
			break;
		case PayloadSC::msgGameEndSystemMsg_Tag: 
			if(!BER<MsgSC_GameEndSystemMsg>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgGameEndSystemMsg)))
				return false;
			break;
		case PayloadSC::msgChangeAvatarNotify_Tag: 
			if(!BER<MsgSC_ChangeAvatarNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgChangeAvatarNotify)))
				return false;
			break;
		case PayloadSC::msgAbuseAns_Tag: 
			if(!BER<MsgSC_AbuseAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAbuseAns)))
				return false;
			break;
		case PayloadSC::msgSoundTypeAns_Tag: 
			if(!BER<MsgSC_SoundTypeAns>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgSoundTypeAns)))
				return false;
			break;
		case PayloadSC::msgFMoney_Tag: 
			if(!BER<MsgSC_FMoney>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgFMoney)))
				return false;
			break;
		case PayloadSC::msgItemNotify_Tag: 
			if(!BER<MsgSC_ItemNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgItemNotify)))
				return false;
			break;
		case PayloadSC::msgDisconnectMoneyNotify_Tag: 
			if(!BER<MsgSC_DisconnectMoneyNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgDisconnectMoneyNotify)))
				return false;
			break;
		case PayloadSC::msgExitNtf_Tag: 
			if(!BER<MsgSC_ExitNtf>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgExitNtf)))
				return false;
			break;
		case PayloadSC::msgAllowEntryWaitingUser_Tag: 
			if(!BER<MsgSC_AllowEntryWaitingUser>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAllowEntryWaitingUser)))
				return false;
			break;
		case PayloadSC::msgAllWaitingUserDataNtf_Tag: 
			if(!BER<MsgSC_AllWaitingUserDataNtf>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgAllWaitingUserDataNtf)))
				return false;
			break;
		case PayloadSC::msgUserDataChangeNtf_Tag: 
			if(!BER<MsgSC_UserDataChangeNtf>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgUserDataChangeNtf)))
				return false;
			break;
		case PayloadSC::msgRefillMoneyNtf_Tag: 
			if(!BER<MsgSC_RefillMoneyNtf>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgRefillMoneyNtf)))
				return false;
			break;
		case PayloadSC::msgJackpotMoneyNtf_Tag: 
			if(!BER<MsgSC_JackpotMoneyNtf>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgJackpotMoneyNtf)))
				return false;
			break;
		case PayloadSC::msgRuleNotify_Tag: 
			if(!BER<MsgSC_RuleNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgRuleNotify)))
				return false;
			break;
		case PayloadSC::msgGuardianAngelMoney_Tag: 
			if(!BER<MsgSC_GuardianAngelMoney>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgGuardianAngelMoney)))
				return false;
			break;
		case PayloadSC::msgGameMasterCallNtf_Tag: 
			if(!BER<MsgSC_GameMasterCallNtf>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgGameMasterCallNtf)))
				return false;
			break;
		case PayloadSC::msgObserverCnt_Tag: 
			if(!BER<MsgSC_ObserverCnt>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgObserverCnt)))
				return false;
			break;
		case PayloadSC::msgBonus_Tag: 
			if(!BER<MsgSC_Bonus>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgBonus)))
				return false;
			break;
		case PayloadSC::msgPoliceNotify_Tag: 
			if(!BER<MsgSC_PoliceNotify>::Store((LPBYTE*)ppBuf, pdwSize, *(_obj.un.m_msgPoliceNotify)))
				return false;
			break;
		default:
			return false;
		}
		if (*pdwSize)
			return false;
		return true;
	}

	static bool Copy(PayloadSC* _obj, const PayloadSC& src)
	{
		_obj->mTagID = 0;
		if(!BER<DWORD>::Copy(&_obj->mTagID, src.mTagID))
			return false;
		switch(_obj->mTagID)
		{
		case 0:
			return false;
		case PayloadSC::msgUserJoinAns_Tag: 
			_obj->un.m_msgUserJoinAns = new MsgSC_UserJoinAns;
			if(!BER<MsgSC_UserJoinAns>::Copy(_obj->un.m_msgUserJoinAns, *(src.un.m_msgUserJoinAns)))
				return false;
			break;
		case PayloadSC::msgUserJoinErr_Tag: 
			_obj->un.m_msgUserJoinErr = new MsgSC_UserJoinErr;
			if(!BER<MsgSC_UserJoinErr>::Copy(_obj->un.m_msgUserJoinErr, *(src.un.m_msgUserJoinErr)))
				return false;
			break;
		case PayloadSC::msgUserDisconnect_Tag: 
			_obj->un.m_msgUserDisconnect = new MsgSC_UserDisconnect;
			if(!BER<MsgSC_UserDisconnect>::Copy(_obj->un.m_msgUserDisconnect, *(src.un.m_msgUserDisconnect)))
				return false;
			break;
		case PayloadSC::msgCardData_Tag: 
			_obj->un.m_msgCardData = new MsgSC_CardData;
			if(!BER<MsgSC_CardData>::Copy(_obj->un.m_msgCardData, *(src.un.m_msgCardData)))
				return false;
			break;
		case PayloadSC::msgEntryAns_Tag: 
			_obj->un.m_msgEntryAns = new MsgSC_EntryAns;
			if(!BER<MsgSC_EntryAns>::Copy(_obj->un.m_msgEntryAns, *(src.un.m_msgEntryAns)))
				return false;
			break;
		case PayloadSC::msgEntryReject_Tag: 
			_obj->un.m_msgEntryReject = new MsgSC_EntryReject;
			if(!BER<MsgSC_EntryReject>::Copy(_obj->un.m_msgEntryReject, *(src.un.m_msgEntryReject)))
				return false;
			break;
		case PayloadSC::msgObserveAns_Tag: 
			_obj->un.m_msgObserveAns = new MsgSC_ObserveAns;
			if(!BER<MsgSC_ObserveAns>::Copy(_obj->un.m_msgObserveAns, *(src.un.m_msgObserveAns)))
				return false;
			break;
		case PayloadSC::msgStartReq_Tag: 
			_obj->un.m_msgStartReq = new MsgSC_StartReq;
			if(!BER<MsgSC_StartReq>::Copy(_obj->un.m_msgStartReq, *(src.un.m_msgStartReq)))
				return false;
			break;
		case PayloadSC::msgStartAns_Tag: 
			_obj->un.m_msgStartAns = new MsgSC_StartAns;
			if(!BER<MsgSC_StartAns>::Copy(_obj->un.m_msgStartAns, *(src.un.m_msgStartAns)))
				return false;
			break;
		case PayloadSC::msgNoStart_Tag: 
			_obj->un.m_msgNoStart = new MsgSC_NoStart;
			if(!BER<MsgSC_NoStart>::Copy(_obj->un.m_msgNoStart, *(src.un.m_msgNoStart)))
				return false;
			break;
		case PayloadSC::msgDealCards_Tag: 
			_obj->un.m_msgDealCards = new MsgSC_DealCards;
			if(!BER<MsgSC_DealCards>::Copy(_obj->un.m_msgDealCards, *(src.un.m_msgDealCards)))
				return false;
			break;
		case PayloadSC::msgSelectedCardAns_Tag: 
			_obj->un.m_msgSelectedCardAns = new MsgSC_SelectedCardAns;
			if(!BER<MsgSC_SelectedCardAns>::Copy(_obj->un.m_msgSelectedCardAns, *(src.un.m_msgSelectedCardAns)))
				return false;
			break;
		case PayloadSC::msgDealOpenCard_Tag: 
			_obj->un.m_msgDealOpenCard = new MsgSC_DealOpenCard;
			if(!BER<MsgSC_DealOpenCard>::Copy(_obj->un.m_msgDealOpenCard, *(src.un.m_msgDealOpenCard)))
				return false;
			break;
		case PayloadSC::msgDealHiddenCard_Tag: 
			_obj->un.m_msgDealHiddenCard = new MsgSC_DealHiddenCard;
			if(!BER<MsgSC_DealHiddenCard>::Copy(_obj->un.m_msgDealHiddenCard, *(src.un.m_msgDealHiddenCard)))
				return false;
			break;
		case PayloadSC::msgDealCard_Tag: 
			_obj->un.m_msgDealCard = new MsgSC_DealCard;
			if(!BER<MsgSC_DealCard>::Copy(_obj->un.m_msgDealCard, *(src.un.m_msgDealCard)))
				return false;
			break;
		case PayloadSC::msgBoss_Tag: 
			_obj->un.m_msgBoss = new MsgSC_Boss;
			if(!BER<MsgSC_Boss>::Copy(_obj->un.m_msgBoss, *(src.un.m_msgBoss)))
				return false;
			break;
		case PayloadSC::msgBetting_Tag: 
			_obj->un.m_msgBetting = new MsgSC_Betting;
			if(!BER<MsgSC_Betting>::Copy(_obj->un.m_msgBetting, *(src.un.m_msgBetting)))
				return false;
			break;
		case PayloadSC::msgBettingAns_Tag: 
			_obj->un.m_msgBettingAns = new MsgSC_BettingAns;
			if(!BER<MsgSC_BettingAns>::Copy(_obj->un.m_msgBettingAns, *(src.un.m_msgBettingAns)))
				return false;
			break;
		case PayloadSC::msgBettingAnsMsg_Tag: 
			_obj->un.m_msgBettingAnsMsg = new MsgSC_BettingAnsMsg;
			if(!BER<MsgSC_BettingAnsMsg>::Copy(_obj->un.m_msgBettingAnsMsg, *(src.un.m_msgBettingAnsMsg)))
				return false;
			break;
		case PayloadSC::msgAnteMoney_Tag: 
			_obj->un.m_msgAnteMoney = new MsgSC_AnteMoney;
			if(!BER<MsgSC_AnteMoney>::Copy(_obj->un.m_msgAnteMoney, *(src.un.m_msgAnteMoney)))
				return false;
			break;
		case PayloadSC::msgRuleQuaterHalf_Tag: 
			_obj->un.m_msgRuleQuaterHalf = new MsgSC_RuleQuaterHalf;
			if(!BER<MsgSC_RuleQuaterHalf>::Copy(_obj->un.m_msgRuleQuaterHalf, *(src.un.m_msgRuleQuaterHalf)))
				return false;
			break;
		case PayloadSC::msgFinished_Tag: 
			_obj->un.m_msgFinished = new MsgSC_Finished;
			if(!BER<MsgSC_Finished>::Copy(_obj->un.m_msgFinished, *(src.un.m_msgFinished)))
				return false;
			break;
		case PayloadSC::msgNewGame_Tag: 
			_obj->un.m_msgNewGame = new MsgSC_NewGame;
			if(!BER<MsgSC_NewGame>::Copy(_obj->un.m_msgNewGame, *(src.un.m_msgNewGame)))
				return false;
			break;
		case PayloadSC::msgContinueAns_Tag: 
			_obj->un.m_msgContinueAns = new MsgSC_ContinueAns;
			if(!BER<MsgSC_ContinueAns>::Copy(_obj->un.m_msgContinueAns, *(src.un.m_msgContinueAns)))
				return false;
			break;
		case PayloadSC::msgContinue_Tag: 
			_obj->un.m_msgContinue = new MsgSC_Continue;
			if(!BER<MsgSC_Continue>::Copy(_obj->un.m_msgContinue, *(src.un.m_msgContinue)))
				return false;
			break;
		case PayloadSC::msgSystemMsg_Tag: 
			_obj->un.m_msgSystemMsg = new MsgSC_SystemMsg;
			if(!BER<MsgSC_SystemMsg>::Copy(_obj->un.m_msgSystemMsg, *(src.un.m_msgSystemMsg)))
				return false;
			break;
		case PayloadSC::msgPurgeAns_Tag: 
			_obj->un.m_msgPurgeAns = new MsgSC_PurgeAns;
			if(!BER<MsgSC_PurgeAns>::Copy(_obj->un.m_msgPurgeAns, *(src.un.m_msgPurgeAns)))
				return false;
			break;
		case PayloadSC::msgPurgeInfo_Tag: 
			_obj->un.m_msgPurgeInfo = new MsgSC_PurgeInfo;
			if(!BER<MsgSC_PurgeInfo>::Copy(_obj->un.m_msgPurgeInfo, *(src.un.m_msgPurgeInfo)))
				return false;
			break;
		case PayloadSC::msgSetPurgeMoney_Tag: 
			_obj->un.m_msgSetPurgeMoney = new MsgSC_SetPurgeMoney;
			if(!BER<MsgSC_SetPurgeMoney>::Copy(_obj->un.m_msgSetPurgeMoney, *(src.un.m_msgSetPurgeMoney)))
				return false;
			break;
		case PayloadSC::msgThankYouItemNotify_Tag: 
			_obj->un.m_msgThankYouItemNotify = new MsgSC_ThankYouItemNotify;
			if(!BER<MsgSC_ThankYouItemNotify>::Copy(_obj->un.m_msgThankYouItemNotify, *(src.un.m_msgThankYouItemNotify)))
				return false;
			break;
		case PayloadSC::msgMadeItemNotify_Tag: 
			_obj->un.m_msgMadeItemNotify = new MsgSC_MadeItemNotify;
			if(!BER<MsgSC_MadeItemNotify>::Copy(_obj->un.m_msgMadeItemNotify, *(src.un.m_msgMadeItemNotify)))
				return false;
			break;
		case PayloadSC::msgAssaItemNotify_Tag: 
			_obj->un.m_msgAssaItemNotify = new MsgSC_AssaItemNotify;
			if(!BER<MsgSC_AssaItemNotify>::Copy(_obj->un.m_msgAssaItemNotify, *(src.un.m_msgAssaItemNotify)))
				return false;
			break;
		case PayloadSC::msgExtMoneyNotify_Tag: 
			_obj->un.m_msgExtMoneyNotify = new MsgSC_ExtMoneyNotify;
			if(!BER<MsgSC_ExtMoneyNotify>::Copy(_obj->un.m_msgExtMoneyNotify, *(src.un.m_msgExtMoneyNotify)))
				return false;
			break;
		case PayloadSC::msgGameEndSystemMsg_Tag: 
			_obj->un.m_msgGameEndSystemMsg = new MsgSC_GameEndSystemMsg;
			if(!BER<MsgSC_GameEndSystemMsg>::Copy(_obj->un.m_msgGameEndSystemMsg, *(src.un.m_msgGameEndSystemMsg)))
				return false;
			break;
		case PayloadSC::msgChangeAvatarNotify_Tag: 
			_obj->un.m_msgChangeAvatarNotify = new MsgSC_ChangeAvatarNotify;
			if(!BER<MsgSC_ChangeAvatarNotify>::Copy(_obj->un.m_msgChangeAvatarNotify, *(src.un.m_msgChangeAvatarNotify)))
				return false;
			break;
		case PayloadSC::msgAbuseAns_Tag: 
			_obj->un.m_msgAbuseAns = new MsgSC_AbuseAns;
			if(!BER<MsgSC_AbuseAns>::Copy(_obj->un.m_msgAbuseAns, *(src.un.m_msgAbuseAns)))
				return false;
			break;
		case PayloadSC::msgSoundTypeAns_Tag: 
			_obj->un.m_msgSoundTypeAns = new MsgSC_SoundTypeAns;
			if(!BER<MsgSC_SoundTypeAns>::Copy(_obj->un.m_msgSoundTypeAns, *(src.un.m_msgSoundTypeAns)))
				return false;
			break;
		case PayloadSC::msgFMoney_Tag: 
			_obj->un.m_msgFMoney = new MsgSC_FMoney;
			if(!BER<MsgSC_FMoney>::Copy(_obj->un.m_msgFMoney, *(src.un.m_msgFMoney)))
				return false;
			break;
		case PayloadSC::msgItemNotify_Tag: 
			_obj->un.m_msgItemNotify = new MsgSC_ItemNotify;
			if(!BER<MsgSC_ItemNotify>::Copy(_obj->un.m_msgItemNotify, *(src.un.m_msgItemNotify)))
				return false;
			break;
		case PayloadSC::msgDisconnectMoneyNotify_Tag: 
			_obj->un.m_msgDisconnectMoneyNotify = new MsgSC_DisconnectMoneyNotify;
			if(!BER<MsgSC_DisconnectMoneyNotify>::Copy(_obj->un.m_msgDisconnectMoneyNotify, *(src.un.m_msgDisconnectMoneyNotify)))
				return false;
			break;
		case PayloadSC::msgExitNtf_Tag: 
			_obj->un.m_msgExitNtf = new MsgSC_ExitNtf;
			if(!BER<MsgSC_ExitNtf>::Copy(_obj->un.m_msgExitNtf, *(src.un.m_msgExitNtf)))
				return false;
			break;
		case PayloadSC::msgAllowEntryWaitingUser_Tag: 
			_obj->un.m_msgAllowEntryWaitingUser = new MsgSC_AllowEntryWaitingUser;
			if(!BER<MsgSC_AllowEntryWaitingUser>::Copy(_obj->un.m_msgAllowEntryWaitingUser, *(src.un.m_msgAllowEntryWaitingUser)))
				return false;
			break;
		case PayloadSC::msgAllWaitingUserDataNtf_Tag: 
			_obj->un.m_msgAllWaitingUserDataNtf = new MsgSC_AllWaitingUserDataNtf;
			if(!BER<MsgSC_AllWaitingUserDataNtf>::Copy(_obj->un.m_msgAllWaitingUserDataNtf, *(src.un.m_msgAllWaitingUserDataNtf)))
				return false;
			break;
		case PayloadSC::msgUserDataChangeNtf_Tag: 
			_obj->un.m_msgUserDataChangeNtf = new MsgSC_UserDataChangeNtf;
			if(!BER<MsgSC_UserDataChangeNtf>::Copy(_obj->un.m_msgUserDataChangeNtf, *(src.un.m_msgUserDataChangeNtf)))
				return false;
			break;
		case PayloadSC::msgRefillMoneyNtf_Tag: 
			_obj->un.m_msgRefillMoneyNtf = new MsgSC_RefillMoneyNtf;
			if(!BER<MsgSC_RefillMoneyNtf>::Copy(_obj->un.m_msgRefillMoneyNtf, *(src.un.m_msgRefillMoneyNtf)))
				return false;
			break;
		case PayloadSC::msgJackpotMoneyNtf_Tag: 
			_obj->un.m_msgJackpotMoneyNtf = new MsgSC_JackpotMoneyNtf;
			if(!BER<MsgSC_JackpotMoneyNtf>::Copy(_obj->un.m_msgJackpotMoneyNtf, *(src.un.m_msgJackpotMoneyNtf)))
				return false;
			break;
		case PayloadSC::msgRuleNotify_Tag: 
			_obj->un.m_msgRuleNotify = new MsgSC_RuleNotify;
			if(!BER<MsgSC_RuleNotify>::Copy(_obj->un.m_msgRuleNotify, *(src.un.m_msgRuleNotify)))
				return false;
			break;
		case PayloadSC::msgGuardianAngelMoney_Tag: 
			_obj->un.m_msgGuardianAngelMoney = new MsgSC_GuardianAngelMoney;
			if(!BER<MsgSC_GuardianAngelMoney>::Copy(_obj->un.m_msgGuardianAngelMoney, *(src.un.m_msgGuardianAngelMoney)))
				return false;
			break;
		case PayloadSC::msgGameMasterCallNtf_Tag: 
			_obj->un.m_msgGameMasterCallNtf = new MsgSC_GameMasterCallNtf;
			if(!BER<MsgSC_GameMasterCallNtf>::Copy(_obj->un.m_msgGameMasterCallNtf, *(src.un.m_msgGameMasterCallNtf)))
				return false;
			break;
		case PayloadSC::msgObserverCnt_Tag: 
			_obj->un.m_msgObserverCnt = new MsgSC_ObserverCnt;
			if(!BER<MsgSC_ObserverCnt>::Copy(_obj->un.m_msgObserverCnt, *(src.un.m_msgObserverCnt)))
				return false;
			break;
		case PayloadSC::msgBonus_Tag: 
			_obj->un.m_msgBonus = new MsgSC_Bonus;
			if(!BER<MsgSC_Bonus>::Copy(_obj->un.m_msgBonus, *(src.un.m_msgBonus)))
				return false;
			break;
		case PayloadSC::msgPoliceNotify_Tag: 
			_obj->un.m_msgPoliceNotify = new MsgSC_PoliceNotify;
			if(!BER<MsgSC_PoliceNotify>::Copy(_obj->un.m_msgPoliceNotify, *(src.un.m_msgPoliceNotify)))
				return false;
			break;
		default:
			return false;
		}
		return true;
	}
};

};

#endif //!
