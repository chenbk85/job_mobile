//
// GameUser_Poker: generated by XADL compiler 1.1 , 2011.8.24 16:38:0
//

#ifndef ADLGAMEUSER_POKER_H
#define ADLGAMEUSER_POKER_H

#include "stdafx.h"

#include "../../protobuf/gameLogic.pb.h"
#include "AdlGameCommon.h"

//#include "../../PK_Plugin_Connection.h"

namespace adl { // start of namesapce

#ifndef _Poker
#include "xadldefine.h"
#endif

enum{
	EMPTY_USER=-1,
};


class UserInfo// : public PKUserInfo
{

	public:
	void Clear()
	{
		m_lUSN=EMPTY_USER;
		m_nIndex=-1;
		m_sNickName.clear();
		m_sID.clear();
		m_lCLevel=0;
		m_lSoundType=0;
		m_sAvt.clear();
		m_lUserState=0;
		m_cWinLose.Clear();
		m_cWinLose_Today.Clear();
		m_cWinLose_Room.Clear();
		m_llCMoney=0;
		m_llFMoney=0;
		m_lExit=0;
		m_nItemType=0; //1:러브 2:드림 3:클럽 4:골드	
		m_lAck=0;
		m_lJackpot=0;
		m_lDieCardsDealt=0;
 	}
 	long IsUser(long lUSN){ return (m_lUSN==lUSN); }
 	long IsUser(){ return (m_lUSN>=0); }
	long IsEmpty(){ return (m_lUSN<0); }
	long IsAck(){ return (0!=m_lAck); }
	long IsAck(long lAck){ return (lAck==m_lAck); }
	void SetAck(long lAck){ m_lAck=lAck; }
	LONG	m_lUSN;
	int	m_nIndex;
	std::string	m_sNickName;
	std::string	m_sID;
	LONG	m_lCLevel;
	LONG	m_lSoundType;
	std::string	m_sAvt;
	LONG	m_lUserState;
	CWinLose	m_cWinLose;
	CWinLose	m_cWinLose_Today;
	CWinLose	m_cWinLose_Room;
	LONGLONG	m_llCMoney;
	LONGLONG	m_llFMoney;
	LONG	m_lExit;
	int	m_nItemType;
	LONG	m_lAck;
	LONG	m_lJackpot;
	LONG	m_lDieCardsDealt;
};

#define UITable_Ctor

class UITable : public vector<UserInfo>, public PKUITable
{

public:
	UITable(){Clear();}
	void Init(int nSize=MAX_PLAYER_COUNT){
		if(0 >= nSize) return;
		clear();
		for(int i=0; i<nSize; ++i){
			UserInfo ui;
			ui.Clear();
			push_back(ui);
		}
	}
	virtual void Clear(){
		for(int i=0; i<(int)size(); ++i)
			at(i).Clear();
	}
	UserInfo& GetUI(int idx){ return at(idx); }
	const UserInfo& GetUI(int idx) const { return at(idx); }
	void SetAck(long lUSN, long lAck){
		for(int i=0; i<(int)size(); ++i){
			if(true==at(i).IsUser(lUSN)){
				at(i).SetAck(lAck);
				return;
			}
		}		
	}
	void SetAck(long lAck){
		for(int i=0; i<(int)size(); ++i){
			if(at(i).IsEmpty()){
				at(i).SetAck(0);
				continue;
			}
			if(at(i).m_lUserState==USERSTATE_SELECTBEGIN || at(i).m_lUserState==USERSTATE_SELECTEND ||at(i).m_lUserState==USERSTATE_PLAYING || at(i).m_lUserState == USERSTATE_SELECTCONTINUE){
				at(i).SetAck(lAck);
			}
		}
	}
	long IsAck(void){
		for(int i=0; i<(int)size(); ++i){
			if(at(i).IsAck()){
				return true;
			}
		}
		return false;
	}
};

/*

class UserInfo {
	long lUSN;
	int	nIndex;
	string sNickName;
	long lCLevel;
	long lSex;
	long lSoundType;
	string sAvt;
	int nAvtType;
	long lUserState;
	CWinLose cWinLose_Room;
	LONGLONG llCMoney;
	LONGLONG llFMoney;
	long lExit;
//	long lDieCardsDealt;
	long lDisCnt;
	int	nItemType;	
	long lFourCardCnt;
	long lStraightFlushCnt;
	long lRoyalStraightFlushCnt;
	long lDieCardsDealt;
	public:
	void Clear()
	{
		m_lUSN=EMPTY_USER;
		m_nIndex=-1;
		m_sNickName.clear();
		m_lCLevel=0;
		m_lSex=-1;
		m_lSoundType=0;
		m_sAvt.clear();
		m_nAvtType=0;
		m_lUserState=0;
		m_cWinLose_Today.Clear();
		m_llCMoney=0;
		m_llFMoney=0;
		m_lExit=0;
		m_lDieCardsDealt=0;
		m_lDisCnt=0;
		m_nItemType=0; //1:러브 2:드림 3:클럽 4:골드	
		m_lFourCardCnt=0;
		m_lStraightFlushCnt=0;
		m_lRoyalStraightFlushCnt=0;
		m_lDieCardsDealt=0;
 	}
 	long IsUser(){ return (m_lUSN>=0); }
	long IsEmpty(){ return (m_lUSN<0); }
};

class RCUser {	
	long lUSN;
	int nIndex;
	string sNickName;
	long lCLevel;
	long lSex;
	long lWin;
	long lLose;
	LONGLONG llCMoney;
	LONGLONG llFMoney;
	long lDisCnt;
	CGamePlayTime cGamePlayTime;
	int nAnllInCnt;
	LONGLONG llLastAllInDate;
	CWinLose cWinLose_Room;
	LONGLONG llTodayMoney;
	int nReserve01;
	int nReserve02;
	CRefill cRefill;
	int nSafeGrade;
	LONGLONG llSafeMoney;
	int nAllInAgain;
	LONGLONG llPlayDayTime;
	string sAvt;
	int nAvtType;
	ItemList ItemList;
	long lFourCardCnt;
	long lStraightFlushCnt;
	long lRoyalStraightFlushCnt;
public:
	void Clear()
	{
		m_lUSN=EMPTY_USER;
		m_nIndex=-1;
		m_sNickName.clear();
		m_lCLevel=0;
		m_lSex=0;
		m_lWin=0;
		m_lLose=0;
		m_llCMoney=0;
		m_llFMoney=0;
		m_lDisCnt=0;
		m_cGamePlayTime.Clear();
		m_nAnllInCnt=0;
		m_llLastAllInDate=0;
		m_cWinLose_Today.Clear();
		m_llTodayMoney=0;
		m_nReserve01=0;
		m_nReserve02=0;
		m_cRefill.Clear();
		m_nSafeGrade=0;
		m_llSafeMoney=0;
		m_nAllInAgain=0;
		m_llPlayDayTime=0;
		m_sAvt.clear();
		m_nAvtType=0;
		m_ItemList.Clear();		
		m_lFourCardCnt=0;
		m_lStraightFlushCnt=0;
		m_lRoyalStraightFlushCnt=0;
	}
#ifndef _UNIX
	void SetItem(string & sReservedString4){ m_ItemList.SetItem(sReservedString4); }	
	long IsItem(long lFucnsrl){ return m_ItemList.IsItem(lFucnsrl); }
	LONGLONG GetEndTime(long lFucnsrl){return m_ItemList.GetEndTime(lFucnsrl); }
	LONGLONG GetCount(long lFucnsrl){ return m_ItemList.GetCount(lFucnsrl); }
	long GetCount_long(long lFucnsrl){ return m_ItemList.GetCount_long(lFucnsrl); }
#endif
};
/**/


class RCUser : public PKRCUser
{

public:
	void Clear()
	{
		m_lUSN=EMPTY_USER;
		m_lJumin=0;
		m_lFirstUSN=0;
		m_lAgeIndex=0;
		m_lJobIndex=0;
		m_lRegionIndex=0;
		m_lGuildIndex=0;
		m_lMemberIndex=0;
		m_lClientIP=0;
		m_lGatewayIP=0;
		m_lMacAddress=0;
		m_sMobileInfo.clear();
		m_sAuthKey.clear();
		m_sUserGameData.clear();	
		m_nIndex=-1;
		m_sNickName.clear();
		m_sUserID.clear();
		m_sAvt.clear();
		m_lCLevel=0;
		m_lSex=0;
		m_llCMoney=0;
		m_llFMoney=0;
		m_llSafeMoney=0;
		m_llPlastAllinDate=0;
		m_llPlastLogonDay=0;
		m_lMTodayPlayCount=0;
		m_lMTodayPlayTime=0;
		m_lPTotalPlayCount=0;
		m_cRefill.Clear();
		m_llPExtMoney=0;
		m_llPExtendDate=0;
		m_llPBonusDate=0;
		m_lMMonthPlayCount=0;
		m_lMMonthPlayTime=0;
		m_cWinLose.Clear();
		m_lGDisCnt=0;
		m_llGlastLogonDay=0;
		m_llGRegDate=0;
		m_llGFirstPlayDate=0;
		m_lGTodayPlayCount=0;
		m_lGTodayPlayTime=0;
		m_lGTotalPlayCount=0;
		m_lGTotalPlayTime=0;
		m_lGAllinCnt=0;
		m_lGAllinOut=0;
		m_llGLastAllinDate=0;
		m_cWinLose_Today.Clear();
		m_llGTodayMoney=0;
		m_lFourCardCnt=0;
		m_lStraightFlushCnt=0;
		m_lRoyalStraightFlushCnt=0;
		m_nReserve01=0;
		m_nReserve02=0;
		m_ItemList.Clear();
		m_llJoinDate=0;
		m_llPlayDate=0;
	}
#ifndef _UNIX
	void SetItem(string & sReservedString4){ m_ItemList.SetItem(sReservedString4); }	
	long IsItem(long lFucnsrl){ return m_ItemList.IsItem(lFucnsrl); }
	LONGLONG GetEndTime(long lFucnsrl){return m_ItemList.GetEndTime(lFucnsrl); }
	LONGLONG GetCount(long lFucnsrl){ return m_ItemList.GetCount(lFucnsrl); }
	long GetCount_long(long lFucnsrl){ return m_ItemList.GetCount_long(lFucnsrl); }
#endif
	long IsPlayDiffDay(LONGLONG lCurrentTime){
		if((lCurrentTime/1000000)>(m_llPlayDate/1000000)){
			m_lGTotalPlayCount=1;
			m_llPlayDate=lCurrentTime;
			return true;
		}
		m_lGTotalPlayCount++;
		m_llPlayDate=lCurrentTime;
		return false;
	}
	long IsLogonDiffDay(LONGLONG lCurrentTime){
		if((lCurrentTime/1000000)>(m_llPlastLogonDay/1000000)){
			m_llJoinDate=lCurrentTime;
			return true;
		}
		m_llJoinDate=lCurrentTime;
		return false;
	}
	void AddPlayCount(){
		m_lMTodayPlayCount++;
		m_lPTotalPlayCount++;
		m_lGTodayPlayCount++;
		m_lGTotalPlayCount++;
		m_lMMonthPlayCount++;
	}
	void AddFourCard(){ m_lFourCardCnt++; }
	void AddStraightFlush(){ m_lStraightFlushCnt++; }
	void AddRoyalStraightFlush(){ m_lRoyalStraightFlushCnt++; }
	void AddAllInCnt(){ m_lGAllinCnt++; }
	void AddAllInOutCnt(){ m_lGAllinOut++; }
	void AddDisCnt(){ m_lGDisCnt++; }
	LONG	m_lUSN;
	LONG	m_lJumin;
	LONG	m_lFirstUSN;
	LONG	m_lAgeIndex;
	LONG	m_lJobIndex;
	LONG	m_lRegionIndex;
	LONG	m_lGuildIndex;
	LONG	m_lMemberIndex;
	LONG	m_lClientIP;
	LONG	m_lGatewayIP;
	LONG	m_lMacAddress;
	std::string	m_sMobileInfo;
	std::string	m_sAuthKey;
	std::string	m_sUserGameData;
	int	m_nIndex;
	std::string	m_sNickName;
	std::string	m_sUserID;
	std::string	m_sAvt;
	LONG	m_lCLevel;
	LONG	m_lSex;
	LONGLONG	m_llCMoney;
	LONGLONG	m_llFMoney;
	LONGLONG	m_llSafeMoney;
	LONGLONG	m_llPlastAllinDate;
	LONGLONG	m_llPlastLogonDay;
	LONG	m_lMTodayPlayCount;
	LONG	m_lMTodayPlayTime;
	LONG	m_lPTotalPlayCount;
	CRefill	m_cRefill;
	LONGLONG	m_llPExtMoney;
	LONGLONG	m_llPExtendDate;
	LONGLONG	m_llPBonusDate;
	LONG	m_lMMonthPlayCount;
	LONG	m_lMMonthPlayTime;
	CWinLose	m_cWinLose;
	LONG	m_lGDisCnt;
	LONGLONG	m_llGlastLogonDay;
	LONGLONG	m_llGRegDate;
	LONGLONG	m_llGFirstPlayDate;
	LONG	m_lGTodayPlayCount;
	LONG	m_lGTodayPlayTime;
	LONG	m_lGTotalPlayCount;
	LONG	m_lGTotalPlayTime;
	LONG	m_lGAllinCnt;
	LONG	m_lGAllinOut;
	LONGLONG	m_llGLastAllinDate;
	CWinLose	m_cWinLose_Today;
	LONGLONG	m_llGTodayMoney;
	LONG	m_lFourCardCnt;
	LONG	m_lStraightFlushCnt;
	LONG	m_lRoyalStraightFlushCnt;
	int	m_nReserve01;
	int	m_nReserve02;
	ItemList	m_ItemList;
	LONGLONG	m_llJoinDate;
	LONGLONG	m_llPlayDate;

	PK_Plugin_Connection *m_pCon;
};

typedef vector<RCUser> RCUserList;

///////////////////////////////////////////////////////////////////////////////
// RCUserData
///////////////////////////////////////////////////////////////////////////////

class RCUserData : public vector<RCUser>, public PKRCUserData
{

public:
	void Clear(){
		clear();
	}
	long AddUser(const RCUser& us){
		RemoveUser(us.m_lUSN);
		push_back(us);
		return true;
	}
	long RemoveUser(long lUSN){
		int nTotal=(int)size();
		for(int i=0; i<nTotal; i++){
			if((*this)[i].m_lUSN==lUSN){
				erase(this->begin()+i);
				return true;
			}
		}
		//ForEachElmt(RCUserList, (*this), i, j){
		//	if(i->m_lUSN==lUSN){
		//		erase(i);
		//		return true;
		//	}
		//}
		return false;
	}
	RCUser* FindUser(long lUSN){
		int nTotal=(int)size();
		for(int i=0; i<nTotal; i++){
			if((*this)[i].m_lUSN==lUSN){
				return &((*this)[i]);
			}
		}
		//ForEachElmt(RCUserList, (*this), i, j){
		//	if ((*i).m_lUSN==lUSN){
		//		return (&(*i));
		//	}
		//}
		return NULL;
	}
	int GetIndex(long lUSN){
		int nTotal=(int)size();
		for(int i=0; i<nTotal; i++){
			if((*this)[i].m_lUSN==lUSN){
				return (*this)[i].m_nIndex;
			}
		}
		//ForEachElmt(RCUserList, (*this), i, j){
		//	if ((*i).m_lUSN==lUSN){
		//		return (*i).m_nIndex;
		//	}
		//}
		return -1;
	}
	long ExistUser(){ return (size()!=0); }
	int GetTotalUser(){
		return (int)size();
	}
};
}; // end of namespace : adl
#endif //!
