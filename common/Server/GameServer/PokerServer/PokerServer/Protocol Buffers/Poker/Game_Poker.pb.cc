// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include <stdafx.h>

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game_Poker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Game_Poker {

namespace {

const ::google::protobuf::Descriptor* _Cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _Cards_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* _Cards_state_descriptor_ = NULL;
const ::google::protobuf::Descriptor* _Money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _Money_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* _CWinLose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _CWinLose_reflection_ = NULL;
const ::google::protobuf::Descriptor* _UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* _OneCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _OneCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* _VecMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _VecMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* _WinLoseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _WinLoseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* _VecUSN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _VecUSN_reflection_ = NULL;
const ::google::protobuf::Descriptor* _WAITINGUSERDATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _WAITINGUSERDATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRefill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRefill_reflection_ = NULL;
const ::google::protobuf::Descriptor* _ItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _ItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* _Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* _RCUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _RCUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* _RCUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _RCUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* _Option_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _Option_reflection_ = NULL;
const ::google::protobuf::Descriptor* _BettingMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _BettingMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* _BettingMsgTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _BettingMsgTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MoneyTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MoneyTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* _CardTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _CardTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* _UITable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _UITable_reflection_ = NULL;
const ::google::protobuf::Descriptor* _RCRoomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _RCRoomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* _SPUserBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _SPUserBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_Observe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_Observe_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_Start_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_SelectedCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_SelectedCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_BettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_BettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_ChoiceRemoveCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_ChoiceRemoveCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_Purge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_Purge_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_Abuse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_Abuse_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_AskPurgeVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_AskPurgeVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_AnswerPurgeVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_AnswerPurgeVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_WaitingUserTicketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_WaitingUserTicketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_UpdateWaitingUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_UpdateWaitingUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_SoundType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_SoundType_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_ExitQue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_ExitQue_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_Continue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_Continue_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_RuleSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_RuleSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_GameMasterCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_GameMasterCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_FieldReserved_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_FieldReserved_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_JokboSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_JokboSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_TestKeySetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_TestKeySetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_CheckNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_CheckNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_Ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgCS_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgCS_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_UserJoinAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_UserJoinAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_UserJoinErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_UserJoinErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_UserDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_UserDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_CardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_CardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_EntryAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_EntryAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_EntryReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_EntryReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_ObserveAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_ObserveAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_StartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_StartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_StartAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_StartAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_NoStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_NoStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_DealCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_DealCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_SelectedCardAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_SelectedCardAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_DealOpenCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_DealOpenCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_DealCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_DealCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_Boss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_Boss_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_Betting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_Betting_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_BettingAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_BettingAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_BettingAnsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_BettingAnsMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_DealHiddenCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_DealHiddenCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_AnteMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_AnteMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_RuleQuaterHalf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_RuleQuaterHalf_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_Finished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_Finished_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_NewGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_NewGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_ContinueAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_ContinueAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_Continue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_Continue_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_SystemMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_SystemMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_PurgeAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_PurgeAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_PurgeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_PurgeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_SetPurgeMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_SetPurgeMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_AssaItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_AssaItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_ThankYouItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_ThankYouItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_MadeItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_MadeItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_ExtMoneyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_ExtMoneyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_GameEndSystemMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_GameEndSystemMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_ChangeAvatarNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_ChangeAvatarNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_AbuseAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_AbuseAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_SoundTypeAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_SoundTypeAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_FMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_FMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_ItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_ItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_DisconnectMoneyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_DisconnectMoneyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_ExitNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_ExitNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_RematchOKAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_RematchOKAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_RuleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_RuleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_AllowEntryWaitingUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_AllowEntryWaitingUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_AllWaitingUserDataNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_AllWaitingUserDataNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_UserDataChangeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_UserDataChangeNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_RefillMoneyNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_RefillMoneyNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_JackpotMoneyNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_JackpotMoneyNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_GuardianAngelMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_GuardianAngelMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_GameMasterCallNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_GameMasterCallNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_ObserverCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_ObserverCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_Bonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_Bonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* _MsgSC_PoliceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  _MsgSC_PoliceNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Game_5fPoker_2eproto() {
  protobuf_AddDesc_Game_5fPoker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Game_Poker.proto");
  GOOGLE_CHECK(file != NULL);
  _Cards_descriptor_ = file->message_type(0);
  static const int _Cards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Cards, m_vtcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Cards, m_lresultidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Cards, m_vuserusn_),
  };
  _Cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _Cards_descriptor_,
      _Cards::default_instance_,
      _Cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_Cards));
  _Cards_state_descriptor_ = _Cards_descriptor_->enum_type(0);
  _Money_descriptor_ = file->message_type(1);
  static const int _Money_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_llcmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_llcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_llsidemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_llcallhabmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_lltakemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_lljackpotmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_lbetstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_lbetreceive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_lbetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_lresultidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, m_smoneymsg_),
  };
  _Money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _Money_descriptor_,
      _Money::default_instance_,
      _Money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_Money));
  UserMoney_descriptor_ = file->message_type(2);
  static const int UserMoney_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_llmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_llcallhabmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_lltakemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_lldealmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, m_sdealertax_),
  };
  UserMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMoney_descriptor_,
      UserMoney::default_instance_,
      UserMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMoney));
  _CWinLose_descriptor_ = file->message_type(3);
  static const int _CWinLose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_CWinLose, m_lwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_CWinLose, m_llose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_CWinLose, m_lcontinue_),
  };
  _CWinLose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _CWinLose_descriptor_,
      _CWinLose::default_instance_,
      _CWinLose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_CWinLose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_CWinLose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_CWinLose));
  _UserInfo_descriptor_ = file->message_type(4);
  static const int _UserInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_lclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_lsoundtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_savt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_luserstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_cwinlose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_cwinlose_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_cwinlose_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_llcmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_llfmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_lexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_nitemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_lack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_ljackpot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, m_ldiecardsdealt_),
  };
  _UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _UserInfo_descriptor_,
      _UserInfo::default_instance_,
      _UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_UserInfo));
  _OneCard_descriptor_ = file->message_type(5);
  static const int _OneCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_OneCard, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_OneCard, m_lcardindex_),
  };
  _OneCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _OneCard_descriptor_,
      _OneCard::default_instance_,
      _OneCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_OneCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_OneCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_OneCard));
  _VecMoney_descriptor_ = file->message_type(6);
  static const int _VecMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_VecMoney, vecmoney_),
  };
  _VecMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _VecMoney_descriptor_,
      _VecMoney::default_instance_,
      _VecMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_VecMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_VecMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_VecMoney));
  _WinLoseInfo_descriptor_ = file->message_type(7);
  static const int _WinLoseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WinLoseInfo, m_llcmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WinLoseInfo, m_lwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WinLoseInfo, m_llose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WinLoseInfo, m_lreserved_),
  };
  _WinLoseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _WinLoseInfo_descriptor_,
      _WinLoseInfo::default_instance_,
      _WinLoseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WinLoseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WinLoseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_WinLoseInfo));
  _VecUSN_descriptor_ = file->message_type(8);
  static const int _VecUSN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_VecUSN, usn_),
  };
  _VecUSN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _VecUSN_descriptor_,
      _VecUSN::default_instance_,
      _VecUSN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_VecUSN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_VecUSN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_VecUSN));
  _WAITINGUSERDATA_descriptor_ = file->message_type(9);
  static const int _WAITINGUSERDATA_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WAITINGUSERDATA, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WAITINGUSERDATA, m_lticketnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WAITINGUSERDATA, m_lbackcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WAITINGUSERDATA, m_bcallweb_),
  };
  _WAITINGUSERDATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _WAITINGUSERDATA_descriptor_,
      _WAITINGUSERDATA::default_instance_,
      _WAITINGUSERDATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WAITINGUSERDATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_WAITINGUSERDATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_WAITINGUSERDATA));
  CRefill_descriptor_ = file->message_type(10);
  static const int CRefill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRefill, m_lltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRefill, m_ncnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRefill, m_lplevel_),
  };
  CRefill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRefill_descriptor_,
      CRefill::default_instance_,
      CRefill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRefill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRefill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRefill));
  _ItemList_descriptor_ = file->message_type(11);
  static const int _ItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_ItemList, m_lstitem_),
  };
  _ItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _ItemList_descriptor_,
      _ItemList::default_instance_,
      _ItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_ItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_ItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_ItemList));
  _Item_descriptor_ = file->message_type(12);
  static const int _Item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Item, m_lfucnsrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Item, m_llstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Item, m_llendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Item, m_llcount_),
  };
  _Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _Item_descriptor_,
      _Item::default_instance_,
      _Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_Item));
  _RCUser_descriptor_ = file->message_type(13);
  static const int _RCUser_offsets_[56] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_ljumin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lfirstusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lageindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_ljobindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lregionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lguildindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lmemberindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lclientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lgatewayip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lmacaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_smobileinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_sauthkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_susergamedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_suserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_savt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lsex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llcmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llfmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llsafemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llplastallindate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llplastlogonday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lmtodayplaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lmtodayplaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lptotalplaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_crefill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llpextmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llpextenddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llpbonusdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lmmonthplaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lmmonthplaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_cwinlose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lgdiscnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llglastlogonday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llgregdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llgfirstplaydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lgtodayplaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lgtodayplaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lgtotalplaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lgtotalplaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lgallincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lgallinout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llglastallindate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_cwinlose_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llgtodaymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lfourcardcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lstraightflushcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lroyalstraightflushcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_nreserve01_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_nreserve02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_lljoindate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, m_llplaydate_),
  };
  _RCUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _RCUser_descriptor_,
      _RCUser::default_instance_,
      _RCUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_RCUser));
  _RCUserData_descriptor_ = file->message_type(14);
  static const int _RCUserData_offsets_[1] = {
  };
  _RCUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _RCUserData_descriptor_,
      _RCUserData::default_instance_,
      _RCUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_RCUserData));
  _Option_descriptor_ = file->message_type(15);
  static const int _Option_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_sroomtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_spassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lmaxusercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lmaxplayerusercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lmaxplayercardcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lchoicemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lroomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lbetrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lbettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_laddrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lrematchjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_llimitmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_llgameantemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_becho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lmakeusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_lchannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, m_llantemoney_),
  };
  _Option_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _Option_descriptor_,
      _Option::default_instance_,
      _Option_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_Option, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_Option));
  _BettingMsg_descriptor_ = file->message_type(16);
  static const int _BettingMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, m_bettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, m_bbettingmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, m_bmoneylack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, m_bcallmoneyzero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, m_llcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, m_llraisemoney_),
  };
  _BettingMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _BettingMsg_descriptor_,
      _BettingMsg::default_instance_,
      _BettingMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_BettingMsg));
  _BettingMsgTable_descriptor_ = file->message_type(17);
  static const int _BettingMsgTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsgTable, bettingmsgtable_),
  };
  _BettingMsgTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _BettingMsgTable_descriptor_,
      _BettingMsgTable::default_instance_,
      _BettingMsgTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsgTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_BettingMsgTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_BettingMsgTable));
  _MoneyTable_descriptor_ = file->message_type(18);
  static const int _MoneyTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MoneyTable, moneytable_),
  };
  _MoneyTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MoneyTable_descriptor_,
      _MoneyTable::default_instance_,
      _MoneyTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MoneyTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MoneyTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MoneyTable));
  _CardTable_descriptor_ = file->message_type(19);
  static const int _CardTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_CardTable, cardtable_),
  };
  _CardTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _CardTable_descriptor_,
      _CardTable::default_instance_,
      _CardTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_CardTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_CardTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_CardTable));
  _UITable_descriptor_ = file->message_type(20);
  static const int _UITable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UITable, uitable_),
  };
  _UITable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _UITable_descriptor_,
      _UITable::default_instance_,
      _UITable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UITable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_UITable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_UITable));
  _RCRoomData_descriptor_ = file->message_type(21);
  static const int _RCRoomData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, m_lgamemaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, m_lroomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, m_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, m_tblui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, m_tblbettingmsg_),
  };
  _RCRoomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _RCRoomData_descriptor_,
      _RCRoomData::default_instance_,
      _RCRoomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_RCRoomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_RCRoomData));
  _SPUserBaseInfo_descriptor_ = file->message_type(22);
  static const int _SPUserBaseInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_suserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lusc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_ljumin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lfirstusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lageindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_ljobindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lregionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lguildindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lmemberindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lclientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lgatewayip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_lmacaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_smobileinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, m_sauthkey_),
  };
  _SPUserBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _SPUserBaseInfo_descriptor_,
      _SPUserBaseInfo::default_instance_,
      _SPUserBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_SPUserBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_SPUserBaseInfo));
  _MsgCS_Entry_descriptor_ = file->message_type(23);
  static const int _MsgCS_Entry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, m_nversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, m_bwelcomesound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, m_lsoundtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, m_savt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, m_lclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, m_lsex_),
  };
  _MsgCS_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_Entry_descriptor_,
      _MsgCS_Entry::default_instance_,
      _MsgCS_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_Entry));
  _MsgCS_Observe_descriptor_ = file->message_type(24);
  static const int _MsgCS_Observe_offsets_[1] = {
  };
  _MsgCS_Observe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_Observe_descriptor_,
      _MsgCS_Observe::default_instance_,
      _MsgCS_Observe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Observe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Observe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_Observe));
  _MsgCS_Start_descriptor_ = file->message_type(25);
  static const int _MsgCS_Start_offsets_[1] = {
  };
  _MsgCS_Start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_Start_descriptor_,
      _MsgCS_Start::default_instance_,
      _MsgCS_Start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_Start));
  _MsgCS_SelectedCardReq_descriptor_ = file->message_type(26);
  static const int _MsgCS_SelectedCardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_SelectedCardReq, m_lcardidx_),
  };
  _MsgCS_SelectedCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_SelectedCardReq_descriptor_,
      _MsgCS_SelectedCardReq::default_instance_,
      _MsgCS_SelectedCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_SelectedCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_SelectedCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_SelectedCardReq));
  _MsgCS_BettingReq_descriptor_ = file->message_type(27);
  static const int _MsgCS_BettingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_BettingReq, m_lbettype_),
  };
  _MsgCS_BettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_BettingReq_descriptor_,
      _MsgCS_BettingReq::default_instance_,
      _MsgCS_BettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_BettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_BettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_BettingReq));
  _MsgCS_ChoiceRemoveCard_descriptor_ = file->message_type(28);
  static const int _MsgCS_ChoiceRemoveCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_ChoiceRemoveCard, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_ChoiceRemoveCard, m_nremovecardindex_),
  };
  _MsgCS_ChoiceRemoveCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_ChoiceRemoveCard_descriptor_,
      _MsgCS_ChoiceRemoveCard::default_instance_,
      _MsgCS_ChoiceRemoveCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_ChoiceRemoveCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_ChoiceRemoveCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_ChoiceRemoveCard));
  _MsgCS_Purge_descriptor_ = file->message_type(29);
  static const int _MsgCS_Purge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Purge, m_ltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Purge, m_lpurgeusn_),
  };
  _MsgCS_Purge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_Purge_descriptor_,
      _MsgCS_Purge::default_instance_,
      _MsgCS_Purge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Purge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Purge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_Purge));
  _MsgCS_Abuse_descriptor_ = file->message_type(30);
  static const int _MsgCS_Abuse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Abuse, m_ltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Abuse, m_sday_),
  };
  _MsgCS_Abuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_Abuse_descriptor_,
      _MsgCS_Abuse::default_instance_,
      _MsgCS_Abuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Abuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Abuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_Abuse));
  _MsgCS_AskPurgeVote_descriptor_ = file->message_type(31);
  static const int _MsgCS_AskPurgeVote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_AskPurgeVote, m_lpurgeusn_),
  };
  _MsgCS_AskPurgeVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_AskPurgeVote_descriptor_,
      _MsgCS_AskPurgeVote::default_instance_,
      _MsgCS_AskPurgeVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_AskPurgeVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_AskPurgeVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_AskPurgeVote));
  _MsgCS_AnswerPurgeVote_descriptor_ = file->message_type(32);
  static const int _MsgCS_AnswerPurgeVote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_AnswerPurgeVote, m_lanswer_),
  };
  _MsgCS_AnswerPurgeVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_AnswerPurgeVote_descriptor_,
      _MsgCS_AnswerPurgeVote::default_instance_,
      _MsgCS_AnswerPurgeVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_AnswerPurgeVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_AnswerPurgeVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_AnswerPurgeVote));
  _MsgCS_WaitingUserTicketReq_descriptor_ = file->message_type(33);
  static const int _MsgCS_WaitingUserTicketReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_WaitingUserTicketReq, m_ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_WaitingUserTicketReq, m_bvalue_),
  };
  _MsgCS_WaitingUserTicketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_WaitingUserTicketReq_descriptor_,
      _MsgCS_WaitingUserTicketReq::default_instance_,
      _MsgCS_WaitingUserTicketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_WaitingUserTicketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_WaitingUserTicketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_WaitingUserTicketReq));
  _MsgCS_UpdateWaitingUserInfoReq_descriptor_ = file->message_type(34);
  static const int _MsgCS_UpdateWaitingUserInfoReq_offsets_[1] = {
  };
  _MsgCS_UpdateWaitingUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_UpdateWaitingUserInfoReq_descriptor_,
      _MsgCS_UpdateWaitingUserInfoReq::default_instance_,
      _MsgCS_UpdateWaitingUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_UpdateWaitingUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_UpdateWaitingUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_UpdateWaitingUserInfoReq));
  _MsgCS_SoundType_descriptor_ = file->message_type(35);
  static const int _MsgCS_SoundType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_SoundType, m_lsoundtype_),
  };
  _MsgCS_SoundType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_SoundType_descriptor_,
      _MsgCS_SoundType::default_instance_,
      _MsgCS_SoundType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_SoundType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_SoundType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_SoundType));
  _MsgCS_ExitQue_descriptor_ = file->message_type(36);
  static const int _MsgCS_ExitQue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_ExitQue, m_lexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_ExitQue, m_baction_),
  };
  _MsgCS_ExitQue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_ExitQue_descriptor_,
      _MsgCS_ExitQue::default_instance_,
      _MsgCS_ExitQue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_ExitQue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_ExitQue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_ExitQue));
  _MsgCS_Continue_descriptor_ = file->message_type(37);
  static const int _MsgCS_Continue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Continue, m_lexit_),
  };
  _MsgCS_Continue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_Continue_descriptor_,
      _MsgCS_Continue::default_instance_,
      _MsgCS_Continue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Continue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Continue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_Continue));
  _MsgCS_RuleSet_descriptor_ = file->message_type(38);
  static const int _MsgCS_RuleSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_RuleSet, m_nruleidx_),
  };
  _MsgCS_RuleSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_RuleSet_descriptor_,
      _MsgCS_RuleSet::default_instance_,
      _MsgCS_RuleSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_RuleSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_RuleSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_RuleSet));
  _MsgCS_GameMasterCall_descriptor_ = file->message_type(39);
  static const int _MsgCS_GameMasterCall_offsets_[1] = {
  };
  _MsgCS_GameMasterCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_GameMasterCall_descriptor_,
      _MsgCS_GameMasterCall::default_instance_,
      _MsgCS_GameMasterCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_GameMasterCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_GameMasterCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_GameMasterCall));
  _MsgCS_FieldReserved_descriptor_ = file->message_type(40);
  static const int _MsgCS_FieldReserved_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_FieldReserved, m_nreserved1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_FieldReserved, m_nreserved2_),
  };
  _MsgCS_FieldReserved_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_FieldReserved_descriptor_,
      _MsgCS_FieldReserved::default_instance_,
      _MsgCS_FieldReserved_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_FieldReserved, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_FieldReserved, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_FieldReserved));
  _MsgCS_JokboSet_descriptor_ = file->message_type(41);
  static const int _MsgCS_JokboSet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_JokboSet, m_lkey1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_JokboSet, m_lkey2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_JokboSet, m_lkey3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_JokboSet, m_lkey4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_JokboSet, m_lkey5_),
  };
  _MsgCS_JokboSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_JokboSet_descriptor_,
      _MsgCS_JokboSet::default_instance_,
      _MsgCS_JokboSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_JokboSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_JokboSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_JokboSet));
  _MsgCS_TestKeySetting_descriptor_ = file->message_type(42);
  static const int _MsgCS_TestKeySetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_TestKeySetting, m_nchar_),
  };
  _MsgCS_TestKeySetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_TestKeySetting_descriptor_,
      _MsgCS_TestKeySetting::default_instance_,
      _MsgCS_TestKeySetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_TestKeySetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_TestKeySetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_TestKeySetting));
  _MsgCS_CheckNotice_descriptor_ = file->message_type(43);
  static const int _MsgCS_CheckNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_CheckNotice, m_ntype_),
  };
  _MsgCS_CheckNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_CheckNotice_descriptor_,
      _MsgCS_CheckNotice::default_instance_,
      _MsgCS_CheckNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_CheckNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_CheckNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_CheckNotice));
  _MsgCS_Ack_descriptor_ = file->message_type(44);
  static const int _MsgCS_Ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Ack, m_ntagid_),
  };
  _MsgCS_Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_Ack_descriptor_,
      _MsgCS_Ack::default_instance_,
      _MsgCS_Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_Ack));
  _MsgCS_Ping_descriptor_ = file->message_type(45);
  static const int _MsgCS_Ping_offsets_[1] = {
  };
  _MsgCS_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgCS_Ping_descriptor_,
      _MsgCS_Ping::default_instance_,
      _MsgCS_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgCS_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgCS_Ping));
  _MsgSC_UserJoinAns_descriptor_ = file->message_type(46);
  static const int _MsgSC_UserJoinAns_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, m_nenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, m_nset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, m_lchannel_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, m_lownerusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, m_nroompurgecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, m_option_),
  };
  _MsgSC_UserJoinAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_UserJoinAns_descriptor_,
      _MsgSC_UserJoinAns::default_instance_,
      _MsgSC_UserJoinAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_UserJoinAns));
  _MsgSC_UserJoinErr_descriptor_ = file->message_type(47);
  static const int _MsgSC_UserJoinErr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinErr, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinErr, m_lerrorcode_),
  };
  _MsgSC_UserJoinErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_UserJoinErr_descriptor_,
      _MsgSC_UserJoinErr::default_instance_,
      _MsgSC_UserJoinErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserJoinErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_UserJoinErr));
  _MsgSC_UserDisconnect_descriptor_ = file->message_type(48);
  static const int _MsgSC_UserDisconnect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDisconnect, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDisconnect, m_uinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDisconnect, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDisconnect, m_lownerusn_),
  };
  _MsgSC_UserDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_UserDisconnect_descriptor_,
      _MsgSC_UserDisconnect::default_instance_,
      _MsgSC_UserDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_UserDisconnect));
  _MsgSC_CardData_descriptor_ = file->message_type(49);
  static const int _MsgSC_CardData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_CardData, m_ndealcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_CardData, m_lcardsdealt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_CardData, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_CardData, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_CardData, m_llpoolmoney_),
  };
  _MsgSC_CardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_CardData_descriptor_,
      _MsgSC_CardData::default_instance_,
      _MsgSC_CardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_CardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_CardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_CardData));
  _MsgSC_EntryAns_descriptor_ = file->message_type(50);
  static const int _MsgSC_EntryAns_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, m_lownerusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, m_tblui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, m_bwelcomesound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, m_lobservecnt_),
  };
  _MsgSC_EntryAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_EntryAns_descriptor_,
      _MsgSC_EntryAns::default_instance_,
      _MsgSC_EntryAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_EntryAns));
  _MsgSC_EntryReject_descriptor_ = file->message_type(51);
  static const int _MsgSC_EntryReject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryReject, m_ltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryReject, m_llcmoney_),
  };
  _MsgSC_EntryReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_EntryReject_descriptor_,
      _MsgSC_EntryReject::default_instance_,
      _MsgSC_EntryReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_EntryReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_EntryReject));
  _MsgSC_ObserveAns_descriptor_ = file->message_type(52);
  static const int _MsgSC_ObserveAns_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserveAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserveAns, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserveAns, m_lownerusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserveAns, m_uinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserveAns, m_money_),
  };
  _MsgSC_ObserveAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_ObserveAns_descriptor_,
      _MsgSC_ObserveAns::default_instance_,
      _MsgSC_ObserveAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserveAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserveAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_ObserveAns));
  _MsgSC_StartReq_descriptor_ = file->message_type(53);
  static const int _MsgSC_StartReq_offsets_[1] = {
  };
  _MsgSC_StartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_StartReq_descriptor_,
      _MsgSC_StartReq::default_instance_,
      _MsgSC_StartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_StartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_StartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_StartReq));
  _MsgSC_StartAns_descriptor_ = file->message_type(54);
  static const int _MsgSC_StartAns_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_StartAns, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_StartAns, m_vtstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_StartAns, m_llsystemtime_),
  };
  _MsgSC_StartAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_StartAns_descriptor_,
      _MsgSC_StartAns::default_instance_,
      _MsgSC_StartAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_StartAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_StartAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_StartAns));
  _MsgSC_NoStart_descriptor_ = file->message_type(55);
  static const int _MsgSC_NoStart_offsets_[1] = {
  };
  _MsgSC_NoStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_NoStart_descriptor_,
      _MsgSC_NoStart::default_instance_,
      _MsgSC_NoStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_NoStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_NoStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_NoStart));
  _MsgSC_DealCards_descriptor_ = file->message_type(56);
  static const int _MsgSC_DealCards_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCards, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCards, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCards, m_ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCards, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCards, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCards, m_llpoolmoney_),
  };
  _MsgSC_DealCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_DealCards_descriptor_,
      _MsgSC_DealCards::default_instance_,
      _MsgSC_DealCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_DealCards));
  _MsgSC_SelectedCardAns_descriptor_ = file->message_type(57);
  static const int _MsgSC_SelectedCardAns_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SelectedCardAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SelectedCardAns, m_nselect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SelectedCardAns, m_lcardindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SelectedCardAns, m_lchoicetype_),
  };
  _MsgSC_SelectedCardAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_SelectedCardAns_descriptor_,
      _MsgSC_SelectedCardAns::default_instance_,
      _MsgSC_SelectedCardAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SelectedCardAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SelectedCardAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_SelectedCardAns));
  _MsgSC_DealOpenCard_descriptor_ = file->message_type(58);
  static const int _MsgSC_DealOpenCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealOpenCard, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealOpenCard, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealOpenCard, m_vtstate_),
  };
  _MsgSC_DealOpenCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_DealOpenCard_descriptor_,
      _MsgSC_DealOpenCard::default_instance_,
      _MsgSC_DealOpenCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealOpenCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealOpenCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_DealOpenCard));
  _MsgSC_DealCard_descriptor_ = file->message_type(59);
  static const int _MsgSC_DealCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCard, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCard, m_ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCard, m_lcardsdealt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCard, m_vtonecard_),
  };
  _MsgSC_DealCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_DealCard_descriptor_,
      _MsgSC_DealCard::default_instance_,
      _MsgSC_DealCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_DealCard));
  _MsgSC_Boss_descriptor_ = file->message_type(60);
  static const int _MsgSC_Boss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Boss, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Boss, m_nbossrank_),
  };
  _MsgSC_Boss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_Boss_descriptor_,
      _MsgSC_Boss::default_instance_,
      _MsgSC_Boss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Boss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Boss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_Boss));
  _MsgSC_Betting_descriptor_ = file->message_type(61);
  static const int _MsgSC_Betting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Betting, m_lbetusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Betting, m_lbetbtntype_),
  };
  _MsgSC_Betting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_Betting_descriptor_,
      _MsgSC_Betting::default_instance_,
      _MsgSC_Betting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Betting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Betting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_Betting));
  _MsgSC_BettingAns_descriptor_ = file->message_type(62);
  static const int _MsgSC_BettingAns_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAns, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAns, m_lbettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAns, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAns, m_vtcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAns, m_lpoolmoney_),
  };
  _MsgSC_BettingAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_BettingAns_descriptor_,
      _MsgSC_BettingAns::default_instance_,
      _MsgSC_BettingAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_BettingAns));
  _MsgSC_BettingAnsMsg_descriptor_ = file->message_type(63);
  static const int _MsgSC_BettingAnsMsg_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_bettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_bbettingmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_bmoneylack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_bcallmoneyzero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_llcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_llraisemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_llsidemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_lbettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_lbetturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_vtcallmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, m_llpoolmoney_),
  };
  _MsgSC_BettingAnsMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_BettingAnsMsg_descriptor_,
      _MsgSC_BettingAnsMsg::default_instance_,
      _MsgSC_BettingAnsMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_BettingAnsMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_BettingAnsMsg));
  _MsgSC_DealHiddenCard_descriptor_ = file->message_type(64);
  static const int _MsgSC_DealHiddenCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealHiddenCard, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealHiddenCard, m_lcardsdealt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealHiddenCard, m_vtonecard_),
  };
  _MsgSC_DealHiddenCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_DealHiddenCard_descriptor_,
      _MsgSC_DealHiddenCard::default_instance_,
      _MsgSC_DealHiddenCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealHiddenCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DealHiddenCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_DealHiddenCard));
  _MsgSC_AnteMoney_descriptor_ = file->message_type(65);
  static const int _MsgSC_AnteMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AnteMoney, m_llantemoney_),
  };
  _MsgSC_AnteMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_AnteMoney_descriptor_,
      _MsgSC_AnteMoney::default_instance_,
      _MsgSC_AnteMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AnteMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AnteMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_AnteMoney));
  _MsgSC_RuleQuaterHalf_descriptor_ = file->message_type(66);
  static const int _MsgSC_RuleQuaterHalf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RuleQuaterHalf, m_llrulequaterhalf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RuleQuaterHalf, m_llpoolmoney_),
  };
  _MsgSC_RuleQuaterHalf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_RuleQuaterHalf_descriptor_,
      _MsgSC_RuleQuaterHalf::default_instance_,
      _MsgSC_RuleQuaterHalf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RuleQuaterHalf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RuleQuaterHalf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_RuleQuaterHalf));
  _MsgSC_Finished_descriptor_ = file->message_type(67);
  static const int _MsgSC_Finished_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_lstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_bgiveup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_lrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_lbossusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_llgivemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_vtwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_vtresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_vtgivemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_tblcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_tblmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_llpoolmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_vtusermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_lresultidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, m_lljackpot_),
  };
  _MsgSC_Finished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_Finished_descriptor_,
      _MsgSC_Finished::default_instance_,
      _MsgSC_Finished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Finished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_Finished));
  _MsgSC_NewGame_descriptor_ = file->message_type(68);
  static const int _MsgSC_NewGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_NewGame, m_vtwinloseinfo_),
  };
  _MsgSC_NewGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_NewGame_descriptor_,
      _MsgSC_NewGame::default_instance_,
      _MsgSC_NewGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_NewGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_NewGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_NewGame));
  _MsgSC_ContinueAns_descriptor_ = file->message_type(69);
  static const int _MsgSC_ContinueAns_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ContinueAns, m_lusn_),
  };
  _MsgSC_ContinueAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_ContinueAns_descriptor_,
      _MsgSC_ContinueAns::default_instance_,
      _MsgSC_ContinueAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ContinueAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ContinueAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_ContinueAns));
  _MsgSC_Continue_descriptor_ = file->message_type(70);
  static const int _MsgSC_Continue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Continue, m_vtwinloseinfo_),
  };
  _MsgSC_Continue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_Continue_descriptor_,
      _MsgSC_Continue::default_instance_,
      _MsgSC_Continue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Continue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Continue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_Continue));
  _MsgSC_SystemMsg_descriptor_ = file->message_type(71);
  static const int _MsgSC_SystemMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SystemMsg, m_ltype_),
  };
  _MsgSC_SystemMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_SystemMsg_descriptor_,
      _MsgSC_SystemMsg::default_instance_,
      _MsgSC_SystemMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SystemMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SystemMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_SystemMsg));
  _MsgSC_PurgeAns_descriptor_ = file->message_type(72);
  static const int _MsgSC_PurgeAns_offsets_[1] = {
  };
  _MsgSC_PurgeAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_PurgeAns_descriptor_,
      _MsgSC_PurgeAns::default_instance_,
      _MsgSC_PurgeAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PurgeAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PurgeAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_PurgeAns));
  _MsgSC_PurgeInfo_descriptor_ = file->message_type(73);
  static const int _MsgSC_PurgeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PurgeInfo, m_vtpurgeusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PurgeInfo, m_ncount_),
  };
  _MsgSC_PurgeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_PurgeInfo_descriptor_,
      _MsgSC_PurgeInfo::default_instance_,
      _MsgSC_PurgeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PurgeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PurgeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_PurgeInfo));
  _MsgSC_SetPurgeMoney_descriptor_ = file->message_type(74);
  static const int _MsgSC_SetPurgeMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SetPurgeMoney, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SetPurgeMoney, m_money_),
  };
  _MsgSC_SetPurgeMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_SetPurgeMoney_descriptor_,
      _MsgSC_SetPurgeMoney::default_instance_,
      _MsgSC_SetPurgeMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SetPurgeMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SetPurgeMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_SetPurgeMoney));
  _MsgSC_AssaItemNotify_descriptor_ = file->message_type(75);
  static const int _MsgSC_AssaItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AssaItemNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AssaItemNotify, m_lranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AssaItemNotify, m_sitem_),
  };
  _MsgSC_AssaItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_AssaItemNotify_descriptor_,
      _MsgSC_AssaItemNotify::default_instance_,
      _MsgSC_AssaItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AssaItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AssaItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_AssaItemNotify));
  _MsgSC_ThankYouItemNotify_descriptor_ = file->message_type(76);
  static const int _MsgSC_ThankYouItemNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ThankYouItemNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ThankYouItemNotify, m_lranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ThankYouItemNotify, m_llbasicddangmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ThankYouItemNotify, m_sitem_),
  };
  _MsgSC_ThankYouItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_ThankYouItemNotify_descriptor_,
      _MsgSC_ThankYouItemNotify::default_instance_,
      _MsgSC_ThankYouItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ThankYouItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ThankYouItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_ThankYouItemNotify));
  _MsgSC_MadeItemNotify_descriptor_ = file->message_type(77);
  static const int _MsgSC_MadeItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_MadeItemNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_MadeItemNotify, m_lranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_MadeItemNotify, m_sitem_),
  };
  _MsgSC_MadeItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_MadeItemNotify_descriptor_,
      _MsgSC_MadeItemNotify::default_instance_,
      _MsgSC_MadeItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_MadeItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_MadeItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_MadeItemNotify));
  _MsgSC_ExtMoneyNotify_descriptor_ = file->message_type(78);
  static const int _MsgSC_ExtMoneyNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExtMoneyNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExtMoneyNotify, m_bexttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExtMoneyNotify, m_llcmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExtMoneyNotify, m_llcashbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExtMoneyNotify, m_llextmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExtMoneyNotify, m_llextdate_),
  };
  _MsgSC_ExtMoneyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_ExtMoneyNotify_descriptor_,
      _MsgSC_ExtMoneyNotify::default_instance_,
      _MsgSC_ExtMoneyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExtMoneyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExtMoneyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_ExtMoneyNotify));
  _MsgSC_GameEndSystemMsg_descriptor_ = file->message_type(79);
  static const int _MsgSC_GameEndSystemMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameEndSystemMsg, m_ltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameEndSystemMsg, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameEndSystemMsg, m_bgiveup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameEndSystemMsg, m_llmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameEndSystemMsg, m_smsg_),
  };
  _MsgSC_GameEndSystemMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_GameEndSystemMsg_descriptor_,
      _MsgSC_GameEndSystemMsg::default_instance_,
      _MsgSC_GameEndSystemMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameEndSystemMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameEndSystemMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_GameEndSystemMsg));
  _MsgSC_ChangeAvatarNotify_descriptor_ = file->message_type(80);
  static const int _MsgSC_ChangeAvatarNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ChangeAvatarNotify, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ChangeAvatarNotify, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ChangeAvatarNotify, m_uinfo_),
  };
  _MsgSC_ChangeAvatarNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_ChangeAvatarNotify_descriptor_,
      _MsgSC_ChangeAvatarNotify::default_instance_,
      _MsgSC_ChangeAvatarNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ChangeAvatarNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ChangeAvatarNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_ChangeAvatarNotify));
  _MsgSC_AbuseAns_descriptor_ = file->message_type(81);
  static const int _MsgSC_AbuseAns_offsets_[1] = {
  };
  _MsgSC_AbuseAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_AbuseAns_descriptor_,
      _MsgSC_AbuseAns::default_instance_,
      _MsgSC_AbuseAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AbuseAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AbuseAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_AbuseAns));
  _MsgSC_SoundTypeAns_descriptor_ = file->message_type(82);
  static const int _MsgSC_SoundTypeAns_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SoundTypeAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SoundTypeAns, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SoundTypeAns, m_lsoundtype_),
  };
  _MsgSC_SoundTypeAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_SoundTypeAns_descriptor_,
      _MsgSC_SoundTypeAns::default_instance_,
      _MsgSC_SoundTypeAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SoundTypeAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_SoundTypeAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_SoundTypeAns));
  _MsgSC_FMoney_descriptor_ = file->message_type(83);
  static const int _MsgSC_FMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_FMoney, m_sfmoney_),
  };
  _MsgSC_FMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_FMoney_descriptor_,
      _MsgSC_FMoney::default_instance_,
      _MsgSC_FMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_FMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_FMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_FMoney));
  _MsgSC_ItemNotify_descriptor_ = file->message_type(84);
  static const int _MsgSC_ItemNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ItemNotify, m_llimittotalcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ItemNotify, m_llimittodaycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ItemNotify, m_binfinityspeeditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ItemNotify, m_llspeedtotime_),
  };
  _MsgSC_ItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_ItemNotify_descriptor_,
      _MsgSC_ItemNotify::default_instance_,
      _MsgSC_ItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_ItemNotify));
  _MsgSC_DisconnectMoneyNotify_descriptor_ = file->message_type(85);
  static const int _MsgSC_DisconnectMoneyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DisconnectMoneyNotify, m_snickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DisconnectMoneyNotify, m_lldisconnectmoney_),
  };
  _MsgSC_DisconnectMoneyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_DisconnectMoneyNotify_descriptor_,
      _MsgSC_DisconnectMoneyNotify::default_instance_,
      _MsgSC_DisconnectMoneyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DisconnectMoneyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_DisconnectMoneyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_DisconnectMoneyNotify));
  _MsgSC_ExitNtf_descriptor_ = file->message_type(86);
  static const int _MsgSC_ExitNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExitNtf, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExitNtf, m_nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExitNtf, m_lexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExitNtf, m_bexit_),
  };
  _MsgSC_ExitNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_ExitNtf_descriptor_,
      _MsgSC_ExitNtf::default_instance_,
      _MsgSC_ExitNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExitNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ExitNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_ExitNtf));
  _MsgSC_RematchOKAns_descriptor_ = file->message_type(87);
  static const int _MsgSC_RematchOKAns_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RematchOKAns, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RematchOKAns, m_llpoolmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RematchOKAns, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RematchOKAns, m_brematchok_),
  };
  _MsgSC_RematchOKAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_RematchOKAns_descriptor_,
      _MsgSC_RematchOKAns::default_instance_,
      _MsgSC_RematchOKAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RematchOKAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RematchOKAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_RematchOKAns));
  _MsgSC_RuleNotify_descriptor_ = file->message_type(88);
  static const int _MsgSC_RuleNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RuleNotify, m_nruleidx_),
  };
  _MsgSC_RuleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_RuleNotify_descriptor_,
      _MsgSC_RuleNotify::default_instance_,
      _MsgSC_RuleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RuleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RuleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_RuleNotify));
  _MsgSC_AllowEntryWaitingUser_descriptor_ = file->message_type(89);
  static const int _MsgSC_AllowEntryWaitingUser_offsets_[1] = {
  };
  _MsgSC_AllowEntryWaitingUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_AllowEntryWaitingUser_descriptor_,
      _MsgSC_AllowEntryWaitingUser::default_instance_,
      _MsgSC_AllowEntryWaitingUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AllowEntryWaitingUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AllowEntryWaitingUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_AllowEntryWaitingUser));
  _MsgSC_AllWaitingUserDataNtf_descriptor_ = file->message_type(90);
  static const int _MsgSC_AllWaitingUserDataNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AllWaitingUserDataNtf, m_bsendwaitinguser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AllWaitingUserDataNtf, m_waitinguserdata_),
  };
  _MsgSC_AllWaitingUserDataNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_AllWaitingUserDataNtf_descriptor_,
      _MsgSC_AllWaitingUserDataNtf::default_instance_,
      _MsgSC_AllWaitingUserDataNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AllWaitingUserDataNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_AllWaitingUserDataNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_AllWaitingUserDataNtf));
  _MsgSC_UserDataChangeNtf_descriptor_ = file->message_type(91);
  static const int _MsgSC_UserDataChangeNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDataChangeNtf, m_userdata_),
  };
  _MsgSC_UserDataChangeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_UserDataChangeNtf_descriptor_,
      _MsgSC_UserDataChangeNtf::default_instance_,
      _MsgSC_UserDataChangeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDataChangeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_UserDataChangeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_UserDataChangeNtf));
  _MsgSC_RefillMoneyNtf_descriptor_ = file->message_type(92);
  static const int _MsgSC_RefillMoneyNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RefillMoneyNtf, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RefillMoneyNtf, m_nrefillcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RefillMoneyNtf, m_llrefillmoney_),
  };
  _MsgSC_RefillMoneyNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_RefillMoneyNtf_descriptor_,
      _MsgSC_RefillMoneyNtf::default_instance_,
      _MsgSC_RefillMoneyNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RefillMoneyNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_RefillMoneyNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_RefillMoneyNtf));
  _MsgSC_JackpotMoneyNtf_descriptor_ = file->message_type(93);
  static const int _MsgSC_JackpotMoneyNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_JackpotMoneyNtf, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_JackpotMoneyNtf, m_lljackpotmoney_),
  };
  _MsgSC_JackpotMoneyNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_JackpotMoneyNtf_descriptor_,
      _MsgSC_JackpotMoneyNtf::default_instance_,
      _MsgSC_JackpotMoneyNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_JackpotMoneyNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_JackpotMoneyNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_JackpotMoneyNtf));
  _MsgSC_GuardianAngelMoney_descriptor_ = file->message_type(94);
  static const int _MsgSC_GuardianAngelMoney_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GuardianAngelMoney, m_lusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GuardianAngelMoney, m_nguardianangelcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GuardianAngelMoney, m_llangelmoney_),
  };
  _MsgSC_GuardianAngelMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_GuardianAngelMoney_descriptor_,
      _MsgSC_GuardianAngelMoney::default_instance_,
      _MsgSC_GuardianAngelMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GuardianAngelMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GuardianAngelMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_GuardianAngelMoney));
  _MsgSC_GameMasterCallNtf_descriptor_ = file->message_type(95);
  static const int _MsgSC_GameMasterCallNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameMasterCallNtf, m_lgmcall_usn_),
  };
  _MsgSC_GameMasterCallNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_GameMasterCallNtf_descriptor_,
      _MsgSC_GameMasterCallNtf::default_instance_,
      _MsgSC_GameMasterCallNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameMasterCallNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_GameMasterCallNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_GameMasterCallNtf));
  _MsgSC_ObserverCnt_descriptor_ = file->message_type(96);
  static const int _MsgSC_ObserverCnt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserverCnt, m_nobservercnt_),
  };
  _MsgSC_ObserverCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_ObserverCnt_descriptor_,
      _MsgSC_ObserverCnt::default_instance_,
      _MsgSC_ObserverCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserverCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_ObserverCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_ObserverCnt));
  _MsgSC_Bonus_descriptor_ = file->message_type(97);
  static const int _MsgSC_Bonus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Bonus, m_llbonus_),
  };
  _MsgSC_Bonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_Bonus_descriptor_,
      _MsgSC_Bonus::default_instance_,
      _MsgSC_Bonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Bonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_Bonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_Bonus));
  _MsgSC_PoliceNotify_descriptor_ = file->message_type(98);
  static const int _MsgSC_PoliceNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PoliceNotify, m_policemsg_),
  };
  _MsgSC_PoliceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      _MsgSC_PoliceNotify_descriptor_,
      _MsgSC_PoliceNotify::default_instance_,
      _MsgSC_PoliceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PoliceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_MsgSC_PoliceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(_MsgSC_PoliceNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Game_5fPoker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _Cards_descriptor_, &_Cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _Money_descriptor_, &_Money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMoney_descriptor_, &UserMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _CWinLose_descriptor_, &_CWinLose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _UserInfo_descriptor_, &_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _OneCard_descriptor_, &_OneCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _VecMoney_descriptor_, &_VecMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _WinLoseInfo_descriptor_, &_WinLoseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _VecUSN_descriptor_, &_VecUSN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _WAITINGUSERDATA_descriptor_, &_WAITINGUSERDATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRefill_descriptor_, &CRefill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _ItemList_descriptor_, &_ItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _Item_descriptor_, &_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _RCUser_descriptor_, &_RCUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _RCUserData_descriptor_, &_RCUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _Option_descriptor_, &_Option::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _BettingMsg_descriptor_, &_BettingMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _BettingMsgTable_descriptor_, &_BettingMsgTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MoneyTable_descriptor_, &_MoneyTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _CardTable_descriptor_, &_CardTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _UITable_descriptor_, &_UITable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _RCRoomData_descriptor_, &_RCRoomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _SPUserBaseInfo_descriptor_, &_SPUserBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_Entry_descriptor_, &_MsgCS_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_Observe_descriptor_, &_MsgCS_Observe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_Start_descriptor_, &_MsgCS_Start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_SelectedCardReq_descriptor_, &_MsgCS_SelectedCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_BettingReq_descriptor_, &_MsgCS_BettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_ChoiceRemoveCard_descriptor_, &_MsgCS_ChoiceRemoveCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_Purge_descriptor_, &_MsgCS_Purge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_Abuse_descriptor_, &_MsgCS_Abuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_AskPurgeVote_descriptor_, &_MsgCS_AskPurgeVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_AnswerPurgeVote_descriptor_, &_MsgCS_AnswerPurgeVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_WaitingUserTicketReq_descriptor_, &_MsgCS_WaitingUserTicketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_UpdateWaitingUserInfoReq_descriptor_, &_MsgCS_UpdateWaitingUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_SoundType_descriptor_, &_MsgCS_SoundType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_ExitQue_descriptor_, &_MsgCS_ExitQue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_Continue_descriptor_, &_MsgCS_Continue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_RuleSet_descriptor_, &_MsgCS_RuleSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_GameMasterCall_descriptor_, &_MsgCS_GameMasterCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_FieldReserved_descriptor_, &_MsgCS_FieldReserved::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_JokboSet_descriptor_, &_MsgCS_JokboSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_TestKeySetting_descriptor_, &_MsgCS_TestKeySetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_CheckNotice_descriptor_, &_MsgCS_CheckNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_Ack_descriptor_, &_MsgCS_Ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgCS_Ping_descriptor_, &_MsgCS_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_UserJoinAns_descriptor_, &_MsgSC_UserJoinAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_UserJoinErr_descriptor_, &_MsgSC_UserJoinErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_UserDisconnect_descriptor_, &_MsgSC_UserDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_CardData_descriptor_, &_MsgSC_CardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_EntryAns_descriptor_, &_MsgSC_EntryAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_EntryReject_descriptor_, &_MsgSC_EntryReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_ObserveAns_descriptor_, &_MsgSC_ObserveAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_StartReq_descriptor_, &_MsgSC_StartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_StartAns_descriptor_, &_MsgSC_StartAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_NoStart_descriptor_, &_MsgSC_NoStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_DealCards_descriptor_, &_MsgSC_DealCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_SelectedCardAns_descriptor_, &_MsgSC_SelectedCardAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_DealOpenCard_descriptor_, &_MsgSC_DealOpenCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_DealCard_descriptor_, &_MsgSC_DealCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_Boss_descriptor_, &_MsgSC_Boss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_Betting_descriptor_, &_MsgSC_Betting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_BettingAns_descriptor_, &_MsgSC_BettingAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_BettingAnsMsg_descriptor_, &_MsgSC_BettingAnsMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_DealHiddenCard_descriptor_, &_MsgSC_DealHiddenCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_AnteMoney_descriptor_, &_MsgSC_AnteMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_RuleQuaterHalf_descriptor_, &_MsgSC_RuleQuaterHalf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_Finished_descriptor_, &_MsgSC_Finished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_NewGame_descriptor_, &_MsgSC_NewGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_ContinueAns_descriptor_, &_MsgSC_ContinueAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_Continue_descriptor_, &_MsgSC_Continue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_SystemMsg_descriptor_, &_MsgSC_SystemMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_PurgeAns_descriptor_, &_MsgSC_PurgeAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_PurgeInfo_descriptor_, &_MsgSC_PurgeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_SetPurgeMoney_descriptor_, &_MsgSC_SetPurgeMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_AssaItemNotify_descriptor_, &_MsgSC_AssaItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_ThankYouItemNotify_descriptor_, &_MsgSC_ThankYouItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_MadeItemNotify_descriptor_, &_MsgSC_MadeItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_ExtMoneyNotify_descriptor_, &_MsgSC_ExtMoneyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_GameEndSystemMsg_descriptor_, &_MsgSC_GameEndSystemMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_ChangeAvatarNotify_descriptor_, &_MsgSC_ChangeAvatarNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_AbuseAns_descriptor_, &_MsgSC_AbuseAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_SoundTypeAns_descriptor_, &_MsgSC_SoundTypeAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_FMoney_descriptor_, &_MsgSC_FMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_ItemNotify_descriptor_, &_MsgSC_ItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_DisconnectMoneyNotify_descriptor_, &_MsgSC_DisconnectMoneyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_ExitNtf_descriptor_, &_MsgSC_ExitNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_RematchOKAns_descriptor_, &_MsgSC_RematchOKAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_RuleNotify_descriptor_, &_MsgSC_RuleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_AllowEntryWaitingUser_descriptor_, &_MsgSC_AllowEntryWaitingUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_AllWaitingUserDataNtf_descriptor_, &_MsgSC_AllWaitingUserDataNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_UserDataChangeNtf_descriptor_, &_MsgSC_UserDataChangeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_RefillMoneyNtf_descriptor_, &_MsgSC_RefillMoneyNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_JackpotMoneyNtf_descriptor_, &_MsgSC_JackpotMoneyNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_GuardianAngelMoney_descriptor_, &_MsgSC_GuardianAngelMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_GameMasterCallNtf_descriptor_, &_MsgSC_GameMasterCallNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_ObserverCnt_descriptor_, &_MsgSC_ObserverCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_Bonus_descriptor_, &_MsgSC_Bonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    _MsgSC_PoliceNotify_descriptor_, &_MsgSC_PoliceNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Game_5fPoker_2eproto() {
  delete _Cards::default_instance_;
  delete _Cards_reflection_;
  delete _Money::default_instance_;
  delete _Money_reflection_;
  delete UserMoney::default_instance_;
  delete UserMoney_reflection_;
  delete _CWinLose::default_instance_;
  delete _CWinLose_reflection_;
  delete _UserInfo::default_instance_;
  delete _UserInfo_reflection_;
  delete _OneCard::default_instance_;
  delete _OneCard_reflection_;
  delete _VecMoney::default_instance_;
  delete _VecMoney_reflection_;
  delete _WinLoseInfo::default_instance_;
  delete _WinLoseInfo_reflection_;
  delete _VecUSN::default_instance_;
  delete _VecUSN_reflection_;
  delete _WAITINGUSERDATA::default_instance_;
  delete _WAITINGUSERDATA_reflection_;
  delete CRefill::default_instance_;
  delete CRefill_reflection_;
  delete _ItemList::default_instance_;
  delete _ItemList_reflection_;
  delete _Item::default_instance_;
  delete _Item_reflection_;
  delete _RCUser::default_instance_;
  delete _RCUser_reflection_;
  delete _RCUserData::default_instance_;
  delete _RCUserData_reflection_;
  delete _Option::default_instance_;
  delete _Option_reflection_;
  delete _BettingMsg::default_instance_;
  delete _BettingMsg_reflection_;
  delete _BettingMsgTable::default_instance_;
  delete _BettingMsgTable_reflection_;
  delete _MoneyTable::default_instance_;
  delete _MoneyTable_reflection_;
  delete _CardTable::default_instance_;
  delete _CardTable_reflection_;
  delete _UITable::default_instance_;
  delete _UITable_reflection_;
  delete _RCRoomData::default_instance_;
  delete _RCRoomData_reflection_;
  delete _SPUserBaseInfo::default_instance_;
  delete _SPUserBaseInfo_reflection_;
  delete _MsgCS_Entry::default_instance_;
  delete _MsgCS_Entry_reflection_;
  delete _MsgCS_Observe::default_instance_;
  delete _MsgCS_Observe_reflection_;
  delete _MsgCS_Start::default_instance_;
  delete _MsgCS_Start_reflection_;
  delete _MsgCS_SelectedCardReq::default_instance_;
  delete _MsgCS_SelectedCardReq_reflection_;
  delete _MsgCS_BettingReq::default_instance_;
  delete _MsgCS_BettingReq_reflection_;
  delete _MsgCS_ChoiceRemoveCard::default_instance_;
  delete _MsgCS_ChoiceRemoveCard_reflection_;
  delete _MsgCS_Purge::default_instance_;
  delete _MsgCS_Purge_reflection_;
  delete _MsgCS_Abuse::default_instance_;
  delete _MsgCS_Abuse_reflection_;
  delete _MsgCS_AskPurgeVote::default_instance_;
  delete _MsgCS_AskPurgeVote_reflection_;
  delete _MsgCS_AnswerPurgeVote::default_instance_;
  delete _MsgCS_AnswerPurgeVote_reflection_;
  delete _MsgCS_WaitingUserTicketReq::default_instance_;
  delete _MsgCS_WaitingUserTicketReq_reflection_;
  delete _MsgCS_UpdateWaitingUserInfoReq::default_instance_;
  delete _MsgCS_UpdateWaitingUserInfoReq_reflection_;
  delete _MsgCS_SoundType::default_instance_;
  delete _MsgCS_SoundType_reflection_;
  delete _MsgCS_ExitQue::default_instance_;
  delete _MsgCS_ExitQue_reflection_;
  delete _MsgCS_Continue::default_instance_;
  delete _MsgCS_Continue_reflection_;
  delete _MsgCS_RuleSet::default_instance_;
  delete _MsgCS_RuleSet_reflection_;
  delete _MsgCS_GameMasterCall::default_instance_;
  delete _MsgCS_GameMasterCall_reflection_;
  delete _MsgCS_FieldReserved::default_instance_;
  delete _MsgCS_FieldReserved_reflection_;
  delete _MsgCS_JokboSet::default_instance_;
  delete _MsgCS_JokboSet_reflection_;
  delete _MsgCS_TestKeySetting::default_instance_;
  delete _MsgCS_TestKeySetting_reflection_;
  delete _MsgCS_CheckNotice::default_instance_;
  delete _MsgCS_CheckNotice_reflection_;
  delete _MsgCS_Ack::default_instance_;
  delete _MsgCS_Ack_reflection_;
  delete _MsgCS_Ping::default_instance_;
  delete _MsgCS_Ping_reflection_;
  delete _MsgSC_UserJoinAns::default_instance_;
  delete _MsgSC_UserJoinAns_reflection_;
  delete _MsgSC_UserJoinErr::default_instance_;
  delete _MsgSC_UserJoinErr_reflection_;
  delete _MsgSC_UserDisconnect::default_instance_;
  delete _MsgSC_UserDisconnect_reflection_;
  delete _MsgSC_CardData::default_instance_;
  delete _MsgSC_CardData_reflection_;
  delete _MsgSC_EntryAns::default_instance_;
  delete _MsgSC_EntryAns_reflection_;
  delete _MsgSC_EntryReject::default_instance_;
  delete _MsgSC_EntryReject_reflection_;
  delete _MsgSC_ObserveAns::default_instance_;
  delete _MsgSC_ObserveAns_reflection_;
  delete _MsgSC_StartReq::default_instance_;
  delete _MsgSC_StartReq_reflection_;
  delete _MsgSC_StartAns::default_instance_;
  delete _MsgSC_StartAns_reflection_;
  delete _MsgSC_NoStart::default_instance_;
  delete _MsgSC_NoStart_reflection_;
  delete _MsgSC_DealCards::default_instance_;
  delete _MsgSC_DealCards_reflection_;
  delete _MsgSC_SelectedCardAns::default_instance_;
  delete _MsgSC_SelectedCardAns_reflection_;
  delete _MsgSC_DealOpenCard::default_instance_;
  delete _MsgSC_DealOpenCard_reflection_;
  delete _MsgSC_DealCard::default_instance_;
  delete _MsgSC_DealCard_reflection_;
  delete _MsgSC_Boss::default_instance_;
  delete _MsgSC_Boss_reflection_;
  delete _MsgSC_Betting::default_instance_;
  delete _MsgSC_Betting_reflection_;
  delete _MsgSC_BettingAns::default_instance_;
  delete _MsgSC_BettingAns_reflection_;
  delete _MsgSC_BettingAnsMsg::default_instance_;
  delete _MsgSC_BettingAnsMsg_reflection_;
  delete _MsgSC_DealHiddenCard::default_instance_;
  delete _MsgSC_DealHiddenCard_reflection_;
  delete _MsgSC_AnteMoney::default_instance_;
  delete _MsgSC_AnteMoney_reflection_;
  delete _MsgSC_RuleQuaterHalf::default_instance_;
  delete _MsgSC_RuleQuaterHalf_reflection_;
  delete _MsgSC_Finished::default_instance_;
  delete _MsgSC_Finished_reflection_;
  delete _MsgSC_NewGame::default_instance_;
  delete _MsgSC_NewGame_reflection_;
  delete _MsgSC_ContinueAns::default_instance_;
  delete _MsgSC_ContinueAns_reflection_;
  delete _MsgSC_Continue::default_instance_;
  delete _MsgSC_Continue_reflection_;
  delete _MsgSC_SystemMsg::default_instance_;
  delete _MsgSC_SystemMsg_reflection_;
  delete _MsgSC_PurgeAns::default_instance_;
  delete _MsgSC_PurgeAns_reflection_;
  delete _MsgSC_PurgeInfo::default_instance_;
  delete _MsgSC_PurgeInfo_reflection_;
  delete _MsgSC_SetPurgeMoney::default_instance_;
  delete _MsgSC_SetPurgeMoney_reflection_;
  delete _MsgSC_AssaItemNotify::default_instance_;
  delete _MsgSC_AssaItemNotify_reflection_;
  delete _MsgSC_ThankYouItemNotify::default_instance_;
  delete _MsgSC_ThankYouItemNotify_reflection_;
  delete _MsgSC_MadeItemNotify::default_instance_;
  delete _MsgSC_MadeItemNotify_reflection_;
  delete _MsgSC_ExtMoneyNotify::default_instance_;
  delete _MsgSC_ExtMoneyNotify_reflection_;
  delete _MsgSC_GameEndSystemMsg::default_instance_;
  delete _MsgSC_GameEndSystemMsg_reflection_;
  delete _MsgSC_ChangeAvatarNotify::default_instance_;
  delete _MsgSC_ChangeAvatarNotify_reflection_;
  delete _MsgSC_AbuseAns::default_instance_;
  delete _MsgSC_AbuseAns_reflection_;
  delete _MsgSC_SoundTypeAns::default_instance_;
  delete _MsgSC_SoundTypeAns_reflection_;
  delete _MsgSC_FMoney::default_instance_;
  delete _MsgSC_FMoney_reflection_;
  delete _MsgSC_ItemNotify::default_instance_;
  delete _MsgSC_ItemNotify_reflection_;
  delete _MsgSC_DisconnectMoneyNotify::default_instance_;
  delete _MsgSC_DisconnectMoneyNotify_reflection_;
  delete _MsgSC_ExitNtf::default_instance_;
  delete _MsgSC_ExitNtf_reflection_;
  delete _MsgSC_RematchOKAns::default_instance_;
  delete _MsgSC_RematchOKAns_reflection_;
  delete _MsgSC_RuleNotify::default_instance_;
  delete _MsgSC_RuleNotify_reflection_;
  delete _MsgSC_AllowEntryWaitingUser::default_instance_;
  delete _MsgSC_AllowEntryWaitingUser_reflection_;
  delete _MsgSC_AllWaitingUserDataNtf::default_instance_;
  delete _MsgSC_AllWaitingUserDataNtf_reflection_;
  delete _MsgSC_UserDataChangeNtf::default_instance_;
  delete _MsgSC_UserDataChangeNtf_reflection_;
  delete _MsgSC_RefillMoneyNtf::default_instance_;
  delete _MsgSC_RefillMoneyNtf_reflection_;
  delete _MsgSC_JackpotMoneyNtf::default_instance_;
  delete _MsgSC_JackpotMoneyNtf_reflection_;
  delete _MsgSC_GuardianAngelMoney::default_instance_;
  delete _MsgSC_GuardianAngelMoney_reflection_;
  delete _MsgSC_GameMasterCallNtf::default_instance_;
  delete _MsgSC_GameMasterCallNtf_reflection_;
  delete _MsgSC_ObserverCnt::default_instance_;
  delete _MsgSC_ObserverCnt_reflection_;
  delete _MsgSC_Bonus::default_instance_;
  delete _MsgSC_Bonus_reflection_;
  delete _MsgSC_PoliceNotify::default_instance_;
  delete _MsgSC_PoliceNotify_reflection_;
}

void protobuf_AddDesc_Game_5fPoker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Game_Poker.proto\022\nGame_Poker\"\240\001\n\006_Card"
    "s\022\021\n\tm_vtCards\030\001 \003(\005\022\024\n\014m_lResultIdx\030\002 \003"
    "(\005\022\'\n\nm_vUserUSN\030\003 \002(\0132\023.Game_Poker._Vec"
    "USN\"D\n\005state\022\023\n\017CARDTYPE_NORMAL\020\000\022\023\n\017CAR"
    "DTYPE_HIDDEN\020\001\022\021\n\rCARDTYPE_SAME\020\002\"\201\002\n\006_M"
    "oney\022\022\n\nm_llCMoney\030\001 \002(\022\022\025\n\rm_llCallMone"
    "y\030\002 \002(\022\022\025\n\rm_llSideMoney\030\003 \002(\022\022\030\n\020m_llCa"
    "llHabMoney\030\004 \002(\022\022\025\n\rm_llTakeMoney\030\005 \002(\022\022"
    "\030\n\020m_llJackpotMoney\030\006 \002(\022\022\023\n\013m_lBetState"
    "\030\007 \002(\021\022\025\n\rm_lBetReceive\030\010 \002(\021\022\023\n\013m_lBetC"
    "ount\030\t \002(\021\022\024\n\014m_lResultIdx\030\n \002(\021\022\023\n\013m_sM"
    "oneyMsg\030\013 \002(\t\"\263\001\n\tUserMoney\022\016\n\006m_lUSN\030\001 "
    "\002(\021\022\020\n\010m_lState\030\002 \002(\021\022\021\n\tm_llMoney\030\003 \002(\022"
    "\022\030\n\020m_llCallHabMoney\030\004 \002(\022\022\025\n\rm_llTakeMo"
    "ney\030\005 \002(\022\022\025\n\rm_llDealMoney\030\006 \002(\022\022\023\n\013m_sN"
    "ickName\030\007 \002(\t\022\024\n\014m_sDealerTax\030\010 \002(\t\"A\n\t_"
    "CWinLose\022\016\n\006m_lWin\030\001 \002(\021\022\017\n\007m_lLose\030\002 \002("
    "\021\022\023\n\013m_lContinue\030\003 \002(\021\"\270\003\n\t_UserInfo\022\016\n\006"
    "m_lUSN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002(\021\022\023\n\013m_sNic"
    "kName\030\003 \002(\t\022\r\n\005m_sID\030\004 \002(\t\022\021\n\tm_lCLevel\030"
    "\005 \002(\021\022\024\n\014m_lSoundType\030\006 \002(\021\022\016\n\006m_sAvt\030\007 "
    "\002(\t\022\024\n\014m_lUserState\030\010 \002(\021\022)\n\nm_cWinLose\030"
    "\t \002(\0132\025.Game_Poker._CWinLose\022/\n\020m_cWinLo"
    "se_Today\030\n \002(\0132\025.Game_Poker._CWinLose\022.\n"
    "\017m_cWinLose_Room\030\013 \002(\0132\025.Game_Poker._CWi"
    "nLose\022\022\n\nm_llCMoney\030\014 \002(\022\022\022\n\nm_llFMoney\030"
    "\r \002(\022\022\017\n\007m_lExit\030\016 \002(\021\022\023\n\013m_nItemType\030\017 "
    "\002(\021\022\016\n\006m_lAck\030\020 \002(\021\022\022\n\nm_lJackpot\030\021 \002(\021\022"
    "\030\n\020m_lDieCardsDealt\030\022 \002(\021\"2\n\010_OneCard\022\020\n"
    "\010m_nIndex\030\001 \002(\005\022\024\n\014m_lCardIndex\030\002 \002(\005\"\035\n"
    "\t_VecMoney\022\020\n\010VecMoney\030\001 \002(\022\"X\n\014_WinLose"
    "Info\022\022\n\nm_llCMoney\030\001 \002(\022\022\016\n\006m_lWin\030\002 \002(\021"
    "\022\017\n\007m_lLose\030\003 \002(\021\022\023\n\013m_lReserved\030\004 \002(\021\"\026"
    "\n\007_VecUSN\022\013\n\003USN\030\001 \002(\003\"b\n\020_WAITINGUSERDA"
    "TA\022\016\n\006m_lUSN\030\001 \002(\005\022\024\n\014m_lTicketNum\030\002 \002(\005"
    "\022\024\n\014m_lBackColor\030\003 \002(\005\022\022\n\nm_bCallWeb\030\004 \002"
    "(\005\">\n\007CRefill\022\020\n\010m_llTime\030\001 \002(\003\022\016\n\006m_nCn"
    "t\030\002 \002(\005\022\021\n\tm_lPLevel\030\003 \002(\005\"1\n\t_ItemList\022"
    "$\n\tm_lstItem\030\001 \003(\0132\021.Game_Poker._Item\"Z\n"
    "\005_Item\022\022\n\nm_lFucnsrl\030\001 \002(\005\022\025\n\rm_llStartT"
    "ime\030\002 \002(\003\022\023\n\013m_llEndTime\030\003 \002(\003\022\021\n\tm_llCo"
    "unt\030\004 \002(\003\"\372\n\n\007_RCUser\022\016\n\006m_lUSN\030\001 \002(\005\022\020\n"
    "\010m_lJumin\030\002 \002(\005\022\023\n\013m_lFirstUSN\030\003 \002(\005\022\023\n\013"
    "m_lAgeIndex\030\004 \002(\005\022\023\n\013m_lJobIndex\030\005 \002(\005\022\026"
    "\n\016m_lRegionIndex\030\006 \002(\005\022\025\n\rm_lGuildIndex\030"
    "\007 \002(\005\022\026\n\016m_lMemberIndex\030\010 \002(\005\022\023\n\013m_lClie"
    "ntIP\030\t \002(\005\022\024\n\014m_lGatewayIP\030\n \002(\005\022\025\n\rm_lM"
    "acAddress\030\013 \002(\005\022\025\n\rm_sMobileInfo\030\014 \002(\t\022\022"
    "\n\nm_sAuthKey\030\r \002(\t\022\027\n\017m_sUserGameData\030\016 "
    "\002(\t\022\020\n\010m_nIndex\030\017 \002(\005\022\023\n\013m_sNickName\030\020 \002"
    "(\t\022\021\n\tm_sUserID\030\021 \002(\t\022\016\n\006m_sAvt\030\022 \002(\t\022\021\n"
    "\tm_lCLevel\030\023 \002(\005\022\016\n\006m_lSex\030\024 \002(\005\022\022\n\nm_ll"
    "CMoney\030\025 \002(\003\022\022\n\nm_llFMoney\030\026 \002(\003\022\025\n\rm_ll"
    "SafeMoney\030\027 \002(\003\022\032\n\022m_llPlastAllinDate\030\030 "
    "\002(\003\022\031\n\021m_llPlastLogonDay\030\031 \002(\003\022\032\n\022m_lMTo"
    "dayPlayCount\030\032 \002(\005\022\031\n\021m_lMTodayPlayTime\030"
    "\033 \002(\005\022\032\n\022m_lPTotalPlayCount\030\034 \002(\005\022&\n\tm_c"
    "Refill\030\035 \002(\0132\023.Game_Poker.CRefill\022\025\n\rm_l"
    "lPExtMoney\030\036 \002(\003\022\027\n\017m_llPExtendDate\030\037 \002("
    "\003\022\026\n\016m_llPBonusDate\030  \002(\003\022\032\n\022m_lMMonthPl"
    "ayCount\030! \002(\005\022\031\n\021m_lMMonthPlayTime\030\" \002(\005"
    "\022)\n\nm_cWinLose\030# \002(\0132\025.Game_Poker._CWinL"
    "ose\022\022\n\nm_lGDisCnt\030$ \002(\005\022\031\n\021m_llGlastLogo"
    "nDay\030% \002(\003\022\024\n\014m_llGRegDate\030& \002(\003\022\032\n\022m_ll"
    "GFirstPlayDate\030\' \002(\003\022\032\n\022m_lGTodayPlayCou"
    "nt\030( \002(\005\022\031\n\021m_lGTodayPlayTime\030) \002(\005\022\032\n\022m"
    "_lGTotalPlayCount\030* \002(\005\022\031\n\021m_lGTotalPlay"
    "Time\030+ \002(\005\022\024\n\014m_lGAllinCnt\030, \002(\005\022\024\n\014m_lG"
    "AllinOut\030- \002(\005\022\032\n\022m_llGLastAllinDate\030. \002"
    "(\003\022/\n\020m_cWinLose_Today\030/ \002(\0132\025.Game_Poke"
    "r._CWinLose\022\027\n\017m_llGTodayMoney\0300 \002(\003\022\026\n\016"
    "m_lFourCardCnt\0301 \002(\005\022\033\n\023m_lStraightFlush"
    "Cnt\0302 \002(\005\022 \n\030m_lRoyalStraightFlushCnt\0303 "
    "\002(\005\022\024\n\014m_nReserve01\0304 \002(\005\022\024\n\014m_nReserve0"
    "2\0305 \002(\005\022)\n\nm_ItemList\0306 \002(\0132\025.Game_Poker"
    "._ItemList\022\024\n\014m_llJoinDate\0307 \002(\003\022\024\n\014m_ll"
    "PlayDate\0308 \002(\003\"\r\n\013_RCUserData\"\236\003\n\007_Optio"
    "n\022\024\n\014m_sRoomTitle\030\001 \002(\t\022\023\n\013m_sPassword\030\002"
    " \002(\t\022\025\n\rm_lMaxUserCnt\030\003 \002(\005\022\033\n\023m_lMaxPla"
    "yerUserCnt\030\004 \002(\005\022\033\n\023m_lMaxPlayerCardCnt\030"
    "\005 \002(\005\022\025\n\rm_lChoiceMode\030\006 \002(\005\022\023\n\013m_lRoomT"
    "ype\030\007 \002(\005\022\022\n\nm_lBetRule\030\010 \002(\005\022\022\n\nm_lBetT"
    "ype\030\t \002(\005\022\022\n\nm_lAddRule\030\n \002(\005\022\026\n\016m_lRema"
    "tchJoin\030\013 \002(\005\022\025\n\rm_lLimitMoney\030\014 \002(\005\022\031\n\021"
    "m_llGameAnteMoney\030\r \002(\022\022\017\n\007m_bEcho\030\016 \002(\005"
    "\022\022\n\nm_lMakeUSN\030\017 \002(\005\022\023\n\013m_lCategory\030\020 \002("
    "\005\022\024\n\014m_lChannelID\030\021 \002(\005\022\025\n\rm_llAnteMoney"
    "\030\022 \002(\022\"\272\001\n\013_BettingMsg\022\016\n\006m_lUSN\030\001 \002(\005\022\020"
    "\n\010m_nIndex\030\002 \002(\005\022\021\n\tm_BetType\030\003 \002(\005\022\027\n\017m"
    "_bBettingMoney\030\004 \002(\005\022\024\n\014m_bMoneyLack\030\005 \002"
    "(\005\022\030\n\020m_bCallMoneyZero\030\006 \002(\005\022\025\n\rm_llCall"
    "Money\030\007 \002(\003\022\026\n\016m_llRaiseMoney\030\010 \002(\003\"D\n\020_"
    "BettingMsgTable\0220\n\017BettingMsgTable\030\001 \003(\013"
    "2\027.Game_Poker._BettingMsg\"5\n\013_MoneyTable"
    "\022&\n\nMoneyTable\030\001 \003(\0132\022.Game_Poker._Money"
    "\"3\n\n_CardTable\022%\n\tCardTable\030\001 \003(\0132\022.Game"
    "_Poker._Cards\"2\n\010_UITable\022&\n\007UITable\030\001 \003"
    "(\0132\025.Game_Poker._UserInfo\"\251\002\n\013_RCRoomDat"
    "a\022\025\n\rm_lGameMaster\030\001 \002(\005\022\024\n\014m_lRoomIndex"
    "\030\002 \002(\005\022\020\n\010m_lState\030\003 \002(\005\022%\n\010m_option\030\004 \002"
    "(\0132\023.Game_Poker._Option\022%\n\007m_tblUI\030\005 \001(\013"
    "2\024.Game_Poker._UITable\022)\n\tm_tblCard\030\006 \001("
    "\0132\026.Game_Poker._CardTable\022+\n\nm_tblMoney\030"
    "\007 \001(\0132\027.Game_Poker._MoneyTable\0225\n\017m_tblB"
    "ettingMsg\030\010 \001(\0132\034.Game_Poker._BettingMsg"
    "Table\"\336\002\n\017_SPUserBaseInfo\022\016\n\006m_lUSN\030\001 \002("
    "\005\022\021\n\tm_sUserID\030\002 \002(\t\022\023\n\013m_sNickName\030\003 \002("
    "\t\022\016\n\006m_lUSC\030\004 \002(\005\022\020\n\010m_lJumin\030\005 \002(\005\022\023\n\013m"
    "_lFirstUSN\030\006 \002(\005\022\023\n\013m_lAgeIndex\030\007 \002(\005\022\023\n"
    "\013m_lJobIndex\030\010 \002(\005\022\026\n\016m_lRegionIndex\030\t \002"
    "(\005\022\025\n\rm_lGuildIndex\030\n \002(\005\022\026\n\016m_lMemberIn"
    "dex\030\013 \002(\005\022\023\n\013m_lClientIP\030\014 \002(\005\022\024\n\014m_lGat"
    "ewayIP\030\r \002(\005\022\025\n\rm_lMacAddress\030\016 \002(\005\022\025\n\rm"
    "_sMobileInfo\030\017 \002(\t\022\022\n\nm_sAuthKey\030\020 \002(\t\"\231"
    "\001\n\014_MsgCS_Entry\022\022\n\nm_nVersion\030\001 \002(\005\022\027\n\017m"
    "_bWelcomeSound\030\002 \002(\021\022\024\n\014m_lSoundType\030\003 \002"
    "(\021\022\023\n\013m_sNickName\030\004 \002(\t\022\016\n\006m_sAvt\030\005 \002(\t\022"
    "\021\n\tm_lCLevel\030\006 \002(\021\022\016\n\006m_lSex\030\007 \002(\021\"\020\n\016_M"
    "sgCS_Observe\"\016\n\014_MsgCS_Start\",\n\026_MsgCS_S"
    "electedCardReq\022\022\n\nm_lCardIdx\030\001 \002(\021\"\'\n\021_M"
    "sgCS_BettingReq\022\022\n\nm_lBetType\030\001 \002(\021\"E\n\027_"
    "MsgCS_ChoiceRemoveCard\022\016\n\006m_lUSN\030\001 \002(\021\022\032"
    "\n\022m_nRemoveCardIndex\030\002 \002(\005\"4\n\014_MsgCS_Pur"
    "ge\022\017\n\007m_lType\030\001 \002(\021\022\023\n\013m_lPurgeUSN\030\002 \002(\021"
    "\"/\n\014_MsgCS_Abuse\022\017\n\007m_lType\030\001 \002(\021\022\016\n\006m_s"
    "Day\030\002 \002(\t\"*\n\023_MsgCS_AskPurgeVote\022\023\n\013m_lP"
    "urgeUSN\030\001 \002(\021\"+\n\026_MsgCS_AnswerPurgeVote\022"
    "\021\n\tm_lAnswer\030\001 \002(\021\"@\n\033_MsgCS_WaitingUser"
    "TicketReq\022\017\n\007m_nType\030\001 \002(\005\022\020\n\010m_bValue\030\002"
    " \002(\021\"!\n\037_MsgCS_UpdateWaitingUserInfoReq\""
    "(\n\020_MsgCS_SoundType\022\024\n\014m_lSoundType\030\001 \002("
    "\021\"4\n\016_MsgCS_ExitQue\022\017\n\007m_lExit\030\001 \002(\021\022\021\n\t"
    "m_bAction\030\002 \002(\021\"\"\n\017_MsgCS_Continue\022\017\n\007m_"
    "lExit\030\001 \002(\021\"$\n\016_MsgCS_RuleSet\022\022\n\nm_nRule"
    "Idx\030\001 \002(\005\"\027\n\025_MsgCS_GameMasterCall\"B\n\024_M"
    "sgCS_FieldReserved\022\024\n\014m_nReserved1\030\001 \002(\005"
    "\022\024\n\014m_nReserved2\030\002 \002(\005\"f\n\017_MsgCS_JokboSe"
    "t\022\017\n\007m_lKey1\030\001 \002(\021\022\017\n\007m_lKey2\030\002 \002(\021\022\017\n\007m"
    "_lKey3\030\003 \002(\021\022\017\n\007m_lKey4\030\004 \002(\021\022\017\n\007m_lKey5"
    "\030\005 \002(\021\"(\n\025_MsgCS_TestKeySetting\022\017\n\007m_nCh"
    "ar\030\001 \002(\r\"%\n\022_MsgCS_CheckNotice\022\017\n\007m_nTyp"
    "e\030\001 \002(\005\"\036\n\n_MsgCS_Ack\022\020\n\010m_nTagID\030\001 \002(\005\""
    "\r\n\013_MsgCS_Ping\"\311\001\n\022_MsgSC_UserJoinAns\022\020\n"
    "\010m_lState\030\001 \002(\021\022\020\n\010m_nEnter\030\002 \002(\005\022\016\n\006m_n"
    "Set\030\003 \002(\005\022\026\n\016m_lChannel_idx\030\004 \002(\005\022\023\n\013m_l"
    "OwnerUSN\030\005 \002(\021\022\022\n\nm_lBossUSN\030\006 \002(\021\022\027\n\017m_"
    "nRoomPurgeCnt\030\007 \002(\005\022%\n\010m_option\030\010 \002(\0132\023."
    "Game_Poker._Option\":\n\022_MsgSC_UserJoinErr"
    "\022\016\n\006m_lUSN\030\001 \002(\021\022\024\n\014m_lErrorCode\030\002 \002(\021\"v"
    "\n\025_MsgSC_UserDisconnect\022\016\n\006m_lUSN\030\001 \002(\021\022"
    "&\n\007m_uinfo\030\002 \002(\0132\025.Game_Poker._UserInfo\022"
    "\020\n\010m_lState\030\003 \002(\021\022\023\n\013m_lOwnerUSN\030\004 \002(\021\"\242"
    "\001\n\017_MsgSC_CardData\022\022\n\nm_nDealCnt\030\001 \002(\005\022\025"
    "\n\rm_lCardsDealt\030\002 \002(\021\022%\n\tm_tblCard\030\003 \003(\013"
    "2\022.Game_Poker._Cards\022&\n\nm_tblMoney\030\004 \003(\013"
    "2\022.Game_Poker._Money\022\025\n\rm_llPoolMoney\030\005 "
    "\002(\022\"\310\001\n\017_MsgSC_EntryAns\022\016\n\006m_lUSN\030\001 \002(\021\022"
    "\020\n\010m_nIndex\030\002 \002(\005\022\023\n\013m_lOwnerUSN\030\003 \002(\021\022&"
    "\n\007m_tblUI\030\004 \003(\0132\025.Game_Poker._UserInfo\022&"
    "\n\nm_tblMoney\030\005 \003(\0132\022.Game_Poker._Money\022\027"
    "\n\017m_bWelcomeSound\030\006 \002(\021\022\025\n\rm_lObserveCnt"
    "\030\007 \002(\021\"9\n\022_MsgSC_EntryReject\022\017\n\007m_lType\030"
    "\001 \002(\021\022\022\n\nm_llCMoney\030\002 \002(\022\"\227\001\n\021_MsgSC_Obs"
    "erveAns\022\016\n\006m_lUSN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002("
    "\005\022\023\n\013m_lOwnerUSN\030\003 \002(\021\022&\n\007m_uinfo\030\004 \002(\0132"
    "\025.Game_Poker._UserInfo\022#\n\007m_money\030\005 \002(\0132"
    "\022.Game_Poker._Money\"\021\n\017_MsgSC_StartReq\"N"
    "\n\017_MsgSC_StartAns\022\020\n\010m_lState\030\001 \002(\021\022\021\n\tm"
    "_vtState\030\002 \003(\021\022\026\n\016m_llSystemTime\030\003 \002(\022\"\020"
    "\n\016_MsgSC_NoStart\"\257\001\n\020_MsgSC_DealCards\022\022\n"
    "\nm_lBossUSN\030\001 \002(\021\022\020\n\010m_lState\030\002 \002(\021\022\017\n\007m"
    "_nType\030\003 \002(\005\022%\n\tm_tblCard\030\004 \003(\0132\022.Game_P"
    "oker._Cards\022&\n\nm_tblMoney\030\005 \003(\0132\022.Game_P"
    "oker._Money\022\025\n\rm_llPoolMoney\030\006 \002(\022\"h\n\026_M"
    "sgSC_SelectedCardAns\022\016\n\006m_lUSN\030\001 \002(\021\022\021\n\t"
    "m_nSelect\030\002 \002(\005\022\024\n\014m_lCardIndex\030\003 \002(\021\022\025\n"
    "\rm_lChoiceType\030\004 \002(\021\"a\n\023_MsgSC_DealOpenC"
    "ard\022\020\n\010m_lState\030\001 \002(\021\022%\n\tm_tblCard\030\002 \003(\013"
    "2\022.Game_Poker._Cards\022\021\n\tm_vtState\030\003 \003(\021\""
    "x\n\017_MsgSC_DealCard\022\022\n\nm_lBossUSN\030\001 \002(\021\022\017"
    "\n\007m_nType\030\002 \002(\005\022\025\n\rm_lCardsDealt\030\003 \002(\021\022)"
    "\n\013m_vtOneCard\030\004 \003(\0132\024.Game_Poker._OneCar"
    "d\"6\n\013_MsgSC_Boss\022\022\n\nm_lBossUSN\030\001 \002(\021\022\023\n\013"
    "m_nBossRank\030\002 \002(\005\":\n\016_MsgSC_Betting\022\021\n\tm"
    "_lBetUSN\030\001 \002(\021\022\025\n\rm_lBetBtnType\030\002 \002(\021\"\242\001"
    "\n\021_MsgSC_BettingAns\022\020\n\010m_nIndex\030\001 \002(\005\022\022\n"
    "\nm_lBetType\030\002 \002(\021\022#\n\007m_money\030\003 \002(\0132\022.Gam"
    "e_Poker._Money\022,\n\rm_vtCallMoney\030\004 \003(\0132\025."
    "Game_Poker._VecMoney\022\024\n\014m_lPoolMoney\030\005 \002"
    "(\022\"\354\002\n\024_MsgSC_BettingAnsMsg\022\016\n\006m_lUSN\030\001 "
    "\002(\021\022\020\n\010m_nIndex\030\002 \002(\005\022\021\n\tm_BetType\030\003 \002(\021"
    "\022\027\n\017m_bBettingMoney\030\004 \002(\021\022\024\n\014m_bMoneyLac"
    "k\030\005 \002(\021\022\030\n\020m_bCallMoneyZero\030\006 \002(\021\022\025\n\rm_l"
    "lCallMoney\030\007 \002(\022\022\026\n\016m_llRaiseMoney\030\010 \002(\022"
    "\022\025\n\rm_llSideMoney\030\t \002(\022\022\022\n\nm_lBetType\030\n "
    "\002(\021\022\022\n\nm_lBetTurn\030\013 \002(\021\022#\n\007m_money\030\014 \002(\013"
    "2\022.Game_Poker._Money\022,\n\rm_vtCallMoney\030\r "
    "\003(\0132\025.Game_Poker._VecMoney\022\025\n\rm_llPoolMo"
    "ney\030\016 \002(\022\"m\n\025_MsgSC_DealHiddenCard\022\022\n\nm_"
    "lBossUSN\030\001 \002(\021\022\025\n\rm_lCardsDealt\030\002 \002(\021\022)\n"
    "\013m_vtOneCard\030\003 \003(\0132\024.Game_Poker._OneCard"
    "\")\n\020_MsgSC_AnteMoney\022\025\n\rm_llAnteMoney\030\001 "
    "\002(\022\"J\n\025_MsgSC_RuleQuaterHalf\022\032\n\022m_llRule"
    "QuaterHalf\030\001 \002(\022\022\025\n\rm_llPoolMoney\030\002 \002(\022\""
    "\355\002\n\017_MsgSC_Finished\022\020\n\010m_lState\030\001 \002(\021\022\021\n"
    "\tm_bGiveUp\030\002 \002(\021\022\017\n\007m_lRank\030\003 \002(\021\022\022\n\nm_l"
    "BossUSN\030\004 \002(\021\022\025\n\rm_llGiveMoney\030\005 \002(\022\022\017\n\007"
    "m_vtWin\030\006 \003(\005\022\022\n\nm_vtResult\030\007 \003(\005\022\025\n\rm_v"
    "tGiveMoney\030\010 \003(\022\022%\n\tm_tblCard\030\t \003(\0132\022.Ga"
    "me_Poker._Cards\022&\n\nm_tblMoney\030\n \003(\0132\022.Ga"
    "me_Poker._Money\022\025\n\rm_llPoolMoney\030\013 \002(\022\022,"
    "\n\rm_vtUserMoney\030\014 \003(\0132\025.Game_Poker.UserM"
    "oney\022\024\n\014m_lResultIdx\030\r \002(\021\022\023\n\013m_llJackpo"
    "t\030\016 \002(\022\"C\n\016_MsgSC_NewGame\0221\n\017m_vtWinLose"
    "Info\030\001 \003(\0132\030.Game_Poker._WinLoseInfo\"$\n\022"
    "_MsgSC_ContinueAns\022\016\n\006m_lUSN\030\001 \002(\021\"D\n\017_M"
    "sgSC_Continue\0221\n\017m_vtWinLoseInfo\030\001 \003(\0132\030"
    ".Game_Poker._WinLoseInfo\"#\n\020_MsgSC_Syste"
    "mMsg\022\017\n\007m_lType\030\001 \002(\021\"\021\n\017_MsgSC_PurgeAns"
    "\"O\n\020_MsgSC_PurgeInfo\022)\n\014m_vtPurgeUSN\030\001 \003"
    "(\0132\023.Game_Poker._VecUSN\022\020\n\010m_nCount\030\002 \002("
    "\005\"K\n\024_MsgSC_SetPurgeMoney\022\016\n\006m_lUSN\030\001 \002("
    "\021\022#\n\007m_money\030\002 \002(\0132\022.Game_Poker._Money\"M"
    "\n\025_MsgSC_AssaItemNotify\022\016\n\006m_lUSN\030\001 \002(\021\022"
    "\023\n\013m_lRankType\030\002 \002(\021\022\017\n\007m_sItem\030\003 \002(\t\"n\n"
    "\031_MsgSC_ThankYouItemNotify\022\016\n\006m_lUSN\030\001 \002"
    "(\021\022\023\n\013m_lRankType\030\002 \002(\021\022\033\n\023m_llBasicDDan"
    "gMoney\030\003 \002(\022\022\017\n\007m_sItem\030\004 \002(\t\"M\n\025_MsgSC_"
    "MadeItemNotify\022\016\n\006m_lUSN\030\001 \002(\021\022\023\n\013m_lRan"
    "kType\030\002 \002(\021\022\017\n\007m_sItem\030\003 \002(\t\"\217\001\n\025_MsgSC_"
    "ExtMoneyNotify\022\016\n\006m_lUSN\030\001 \002(\021\022\022\n\nm_bExt"
    "Type\030\002 \002(\021\022\022\n\nm_llCMoney\030\003 \002(\022\022\023\n\013m_llCa"
    "shBox\030\004 \002(\022\022\024\n\014m_llExtMoney\030\005 \002(\022\022\023\n\013m_l"
    "lExtDate\030\006 \002(\022\"p\n\027_MsgSC_GameEndSystemMs"
    "g\022\017\n\007m_lType\030\001 \002(\021\022\016\n\006m_lUSN\030\002 \002(\021\022\021\n\tm_"
    "bGiveUp\030\003 \002(\021\022\021\n\tm_llMoney\030\004 \002(\022\022\016\n\006m_sM"
    "sg\030\005 \002(\t\"e\n\031_MsgSC_ChangeAvatarNotify\022\016\n"
    "\006m_lUSN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002(\005\022&\n\007m_uin"
    "fo\030\003 \002(\0132\025.Game_Poker._UserInfo\"\021\n\017_MsgS"
    "C_AbuseAns\"M\n\023_MsgSC_SoundTypeAns\022\016\n\006m_l"
    "USN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002(\005\022\024\n\014m_lSoundT"
    "ype\030\003 \002(\021\"\"\n\r_MsgSC_FMoney\022\021\n\tm_sFMoney\030"
    "\001 \002(\t\"~\n\021_MsgSC_ItemNotify\022\030\n\020m_lLimitTo"
    "talCnt\030\001 \002(\021\022\030\n\020m_lLimitTodayCnt\030\002 \002(\021\022\034"
    "\n\024m_bInfinitySpeedItem\030\003 \002(\021\022\027\n\017m_llSpee"
    "dToTime\030\004 \002(\022\"P\n\034_MsgSC_DisconnectMoneyN"
    "otify\022\023\n\013m_sNickName\030\001 \002(\t\022\033\n\023m_llDiscon"
    "nectMoney\030\002 \002(\022\"T\n\016_MsgSC_ExitNtf\022\016\n\006m_l"
    "USN\030\001 \002(\021\022\020\n\010m_nIndex\030\002 \002(\005\022\017\n\007m_lExit\030\003"
    " \002(\021\022\017\n\007m_bExit\030\004 \002(\021\"w\n\023_MsgSC_RematchO"
    "KAns\022\016\n\006m_lUSN\030\001 \002(\021\022\025\n\rm_llPoolMoney\030\002 "
    "\002(\022\022#\n\007m_money\030\003 \002(\0132\022.Game_Poker._Money"
    "\022\024\n\014m_bRematchOK\030\004 \002(\021\"\'\n\021_MsgSC_RuleNot"
    "ify\022\022\n\nm_nRuleIdx\030\001 \002(\005\"\036\n\034_MsgSC_AllowE"
    "ntryWaitingUser\"s\n\034_MsgSC_AllWaitingUser"
    "DataNtf\022\032\n\022m_bSendWaitingUser\030\001 \002(\021\0227\n\021m"
    "_WaitingUserData\030\002 \003(\0132\034.Game_Poker._WAI"
    "TINGUSERDATA\"G\n\030_MsgSC_UserDataChangeNtf"
    "\022+\n\nm_userData\030\001 \002(\0132\027.Game_Poker._RCUse"
    "rData\"V\n\025_MsgSC_RefillMoneyNtf\022\016\n\006m_lUSN"
    "\030\001 \002(\021\022\024\n\014m_nRefillCnt\030\002 \002(\005\022\027\n\017m_llRefi"
    "llMoney\030\003 \002(\022\"B\n\026_MsgSC_JackpotMoneyNtf\022"
    "\016\n\006m_lUSN\030\001 \002(\021\022\030\n\020m_llJackpotMoney\030\002 \002("
    "\022\"`\n\031_MsgSC_GuardianAngelMoney\022\016\n\006m_lUSN"
    "\030\001 \002(\021\022\033\n\023m_nGuardianAngelCnt\030\002 \002(\005\022\026\n\016m"
    "_llAngelMoney\030\003 \002(\022\"1\n\030_MsgSC_GameMaster"
    "CallNtf\022\025\n\rm_lGMCall_USN\030\001 \002(\021\",\n\022_MsgSC"
    "_ObserverCnt\022\026\n\016m_nObserverCnt\030\001 \002(\005\"!\n\014"
    "_MsgSC_Bonus\022\021\n\tm_llBonus\030\001 \002(\022\"*\n\023_MsgS"
    "C_PoliceNotify\022\023\n\013m_policeMsg\030\001 \002(\t", 10795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Game_Poker.proto", &protobuf_RegisterTypes);
  _Cards::default_instance_ = new _Cards();
  _Money::default_instance_ = new _Money();
  UserMoney::default_instance_ = new UserMoney();
  _CWinLose::default_instance_ = new _CWinLose();
  _UserInfo::default_instance_ = new _UserInfo();
  _OneCard::default_instance_ = new _OneCard();
  _VecMoney::default_instance_ = new _VecMoney();
  _WinLoseInfo::default_instance_ = new _WinLoseInfo();
  _VecUSN::default_instance_ = new _VecUSN();
  _WAITINGUSERDATA::default_instance_ = new _WAITINGUSERDATA();
  CRefill::default_instance_ = new CRefill();
  _ItemList::default_instance_ = new _ItemList();
  _Item::default_instance_ = new _Item();
  _RCUser::default_instance_ = new _RCUser();
  _RCUserData::default_instance_ = new _RCUserData();
  _Option::default_instance_ = new _Option();
  _BettingMsg::default_instance_ = new _BettingMsg();
  _BettingMsgTable::default_instance_ = new _BettingMsgTable();
  _MoneyTable::default_instance_ = new _MoneyTable();
  _CardTable::default_instance_ = new _CardTable();
  _UITable::default_instance_ = new _UITable();
  _RCRoomData::default_instance_ = new _RCRoomData();
  _SPUserBaseInfo::default_instance_ = new _SPUserBaseInfo();
  _MsgCS_Entry::default_instance_ = new _MsgCS_Entry();
  _MsgCS_Observe::default_instance_ = new _MsgCS_Observe();
  _MsgCS_Start::default_instance_ = new _MsgCS_Start();
  _MsgCS_SelectedCardReq::default_instance_ = new _MsgCS_SelectedCardReq();
  _MsgCS_BettingReq::default_instance_ = new _MsgCS_BettingReq();
  _MsgCS_ChoiceRemoveCard::default_instance_ = new _MsgCS_ChoiceRemoveCard();
  _MsgCS_Purge::default_instance_ = new _MsgCS_Purge();
  _MsgCS_Abuse::default_instance_ = new _MsgCS_Abuse();
  _MsgCS_AskPurgeVote::default_instance_ = new _MsgCS_AskPurgeVote();
  _MsgCS_AnswerPurgeVote::default_instance_ = new _MsgCS_AnswerPurgeVote();
  _MsgCS_WaitingUserTicketReq::default_instance_ = new _MsgCS_WaitingUserTicketReq();
  _MsgCS_UpdateWaitingUserInfoReq::default_instance_ = new _MsgCS_UpdateWaitingUserInfoReq();
  _MsgCS_SoundType::default_instance_ = new _MsgCS_SoundType();
  _MsgCS_ExitQue::default_instance_ = new _MsgCS_ExitQue();
  _MsgCS_Continue::default_instance_ = new _MsgCS_Continue();
  _MsgCS_RuleSet::default_instance_ = new _MsgCS_RuleSet();
  _MsgCS_GameMasterCall::default_instance_ = new _MsgCS_GameMasterCall();
  _MsgCS_FieldReserved::default_instance_ = new _MsgCS_FieldReserved();
  _MsgCS_JokboSet::default_instance_ = new _MsgCS_JokboSet();
  _MsgCS_TestKeySetting::default_instance_ = new _MsgCS_TestKeySetting();
  _MsgCS_CheckNotice::default_instance_ = new _MsgCS_CheckNotice();
  _MsgCS_Ack::default_instance_ = new _MsgCS_Ack();
  _MsgCS_Ping::default_instance_ = new _MsgCS_Ping();
  _MsgSC_UserJoinAns::default_instance_ = new _MsgSC_UserJoinAns();
  _MsgSC_UserJoinErr::default_instance_ = new _MsgSC_UserJoinErr();
  _MsgSC_UserDisconnect::default_instance_ = new _MsgSC_UserDisconnect();
  _MsgSC_CardData::default_instance_ = new _MsgSC_CardData();
  _MsgSC_EntryAns::default_instance_ = new _MsgSC_EntryAns();
  _MsgSC_EntryReject::default_instance_ = new _MsgSC_EntryReject();
  _MsgSC_ObserveAns::default_instance_ = new _MsgSC_ObserveAns();
  _MsgSC_StartReq::default_instance_ = new _MsgSC_StartReq();
  _MsgSC_StartAns::default_instance_ = new _MsgSC_StartAns();
  _MsgSC_NoStart::default_instance_ = new _MsgSC_NoStart();
  _MsgSC_DealCards::default_instance_ = new _MsgSC_DealCards();
  _MsgSC_SelectedCardAns::default_instance_ = new _MsgSC_SelectedCardAns();
  _MsgSC_DealOpenCard::default_instance_ = new _MsgSC_DealOpenCard();
  _MsgSC_DealCard::default_instance_ = new _MsgSC_DealCard();
  _MsgSC_Boss::default_instance_ = new _MsgSC_Boss();
  _MsgSC_Betting::default_instance_ = new _MsgSC_Betting();
  _MsgSC_BettingAns::default_instance_ = new _MsgSC_BettingAns();
  _MsgSC_BettingAnsMsg::default_instance_ = new _MsgSC_BettingAnsMsg();
  _MsgSC_DealHiddenCard::default_instance_ = new _MsgSC_DealHiddenCard();
  _MsgSC_AnteMoney::default_instance_ = new _MsgSC_AnteMoney();
  _MsgSC_RuleQuaterHalf::default_instance_ = new _MsgSC_RuleQuaterHalf();
  _MsgSC_Finished::default_instance_ = new _MsgSC_Finished();
  _MsgSC_NewGame::default_instance_ = new _MsgSC_NewGame();
  _MsgSC_ContinueAns::default_instance_ = new _MsgSC_ContinueAns();
  _MsgSC_Continue::default_instance_ = new _MsgSC_Continue();
  _MsgSC_SystemMsg::default_instance_ = new _MsgSC_SystemMsg();
  _MsgSC_PurgeAns::default_instance_ = new _MsgSC_PurgeAns();
  _MsgSC_PurgeInfo::default_instance_ = new _MsgSC_PurgeInfo();
  _MsgSC_SetPurgeMoney::default_instance_ = new _MsgSC_SetPurgeMoney();
  _MsgSC_AssaItemNotify::default_instance_ = new _MsgSC_AssaItemNotify();
  _MsgSC_ThankYouItemNotify::default_instance_ = new _MsgSC_ThankYouItemNotify();
  _MsgSC_MadeItemNotify::default_instance_ = new _MsgSC_MadeItemNotify();
  _MsgSC_ExtMoneyNotify::default_instance_ = new _MsgSC_ExtMoneyNotify();
  _MsgSC_GameEndSystemMsg::default_instance_ = new _MsgSC_GameEndSystemMsg();
  _MsgSC_ChangeAvatarNotify::default_instance_ = new _MsgSC_ChangeAvatarNotify();
  _MsgSC_AbuseAns::default_instance_ = new _MsgSC_AbuseAns();
  _MsgSC_SoundTypeAns::default_instance_ = new _MsgSC_SoundTypeAns();
  _MsgSC_FMoney::default_instance_ = new _MsgSC_FMoney();
  _MsgSC_ItemNotify::default_instance_ = new _MsgSC_ItemNotify();
  _MsgSC_DisconnectMoneyNotify::default_instance_ = new _MsgSC_DisconnectMoneyNotify();
  _MsgSC_ExitNtf::default_instance_ = new _MsgSC_ExitNtf();
  _MsgSC_RematchOKAns::default_instance_ = new _MsgSC_RematchOKAns();
  _MsgSC_RuleNotify::default_instance_ = new _MsgSC_RuleNotify();
  _MsgSC_AllowEntryWaitingUser::default_instance_ = new _MsgSC_AllowEntryWaitingUser();
  _MsgSC_AllWaitingUserDataNtf::default_instance_ = new _MsgSC_AllWaitingUserDataNtf();
  _MsgSC_UserDataChangeNtf::default_instance_ = new _MsgSC_UserDataChangeNtf();
  _MsgSC_RefillMoneyNtf::default_instance_ = new _MsgSC_RefillMoneyNtf();
  _MsgSC_JackpotMoneyNtf::default_instance_ = new _MsgSC_JackpotMoneyNtf();
  _MsgSC_GuardianAngelMoney::default_instance_ = new _MsgSC_GuardianAngelMoney();
  _MsgSC_GameMasterCallNtf::default_instance_ = new _MsgSC_GameMasterCallNtf();
  _MsgSC_ObserverCnt::default_instance_ = new _MsgSC_ObserverCnt();
  _MsgSC_Bonus::default_instance_ = new _MsgSC_Bonus();
  _MsgSC_PoliceNotify::default_instance_ = new _MsgSC_PoliceNotify();
  _Cards::default_instance_->InitAsDefaultInstance();
  _Money::default_instance_->InitAsDefaultInstance();
  UserMoney::default_instance_->InitAsDefaultInstance();
  _CWinLose::default_instance_->InitAsDefaultInstance();
  _UserInfo::default_instance_->InitAsDefaultInstance();
  _OneCard::default_instance_->InitAsDefaultInstance();
  _VecMoney::default_instance_->InitAsDefaultInstance();
  _WinLoseInfo::default_instance_->InitAsDefaultInstance();
  _VecUSN::default_instance_->InitAsDefaultInstance();
  _WAITINGUSERDATA::default_instance_->InitAsDefaultInstance();
  CRefill::default_instance_->InitAsDefaultInstance();
  _ItemList::default_instance_->InitAsDefaultInstance();
  _Item::default_instance_->InitAsDefaultInstance();
  _RCUser::default_instance_->InitAsDefaultInstance();
  _RCUserData::default_instance_->InitAsDefaultInstance();
  _Option::default_instance_->InitAsDefaultInstance();
  _BettingMsg::default_instance_->InitAsDefaultInstance();
  _BettingMsgTable::default_instance_->InitAsDefaultInstance();
  _MoneyTable::default_instance_->InitAsDefaultInstance();
  _CardTable::default_instance_->InitAsDefaultInstance();
  _UITable::default_instance_->InitAsDefaultInstance();
  _RCRoomData::default_instance_->InitAsDefaultInstance();
  _SPUserBaseInfo::default_instance_->InitAsDefaultInstance();
  _MsgCS_Entry::default_instance_->InitAsDefaultInstance();
  _MsgCS_Observe::default_instance_->InitAsDefaultInstance();
  _MsgCS_Start::default_instance_->InitAsDefaultInstance();
  _MsgCS_SelectedCardReq::default_instance_->InitAsDefaultInstance();
  _MsgCS_BettingReq::default_instance_->InitAsDefaultInstance();
  _MsgCS_ChoiceRemoveCard::default_instance_->InitAsDefaultInstance();
  _MsgCS_Purge::default_instance_->InitAsDefaultInstance();
  _MsgCS_Abuse::default_instance_->InitAsDefaultInstance();
  _MsgCS_AskPurgeVote::default_instance_->InitAsDefaultInstance();
  _MsgCS_AnswerPurgeVote::default_instance_->InitAsDefaultInstance();
  _MsgCS_WaitingUserTicketReq::default_instance_->InitAsDefaultInstance();
  _MsgCS_UpdateWaitingUserInfoReq::default_instance_->InitAsDefaultInstance();
  _MsgCS_SoundType::default_instance_->InitAsDefaultInstance();
  _MsgCS_ExitQue::default_instance_->InitAsDefaultInstance();
  _MsgCS_Continue::default_instance_->InitAsDefaultInstance();
  _MsgCS_RuleSet::default_instance_->InitAsDefaultInstance();
  _MsgCS_GameMasterCall::default_instance_->InitAsDefaultInstance();
  _MsgCS_FieldReserved::default_instance_->InitAsDefaultInstance();
  _MsgCS_JokboSet::default_instance_->InitAsDefaultInstance();
  _MsgCS_TestKeySetting::default_instance_->InitAsDefaultInstance();
  _MsgCS_CheckNotice::default_instance_->InitAsDefaultInstance();
  _MsgCS_Ack::default_instance_->InitAsDefaultInstance();
  _MsgCS_Ping::default_instance_->InitAsDefaultInstance();
  _MsgSC_UserJoinAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_UserJoinErr::default_instance_->InitAsDefaultInstance();
  _MsgSC_UserDisconnect::default_instance_->InitAsDefaultInstance();
  _MsgSC_CardData::default_instance_->InitAsDefaultInstance();
  _MsgSC_EntryAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_EntryReject::default_instance_->InitAsDefaultInstance();
  _MsgSC_ObserveAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_StartReq::default_instance_->InitAsDefaultInstance();
  _MsgSC_StartAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_NoStart::default_instance_->InitAsDefaultInstance();
  _MsgSC_DealCards::default_instance_->InitAsDefaultInstance();
  _MsgSC_SelectedCardAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_DealOpenCard::default_instance_->InitAsDefaultInstance();
  _MsgSC_DealCard::default_instance_->InitAsDefaultInstance();
  _MsgSC_Boss::default_instance_->InitAsDefaultInstance();
  _MsgSC_Betting::default_instance_->InitAsDefaultInstance();
  _MsgSC_BettingAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_BettingAnsMsg::default_instance_->InitAsDefaultInstance();
  _MsgSC_DealHiddenCard::default_instance_->InitAsDefaultInstance();
  _MsgSC_AnteMoney::default_instance_->InitAsDefaultInstance();
  _MsgSC_RuleQuaterHalf::default_instance_->InitAsDefaultInstance();
  _MsgSC_Finished::default_instance_->InitAsDefaultInstance();
  _MsgSC_NewGame::default_instance_->InitAsDefaultInstance();
  _MsgSC_ContinueAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_Continue::default_instance_->InitAsDefaultInstance();
  _MsgSC_SystemMsg::default_instance_->InitAsDefaultInstance();
  _MsgSC_PurgeAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_PurgeInfo::default_instance_->InitAsDefaultInstance();
  _MsgSC_SetPurgeMoney::default_instance_->InitAsDefaultInstance();
  _MsgSC_AssaItemNotify::default_instance_->InitAsDefaultInstance();
  _MsgSC_ThankYouItemNotify::default_instance_->InitAsDefaultInstance();
  _MsgSC_MadeItemNotify::default_instance_->InitAsDefaultInstance();
  _MsgSC_ExtMoneyNotify::default_instance_->InitAsDefaultInstance();
  _MsgSC_GameEndSystemMsg::default_instance_->InitAsDefaultInstance();
  _MsgSC_ChangeAvatarNotify::default_instance_->InitAsDefaultInstance();
  _MsgSC_AbuseAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_SoundTypeAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_FMoney::default_instance_->InitAsDefaultInstance();
  _MsgSC_ItemNotify::default_instance_->InitAsDefaultInstance();
  _MsgSC_DisconnectMoneyNotify::default_instance_->InitAsDefaultInstance();
  _MsgSC_ExitNtf::default_instance_->InitAsDefaultInstance();
  _MsgSC_RematchOKAns::default_instance_->InitAsDefaultInstance();
  _MsgSC_RuleNotify::default_instance_->InitAsDefaultInstance();
  _MsgSC_AllowEntryWaitingUser::default_instance_->InitAsDefaultInstance();
  _MsgSC_AllWaitingUserDataNtf::default_instance_->InitAsDefaultInstance();
  _MsgSC_UserDataChangeNtf::default_instance_->InitAsDefaultInstance();
  _MsgSC_RefillMoneyNtf::default_instance_->InitAsDefaultInstance();
  _MsgSC_JackpotMoneyNtf::default_instance_->InitAsDefaultInstance();
  _MsgSC_GuardianAngelMoney::default_instance_->InitAsDefaultInstance();
  _MsgSC_GameMasterCallNtf::default_instance_->InitAsDefaultInstance();
  _MsgSC_ObserverCnt::default_instance_->InitAsDefaultInstance();
  _MsgSC_Bonus::default_instance_->InitAsDefaultInstance();
  _MsgSC_PoliceNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game_5fPoker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game_5fPoker_2eproto {
  StaticDescriptorInitializer_Game_5fPoker_2eproto() {
    protobuf_AddDesc_Game_5fPoker_2eproto();
  }
} static_descriptor_initializer_Game_5fPoker_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* _Cards_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _Cards_state_descriptor_;
}
bool _Cards_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const _Cards_state _Cards::CARDTYPE_NORMAL;
const _Cards_state _Cards::CARDTYPE_HIDDEN;
const _Cards_state _Cards::CARDTYPE_SAME;
const _Cards_state _Cards::state_MIN;
const _Cards_state _Cards::state_MAX;
const int _Cards::state_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int _Cards::kMVtCardsFieldNumber;
const int _Cards::kMLResultIdxFieldNumber;
const int _Cards::kMVUserUSNFieldNumber;
#endif  // !_MSC_VER

_Cards::_Cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _Cards::InitAsDefaultInstance() {
  m_vuserusn_ = const_cast< ::Game_Poker::_VecUSN*>(&::Game_Poker::_VecUSN::default_instance());
}

_Cards::_Cards(const _Cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _Cards::SharedCtor() {
  _cached_size_ = 0;
  m_vuserusn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_Cards::~_Cards() {
  SharedDtor();
}

void _Cards::SharedDtor() {
  if (this != default_instance_) {
    delete m_vuserusn_;
  }
}

void _Cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _Cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _Cards_descriptor_;
}

const _Cards& _Cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_Cards* _Cards::default_instance_ = NULL;

_Cards* _Cards::New() const {
  return new _Cards;
}

void _Cards::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_m_vuserusn()) {
      if (m_vuserusn_ != NULL) m_vuserusn_->::Game_Poker::_VecUSN::Clear();
    }
  }
  m_vtcards_.Clear();
  m_lresultidx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _Cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 m_vtCards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_m_vtcards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtcards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_m_vtCards;
        if (input->ExpectTag(16)) goto parse_m_lResultIdx;
        break;
      }
      
      // repeated int32 m_lResultIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_lresultidx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_lresultidx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lResultIdx;
        if (input->ExpectTag(26)) goto parse_m_vUserUSN;
        break;
      }
      
      // required .Game_Poker._VecUSN m_vUserUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vUserUSN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_vuserusn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _Cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 m_vtCards = 1;
  for (int i = 0; i < this->m_vtcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->m_vtcards(i), output);
  }
  
  // repeated int32 m_lResultIdx = 2;
  for (int i = 0; i < this->m_lresultidx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_lresultidx(i), output);
  }
  
  // required .Game_Poker._VecUSN m_vUserUSN = 3;
  if (has_m_vuserusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_vuserusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _Cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 m_vtCards = 1;
  for (int i = 0; i < this->m_vtcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->m_vtcards(i), target);
  }
  
  // repeated int32 m_lResultIdx = 2;
  for (int i = 0; i < this->m_lresultidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_lresultidx(i), target);
  }
  
  // required .Game_Poker._VecUSN m_vUserUSN = 3;
  if (has_m_vuserusn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_vuserusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _Cards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .Game_Poker._VecUSN m_vUserUSN = 3;
    if (has_m_vuserusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_vuserusn());
    }
    
  }
  // repeated int32 m_vtCards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtcards(i));
    }
    total_size += 1 * this->m_vtcards_size() + data_size;
  }
  
  // repeated int32 m_lResultIdx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_lresultidx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_lresultidx(i));
    }
    total_size += 1 * this->m_lresultidx_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _Cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _Cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _Cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _Cards::MergeFrom(const _Cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcards_.MergeFrom(from.m_vtcards_);
  m_lresultidx_.MergeFrom(from.m_lresultidx_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_m_vuserusn()) {
      mutable_m_vuserusn()->::Game_Poker::_VecUSN::MergeFrom(from.m_vuserusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _Cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _Cards::CopyFrom(const _Cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _Cards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_m_vuserusn()) {
    if (!this->m_vuserusn().IsInitialized()) return false;
  }
  return true;
}

void _Cards::Swap(_Cards* other) {
  if (other != this) {
    m_vtcards_.Swap(&other->m_vtcards_);
    m_lresultidx_.Swap(&other->m_lresultidx_);
    std::swap(m_vuserusn_, other->m_vuserusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _Cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _Cards_descriptor_;
  metadata.reflection = _Cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _Money::kMLlCMoneyFieldNumber;
const int _Money::kMLlCallMoneyFieldNumber;
const int _Money::kMLlSideMoneyFieldNumber;
const int _Money::kMLlCallHabMoneyFieldNumber;
const int _Money::kMLlTakeMoneyFieldNumber;
const int _Money::kMLlJackpotMoneyFieldNumber;
const int _Money::kMLBetStateFieldNumber;
const int _Money::kMLBetReceiveFieldNumber;
const int _Money::kMLBetCountFieldNumber;
const int _Money::kMLResultIdxFieldNumber;
const int _Money::kMSMoneyMsgFieldNumber;
#endif  // !_MSC_VER

_Money::_Money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _Money::InitAsDefaultInstance() {
}

_Money::_Money(const _Money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _Money::SharedCtor() {
  _cached_size_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  m_lbetstate_ = 0;
  m_lbetreceive_ = 0;
  m_lbetcount_ = 0;
  m_lresultidx_ = 0;
  m_smoneymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_Money::~_Money() {
  SharedDtor();
}

void _Money::SharedDtor() {
  if (m_smoneymsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smoneymsg_;
  }
  if (this != default_instance_) {
  }
}

void _Money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _Money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _Money_descriptor_;
}

const _Money& _Money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_Money* _Money::default_instance_ = NULL;

_Money* _Money::New() const {
  return new _Money;
}

void _Money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llsidemoney_ = GOOGLE_LONGLONG(0);
    m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
    m_lltakemoney_ = GOOGLE_LONGLONG(0);
    m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
    m_lbetstate_ = 0;
    m_lbetreceive_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lbetcount_ = 0;
    m_lresultidx_ = 0;
    if (has_m_smoneymsg()) {
      if (m_smoneymsg_ != &::google::protobuf::internal::kEmptyString) {
        m_smoneymsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _Money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llCMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llCallMoney;
        break;
      }
      
      // required sint64 m_llCallMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llSideMoney;
        break;
      }
      
      // required sint64 m_llSideMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSideMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsidemoney_)));
          set_has_m_llsidemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCallHabMoney;
        break;
      }
      
      // required sint64 m_llCallHabMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallHabMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallhabmoney_)));
          set_has_m_llcallhabmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llTakeMoney;
        break;
      }
      
      // required sint64 m_llTakeMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llTakeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lltakemoney_)));
          set_has_m_lltakemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llJackpotMoney;
        break;
      }
      
      // required sint64 m_llJackpotMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpotMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpotmoney_)));
          set_has_m_lljackpotmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lBetState;
        break;
      }
      
      // required sint32 m_lBetState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetstate_)));
          set_has_m_lbetstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lBetReceive;
        break;
      }
      
      // required sint32 m_lBetReceive = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetReceive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetreceive_)));
          set_has_m_lbetreceive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lBetCount;
        break;
      }
      
      // required sint32 m_lBetCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetcount_)));
          set_has_m_lbetcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lResultIdx;
        break;
      }
      
      // required sint32 m_lResultIdx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lresultidx_)));
          set_has_m_lresultidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_sMoneyMsg;
        break;
      }
      
      // required string m_sMoneyMsg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMoneyMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smoneymsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_smoneymsg().data(), this->m_smoneymsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _Money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llCMoney = 1;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llCallMoney = 2;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llcallmoney(), output);
  }
  
  // required sint64 m_llSideMoney = 3;
  if (has_m_llsidemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llsidemoney(), output);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcallhabmoney(), output);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lltakemoney(), output);
  }
  
  // required sint64 m_llJackpotMoney = 6;
  if (has_m_lljackpotmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_lljackpotmoney(), output);
  }
  
  // required sint32 m_lBetState = 7;
  if (has_m_lbetstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lbetstate(), output);
  }
  
  // required sint32 m_lBetReceive = 8;
  if (has_m_lbetreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->m_lbetreceive(), output);
  }
  
  // required sint32 m_lBetCount = 9;
  if (has_m_lbetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->m_lbetcount(), output);
  }
  
  // required sint32 m_lResultIdx = 10;
  if (has_m_lresultidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->m_lresultidx(), output);
  }
  
  // required string m_sMoneyMsg = 11;
  if (has_m_smoneymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smoneymsg().data(), this->m_smoneymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_smoneymsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _Money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llCMoney = 1;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llcmoney(), target);
  }
  
  // required sint64 m_llCallMoney = 2;
  if (has_m_llcallmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_llcallmoney(), target);
  }
  
  // required sint64 m_llSideMoney = 3;
  if (has_m_llsidemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llsidemoney(), target);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llcallhabmoney(), target);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_lltakemoney(), target);
  }
  
  // required sint64 m_llJackpotMoney = 6;
  if (has_m_lljackpotmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->m_lljackpotmoney(), target);
  }
  
  // required sint32 m_lBetState = 7;
  if (has_m_lbetstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->m_lbetstate(), target);
  }
  
  // required sint32 m_lBetReceive = 8;
  if (has_m_lbetreceive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->m_lbetreceive(), target);
  }
  
  // required sint32 m_lBetCount = 9;
  if (has_m_lbetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->m_lbetcount(), target);
  }
  
  // required sint32 m_lResultIdx = 10;
  if (has_m_lresultidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->m_lresultidx(), target);
  }
  
  // required string m_sMoneyMsg = 11;
  if (has_m_smoneymsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smoneymsg().data(), this->m_smoneymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_smoneymsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _Money::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llCMoney = 1;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llCallMoney = 2;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallmoney());
    }
    
    // required sint64 m_llSideMoney = 3;
    if (has_m_llsidemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsidemoney());
    }
    
    // required sint64 m_llCallHabMoney = 4;
    if (has_m_llcallhabmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallhabmoney());
    }
    
    // required sint64 m_llTakeMoney = 5;
    if (has_m_lltakemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lltakemoney());
    }
    
    // required sint64 m_llJackpotMoney = 6;
    if (has_m_lljackpotmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpotmoney());
    }
    
    // required sint32 m_lBetState = 7;
    if (has_m_lbetstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetstate());
    }
    
    // required sint32 m_lBetReceive = 8;
    if (has_m_lbetreceive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetreceive());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint32 m_lBetCount = 9;
    if (has_m_lbetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetcount());
    }
    
    // required sint32 m_lResultIdx = 10;
    if (has_m_lresultidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lresultidx());
    }
    
    // required string m_sMoneyMsg = 11;
    if (has_m_smoneymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smoneymsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _Money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _Money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _Money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _Money::MergeFrom(const _Money& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llsidemoney()) {
      set_m_llsidemoney(from.m_llsidemoney());
    }
    if (from.has_m_llcallhabmoney()) {
      set_m_llcallhabmoney(from.m_llcallhabmoney());
    }
    if (from.has_m_lltakemoney()) {
      set_m_lltakemoney(from.m_lltakemoney());
    }
    if (from.has_m_lljackpotmoney()) {
      set_m_lljackpotmoney(from.m_lljackpotmoney());
    }
    if (from.has_m_lbetstate()) {
      set_m_lbetstate(from.m_lbetstate());
    }
    if (from.has_m_lbetreceive()) {
      set_m_lbetreceive(from.m_lbetreceive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lbetcount()) {
      set_m_lbetcount(from.m_lbetcount());
    }
    if (from.has_m_lresultidx()) {
      set_m_lresultidx(from.m_lresultidx());
    }
    if (from.has_m_smoneymsg()) {
      set_m_smoneymsg(from.m_smoneymsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _Money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _Money::CopyFrom(const _Money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _Money::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void _Money::Swap(_Money* other) {
  if (other != this) {
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llsidemoney_, other->m_llsidemoney_);
    std::swap(m_llcallhabmoney_, other->m_llcallhabmoney_);
    std::swap(m_lltakemoney_, other->m_lltakemoney_);
    std::swap(m_lljackpotmoney_, other->m_lljackpotmoney_);
    std::swap(m_lbetstate_, other->m_lbetstate_);
    std::swap(m_lbetreceive_, other->m_lbetreceive_);
    std::swap(m_lbetcount_, other->m_lbetcount_);
    std::swap(m_lresultidx_, other->m_lresultidx_);
    std::swap(m_smoneymsg_, other->m_smoneymsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _Money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _Money_descriptor_;
  metadata.reflection = _Money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMoney::kMLUSNFieldNumber;
const int UserMoney::kMLStateFieldNumber;
const int UserMoney::kMLlMoneyFieldNumber;
const int UserMoney::kMLlCallHabMoneyFieldNumber;
const int UserMoney::kMLlTakeMoneyFieldNumber;
const int UserMoney::kMLlDealMoneyFieldNumber;
const int UserMoney::kMSNickNameFieldNumber;
const int UserMoney::kMSDealerTaxFieldNumber;
#endif  // !_MSC_VER

UserMoney::UserMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMoney::InitAsDefaultInstance() {
}

UserMoney::UserMoney(const UserMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lstate_ = 0;
  m_llmoney_ = GOOGLE_LONGLONG(0);
  m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
  m_lltakemoney_ = GOOGLE_LONGLONG(0);
  m_lldealmoney_ = GOOGLE_LONGLONG(0);
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sdealertax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMoney::~UserMoney() {
  SharedDtor();
}

void UserMoney::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_sdealertax_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sdealertax_;
  }
  if (this != default_instance_) {
  }
}

void UserMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMoney_descriptor_;
}

const UserMoney& UserMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

UserMoney* UserMoney::default_instance_ = NULL;

UserMoney* UserMoney::New() const {
  return new UserMoney;
}

void UserMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lstate_ = 0;
    m_llmoney_ = GOOGLE_LONGLONG(0);
    m_llcallhabmoney_ = GOOGLE_LONGLONG(0);
    m_lltakemoney_ = GOOGLE_LONGLONG(0);
    m_lldealmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_sdealertax()) {
      if (m_sdealertax_ != &::google::protobuf::internal::kEmptyString) {
        m_sdealertax_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llMoney;
        break;
      }
      
      // required sint64 m_llMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llmoney_)));
          set_has_m_llmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCallHabMoney;
        break;
      }
      
      // required sint64 m_llCallHabMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallHabMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallhabmoney_)));
          set_has_m_llcallhabmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llTakeMoney;
        break;
      }
      
      // required sint64 m_llTakeMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llTakeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lltakemoney_)));
          set_has_m_lltakemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llDealMoney;
        break;
      }
      
      // required sint64 m_llDealMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llDealMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lldealmoney_)));
          set_has_m_lldealmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_sDealerTax;
        break;
      }
      
      // required string m_sDealerTax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sDealerTax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sdealertax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sdealertax().data(), this->m_sdealertax().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lstate(), output);
  }
  
  // required sint64 m_llMoney = 3;
  if (has_m_llmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llmoney(), output);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcallhabmoney(), output);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lltakemoney(), output);
  }
  
  // required sint64 m_llDealMoney = 6;
  if (has_m_lldealmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_lldealmoney(), output);
  }
  
  // required string m_sNickName = 7;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_snickname(), output);
  }
  
  // required string m_sDealerTax = 8;
  if (has_m_sdealertax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sdealertax().data(), this->m_sdealertax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_sdealertax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lstate(), target);
  }
  
  // required sint64 m_llMoney = 3;
  if (has_m_llmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llmoney(), target);
  }
  
  // required sint64 m_llCallHabMoney = 4;
  if (has_m_llcallhabmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llcallhabmoney(), target);
  }
  
  // required sint64 m_llTakeMoney = 5;
  if (has_m_lltakemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_lltakemoney(), target);
  }
  
  // required sint64 m_llDealMoney = 6;
  if (has_m_lldealmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->m_lldealmoney(), target);
  }
  
  // required string m_sNickName = 7;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_snickname(), target);
  }
  
  // required string m_sDealerTax = 8;
  if (has_m_sdealertax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sdealertax().data(), this->m_sdealertax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_sdealertax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lState = 2;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint64 m_llMoney = 3;
    if (has_m_llmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llmoney());
    }
    
    // required sint64 m_llCallHabMoney = 4;
    if (has_m_llcallhabmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallhabmoney());
    }
    
    // required sint64 m_llTakeMoney = 5;
    if (has_m_lltakemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lltakemoney());
    }
    
    // required sint64 m_llDealMoney = 6;
    if (has_m_lldealmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lldealmoney());
    }
    
    // required string m_sNickName = 7;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sDealerTax = 8;
    if (has_m_sdealertax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sdealertax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMoney::MergeFrom(const UserMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_llmoney()) {
      set_m_llmoney(from.m_llmoney());
    }
    if (from.has_m_llcallhabmoney()) {
      set_m_llcallhabmoney(from.m_llcallhabmoney());
    }
    if (from.has_m_lltakemoney()) {
      set_m_lltakemoney(from.m_lltakemoney());
    }
    if (from.has_m_lldealmoney()) {
      set_m_lldealmoney(from.m_lldealmoney());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_sdealertax()) {
      set_m_sdealertax(from.m_sdealertax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMoney::CopyFrom(const UserMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void UserMoney::Swap(UserMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_llmoney_, other->m_llmoney_);
    std::swap(m_llcallhabmoney_, other->m_llcallhabmoney_);
    std::swap(m_lltakemoney_, other->m_lltakemoney_);
    std::swap(m_lldealmoney_, other->m_lldealmoney_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_sdealertax_, other->m_sdealertax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMoney_descriptor_;
  metadata.reflection = UserMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _CWinLose::kMLWinFieldNumber;
const int _CWinLose::kMLLoseFieldNumber;
const int _CWinLose::kMLContinueFieldNumber;
#endif  // !_MSC_VER

_CWinLose::_CWinLose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _CWinLose::InitAsDefaultInstance() {
}

_CWinLose::_CWinLose(const _CWinLose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _CWinLose::SharedCtor() {
  _cached_size_ = 0;
  m_lwin_ = 0;
  m_llose_ = 0;
  m_lcontinue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_CWinLose::~_CWinLose() {
  SharedDtor();
}

void _CWinLose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _CWinLose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _CWinLose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _CWinLose_descriptor_;
}

const _CWinLose& _CWinLose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_CWinLose* _CWinLose::default_instance_ = NULL;

_CWinLose* _CWinLose::New() const {
  return new _CWinLose;
}

void _CWinLose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lwin_ = 0;
    m_llose_ = 0;
    m_lcontinue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _CWinLose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lWin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lwin_)));
          set_has_m_lwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lLose;
        break;
      }
      
      // required sint32 m_lLose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llose_)));
          set_has_m_llose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lContinue;
        break;
      }
      
      // required sint32 m_lContinue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lContinue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcontinue_)));
          set_has_m_lcontinue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _CWinLose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lWin = 1;
  if (has_m_lwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lwin(), output);
  }
  
  // required sint32 m_lLose = 2;
  if (has_m_llose()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_llose(), output);
  }
  
  // required sint32 m_lContinue = 3;
  if (has_m_lcontinue()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcontinue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _CWinLose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lWin = 1;
  if (has_m_lwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lwin(), target);
  }
  
  // required sint32 m_lLose = 2;
  if (has_m_llose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_llose(), target);
  }
  
  // required sint32 m_lContinue = 3;
  if (has_m_lcontinue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lcontinue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _CWinLose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lWin = 1;
    if (has_m_lwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lwin());
    }
    
    // required sint32 m_lLose = 2;
    if (has_m_llose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llose());
    }
    
    // required sint32 m_lContinue = 3;
    if (has_m_lcontinue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcontinue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _CWinLose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _CWinLose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _CWinLose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _CWinLose::MergeFrom(const _CWinLose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lwin()) {
      set_m_lwin(from.m_lwin());
    }
    if (from.has_m_llose()) {
      set_m_llose(from.m_llose());
    }
    if (from.has_m_lcontinue()) {
      set_m_lcontinue(from.m_lcontinue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _CWinLose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _CWinLose::CopyFrom(const _CWinLose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _CWinLose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void _CWinLose::Swap(_CWinLose* other) {
  if (other != this) {
    std::swap(m_lwin_, other->m_lwin_);
    std::swap(m_llose_, other->m_llose_);
    std::swap(m_lcontinue_, other->m_lcontinue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _CWinLose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _CWinLose_descriptor_;
  metadata.reflection = _CWinLose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _UserInfo::kMLUSNFieldNumber;
const int _UserInfo::kMNIndexFieldNumber;
const int _UserInfo::kMSNickNameFieldNumber;
const int _UserInfo::kMSIDFieldNumber;
const int _UserInfo::kMLCLevelFieldNumber;
const int _UserInfo::kMLSoundTypeFieldNumber;
const int _UserInfo::kMSAvtFieldNumber;
const int _UserInfo::kMLUserStateFieldNumber;
const int _UserInfo::kMCWinLoseFieldNumber;
const int _UserInfo::kMCWinLoseTodayFieldNumber;
const int _UserInfo::kMCWinLoseRoomFieldNumber;
const int _UserInfo::kMLlCMoneyFieldNumber;
const int _UserInfo::kMLlFMoneyFieldNumber;
const int _UserInfo::kMLExitFieldNumber;
const int _UserInfo::kMNItemTypeFieldNumber;
const int _UserInfo::kMLAckFieldNumber;
const int _UserInfo::kMLJackpotFieldNumber;
const int _UserInfo::kMLDieCardsDealtFieldNumber;
#endif  // !_MSC_VER

_UserInfo::_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _UserInfo::InitAsDefaultInstance() {
  m_cwinlose_ = const_cast< ::Game_Poker::_CWinLose*>(&::Game_Poker::_CWinLose::default_instance());
  m_cwinlose_today_ = const_cast< ::Game_Poker::_CWinLose*>(&::Game_Poker::_CWinLose::default_instance());
  m_cwinlose_room_ = const_cast< ::Game_Poker::_CWinLose*>(&::Game_Poker::_CWinLose::default_instance());
}

_UserInfo::_UserInfo(const _UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _UserInfo::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsoundtype_ = 0;
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_luserstate_ = 0;
  m_cwinlose_ = NULL;
  m_cwinlose_today_ = NULL;
  m_cwinlose_room_ = NULL;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llfmoney_ = GOOGLE_LONGLONG(0);
  m_lexit_ = 0;
  m_nitemtype_ = 0;
  m_lack_ = 0;
  m_ljackpot_ = 0;
  m_ldiecardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_UserInfo::~_UserInfo() {
  SharedDtor();
}

void _UserInfo::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_sid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sid_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
    delete m_cwinlose_;
    delete m_cwinlose_today_;
    delete m_cwinlose_room_;
  }
}

void _UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UserInfo_descriptor_;
}

const _UserInfo& _UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_UserInfo* _UserInfo::default_instance_ = NULL;

_UserInfo* _UserInfo::New() const {
  return new _UserInfo;
}

void _UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_sid()) {
      if (m_sid_ != &::google::protobuf::internal::kEmptyString) {
        m_sid_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsoundtype_ = 0;
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_luserstate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_cwinlose()) {
      if (m_cwinlose_ != NULL) m_cwinlose_->::Game_Poker::_CWinLose::Clear();
    }
    if (has_m_cwinlose_today()) {
      if (m_cwinlose_today_ != NULL) m_cwinlose_today_->::Game_Poker::_CWinLose::Clear();
    }
    if (has_m_cwinlose_room()) {
      if (m_cwinlose_room_ != NULL) m_cwinlose_room_->::Game_Poker::_CWinLose::Clear();
    }
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llfmoney_ = GOOGLE_LONGLONG(0);
    m_lexit_ = 0;
    m_nitemtype_ = 0;
    m_lack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_ljackpot_ = 0;
    m_ldiecardsdealt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required sint32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sID;
        break;
      }
      
      // required string m_sID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sid().data(), this->m_sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lCLevel;
        break;
      }
      
      // required sint32 m_lCLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_sAvt;
        break;
      }
      
      // required string m_sAvt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_savt().data(), this->m_savt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lUserState;
        break;
      }
      
      // required sint32 m_lUserState = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lUserState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_luserstate_)));
          set_has_m_luserstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_cWinLose;
        break;
      }
      
      // required .Game_Poker._CWinLose m_cWinLose = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_cWinLose_Today;
        break;
      }
      
      // required .Game_Poker._CWinLose m_cWinLose_Today = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose_Today:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose_today()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_cWinLose_Room;
        break;
      }
      
      // required .Game_Poker._CWinLose m_cWinLose_Room = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose_Room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_llFMoney;
        break;
      }
      
      // required sint64 m_llFMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llFMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llfmoney_)));
          set_has_m_llfmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_lExit;
        break;
      }
      
      // required sint32 m_lExit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_nItemType;
        break;
      }
      
      // required sint32 m_nItemType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nItemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_nitemtype_)));
          set_has_m_nitemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_lAck;
        break;
      }
      
      // required sint32 m_lAck = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lack_)));
          set_has_m_lack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_lJackpot;
        break;
      }
      
      // required sint32 m_lJackpot = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJackpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ljackpot_)));
          set_has_m_ljackpot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_lDieCardsDealt;
        break;
      }
      
      // required sint32 m_lDieCardsDealt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lDieCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ldiecardsdealt_)));
          set_has_m_ldiecardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_nindex(), output);
  }
  
  // required string m_sNickName = 3;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_snickname(), output);
  }
  
  // required string m_sID = 4;
  if (has_m_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sid().data(), this->m_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_sid(), output);
  }
  
  // required sint32 m_lCLevel = 5;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lclevel(), output);
  }
  
  // required sint32 m_lSoundType = 6;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lsoundtype(), output);
  }
  
  // required string m_sAvt = 7;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_savt(), output);
  }
  
  // required sint32 m_lUserState = 8;
  if (has_m_luserstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->m_luserstate(), output);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose = 9;
  if (has_m_cwinlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_cwinlose(), output);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose_Today = 10;
  if (has_m_cwinlose_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_cwinlose_today(), output);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose_Room = 11;
  if (has_m_cwinlose_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_cwinlose_room(), output);
  }
  
  // required sint64 m_llCMoney = 12;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(12, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llFMoney = 13;
  if (has_m_llfmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->m_llfmoney(), output);
  }
  
  // required sint32 m_lExit = 14;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->m_lexit(), output);
  }
  
  // required sint32 m_nItemType = 15;
  if (has_m_nitemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->m_nitemtype(), output);
  }
  
  // required sint32 m_lAck = 16;
  if (has_m_lack()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->m_lack(), output);
  }
  
  // required sint32 m_lJackpot = 17;
  if (has_m_ljackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->m_ljackpot(), output);
  }
  
  // required sint32 m_lDieCardsDealt = 18;
  if (has_m_ldiecardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->m_ldiecardsdealt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required string m_sNickName = 3;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_snickname(), target);
  }
  
  // required string m_sID = 4;
  if (has_m_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sid().data(), this->m_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_sid(), target);
  }
  
  // required sint32 m_lCLevel = 5;
  if (has_m_lclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->m_lclevel(), target);
  }
  
  // required sint32 m_lSoundType = 6;
  if (has_m_lsoundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_lsoundtype(), target);
  }
  
  // required string m_sAvt = 7;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_savt(), target);
  }
  
  // required sint32 m_lUserState = 8;
  if (has_m_luserstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->m_luserstate(), target);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose = 9;
  if (has_m_cwinlose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_cwinlose(), target);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose_Today = 10;
  if (has_m_cwinlose_today()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_cwinlose_today(), target);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose_Room = 11;
  if (has_m_cwinlose_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_cwinlose_room(), target);
  }
  
  // required sint64 m_llCMoney = 12;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(12, this->m_llcmoney(), target);
  }
  
  // required sint64 m_llFMoney = 13;
  if (has_m_llfmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(13, this->m_llfmoney(), target);
  }
  
  // required sint32 m_lExit = 14;
  if (has_m_lexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->m_lexit(), target);
  }
  
  // required sint32 m_nItemType = 15;
  if (has_m_nitemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->m_nitemtype(), target);
  }
  
  // required sint32 m_lAck = 16;
  if (has_m_lack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->m_lack(), target);
  }
  
  // required sint32 m_lJackpot = 17;
  if (has_m_ljackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->m_ljackpot(), target);
  }
  
  // required sint32 m_lDieCardsDealt = 18;
  if (has_m_ldiecardsdealt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->m_ldiecardsdealt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _UserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_nindex());
    }
    
    // required string m_sNickName = 3;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sID = 4;
    if (has_m_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sid());
    }
    
    // required sint32 m_lCLevel = 5;
    if (has_m_lclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lclevel());
    }
    
    // required sint32 m_lSoundType = 6;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
    // required string m_sAvt = 7;
    if (has_m_savt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required sint32 m_lUserState = 8;
    if (has_m_luserstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_luserstate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Game_Poker._CWinLose m_cWinLose = 9;
    if (has_m_cwinlose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose());
    }
    
    // required .Game_Poker._CWinLose m_cWinLose_Today = 10;
    if (has_m_cwinlose_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose_today());
    }
    
    // required .Game_Poker._CWinLose m_cWinLose_Room = 11;
    if (has_m_cwinlose_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose_room());
    }
    
    // required sint64 m_llCMoney = 12;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llFMoney = 13;
    if (has_m_llfmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llfmoney());
    }
    
    // required sint32 m_lExit = 14;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_nItemType = 15;
    if (has_m_nitemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_nitemtype());
    }
    
    // required sint32 m_lAck = 16;
    if (has_m_lack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lack());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required sint32 m_lJackpot = 17;
    if (has_m_ljackpot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ljackpot());
    }
    
    // required sint32 m_lDieCardsDealt = 18;
    if (has_m_ldiecardsdealt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ldiecardsdealt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _UserInfo::MergeFrom(const _UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_sid()) {
      set_m_sid(from.m_sid());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_luserstate()) {
      set_m_luserstate(from.m_luserstate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_cwinlose()) {
      mutable_m_cwinlose()->::Game_Poker::_CWinLose::MergeFrom(from.m_cwinlose());
    }
    if (from.has_m_cwinlose_today()) {
      mutable_m_cwinlose_today()->::Game_Poker::_CWinLose::MergeFrom(from.m_cwinlose_today());
    }
    if (from.has_m_cwinlose_room()) {
      mutable_m_cwinlose_room()->::Game_Poker::_CWinLose::MergeFrom(from.m_cwinlose_room());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llfmoney()) {
      set_m_llfmoney(from.m_llfmoney());
    }
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_nitemtype()) {
      set_m_nitemtype(from.m_nitemtype());
    }
    if (from.has_m_lack()) {
      set_m_lack(from.m_lack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_ljackpot()) {
      set_m_ljackpot(from.m_ljackpot());
    }
    if (from.has_m_ldiecardsdealt()) {
      set_m_ldiecardsdealt(from.m_ldiecardsdealt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _UserInfo::CopyFrom(const _UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  
  if (has_m_cwinlose()) {
    if (!this->m_cwinlose().IsInitialized()) return false;
  }
  if (has_m_cwinlose_today()) {
    if (!this->m_cwinlose_today().IsInitialized()) return false;
  }
  if (has_m_cwinlose_room()) {
    if (!this->m_cwinlose_room().IsInitialized()) return false;
  }
  return true;
}

void _UserInfo::Swap(_UserInfo* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_sid_, other->m_sid_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_luserstate_, other->m_luserstate_);
    std::swap(m_cwinlose_, other->m_cwinlose_);
    std::swap(m_cwinlose_today_, other->m_cwinlose_today_);
    std::swap(m_cwinlose_room_, other->m_cwinlose_room_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llfmoney_, other->m_llfmoney_);
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_nitemtype_, other->m_nitemtype_);
    std::swap(m_lack_, other->m_lack_);
    std::swap(m_ljackpot_, other->m_ljackpot_);
    std::swap(m_ldiecardsdealt_, other->m_ldiecardsdealt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _UserInfo_descriptor_;
  metadata.reflection = _UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _OneCard::kMNIndexFieldNumber;
const int _OneCard::kMLCardIndexFieldNumber;
#endif  // !_MSC_VER

_OneCard::_OneCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _OneCard::InitAsDefaultInstance() {
}

_OneCard::_OneCard(const _OneCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _OneCard::SharedCtor() {
  _cached_size_ = 0;
  m_nindex_ = 0;
  m_lcardindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_OneCard::~_OneCard() {
  SharedDtor();
}

void _OneCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _OneCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _OneCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _OneCard_descriptor_;
}

const _OneCard& _OneCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_OneCard* _OneCard::default_instance_ = NULL;

_OneCard* _OneCard::New() const {
  return new _OneCard;
}

void _OneCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nindex_ = 0;
    m_lcardindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _OneCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardIndex;
        break;
      }
      
      // required int32 m_lCardIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lcardindex_)));
          set_has_m_lcardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _OneCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nindex(), output);
  }
  
  // required int32 m_lCardIndex = 2;
  if (has_m_lcardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lcardindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _OneCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nindex(), target);
  }
  
  // required int32 m_lCardIndex = 2;
  if (has_m_lcardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lcardindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _OneCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nIndex = 1;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required int32 m_lCardIndex = 2;
    if (has_m_lcardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lcardindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _OneCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _OneCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _OneCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _OneCard::MergeFrom(const _OneCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lcardindex()) {
      set_m_lcardindex(from.m_lcardindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _OneCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _OneCard::CopyFrom(const _OneCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _OneCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _OneCard::Swap(_OneCard* other) {
  if (other != this) {
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lcardindex_, other->m_lcardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _OneCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _OneCard_descriptor_;
  metadata.reflection = _OneCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _VecMoney::kVecMoneyFieldNumber;
#endif  // !_MSC_VER

_VecMoney::_VecMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _VecMoney::InitAsDefaultInstance() {
}

_VecMoney::_VecMoney(const _VecMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _VecMoney::SharedCtor() {
  _cached_size_ = 0;
  vecmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_VecMoney::~_VecMoney() {
  SharedDtor();
}

void _VecMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _VecMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _VecMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _VecMoney_descriptor_;
}

const _VecMoney& _VecMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_VecMoney* _VecMoney::default_instance_ = NULL;

_VecMoney* _VecMoney::New() const {
  return new _VecMoney;
}

void _VecMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vecmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _VecMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 VecMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &vecmoney_)));
          set_has_vecmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _VecMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 VecMoney = 1;
  if (has_vecmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->vecmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _VecMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 VecMoney = 1;
  if (has_vecmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->vecmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _VecMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 VecMoney = 1;
    if (has_vecmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->vecmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _VecMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _VecMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _VecMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _VecMoney::MergeFrom(const _VecMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vecmoney()) {
      set_vecmoney(from.vecmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _VecMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _VecMoney::CopyFrom(const _VecMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _VecMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _VecMoney::Swap(_VecMoney* other) {
  if (other != this) {
    std::swap(vecmoney_, other->vecmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _VecMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _VecMoney_descriptor_;
  metadata.reflection = _VecMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _WinLoseInfo::kMLlCMoneyFieldNumber;
const int _WinLoseInfo::kMLWinFieldNumber;
const int _WinLoseInfo::kMLLoseFieldNumber;
const int _WinLoseInfo::kMLReservedFieldNumber;
#endif  // !_MSC_VER

_WinLoseInfo::_WinLoseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _WinLoseInfo::InitAsDefaultInstance() {
}

_WinLoseInfo::_WinLoseInfo(const _WinLoseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _WinLoseInfo::SharedCtor() {
  _cached_size_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_lwin_ = 0;
  m_llose_ = 0;
  m_lreserved_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_WinLoseInfo::~_WinLoseInfo() {
  SharedDtor();
}

void _WinLoseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _WinLoseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _WinLoseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _WinLoseInfo_descriptor_;
}

const _WinLoseInfo& _WinLoseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_WinLoseInfo* _WinLoseInfo::default_instance_ = NULL;

_WinLoseInfo* _WinLoseInfo::New() const {
  return new _WinLoseInfo;
}

void _WinLoseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_lwin_ = 0;
    m_llose_ = 0;
    m_lreserved_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _WinLoseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llCMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lWin;
        break;
      }
      
      // required sint32 m_lWin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lwin_)));
          set_has_m_lwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lLose;
        break;
      }
      
      // required sint32 m_lLose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llose_)));
          set_has_m_llose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lReserved;
        break;
      }
      
      // required sint32 m_lReserved = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lReserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lreserved_)));
          set_has_m_lreserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _WinLoseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llCMoney = 1;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llcmoney(), output);
  }
  
  // required sint32 m_lWin = 2;
  if (has_m_lwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lwin(), output);
  }
  
  // required sint32 m_lLose = 3;
  if (has_m_llose()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_llose(), output);
  }
  
  // required sint32 m_lReserved = 4;
  if (has_m_lreserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lreserved(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _WinLoseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llCMoney = 1;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llcmoney(), target);
  }
  
  // required sint32 m_lWin = 2;
  if (has_m_lwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lwin(), target);
  }
  
  // required sint32 m_lLose = 3;
  if (has_m_llose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_llose(), target);
  }
  
  // required sint32 m_lReserved = 4;
  if (has_m_lreserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lreserved(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _WinLoseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llCMoney = 1;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint32 m_lWin = 2;
    if (has_m_lwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lwin());
    }
    
    // required sint32 m_lLose = 3;
    if (has_m_llose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llose());
    }
    
    // required sint32 m_lReserved = 4;
    if (has_m_lreserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lreserved());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _WinLoseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _WinLoseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _WinLoseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _WinLoseInfo::MergeFrom(const _WinLoseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_lwin()) {
      set_m_lwin(from.m_lwin());
    }
    if (from.has_m_llose()) {
      set_m_llose(from.m_llose());
    }
    if (from.has_m_lreserved()) {
      set_m_lreserved(from.m_lreserved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _WinLoseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _WinLoseInfo::CopyFrom(const _WinLoseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _WinLoseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void _WinLoseInfo::Swap(_WinLoseInfo* other) {
  if (other != this) {
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_lwin_, other->m_lwin_);
    std::swap(m_llose_, other->m_llose_);
    std::swap(m_lreserved_, other->m_lreserved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _WinLoseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _WinLoseInfo_descriptor_;
  metadata.reflection = _WinLoseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _VecUSN::kUSNFieldNumber;
#endif  // !_MSC_VER

_VecUSN::_VecUSN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _VecUSN::InitAsDefaultInstance() {
}

_VecUSN::_VecUSN(const _VecUSN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _VecUSN::SharedCtor() {
  _cached_size_ = 0;
  usn_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_VecUSN::~_VecUSN() {
  SharedDtor();
}

void _VecUSN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _VecUSN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _VecUSN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _VecUSN_descriptor_;
}

const _VecUSN& _VecUSN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_VecUSN* _VecUSN::default_instance_ = NULL;

_VecUSN* _VecUSN::New() const {
  return new _VecUSN;
}

void _VecUSN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usn_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _VecUSN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 USN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usn_)));
          set_has_usn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _VecUSN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 USN = 1;
  if (has_usn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->usn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _VecUSN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 USN = 1;
  if (has_usn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->usn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _VecUSN::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 USN = 1;
    if (has_usn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _VecUSN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _VecUSN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _VecUSN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _VecUSN::MergeFrom(const _VecUSN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usn()) {
      set_usn(from.usn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _VecUSN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _VecUSN::CopyFrom(const _VecUSN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _VecUSN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _VecUSN::Swap(_VecUSN* other) {
  if (other != this) {
    std::swap(usn_, other->usn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _VecUSN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _VecUSN_descriptor_;
  metadata.reflection = _VecUSN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _WAITINGUSERDATA::kMLUSNFieldNumber;
const int _WAITINGUSERDATA::kMLTicketNumFieldNumber;
const int _WAITINGUSERDATA::kMLBackColorFieldNumber;
const int _WAITINGUSERDATA::kMBCallWebFieldNumber;
#endif  // !_MSC_VER

_WAITINGUSERDATA::_WAITINGUSERDATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _WAITINGUSERDATA::InitAsDefaultInstance() {
}

_WAITINGUSERDATA::_WAITINGUSERDATA(const _WAITINGUSERDATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _WAITINGUSERDATA::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lticketnum_ = 0;
  m_lbackcolor_ = 0;
  m_bcallweb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_WAITINGUSERDATA::~_WAITINGUSERDATA() {
  SharedDtor();
}

void _WAITINGUSERDATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _WAITINGUSERDATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _WAITINGUSERDATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _WAITINGUSERDATA_descriptor_;
}

const _WAITINGUSERDATA& _WAITINGUSERDATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_WAITINGUSERDATA* _WAITINGUSERDATA::default_instance_ = NULL;

_WAITINGUSERDATA* _WAITINGUSERDATA::New() const {
  return new _WAITINGUSERDATA;
}

void _WAITINGUSERDATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lticketnum_ = 0;
    m_lbackcolor_ = 0;
    m_bcallweb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _WAITINGUSERDATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lTicketNum;
        break;
      }
      
      // required int32 m_lTicketNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lTicketNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lticketnum_)));
          set_has_m_lticketnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lBackColor;
        break;
      }
      
      // required int32 m_lBackColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBackColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbackcolor_)));
          set_has_m_lbackcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bCallWeb;
        break;
      }
      
      // required int32 m_bCallWeb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallWeb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcallweb_)));
          set_has_m_bcallweb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _WAITINGUSERDATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_lTicketNum = 2;
  if (has_m_lticketnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lticketnum(), output);
  }
  
  // required int32 m_lBackColor = 3;
  if (has_m_lbackcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lbackcolor(), output);
  }
  
  // required int32 m_bCallWeb = 4;
  if (has_m_bcallweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bcallweb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _WAITINGUSERDATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_lTicketNum = 2;
  if (has_m_lticketnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lticketnum(), target);
  }
  
  // required int32 m_lBackColor = 3;
  if (has_m_lbackcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lbackcolor(), target);
  }
  
  // required int32 m_bCallWeb = 4;
  if (has_m_bcallweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_bcallweb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _WAITINGUSERDATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_lTicketNum = 2;
    if (has_m_lticketnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lticketnum());
    }
    
    // required int32 m_lBackColor = 3;
    if (has_m_lbackcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbackcolor());
    }
    
    // required int32 m_bCallWeb = 4;
    if (has_m_bcallweb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcallweb());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _WAITINGUSERDATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _WAITINGUSERDATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _WAITINGUSERDATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _WAITINGUSERDATA::MergeFrom(const _WAITINGUSERDATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lticketnum()) {
      set_m_lticketnum(from.m_lticketnum());
    }
    if (from.has_m_lbackcolor()) {
      set_m_lbackcolor(from.m_lbackcolor());
    }
    if (from.has_m_bcallweb()) {
      set_m_bcallweb(from.m_bcallweb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _WAITINGUSERDATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _WAITINGUSERDATA::CopyFrom(const _WAITINGUSERDATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _WAITINGUSERDATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void _WAITINGUSERDATA::Swap(_WAITINGUSERDATA* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lticketnum_, other->m_lticketnum_);
    std::swap(m_lbackcolor_, other->m_lbackcolor_);
    std::swap(m_bcallweb_, other->m_bcallweb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _WAITINGUSERDATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _WAITINGUSERDATA_descriptor_;
  metadata.reflection = _WAITINGUSERDATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRefill::kMLlTimeFieldNumber;
const int CRefill::kMNCntFieldNumber;
const int CRefill::kMLPLevelFieldNumber;
#endif  // !_MSC_VER

CRefill::CRefill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRefill::InitAsDefaultInstance() {
}

CRefill::CRefill(const CRefill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRefill::SharedCtor() {
  _cached_size_ = 0;
  m_lltime_ = GOOGLE_LONGLONG(0);
  m_ncnt_ = 0;
  m_lplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRefill::~CRefill() {
  SharedDtor();
}

void CRefill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CRefill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRefill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRefill_descriptor_;
}

const CRefill& CRefill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

CRefill* CRefill::default_instance_ = NULL;

CRefill* CRefill::New() const {
  return new CRefill;
}

void CRefill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lltime_ = GOOGLE_LONGLONG(0);
    m_ncnt_ = 0;
    m_lplevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRefill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_llTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_lltime_)));
          set_has_m_lltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nCnt;
        break;
      }
      
      // required int32 m_nCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncnt_)));
          set_has_m_ncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lPLevel;
        break;
      }
      
      // required int32 m_lPLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lplevel_)));
          set_has_m_lplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRefill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_llTime = 1;
  if (has_m_lltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_lltime(), output);
  }
  
  // required int32 m_nCnt = 2;
  if (has_m_ncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ncnt(), output);
  }
  
  // required int32 m_lPLevel = 3;
  if (has_m_lplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lplevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRefill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_llTime = 1;
  if (has_m_lltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_lltime(), target);
  }
  
  // required int32 m_nCnt = 2;
  if (has_m_ncnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ncnt(), target);
  }
  
  // required int32 m_lPLevel = 3;
  if (has_m_lplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lplevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRefill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_llTime = 1;
    if (has_m_lltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_lltime());
    }
    
    // required int32 m_nCnt = 2;
    if (has_m_ncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncnt());
    }
    
    // required int32 m_lPLevel = 3;
    if (has_m_lplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lplevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRefill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRefill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRefill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRefill::MergeFrom(const CRefill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lltime()) {
      set_m_lltime(from.m_lltime());
    }
    if (from.has_m_ncnt()) {
      set_m_ncnt(from.m_ncnt());
    }
    if (from.has_m_lplevel()) {
      set_m_lplevel(from.m_lplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRefill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRefill::CopyFrom(const CRefill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRefill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CRefill::Swap(CRefill* other) {
  if (other != this) {
    std::swap(m_lltime_, other->m_lltime_);
    std::swap(m_ncnt_, other->m_ncnt_);
    std::swap(m_lplevel_, other->m_lplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRefill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRefill_descriptor_;
  metadata.reflection = CRefill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _ItemList::kMLstItemFieldNumber;
#endif  // !_MSC_VER

_ItemList::_ItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _ItemList::InitAsDefaultInstance() {
}

_ItemList::_ItemList(const _ItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _ItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_ItemList::~_ItemList() {
  SharedDtor();
}

void _ItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _ItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _ItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ItemList_descriptor_;
}

const _ItemList& _ItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_ItemList* _ItemList::default_instance_ = NULL;

_ItemList* _ItemList::New() const {
  return new _ItemList;
}

void _ItemList::Clear() {
  m_lstitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _ItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker._Item m_lstItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_lstItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_lstitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_lstItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _ItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker._Item m_lstItem = 1;
  for (int i = 0; i < this->m_lstitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_lstitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _ItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker._Item m_lstItem = 1;
  for (int i = 0; i < this->m_lstitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_lstitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _ItemList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker._Item m_lstItem = 1;
  total_size += 1 * this->m_lstitem_size();
  for (int i = 0; i < this->m_lstitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_lstitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _ItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _ItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _ItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _ItemList::MergeFrom(const _ItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_lstitem_.MergeFrom(from.m_lstitem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _ItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _ItemList::CopyFrom(const _ItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _ItemList::IsInitialized() const {
  
  for (int i = 0; i < m_lstitem_size(); i++) {
    if (!this->m_lstitem(i).IsInitialized()) return false;
  }
  return true;
}

void _ItemList::Swap(_ItemList* other) {
  if (other != this) {
    m_lstitem_.Swap(&other->m_lstitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _ItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _ItemList_descriptor_;
  metadata.reflection = _ItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _Item::kMLFucnsrlFieldNumber;
const int _Item::kMLlStartTimeFieldNumber;
const int _Item::kMLlEndTimeFieldNumber;
const int _Item::kMLlCountFieldNumber;
#endif  // !_MSC_VER

_Item::_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _Item::InitAsDefaultInstance() {
}

_Item::_Item(const _Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _Item::SharedCtor() {
  _cached_size_ = 0;
  m_lfucnsrl_ = 0;
  m_llstarttime_ = GOOGLE_LONGLONG(0);
  m_llendtime_ = GOOGLE_LONGLONG(0);
  m_llcount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_Item::~_Item() {
  SharedDtor();
}

void _Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _Item_descriptor_;
}

const _Item& _Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_Item* _Item::default_instance_ = NULL;

_Item* _Item::New() const {
  return new _Item;
}

void _Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lfucnsrl_ = 0;
    m_llstarttime_ = GOOGLE_LONGLONG(0);
    m_llendtime_ = GOOGLE_LONGLONG(0);
    m_llcount_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lFucnsrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lfucnsrl_)));
          set_has_m_lfucnsrl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llStartTime;
        break;
      }
      
      // required int64 m_llStartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llstarttime_)));
          set_has_m_llstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llEndTime;
        break;
      }
      
      // required int64 m_llEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llendtime_)));
          set_has_m_llendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCount;
        break;
      }
      
      // required int64 m_llCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llcount_)));
          set_has_m_llcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lFucnsrl = 1;
  if (has_m_lfucnsrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lfucnsrl(), output);
  }
  
  // required int64 m_llStartTime = 2;
  if (has_m_llstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_llstarttime(), output);
  }
  
  // required int64 m_llEndTime = 3;
  if (has_m_llendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_llendtime(), output);
  }
  
  // required int64 m_llCount = 4;
  if (has_m_llcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_llcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lFucnsrl = 1;
  if (has_m_lfucnsrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lfucnsrl(), target);
  }
  
  // required int64 m_llStartTime = 2;
  if (has_m_llstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_llstarttime(), target);
  }
  
  // required int64 m_llEndTime = 3;
  if (has_m_llendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_llendtime(), target);
  }
  
  // required int64 m_llCount = 4;
  if (has_m_llcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_llcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lFucnsrl = 1;
    if (has_m_lfucnsrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lfucnsrl());
    }
    
    // required int64 m_llStartTime = 2;
    if (has_m_llstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llstarttime());
    }
    
    // required int64 m_llEndTime = 3;
    if (has_m_llendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llendtime());
    }
    
    // required int64 m_llCount = 4;
    if (has_m_llcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _Item::MergeFrom(const _Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lfucnsrl()) {
      set_m_lfucnsrl(from.m_lfucnsrl());
    }
    if (from.has_m_llstarttime()) {
      set_m_llstarttime(from.m_llstarttime());
    }
    if (from.has_m_llendtime()) {
      set_m_llendtime(from.m_llendtime());
    }
    if (from.has_m_llcount()) {
      set_m_llcount(from.m_llcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _Item::CopyFrom(const _Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void _Item::Swap(_Item* other) {
  if (other != this) {
    std::swap(m_lfucnsrl_, other->m_lfucnsrl_);
    std::swap(m_llstarttime_, other->m_llstarttime_);
    std::swap(m_llendtime_, other->m_llendtime_);
    std::swap(m_llcount_, other->m_llcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _Item_descriptor_;
  metadata.reflection = _Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _RCUser::kMLUSNFieldNumber;
const int _RCUser::kMLJuminFieldNumber;
const int _RCUser::kMLFirstUSNFieldNumber;
const int _RCUser::kMLAgeIndexFieldNumber;
const int _RCUser::kMLJobIndexFieldNumber;
const int _RCUser::kMLRegionIndexFieldNumber;
const int _RCUser::kMLGuildIndexFieldNumber;
const int _RCUser::kMLMemberIndexFieldNumber;
const int _RCUser::kMLClientIPFieldNumber;
const int _RCUser::kMLGatewayIPFieldNumber;
const int _RCUser::kMLMacAddressFieldNumber;
const int _RCUser::kMSMobileInfoFieldNumber;
const int _RCUser::kMSAuthKeyFieldNumber;
const int _RCUser::kMSUserGameDataFieldNumber;
const int _RCUser::kMNIndexFieldNumber;
const int _RCUser::kMSNickNameFieldNumber;
const int _RCUser::kMSUserIDFieldNumber;
const int _RCUser::kMSAvtFieldNumber;
const int _RCUser::kMLCLevelFieldNumber;
const int _RCUser::kMLSexFieldNumber;
const int _RCUser::kMLlCMoneyFieldNumber;
const int _RCUser::kMLlFMoneyFieldNumber;
const int _RCUser::kMLlSafeMoneyFieldNumber;
const int _RCUser::kMLlPlastAllinDateFieldNumber;
const int _RCUser::kMLlPlastLogonDayFieldNumber;
const int _RCUser::kMLMTodayPlayCountFieldNumber;
const int _RCUser::kMLMTodayPlayTimeFieldNumber;
const int _RCUser::kMLPTotalPlayCountFieldNumber;
const int _RCUser::kMCRefillFieldNumber;
const int _RCUser::kMLlPExtMoneyFieldNumber;
const int _RCUser::kMLlPExtendDateFieldNumber;
const int _RCUser::kMLlPBonusDateFieldNumber;
const int _RCUser::kMLMMonthPlayCountFieldNumber;
const int _RCUser::kMLMMonthPlayTimeFieldNumber;
const int _RCUser::kMCWinLoseFieldNumber;
const int _RCUser::kMLGDisCntFieldNumber;
const int _RCUser::kMLlGlastLogonDayFieldNumber;
const int _RCUser::kMLlGRegDateFieldNumber;
const int _RCUser::kMLlGFirstPlayDateFieldNumber;
const int _RCUser::kMLGTodayPlayCountFieldNumber;
const int _RCUser::kMLGTodayPlayTimeFieldNumber;
const int _RCUser::kMLGTotalPlayCountFieldNumber;
const int _RCUser::kMLGTotalPlayTimeFieldNumber;
const int _RCUser::kMLGAllinCntFieldNumber;
const int _RCUser::kMLGAllinOutFieldNumber;
const int _RCUser::kMLlGLastAllinDateFieldNumber;
const int _RCUser::kMCWinLoseTodayFieldNumber;
const int _RCUser::kMLlGTodayMoneyFieldNumber;
const int _RCUser::kMLFourCardCntFieldNumber;
const int _RCUser::kMLStraightFlushCntFieldNumber;
const int _RCUser::kMLRoyalStraightFlushCntFieldNumber;
const int _RCUser::kMNReserve01FieldNumber;
const int _RCUser::kMNReserve02FieldNumber;
const int _RCUser::kMItemListFieldNumber;
const int _RCUser::kMLlJoinDateFieldNumber;
const int _RCUser::kMLlPlayDateFieldNumber;
#endif  // !_MSC_VER

_RCUser::_RCUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _RCUser::InitAsDefaultInstance() {
  m_crefill_ = const_cast< ::Game_Poker::CRefill*>(&::Game_Poker::CRefill::default_instance());
  m_cwinlose_ = const_cast< ::Game_Poker::_CWinLose*>(&::Game_Poker::_CWinLose::default_instance());
  m_cwinlose_today_ = const_cast< ::Game_Poker::_CWinLose*>(&::Game_Poker::_CWinLose::default_instance());
  m_itemlist_ = const_cast< ::Game_Poker::_ItemList*>(&::Game_Poker::_ItemList::default_instance());
}

_RCUser::_RCUser(const _RCUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _RCUser::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_ljumin_ = 0;
  m_lfirstusn_ = 0;
  m_lageindex_ = 0;
  m_ljobindex_ = 0;
  m_lregionindex_ = 0;
  m_lguildindex_ = 0;
  m_lmemberindex_ = 0;
  m_lclientip_ = 0;
  m_lgatewayip_ = 0;
  m_lmacaddress_ = 0;
  m_smobileinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sauthkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_susergamedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_nindex_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_suserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsex_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llfmoney_ = GOOGLE_LONGLONG(0);
  m_llsafemoney_ = GOOGLE_LONGLONG(0);
  m_llplastallindate_ = GOOGLE_LONGLONG(0);
  m_llplastlogonday_ = GOOGLE_LONGLONG(0);
  m_lmtodayplaycount_ = 0;
  m_lmtodayplaytime_ = 0;
  m_lptotalplaycount_ = 0;
  m_crefill_ = NULL;
  m_llpextmoney_ = GOOGLE_LONGLONG(0);
  m_llpextenddate_ = GOOGLE_LONGLONG(0);
  m_llpbonusdate_ = GOOGLE_LONGLONG(0);
  m_lmmonthplaycount_ = 0;
  m_lmmonthplaytime_ = 0;
  m_cwinlose_ = NULL;
  m_lgdiscnt_ = 0;
  m_llglastlogonday_ = GOOGLE_LONGLONG(0);
  m_llgregdate_ = GOOGLE_LONGLONG(0);
  m_llgfirstplaydate_ = GOOGLE_LONGLONG(0);
  m_lgtodayplaycount_ = 0;
  m_lgtodayplaytime_ = 0;
  m_lgtotalplaycount_ = 0;
  m_lgtotalplaytime_ = 0;
  m_lgallincnt_ = 0;
  m_lgallinout_ = 0;
  m_llglastallindate_ = GOOGLE_LONGLONG(0);
  m_cwinlose_today_ = NULL;
  m_llgtodaymoney_ = GOOGLE_LONGLONG(0);
  m_lfourcardcnt_ = 0;
  m_lstraightflushcnt_ = 0;
  m_lroyalstraightflushcnt_ = 0;
  m_nreserve01_ = 0;
  m_nreserve02_ = 0;
  m_itemlist_ = NULL;
  m_lljoindate_ = GOOGLE_LONGLONG(0);
  m_llplaydate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_RCUser::~_RCUser() {
  SharedDtor();
}

void _RCUser::SharedDtor() {
  if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smobileinfo_;
  }
  if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sauthkey_;
  }
  if (m_susergamedata_ != &::google::protobuf::internal::kEmptyString) {
    delete m_susergamedata_;
  }
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_suserid_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
    delete m_crefill_;
    delete m_cwinlose_;
    delete m_cwinlose_today_;
    delete m_itemlist_;
  }
}

void _RCUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _RCUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RCUser_descriptor_;
}

const _RCUser& _RCUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_RCUser* _RCUser::default_instance_ = NULL;

_RCUser* _RCUser::New() const {
  return new _RCUser;
}

void _RCUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_ljumin_ = 0;
    m_lfirstusn_ = 0;
    m_lageindex_ = 0;
    m_ljobindex_ = 0;
    m_lregionindex_ = 0;
    m_lguildindex_ = 0;
    m_lmemberindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lclientip_ = 0;
    m_lgatewayip_ = 0;
    m_lmacaddress_ = 0;
    if (has_m_smobileinfo()) {
      if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
        m_smobileinfo_->clear();
      }
    }
    if (has_m_sauthkey()) {
      if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
        m_sauthkey_->clear();
      }
    }
    if (has_m_susergamedata()) {
      if (m_susergamedata_ != &::google::protobuf::internal::kEmptyString) {
        m_susergamedata_->clear();
      }
    }
    m_nindex_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_suserid()) {
      if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
        m_suserid_->clear();
      }
    }
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsex_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llfmoney_ = GOOGLE_LONGLONG(0);
    m_llsafemoney_ = GOOGLE_LONGLONG(0);
    m_llplastallindate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_llplastlogonday_ = GOOGLE_LONGLONG(0);
    m_lmtodayplaycount_ = 0;
    m_lmtodayplaytime_ = 0;
    m_lptotalplaycount_ = 0;
    if (has_m_crefill()) {
      if (m_crefill_ != NULL) m_crefill_->::Game_Poker::CRefill::Clear();
    }
    m_llpextmoney_ = GOOGLE_LONGLONG(0);
    m_llpextenddate_ = GOOGLE_LONGLONG(0);
    m_llpbonusdate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    m_lmmonthplaycount_ = 0;
    m_lmmonthplaytime_ = 0;
    if (has_m_cwinlose()) {
      if (m_cwinlose_ != NULL) m_cwinlose_->::Game_Poker::_CWinLose::Clear();
    }
    m_lgdiscnt_ = 0;
    m_llglastlogonday_ = GOOGLE_LONGLONG(0);
    m_llgregdate_ = GOOGLE_LONGLONG(0);
    m_llgfirstplaydate_ = GOOGLE_LONGLONG(0);
    m_lgtodayplaycount_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    m_lgtodayplaytime_ = 0;
    m_lgtotalplaycount_ = 0;
    m_lgtotalplaytime_ = 0;
    m_lgallincnt_ = 0;
    m_lgallinout_ = 0;
    m_llglastallindate_ = GOOGLE_LONGLONG(0);
    if (has_m_cwinlose_today()) {
      if (m_cwinlose_today_ != NULL) m_cwinlose_today_->::Game_Poker::_CWinLose::Clear();
    }
    m_llgtodaymoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    m_lfourcardcnt_ = 0;
    m_lstraightflushcnt_ = 0;
    m_lroyalstraightflushcnt_ = 0;
    m_nreserve01_ = 0;
    m_nreserve02_ = 0;
    if (has_m_itemlist()) {
      if (m_itemlist_ != NULL) m_itemlist_->::Game_Poker::_ItemList::Clear();
    }
    m_lljoindate_ = GOOGLE_LONGLONG(0);
    m_llplaydate_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _RCUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lJumin;
        break;
      }
      
      // required int32 m_lJumin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJumin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ljumin_)));
          set_has_m_ljumin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lFirstUSN;
        break;
      }
      
      // required int32 m_lFirstUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lFirstUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lfirstusn_)));
          set_has_m_lfirstusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lAgeIndex;
        break;
      }
      
      // required int32 m_lAgeIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAgeIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lageindex_)));
          set_has_m_lageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lJobIndex;
        break;
      }
      
      // required int32 m_lJobIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJobIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ljobindex_)));
          set_has_m_ljobindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lRegionIndex;
        break;
      }
      
      // required int32 m_lRegionIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRegionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lregionindex_)));
          set_has_m_lregionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lGuildIndex;
        break;
      }
      
      // required int32 m_lGuildIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGuildIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lguildindex_)));
          set_has_m_lguildindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lMemberIndex;
        break;
      }
      
      // required int32 m_lMemberIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMemberIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmemberindex_)));
          set_has_m_lmemberindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lClientIP;
        break;
      }
      
      // required int32 m_lClientIP = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lClientIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lclientip_)));
          set_has_m_lclientip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lGatewayIP;
        break;
      }
      
      // required int32 m_lGatewayIP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGatewayIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgatewayip_)));
          set_has_m_lgatewayip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lMacAddress;
        break;
      }
      
      // required int32 m_lMacAddress = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMacAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmacaddress_)));
          set_has_m_lmacaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_sMobileInfo;
        break;
      }
      
      // required string m_sMobileInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMobileInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smobileinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_smobileinfo().data(), this->m_smobileinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_sAuthKey;
        break;
      }
      
      // required string m_sAuthKey = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAuthKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sauthkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sauthkey().data(), this->m_sauthkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_sUserGameData;
        break;
      }
      
      // required string m_sUserGameData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sUserGameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_susergamedata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_susergamedata().data(), this->m_susergamedata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_sUserID;
        break;
      }
      
      // required string m_sUserID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_suserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_suserid().data(), this->m_suserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_m_sAvt;
        break;
      }
      
      // required string m_sAvt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_savt().data(), this->m_savt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_lCLevel;
        break;
      }
      
      // required int32 m_lCLevel = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_lSex;
        break;
      }
      
      // required int32 m_lSex = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lsex_)));
          set_has_m_lsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_llCMoney;
        break;
      }
      
      // required int64 m_llCMoney = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_llFMoney;
        break;
      }
      
      // required int64 m_llFMoney = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llFMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llfmoney_)));
          set_has_m_llfmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_llSafeMoney;
        break;
      }
      
      // required int64 m_llSafeMoney = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSafeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llsafemoney_)));
          set_has_m_llsafemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_llPlastAllinDate;
        break;
      }
      
      // required int64 m_llPlastAllinDate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPlastAllinDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llplastallindate_)));
          set_has_m_llplastallindate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_llPlastLogonDay;
        break;
      }
      
      // required int64 m_llPlastLogonDay = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPlastLogonDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llplastlogonday_)));
          set_has_m_llplastlogonday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_lMTodayPlayCount;
        break;
      }
      
      // required int32 m_lMTodayPlayCount = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMTodayPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmtodayplaycount_)));
          set_has_m_lmtodayplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_lMTodayPlayTime;
        break;
      }
      
      // required int32 m_lMTodayPlayTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMTodayPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmtodayplaytime_)));
          set_has_m_lmtodayplaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_lPTotalPlayCount;
        break;
      }
      
      // required int32 m_lPTotalPlayCount = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPTotalPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lptotalplaycount_)));
          set_has_m_lptotalplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_m_cRefill;
        break;
      }
      
      // required .Game_Poker.CRefill m_cRefill = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cRefill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_crefill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_m_llPExtMoney;
        break;
      }
      
      // required int64 m_llPExtMoney = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPExtMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llpextmoney_)));
          set_has_m_llpextmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_llPExtendDate;
        break;
      }
      
      // required int64 m_llPExtendDate = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPExtendDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llpextenddate_)));
          set_has_m_llpextenddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_llPBonusDate;
        break;
      }
      
      // required int64 m_llPBonusDate = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPBonusDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llpbonusdate_)));
          set_has_m_llpbonusdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_m_lMMonthPlayCount;
        break;
      }
      
      // required int32 m_lMMonthPlayCount = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMMonthPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmmonthplaycount_)));
          set_has_m_lmmonthplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_m_lMMonthPlayTime;
        break;
      }
      
      // required int32 m_lMMonthPlayTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMMonthPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmmonthplaytime_)));
          set_has_m_lmmonthplaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_m_cWinLose;
        break;
      }
      
      // required .Game_Poker._CWinLose m_cWinLose = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_m_lGDisCnt;
        break;
      }
      
      // required int32 m_lGDisCnt = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGDisCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgdiscnt_)));
          set_has_m_lgdiscnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_m_llGlastLogonDay;
        break;
      }
      
      // required int64 m_llGlastLogonDay = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGlastLogonDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llglastlogonday_)));
          set_has_m_llglastlogonday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_m_llGRegDate;
        break;
      }
      
      // required int64 m_llGRegDate = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGRegDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llgregdate_)));
          set_has_m_llgregdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_m_llGFirstPlayDate;
        break;
      }
      
      // required int64 m_llGFirstPlayDate = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGFirstPlayDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llgfirstplaydate_)));
          set_has_m_llgfirstplaydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_m_lGTodayPlayCount;
        break;
      }
      
      // required int32 m_lGTodayPlayCount = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGTodayPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgtodayplaycount_)));
          set_has_m_lgtodayplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_m_lGTodayPlayTime;
        break;
      }
      
      // required int32 m_lGTodayPlayTime = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGTodayPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgtodayplaytime_)));
          set_has_m_lgtodayplaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_m_lGTotalPlayCount;
        break;
      }
      
      // required int32 m_lGTotalPlayCount = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGTotalPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgtotalplaycount_)));
          set_has_m_lgtotalplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_m_lGTotalPlayTime;
        break;
      }
      
      // required int32 m_lGTotalPlayTime = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGTotalPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgtotalplaytime_)));
          set_has_m_lgtotalplaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_m_lGAllinCnt;
        break;
      }
      
      // required int32 m_lGAllinCnt = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGAllinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgallincnt_)));
          set_has_m_lgallincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_m_lGAllinOut;
        break;
      }
      
      // required int32 m_lGAllinOut = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGAllinOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgallinout_)));
          set_has_m_lgallinout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_m_llGLastAllinDate;
        break;
      }
      
      // required int64 m_llGLastAllinDate = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGLastAllinDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llglastallindate_)));
          set_has_m_llglastallindate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_m_cWinLose_Today;
        break;
      }
      
      // required .Game_Poker._CWinLose m_cWinLose_Today = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cWinLose_Today:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cwinlose_today()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_m_llGTodayMoney;
        break;
      }
      
      // required int64 m_llGTodayMoney = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGTodayMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llgtodaymoney_)));
          set_has_m_llgtodaymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_m_lFourCardCnt;
        break;
      }
      
      // required int32 m_lFourCardCnt = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lFourCardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lfourcardcnt_)));
          set_has_m_lfourcardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_m_lStraightFlushCnt;
        break;
      }
      
      // required int32 m_lStraightFlushCnt = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lStraightFlushCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lstraightflushcnt_)));
          set_has_m_lstraightflushcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_m_lRoyalStraightFlushCnt;
        break;
      }
      
      // required int32 m_lRoyalStraightFlushCnt = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRoyalStraightFlushCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lroyalstraightflushcnt_)));
          set_has_m_lroyalstraightflushcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_m_nReserve01;
        break;
      }
      
      // required int32 m_nReserve01 = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nReserve01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserve01_)));
          set_has_m_nreserve01();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_m_nReserve02;
        break;
      }
      
      // required int32 m_nReserve02 = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nReserve02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserve02_)));
          set_has_m_nreserve02();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_m_ItemList;
        break;
      }
      
      // required .Game_Poker._ItemList m_ItemList = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_m_llJoinDate;
        break;
      }
      
      // required int64 m_llJoinDate = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJoinDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_lljoindate_)));
          set_has_m_lljoindate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_m_llPlayDate;
        break;
      }
      
      // required int64 m_llPlayDate = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPlayDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llplaydate_)));
          set_has_m_llplaydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _RCUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_lJumin = 2;
  if (has_m_ljumin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ljumin(), output);
  }
  
  // required int32 m_lFirstUSN = 3;
  if (has_m_lfirstusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lfirstusn(), output);
  }
  
  // required int32 m_lAgeIndex = 4;
  if (has_m_lageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lageindex(), output);
  }
  
  // required int32 m_lJobIndex = 5;
  if (has_m_ljobindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ljobindex(), output);
  }
  
  // required int32 m_lRegionIndex = 6;
  if (has_m_lregionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lregionindex(), output);
  }
  
  // required int32 m_lGuildIndex = 7;
  if (has_m_lguildindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lguildindex(), output);
  }
  
  // required int32 m_lMemberIndex = 8;
  if (has_m_lmemberindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_lmemberindex(), output);
  }
  
  // required int32 m_lClientIP = 9;
  if (has_m_lclientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_lclientip(), output);
  }
  
  // required int32 m_lGatewayIP = 10;
  if (has_m_lgatewayip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_lgatewayip(), output);
  }
  
  // required int32 m_lMacAddress = 11;
  if (has_m_lmacaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_lmacaddress(), output);
  }
  
  // required string m_sMobileInfo = 12;
  if (has_m_smobileinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smobileinfo().data(), this->m_smobileinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->m_smobileinfo(), output);
  }
  
  // required string m_sAuthKey = 13;
  if (has_m_sauthkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sauthkey().data(), this->m_sauthkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_sauthkey(), output);
  }
  
  // required string m_sUserGameData = 14;
  if (has_m_susergamedata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_susergamedata().data(), this->m_susergamedata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->m_susergamedata(), output);
  }
  
  // required int32 m_nIndex = 15;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_nindex(), output);
  }
  
  // required string m_sNickName = 16;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->m_snickname(), output);
  }
  
  // required string m_sUserID = 17;
  if (has_m_suserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_suserid().data(), this->m_suserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->m_suserid(), output);
  }
  
  // required string m_sAvt = 18;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->m_savt(), output);
  }
  
  // required int32 m_lCLevel = 19;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_lclevel(), output);
  }
  
  // required int32 m_lSex = 20;
  if (has_m_lsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_lsex(), output);
  }
  
  // required int64 m_llCMoney = 21;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->m_llcmoney(), output);
  }
  
  // required int64 m_llFMoney = 22;
  if (has_m_llfmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->m_llfmoney(), output);
  }
  
  // required int64 m_llSafeMoney = 23;
  if (has_m_llsafemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->m_llsafemoney(), output);
  }
  
  // required int64 m_llPlastAllinDate = 24;
  if (has_m_llplastallindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->m_llplastallindate(), output);
  }
  
  // required int64 m_llPlastLogonDay = 25;
  if (has_m_llplastlogonday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->m_llplastlogonday(), output);
  }
  
  // required int32 m_lMTodayPlayCount = 26;
  if (has_m_lmtodayplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_lmtodayplaycount(), output);
  }
  
  // required int32 m_lMTodayPlayTime = 27;
  if (has_m_lmtodayplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_lmtodayplaytime(), output);
  }
  
  // required int32 m_lPTotalPlayCount = 28;
  if (has_m_lptotalplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->m_lptotalplaycount(), output);
  }
  
  // required .Game_Poker.CRefill m_cRefill = 29;
  if (has_m_crefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->m_crefill(), output);
  }
  
  // required int64 m_llPExtMoney = 30;
  if (has_m_llpextmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->m_llpextmoney(), output);
  }
  
  // required int64 m_llPExtendDate = 31;
  if (has_m_llpextenddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->m_llpextenddate(), output);
  }
  
  // required int64 m_llPBonusDate = 32;
  if (has_m_llpbonusdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->m_llpbonusdate(), output);
  }
  
  // required int32 m_lMMonthPlayCount = 33;
  if (has_m_lmmonthplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->m_lmmonthplaycount(), output);
  }
  
  // required int32 m_lMMonthPlayTime = 34;
  if (has_m_lmmonthplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->m_lmmonthplaytime(), output);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose = 35;
  if (has_m_cwinlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->m_cwinlose(), output);
  }
  
  // required int32 m_lGDisCnt = 36;
  if (has_m_lgdiscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->m_lgdiscnt(), output);
  }
  
  // required int64 m_llGlastLogonDay = 37;
  if (has_m_llglastlogonday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->m_llglastlogonday(), output);
  }
  
  // required int64 m_llGRegDate = 38;
  if (has_m_llgregdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->m_llgregdate(), output);
  }
  
  // required int64 m_llGFirstPlayDate = 39;
  if (has_m_llgfirstplaydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->m_llgfirstplaydate(), output);
  }
  
  // required int32 m_lGTodayPlayCount = 40;
  if (has_m_lgtodayplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->m_lgtodayplaycount(), output);
  }
  
  // required int32 m_lGTodayPlayTime = 41;
  if (has_m_lgtodayplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->m_lgtodayplaytime(), output);
  }
  
  // required int32 m_lGTotalPlayCount = 42;
  if (has_m_lgtotalplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->m_lgtotalplaycount(), output);
  }
  
  // required int32 m_lGTotalPlayTime = 43;
  if (has_m_lgtotalplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->m_lgtotalplaytime(), output);
  }
  
  // required int32 m_lGAllinCnt = 44;
  if (has_m_lgallincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->m_lgallincnt(), output);
  }
  
  // required int32 m_lGAllinOut = 45;
  if (has_m_lgallinout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->m_lgallinout(), output);
  }
  
  // required int64 m_llGLastAllinDate = 46;
  if (has_m_llglastallindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->m_llglastallindate(), output);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose_Today = 47;
  if (has_m_cwinlose_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->m_cwinlose_today(), output);
  }
  
  // required int64 m_llGTodayMoney = 48;
  if (has_m_llgtodaymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->m_llgtodaymoney(), output);
  }
  
  // required int32 m_lFourCardCnt = 49;
  if (has_m_lfourcardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->m_lfourcardcnt(), output);
  }
  
  // required int32 m_lStraightFlushCnt = 50;
  if (has_m_lstraightflushcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->m_lstraightflushcnt(), output);
  }
  
  // required int32 m_lRoyalStraightFlushCnt = 51;
  if (has_m_lroyalstraightflushcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->m_lroyalstraightflushcnt(), output);
  }
  
  // required int32 m_nReserve01 = 52;
  if (has_m_nreserve01()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->m_nreserve01(), output);
  }
  
  // required int32 m_nReserve02 = 53;
  if (has_m_nreserve02()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->m_nreserve02(), output);
  }
  
  // required .Game_Poker._ItemList m_ItemList = 54;
  if (has_m_itemlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->m_itemlist(), output);
  }
  
  // required int64 m_llJoinDate = 55;
  if (has_m_lljoindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(55, this->m_lljoindate(), output);
  }
  
  // required int64 m_llPlayDate = 56;
  if (has_m_llplaydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(56, this->m_llplaydate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _RCUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_lJumin = 2;
  if (has_m_ljumin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ljumin(), target);
  }
  
  // required int32 m_lFirstUSN = 3;
  if (has_m_lfirstusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lfirstusn(), target);
  }
  
  // required int32 m_lAgeIndex = 4;
  if (has_m_lageindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lageindex(), target);
  }
  
  // required int32 m_lJobIndex = 5;
  if (has_m_ljobindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_ljobindex(), target);
  }
  
  // required int32 m_lRegionIndex = 6;
  if (has_m_lregionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lregionindex(), target);
  }
  
  // required int32 m_lGuildIndex = 7;
  if (has_m_lguildindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_lguildindex(), target);
  }
  
  // required int32 m_lMemberIndex = 8;
  if (has_m_lmemberindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_lmemberindex(), target);
  }
  
  // required int32 m_lClientIP = 9;
  if (has_m_lclientip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_lclientip(), target);
  }
  
  // required int32 m_lGatewayIP = 10;
  if (has_m_lgatewayip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_lgatewayip(), target);
  }
  
  // required int32 m_lMacAddress = 11;
  if (has_m_lmacaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_lmacaddress(), target);
  }
  
  // required string m_sMobileInfo = 12;
  if (has_m_smobileinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smobileinfo().data(), this->m_smobileinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->m_smobileinfo(), target);
  }
  
  // required string m_sAuthKey = 13;
  if (has_m_sauthkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sauthkey().data(), this->m_sauthkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_sauthkey(), target);
  }
  
  // required string m_sUserGameData = 14;
  if (has_m_susergamedata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_susergamedata().data(), this->m_susergamedata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->m_susergamedata(), target);
  }
  
  // required int32 m_nIndex = 15;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_nindex(), target);
  }
  
  // required string m_sNickName = 16;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->m_snickname(), target);
  }
  
  // required string m_sUserID = 17;
  if (has_m_suserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_suserid().data(), this->m_suserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->m_suserid(), target);
  }
  
  // required string m_sAvt = 18;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->m_savt(), target);
  }
  
  // required int32 m_lCLevel = 19;
  if (has_m_lclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_lclevel(), target);
  }
  
  // required int32 m_lSex = 20;
  if (has_m_lsex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_lsex(), target);
  }
  
  // required int64 m_llCMoney = 21;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->m_llcmoney(), target);
  }
  
  // required int64 m_llFMoney = 22;
  if (has_m_llfmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->m_llfmoney(), target);
  }
  
  // required int64 m_llSafeMoney = 23;
  if (has_m_llsafemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->m_llsafemoney(), target);
  }
  
  // required int64 m_llPlastAllinDate = 24;
  if (has_m_llplastallindate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->m_llplastallindate(), target);
  }
  
  // required int64 m_llPlastLogonDay = 25;
  if (has_m_llplastlogonday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->m_llplastlogonday(), target);
  }
  
  // required int32 m_lMTodayPlayCount = 26;
  if (has_m_lmtodayplaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_lmtodayplaycount(), target);
  }
  
  // required int32 m_lMTodayPlayTime = 27;
  if (has_m_lmtodayplaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->m_lmtodayplaytime(), target);
  }
  
  // required int32 m_lPTotalPlayCount = 28;
  if (has_m_lptotalplaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->m_lptotalplaycount(), target);
  }
  
  // required .Game_Poker.CRefill m_cRefill = 29;
  if (has_m_crefill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->m_crefill(), target);
  }
  
  // required int64 m_llPExtMoney = 30;
  if (has_m_llpextmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->m_llpextmoney(), target);
  }
  
  // required int64 m_llPExtendDate = 31;
  if (has_m_llpextenddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->m_llpextenddate(), target);
  }
  
  // required int64 m_llPBonusDate = 32;
  if (has_m_llpbonusdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->m_llpbonusdate(), target);
  }
  
  // required int32 m_lMMonthPlayCount = 33;
  if (has_m_lmmonthplaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->m_lmmonthplaycount(), target);
  }
  
  // required int32 m_lMMonthPlayTime = 34;
  if (has_m_lmmonthplaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->m_lmmonthplaytime(), target);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose = 35;
  if (has_m_cwinlose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->m_cwinlose(), target);
  }
  
  // required int32 m_lGDisCnt = 36;
  if (has_m_lgdiscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->m_lgdiscnt(), target);
  }
  
  // required int64 m_llGlastLogonDay = 37;
  if (has_m_llglastlogonday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->m_llglastlogonday(), target);
  }
  
  // required int64 m_llGRegDate = 38;
  if (has_m_llgregdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->m_llgregdate(), target);
  }
  
  // required int64 m_llGFirstPlayDate = 39;
  if (has_m_llgfirstplaydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->m_llgfirstplaydate(), target);
  }
  
  // required int32 m_lGTodayPlayCount = 40;
  if (has_m_lgtodayplaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->m_lgtodayplaycount(), target);
  }
  
  // required int32 m_lGTodayPlayTime = 41;
  if (has_m_lgtodayplaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->m_lgtodayplaytime(), target);
  }
  
  // required int32 m_lGTotalPlayCount = 42;
  if (has_m_lgtotalplaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->m_lgtotalplaycount(), target);
  }
  
  // required int32 m_lGTotalPlayTime = 43;
  if (has_m_lgtotalplaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->m_lgtotalplaytime(), target);
  }
  
  // required int32 m_lGAllinCnt = 44;
  if (has_m_lgallincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->m_lgallincnt(), target);
  }
  
  // required int32 m_lGAllinOut = 45;
  if (has_m_lgallinout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->m_lgallinout(), target);
  }
  
  // required int64 m_llGLastAllinDate = 46;
  if (has_m_llglastallindate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->m_llglastallindate(), target);
  }
  
  // required .Game_Poker._CWinLose m_cWinLose_Today = 47;
  if (has_m_cwinlose_today()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->m_cwinlose_today(), target);
  }
  
  // required int64 m_llGTodayMoney = 48;
  if (has_m_llgtodaymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->m_llgtodaymoney(), target);
  }
  
  // required int32 m_lFourCardCnt = 49;
  if (has_m_lfourcardcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->m_lfourcardcnt(), target);
  }
  
  // required int32 m_lStraightFlushCnt = 50;
  if (has_m_lstraightflushcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->m_lstraightflushcnt(), target);
  }
  
  // required int32 m_lRoyalStraightFlushCnt = 51;
  if (has_m_lroyalstraightflushcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->m_lroyalstraightflushcnt(), target);
  }
  
  // required int32 m_nReserve01 = 52;
  if (has_m_nreserve01()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->m_nreserve01(), target);
  }
  
  // required int32 m_nReserve02 = 53;
  if (has_m_nreserve02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->m_nreserve02(), target);
  }
  
  // required .Game_Poker._ItemList m_ItemList = 54;
  if (has_m_itemlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->m_itemlist(), target);
  }
  
  // required int64 m_llJoinDate = 55;
  if (has_m_lljoindate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(55, this->m_lljoindate(), target);
  }
  
  // required int64 m_llPlayDate = 56;
  if (has_m_llplaydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(56, this->m_llplaydate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _RCUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_lJumin = 2;
    if (has_m_ljumin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ljumin());
    }
    
    // required int32 m_lFirstUSN = 3;
    if (has_m_lfirstusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lfirstusn());
    }
    
    // required int32 m_lAgeIndex = 4;
    if (has_m_lageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lageindex());
    }
    
    // required int32 m_lJobIndex = 5;
    if (has_m_ljobindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ljobindex());
    }
    
    // required int32 m_lRegionIndex = 6;
    if (has_m_lregionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lregionindex());
    }
    
    // required int32 m_lGuildIndex = 7;
    if (has_m_lguildindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lguildindex());
    }
    
    // required int32 m_lMemberIndex = 8;
    if (has_m_lmemberindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmemberindex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_lClientIP = 9;
    if (has_m_lclientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lclientip());
    }
    
    // required int32 m_lGatewayIP = 10;
    if (has_m_lgatewayip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgatewayip());
    }
    
    // required int32 m_lMacAddress = 11;
    if (has_m_lmacaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmacaddress());
    }
    
    // required string m_sMobileInfo = 12;
    if (has_m_smobileinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smobileinfo());
    }
    
    // required string m_sAuthKey = 13;
    if (has_m_sauthkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sauthkey());
    }
    
    // required string m_sUserGameData = 14;
    if (has_m_susergamedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_susergamedata());
    }
    
    // required int32 m_nIndex = 15;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required string m_sNickName = 16;
    if (has_m_snickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string m_sUserID = 17;
    if (has_m_suserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_suserid());
    }
    
    // required string m_sAvt = 18;
    if (has_m_savt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required int32 m_lCLevel = 19;
    if (has_m_lclevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lclevel());
    }
    
    // required int32 m_lSex = 20;
    if (has_m_lsex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lsex());
    }
    
    // required int64 m_llCMoney = 21;
    if (has_m_llcmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llcmoney());
    }
    
    // required int64 m_llFMoney = 22;
    if (has_m_llfmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llfmoney());
    }
    
    // required int64 m_llSafeMoney = 23;
    if (has_m_llsafemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llsafemoney());
    }
    
    // required int64 m_llPlastAllinDate = 24;
    if (has_m_llplastallindate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llplastallindate());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int64 m_llPlastLogonDay = 25;
    if (has_m_llplastlogonday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llplastlogonday());
    }
    
    // required int32 m_lMTodayPlayCount = 26;
    if (has_m_lmtodayplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmtodayplaycount());
    }
    
    // required int32 m_lMTodayPlayTime = 27;
    if (has_m_lmtodayplaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmtodayplaytime());
    }
    
    // required int32 m_lPTotalPlayCount = 28;
    if (has_m_lptotalplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lptotalplaycount());
    }
    
    // required .Game_Poker.CRefill m_cRefill = 29;
    if (has_m_crefill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_crefill());
    }
    
    // required int64 m_llPExtMoney = 30;
    if (has_m_llpextmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llpextmoney());
    }
    
    // required int64 m_llPExtendDate = 31;
    if (has_m_llpextenddate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llpextenddate());
    }
    
    // required int64 m_llPBonusDate = 32;
    if (has_m_llpbonusdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llpbonusdate());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 m_lMMonthPlayCount = 33;
    if (has_m_lmmonthplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmmonthplaycount());
    }
    
    // required int32 m_lMMonthPlayTime = 34;
    if (has_m_lmmonthplaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmmonthplaytime());
    }
    
    // required .Game_Poker._CWinLose m_cWinLose = 35;
    if (has_m_cwinlose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose());
    }
    
    // required int32 m_lGDisCnt = 36;
    if (has_m_lgdiscnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgdiscnt());
    }
    
    // required int64 m_llGlastLogonDay = 37;
    if (has_m_llglastlogonday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llglastlogonday());
    }
    
    // required int64 m_llGRegDate = 38;
    if (has_m_llgregdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llgregdate());
    }
    
    // required int64 m_llGFirstPlayDate = 39;
    if (has_m_llgfirstplaydate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llgfirstplaydate());
    }
    
    // required int32 m_lGTodayPlayCount = 40;
    if (has_m_lgtodayplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgtodayplaycount());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int32 m_lGTodayPlayTime = 41;
    if (has_m_lgtodayplaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgtodayplaytime());
    }
    
    // required int32 m_lGTotalPlayCount = 42;
    if (has_m_lgtotalplaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgtotalplaycount());
    }
    
    // required int32 m_lGTotalPlayTime = 43;
    if (has_m_lgtotalplaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgtotalplaytime());
    }
    
    // required int32 m_lGAllinCnt = 44;
    if (has_m_lgallincnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgallincnt());
    }
    
    // required int32 m_lGAllinOut = 45;
    if (has_m_lgallinout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgallinout());
    }
    
    // required int64 m_llGLastAllinDate = 46;
    if (has_m_llglastallindate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llglastallindate());
    }
    
    // required .Game_Poker._CWinLose m_cWinLose_Today = 47;
    if (has_m_cwinlose_today()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cwinlose_today());
    }
    
    // required int64 m_llGTodayMoney = 48;
    if (has_m_llgtodaymoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llgtodaymoney());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // required int32 m_lFourCardCnt = 49;
    if (has_m_lfourcardcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lfourcardcnt());
    }
    
    // required int32 m_lStraightFlushCnt = 50;
    if (has_m_lstraightflushcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lstraightflushcnt());
    }
    
    // required int32 m_lRoyalStraightFlushCnt = 51;
    if (has_m_lroyalstraightflushcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lroyalstraightflushcnt());
    }
    
    // required int32 m_nReserve01 = 52;
    if (has_m_nreserve01()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserve01());
    }
    
    // required int32 m_nReserve02 = 53;
    if (has_m_nreserve02()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserve02());
    }
    
    // required .Game_Poker._ItemList m_ItemList = 54;
    if (has_m_itemlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_itemlist());
    }
    
    // required int64 m_llJoinDate = 55;
    if (has_m_lljoindate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_lljoindate());
    }
    
    // required int64 m_llPlayDate = 56;
    if (has_m_llplaydate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llplaydate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _RCUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _RCUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _RCUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _RCUser::MergeFrom(const _RCUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_ljumin()) {
      set_m_ljumin(from.m_ljumin());
    }
    if (from.has_m_lfirstusn()) {
      set_m_lfirstusn(from.m_lfirstusn());
    }
    if (from.has_m_lageindex()) {
      set_m_lageindex(from.m_lageindex());
    }
    if (from.has_m_ljobindex()) {
      set_m_ljobindex(from.m_ljobindex());
    }
    if (from.has_m_lregionindex()) {
      set_m_lregionindex(from.m_lregionindex());
    }
    if (from.has_m_lguildindex()) {
      set_m_lguildindex(from.m_lguildindex());
    }
    if (from.has_m_lmemberindex()) {
      set_m_lmemberindex(from.m_lmemberindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lclientip()) {
      set_m_lclientip(from.m_lclientip());
    }
    if (from.has_m_lgatewayip()) {
      set_m_lgatewayip(from.m_lgatewayip());
    }
    if (from.has_m_lmacaddress()) {
      set_m_lmacaddress(from.m_lmacaddress());
    }
    if (from.has_m_smobileinfo()) {
      set_m_smobileinfo(from.m_smobileinfo());
    }
    if (from.has_m_sauthkey()) {
      set_m_sauthkey(from.m_sauthkey());
    }
    if (from.has_m_susergamedata()) {
      set_m_susergamedata(from.m_susergamedata());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_suserid()) {
      set_m_suserid(from.m_suserid());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsex()) {
      set_m_lsex(from.m_lsex());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llfmoney()) {
      set_m_llfmoney(from.m_llfmoney());
    }
    if (from.has_m_llsafemoney()) {
      set_m_llsafemoney(from.m_llsafemoney());
    }
    if (from.has_m_llplastallindate()) {
      set_m_llplastallindate(from.m_llplastallindate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_llplastlogonday()) {
      set_m_llplastlogonday(from.m_llplastlogonday());
    }
    if (from.has_m_lmtodayplaycount()) {
      set_m_lmtodayplaycount(from.m_lmtodayplaycount());
    }
    if (from.has_m_lmtodayplaytime()) {
      set_m_lmtodayplaytime(from.m_lmtodayplaytime());
    }
    if (from.has_m_lptotalplaycount()) {
      set_m_lptotalplaycount(from.m_lptotalplaycount());
    }
    if (from.has_m_crefill()) {
      mutable_m_crefill()->::Game_Poker::CRefill::MergeFrom(from.m_crefill());
    }
    if (from.has_m_llpextmoney()) {
      set_m_llpextmoney(from.m_llpextmoney());
    }
    if (from.has_m_llpextenddate()) {
      set_m_llpextenddate(from.m_llpextenddate());
    }
    if (from.has_m_llpbonusdate()) {
      set_m_llpbonusdate(from.m_llpbonusdate());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_lmmonthplaycount()) {
      set_m_lmmonthplaycount(from.m_lmmonthplaycount());
    }
    if (from.has_m_lmmonthplaytime()) {
      set_m_lmmonthplaytime(from.m_lmmonthplaytime());
    }
    if (from.has_m_cwinlose()) {
      mutable_m_cwinlose()->::Game_Poker::_CWinLose::MergeFrom(from.m_cwinlose());
    }
    if (from.has_m_lgdiscnt()) {
      set_m_lgdiscnt(from.m_lgdiscnt());
    }
    if (from.has_m_llglastlogonday()) {
      set_m_llglastlogonday(from.m_llglastlogonday());
    }
    if (from.has_m_llgregdate()) {
      set_m_llgregdate(from.m_llgregdate());
    }
    if (from.has_m_llgfirstplaydate()) {
      set_m_llgfirstplaydate(from.m_llgfirstplaydate());
    }
    if (from.has_m_lgtodayplaycount()) {
      set_m_lgtodayplaycount(from.m_lgtodayplaycount());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_m_lgtodayplaytime()) {
      set_m_lgtodayplaytime(from.m_lgtodayplaytime());
    }
    if (from.has_m_lgtotalplaycount()) {
      set_m_lgtotalplaycount(from.m_lgtotalplaycount());
    }
    if (from.has_m_lgtotalplaytime()) {
      set_m_lgtotalplaytime(from.m_lgtotalplaytime());
    }
    if (from.has_m_lgallincnt()) {
      set_m_lgallincnt(from.m_lgallincnt());
    }
    if (from.has_m_lgallinout()) {
      set_m_lgallinout(from.m_lgallinout());
    }
    if (from.has_m_llglastallindate()) {
      set_m_llglastallindate(from.m_llglastallindate());
    }
    if (from.has_m_cwinlose_today()) {
      mutable_m_cwinlose_today()->::Game_Poker::_CWinLose::MergeFrom(from.m_cwinlose_today());
    }
    if (from.has_m_llgtodaymoney()) {
      set_m_llgtodaymoney(from.m_llgtodaymoney());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_m_lfourcardcnt()) {
      set_m_lfourcardcnt(from.m_lfourcardcnt());
    }
    if (from.has_m_lstraightflushcnt()) {
      set_m_lstraightflushcnt(from.m_lstraightflushcnt());
    }
    if (from.has_m_lroyalstraightflushcnt()) {
      set_m_lroyalstraightflushcnt(from.m_lroyalstraightflushcnt());
    }
    if (from.has_m_nreserve01()) {
      set_m_nreserve01(from.m_nreserve01());
    }
    if (from.has_m_nreserve02()) {
      set_m_nreserve02(from.m_nreserve02());
    }
    if (from.has_m_itemlist()) {
      mutable_m_itemlist()->::Game_Poker::_ItemList::MergeFrom(from.m_itemlist());
    }
    if (from.has_m_lljoindate()) {
      set_m_lljoindate(from.m_lljoindate());
    }
    if (from.has_m_llplaydate()) {
      set_m_llplaydate(from.m_llplaydate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _RCUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _RCUser::CopyFrom(const _RCUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _RCUser::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00ffffff) != 0x00ffffff) return false;
  
  if (has_m_crefill()) {
    if (!this->m_crefill().IsInitialized()) return false;
  }
  if (has_m_cwinlose()) {
    if (!this->m_cwinlose().IsInitialized()) return false;
  }
  if (has_m_cwinlose_today()) {
    if (!this->m_cwinlose_today().IsInitialized()) return false;
  }
  if (has_m_itemlist()) {
    if (!this->m_itemlist().IsInitialized()) return false;
  }
  return true;
}

void _RCUser::Swap(_RCUser* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_ljumin_, other->m_ljumin_);
    std::swap(m_lfirstusn_, other->m_lfirstusn_);
    std::swap(m_lageindex_, other->m_lageindex_);
    std::swap(m_ljobindex_, other->m_ljobindex_);
    std::swap(m_lregionindex_, other->m_lregionindex_);
    std::swap(m_lguildindex_, other->m_lguildindex_);
    std::swap(m_lmemberindex_, other->m_lmemberindex_);
    std::swap(m_lclientip_, other->m_lclientip_);
    std::swap(m_lgatewayip_, other->m_lgatewayip_);
    std::swap(m_lmacaddress_, other->m_lmacaddress_);
    std::swap(m_smobileinfo_, other->m_smobileinfo_);
    std::swap(m_sauthkey_, other->m_sauthkey_);
    std::swap(m_susergamedata_, other->m_susergamedata_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_suserid_, other->m_suserid_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsex_, other->m_lsex_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llfmoney_, other->m_llfmoney_);
    std::swap(m_llsafemoney_, other->m_llsafemoney_);
    std::swap(m_llplastallindate_, other->m_llplastallindate_);
    std::swap(m_llplastlogonday_, other->m_llplastlogonday_);
    std::swap(m_lmtodayplaycount_, other->m_lmtodayplaycount_);
    std::swap(m_lmtodayplaytime_, other->m_lmtodayplaytime_);
    std::swap(m_lptotalplaycount_, other->m_lptotalplaycount_);
    std::swap(m_crefill_, other->m_crefill_);
    std::swap(m_llpextmoney_, other->m_llpextmoney_);
    std::swap(m_llpextenddate_, other->m_llpextenddate_);
    std::swap(m_llpbonusdate_, other->m_llpbonusdate_);
    std::swap(m_lmmonthplaycount_, other->m_lmmonthplaycount_);
    std::swap(m_lmmonthplaytime_, other->m_lmmonthplaytime_);
    std::swap(m_cwinlose_, other->m_cwinlose_);
    std::swap(m_lgdiscnt_, other->m_lgdiscnt_);
    std::swap(m_llglastlogonday_, other->m_llglastlogonday_);
    std::swap(m_llgregdate_, other->m_llgregdate_);
    std::swap(m_llgfirstplaydate_, other->m_llgfirstplaydate_);
    std::swap(m_lgtodayplaycount_, other->m_lgtodayplaycount_);
    std::swap(m_lgtodayplaytime_, other->m_lgtodayplaytime_);
    std::swap(m_lgtotalplaycount_, other->m_lgtotalplaycount_);
    std::swap(m_lgtotalplaytime_, other->m_lgtotalplaytime_);
    std::swap(m_lgallincnt_, other->m_lgallincnt_);
    std::swap(m_lgallinout_, other->m_lgallinout_);
    std::swap(m_llglastallindate_, other->m_llglastallindate_);
    std::swap(m_cwinlose_today_, other->m_cwinlose_today_);
    std::swap(m_llgtodaymoney_, other->m_llgtodaymoney_);
    std::swap(m_lfourcardcnt_, other->m_lfourcardcnt_);
    std::swap(m_lstraightflushcnt_, other->m_lstraightflushcnt_);
    std::swap(m_lroyalstraightflushcnt_, other->m_lroyalstraightflushcnt_);
    std::swap(m_nreserve01_, other->m_nreserve01_);
    std::swap(m_nreserve02_, other->m_nreserve02_);
    std::swap(m_itemlist_, other->m_itemlist_);
    std::swap(m_lljoindate_, other->m_lljoindate_);
    std::swap(m_llplaydate_, other->m_llplaydate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _RCUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _RCUser_descriptor_;
  metadata.reflection = _RCUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_RCUserData::_RCUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _RCUserData::InitAsDefaultInstance() {
}

_RCUserData::_RCUserData(const _RCUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _RCUserData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_RCUserData::~_RCUserData() {
  SharedDtor();
}

void _RCUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _RCUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _RCUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RCUserData_descriptor_;
}

const _RCUserData& _RCUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_RCUserData* _RCUserData::default_instance_ = NULL;

_RCUserData* _RCUserData::New() const {
  return new _RCUserData;
}

void _RCUserData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _RCUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _RCUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _RCUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _RCUserData::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _RCUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _RCUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _RCUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _RCUserData::MergeFrom(const _RCUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _RCUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _RCUserData::CopyFrom(const _RCUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _RCUserData::IsInitialized() const {
  
  return true;
}

void _RCUserData::Swap(_RCUserData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _RCUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _RCUserData_descriptor_;
  metadata.reflection = _RCUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _Option::kMSRoomTitleFieldNumber;
const int _Option::kMSPasswordFieldNumber;
const int _Option::kMLMaxUserCntFieldNumber;
const int _Option::kMLMaxPlayerUserCntFieldNumber;
const int _Option::kMLMaxPlayerCardCntFieldNumber;
const int _Option::kMLChoiceModeFieldNumber;
const int _Option::kMLRoomTypeFieldNumber;
const int _Option::kMLBetRuleFieldNumber;
const int _Option::kMLBetTypeFieldNumber;
const int _Option::kMLAddRuleFieldNumber;
const int _Option::kMLRematchJoinFieldNumber;
const int _Option::kMLLimitMoneyFieldNumber;
const int _Option::kMLlGameAnteMoneyFieldNumber;
const int _Option::kMBEchoFieldNumber;
const int _Option::kMLMakeUSNFieldNumber;
const int _Option::kMLCategoryFieldNumber;
const int _Option::kMLChannelIDFieldNumber;
const int _Option::kMLlAnteMoneyFieldNumber;
#endif  // !_MSC_VER

_Option::_Option()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _Option::InitAsDefaultInstance() {
}

_Option::_Option(const _Option& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _Option::SharedCtor() {
  _cached_size_ = 0;
  m_sroomtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lmaxusercnt_ = 0;
  m_lmaxplayerusercnt_ = 0;
  m_lmaxplayercardcnt_ = 0;
  m_lchoicemode_ = 0;
  m_lroomtype_ = 0;
  m_lbetrule_ = 0;
  m_lbettype_ = 0;
  m_laddrule_ = 0;
  m_lrematchjoin_ = 0;
  m_llimitmoney_ = 0;
  m_llgameantemoney_ = GOOGLE_LONGLONG(0);
  m_becho_ = 0;
  m_lmakeusn_ = 0;
  m_lcategory_ = 0;
  m_lchannelid_ = 0;
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_Option::~_Option() {
  SharedDtor();
}

void _Option::SharedDtor() {
  if (m_sroomtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sroomtitle_;
  }
  if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
    delete m_spassword_;
  }
  if (this != default_instance_) {
  }
}

void _Option::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _Option::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _Option_descriptor_;
}

const _Option& _Option::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_Option* _Option::default_instance_ = NULL;

_Option* _Option::New() const {
  return new _Option;
}

void _Option::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_sroomtitle()) {
      if (m_sroomtitle_ != &::google::protobuf::internal::kEmptyString) {
        m_sroomtitle_->clear();
      }
    }
    if (has_m_spassword()) {
      if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
        m_spassword_->clear();
      }
    }
    m_lmaxusercnt_ = 0;
    m_lmaxplayerusercnt_ = 0;
    m_lmaxplayercardcnt_ = 0;
    m_lchoicemode_ = 0;
    m_lroomtype_ = 0;
    m_lbetrule_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lbettype_ = 0;
    m_laddrule_ = 0;
    m_lrematchjoin_ = 0;
    m_llimitmoney_ = 0;
    m_llgameantemoney_ = GOOGLE_LONGLONG(0);
    m_becho_ = 0;
    m_lmakeusn_ = 0;
    m_lcategory_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_lchannelid_ = 0;
    m_llantemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _Option::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sRoomTitle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sroomtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sroomtitle().data(), this->m_sroomtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sPassword;
        break;
      }
      
      // required string m_sPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_spassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_spassword().data(), this->m_spassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lMaxUserCnt;
        break;
      }
      
      // required int32 m_lMaxUserCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxUserCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxusercnt_)));
          set_has_m_lmaxusercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lMaxPlayerUserCnt;
        break;
      }
      
      // required int32 m_lMaxPlayerUserCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxPlayerUserCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxplayerusercnt_)));
          set_has_m_lmaxplayerusercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lMaxPlayerCardCnt;
        break;
      }
      
      // required int32 m_lMaxPlayerCardCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMaxPlayerCardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmaxplayercardcnt_)));
          set_has_m_lmaxplayercardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lChoiceMode;
        break;
      }
      
      // required int32 m_lChoiceMode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChoiceMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchoicemode_)));
          set_has_m_lchoicemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lRoomType;
        break;
      }
      
      // required int32 m_lRoomType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lroomtype_)));
          set_has_m_lroomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lBetRule;
        break;
      }
      
      // required int32 m_lBetRule = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbetrule_)));
          set_has_m_lbetrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lBetType;
        break;
      }
      
      // required int32 m_lBetType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lAddRule;
        break;
      }
      
      // required int32 m_lAddRule = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAddRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_laddrule_)));
          set_has_m_laddrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lRematchJoin;
        break;
      }
      
      // required int32 m_lRematchJoin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRematchJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lrematchjoin_)));
          set_has_m_lrematchjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_lLimitMoney;
        break;
      }
      
      // required int32 m_lLimitMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLimitMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_llimitmoney_)));
          set_has_m_llimitmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_llGameAnteMoney;
        break;
      }
      
      // required sint64 m_llGameAnteMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGameAnteMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llgameantemoney_)));
          set_has_m_llgameantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_bEcho;
        break;
      }
      
      // required int32 m_bEcho = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bEcho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_becho_)));
          set_has_m_becho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_lMakeUSN;
        break;
      }
      
      // required int32 m_lMakeUSN = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMakeUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmakeusn_)));
          set_has_m_lmakeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_lCategory;
        break;
      }
      
      // required int32 m_lCategory = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCategory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lcategory_)));
          set_has_m_lcategory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_lChannelID;
        break;
      }
      
      // required int32 m_lChannelID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChannelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchannelid_)));
          set_has_m_lchannelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_llAnteMoney;
        break;
      }
      
      // required sint64 m_llAnteMoney = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llAnteMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llantemoney_)));
          set_has_m_llantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _Option::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sRoomTitle = 1;
  if (has_m_sroomtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sroomtitle().data(), this->m_sroomtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_sroomtitle(), output);
  }
  
  // required string m_sPassword = 2;
  if (has_m_spassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_spassword().data(), this->m_spassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_spassword(), output);
  }
  
  // required int32 m_lMaxUserCnt = 3;
  if (has_m_lmaxusercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lmaxusercnt(), output);
  }
  
  // required int32 m_lMaxPlayerUserCnt = 4;
  if (has_m_lmaxplayerusercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lmaxplayerusercnt(), output);
  }
  
  // required int32 m_lMaxPlayerCardCnt = 5;
  if (has_m_lmaxplayercardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_lmaxplayercardcnt(), output);
  }
  
  // required int32 m_lChoiceMode = 6;
  if (has_m_lchoicemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lchoicemode(), output);
  }
  
  // required int32 m_lRoomType = 7;
  if (has_m_lroomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lroomtype(), output);
  }
  
  // required int32 m_lBetRule = 8;
  if (has_m_lbetrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_lbetrule(), output);
  }
  
  // required int32 m_lBetType = 9;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_lbettype(), output);
  }
  
  // required int32 m_lAddRule = 10;
  if (has_m_laddrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_laddrule(), output);
  }
  
  // required int32 m_lRematchJoin = 11;
  if (has_m_lrematchjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_lrematchjoin(), output);
  }
  
  // required int32 m_lLimitMoney = 12;
  if (has_m_llimitmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_llimitmoney(), output);
  }
  
  // required sint64 m_llGameAnteMoney = 13;
  if (has_m_llgameantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->m_llgameantemoney(), output);
  }
  
  // required int32 m_bEcho = 14;
  if (has_m_becho()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_becho(), output);
  }
  
  // required int32 m_lMakeUSN = 15;
  if (has_m_lmakeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_lmakeusn(), output);
  }
  
  // required int32 m_lCategory = 16;
  if (has_m_lcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_lcategory(), output);
  }
  
  // required int32 m_lChannelID = 17;
  if (has_m_lchannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_lchannelid(), output);
  }
  
  // required sint64 m_llAnteMoney = 18;
  if (has_m_llantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(18, this->m_llantemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _Option::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_sRoomTitle = 1;
  if (has_m_sroomtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sroomtitle().data(), this->m_sroomtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_sroomtitle(), target);
  }
  
  // required string m_sPassword = 2;
  if (has_m_spassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_spassword().data(), this->m_spassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_spassword(), target);
  }
  
  // required int32 m_lMaxUserCnt = 3;
  if (has_m_lmaxusercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lmaxusercnt(), target);
  }
  
  // required int32 m_lMaxPlayerUserCnt = 4;
  if (has_m_lmaxplayerusercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lmaxplayerusercnt(), target);
  }
  
  // required int32 m_lMaxPlayerCardCnt = 5;
  if (has_m_lmaxplayercardcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_lmaxplayercardcnt(), target);
  }
  
  // required int32 m_lChoiceMode = 6;
  if (has_m_lchoicemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lchoicemode(), target);
  }
  
  // required int32 m_lRoomType = 7;
  if (has_m_lroomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_lroomtype(), target);
  }
  
  // required int32 m_lBetRule = 8;
  if (has_m_lbetrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_lbetrule(), target);
  }
  
  // required int32 m_lBetType = 9;
  if (has_m_lbettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_lbettype(), target);
  }
  
  // required int32 m_lAddRule = 10;
  if (has_m_laddrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_laddrule(), target);
  }
  
  // required int32 m_lRematchJoin = 11;
  if (has_m_lrematchjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_lrematchjoin(), target);
  }
  
  // required int32 m_lLimitMoney = 12;
  if (has_m_llimitmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_llimitmoney(), target);
  }
  
  // required sint64 m_llGameAnteMoney = 13;
  if (has_m_llgameantemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(13, this->m_llgameantemoney(), target);
  }
  
  // required int32 m_bEcho = 14;
  if (has_m_becho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_becho(), target);
  }
  
  // required int32 m_lMakeUSN = 15;
  if (has_m_lmakeusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_lmakeusn(), target);
  }
  
  // required int32 m_lCategory = 16;
  if (has_m_lcategory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_lcategory(), target);
  }
  
  // required int32 m_lChannelID = 17;
  if (has_m_lchannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_lchannelid(), target);
  }
  
  // required sint64 m_llAnteMoney = 18;
  if (has_m_llantemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(18, this->m_llantemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _Option::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sRoomTitle = 1;
    if (has_m_sroomtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sroomtitle());
    }
    
    // required string m_sPassword = 2;
    if (has_m_spassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_spassword());
    }
    
    // required int32 m_lMaxUserCnt = 3;
    if (has_m_lmaxusercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxusercnt());
    }
    
    // required int32 m_lMaxPlayerUserCnt = 4;
    if (has_m_lmaxplayerusercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxplayerusercnt());
    }
    
    // required int32 m_lMaxPlayerCardCnt = 5;
    if (has_m_lmaxplayercardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmaxplayercardcnt());
    }
    
    // required int32 m_lChoiceMode = 6;
    if (has_m_lchoicemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchoicemode());
    }
    
    // required int32 m_lRoomType = 7;
    if (has_m_lroomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lroomtype());
    }
    
    // required int32 m_lBetRule = 8;
    if (has_m_lbetrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbetrule());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_lBetType = 9;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lbettype());
    }
    
    // required int32 m_lAddRule = 10;
    if (has_m_laddrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_laddrule());
    }
    
    // required int32 m_lRematchJoin = 11;
    if (has_m_lrematchjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lrematchjoin());
    }
    
    // required int32 m_lLimitMoney = 12;
    if (has_m_llimitmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_llimitmoney());
    }
    
    // required sint64 m_llGameAnteMoney = 13;
    if (has_m_llgameantemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llgameantemoney());
    }
    
    // required int32 m_bEcho = 14;
    if (has_m_becho()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_becho());
    }
    
    // required int32 m_lMakeUSN = 15;
    if (has_m_lmakeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmakeusn());
    }
    
    // required int32 m_lCategory = 16;
    if (has_m_lcategory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lcategory());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 m_lChannelID = 17;
    if (has_m_lchannelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchannelid());
    }
    
    // required sint64 m_llAnteMoney = 18;
    if (has_m_llantemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llantemoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _Option::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _Option* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _Option*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _Option::MergeFrom(const _Option& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_sroomtitle()) {
      set_m_sroomtitle(from.m_sroomtitle());
    }
    if (from.has_m_spassword()) {
      set_m_spassword(from.m_spassword());
    }
    if (from.has_m_lmaxusercnt()) {
      set_m_lmaxusercnt(from.m_lmaxusercnt());
    }
    if (from.has_m_lmaxplayerusercnt()) {
      set_m_lmaxplayerusercnt(from.m_lmaxplayerusercnt());
    }
    if (from.has_m_lmaxplayercardcnt()) {
      set_m_lmaxplayercardcnt(from.m_lmaxplayercardcnt());
    }
    if (from.has_m_lchoicemode()) {
      set_m_lchoicemode(from.m_lchoicemode());
    }
    if (from.has_m_lroomtype()) {
      set_m_lroomtype(from.m_lroomtype());
    }
    if (from.has_m_lbetrule()) {
      set_m_lbetrule(from.m_lbetrule());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_laddrule()) {
      set_m_laddrule(from.m_laddrule());
    }
    if (from.has_m_lrematchjoin()) {
      set_m_lrematchjoin(from.m_lrematchjoin());
    }
    if (from.has_m_llimitmoney()) {
      set_m_llimitmoney(from.m_llimitmoney());
    }
    if (from.has_m_llgameantemoney()) {
      set_m_llgameantemoney(from.m_llgameantemoney());
    }
    if (from.has_m_becho()) {
      set_m_becho(from.m_becho());
    }
    if (from.has_m_lmakeusn()) {
      set_m_lmakeusn(from.m_lmakeusn());
    }
    if (from.has_m_lcategory()) {
      set_m_lcategory(from.m_lcategory());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_lchannelid()) {
      set_m_lchannelid(from.m_lchannelid());
    }
    if (from.has_m_llantemoney()) {
      set_m_llantemoney(from.m_llantemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _Option::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _Option::CopyFrom(const _Option& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _Option::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  
  return true;
}

void _Option::Swap(_Option* other) {
  if (other != this) {
    std::swap(m_sroomtitle_, other->m_sroomtitle_);
    std::swap(m_spassword_, other->m_spassword_);
    std::swap(m_lmaxusercnt_, other->m_lmaxusercnt_);
    std::swap(m_lmaxplayerusercnt_, other->m_lmaxplayerusercnt_);
    std::swap(m_lmaxplayercardcnt_, other->m_lmaxplayercardcnt_);
    std::swap(m_lchoicemode_, other->m_lchoicemode_);
    std::swap(m_lroomtype_, other->m_lroomtype_);
    std::swap(m_lbetrule_, other->m_lbetrule_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_laddrule_, other->m_laddrule_);
    std::swap(m_lrematchjoin_, other->m_lrematchjoin_);
    std::swap(m_llimitmoney_, other->m_llimitmoney_);
    std::swap(m_llgameantemoney_, other->m_llgameantemoney_);
    std::swap(m_becho_, other->m_becho_);
    std::swap(m_lmakeusn_, other->m_lmakeusn_);
    std::swap(m_lcategory_, other->m_lcategory_);
    std::swap(m_lchannelid_, other->m_lchannelid_);
    std::swap(m_llantemoney_, other->m_llantemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _Option::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _Option_descriptor_;
  metadata.reflection = _Option_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _BettingMsg::kMLUSNFieldNumber;
const int _BettingMsg::kMNIndexFieldNumber;
const int _BettingMsg::kMBetTypeFieldNumber;
const int _BettingMsg::kMBBettingMoneyFieldNumber;
const int _BettingMsg::kMBMoneyLackFieldNumber;
const int _BettingMsg::kMBCallMoneyZeroFieldNumber;
const int _BettingMsg::kMLlCallMoneyFieldNumber;
const int _BettingMsg::kMLlRaiseMoneyFieldNumber;
#endif  // !_MSC_VER

_BettingMsg::_BettingMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _BettingMsg::InitAsDefaultInstance() {
}

_BettingMsg::_BettingMsg(const _BettingMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _BettingMsg::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_bettype_ = 0;
  m_bbettingmoney_ = 0;
  m_bmoneylack_ = 0;
  m_bcallmoneyzero_ = 0;
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_BettingMsg::~_BettingMsg() {
  SharedDtor();
}

void _BettingMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _BettingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _BettingMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _BettingMsg_descriptor_;
}

const _BettingMsg& _BettingMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_BettingMsg* _BettingMsg::default_instance_ = NULL;

_BettingMsg* _BettingMsg::New() const {
  return new _BettingMsg;
}

void _BettingMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_bettype_ = 0;
    m_bbettingmoney_ = 0;
    m_bmoneylack_ = 0;
    m_bcallmoneyzero_ = 0;
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llraisemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _BettingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_BetType;
        break;
      }
      
      // required int32 m_BetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bettype_)));
          set_has_m_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bBettingMoney;
        break;
      }
      
      // required int32 m_bBettingMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bBettingMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bbettingmoney_)));
          set_has_m_bbettingmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bMoneyLack;
        break;
      }
      
      // required int32 m_bMoneyLack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bMoneyLack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmoneylack_)));
          set_has_m_bmoneylack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bCallMoneyZero;
        break;
      }
      
      // required int32 m_bCallMoneyZero = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallMoneyZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcallmoneyzero_)));
          set_has_m_bcallmoneyzero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_llCallMoney;
        break;
      }
      
      // required int64 m_llCallMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_llRaiseMoney;
        break;
      }
      
      // required int64 m_llRaiseMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRaiseMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_llraisemoney_)));
          set_has_m_llraisemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _BettingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required int32 m_BetType = 3;
  if (has_m_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_bettype(), output);
  }
  
  // required int32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bbettingmoney(), output);
  }
  
  // required int32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bmoneylack(), output);
  }
  
  // required int32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_bcallmoneyzero(), output);
  }
  
  // required int64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->m_llcallmoney(), output);
  }
  
  // required int64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_llraisemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _BettingMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required int32 m_BetType = 3;
  if (has_m_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_bettype(), target);
  }
  
  // required int32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_bbettingmoney(), target);
  }
  
  // required int32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_bmoneylack(), target);
  }
  
  // required int32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_bcallmoneyzero(), target);
  }
  
  // required int64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->m_llcallmoney(), target);
  }
  
  // required int64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_llraisemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _BettingMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required int32 m_BetType = 3;
    if (has_m_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bettype());
    }
    
    // required int32 m_bBettingMoney = 4;
    if (has_m_bbettingmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bbettingmoney());
    }
    
    // required int32 m_bMoneyLack = 5;
    if (has_m_bmoneylack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmoneylack());
    }
    
    // required int32 m_bCallMoneyZero = 6;
    if (has_m_bcallmoneyzero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcallmoneyzero());
    }
    
    // required int64 m_llCallMoney = 7;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llcallmoney());
    }
    
    // required int64 m_llRaiseMoney = 8;
    if (has_m_llraisemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_llraisemoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _BettingMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _BettingMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _BettingMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _BettingMsg::MergeFrom(const _BettingMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_bettype()) {
      set_m_bettype(from.m_bettype());
    }
    if (from.has_m_bbettingmoney()) {
      set_m_bbettingmoney(from.m_bbettingmoney());
    }
    if (from.has_m_bmoneylack()) {
      set_m_bmoneylack(from.m_bmoneylack());
    }
    if (from.has_m_bcallmoneyzero()) {
      set_m_bcallmoneyzero(from.m_bcallmoneyzero());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llraisemoney()) {
      set_m_llraisemoney(from.m_llraisemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _BettingMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _BettingMsg::CopyFrom(const _BettingMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _BettingMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void _BettingMsg::Swap(_BettingMsg* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_bettype_, other->m_bettype_);
    std::swap(m_bbettingmoney_, other->m_bbettingmoney_);
    std::swap(m_bmoneylack_, other->m_bmoneylack_);
    std::swap(m_bcallmoneyzero_, other->m_bcallmoneyzero_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llraisemoney_, other->m_llraisemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _BettingMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _BettingMsg_descriptor_;
  metadata.reflection = _BettingMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _BettingMsgTable::kBettingMsgTableFieldNumber;
#endif  // !_MSC_VER

_BettingMsgTable::_BettingMsgTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _BettingMsgTable::InitAsDefaultInstance() {
}

_BettingMsgTable::_BettingMsgTable(const _BettingMsgTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _BettingMsgTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_BettingMsgTable::~_BettingMsgTable() {
  SharedDtor();
}

void _BettingMsgTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _BettingMsgTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _BettingMsgTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _BettingMsgTable_descriptor_;
}

const _BettingMsgTable& _BettingMsgTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_BettingMsgTable* _BettingMsgTable::default_instance_ = NULL;

_BettingMsgTable* _BettingMsgTable::New() const {
  return new _BettingMsgTable;
}

void _BettingMsgTable::Clear() {
  bettingmsgtable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _BettingMsgTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker._BettingMsg BettingMsgTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BettingMsgTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bettingmsgtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_BettingMsgTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _BettingMsgTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker._BettingMsg BettingMsgTable = 1;
  for (int i = 0; i < this->bettingmsgtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bettingmsgtable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _BettingMsgTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker._BettingMsg BettingMsgTable = 1;
  for (int i = 0; i < this->bettingmsgtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bettingmsgtable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _BettingMsgTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker._BettingMsg BettingMsgTable = 1;
  total_size += 1 * this->bettingmsgtable_size();
  for (int i = 0; i < this->bettingmsgtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bettingmsgtable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _BettingMsgTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _BettingMsgTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _BettingMsgTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _BettingMsgTable::MergeFrom(const _BettingMsgTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  bettingmsgtable_.MergeFrom(from.bettingmsgtable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _BettingMsgTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _BettingMsgTable::CopyFrom(const _BettingMsgTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _BettingMsgTable::IsInitialized() const {
  
  for (int i = 0; i < bettingmsgtable_size(); i++) {
    if (!this->bettingmsgtable(i).IsInitialized()) return false;
  }
  return true;
}

void _BettingMsgTable::Swap(_BettingMsgTable* other) {
  if (other != this) {
    bettingmsgtable_.Swap(&other->bettingmsgtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _BettingMsgTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _BettingMsgTable_descriptor_;
  metadata.reflection = _BettingMsgTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MoneyTable::kMoneyTableFieldNumber;
#endif  // !_MSC_VER

_MoneyTable::_MoneyTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MoneyTable::InitAsDefaultInstance() {
}

_MoneyTable::_MoneyTable(const _MoneyTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MoneyTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MoneyTable::~_MoneyTable() {
  SharedDtor();
}

void _MoneyTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MoneyTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MoneyTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MoneyTable_descriptor_;
}

const _MoneyTable& _MoneyTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MoneyTable* _MoneyTable::default_instance_ = NULL;

_MoneyTable* _MoneyTable::New() const {
  return new _MoneyTable;
}

void _MoneyTable::Clear() {
  moneytable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MoneyTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker._Money MoneyTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MoneyTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneytable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MoneyTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MoneyTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker._Money MoneyTable = 1;
  for (int i = 0; i < this->moneytable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moneytable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MoneyTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker._Money MoneyTable = 1;
  for (int i = 0; i < this->moneytable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moneytable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MoneyTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker._Money MoneyTable = 1;
  total_size += 1 * this->moneytable_size();
  for (int i = 0; i < this->moneytable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneytable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MoneyTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MoneyTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MoneyTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MoneyTable::MergeFrom(const _MoneyTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneytable_.MergeFrom(from.moneytable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MoneyTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MoneyTable::CopyFrom(const _MoneyTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MoneyTable::IsInitialized() const {
  
  for (int i = 0; i < moneytable_size(); i++) {
    if (!this->moneytable(i).IsInitialized()) return false;
  }
  return true;
}

void _MoneyTable::Swap(_MoneyTable* other) {
  if (other != this) {
    moneytable_.Swap(&other->moneytable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MoneyTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MoneyTable_descriptor_;
  metadata.reflection = _MoneyTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _CardTable::kCardTableFieldNumber;
#endif  // !_MSC_VER

_CardTable::_CardTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _CardTable::InitAsDefaultInstance() {
}

_CardTable::_CardTable(const _CardTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _CardTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_CardTable::~_CardTable() {
  SharedDtor();
}

void _CardTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _CardTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _CardTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _CardTable_descriptor_;
}

const _CardTable& _CardTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_CardTable* _CardTable::default_instance_ = NULL;

_CardTable* _CardTable::New() const {
  return new _CardTable;
}

void _CardTable::Clear() {
  cardtable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _CardTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker._Cards CardTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_CardTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _CardTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker._Cards CardTable = 1;
  for (int i = 0; i < this->cardtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardtable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _CardTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker._Cards CardTable = 1;
  for (int i = 0; i < this->cardtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardtable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _CardTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker._Cards CardTable = 1;
  total_size += 1 * this->cardtable_size();
  for (int i = 0; i < this->cardtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardtable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _CardTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _CardTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _CardTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _CardTable::MergeFrom(const _CardTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardtable_.MergeFrom(from.cardtable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _CardTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _CardTable::CopyFrom(const _CardTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _CardTable::IsInitialized() const {
  
  for (int i = 0; i < cardtable_size(); i++) {
    if (!this->cardtable(i).IsInitialized()) return false;
  }
  return true;
}

void _CardTable::Swap(_CardTable* other) {
  if (other != this) {
    cardtable_.Swap(&other->cardtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _CardTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _CardTable_descriptor_;
  metadata.reflection = _CardTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _UITable::kUITableFieldNumber;
#endif  // !_MSC_VER

_UITable::_UITable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _UITable::InitAsDefaultInstance() {
}

_UITable::_UITable(const _UITable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _UITable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_UITable::~_UITable() {
  SharedDtor();
}

void _UITable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _UITable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _UITable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UITable_descriptor_;
}

const _UITable& _UITable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_UITable* _UITable::default_instance_ = NULL;

_UITable* _UITable::New() const {
  return new _UITable;
}

void _UITable::Clear() {
  uitable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _UITable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker._UserInfo UITable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UITable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uitable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UITable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _UITable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker._UserInfo UITable = 1;
  for (int i = 0; i < this->uitable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uitable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _UITable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker._UserInfo UITable = 1;
  for (int i = 0; i < this->uitable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uitable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _UITable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker._UserInfo UITable = 1;
  total_size += 1 * this->uitable_size();
  for (int i = 0; i < this->uitable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uitable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _UITable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _UITable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _UITable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _UITable::MergeFrom(const _UITable& from) {
  GOOGLE_CHECK_NE(&from, this);
  uitable_.MergeFrom(from.uitable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _UITable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _UITable::CopyFrom(const _UITable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _UITable::IsInitialized() const {
  
  for (int i = 0; i < uitable_size(); i++) {
    if (!this->uitable(i).IsInitialized()) return false;
  }
  return true;
}

void _UITable::Swap(_UITable* other) {
  if (other != this) {
    uitable_.Swap(&other->uitable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _UITable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _UITable_descriptor_;
  metadata.reflection = _UITable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _RCRoomData::kMLGameMasterFieldNumber;
const int _RCRoomData::kMLRoomIndexFieldNumber;
const int _RCRoomData::kMLStateFieldNumber;
const int _RCRoomData::kMOptionFieldNumber;
const int _RCRoomData::kMTblUIFieldNumber;
const int _RCRoomData::kMTblCardFieldNumber;
const int _RCRoomData::kMTblMoneyFieldNumber;
const int _RCRoomData::kMTblBettingMsgFieldNumber;
#endif  // !_MSC_VER

_RCRoomData::_RCRoomData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _RCRoomData::InitAsDefaultInstance() {
  m_option_ = const_cast< ::Game_Poker::_Option*>(&::Game_Poker::_Option::default_instance());
  m_tblui_ = const_cast< ::Game_Poker::_UITable*>(&::Game_Poker::_UITable::default_instance());
  m_tblcard_ = const_cast< ::Game_Poker::_CardTable*>(&::Game_Poker::_CardTable::default_instance());
  m_tblmoney_ = const_cast< ::Game_Poker::_MoneyTable*>(&::Game_Poker::_MoneyTable::default_instance());
  m_tblbettingmsg_ = const_cast< ::Game_Poker::_BettingMsgTable*>(&::Game_Poker::_BettingMsgTable::default_instance());
}

_RCRoomData::_RCRoomData(const _RCRoomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _RCRoomData::SharedCtor() {
  _cached_size_ = 0;
  m_lgamemaster_ = 0;
  m_lroomindex_ = 0;
  m_lstate_ = 0;
  m_option_ = NULL;
  m_tblui_ = NULL;
  m_tblcard_ = NULL;
  m_tblmoney_ = NULL;
  m_tblbettingmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_RCRoomData::~_RCRoomData() {
  SharedDtor();
}

void _RCRoomData::SharedDtor() {
  if (this != default_instance_) {
    delete m_option_;
    delete m_tblui_;
    delete m_tblcard_;
    delete m_tblmoney_;
    delete m_tblbettingmsg_;
  }
}

void _RCRoomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _RCRoomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RCRoomData_descriptor_;
}

const _RCRoomData& _RCRoomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_RCRoomData* _RCRoomData::default_instance_ = NULL;

_RCRoomData* _RCRoomData::New() const {
  return new _RCRoomData;
}

void _RCRoomData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lgamemaster_ = 0;
    m_lroomindex_ = 0;
    m_lstate_ = 0;
    if (has_m_option()) {
      if (m_option_ != NULL) m_option_->::Game_Poker::_Option::Clear();
    }
    if (has_m_tblui()) {
      if (m_tblui_ != NULL) m_tblui_->::Game_Poker::_UITable::Clear();
    }
    if (has_m_tblcard()) {
      if (m_tblcard_ != NULL) m_tblcard_->::Game_Poker::_CardTable::Clear();
    }
    if (has_m_tblmoney()) {
      if (m_tblmoney_ != NULL) m_tblmoney_->::Game_Poker::_MoneyTable::Clear();
    }
    if (has_m_tblbettingmsg()) {
      if (m_tblbettingmsg_ != NULL) m_tblbettingmsg_->::Game_Poker::_BettingMsgTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _RCRoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lGameMaster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgamemaster_)));
          set_has_m_lgamemaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRoomIndex;
        break;
      }
      
      // required int32 m_lRoomIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRoomIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lroomindex_)));
          set_has_m_lroomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lState;
        break;
      }
      
      // required int32 m_lState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_option;
        break;
      }
      
      // required .Game_Poker._Option m_option = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblUI;
        break;
      }
      
      // optional .Game_Poker._UITable m_tblUI = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblUI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_tblCard;
        break;
      }
      
      // optional .Game_Poker._CardTable m_tblCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_tblMoney;
        break;
      }
      
      // optional .Game_Poker._MoneyTable m_tblMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_tblBettingMsg;
        break;
      }
      
      // optional .Game_Poker._BettingMsgTable m_tblBettingMsg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblBettingMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tblbettingmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _RCRoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lGameMaster = 1;
  if (has_m_lgamemaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lgamemaster(), output);
  }
  
  // required int32 m_lRoomIndex = 2;
  if (has_m_lroomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lroomindex(), output);
  }
  
  // required int32 m_lState = 3;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lstate(), output);
  }
  
  // required .Game_Poker._Option m_option = 4;
  if (has_m_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_option(), output);
  }
  
  // optional .Game_Poker._UITable m_tblUI = 5;
  if (has_m_tblui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_tblui(), output);
  }
  
  // optional .Game_Poker._CardTable m_tblCard = 6;
  if (has_m_tblcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_tblcard(), output);
  }
  
  // optional .Game_Poker._MoneyTable m_tblMoney = 7;
  if (has_m_tblmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_tblmoney(), output);
  }
  
  // optional .Game_Poker._BettingMsgTable m_tblBettingMsg = 8;
  if (has_m_tblbettingmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_tblbettingmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _RCRoomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lGameMaster = 1;
  if (has_m_lgamemaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lgamemaster(), target);
  }
  
  // required int32 m_lRoomIndex = 2;
  if (has_m_lroomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lroomindex(), target);
  }
  
  // required int32 m_lState = 3;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lstate(), target);
  }
  
  // required .Game_Poker._Option m_option = 4;
  if (has_m_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_option(), target);
  }
  
  // optional .Game_Poker._UITable m_tblUI = 5;
  if (has_m_tblui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_tblui(), target);
  }
  
  // optional .Game_Poker._CardTable m_tblCard = 6;
  if (has_m_tblcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_tblcard(), target);
  }
  
  // optional .Game_Poker._MoneyTable m_tblMoney = 7;
  if (has_m_tblmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_tblmoney(), target);
  }
  
  // optional .Game_Poker._BettingMsgTable m_tblBettingMsg = 8;
  if (has_m_tblbettingmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_tblbettingmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _RCRoomData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lGameMaster = 1;
    if (has_m_lgamemaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgamemaster());
    }
    
    // required int32 m_lRoomIndex = 2;
    if (has_m_lroomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lroomindex());
    }
    
    // required int32 m_lState = 3;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lstate());
    }
    
    // required .Game_Poker._Option m_option = 4;
    if (has_m_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_option());
    }
    
    // optional .Game_Poker._UITable m_tblUI = 5;
    if (has_m_tblui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblui());
    }
    
    // optional .Game_Poker._CardTable m_tblCard = 6;
    if (has_m_tblcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblcard());
    }
    
    // optional .Game_Poker._MoneyTable m_tblMoney = 7;
    if (has_m_tblmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblmoney());
    }
    
    // optional .Game_Poker._BettingMsgTable m_tblBettingMsg = 8;
    if (has_m_tblbettingmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tblbettingmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _RCRoomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _RCRoomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _RCRoomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _RCRoomData::MergeFrom(const _RCRoomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lgamemaster()) {
      set_m_lgamemaster(from.m_lgamemaster());
    }
    if (from.has_m_lroomindex()) {
      set_m_lroomindex(from.m_lroomindex());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_option()) {
      mutable_m_option()->::Game_Poker::_Option::MergeFrom(from.m_option());
    }
    if (from.has_m_tblui()) {
      mutable_m_tblui()->::Game_Poker::_UITable::MergeFrom(from.m_tblui());
    }
    if (from.has_m_tblcard()) {
      mutable_m_tblcard()->::Game_Poker::_CardTable::MergeFrom(from.m_tblcard());
    }
    if (from.has_m_tblmoney()) {
      mutable_m_tblmoney()->::Game_Poker::_MoneyTable::MergeFrom(from.m_tblmoney());
    }
    if (from.has_m_tblbettingmsg()) {
      mutable_m_tblbettingmsg()->::Game_Poker::_BettingMsgTable::MergeFrom(from.m_tblbettingmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _RCRoomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _RCRoomData::CopyFrom(const _RCRoomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _RCRoomData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_option()) {
    if (!this->m_option().IsInitialized()) return false;
  }
  if (has_m_tblui()) {
    if (!this->m_tblui().IsInitialized()) return false;
  }
  if (has_m_tblcard()) {
    if (!this->m_tblcard().IsInitialized()) return false;
  }
  if (has_m_tblmoney()) {
    if (!this->m_tblmoney().IsInitialized()) return false;
  }
  if (has_m_tblbettingmsg()) {
    if (!this->m_tblbettingmsg().IsInitialized()) return false;
  }
  return true;
}

void _RCRoomData::Swap(_RCRoomData* other) {
  if (other != this) {
    std::swap(m_lgamemaster_, other->m_lgamemaster_);
    std::swap(m_lroomindex_, other->m_lroomindex_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_option_, other->m_option_);
    std::swap(m_tblui_, other->m_tblui_);
    std::swap(m_tblcard_, other->m_tblcard_);
    std::swap(m_tblmoney_, other->m_tblmoney_);
    std::swap(m_tblbettingmsg_, other->m_tblbettingmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _RCRoomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _RCRoomData_descriptor_;
  metadata.reflection = _RCRoomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _SPUserBaseInfo::kMLUSNFieldNumber;
const int _SPUserBaseInfo::kMSUserIDFieldNumber;
const int _SPUserBaseInfo::kMSNickNameFieldNumber;
const int _SPUserBaseInfo::kMLUSCFieldNumber;
const int _SPUserBaseInfo::kMLJuminFieldNumber;
const int _SPUserBaseInfo::kMLFirstUSNFieldNumber;
const int _SPUserBaseInfo::kMLAgeIndexFieldNumber;
const int _SPUserBaseInfo::kMLJobIndexFieldNumber;
const int _SPUserBaseInfo::kMLRegionIndexFieldNumber;
const int _SPUserBaseInfo::kMLGuildIndexFieldNumber;
const int _SPUserBaseInfo::kMLMemberIndexFieldNumber;
const int _SPUserBaseInfo::kMLClientIPFieldNumber;
const int _SPUserBaseInfo::kMLGatewayIPFieldNumber;
const int _SPUserBaseInfo::kMLMacAddressFieldNumber;
const int _SPUserBaseInfo::kMSMobileInfoFieldNumber;
const int _SPUserBaseInfo::kMSAuthKeyFieldNumber;
#endif  // !_MSC_VER

_SPUserBaseInfo::_SPUserBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _SPUserBaseInfo::InitAsDefaultInstance() {
}

_SPUserBaseInfo::_SPUserBaseInfo(const _SPUserBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _SPUserBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_suserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lusc_ = 0;
  m_ljumin_ = 0;
  m_lfirstusn_ = 0;
  m_lageindex_ = 0;
  m_ljobindex_ = 0;
  m_lregionindex_ = 0;
  m_lguildindex_ = 0;
  m_lmemberindex_ = 0;
  m_lclientip_ = 0;
  m_lgatewayip_ = 0;
  m_lmacaddress_ = 0;
  m_smobileinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sauthkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_SPUserBaseInfo::~_SPUserBaseInfo() {
  SharedDtor();
}

void _SPUserBaseInfo::SharedDtor() {
  if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_suserid_;
  }
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smobileinfo_;
  }
  if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sauthkey_;
  }
  if (this != default_instance_) {
  }
}

void _SPUserBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _SPUserBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _SPUserBaseInfo_descriptor_;
}

const _SPUserBaseInfo& _SPUserBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_SPUserBaseInfo* _SPUserBaseInfo::default_instance_ = NULL;

_SPUserBaseInfo* _SPUserBaseInfo::New() const {
  return new _SPUserBaseInfo;
}

void _SPUserBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_suserid()) {
      if (m_suserid_ != &::google::protobuf::internal::kEmptyString) {
        m_suserid_->clear();
      }
    }
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    m_lusc_ = 0;
    m_ljumin_ = 0;
    m_lfirstusn_ = 0;
    m_lageindex_ = 0;
    m_ljobindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lregionindex_ = 0;
    m_lguildindex_ = 0;
    m_lmemberindex_ = 0;
    m_lclientip_ = 0;
    m_lgatewayip_ = 0;
    m_lmacaddress_ = 0;
    if (has_m_smobileinfo()) {
      if (m_smobileinfo_ != &::google::protobuf::internal::kEmptyString) {
        m_smobileinfo_->clear();
      }
    }
    if (has_m_sauthkey()) {
      if (m_sauthkey_ != &::google::protobuf::internal::kEmptyString) {
        m_sauthkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _SPUserBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sUserID;
        break;
      }
      
      // required string m_sUserID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_suserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_suserid().data(), this->m_suserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lUSC;
        break;
      }
      
      // required int32 m_lUSC = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lUSC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lusc_)));
          set_has_m_lusc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lJumin;
        break;
      }
      
      // required int32 m_lJumin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJumin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ljumin_)));
          set_has_m_ljumin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lFirstUSN;
        break;
      }
      
      // required int32 m_lFirstUSN = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lFirstUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lfirstusn_)));
          set_has_m_lfirstusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lAgeIndex;
        break;
      }
      
      // required int32 m_lAgeIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lAgeIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lageindex_)));
          set_has_m_lageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lJobIndex;
        break;
      }
      
      // required int32 m_lJobIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lJobIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ljobindex_)));
          set_has_m_ljobindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lRegionIndex;
        break;
      }
      
      // required int32 m_lRegionIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRegionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lregionindex_)));
          set_has_m_lregionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lGuildIndex;
        break;
      }
      
      // required int32 m_lGuildIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGuildIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lguildindex_)));
          set_has_m_lguildindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lMemberIndex;
        break;
      }
      
      // required int32 m_lMemberIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMemberIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmemberindex_)));
          set_has_m_lmemberindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_lClientIP;
        break;
      }
      
      // required int32 m_lClientIP = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lClientIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lclientip_)));
          set_has_m_lclientip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_lGatewayIP;
        break;
      }
      
      // required int32 m_lGatewayIP = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lGatewayIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lgatewayip_)));
          set_has_m_lgatewayip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_lMacAddress;
        break;
      }
      
      // required int32 m_lMacAddress = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lMacAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lmacaddress_)));
          set_has_m_lmacaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_sMobileInfo;
        break;
      }
      
      // required string m_sMobileInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMobileInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smobileinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_smobileinfo().data(), this->m_smobileinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_sAuthKey;
        break;
      }
      
      // required string m_sAuthKey = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAuthKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sauthkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sauthkey().data(), this->m_sauthkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _SPUserBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lusn(), output);
  }
  
  // required string m_sUserID = 2;
  if (has_m_suserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_suserid().data(), this->m_suserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_suserid(), output);
  }
  
  // required string m_sNickName = 3;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_snickname(), output);
  }
  
  // required int32 m_lUSC = 4;
  if (has_m_lusc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lusc(), output);
  }
  
  // required int32 m_lJumin = 5;
  if (has_m_ljumin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ljumin(), output);
  }
  
  // required int32 m_lFirstUSN = 6;
  if (has_m_lfirstusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lfirstusn(), output);
  }
  
  // required int32 m_lAgeIndex = 7;
  if (has_m_lageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lageindex(), output);
  }
  
  // required int32 m_lJobIndex = 8;
  if (has_m_ljobindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_ljobindex(), output);
  }
  
  // required int32 m_lRegionIndex = 9;
  if (has_m_lregionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_lregionindex(), output);
  }
  
  // required int32 m_lGuildIndex = 10;
  if (has_m_lguildindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_lguildindex(), output);
  }
  
  // required int32 m_lMemberIndex = 11;
  if (has_m_lmemberindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_lmemberindex(), output);
  }
  
  // required int32 m_lClientIP = 12;
  if (has_m_lclientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_lclientip(), output);
  }
  
  // required int32 m_lGatewayIP = 13;
  if (has_m_lgatewayip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_lgatewayip(), output);
  }
  
  // required int32 m_lMacAddress = 14;
  if (has_m_lmacaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_lmacaddress(), output);
  }
  
  // required string m_sMobileInfo = 15;
  if (has_m_smobileinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smobileinfo().data(), this->m_smobileinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_smobileinfo(), output);
  }
  
  // required string m_sAuthKey = 16;
  if (has_m_sauthkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sauthkey().data(), this->m_sauthkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->m_sauthkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _SPUserBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required string m_sUserID = 2;
  if (has_m_suserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_suserid().data(), this->m_suserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_suserid(), target);
  }
  
  // required string m_sNickName = 3;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_snickname(), target);
  }
  
  // required int32 m_lUSC = 4;
  if (has_m_lusc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lusc(), target);
  }
  
  // required int32 m_lJumin = 5;
  if (has_m_ljumin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_ljumin(), target);
  }
  
  // required int32 m_lFirstUSN = 6;
  if (has_m_lfirstusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lfirstusn(), target);
  }
  
  // required int32 m_lAgeIndex = 7;
  if (has_m_lageindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_lageindex(), target);
  }
  
  // required int32 m_lJobIndex = 8;
  if (has_m_ljobindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_ljobindex(), target);
  }
  
  // required int32 m_lRegionIndex = 9;
  if (has_m_lregionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_lregionindex(), target);
  }
  
  // required int32 m_lGuildIndex = 10;
  if (has_m_lguildindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_lguildindex(), target);
  }
  
  // required int32 m_lMemberIndex = 11;
  if (has_m_lmemberindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_lmemberindex(), target);
  }
  
  // required int32 m_lClientIP = 12;
  if (has_m_lclientip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_lclientip(), target);
  }
  
  // required int32 m_lGatewayIP = 13;
  if (has_m_lgatewayip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_lgatewayip(), target);
  }
  
  // required int32 m_lMacAddress = 14;
  if (has_m_lmacaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_lmacaddress(), target);
  }
  
  // required string m_sMobileInfo = 15;
  if (has_m_smobileinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smobileinfo().data(), this->m_smobileinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->m_smobileinfo(), target);
  }
  
  // required string m_sAuthKey = 16;
  if (has_m_sauthkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sauthkey().data(), this->m_sauthkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->m_sauthkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _SPUserBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusn());
    }
    
    // required string m_sUserID = 2;
    if (has_m_suserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_suserid());
    }
    
    // required string m_sNickName = 3;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required int32 m_lUSC = 4;
    if (has_m_lusc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lusc());
    }
    
    // required int32 m_lJumin = 5;
    if (has_m_ljumin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ljumin());
    }
    
    // required int32 m_lFirstUSN = 6;
    if (has_m_lfirstusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lfirstusn());
    }
    
    // required int32 m_lAgeIndex = 7;
    if (has_m_lageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lageindex());
    }
    
    // required int32 m_lJobIndex = 8;
    if (has_m_ljobindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ljobindex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_lRegionIndex = 9;
    if (has_m_lregionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lregionindex());
    }
    
    // required int32 m_lGuildIndex = 10;
    if (has_m_lguildindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lguildindex());
    }
    
    // required int32 m_lMemberIndex = 11;
    if (has_m_lmemberindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmemberindex());
    }
    
    // required int32 m_lClientIP = 12;
    if (has_m_lclientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lclientip());
    }
    
    // required int32 m_lGatewayIP = 13;
    if (has_m_lgatewayip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lgatewayip());
    }
    
    // required int32 m_lMacAddress = 14;
    if (has_m_lmacaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lmacaddress());
    }
    
    // required string m_sMobileInfo = 15;
    if (has_m_smobileinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smobileinfo());
    }
    
    // required string m_sAuthKey = 16;
    if (has_m_sauthkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sauthkey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _SPUserBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _SPUserBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _SPUserBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _SPUserBaseInfo::MergeFrom(const _SPUserBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_suserid()) {
      set_m_suserid(from.m_suserid());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_lusc()) {
      set_m_lusc(from.m_lusc());
    }
    if (from.has_m_ljumin()) {
      set_m_ljumin(from.m_ljumin());
    }
    if (from.has_m_lfirstusn()) {
      set_m_lfirstusn(from.m_lfirstusn());
    }
    if (from.has_m_lageindex()) {
      set_m_lageindex(from.m_lageindex());
    }
    if (from.has_m_ljobindex()) {
      set_m_ljobindex(from.m_ljobindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lregionindex()) {
      set_m_lregionindex(from.m_lregionindex());
    }
    if (from.has_m_lguildindex()) {
      set_m_lguildindex(from.m_lguildindex());
    }
    if (from.has_m_lmemberindex()) {
      set_m_lmemberindex(from.m_lmemberindex());
    }
    if (from.has_m_lclientip()) {
      set_m_lclientip(from.m_lclientip());
    }
    if (from.has_m_lgatewayip()) {
      set_m_lgatewayip(from.m_lgatewayip());
    }
    if (from.has_m_lmacaddress()) {
      set_m_lmacaddress(from.m_lmacaddress());
    }
    if (from.has_m_smobileinfo()) {
      set_m_smobileinfo(from.m_smobileinfo());
    }
    if (from.has_m_sauthkey()) {
      set_m_sauthkey(from.m_sauthkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _SPUserBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _SPUserBaseInfo::CopyFrom(const _SPUserBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _SPUserBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;
  
  return true;
}

void _SPUserBaseInfo::Swap(_SPUserBaseInfo* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_suserid_, other->m_suserid_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_lusc_, other->m_lusc_);
    std::swap(m_ljumin_, other->m_ljumin_);
    std::swap(m_lfirstusn_, other->m_lfirstusn_);
    std::swap(m_lageindex_, other->m_lageindex_);
    std::swap(m_ljobindex_, other->m_ljobindex_);
    std::swap(m_lregionindex_, other->m_lregionindex_);
    std::swap(m_lguildindex_, other->m_lguildindex_);
    std::swap(m_lmemberindex_, other->m_lmemberindex_);
    std::swap(m_lclientip_, other->m_lclientip_);
    std::swap(m_lgatewayip_, other->m_lgatewayip_);
    std::swap(m_lmacaddress_, other->m_lmacaddress_);
    std::swap(m_smobileinfo_, other->m_smobileinfo_);
    std::swap(m_sauthkey_, other->m_sauthkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _SPUserBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _SPUserBaseInfo_descriptor_;
  metadata.reflection = _SPUserBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_Entry::kMNVersionFieldNumber;
const int _MsgCS_Entry::kMBWelcomeSoundFieldNumber;
const int _MsgCS_Entry::kMLSoundTypeFieldNumber;
const int _MsgCS_Entry::kMSNickNameFieldNumber;
const int _MsgCS_Entry::kMSAvtFieldNumber;
const int _MsgCS_Entry::kMLCLevelFieldNumber;
const int _MsgCS_Entry::kMLSexFieldNumber;
#endif  // !_MSC_VER

_MsgCS_Entry::_MsgCS_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_Entry::InitAsDefaultInstance() {
}

_MsgCS_Entry::_MsgCS_Entry(const _MsgCS_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_Entry::SharedCtor() {
  _cached_size_ = 0;
  m_nversion_ = 0;
  m_bwelcomesound_ = 0;
  m_lsoundtype_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_savt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lclevel_ = 0;
  m_lsex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_Entry::~_MsgCS_Entry() {
  SharedDtor();
}

void _MsgCS_Entry::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
    delete m_savt_;
  }
  if (this != default_instance_) {
  }
}

void _MsgCS_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_Entry_descriptor_;
}

const _MsgCS_Entry& _MsgCS_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_Entry* _MsgCS_Entry::default_instance_ = NULL;

_MsgCS_Entry* _MsgCS_Entry::New() const {
  return new _MsgCS_Entry;
}

void _MsgCS_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nversion_ = 0;
    m_bwelcomesound_ = 0;
    m_lsoundtype_ = 0;
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    if (has_m_savt()) {
      if (m_savt_ != &::google::protobuf::internal::kEmptyString) {
        m_savt_->clear();
      }
    }
    m_lclevel_ = 0;
    m_lsex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nversion_)));
          set_has_m_nversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bWelcomeSound;
        break;
      }
      
      // required sint32 m_bWelcomeSound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bWelcomeSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bwelcomesound_)));
          set_has_m_bwelcomesound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sNickName;
        break;
      }
      
      // required string m_sNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_sAvt;
        break;
      }
      
      // required string m_sAvt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sAvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_savt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_savt().data(), this->m_savt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lCLevel;
        break;
      }
      
      // required sint32 m_lCLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lclevel_)));
          set_has_m_lclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lSex;
        break;
      }
      
      // required sint32 m_lSex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsex_)));
          set_has_m_lsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nVersion = 1;
  if (has_m_nversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nversion(), output);
  }
  
  // required sint32 m_bWelcomeSound = 2;
  if (has_m_bwelcomesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bwelcomesound(), output);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lsoundtype(), output);
  }
  
  // required string m_sNickName = 4;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_snickname(), output);
  }
  
  // required string m_sAvt = 5;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_savt(), output);
  }
  
  // required sint32 m_lCLevel = 6;
  if (has_m_lclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lclevel(), output);
  }
  
  // required sint32 m_lSex = 7;
  if (has_m_lsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lsex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nVersion = 1;
  if (has_m_nversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nversion(), target);
  }
  
  // required sint32 m_bWelcomeSound = 2;
  if (has_m_bwelcomesound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_bwelcomesound(), target);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lsoundtype(), target);
  }
  
  // required string m_sNickName = 4;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_snickname(), target);
  }
  
  // required string m_sAvt = 5;
  if (has_m_savt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_savt().data(), this->m_savt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_savt(), target);
  }
  
  // required sint32 m_lCLevel = 6;
  if (has_m_lclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_lclevel(), target);
  }
  
  // required sint32 m_lSex = 7;
  if (has_m_lsex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->m_lsex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_Entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nVersion = 1;
    if (has_m_nversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nversion());
    }
    
    // required sint32 m_bWelcomeSound = 2;
    if (has_m_bwelcomesound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bwelcomesound());
    }
    
    // required sint32 m_lSoundType = 3;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
    // required string m_sNickName = 4;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required string m_sAvt = 5;
    if (has_m_savt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_savt());
    }
    
    // required sint32 m_lCLevel = 6;
    if (has_m_lclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lclevel());
    }
    
    // required sint32 m_lSex = 7;
    if (has_m_lsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_Entry::MergeFrom(const _MsgCS_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nversion()) {
      set_m_nversion(from.m_nversion());
    }
    if (from.has_m_bwelcomesound()) {
      set_m_bwelcomesound(from.m_bwelcomesound());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_savt()) {
      set_m_savt(from.m_savt());
    }
    if (from.has_m_lclevel()) {
      set_m_lclevel(from.m_lclevel());
    }
    if (from.has_m_lsex()) {
      set_m_lsex(from.m_lsex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_Entry::CopyFrom(const _MsgCS_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void _MsgCS_Entry::Swap(_MsgCS_Entry* other) {
  if (other != this) {
    std::swap(m_nversion_, other->m_nversion_);
    std::swap(m_bwelcomesound_, other->m_bwelcomesound_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_savt_, other->m_savt_);
    std::swap(m_lclevel_, other->m_lclevel_);
    std::swap(m_lsex_, other->m_lsex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_Entry_descriptor_;
  metadata.reflection = _MsgCS_Entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgCS_Observe::_MsgCS_Observe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_Observe::InitAsDefaultInstance() {
}

_MsgCS_Observe::_MsgCS_Observe(const _MsgCS_Observe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_Observe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_Observe::~_MsgCS_Observe() {
  SharedDtor();
}

void _MsgCS_Observe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_Observe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_Observe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_Observe_descriptor_;
}

const _MsgCS_Observe& _MsgCS_Observe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_Observe* _MsgCS_Observe::default_instance_ = NULL;

_MsgCS_Observe* _MsgCS_Observe::New() const {
  return new _MsgCS_Observe;
}

void _MsgCS_Observe::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_Observe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgCS_Observe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_Observe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_Observe::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_Observe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_Observe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_Observe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_Observe::MergeFrom(const _MsgCS_Observe& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_Observe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_Observe::CopyFrom(const _MsgCS_Observe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_Observe::IsInitialized() const {
  
  return true;
}

void _MsgCS_Observe::Swap(_MsgCS_Observe* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_Observe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_Observe_descriptor_;
  metadata.reflection = _MsgCS_Observe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgCS_Start::_MsgCS_Start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_Start::InitAsDefaultInstance() {
}

_MsgCS_Start::_MsgCS_Start(const _MsgCS_Start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_Start::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_Start::~_MsgCS_Start() {
  SharedDtor();
}

void _MsgCS_Start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_Start_descriptor_;
}

const _MsgCS_Start& _MsgCS_Start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_Start* _MsgCS_Start::default_instance_ = NULL;

_MsgCS_Start* _MsgCS_Start::New() const {
  return new _MsgCS_Start;
}

void _MsgCS_Start::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgCS_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_Start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_Start::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_Start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_Start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_Start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_Start::MergeFrom(const _MsgCS_Start& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_Start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_Start::CopyFrom(const _MsgCS_Start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_Start::IsInitialized() const {
  
  return true;
}

void _MsgCS_Start::Swap(_MsgCS_Start* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_Start_descriptor_;
  metadata.reflection = _MsgCS_Start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_SelectedCardReq::kMLCardIdxFieldNumber;
#endif  // !_MSC_VER

_MsgCS_SelectedCardReq::_MsgCS_SelectedCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_SelectedCardReq::InitAsDefaultInstance() {
}

_MsgCS_SelectedCardReq::_MsgCS_SelectedCardReq(const _MsgCS_SelectedCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_SelectedCardReq::SharedCtor() {
  _cached_size_ = 0;
  m_lcardidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_SelectedCardReq::~_MsgCS_SelectedCardReq() {
  SharedDtor();
}

void _MsgCS_SelectedCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_SelectedCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_SelectedCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_SelectedCardReq_descriptor_;
}

const _MsgCS_SelectedCardReq& _MsgCS_SelectedCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_SelectedCardReq* _MsgCS_SelectedCardReq::default_instance_ = NULL;

_MsgCS_SelectedCardReq* _MsgCS_SelectedCardReq::New() const {
  return new _MsgCS_SelectedCardReq;
}

void _MsgCS_SelectedCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lcardidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_SelectedCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lCardIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardidx_)));
          set_has_m_lcardidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_SelectedCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lCardIdx = 1;
  if (has_m_lcardidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lcardidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_SelectedCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lCardIdx = 1;
  if (has_m_lcardidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lcardidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_SelectedCardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lCardIdx = 1;
    if (has_m_lcardidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_SelectedCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_SelectedCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_SelectedCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_SelectedCardReq::MergeFrom(const _MsgCS_SelectedCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lcardidx()) {
      set_m_lcardidx(from.m_lcardidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_SelectedCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_SelectedCardReq::CopyFrom(const _MsgCS_SelectedCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_SelectedCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_SelectedCardReq::Swap(_MsgCS_SelectedCardReq* other) {
  if (other != this) {
    std::swap(m_lcardidx_, other->m_lcardidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_SelectedCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_SelectedCardReq_descriptor_;
  metadata.reflection = _MsgCS_SelectedCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_BettingReq::kMLBetTypeFieldNumber;
#endif  // !_MSC_VER

_MsgCS_BettingReq::_MsgCS_BettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_BettingReq::InitAsDefaultInstance() {
}

_MsgCS_BettingReq::_MsgCS_BettingReq(const _MsgCS_BettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_BettingReq::SharedCtor() {
  _cached_size_ = 0;
  m_lbettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_BettingReq::~_MsgCS_BettingReq() {
  SharedDtor();
}

void _MsgCS_BettingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_BettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_BettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_BettingReq_descriptor_;
}

const _MsgCS_BettingReq& _MsgCS_BettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_BettingReq* _MsgCS_BettingReq::default_instance_ = NULL;

_MsgCS_BettingReq* _MsgCS_BettingReq::New() const {
  return new _MsgCS_BettingReq;
}

void _MsgCS_BettingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbettype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_BettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_BettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBetType = 1;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbettype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_BettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBetType = 1;
  if (has_m_lbettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbettype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_BettingReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBetType = 1;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_BettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_BettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_BettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_BettingReq::MergeFrom(const _MsgCS_BettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_BettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_BettingReq::CopyFrom(const _MsgCS_BettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_BettingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_BettingReq::Swap(_MsgCS_BettingReq* other) {
  if (other != this) {
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_BettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_BettingReq_descriptor_;
  metadata.reflection = _MsgCS_BettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_ChoiceRemoveCard::kMLUSNFieldNumber;
const int _MsgCS_ChoiceRemoveCard::kMNRemoveCardIndexFieldNumber;
#endif  // !_MSC_VER

_MsgCS_ChoiceRemoveCard::_MsgCS_ChoiceRemoveCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_ChoiceRemoveCard::InitAsDefaultInstance() {
}

_MsgCS_ChoiceRemoveCard::_MsgCS_ChoiceRemoveCard(const _MsgCS_ChoiceRemoveCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_ChoiceRemoveCard::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nremovecardindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_ChoiceRemoveCard::~_MsgCS_ChoiceRemoveCard() {
  SharedDtor();
}

void _MsgCS_ChoiceRemoveCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_ChoiceRemoveCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_ChoiceRemoveCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_ChoiceRemoveCard_descriptor_;
}

const _MsgCS_ChoiceRemoveCard& _MsgCS_ChoiceRemoveCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_ChoiceRemoveCard* _MsgCS_ChoiceRemoveCard::default_instance_ = NULL;

_MsgCS_ChoiceRemoveCard* _MsgCS_ChoiceRemoveCard::New() const {
  return new _MsgCS_ChoiceRemoveCard;
}

void _MsgCS_ChoiceRemoveCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nremovecardindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_ChoiceRemoveCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nRemoveCardIndex;
        break;
      }
      
      // required int32 m_nRemoveCardIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRemoveCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nremovecardindex_)));
          set_has_m_nremovecardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_ChoiceRemoveCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nRemoveCardIndex = 2;
  if (has_m_nremovecardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nremovecardindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_ChoiceRemoveCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nRemoveCardIndex = 2;
  if (has_m_nremovecardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nremovecardindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_ChoiceRemoveCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nRemoveCardIndex = 2;
    if (has_m_nremovecardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nremovecardindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_ChoiceRemoveCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_ChoiceRemoveCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_ChoiceRemoveCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_ChoiceRemoveCard::MergeFrom(const _MsgCS_ChoiceRemoveCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nremovecardindex()) {
      set_m_nremovecardindex(from.m_nremovecardindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_ChoiceRemoveCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_ChoiceRemoveCard::CopyFrom(const _MsgCS_ChoiceRemoveCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_ChoiceRemoveCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgCS_ChoiceRemoveCard::Swap(_MsgCS_ChoiceRemoveCard* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nremovecardindex_, other->m_nremovecardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_ChoiceRemoveCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_ChoiceRemoveCard_descriptor_;
  metadata.reflection = _MsgCS_ChoiceRemoveCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_Purge::kMLTypeFieldNumber;
const int _MsgCS_Purge::kMLPurgeUSNFieldNumber;
#endif  // !_MSC_VER

_MsgCS_Purge::_MsgCS_Purge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_Purge::InitAsDefaultInstance() {
}

_MsgCS_Purge::_MsgCS_Purge(const _MsgCS_Purge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_Purge::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_lpurgeusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_Purge::~_MsgCS_Purge() {
  SharedDtor();
}

void _MsgCS_Purge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_Purge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_Purge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_Purge_descriptor_;
}

const _MsgCS_Purge& _MsgCS_Purge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_Purge* _MsgCS_Purge::default_instance_ = NULL;

_MsgCS_Purge* _MsgCS_Purge::New() const {
  return new _MsgCS_Purge;
}

void _MsgCS_Purge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_lpurgeusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_Purge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lPurgeUSN;
        break;
      }
      
      // required sint32 m_lPurgeUSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPurgeUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lpurgeusn_)));
          set_has_m_lpurgeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_Purge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint32 m_lPurgeUSN = 2;
  if (has_m_lpurgeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lpurgeusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_Purge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  // required sint32 m_lPurgeUSN = 2;
  if (has_m_lpurgeusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lpurgeusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_Purge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint32 m_lPurgeUSN = 2;
    if (has_m_lpurgeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lpurgeusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_Purge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_Purge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_Purge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_Purge::MergeFrom(const _MsgCS_Purge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_lpurgeusn()) {
      set_m_lpurgeusn(from.m_lpurgeusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_Purge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_Purge::CopyFrom(const _MsgCS_Purge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_Purge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgCS_Purge::Swap(_MsgCS_Purge* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_lpurgeusn_, other->m_lpurgeusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_Purge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_Purge_descriptor_;
  metadata.reflection = _MsgCS_Purge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_Abuse::kMLTypeFieldNumber;
const int _MsgCS_Abuse::kMSDayFieldNumber;
#endif  // !_MSC_VER

_MsgCS_Abuse::_MsgCS_Abuse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_Abuse::InitAsDefaultInstance() {
}

_MsgCS_Abuse::_MsgCS_Abuse(const _MsgCS_Abuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_Abuse::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_sday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_Abuse::~_MsgCS_Abuse() {
  SharedDtor();
}

void _MsgCS_Abuse::SharedDtor() {
  if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sday_;
  }
  if (this != default_instance_) {
  }
}

void _MsgCS_Abuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_Abuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_Abuse_descriptor_;
}

const _MsgCS_Abuse& _MsgCS_Abuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_Abuse* _MsgCS_Abuse::default_instance_ = NULL;

_MsgCS_Abuse* _MsgCS_Abuse::New() const {
  return new _MsgCS_Abuse;
}

void _MsgCS_Abuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    if (has_m_sday()) {
      if (m_sday_ != &::google::protobuf::internal::kEmptyString) {
        m_sday_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_Abuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sDay;
        break;
      }
      
      // required string m_sDay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sday().data(), this->m_sday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_Abuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required string m_sDay = 2;
  if (has_m_sday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sday().data(), this->m_sday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_sday(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_Abuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  // required string m_sDay = 2;
  if (has_m_sday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sday().data(), this->m_sday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_sday(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_Abuse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required string m_sDay = 2;
    if (has_m_sday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sday());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_Abuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_Abuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_Abuse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_Abuse::MergeFrom(const _MsgCS_Abuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_sday()) {
      set_m_sday(from.m_sday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_Abuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_Abuse::CopyFrom(const _MsgCS_Abuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_Abuse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgCS_Abuse::Swap(_MsgCS_Abuse* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_sday_, other->m_sday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_Abuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_Abuse_descriptor_;
  metadata.reflection = _MsgCS_Abuse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_AskPurgeVote::kMLPurgeUSNFieldNumber;
#endif  // !_MSC_VER

_MsgCS_AskPurgeVote::_MsgCS_AskPurgeVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_AskPurgeVote::InitAsDefaultInstance() {
}

_MsgCS_AskPurgeVote::_MsgCS_AskPurgeVote(const _MsgCS_AskPurgeVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_AskPurgeVote::SharedCtor() {
  _cached_size_ = 0;
  m_lpurgeusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_AskPurgeVote::~_MsgCS_AskPurgeVote() {
  SharedDtor();
}

void _MsgCS_AskPurgeVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_AskPurgeVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_AskPurgeVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_AskPurgeVote_descriptor_;
}

const _MsgCS_AskPurgeVote& _MsgCS_AskPurgeVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_AskPurgeVote* _MsgCS_AskPurgeVote::default_instance_ = NULL;

_MsgCS_AskPurgeVote* _MsgCS_AskPurgeVote::New() const {
  return new _MsgCS_AskPurgeVote;
}

void _MsgCS_AskPurgeVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lpurgeusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_AskPurgeVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lPurgeUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lpurgeusn_)));
          set_has_m_lpurgeusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_AskPurgeVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lPurgeUSN = 1;
  if (has_m_lpurgeusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lpurgeusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_AskPurgeVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lPurgeUSN = 1;
  if (has_m_lpurgeusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lpurgeusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_AskPurgeVote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lPurgeUSN = 1;
    if (has_m_lpurgeusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lpurgeusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_AskPurgeVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_AskPurgeVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_AskPurgeVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_AskPurgeVote::MergeFrom(const _MsgCS_AskPurgeVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lpurgeusn()) {
      set_m_lpurgeusn(from.m_lpurgeusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_AskPurgeVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_AskPurgeVote::CopyFrom(const _MsgCS_AskPurgeVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_AskPurgeVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_AskPurgeVote::Swap(_MsgCS_AskPurgeVote* other) {
  if (other != this) {
    std::swap(m_lpurgeusn_, other->m_lpurgeusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_AskPurgeVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_AskPurgeVote_descriptor_;
  metadata.reflection = _MsgCS_AskPurgeVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_AnswerPurgeVote::kMLAnswerFieldNumber;
#endif  // !_MSC_VER

_MsgCS_AnswerPurgeVote::_MsgCS_AnswerPurgeVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_AnswerPurgeVote::InitAsDefaultInstance() {
}

_MsgCS_AnswerPurgeVote::_MsgCS_AnswerPurgeVote(const _MsgCS_AnswerPurgeVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_AnswerPurgeVote::SharedCtor() {
  _cached_size_ = 0;
  m_lanswer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_AnswerPurgeVote::~_MsgCS_AnswerPurgeVote() {
  SharedDtor();
}

void _MsgCS_AnswerPurgeVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_AnswerPurgeVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_AnswerPurgeVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_AnswerPurgeVote_descriptor_;
}

const _MsgCS_AnswerPurgeVote& _MsgCS_AnswerPurgeVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_AnswerPurgeVote* _MsgCS_AnswerPurgeVote::default_instance_ = NULL;

_MsgCS_AnswerPurgeVote* _MsgCS_AnswerPurgeVote::New() const {
  return new _MsgCS_AnswerPurgeVote;
}

void _MsgCS_AnswerPurgeVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lanswer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_AnswerPurgeVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lAnswer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lanswer_)));
          set_has_m_lanswer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_AnswerPurgeVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lAnswer = 1;
  if (has_m_lanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lanswer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_AnswerPurgeVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lAnswer = 1;
  if (has_m_lanswer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lanswer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_AnswerPurgeVote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lAnswer = 1;
    if (has_m_lanswer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lanswer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_AnswerPurgeVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_AnswerPurgeVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_AnswerPurgeVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_AnswerPurgeVote::MergeFrom(const _MsgCS_AnswerPurgeVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lanswer()) {
      set_m_lanswer(from.m_lanswer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_AnswerPurgeVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_AnswerPurgeVote::CopyFrom(const _MsgCS_AnswerPurgeVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_AnswerPurgeVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_AnswerPurgeVote::Swap(_MsgCS_AnswerPurgeVote* other) {
  if (other != this) {
    std::swap(m_lanswer_, other->m_lanswer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_AnswerPurgeVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_AnswerPurgeVote_descriptor_;
  metadata.reflection = _MsgCS_AnswerPurgeVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_WaitingUserTicketReq::kMNTypeFieldNumber;
const int _MsgCS_WaitingUserTicketReq::kMBValueFieldNumber;
#endif  // !_MSC_VER

_MsgCS_WaitingUserTicketReq::_MsgCS_WaitingUserTicketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_WaitingUserTicketReq::InitAsDefaultInstance() {
}

_MsgCS_WaitingUserTicketReq::_MsgCS_WaitingUserTicketReq(const _MsgCS_WaitingUserTicketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_WaitingUserTicketReq::SharedCtor() {
  _cached_size_ = 0;
  m_ntype_ = 0;
  m_bvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_WaitingUserTicketReq::~_MsgCS_WaitingUserTicketReq() {
  SharedDtor();
}

void _MsgCS_WaitingUserTicketReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_WaitingUserTicketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_WaitingUserTicketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_WaitingUserTicketReq_descriptor_;
}

const _MsgCS_WaitingUserTicketReq& _MsgCS_WaitingUserTicketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_WaitingUserTicketReq* _MsgCS_WaitingUserTicketReq::default_instance_ = NULL;

_MsgCS_WaitingUserTicketReq* _MsgCS_WaitingUserTicketReq::New() const {
  return new _MsgCS_WaitingUserTicketReq;
}

void _MsgCS_WaitingUserTicketReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntype_ = 0;
    m_bvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_WaitingUserTicketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bValue;
        break;
      }
      
      // required sint32 m_bValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bvalue_)));
          set_has_m_bvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_WaitingUserTicketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntype(), output);
  }
  
  // required sint32 m_bValue = 2;
  if (has_m_bvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_WaitingUserTicketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ntype(), target);
  }
  
  // required sint32 m_bValue = 2;
  if (has_m_bvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_bvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_WaitingUserTicketReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nType = 1;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint32 m_bValue = 2;
    if (has_m_bvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_WaitingUserTicketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_WaitingUserTicketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_WaitingUserTicketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_WaitingUserTicketReq::MergeFrom(const _MsgCS_WaitingUserTicketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_bvalue()) {
      set_m_bvalue(from.m_bvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_WaitingUserTicketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_WaitingUserTicketReq::CopyFrom(const _MsgCS_WaitingUserTicketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_WaitingUserTicketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgCS_WaitingUserTicketReq::Swap(_MsgCS_WaitingUserTicketReq* other) {
  if (other != this) {
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(m_bvalue_, other->m_bvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_WaitingUserTicketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_WaitingUserTicketReq_descriptor_;
  metadata.reflection = _MsgCS_WaitingUserTicketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgCS_UpdateWaitingUserInfoReq::_MsgCS_UpdateWaitingUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_UpdateWaitingUserInfoReq::InitAsDefaultInstance() {
}

_MsgCS_UpdateWaitingUserInfoReq::_MsgCS_UpdateWaitingUserInfoReq(const _MsgCS_UpdateWaitingUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_UpdateWaitingUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_UpdateWaitingUserInfoReq::~_MsgCS_UpdateWaitingUserInfoReq() {
  SharedDtor();
}

void _MsgCS_UpdateWaitingUserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_UpdateWaitingUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_UpdateWaitingUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_UpdateWaitingUserInfoReq_descriptor_;
}

const _MsgCS_UpdateWaitingUserInfoReq& _MsgCS_UpdateWaitingUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_UpdateWaitingUserInfoReq* _MsgCS_UpdateWaitingUserInfoReq::default_instance_ = NULL;

_MsgCS_UpdateWaitingUserInfoReq* _MsgCS_UpdateWaitingUserInfoReq::New() const {
  return new _MsgCS_UpdateWaitingUserInfoReq;
}

void _MsgCS_UpdateWaitingUserInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_UpdateWaitingUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgCS_UpdateWaitingUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_UpdateWaitingUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_UpdateWaitingUserInfoReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_UpdateWaitingUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_UpdateWaitingUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_UpdateWaitingUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_UpdateWaitingUserInfoReq::MergeFrom(const _MsgCS_UpdateWaitingUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_UpdateWaitingUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_UpdateWaitingUserInfoReq::CopyFrom(const _MsgCS_UpdateWaitingUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_UpdateWaitingUserInfoReq::IsInitialized() const {
  
  return true;
}

void _MsgCS_UpdateWaitingUserInfoReq::Swap(_MsgCS_UpdateWaitingUserInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_UpdateWaitingUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_UpdateWaitingUserInfoReq_descriptor_;
  metadata.reflection = _MsgCS_UpdateWaitingUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_SoundType::kMLSoundTypeFieldNumber;
#endif  // !_MSC_VER

_MsgCS_SoundType::_MsgCS_SoundType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_SoundType::InitAsDefaultInstance() {
}

_MsgCS_SoundType::_MsgCS_SoundType(const _MsgCS_SoundType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_SoundType::SharedCtor() {
  _cached_size_ = 0;
  m_lsoundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_SoundType::~_MsgCS_SoundType() {
  SharedDtor();
}

void _MsgCS_SoundType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_SoundType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_SoundType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_SoundType_descriptor_;
}

const _MsgCS_SoundType& _MsgCS_SoundType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_SoundType* _MsgCS_SoundType::default_instance_ = NULL;

_MsgCS_SoundType* _MsgCS_SoundType::New() const {
  return new _MsgCS_SoundType;
}

void _MsgCS_SoundType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lsoundtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_SoundType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lSoundType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_SoundType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lSoundType = 1;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lsoundtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_SoundType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lSoundType = 1;
  if (has_m_lsoundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lsoundtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_SoundType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lSoundType = 1;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_SoundType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_SoundType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_SoundType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_SoundType::MergeFrom(const _MsgCS_SoundType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_SoundType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_SoundType::CopyFrom(const _MsgCS_SoundType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_SoundType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_SoundType::Swap(_MsgCS_SoundType* other) {
  if (other != this) {
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_SoundType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_SoundType_descriptor_;
  metadata.reflection = _MsgCS_SoundType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_ExitQue::kMLExitFieldNumber;
const int _MsgCS_ExitQue::kMBActionFieldNumber;
#endif  // !_MSC_VER

_MsgCS_ExitQue::_MsgCS_ExitQue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_ExitQue::InitAsDefaultInstance() {
}

_MsgCS_ExitQue::_MsgCS_ExitQue(const _MsgCS_ExitQue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_ExitQue::SharedCtor() {
  _cached_size_ = 0;
  m_lexit_ = 0;
  m_baction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_ExitQue::~_MsgCS_ExitQue() {
  SharedDtor();
}

void _MsgCS_ExitQue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_ExitQue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_ExitQue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_ExitQue_descriptor_;
}

const _MsgCS_ExitQue& _MsgCS_ExitQue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_ExitQue* _MsgCS_ExitQue::default_instance_ = NULL;

_MsgCS_ExitQue* _MsgCS_ExitQue::New() const {
  return new _MsgCS_ExitQue;
}

void _MsgCS_ExitQue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lexit_ = 0;
    m_baction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_ExitQue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lExit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bAction;
        break;
      }
      
      // required sint32 m_bAction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_baction_)));
          set_has_m_baction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_ExitQue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lexit(), output);
  }
  
  // required sint32 m_bAction = 2;
  if (has_m_baction()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_baction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_ExitQue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lexit(), target);
  }
  
  // required sint32 m_bAction = 2;
  if (has_m_baction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_baction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_ExitQue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lExit = 1;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_bAction = 2;
    if (has_m_baction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_baction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_ExitQue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_ExitQue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_ExitQue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_ExitQue::MergeFrom(const _MsgCS_ExitQue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_baction()) {
      set_m_baction(from.m_baction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_ExitQue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_ExitQue::CopyFrom(const _MsgCS_ExitQue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_ExitQue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgCS_ExitQue::Swap(_MsgCS_ExitQue* other) {
  if (other != this) {
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_baction_, other->m_baction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_ExitQue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_ExitQue_descriptor_;
  metadata.reflection = _MsgCS_ExitQue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_Continue::kMLExitFieldNumber;
#endif  // !_MSC_VER

_MsgCS_Continue::_MsgCS_Continue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_Continue::InitAsDefaultInstance() {
}

_MsgCS_Continue::_MsgCS_Continue(const _MsgCS_Continue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_Continue::SharedCtor() {
  _cached_size_ = 0;
  m_lexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_Continue::~_MsgCS_Continue() {
  SharedDtor();
}

void _MsgCS_Continue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_Continue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_Continue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_Continue_descriptor_;
}

const _MsgCS_Continue& _MsgCS_Continue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_Continue* _MsgCS_Continue::default_instance_ = NULL;

_MsgCS_Continue* _MsgCS_Continue::New() const {
  return new _MsgCS_Continue;
}

void _MsgCS_Continue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lexit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_Continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lExit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_Continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lexit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_Continue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lExit = 1;
  if (has_m_lexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lexit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_Continue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lExit = 1;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_Continue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_Continue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_Continue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_Continue::MergeFrom(const _MsgCS_Continue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_Continue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_Continue::CopyFrom(const _MsgCS_Continue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_Continue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_Continue::Swap(_MsgCS_Continue* other) {
  if (other != this) {
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_Continue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_Continue_descriptor_;
  metadata.reflection = _MsgCS_Continue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_RuleSet::kMNRuleIdxFieldNumber;
#endif  // !_MSC_VER

_MsgCS_RuleSet::_MsgCS_RuleSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_RuleSet::InitAsDefaultInstance() {
}

_MsgCS_RuleSet::_MsgCS_RuleSet(const _MsgCS_RuleSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_RuleSet::SharedCtor() {
  _cached_size_ = 0;
  m_nruleidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_RuleSet::~_MsgCS_RuleSet() {
  SharedDtor();
}

void _MsgCS_RuleSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_RuleSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_RuleSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_RuleSet_descriptor_;
}

const _MsgCS_RuleSet& _MsgCS_RuleSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_RuleSet* _MsgCS_RuleSet::default_instance_ = NULL;

_MsgCS_RuleSet* _MsgCS_RuleSet::New() const {
  return new _MsgCS_RuleSet;
}

void _MsgCS_RuleSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nruleidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_RuleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRuleIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nruleidx_)));
          set_has_m_nruleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_RuleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nruleidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_RuleSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nruleidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_RuleSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRuleIdx = 1;
    if (has_m_nruleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nruleidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_RuleSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_RuleSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_RuleSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_RuleSet::MergeFrom(const _MsgCS_RuleSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nruleidx()) {
      set_m_nruleidx(from.m_nruleidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_RuleSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_RuleSet::CopyFrom(const _MsgCS_RuleSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_RuleSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_RuleSet::Swap(_MsgCS_RuleSet* other) {
  if (other != this) {
    std::swap(m_nruleidx_, other->m_nruleidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_RuleSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_RuleSet_descriptor_;
  metadata.reflection = _MsgCS_RuleSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgCS_GameMasterCall::_MsgCS_GameMasterCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_GameMasterCall::InitAsDefaultInstance() {
}

_MsgCS_GameMasterCall::_MsgCS_GameMasterCall(const _MsgCS_GameMasterCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_GameMasterCall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_GameMasterCall::~_MsgCS_GameMasterCall() {
  SharedDtor();
}

void _MsgCS_GameMasterCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_GameMasterCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_GameMasterCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_GameMasterCall_descriptor_;
}

const _MsgCS_GameMasterCall& _MsgCS_GameMasterCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_GameMasterCall* _MsgCS_GameMasterCall::default_instance_ = NULL;

_MsgCS_GameMasterCall* _MsgCS_GameMasterCall::New() const {
  return new _MsgCS_GameMasterCall;
}

void _MsgCS_GameMasterCall::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_GameMasterCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgCS_GameMasterCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_GameMasterCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_GameMasterCall::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_GameMasterCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_GameMasterCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_GameMasterCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_GameMasterCall::MergeFrom(const _MsgCS_GameMasterCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_GameMasterCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_GameMasterCall::CopyFrom(const _MsgCS_GameMasterCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_GameMasterCall::IsInitialized() const {
  
  return true;
}

void _MsgCS_GameMasterCall::Swap(_MsgCS_GameMasterCall* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_GameMasterCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_GameMasterCall_descriptor_;
  metadata.reflection = _MsgCS_GameMasterCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_FieldReserved::kMNReserved1FieldNumber;
const int _MsgCS_FieldReserved::kMNReserved2FieldNumber;
#endif  // !_MSC_VER

_MsgCS_FieldReserved::_MsgCS_FieldReserved()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_FieldReserved::InitAsDefaultInstance() {
}

_MsgCS_FieldReserved::_MsgCS_FieldReserved(const _MsgCS_FieldReserved& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_FieldReserved::SharedCtor() {
  _cached_size_ = 0;
  m_nreserved1_ = 0;
  m_nreserved2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_FieldReserved::~_MsgCS_FieldReserved() {
  SharedDtor();
}

void _MsgCS_FieldReserved::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_FieldReserved::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_FieldReserved::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_FieldReserved_descriptor_;
}

const _MsgCS_FieldReserved& _MsgCS_FieldReserved::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_FieldReserved* _MsgCS_FieldReserved::default_instance_ = NULL;

_MsgCS_FieldReserved* _MsgCS_FieldReserved::New() const {
  return new _MsgCS_FieldReserved;
}

void _MsgCS_FieldReserved::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nreserved1_ = 0;
    m_nreserved2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_FieldReserved::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nReserved1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserved1_)));
          set_has_m_nreserved1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nReserved2;
        break;
      }
      
      // required int32 m_nReserved2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nReserved2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nreserved2_)));
          set_has_m_nreserved2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_FieldReserved::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nReserved1 = 1;
  if (has_m_nreserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nreserved1(), output);
  }
  
  // required int32 m_nReserved2 = 2;
  if (has_m_nreserved2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nreserved2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_FieldReserved::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nReserved1 = 1;
  if (has_m_nreserved1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nreserved1(), target);
  }
  
  // required int32 m_nReserved2 = 2;
  if (has_m_nreserved2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nreserved2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_FieldReserved::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nReserved1 = 1;
    if (has_m_nreserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserved1());
    }
    
    // required int32 m_nReserved2 = 2;
    if (has_m_nreserved2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nreserved2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_FieldReserved::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_FieldReserved* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_FieldReserved*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_FieldReserved::MergeFrom(const _MsgCS_FieldReserved& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nreserved1()) {
      set_m_nreserved1(from.m_nreserved1());
    }
    if (from.has_m_nreserved2()) {
      set_m_nreserved2(from.m_nreserved2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_FieldReserved::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_FieldReserved::CopyFrom(const _MsgCS_FieldReserved& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_FieldReserved::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgCS_FieldReserved::Swap(_MsgCS_FieldReserved* other) {
  if (other != this) {
    std::swap(m_nreserved1_, other->m_nreserved1_);
    std::swap(m_nreserved2_, other->m_nreserved2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_FieldReserved::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_FieldReserved_descriptor_;
  metadata.reflection = _MsgCS_FieldReserved_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_JokboSet::kMLKey1FieldNumber;
const int _MsgCS_JokboSet::kMLKey2FieldNumber;
const int _MsgCS_JokboSet::kMLKey3FieldNumber;
const int _MsgCS_JokboSet::kMLKey4FieldNumber;
const int _MsgCS_JokboSet::kMLKey5FieldNumber;
#endif  // !_MSC_VER

_MsgCS_JokboSet::_MsgCS_JokboSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_JokboSet::InitAsDefaultInstance() {
}

_MsgCS_JokboSet::_MsgCS_JokboSet(const _MsgCS_JokboSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_JokboSet::SharedCtor() {
  _cached_size_ = 0;
  m_lkey1_ = 0;
  m_lkey2_ = 0;
  m_lkey3_ = 0;
  m_lkey4_ = 0;
  m_lkey5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_JokboSet::~_MsgCS_JokboSet() {
  SharedDtor();
}

void _MsgCS_JokboSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_JokboSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_JokboSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_JokboSet_descriptor_;
}

const _MsgCS_JokboSet& _MsgCS_JokboSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_JokboSet* _MsgCS_JokboSet::default_instance_ = NULL;

_MsgCS_JokboSet* _MsgCS_JokboSet::New() const {
  return new _MsgCS_JokboSet;
}

void _MsgCS_JokboSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lkey1_ = 0;
    m_lkey2_ = 0;
    m_lkey3_ = 0;
    m_lkey4_ = 0;
    m_lkey5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_JokboSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lKey1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey1_)));
          set_has_m_lkey1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lKey2;
        break;
      }
      
      // required sint32 m_lKey2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey2_)));
          set_has_m_lkey2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lKey3;
        break;
      }
      
      // required sint32 m_lKey3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey3_)));
          set_has_m_lkey3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lKey4;
        break;
      }
      
      // required sint32 m_lKey4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey4_)));
          set_has_m_lkey4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lKey5;
        break;
      }
      
      // required sint32 m_lKey5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lKey5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lkey5_)));
          set_has_m_lkey5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_JokboSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lKey1 = 1;
  if (has_m_lkey1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lkey1(), output);
  }
  
  // required sint32 m_lKey2 = 2;
  if (has_m_lkey2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lkey2(), output);
  }
  
  // required sint32 m_lKey3 = 3;
  if (has_m_lkey3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lkey3(), output);
  }
  
  // required sint32 m_lKey4 = 4;
  if (has_m_lkey4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lkey4(), output);
  }
  
  // required sint32 m_lKey5 = 5;
  if (has_m_lkey5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lkey5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_JokboSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lKey1 = 1;
  if (has_m_lkey1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lkey1(), target);
  }
  
  // required sint32 m_lKey2 = 2;
  if (has_m_lkey2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lkey2(), target);
  }
  
  // required sint32 m_lKey3 = 3;
  if (has_m_lkey3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lkey3(), target);
  }
  
  // required sint32 m_lKey4 = 4;
  if (has_m_lkey4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lkey4(), target);
  }
  
  // required sint32 m_lKey5 = 5;
  if (has_m_lkey5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->m_lkey5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_JokboSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lKey1 = 1;
    if (has_m_lkey1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey1());
    }
    
    // required sint32 m_lKey2 = 2;
    if (has_m_lkey2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey2());
    }
    
    // required sint32 m_lKey3 = 3;
    if (has_m_lkey3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey3());
    }
    
    // required sint32 m_lKey4 = 4;
    if (has_m_lkey4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey4());
    }
    
    // required sint32 m_lKey5 = 5;
    if (has_m_lkey5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lkey5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_JokboSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_JokboSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_JokboSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_JokboSet::MergeFrom(const _MsgCS_JokboSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lkey1()) {
      set_m_lkey1(from.m_lkey1());
    }
    if (from.has_m_lkey2()) {
      set_m_lkey2(from.m_lkey2());
    }
    if (from.has_m_lkey3()) {
      set_m_lkey3(from.m_lkey3());
    }
    if (from.has_m_lkey4()) {
      set_m_lkey4(from.m_lkey4());
    }
    if (from.has_m_lkey5()) {
      set_m_lkey5(from.m_lkey5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_JokboSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_JokboSet::CopyFrom(const _MsgCS_JokboSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_JokboSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void _MsgCS_JokboSet::Swap(_MsgCS_JokboSet* other) {
  if (other != this) {
    std::swap(m_lkey1_, other->m_lkey1_);
    std::swap(m_lkey2_, other->m_lkey2_);
    std::swap(m_lkey3_, other->m_lkey3_);
    std::swap(m_lkey4_, other->m_lkey4_);
    std::swap(m_lkey5_, other->m_lkey5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_JokboSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_JokboSet_descriptor_;
  metadata.reflection = _MsgCS_JokboSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_TestKeySetting::kMNCharFieldNumber;
#endif  // !_MSC_VER

_MsgCS_TestKeySetting::_MsgCS_TestKeySetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_TestKeySetting::InitAsDefaultInstance() {
}

_MsgCS_TestKeySetting::_MsgCS_TestKeySetting(const _MsgCS_TestKeySetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_TestKeySetting::SharedCtor() {
  _cached_size_ = 0;
  m_nchar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_TestKeySetting::~_MsgCS_TestKeySetting() {
  SharedDtor();
}

void _MsgCS_TestKeySetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_TestKeySetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_TestKeySetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_TestKeySetting_descriptor_;
}

const _MsgCS_TestKeySetting& _MsgCS_TestKeySetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_TestKeySetting* _MsgCS_TestKeySetting::default_instance_ = NULL;

_MsgCS_TestKeySetting* _MsgCS_TestKeySetting::New() const {
  return new _MsgCS_TestKeySetting;
}

void _MsgCS_TestKeySetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nchar_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_TestKeySetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_nChar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_nchar_)));
          set_has_m_nchar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_TestKeySetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_nChar = 1;
  if (has_m_nchar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_nchar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_TestKeySetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_nChar = 1;
  if (has_m_nchar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_nchar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_TestKeySetting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_nChar = 1;
    if (has_m_nchar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_nchar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_TestKeySetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_TestKeySetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_TestKeySetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_TestKeySetting::MergeFrom(const _MsgCS_TestKeySetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nchar()) {
      set_m_nchar(from.m_nchar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_TestKeySetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_TestKeySetting::CopyFrom(const _MsgCS_TestKeySetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_TestKeySetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_TestKeySetting::Swap(_MsgCS_TestKeySetting* other) {
  if (other != this) {
    std::swap(m_nchar_, other->m_nchar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_TestKeySetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_TestKeySetting_descriptor_;
  metadata.reflection = _MsgCS_TestKeySetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_CheckNotice::kMNTypeFieldNumber;
#endif  // !_MSC_VER

_MsgCS_CheckNotice::_MsgCS_CheckNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_CheckNotice::InitAsDefaultInstance() {
}

_MsgCS_CheckNotice::_MsgCS_CheckNotice(const _MsgCS_CheckNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_CheckNotice::SharedCtor() {
  _cached_size_ = 0;
  m_ntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_CheckNotice::~_MsgCS_CheckNotice() {
  SharedDtor();
}

void _MsgCS_CheckNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_CheckNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_CheckNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_CheckNotice_descriptor_;
}

const _MsgCS_CheckNotice& _MsgCS_CheckNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_CheckNotice* _MsgCS_CheckNotice::default_instance_ = NULL;

_MsgCS_CheckNotice* _MsgCS_CheckNotice::New() const {
  return new _MsgCS_CheckNotice;
}

void _MsgCS_CheckNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_CheckNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_CheckNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_CheckNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nType = 1;
  if (has_m_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ntype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_CheckNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nType = 1;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_CheckNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_CheckNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_CheckNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_CheckNotice::MergeFrom(const _MsgCS_CheckNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_CheckNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_CheckNotice::CopyFrom(const _MsgCS_CheckNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_CheckNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_CheckNotice::Swap(_MsgCS_CheckNotice* other) {
  if (other != this) {
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_CheckNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_CheckNotice_descriptor_;
  metadata.reflection = _MsgCS_CheckNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgCS_Ack::kMNTagIDFieldNumber;
#endif  // !_MSC_VER

_MsgCS_Ack::_MsgCS_Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_Ack::InitAsDefaultInstance() {
}

_MsgCS_Ack::_MsgCS_Ack(const _MsgCS_Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_Ack::SharedCtor() {
  _cached_size_ = 0;
  m_ntagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_Ack::~_MsgCS_Ack() {
  SharedDtor();
}

void _MsgCS_Ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_Ack_descriptor_;
}

const _MsgCS_Ack& _MsgCS_Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_Ack* _MsgCS_Ack::default_instance_ = NULL;

_MsgCS_Ack* _MsgCS_Ack::New() const {
  return new _MsgCS_Ack;
}

void _MsgCS_Ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntagid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nTagID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntagid_)));
          set_has_m_ntagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgCS_Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nTagID = 1;
  if (has_m_ntagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntagid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nTagID = 1;
  if (has_m_ntagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ntagid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_Ack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nTagID = 1;
    if (has_m_ntagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntagid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_Ack::MergeFrom(const _MsgCS_Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntagid()) {
      set_m_ntagid(from.m_ntagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_Ack::CopyFrom(const _MsgCS_Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_Ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgCS_Ack::Swap(_MsgCS_Ack* other) {
  if (other != this) {
    std::swap(m_ntagid_, other->m_ntagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_Ack_descriptor_;
  metadata.reflection = _MsgCS_Ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgCS_Ping::_MsgCS_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgCS_Ping::InitAsDefaultInstance() {
}

_MsgCS_Ping::_MsgCS_Ping(const _MsgCS_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgCS_Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgCS_Ping::~_MsgCS_Ping() {
  SharedDtor();
}

void _MsgCS_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgCS_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgCS_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgCS_Ping_descriptor_;
}

const _MsgCS_Ping& _MsgCS_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgCS_Ping* _MsgCS_Ping::default_instance_ = NULL;

_MsgCS_Ping* _MsgCS_Ping::New() const {
  return new _MsgCS_Ping;
}

void _MsgCS_Ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgCS_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgCS_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgCS_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgCS_Ping::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgCS_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgCS_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgCS_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgCS_Ping::MergeFrom(const _MsgCS_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgCS_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgCS_Ping::CopyFrom(const _MsgCS_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgCS_Ping::IsInitialized() const {
  
  return true;
}

void _MsgCS_Ping::Swap(_MsgCS_Ping* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgCS_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgCS_Ping_descriptor_;
  metadata.reflection = _MsgCS_Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_UserJoinAns::kMLStateFieldNumber;
const int _MsgSC_UserJoinAns::kMNEnterFieldNumber;
const int _MsgSC_UserJoinAns::kMNSetFieldNumber;
const int _MsgSC_UserJoinAns::kMLChannelIdxFieldNumber;
const int _MsgSC_UserJoinAns::kMLOwnerUSNFieldNumber;
const int _MsgSC_UserJoinAns::kMLBossUSNFieldNumber;
const int _MsgSC_UserJoinAns::kMNRoomPurgeCntFieldNumber;
const int _MsgSC_UserJoinAns::kMOptionFieldNumber;
#endif  // !_MSC_VER

_MsgSC_UserJoinAns::_MsgSC_UserJoinAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_UserJoinAns::InitAsDefaultInstance() {
  m_option_ = const_cast< ::Game_Poker::_Option*>(&::Game_Poker::_Option::default_instance());
}

_MsgSC_UserJoinAns::_MsgSC_UserJoinAns(const _MsgSC_UserJoinAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_UserJoinAns::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_nenter_ = 0;
  m_nset_ = 0;
  m_lchannel_idx_ = 0;
  m_lownerusn_ = 0;
  m_lbossusn_ = 0;
  m_nroompurgecnt_ = 0;
  m_option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_UserJoinAns::~_MsgSC_UserJoinAns() {
  SharedDtor();
}

void _MsgSC_UserJoinAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_option_;
  }
}

void _MsgSC_UserJoinAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_UserJoinAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_UserJoinAns_descriptor_;
}

const _MsgSC_UserJoinAns& _MsgSC_UserJoinAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_UserJoinAns* _MsgSC_UserJoinAns::default_instance_ = NULL;

_MsgSC_UserJoinAns* _MsgSC_UserJoinAns::New() const {
  return new _MsgSC_UserJoinAns;
}

void _MsgSC_UserJoinAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_nenter_ = 0;
    m_nset_ = 0;
    m_lchannel_idx_ = 0;
    m_lownerusn_ = 0;
    m_lbossusn_ = 0;
    m_nroompurgecnt_ = 0;
    if (has_m_option()) {
      if (m_option_ != NULL) m_option_->::Game_Poker::_Option::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_UserJoinAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nEnter;
        break;
      }
      
      // required int32 m_nEnter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nenter_)));
          set_has_m_nenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nSet;
        break;
      }
      
      // required int32 m_nSet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nset_)));
          set_has_m_nset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lChannel_idx;
        break;
      }
      
      // required int32 m_lChannel_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChannel_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lchannel_idx_)));
          set_has_m_lchannel_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lBossUSN;
        break;
      }
      
      // required sint32 m_lBossUSN = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBossUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_nRoomPurgeCnt;
        break;
      }
      
      // required int32 m_nRoomPurgeCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRoomPurgeCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nroompurgecnt_)));
          set_has_m_nroompurgecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_option;
        break;
      }
      
      // required .Game_Poker._Option m_option = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_UserJoinAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // required int32 m_nEnter = 2;
  if (has_m_nenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nenter(), output);
  }
  
  // required int32 m_nSet = 3;
  if (has_m_nset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_nset(), output);
  }
  
  // required int32 m_lChannel_idx = 4;
  if (has_m_lchannel_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lchannel_idx(), output);
  }
  
  // required sint32 m_lOwnerUSN = 5;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_lownerusn(), output);
  }
  
  // required sint32 m_lBossUSN = 6;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_lbossusn(), output);
  }
  
  // required int32 m_nRoomPurgeCnt = 7;
  if (has_m_nroompurgecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_nroompurgecnt(), output);
  }
  
  // required .Game_Poker._Option m_option = 8;
  if (has_m_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_option(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_UserJoinAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lstate(), target);
  }
  
  // required int32 m_nEnter = 2;
  if (has_m_nenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nenter(), target);
  }
  
  // required int32 m_nSet = 3;
  if (has_m_nset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_nset(), target);
  }
  
  // required int32 m_lChannel_idx = 4;
  if (has_m_lchannel_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lchannel_idx(), target);
  }
  
  // required sint32 m_lOwnerUSN = 5;
  if (has_m_lownerusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->m_lownerusn(), target);
  }
  
  // required sint32 m_lBossUSN = 6;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_lbossusn(), target);
  }
  
  // required int32 m_nRoomPurgeCnt = 7;
  if (has_m_nroompurgecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_nroompurgecnt(), target);
  }
  
  // required .Game_Poker._Option m_option = 8;
  if (has_m_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_option(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_UserJoinAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required int32 m_nEnter = 2;
    if (has_m_nenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nenter());
    }
    
    // required int32 m_nSet = 3;
    if (has_m_nset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nset());
    }
    
    // required int32 m_lChannel_idx = 4;
    if (has_m_lchannel_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lchannel_idx());
    }
    
    // required sint32 m_lOwnerUSN = 5;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required sint32 m_lBossUSN = 6;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nRoomPurgeCnt = 7;
    if (has_m_nroompurgecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nroompurgecnt());
    }
    
    // required .Game_Poker._Option m_option = 8;
    if (has_m_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_option());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_UserJoinAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_UserJoinAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_UserJoinAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_UserJoinAns::MergeFrom(const _MsgSC_UserJoinAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_nenter()) {
      set_m_nenter(from.m_nenter());
    }
    if (from.has_m_nset()) {
      set_m_nset(from.m_nset());
    }
    if (from.has_m_lchannel_idx()) {
      set_m_lchannel_idx(from.m_lchannel_idx());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_nroompurgecnt()) {
      set_m_nroompurgecnt(from.m_nroompurgecnt());
    }
    if (from.has_m_option()) {
      mutable_m_option()->::Game_Poker::_Option::MergeFrom(from.m_option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_UserJoinAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_UserJoinAns::CopyFrom(const _MsgSC_UserJoinAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_UserJoinAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_m_option()) {
    if (!this->m_option().IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_UserJoinAns::Swap(_MsgSC_UserJoinAns* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_nenter_, other->m_nenter_);
    std::swap(m_nset_, other->m_nset_);
    std::swap(m_lchannel_idx_, other->m_lchannel_idx_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_nroompurgecnt_, other->m_nroompurgecnt_);
    std::swap(m_option_, other->m_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_UserJoinAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_UserJoinAns_descriptor_;
  metadata.reflection = _MsgSC_UserJoinAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_UserJoinErr::kMLUSNFieldNumber;
const int _MsgSC_UserJoinErr::kMLErrorCodeFieldNumber;
#endif  // !_MSC_VER

_MsgSC_UserJoinErr::_MsgSC_UserJoinErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_UserJoinErr::InitAsDefaultInstance() {
}

_MsgSC_UserJoinErr::_MsgSC_UserJoinErr(const _MsgSC_UserJoinErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_UserJoinErr::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_UserJoinErr::~_MsgSC_UserJoinErr() {
  SharedDtor();
}

void _MsgSC_UserJoinErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_UserJoinErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_UserJoinErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_UserJoinErr_descriptor_;
}

const _MsgSC_UserJoinErr& _MsgSC_UserJoinErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_UserJoinErr* _MsgSC_UserJoinErr::default_instance_ = NULL;

_MsgSC_UserJoinErr* _MsgSC_UserJoinErr::New() const {
  return new _MsgSC_UserJoinErr;
}

void _MsgSC_UserJoinErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_UserJoinErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lErrorCode;
        break;
      }
      
      // required sint32 m_lErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lerrorcode_)));
          set_has_m_lerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_UserJoinErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lErrorCode = 2;
  if (has_m_lerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lerrorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_UserJoinErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lErrorCode = 2;
  if (has_m_lerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lerrorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_UserJoinErr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lErrorCode = 2;
    if (has_m_lerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lerrorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_UserJoinErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_UserJoinErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_UserJoinErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_UserJoinErr::MergeFrom(const _MsgSC_UserJoinErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lerrorcode()) {
      set_m_lerrorcode(from.m_lerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_UserJoinErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_UserJoinErr::CopyFrom(const _MsgSC_UserJoinErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_UserJoinErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgSC_UserJoinErr::Swap(_MsgSC_UserJoinErr* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lerrorcode_, other->m_lerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_UserJoinErr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_UserJoinErr_descriptor_;
  metadata.reflection = _MsgSC_UserJoinErr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_UserDisconnect::kMLUSNFieldNumber;
const int _MsgSC_UserDisconnect::kMUinfoFieldNumber;
const int _MsgSC_UserDisconnect::kMLStateFieldNumber;
const int _MsgSC_UserDisconnect::kMLOwnerUSNFieldNumber;
#endif  // !_MSC_VER

_MsgSC_UserDisconnect::_MsgSC_UserDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_UserDisconnect::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::Game_Poker::_UserInfo*>(&::Game_Poker::_UserInfo::default_instance());
}

_MsgSC_UserDisconnect::_MsgSC_UserDisconnect(const _MsgSC_UserDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_UserDisconnect::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_uinfo_ = NULL;
  m_lstate_ = 0;
  m_lownerusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_UserDisconnect::~_MsgSC_UserDisconnect() {
  SharedDtor();
}

void _MsgSC_UserDisconnect::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
  }
}

void _MsgSC_UserDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_UserDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_UserDisconnect_descriptor_;
}

const _MsgSC_UserDisconnect& _MsgSC_UserDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_UserDisconnect* _MsgSC_UserDisconnect::default_instance_ = NULL;

_MsgSC_UserDisconnect* _MsgSC_UserDisconnect::New() const {
  return new _MsgSC_UserDisconnect;
}

void _MsgSC_UserDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::_UserInfo::Clear();
    }
    m_lstate_ = 0;
    m_lownerusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_UserDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_uinfo;
        break;
      }
      
      // required .Game_Poker._UserInfo m_uinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_UserDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required .Game_Poker._UserInfo m_uinfo = 2;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_uinfo(), output);
  }
  
  // required sint32 m_lState = 3;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lstate(), output);
  }
  
  // required sint32 m_lOwnerUSN = 4;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lownerusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_UserDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required .Game_Poker._UserInfo m_uinfo = 2;
  if (has_m_uinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_uinfo(), target);
  }
  
  // required sint32 m_lState = 3;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lstate(), target);
  }
  
  // required sint32 m_lOwnerUSN = 4;
  if (has_m_lownerusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lownerusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_UserDisconnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required .Game_Poker._UserInfo m_uinfo = 2;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
    // required sint32 m_lState = 3;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint32 m_lOwnerUSN = 4;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_UserDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_UserDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_UserDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_UserDisconnect::MergeFrom(const _MsgSC_UserDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::Game_Poker::_UserInfo::MergeFrom(from.m_uinfo());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_UserDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_UserDisconnect::CopyFrom(const _MsgSC_UserDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_UserDisconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_UserDisconnect::Swap(_MsgSC_UserDisconnect* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_UserDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_UserDisconnect_descriptor_;
  metadata.reflection = _MsgSC_UserDisconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_CardData::kMNDealCntFieldNumber;
const int _MsgSC_CardData::kMLCardsDealtFieldNumber;
const int _MsgSC_CardData::kMTblCardFieldNumber;
const int _MsgSC_CardData::kMTblMoneyFieldNumber;
const int _MsgSC_CardData::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_CardData::_MsgSC_CardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_CardData::InitAsDefaultInstance() {
}

_MsgSC_CardData::_MsgSC_CardData(const _MsgSC_CardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_CardData::SharedCtor() {
  _cached_size_ = 0;
  m_ndealcnt_ = 0;
  m_lcardsdealt_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_CardData::~_MsgSC_CardData() {
  SharedDtor();
}

void _MsgSC_CardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_CardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_CardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_CardData_descriptor_;
}

const _MsgSC_CardData& _MsgSC_CardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_CardData* _MsgSC_CardData::default_instance_ = NULL;

_MsgSC_CardData* _MsgSC_CardData::New() const {
  return new _MsgSC_CardData;
}

void _MsgSC_CardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ndealcnt_ = 0;
    m_lcardsdealt_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_CardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nDealCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ndealcnt_)));
          set_has_m_ndealcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .Game_Poker._Cards m_tblCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tblCard;
        if (input->ExpectTag(34)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .Game_Poker._Money m_tblMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblMoney;
        if (input->ExpectTag(40)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_CardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nDealCnt = 1;
  if (has_m_ndealcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ndealcnt(), output);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lcardsdealt(), output);
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 3;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_tblcard(i), output);
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 4;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 5;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_CardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nDealCnt = 1;
  if (has_m_ndealcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ndealcnt(), target);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lcardsdealt(), target);
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 3;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_tblcard(i), target);
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 4;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_tblmoney(i), target);
  }
  
  // required sint64 m_llPoolMoney = 5;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_llpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_CardData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nDealCnt = 1;
    if (has_m_ndealcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ndealcnt());
    }
    
    // required sint32 m_lCardsDealt = 2;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
    // required sint64 m_llPoolMoney = 5;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .Game_Poker._Cards m_tblCard = 3;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 4;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_CardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_CardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_CardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_CardData::MergeFrom(const _MsgSC_CardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ndealcnt()) {
      set_m_ndealcnt(from.m_ndealcnt());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_CardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_CardData::CopyFrom(const _MsgSC_CardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_CardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_CardData::Swap(_MsgSC_CardData* other) {
  if (other != this) {
    std::swap(m_ndealcnt_, other->m_ndealcnt_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_CardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_CardData_descriptor_;
  metadata.reflection = _MsgSC_CardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_EntryAns::kMLUSNFieldNumber;
const int _MsgSC_EntryAns::kMNIndexFieldNumber;
const int _MsgSC_EntryAns::kMLOwnerUSNFieldNumber;
const int _MsgSC_EntryAns::kMTblUIFieldNumber;
const int _MsgSC_EntryAns::kMTblMoneyFieldNumber;
const int _MsgSC_EntryAns::kMBWelcomeSoundFieldNumber;
const int _MsgSC_EntryAns::kMLObserveCntFieldNumber;
#endif  // !_MSC_VER

_MsgSC_EntryAns::_MsgSC_EntryAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_EntryAns::InitAsDefaultInstance() {
}

_MsgSC_EntryAns::_MsgSC_EntryAns(const _MsgSC_EntryAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_EntryAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lownerusn_ = 0;
  m_bwelcomesound_ = 0;
  m_lobservecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_EntryAns::~_MsgSC_EntryAns() {
  SharedDtor();
}

void _MsgSC_EntryAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_EntryAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_EntryAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_EntryAns_descriptor_;
}

const _MsgSC_EntryAns& _MsgSC_EntryAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_EntryAns* _MsgSC_EntryAns::default_instance_ = NULL;

_MsgSC_EntryAns* _MsgSC_EntryAns::New() const {
  return new _MsgSC_EntryAns;
}

void _MsgSC_EntryAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lownerusn_ = 0;
    m_bwelcomesound_ = 0;
    m_lobservecnt_ = 0;
  }
  m_tblui_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_EntryAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblUI;
        break;
      }
      
      // repeated .Game_Poker._UserInfo m_tblUI = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblUI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblUI;
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .Game_Poker._Money m_tblMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        if (input->ExpectTag(48)) goto parse_m_bWelcomeSound;
        break;
      }
      
      // required sint32 m_bWelcomeSound = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bWelcomeSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bwelcomesound_)));
          set_has_m_bwelcomesound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lObserveCnt;
        break;
      }
      
      // required sint32 m_lObserveCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lObserveCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lobservecnt_)));
          set_has_m_lobservecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_EntryAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lownerusn(), output);
  }
  
  // repeated .Game_Poker._UserInfo m_tblUI = 4;
  for (int i = 0; i < this->m_tblui_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_tblui(i), output);
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_tblmoney(i), output);
  }
  
  // required sint32 m_bWelcomeSound = 6;
  if (has_m_bwelcomesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_bwelcomesound(), output);
  }
  
  // required sint32 m_lObserveCnt = 7;
  if (has_m_lobservecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->m_lobservecnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_EntryAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lownerusn(), target);
  }
  
  // repeated .Game_Poker._UserInfo m_tblUI = 4;
  for (int i = 0; i < this->m_tblui_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_tblui(i), target);
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_tblmoney(i), target);
  }
  
  // required sint32 m_bWelcomeSound = 6;
  if (has_m_bwelcomesound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_bwelcomesound(), target);
  }
  
  // required sint32 m_lObserveCnt = 7;
  if (has_m_lobservecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->m_lobservecnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_EntryAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lOwnerUSN = 3;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required sint32 m_bWelcomeSound = 6;
    if (has_m_bwelcomesound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bwelcomesound());
    }
    
    // required sint32 m_lObserveCnt = 7;
    if (has_m_lobservecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lobservecnt());
    }
    
  }
  // repeated .Game_Poker._UserInfo m_tblUI = 4;
  total_size += 1 * this->m_tblui_size();
  for (int i = 0; i < this->m_tblui_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblui(i));
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 5;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_EntryAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_EntryAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_EntryAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_EntryAns::MergeFrom(const _MsgSC_EntryAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblui_.MergeFrom(from.m_tblui_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_bwelcomesound()) {
      set_m_bwelcomesound(from.m_bwelcomesound());
    }
    if (from.has_m_lobservecnt()) {
      set_m_lobservecnt(from.m_lobservecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_EntryAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_EntryAns::CopyFrom(const _MsgSC_EntryAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_EntryAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;
  
  for (int i = 0; i < m_tblui_size(); i++) {
    if (!this->m_tblui(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_EntryAns::Swap(_MsgSC_EntryAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    m_tblui_.Swap(&other->m_tblui_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_bwelcomesound_, other->m_bwelcomesound_);
    std::swap(m_lobservecnt_, other->m_lobservecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_EntryAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_EntryAns_descriptor_;
  metadata.reflection = _MsgSC_EntryAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_EntryReject::kMLTypeFieldNumber;
const int _MsgSC_EntryReject::kMLlCMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_EntryReject::_MsgSC_EntryReject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_EntryReject::InitAsDefaultInstance() {
}

_MsgSC_EntryReject::_MsgSC_EntryReject(const _MsgSC_EntryReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_EntryReject::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_EntryReject::~_MsgSC_EntryReject() {
  SharedDtor();
}

void _MsgSC_EntryReject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_EntryReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_EntryReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_EntryReject_descriptor_;
}

const _MsgSC_EntryReject& _MsgSC_EntryReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_EntryReject* _MsgSC_EntryReject::default_instance_ = NULL;

_MsgSC_EntryReject* _MsgSC_EntryReject::New() const {
  return new _MsgSC_EntryReject;
}

void _MsgSC_EntryReject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_EntryReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_EntryReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint64 m_llCMoney = 2;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llcmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_EntryReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  // required sint64 m_llCMoney = 2;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_llcmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_EntryReject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint64 m_llCMoney = 2;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_EntryReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_EntryReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_EntryReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_EntryReject::MergeFrom(const _MsgSC_EntryReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_EntryReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_EntryReject::CopyFrom(const _MsgSC_EntryReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_EntryReject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgSC_EntryReject::Swap(_MsgSC_EntryReject* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_EntryReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_EntryReject_descriptor_;
  metadata.reflection = _MsgSC_EntryReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_ObserveAns::kMLUSNFieldNumber;
const int _MsgSC_ObserveAns::kMNIndexFieldNumber;
const int _MsgSC_ObserveAns::kMLOwnerUSNFieldNumber;
const int _MsgSC_ObserveAns::kMUinfoFieldNumber;
const int _MsgSC_ObserveAns::kMMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_ObserveAns::_MsgSC_ObserveAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_ObserveAns::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::Game_Poker::_UserInfo*>(&::Game_Poker::_UserInfo::default_instance());
  m_money_ = const_cast< ::Game_Poker::_Money*>(&::Game_Poker::_Money::default_instance());
}

_MsgSC_ObserveAns::_MsgSC_ObserveAns(const _MsgSC_ObserveAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_ObserveAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lownerusn_ = 0;
  m_uinfo_ = NULL;
  m_money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_ObserveAns::~_MsgSC_ObserveAns() {
  SharedDtor();
}

void _MsgSC_ObserveAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
    delete m_money_;
  }
}

void _MsgSC_ObserveAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_ObserveAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_ObserveAns_descriptor_;
}

const _MsgSC_ObserveAns& _MsgSC_ObserveAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_ObserveAns* _MsgSC_ObserveAns::default_instance_ = NULL;

_MsgSC_ObserveAns* _MsgSC_ObserveAns::New() const {
  return new _MsgSC_ObserveAns;
}

void _MsgSC_ObserveAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lownerusn_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::_UserInfo::Clear();
    }
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_ObserveAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lOwnerUSN;
        break;
      }
      
      // required sint32 m_lOwnerUSN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lOwnerUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lownerusn_)));
          set_has_m_lownerusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_uinfo;
        break;
      }
      
      // required .Game_Poker._UserInfo m_uinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker._Money m_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_ObserveAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lownerusn(), output);
  }
  
  // required .Game_Poker._UserInfo m_uinfo = 4;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_uinfo(), output);
  }
  
  // required .Game_Poker._Money m_money = 5;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_ObserveAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_lOwnerUSN = 3;
  if (has_m_lownerusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lownerusn(), target);
  }
  
  // required .Game_Poker._UserInfo m_uinfo = 4;
  if (has_m_uinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_uinfo(), target);
  }
  
  // required .Game_Poker._Money m_money = 5;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_ObserveAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lOwnerUSN = 3;
    if (has_m_lownerusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lownerusn());
    }
    
    // required .Game_Poker._UserInfo m_uinfo = 4;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
    // required .Game_Poker._Money m_money = 5;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_ObserveAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_ObserveAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_ObserveAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_ObserveAns::MergeFrom(const _MsgSC_ObserveAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lownerusn()) {
      set_m_lownerusn(from.m_lownerusn());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::Game_Poker::_UserInfo::MergeFrom(from.m_uinfo());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::_Money::MergeFrom(from.m_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_ObserveAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_ObserveAns::CopyFrom(const _MsgSC_ObserveAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_ObserveAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_ObserveAns::Swap(_MsgSC_ObserveAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lownerusn_, other->m_lownerusn_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_ObserveAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_ObserveAns_descriptor_;
  metadata.reflection = _MsgSC_ObserveAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgSC_StartReq::_MsgSC_StartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_StartReq::InitAsDefaultInstance() {
}

_MsgSC_StartReq::_MsgSC_StartReq(const _MsgSC_StartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_StartReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_StartReq::~_MsgSC_StartReq() {
  SharedDtor();
}

void _MsgSC_StartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_StartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_StartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_StartReq_descriptor_;
}

const _MsgSC_StartReq& _MsgSC_StartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_StartReq* _MsgSC_StartReq::default_instance_ = NULL;

_MsgSC_StartReq* _MsgSC_StartReq::New() const {
  return new _MsgSC_StartReq;
}

void _MsgSC_StartReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_StartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgSC_StartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_StartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_StartReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_StartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_StartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_StartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_StartReq::MergeFrom(const _MsgSC_StartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_StartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_StartReq::CopyFrom(const _MsgSC_StartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_StartReq::IsInitialized() const {
  
  return true;
}

void _MsgSC_StartReq::Swap(_MsgSC_StartReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_StartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_StartReq_descriptor_;
  metadata.reflection = _MsgSC_StartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_StartAns::kMLStateFieldNumber;
const int _MsgSC_StartAns::kMVtStateFieldNumber;
const int _MsgSC_StartAns::kMLlSystemTimeFieldNumber;
#endif  // !_MSC_VER

_MsgSC_StartAns::_MsgSC_StartAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_StartAns::InitAsDefaultInstance() {
}

_MsgSC_StartAns::_MsgSC_StartAns(const _MsgSC_StartAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_StartAns::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_llsystemtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_StartAns::~_MsgSC_StartAns() {
  SharedDtor();
}

void _MsgSC_StartAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_StartAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_StartAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_StartAns_descriptor_;
}

const _MsgSC_StartAns& _MsgSC_StartAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_StartAns* _MsgSC_StartAns::default_instance_ = NULL;

_MsgSC_StartAns* _MsgSC_StartAns::New() const {
  return new _MsgSC_StartAns;
}

void _MsgSC_StartAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_llsystemtime_ = GOOGLE_LONGLONG(0);
  }
  m_vtstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_StartAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_vtState;
        break;
      }
      
      // repeated sint32 m_vtState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16, input, this->mutable_m_vtstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_m_vtstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_vtState;
        if (input->ExpectTag(24)) goto parse_m_llSystemTime;
        break;
      }
      
      // required sint64 m_llSystemTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSystemTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsystemtime_)));
          set_has_m_llsystemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_StartAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // repeated sint32 m_vtState = 2;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->m_vtstate(i), output);
  }
  
  // required sint64 m_llSystemTime = 3;
  if (has_m_llsystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llsystemtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_StartAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lstate(), target);
  }
  
  // repeated sint32 m_vtState = 2;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(2, this->m_vtstate(i), target);
  }
  
  // required sint64 m_llSystemTime = 3;
  if (has_m_llsystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llsystemtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_StartAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint64 m_llSystemTime = 3;
    if (has_m_llsystemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsystemtime());
    }
    
  }
  // repeated sint32 m_vtState = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->m_vtstate(i));
    }
    total_size += 1 * this->m_vtstate_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_StartAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_StartAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_StartAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_StartAns::MergeFrom(const _MsgSC_StartAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtstate_.MergeFrom(from.m_vtstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_llsystemtime()) {
      set_m_llsystemtime(from.m_llsystemtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_StartAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_StartAns::CopyFrom(const _MsgSC_StartAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_StartAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void _MsgSC_StartAns::Swap(_MsgSC_StartAns* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    m_vtstate_.Swap(&other->m_vtstate_);
    std::swap(m_llsystemtime_, other->m_llsystemtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_StartAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_StartAns_descriptor_;
  metadata.reflection = _MsgSC_StartAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgSC_NoStart::_MsgSC_NoStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_NoStart::InitAsDefaultInstance() {
}

_MsgSC_NoStart::_MsgSC_NoStart(const _MsgSC_NoStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_NoStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_NoStart::~_MsgSC_NoStart() {
  SharedDtor();
}

void _MsgSC_NoStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_NoStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_NoStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_NoStart_descriptor_;
}

const _MsgSC_NoStart& _MsgSC_NoStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_NoStart* _MsgSC_NoStart::default_instance_ = NULL;

_MsgSC_NoStart* _MsgSC_NoStart::New() const {
  return new _MsgSC_NoStart;
}

void _MsgSC_NoStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_NoStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgSC_NoStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_NoStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_NoStart::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_NoStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_NoStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_NoStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_NoStart::MergeFrom(const _MsgSC_NoStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_NoStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_NoStart::CopyFrom(const _MsgSC_NoStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_NoStart::IsInitialized() const {
  
  return true;
}

void _MsgSC_NoStart::Swap(_MsgSC_NoStart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_NoStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_NoStart_descriptor_;
  metadata.reflection = _MsgSC_NoStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_DealCards::kMLBossUSNFieldNumber;
const int _MsgSC_DealCards::kMLStateFieldNumber;
const int _MsgSC_DealCards::kMNTypeFieldNumber;
const int _MsgSC_DealCards::kMTblCardFieldNumber;
const int _MsgSC_DealCards::kMTblMoneyFieldNumber;
const int _MsgSC_DealCards::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_DealCards::_MsgSC_DealCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_DealCards::InitAsDefaultInstance() {
}

_MsgSC_DealCards::_MsgSC_DealCards(const _MsgSC_DealCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_DealCards::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_lstate_ = 0;
  m_ntype_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_DealCards::~_MsgSC_DealCards() {
  SharedDtor();
}

void _MsgSC_DealCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_DealCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_DealCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_DealCards_descriptor_;
}

const _MsgSC_DealCards& _MsgSC_DealCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_DealCards* _MsgSC_DealCards::default_instance_ = NULL;

_MsgSC_DealCards* _MsgSC_DealCards::New() const {
  return new _MsgSC_DealCards;
}

void _MsgSC_DealCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_lstate_ = 0;
    m_ntype_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_DealCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lState;
        break;
      }
      
      // required sint32 m_lState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nType;
        break;
      }
      
      // required int32 m_nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .Game_Poker._Cards m_tblCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tblCard;
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .Game_Poker._Money m_tblMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_tblMoney;
        if (input->ExpectTag(48)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_DealCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lstate(), output);
  }
  
  // required int32 m_nType = 3;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ntype(), output);
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 4;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_tblcard(i), output);
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 6;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_llpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_DealCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbossusn(), target);
  }
  
  // required sint32 m_lState = 2;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lstate(), target);
  }
  
  // required int32 m_nType = 3;
  if (has_m_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_ntype(), target);
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 4;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_tblcard(i), target);
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 5;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_tblmoney(i), target);
  }
  
  // required sint64 m_llPoolMoney = 6;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->m_llpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_DealCards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint32 m_lState = 2;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required int32 m_nType = 3;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint64 m_llPoolMoney = 6;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .Game_Poker._Cards m_tblCard = 4;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 5;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_DealCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_DealCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_DealCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_DealCards::MergeFrom(const _MsgSC_DealCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_DealCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_DealCards::CopyFrom(const _MsgSC_DealCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_DealCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_DealCards::Swap(_MsgSC_DealCards* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_ntype_, other->m_ntype_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_DealCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_DealCards_descriptor_;
  metadata.reflection = _MsgSC_DealCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_SelectedCardAns::kMLUSNFieldNumber;
const int _MsgSC_SelectedCardAns::kMNSelectFieldNumber;
const int _MsgSC_SelectedCardAns::kMLCardIndexFieldNumber;
const int _MsgSC_SelectedCardAns::kMLChoiceTypeFieldNumber;
#endif  // !_MSC_VER

_MsgSC_SelectedCardAns::_MsgSC_SelectedCardAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_SelectedCardAns::InitAsDefaultInstance() {
}

_MsgSC_SelectedCardAns::_MsgSC_SelectedCardAns(const _MsgSC_SelectedCardAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_SelectedCardAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nselect_ = 0;
  m_lcardindex_ = 0;
  m_lchoicetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_SelectedCardAns::~_MsgSC_SelectedCardAns() {
  SharedDtor();
}

void _MsgSC_SelectedCardAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_SelectedCardAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_SelectedCardAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_SelectedCardAns_descriptor_;
}

const _MsgSC_SelectedCardAns& _MsgSC_SelectedCardAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_SelectedCardAns* _MsgSC_SelectedCardAns::default_instance_ = NULL;

_MsgSC_SelectedCardAns* _MsgSC_SelectedCardAns::New() const {
  return new _MsgSC_SelectedCardAns;
}

void _MsgSC_SelectedCardAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nselect_ = 0;
    m_lcardindex_ = 0;
    m_lchoicetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_SelectedCardAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nSelect;
        break;
      }
      
      // required int32 m_nSelect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSelect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nselect_)));
          set_has_m_nselect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lCardIndex;
        break;
      }
      
      // required sint32 m_lCardIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardindex_)));
          set_has_m_lcardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lChoiceType;
        break;
      }
      
      // required sint32 m_lChoiceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lChoiceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lchoicetype_)));
          set_has_m_lchoicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_SelectedCardAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nSelect = 2;
  if (has_m_nselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nselect(), output);
  }
  
  // required sint32 m_lCardIndex = 3;
  if (has_m_lcardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcardindex(), output);
  }
  
  // required sint32 m_lChoiceType = 4;
  if (has_m_lchoicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lchoicetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_SelectedCardAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nSelect = 2;
  if (has_m_nselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nselect(), target);
  }
  
  // required sint32 m_lCardIndex = 3;
  if (has_m_lcardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lcardindex(), target);
  }
  
  // required sint32 m_lChoiceType = 4;
  if (has_m_lchoicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lchoicetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_SelectedCardAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nSelect = 2;
    if (has_m_nselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nselect());
    }
    
    // required sint32 m_lCardIndex = 3;
    if (has_m_lcardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardindex());
    }
    
    // required sint32 m_lChoiceType = 4;
    if (has_m_lchoicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lchoicetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_SelectedCardAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_SelectedCardAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_SelectedCardAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_SelectedCardAns::MergeFrom(const _MsgSC_SelectedCardAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nselect()) {
      set_m_nselect(from.m_nselect());
    }
    if (from.has_m_lcardindex()) {
      set_m_lcardindex(from.m_lcardindex());
    }
    if (from.has_m_lchoicetype()) {
      set_m_lchoicetype(from.m_lchoicetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_SelectedCardAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_SelectedCardAns::CopyFrom(const _MsgSC_SelectedCardAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_SelectedCardAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void _MsgSC_SelectedCardAns::Swap(_MsgSC_SelectedCardAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nselect_, other->m_nselect_);
    std::swap(m_lcardindex_, other->m_lcardindex_);
    std::swap(m_lchoicetype_, other->m_lchoicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_SelectedCardAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_SelectedCardAns_descriptor_;
  metadata.reflection = _MsgSC_SelectedCardAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_DealOpenCard::kMLStateFieldNumber;
const int _MsgSC_DealOpenCard::kMTblCardFieldNumber;
const int _MsgSC_DealOpenCard::kMVtStateFieldNumber;
#endif  // !_MSC_VER

_MsgSC_DealOpenCard::_MsgSC_DealOpenCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_DealOpenCard::InitAsDefaultInstance() {
}

_MsgSC_DealOpenCard::_MsgSC_DealOpenCard(const _MsgSC_DealOpenCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_DealOpenCard::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_DealOpenCard::~_MsgSC_DealOpenCard() {
  SharedDtor();
}

void _MsgSC_DealOpenCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_DealOpenCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_DealOpenCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_DealOpenCard_descriptor_;
}

const _MsgSC_DealOpenCard& _MsgSC_DealOpenCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_DealOpenCard* _MsgSC_DealOpenCard::default_instance_ = NULL;

_MsgSC_DealOpenCard* _MsgSC_DealOpenCard::New() const {
  return new _MsgSC_DealOpenCard;
}

void _MsgSC_DealOpenCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
  }
  m_tblcard_.Clear();
  m_vtstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_DealOpenCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .Game_Poker._Cards m_tblCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tblCard;
        if (input->ExpectTag(24)) goto parse_m_vtState;
        break;
      }
      
      // repeated sint32 m_vtState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24, input, this->mutable_m_vtstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_m_vtstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_vtState;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_DealOpenCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 2;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_tblcard(i), output);
  }
  
  // repeated sint32 m_vtState = 3;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->m_vtstate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_DealOpenCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lstate(), target);
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 2;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_tblcard(i), target);
  }
  
  // repeated sint32 m_vtState = 3;
  for (int i = 0; i < this->m_vtstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(3, this->m_vtstate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_DealOpenCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
  }
  // repeated .Game_Poker._Cards m_tblCard = 2;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated sint32 m_vtState = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->m_vtstate(i));
    }
    total_size += 1 * this->m_vtstate_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_DealOpenCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_DealOpenCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_DealOpenCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_DealOpenCard::MergeFrom(const _MsgSC_DealOpenCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_vtstate_.MergeFrom(from.m_vtstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_DealOpenCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_DealOpenCard::CopyFrom(const _MsgSC_DealOpenCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_DealOpenCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_DealOpenCard::Swap(_MsgSC_DealOpenCard* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_vtstate_.Swap(&other->m_vtstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_DealOpenCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_DealOpenCard_descriptor_;
  metadata.reflection = _MsgSC_DealOpenCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_DealCard::kMLBossUSNFieldNumber;
const int _MsgSC_DealCard::kMNTypeFieldNumber;
const int _MsgSC_DealCard::kMLCardsDealtFieldNumber;
const int _MsgSC_DealCard::kMVtOneCardFieldNumber;
#endif  // !_MSC_VER

_MsgSC_DealCard::_MsgSC_DealCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_DealCard::InitAsDefaultInstance() {
}

_MsgSC_DealCard::_MsgSC_DealCard(const _MsgSC_DealCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_DealCard::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_ntype_ = 0;
  m_lcardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_DealCard::~_MsgSC_DealCard() {
  SharedDtor();
}

void _MsgSC_DealCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_DealCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_DealCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_DealCard_descriptor_;
}

const _MsgSC_DealCard& _MsgSC_DealCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_DealCard* _MsgSC_DealCard::default_instance_ = NULL;

_MsgSC_DealCard* _MsgSC_DealCard::New() const {
  return new _MsgSC_DealCard;
}

void _MsgSC_DealCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_ntype_ = 0;
    m_lcardsdealt_ = 0;
  }
  m_vtonecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_DealCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nType;
        break;
      }
      
      // required int32 m_nType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntype_)));
          set_has_m_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtOneCard;
        break;
      }
      
      // repeated .Game_Poker._OneCard m_vtOneCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtOneCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtonecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtOneCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_DealCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required int32 m_nType = 2;
  if (has_m_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ntype(), output);
  }
  
  // required sint32 m_lCardsDealt = 3;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lcardsdealt(), output);
  }
  
  // repeated .Game_Poker._OneCard m_vtOneCard = 4;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_vtonecard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_DealCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbossusn(), target);
  }
  
  // required int32 m_nType = 2;
  if (has_m_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ntype(), target);
  }
  
  // required sint32 m_lCardsDealt = 3;
  if (has_m_lcardsdealt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lcardsdealt(), target);
  }
  
  // repeated .Game_Poker._OneCard m_vtOneCard = 4;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_vtonecard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_DealCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nType = 2;
    if (has_m_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntype());
    }
    
    // required sint32 m_lCardsDealt = 3;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
  }
  // repeated .Game_Poker._OneCard m_vtOneCard = 4;
  total_size += 1 * this->m_vtonecard_size();
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtonecard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_DealCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_DealCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_DealCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_DealCard::MergeFrom(const _MsgSC_DealCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtonecard_.MergeFrom(from.m_vtonecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_ntype()) {
      set_m_ntype(from.m_ntype());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_DealCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_DealCard::CopyFrom(const _MsgSC_DealCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_DealCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < m_vtonecard_size(); i++) {
    if (!this->m_vtonecard(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_DealCard::Swap(_MsgSC_DealCard* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_ntype_, other->m_ntype_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_vtonecard_.Swap(&other->m_vtonecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_DealCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_DealCard_descriptor_;
  metadata.reflection = _MsgSC_DealCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_Boss::kMLBossUSNFieldNumber;
const int _MsgSC_Boss::kMNBossRankFieldNumber;
#endif  // !_MSC_VER

_MsgSC_Boss::_MsgSC_Boss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_Boss::InitAsDefaultInstance() {
}

_MsgSC_Boss::_MsgSC_Boss(const _MsgSC_Boss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_Boss::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_nbossrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_Boss::~_MsgSC_Boss() {
  SharedDtor();
}

void _MsgSC_Boss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_Boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_Boss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_Boss_descriptor_;
}

const _MsgSC_Boss& _MsgSC_Boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_Boss* _MsgSC_Boss::default_instance_ = NULL;

_MsgSC_Boss* _MsgSC_Boss::New() const {
  return new _MsgSC_Boss;
}

void _MsgSC_Boss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_nbossrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_Boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nBossRank;
        break;
      }
      
      // required int32 m_nBossRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nBossRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nbossrank_)));
          set_has_m_nbossrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_Boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required int32 m_nBossRank = 2;
  if (has_m_nbossrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nbossrank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_Boss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbossusn(), target);
  }
  
  // required int32 m_nBossRank = 2;
  if (has_m_nbossrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nbossrank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_Boss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required int32 m_nBossRank = 2;
    if (has_m_nbossrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nbossrank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_Boss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_Boss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_Boss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_Boss::MergeFrom(const _MsgSC_Boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_nbossrank()) {
      set_m_nbossrank(from.m_nbossrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_Boss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_Boss::CopyFrom(const _MsgSC_Boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_Boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgSC_Boss::Swap(_MsgSC_Boss* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_nbossrank_, other->m_nbossrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_Boss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_Boss_descriptor_;
  metadata.reflection = _MsgSC_Boss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_Betting::kMLBetUSNFieldNumber;
const int _MsgSC_Betting::kMLBetBtnTypeFieldNumber;
#endif  // !_MSC_VER

_MsgSC_Betting::_MsgSC_Betting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_Betting::InitAsDefaultInstance() {
}

_MsgSC_Betting::_MsgSC_Betting(const _MsgSC_Betting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_Betting::SharedCtor() {
  _cached_size_ = 0;
  m_lbetusn_ = 0;
  m_lbetbtntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_Betting::~_MsgSC_Betting() {
  SharedDtor();
}

void _MsgSC_Betting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_Betting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_Betting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_Betting_descriptor_;
}

const _MsgSC_Betting& _MsgSC_Betting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_Betting* _MsgSC_Betting::default_instance_ = NULL;

_MsgSC_Betting* _MsgSC_Betting::New() const {
  return new _MsgSC_Betting;
}

void _MsgSC_Betting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbetusn_ = 0;
    m_lbetbtntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_Betting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBetUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetusn_)));
          set_has_m_lbetusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lBetBtnType;
        break;
      }
      
      // required sint32 m_lBetBtnType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetBtnType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetbtntype_)));
          set_has_m_lbetbtntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_Betting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBetUSN = 1;
  if (has_m_lbetusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbetusn(), output);
  }
  
  // required sint32 m_lBetBtnType = 2;
  if (has_m_lbetbtntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lbetbtntype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_Betting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBetUSN = 1;
  if (has_m_lbetusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbetusn(), target);
  }
  
  // required sint32 m_lBetBtnType = 2;
  if (has_m_lbetbtntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lbetbtntype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_Betting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBetUSN = 1;
    if (has_m_lbetusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetusn());
    }
    
    // required sint32 m_lBetBtnType = 2;
    if (has_m_lbetbtntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetbtntype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_Betting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_Betting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_Betting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_Betting::MergeFrom(const _MsgSC_Betting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbetusn()) {
      set_m_lbetusn(from.m_lbetusn());
    }
    if (from.has_m_lbetbtntype()) {
      set_m_lbetbtntype(from.m_lbetbtntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_Betting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_Betting::CopyFrom(const _MsgSC_Betting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_Betting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgSC_Betting::Swap(_MsgSC_Betting* other) {
  if (other != this) {
    std::swap(m_lbetusn_, other->m_lbetusn_);
    std::swap(m_lbetbtntype_, other->m_lbetbtntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_Betting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_Betting_descriptor_;
  metadata.reflection = _MsgSC_Betting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_BettingAns::kMNIndexFieldNumber;
const int _MsgSC_BettingAns::kMLBetTypeFieldNumber;
const int _MsgSC_BettingAns::kMMoneyFieldNumber;
const int _MsgSC_BettingAns::kMVtCallMoneyFieldNumber;
const int _MsgSC_BettingAns::kMLPoolMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_BettingAns::_MsgSC_BettingAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_BettingAns::InitAsDefaultInstance() {
  m_money_ = const_cast< ::Game_Poker::_Money*>(&::Game_Poker::_Money::default_instance());
}

_MsgSC_BettingAns::_MsgSC_BettingAns(const _MsgSC_BettingAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_BettingAns::SharedCtor() {
  _cached_size_ = 0;
  m_nindex_ = 0;
  m_lbettype_ = 0;
  m_money_ = NULL;
  m_lpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_BettingAns::~_MsgSC_BettingAns() {
  SharedDtor();
}

void _MsgSC_BettingAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void _MsgSC_BettingAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_BettingAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_BettingAns_descriptor_;
}

const _MsgSC_BettingAns& _MsgSC_BettingAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_BettingAns* _MsgSC_BettingAns::default_instance_ = NULL;

_MsgSC_BettingAns* _MsgSC_BettingAns::New() const {
  return new _MsgSC_BettingAns;
}

void _MsgSC_BettingAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nindex_ = 0;
    m_lbettype_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
    }
    m_lpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_vtcallmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_BettingAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lBetType;
        break;
      }
      
      // required sint32 m_lBetType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker._Money m_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtCallMoney;
        break;
      }
      
      // repeated .Game_Poker._VecMoney m_vtCallMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtCallMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtcallmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_vtCallMoney;
        if (input->ExpectTag(40)) goto parse_m_lPoolMoney;
        break;
      }
      
      // required sint64 m_lPoolMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lpoolmoney_)));
          set_has_m_lpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_BettingAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nindex(), output);
  }
  
  // required sint32 m_lBetType = 2;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lbettype(), output);
  }
  
  // required .Game_Poker._Money m_money = 3;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_money(), output);
  }
  
  // repeated .Game_Poker._VecMoney m_vtCallMoney = 4;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_vtcallmoney(i), output);
  }
  
  // required sint64 m_lPoolMoney = 5;
  if (has_m_lpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_lpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_BettingAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nIndex = 1;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nindex(), target);
  }
  
  // required sint32 m_lBetType = 2;
  if (has_m_lbettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lbettype(), target);
  }
  
  // required .Game_Poker._Money m_money = 3;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_money(), target);
  }
  
  // repeated .Game_Poker._VecMoney m_vtCallMoney = 4;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_vtcallmoney(i), target);
  }
  
  // required sint64 m_lPoolMoney = 5;
  if (has_m_lpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_lpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_BettingAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nIndex = 1;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lBetType = 2;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
    // required .Game_Poker._Money m_money = 3;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint64 m_lPoolMoney = 5;
    if (has_m_lpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lpoolmoney());
    }
    
  }
  // repeated .Game_Poker._VecMoney m_vtCallMoney = 4;
  total_size += 1 * this->m_vtcallmoney_size();
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtcallmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_BettingAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_BettingAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_BettingAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_BettingAns::MergeFrom(const _MsgSC_BettingAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcallmoney_.MergeFrom(from.m_vtcallmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::_Money::MergeFrom(from.m_money());
    }
    if (from.has_m_lpoolmoney()) {
      set_m_lpoolmoney(from.m_lpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_BettingAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_BettingAns::CopyFrom(const _MsgSC_BettingAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_BettingAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtcallmoney_size(); i++) {
    if (!this->m_vtcallmoney(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_BettingAns::Swap(_MsgSC_BettingAns* other) {
  if (other != this) {
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_money_, other->m_money_);
    m_vtcallmoney_.Swap(&other->m_vtcallmoney_);
    std::swap(m_lpoolmoney_, other->m_lpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_BettingAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_BettingAns_descriptor_;
  metadata.reflection = _MsgSC_BettingAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_BettingAnsMsg::kMLUSNFieldNumber;
const int _MsgSC_BettingAnsMsg::kMNIndexFieldNumber;
const int _MsgSC_BettingAnsMsg::kMBetTypeFieldNumber;
const int _MsgSC_BettingAnsMsg::kMBBettingMoneyFieldNumber;
const int _MsgSC_BettingAnsMsg::kMBMoneyLackFieldNumber;
const int _MsgSC_BettingAnsMsg::kMBCallMoneyZeroFieldNumber;
const int _MsgSC_BettingAnsMsg::kMLlCallMoneyFieldNumber;
const int _MsgSC_BettingAnsMsg::kMLlRaiseMoneyFieldNumber;
const int _MsgSC_BettingAnsMsg::kMLlSideMoneyFieldNumber;
const int _MsgSC_BettingAnsMsg::kMLBetTypeFieldNumber;
const int _MsgSC_BettingAnsMsg::kMLBetTurnFieldNumber;
const int _MsgSC_BettingAnsMsg::kMMoneyFieldNumber;
const int _MsgSC_BettingAnsMsg::kMVtCallMoneyFieldNumber;
const int _MsgSC_BettingAnsMsg::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_BettingAnsMsg::_MsgSC_BettingAnsMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_BettingAnsMsg::InitAsDefaultInstance() {
  m_money_ = const_cast< ::Game_Poker::_Money*>(&::Game_Poker::_Money::default_instance());
}

_MsgSC_BettingAnsMsg::_MsgSC_BettingAnsMsg(const _MsgSC_BettingAnsMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_BettingAnsMsg::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_bettype_ = 0;
  m_bbettingmoney_ = 0;
  m_bmoneylack_ = 0;
  m_bcallmoneyzero_ = 0;
  m_llcallmoney_ = GOOGLE_LONGLONG(0);
  m_llraisemoney_ = GOOGLE_LONGLONG(0);
  m_llsidemoney_ = GOOGLE_LONGLONG(0);
  m_lbettype_ = 0;
  m_lbetturn_ = 0;
  m_money_ = NULL;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_BettingAnsMsg::~_MsgSC_BettingAnsMsg() {
  SharedDtor();
}

void _MsgSC_BettingAnsMsg::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void _MsgSC_BettingAnsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_BettingAnsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_BettingAnsMsg_descriptor_;
}

const _MsgSC_BettingAnsMsg& _MsgSC_BettingAnsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_BettingAnsMsg* _MsgSC_BettingAnsMsg::default_instance_ = NULL;

_MsgSC_BettingAnsMsg* _MsgSC_BettingAnsMsg::New() const {
  return new _MsgSC_BettingAnsMsg;
}

void _MsgSC_BettingAnsMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_bettype_ = 0;
    m_bbettingmoney_ = 0;
    m_bmoneylack_ = 0;
    m_bcallmoneyzero_ = 0;
    m_llcallmoney_ = GOOGLE_LONGLONG(0);
    m_llraisemoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_llsidemoney_ = GOOGLE_LONGLONG(0);
    m_lbettype_ = 0;
    m_lbetturn_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
    }
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  m_vtcallmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_BettingAnsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_BetType;
        break;
      }
      
      // required sint32 m_BetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bettype_)));
          set_has_m_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bBettingMoney;
        break;
      }
      
      // required sint32 m_bBettingMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bBettingMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bbettingmoney_)));
          set_has_m_bbettingmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bMoneyLack;
        break;
      }
      
      // required sint32 m_bMoneyLack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bMoneyLack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bmoneylack_)));
          set_has_m_bmoneylack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bCallMoneyZero;
        break;
      }
      
      // required sint32 m_bCallMoneyZero = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bCallMoneyZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bcallmoneyzero_)));
          set_has_m_bcallmoneyzero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_llCallMoney;
        break;
      }
      
      // required sint64 m_llCallMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCallMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcallmoney_)));
          set_has_m_llcallmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_llRaiseMoney;
        break;
      }
      
      // required sint64 m_llRaiseMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRaiseMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llraisemoney_)));
          set_has_m_llraisemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_llSideMoney;
        break;
      }
      
      // required sint64 m_llSideMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSideMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llsidemoney_)));
          set_has_m_llsidemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_lBetType;
        break;
      }
      
      // required sint32 m_lBetType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbettype_)));
          set_has_m_lbettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_lBetTurn;
        break;
      }
      
      // required sint32 m_lBetTurn = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBetTurn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbetturn_)));
          set_has_m_lbetturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker._Money m_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_vtCallMoney;
        break;
      }
      
      // repeated .Game_Poker._VecMoney m_vtCallMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtCallMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtcallmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_vtCallMoney;
        if (input->ExpectTag(112)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_BettingAnsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_BetType = 3;
  if (has_m_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_bettype(), output);
  }
  
  // required sint32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_bbettingmoney(), output);
  }
  
  // required sint32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->m_bmoneylack(), output);
  }
  
  // required sint32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->m_bcallmoneyzero(), output);
  }
  
  // required sint64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->m_llcallmoney(), output);
  }
  
  // required sint64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->m_llraisemoney(), output);
  }
  
  // required sint64 m_llSideMoney = 9;
  if (has_m_llsidemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->m_llsidemoney(), output);
  }
  
  // required sint32 m_lBetType = 10;
  if (has_m_lbettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->m_lbettype(), output);
  }
  
  // required sint32 m_lBetTurn = 11;
  if (has_m_lbetturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->m_lbetturn(), output);
  }
  
  // required .Game_Poker._Money m_money = 12;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_money(), output);
  }
  
  // repeated .Game_Poker._VecMoney m_vtCallMoney = 13;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_vtcallmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 14;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(14, this->m_llpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_BettingAnsMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_BetType = 3;
  if (has_m_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_bettype(), target);
  }
  
  // required sint32 m_bBettingMoney = 4;
  if (has_m_bbettingmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_bbettingmoney(), target);
  }
  
  // required sint32 m_bMoneyLack = 5;
  if (has_m_bmoneylack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->m_bmoneylack(), target);
  }
  
  // required sint32 m_bCallMoneyZero = 6;
  if (has_m_bcallmoneyzero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->m_bcallmoneyzero(), target);
  }
  
  // required sint64 m_llCallMoney = 7;
  if (has_m_llcallmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->m_llcallmoney(), target);
  }
  
  // required sint64 m_llRaiseMoney = 8;
  if (has_m_llraisemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->m_llraisemoney(), target);
  }
  
  // required sint64 m_llSideMoney = 9;
  if (has_m_llsidemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(9, this->m_llsidemoney(), target);
  }
  
  // required sint32 m_lBetType = 10;
  if (has_m_lbettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->m_lbettype(), target);
  }
  
  // required sint32 m_lBetTurn = 11;
  if (has_m_lbetturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->m_lbetturn(), target);
  }
  
  // required .Game_Poker._Money m_money = 12;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_money(), target);
  }
  
  // repeated .Game_Poker._VecMoney m_vtCallMoney = 13;
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_vtcallmoney(i), target);
  }
  
  // required sint64 m_llPoolMoney = 14;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(14, this->m_llpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_BettingAnsMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_BetType = 3;
    if (has_m_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bettype());
    }
    
    // required sint32 m_bBettingMoney = 4;
    if (has_m_bbettingmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bbettingmoney());
    }
    
    // required sint32 m_bMoneyLack = 5;
    if (has_m_bmoneylack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bmoneylack());
    }
    
    // required sint32 m_bCallMoneyZero = 6;
    if (has_m_bcallmoneyzero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bcallmoneyzero());
    }
    
    // required sint64 m_llCallMoney = 7;
    if (has_m_llcallmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcallmoney());
    }
    
    // required sint64 m_llRaiseMoney = 8;
    if (has_m_llraisemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llraisemoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint64 m_llSideMoney = 9;
    if (has_m_llsidemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llsidemoney());
    }
    
    // required sint32 m_lBetType = 10;
    if (has_m_lbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbettype());
    }
    
    // required sint32 m_lBetTurn = 11;
    if (has_m_lbetturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbetturn());
    }
    
    // required .Game_Poker._Money m_money = 12;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint64 m_llPoolMoney = 14;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  // repeated .Game_Poker._VecMoney m_vtCallMoney = 13;
  total_size += 1 * this->m_vtcallmoney_size();
  for (int i = 0; i < this->m_vtcallmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtcallmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_BettingAnsMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_BettingAnsMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_BettingAnsMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_BettingAnsMsg::MergeFrom(const _MsgSC_BettingAnsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtcallmoney_.MergeFrom(from.m_vtcallmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_bettype()) {
      set_m_bettype(from.m_bettype());
    }
    if (from.has_m_bbettingmoney()) {
      set_m_bbettingmoney(from.m_bbettingmoney());
    }
    if (from.has_m_bmoneylack()) {
      set_m_bmoneylack(from.m_bmoneylack());
    }
    if (from.has_m_bcallmoneyzero()) {
      set_m_bcallmoneyzero(from.m_bcallmoneyzero());
    }
    if (from.has_m_llcallmoney()) {
      set_m_llcallmoney(from.m_llcallmoney());
    }
    if (from.has_m_llraisemoney()) {
      set_m_llraisemoney(from.m_llraisemoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_llsidemoney()) {
      set_m_llsidemoney(from.m_llsidemoney());
    }
    if (from.has_m_lbettype()) {
      set_m_lbettype(from.m_lbettype());
    }
    if (from.has_m_lbetturn()) {
      set_m_lbetturn(from.m_lbetturn());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::_Money::MergeFrom(from.m_money());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_BettingAnsMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_BettingAnsMsg::CopyFrom(const _MsgSC_BettingAnsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_BettingAnsMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002fff) != 0x00002fff) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtcallmoney_size(); i++) {
    if (!this->m_vtcallmoney(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_BettingAnsMsg::Swap(_MsgSC_BettingAnsMsg* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_bettype_, other->m_bettype_);
    std::swap(m_bbettingmoney_, other->m_bbettingmoney_);
    std::swap(m_bmoneylack_, other->m_bmoneylack_);
    std::swap(m_bcallmoneyzero_, other->m_bcallmoneyzero_);
    std::swap(m_llcallmoney_, other->m_llcallmoney_);
    std::swap(m_llraisemoney_, other->m_llraisemoney_);
    std::swap(m_llsidemoney_, other->m_llsidemoney_);
    std::swap(m_lbettype_, other->m_lbettype_);
    std::swap(m_lbetturn_, other->m_lbetturn_);
    std::swap(m_money_, other->m_money_);
    m_vtcallmoney_.Swap(&other->m_vtcallmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_BettingAnsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_BettingAnsMsg_descriptor_;
  metadata.reflection = _MsgSC_BettingAnsMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_DealHiddenCard::kMLBossUSNFieldNumber;
const int _MsgSC_DealHiddenCard::kMLCardsDealtFieldNumber;
const int _MsgSC_DealHiddenCard::kMVtOneCardFieldNumber;
#endif  // !_MSC_VER

_MsgSC_DealHiddenCard::_MsgSC_DealHiddenCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_DealHiddenCard::InitAsDefaultInstance() {
}

_MsgSC_DealHiddenCard::_MsgSC_DealHiddenCard(const _MsgSC_DealHiddenCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_DealHiddenCard::SharedCtor() {
  _cached_size_ = 0;
  m_lbossusn_ = 0;
  m_lcardsdealt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_DealHiddenCard::~_MsgSC_DealHiddenCard() {
  SharedDtor();
}

void _MsgSC_DealHiddenCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_DealHiddenCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_DealHiddenCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_DealHiddenCard_descriptor_;
}

const _MsgSC_DealHiddenCard& _MsgSC_DealHiddenCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_DealHiddenCard* _MsgSC_DealHiddenCard::default_instance_ = NULL;

_MsgSC_DealHiddenCard* _MsgSC_DealHiddenCard::New() const {
  return new _MsgSC_DealHiddenCard;
}

void _MsgSC_DealHiddenCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lbossusn_ = 0;
    m_lcardsdealt_ = 0;
  }
  m_vtonecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_DealHiddenCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lBossUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lCardsDealt;
        break;
      }
      
      // required sint32 m_lCardsDealt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lCardsDealt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lcardsdealt_)));
          set_has_m_lcardsdealt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vtOneCard;
        break;
      }
      
      // repeated .Game_Poker._OneCard m_vtOneCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtOneCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtonecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_vtOneCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_DealHiddenCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lbossusn(), output);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lcardsdealt(), output);
  }
  
  // repeated .Game_Poker._OneCard m_vtOneCard = 3;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_vtonecard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_DealHiddenCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lBossUSN = 1;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lbossusn(), target);
  }
  
  // required sint32 m_lCardsDealt = 2;
  if (has_m_lcardsdealt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lcardsdealt(), target);
  }
  
  // repeated .Game_Poker._OneCard m_vtOneCard = 3;
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_vtonecard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_DealHiddenCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lBossUSN = 1;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint32 m_lCardsDealt = 2;
    if (has_m_lcardsdealt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lcardsdealt());
    }
    
  }
  // repeated .Game_Poker._OneCard m_vtOneCard = 3;
  total_size += 1 * this->m_vtonecard_size();
  for (int i = 0; i < this->m_vtonecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtonecard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_DealHiddenCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_DealHiddenCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_DealHiddenCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_DealHiddenCard::MergeFrom(const _MsgSC_DealHiddenCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtonecard_.MergeFrom(from.m_vtonecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_lcardsdealt()) {
      set_m_lcardsdealt(from.m_lcardsdealt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_DealHiddenCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_DealHiddenCard::CopyFrom(const _MsgSC_DealHiddenCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_DealHiddenCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < m_vtonecard_size(); i++) {
    if (!this->m_vtonecard(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_DealHiddenCard::Swap(_MsgSC_DealHiddenCard* other) {
  if (other != this) {
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_lcardsdealt_, other->m_lcardsdealt_);
    m_vtonecard_.Swap(&other->m_vtonecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_DealHiddenCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_DealHiddenCard_descriptor_;
  metadata.reflection = _MsgSC_DealHiddenCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_AnteMoney::kMLlAnteMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_AnteMoney::_MsgSC_AnteMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_AnteMoney::InitAsDefaultInstance() {
}

_MsgSC_AnteMoney::_MsgSC_AnteMoney(const _MsgSC_AnteMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_AnteMoney::SharedCtor() {
  _cached_size_ = 0;
  m_llantemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_AnteMoney::~_MsgSC_AnteMoney() {
  SharedDtor();
}

void _MsgSC_AnteMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_AnteMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_AnteMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_AnteMoney_descriptor_;
}

const _MsgSC_AnteMoney& _MsgSC_AnteMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_AnteMoney* _MsgSC_AnteMoney::default_instance_ = NULL;

_MsgSC_AnteMoney* _MsgSC_AnteMoney::New() const {
  return new _MsgSC_AnteMoney;
}

void _MsgSC_AnteMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llantemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_AnteMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llAnteMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llantemoney_)));
          set_has_m_llantemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_AnteMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llAnteMoney = 1;
  if (has_m_llantemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llantemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_AnteMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llAnteMoney = 1;
  if (has_m_llantemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llantemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_AnteMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llAnteMoney = 1;
    if (has_m_llantemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llantemoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_AnteMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_AnteMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_AnteMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_AnteMoney::MergeFrom(const _MsgSC_AnteMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llantemoney()) {
      set_m_llantemoney(from.m_llantemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_AnteMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_AnteMoney::CopyFrom(const _MsgSC_AnteMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_AnteMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_AnteMoney::Swap(_MsgSC_AnteMoney* other) {
  if (other != this) {
    std::swap(m_llantemoney_, other->m_llantemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_AnteMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_AnteMoney_descriptor_;
  metadata.reflection = _MsgSC_AnteMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_RuleQuaterHalf::kMLlRuleQuaterHalfFieldNumber;
const int _MsgSC_RuleQuaterHalf::kMLlPoolMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_RuleQuaterHalf::_MsgSC_RuleQuaterHalf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_RuleQuaterHalf::InitAsDefaultInstance() {
}

_MsgSC_RuleQuaterHalf::_MsgSC_RuleQuaterHalf(const _MsgSC_RuleQuaterHalf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_RuleQuaterHalf::SharedCtor() {
  _cached_size_ = 0;
  m_llrulequaterhalf_ = GOOGLE_LONGLONG(0);
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_RuleQuaterHalf::~_MsgSC_RuleQuaterHalf() {
  SharedDtor();
}

void _MsgSC_RuleQuaterHalf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_RuleQuaterHalf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_RuleQuaterHalf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_RuleQuaterHalf_descriptor_;
}

const _MsgSC_RuleQuaterHalf& _MsgSC_RuleQuaterHalf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_RuleQuaterHalf* _MsgSC_RuleQuaterHalf::default_instance_ = NULL;

_MsgSC_RuleQuaterHalf* _MsgSC_RuleQuaterHalf::New() const {
  return new _MsgSC_RuleQuaterHalf;
}

void _MsgSC_RuleQuaterHalf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llrulequaterhalf_ = GOOGLE_LONGLONG(0);
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_RuleQuaterHalf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llRuleQuaterHalf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llrulequaterhalf_)));
          set_has_m_llrulequaterhalf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_RuleQuaterHalf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llRuleQuaterHalf = 1;
  if (has_m_llrulequaterhalf()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llrulequaterhalf(), output);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llpoolmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_RuleQuaterHalf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llRuleQuaterHalf = 1;
  if (has_m_llrulequaterhalf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llrulequaterhalf(), target);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_llpoolmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_RuleQuaterHalf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llRuleQuaterHalf = 1;
    if (has_m_llrulequaterhalf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llrulequaterhalf());
    }
    
    // required sint64 m_llPoolMoney = 2;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_RuleQuaterHalf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_RuleQuaterHalf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_RuleQuaterHalf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_RuleQuaterHalf::MergeFrom(const _MsgSC_RuleQuaterHalf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llrulequaterhalf()) {
      set_m_llrulequaterhalf(from.m_llrulequaterhalf());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_RuleQuaterHalf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_RuleQuaterHalf::CopyFrom(const _MsgSC_RuleQuaterHalf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_RuleQuaterHalf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgSC_RuleQuaterHalf::Swap(_MsgSC_RuleQuaterHalf* other) {
  if (other != this) {
    std::swap(m_llrulequaterhalf_, other->m_llrulequaterhalf_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_RuleQuaterHalf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_RuleQuaterHalf_descriptor_;
  metadata.reflection = _MsgSC_RuleQuaterHalf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_Finished::kMLStateFieldNumber;
const int _MsgSC_Finished::kMBGiveUpFieldNumber;
const int _MsgSC_Finished::kMLRankFieldNumber;
const int _MsgSC_Finished::kMLBossUSNFieldNumber;
const int _MsgSC_Finished::kMLlGiveMoneyFieldNumber;
const int _MsgSC_Finished::kMVtWinFieldNumber;
const int _MsgSC_Finished::kMVtResultFieldNumber;
const int _MsgSC_Finished::kMVtGiveMoneyFieldNumber;
const int _MsgSC_Finished::kMTblCardFieldNumber;
const int _MsgSC_Finished::kMTblMoneyFieldNumber;
const int _MsgSC_Finished::kMLlPoolMoneyFieldNumber;
const int _MsgSC_Finished::kMVtUserMoneyFieldNumber;
const int _MsgSC_Finished::kMLResultIdxFieldNumber;
const int _MsgSC_Finished::kMLlJackpotFieldNumber;
#endif  // !_MSC_VER

_MsgSC_Finished::_MsgSC_Finished()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_Finished::InitAsDefaultInstance() {
}

_MsgSC_Finished::_MsgSC_Finished(const _MsgSC_Finished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_Finished::SharedCtor() {
  _cached_size_ = 0;
  m_lstate_ = 0;
  m_bgiveup_ = 0;
  m_lrank_ = 0;
  m_lbossusn_ = 0;
  m_llgivemoney_ = GOOGLE_LONGLONG(0);
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  m_lresultidx_ = 0;
  m_lljackpot_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_Finished::~_MsgSC_Finished() {
  SharedDtor();
}

void _MsgSC_Finished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_Finished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_Finished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_Finished_descriptor_;
}

const _MsgSC_Finished& _MsgSC_Finished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_Finished* _MsgSC_Finished::default_instance_ = NULL;

_MsgSC_Finished* _MsgSC_Finished::New() const {
  return new _MsgSC_Finished;
}

void _MsgSC_Finished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lstate_ = 0;
    m_bgiveup_ = 0;
    m_lrank_ = 0;
    m_lbossusn_ = 0;
    m_llgivemoney_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
    m_lresultidx_ = 0;
    m_lljackpot_ = GOOGLE_LONGLONG(0);
  }
  m_vtwin_.Clear();
  m_vtresult_.Clear();
  m_vtgivemoney_.Clear();
  m_tblcard_.Clear();
  m_tblmoney_.Clear();
  m_vtusermoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_Finished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lstate_)));
          set_has_m_lstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bGiveUp;
        break;
      }
      
      // required sint32 m_bGiveUp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bGiveUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bgiveup_)));
          set_has_m_bgiveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lRank;
        break;
      }
      
      // required sint32 m_lRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lrank_)));
          set_has_m_lrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lBossUSN;
        break;
      }
      
      // required sint32 m_lBossUSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lBossUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lbossusn_)));
          set_has_m_lbossusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llGiveMoney;
        break;
      }
      
      // required sint64 m_llGiveMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llGiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llgivemoney_)));
          set_has_m_llgivemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vtWin;
        break;
      }
      
      // repeated int32 m_vtWin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_vtwin())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtwin())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_vtWin;
        if (input->ExpectTag(56)) goto parse_m_vtResult;
        break;
      }
      
      // repeated int32 m_vtResult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_vtresult())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vtresult())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_vtResult;
        if (input->ExpectTag(64)) goto parse_m_vtGiveMoney;
        break;
      }
      
      // repeated sint64 m_vtGiveMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vtGiveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 64, input, this->mutable_m_vtgivemoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_m_vtgivemoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_vtGiveMoney;
        if (input->ExpectTag(74)) goto parse_m_tblCard;
        break;
      }
      
      // repeated .Game_Poker._Cards m_tblCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_tblCard;
        if (input->ExpectTag(82)) goto parse_m_tblMoney;
        break;
      }
      
      // repeated .Game_Poker._Money m_tblMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tblMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tblmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_tblMoney;
        if (input->ExpectTag(88)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_vtUserMoney;
        break;
      }
      
      // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtUserMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtusermoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_vtUserMoney;
        if (input->ExpectTag(104)) goto parse_m_lResultIdx;
        break;
      }
      
      // required sint32 m_lResultIdx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lResultIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lresultidx_)));
          set_has_m_lresultidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_llJackpot;
        break;
      }
      
      // required sint64 m_llJackpot = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpot_)));
          set_has_m_lljackpot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_Finished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lstate(), output);
  }
  
  // required sint32 m_bGiveUp = 2;
  if (has_m_bgiveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bgiveup(), output);
  }
  
  // required sint32 m_lRank = 3;
  if (has_m_lrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lrank(), output);
  }
  
  // required sint32 m_lBossUSN = 4;
  if (has_m_lbossusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_lbossusn(), output);
  }
  
  // required sint64 m_llGiveMoney = 5;
  if (has_m_llgivemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llgivemoney(), output);
  }
  
  // repeated int32 m_vtWin = 6;
  for (int i = 0; i < this->m_vtwin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_vtwin(i), output);
  }
  
  // repeated int32 m_vtResult = 7;
  for (int i = 0; i < this->m_vtresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_vtresult(i), output);
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      8, this->m_vtgivemoney(i), output);
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 9;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_tblcard(i), output);
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 10;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_tblmoney(i), output);
  }
  
  // required sint64 m_llPoolMoney = 11;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->m_llpoolmoney(), output);
  }
  
  // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_vtusermoney(i), output);
  }
  
  // required sint32 m_lResultIdx = 13;
  if (has_m_lresultidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->m_lresultidx(), output);
  }
  
  // required sint64 m_llJackpot = 14;
  if (has_m_lljackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(14, this->m_lljackpot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_Finished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lState = 1;
  if (has_m_lstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lstate(), target);
  }
  
  // required sint32 m_bGiveUp = 2;
  if (has_m_bgiveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_bgiveup(), target);
  }
  
  // required sint32 m_lRank = 3;
  if (has_m_lrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lrank(), target);
  }
  
  // required sint32 m_lBossUSN = 4;
  if (has_m_lbossusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_lbossusn(), target);
  }
  
  // required sint64 m_llGiveMoney = 5;
  if (has_m_llgivemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_llgivemoney(), target);
  }
  
  // repeated int32 m_vtWin = 6;
  for (int i = 0; i < this->m_vtwin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->m_vtwin(i), target);
  }
  
  // repeated int32 m_vtResult = 7;
  for (int i = 0; i < this->m_vtresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_vtresult(i), target);
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(8, this->m_vtgivemoney(i), target);
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 9;
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_tblcard(i), target);
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 10;
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_tblmoney(i), target);
  }
  
  // required sint64 m_llPoolMoney = 11;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(11, this->m_llpoolmoney(), target);
  }
  
  // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_vtusermoney(i), target);
  }
  
  // required sint32 m_lResultIdx = 13;
  if (has_m_lresultidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->m_lresultidx(), target);
  }
  
  // required sint64 m_llJackpot = 14;
  if (has_m_lljackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(14, this->m_lljackpot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_Finished::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lState = 1;
    if (has_m_lstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lstate());
    }
    
    // required sint32 m_bGiveUp = 2;
    if (has_m_bgiveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bgiveup());
    }
    
    // required sint32 m_lRank = 3;
    if (has_m_lrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lrank());
    }
    
    // required sint32 m_lBossUSN = 4;
    if (has_m_lbossusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lbossusn());
    }
    
    // required sint64 m_llGiveMoney = 5;
    if (has_m_llgivemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llgivemoney());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required sint64 m_llPoolMoney = 11;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
    // required sint32 m_lResultIdx = 13;
    if (has_m_lresultidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lresultidx());
    }
    
    // required sint64 m_llJackpot = 14;
    if (has_m_lljackpot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpot());
    }
    
  }
  // repeated int32 m_vtWin = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtwin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtwin(i));
    }
    total_size += 1 * this->m_vtwin_size() + data_size;
  }
  
  // repeated int32 m_vtResult = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vtresult(i));
    }
    total_size += 1 * this->m_vtresult_size() + data_size;
  }
  
  // repeated sint64 m_vtGiveMoney = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vtgivemoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->m_vtgivemoney(i));
    }
    total_size += 1 * this->m_vtgivemoney_size() + data_size;
  }
  
  // repeated .Game_Poker._Cards m_tblCard = 9;
  total_size += 1 * this->m_tblcard_size();
  for (int i = 0; i < this->m_tblcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblcard(i));
  }
  
  // repeated .Game_Poker._Money m_tblMoney = 10;
  total_size += 1 * this->m_tblmoney_size();
  for (int i = 0; i < this->m_tblmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tblmoney(i));
  }
  
  // repeated .Game_Poker.UserMoney m_vtUserMoney = 12;
  total_size += 1 * this->m_vtusermoney_size();
  for (int i = 0; i < this->m_vtusermoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtusermoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_Finished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_Finished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_Finished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_Finished::MergeFrom(const _MsgSC_Finished& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwin_.MergeFrom(from.m_vtwin_);
  m_vtresult_.MergeFrom(from.m_vtresult_);
  m_vtgivemoney_.MergeFrom(from.m_vtgivemoney_);
  m_tblcard_.MergeFrom(from.m_tblcard_);
  m_tblmoney_.MergeFrom(from.m_tblmoney_);
  m_vtusermoney_.MergeFrom(from.m_vtusermoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lstate()) {
      set_m_lstate(from.m_lstate());
    }
    if (from.has_m_bgiveup()) {
      set_m_bgiveup(from.m_bgiveup());
    }
    if (from.has_m_lrank()) {
      set_m_lrank(from.m_lrank());
    }
    if (from.has_m_lbossusn()) {
      set_m_lbossusn(from.m_lbossusn());
    }
    if (from.has_m_llgivemoney()) {
      set_m_llgivemoney(from.m_llgivemoney());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
    if (from.has_m_lresultidx()) {
      set_m_lresultidx(from.m_lresultidx());
    }
    if (from.has_m_lljackpot()) {
      set_m_lljackpot(from.m_lljackpot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_Finished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_Finished::CopyFrom(const _MsgSC_Finished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_Finished::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000341f) != 0x0000341f) return false;
  
  for (int i = 0; i < m_tblcard_size(); i++) {
    if (!this->m_tblcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_tblmoney_size(); i++) {
    if (!this->m_tblmoney(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_vtusermoney_size(); i++) {
    if (!this->m_vtusermoney(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_Finished::Swap(_MsgSC_Finished* other) {
  if (other != this) {
    std::swap(m_lstate_, other->m_lstate_);
    std::swap(m_bgiveup_, other->m_bgiveup_);
    std::swap(m_lrank_, other->m_lrank_);
    std::swap(m_lbossusn_, other->m_lbossusn_);
    std::swap(m_llgivemoney_, other->m_llgivemoney_);
    m_vtwin_.Swap(&other->m_vtwin_);
    m_vtresult_.Swap(&other->m_vtresult_);
    m_vtgivemoney_.Swap(&other->m_vtgivemoney_);
    m_tblcard_.Swap(&other->m_tblcard_);
    m_tblmoney_.Swap(&other->m_tblmoney_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    m_vtusermoney_.Swap(&other->m_vtusermoney_);
    std::swap(m_lresultidx_, other->m_lresultidx_);
    std::swap(m_lljackpot_, other->m_lljackpot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_Finished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_Finished_descriptor_;
  metadata.reflection = _MsgSC_Finished_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_NewGame::kMVtWinLoseInfoFieldNumber;
#endif  // !_MSC_VER

_MsgSC_NewGame::_MsgSC_NewGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_NewGame::InitAsDefaultInstance() {
}

_MsgSC_NewGame::_MsgSC_NewGame(const _MsgSC_NewGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_NewGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_NewGame::~_MsgSC_NewGame() {
  SharedDtor();
}

void _MsgSC_NewGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_NewGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_NewGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_NewGame_descriptor_;
}

const _MsgSC_NewGame& _MsgSC_NewGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_NewGame* _MsgSC_NewGame::default_instance_ = NULL;

_MsgSC_NewGame* _MsgSC_NewGame::New() const {
  return new _MsgSC_NewGame;
}

void _MsgSC_NewGame::Clear() {
  m_vtwinloseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_NewGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtWinLoseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtwinloseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtWinLoseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_NewGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_vtwinloseinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_NewGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_vtwinloseinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_NewGame::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
  total_size += 1 * this->m_vtwinloseinfo_size();
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtwinloseinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_NewGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_NewGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_NewGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_NewGame::MergeFrom(const _MsgSC_NewGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwinloseinfo_.MergeFrom(from.m_vtwinloseinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_NewGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_NewGame::CopyFrom(const _MsgSC_NewGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_NewGame::IsInitialized() const {
  
  for (int i = 0; i < m_vtwinloseinfo_size(); i++) {
    if (!this->m_vtwinloseinfo(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_NewGame::Swap(_MsgSC_NewGame* other) {
  if (other != this) {
    m_vtwinloseinfo_.Swap(&other->m_vtwinloseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_NewGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_NewGame_descriptor_;
  metadata.reflection = _MsgSC_NewGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_ContinueAns::kMLUSNFieldNumber;
#endif  // !_MSC_VER

_MsgSC_ContinueAns::_MsgSC_ContinueAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_ContinueAns::InitAsDefaultInstance() {
}

_MsgSC_ContinueAns::_MsgSC_ContinueAns(const _MsgSC_ContinueAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_ContinueAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_ContinueAns::~_MsgSC_ContinueAns() {
  SharedDtor();
}

void _MsgSC_ContinueAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_ContinueAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_ContinueAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_ContinueAns_descriptor_;
}

const _MsgSC_ContinueAns& _MsgSC_ContinueAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_ContinueAns* _MsgSC_ContinueAns::default_instance_ = NULL;

_MsgSC_ContinueAns* _MsgSC_ContinueAns::New() const {
  return new _MsgSC_ContinueAns;
}

void _MsgSC_ContinueAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_ContinueAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_ContinueAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_ContinueAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_ContinueAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_ContinueAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_ContinueAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_ContinueAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_ContinueAns::MergeFrom(const _MsgSC_ContinueAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_ContinueAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_ContinueAns::CopyFrom(const _MsgSC_ContinueAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_ContinueAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_ContinueAns::Swap(_MsgSC_ContinueAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_ContinueAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_ContinueAns_descriptor_;
  metadata.reflection = _MsgSC_ContinueAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_Continue::kMVtWinLoseInfoFieldNumber;
#endif  // !_MSC_VER

_MsgSC_Continue::_MsgSC_Continue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_Continue::InitAsDefaultInstance() {
}

_MsgSC_Continue::_MsgSC_Continue(const _MsgSC_Continue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_Continue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_Continue::~_MsgSC_Continue() {
  SharedDtor();
}

void _MsgSC_Continue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_Continue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_Continue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_Continue_descriptor_;
}

const _MsgSC_Continue& _MsgSC_Continue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_Continue* _MsgSC_Continue::default_instance_ = NULL;

_MsgSC_Continue* _MsgSC_Continue::New() const {
  return new _MsgSC_Continue;
}

void _MsgSC_Continue::Clear() {
  m_vtwinloseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_Continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtWinLoseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtwinloseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtWinLoseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_Continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_vtwinloseinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_Continue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_vtwinloseinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_Continue::ByteSize() const {
  int total_size = 0;
  
  // repeated .Game_Poker._WinLoseInfo m_vtWinLoseInfo = 1;
  total_size += 1 * this->m_vtwinloseinfo_size();
  for (int i = 0; i < this->m_vtwinloseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtwinloseinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_Continue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_Continue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_Continue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_Continue::MergeFrom(const _MsgSC_Continue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtwinloseinfo_.MergeFrom(from.m_vtwinloseinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_Continue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_Continue::CopyFrom(const _MsgSC_Continue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_Continue::IsInitialized() const {
  
  for (int i = 0; i < m_vtwinloseinfo_size(); i++) {
    if (!this->m_vtwinloseinfo(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_Continue::Swap(_MsgSC_Continue* other) {
  if (other != this) {
    m_vtwinloseinfo_.Swap(&other->m_vtwinloseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_Continue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_Continue_descriptor_;
  metadata.reflection = _MsgSC_Continue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_SystemMsg::kMLTypeFieldNumber;
#endif  // !_MSC_VER

_MsgSC_SystemMsg::_MsgSC_SystemMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_SystemMsg::InitAsDefaultInstance() {
}

_MsgSC_SystemMsg::_MsgSC_SystemMsg(const _MsgSC_SystemMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_SystemMsg::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_SystemMsg::~_MsgSC_SystemMsg() {
  SharedDtor();
}

void _MsgSC_SystemMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_SystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_SystemMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_SystemMsg_descriptor_;
}

const _MsgSC_SystemMsg& _MsgSC_SystemMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_SystemMsg* _MsgSC_SystemMsg::default_instance_ = NULL;

_MsgSC_SystemMsg* _MsgSC_SystemMsg::New() const {
  return new _MsgSC_SystemMsg;
}

void _MsgSC_SystemMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_SystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_SystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_SystemMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_SystemMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_SystemMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_SystemMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_SystemMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_SystemMsg::MergeFrom(const _MsgSC_SystemMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_SystemMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_SystemMsg::CopyFrom(const _MsgSC_SystemMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_SystemMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_SystemMsg::Swap(_MsgSC_SystemMsg* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_SystemMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_SystemMsg_descriptor_;
  metadata.reflection = _MsgSC_SystemMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgSC_PurgeAns::_MsgSC_PurgeAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_PurgeAns::InitAsDefaultInstance() {
}

_MsgSC_PurgeAns::_MsgSC_PurgeAns(const _MsgSC_PurgeAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_PurgeAns::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_PurgeAns::~_MsgSC_PurgeAns() {
  SharedDtor();
}

void _MsgSC_PurgeAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_PurgeAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_PurgeAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_PurgeAns_descriptor_;
}

const _MsgSC_PurgeAns& _MsgSC_PurgeAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_PurgeAns* _MsgSC_PurgeAns::default_instance_ = NULL;

_MsgSC_PurgeAns* _MsgSC_PurgeAns::New() const {
  return new _MsgSC_PurgeAns;
}

void _MsgSC_PurgeAns::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_PurgeAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgSC_PurgeAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_PurgeAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_PurgeAns::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_PurgeAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_PurgeAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_PurgeAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_PurgeAns::MergeFrom(const _MsgSC_PurgeAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_PurgeAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_PurgeAns::CopyFrom(const _MsgSC_PurgeAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_PurgeAns::IsInitialized() const {
  
  return true;
}

void _MsgSC_PurgeAns::Swap(_MsgSC_PurgeAns* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_PurgeAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_PurgeAns_descriptor_;
  metadata.reflection = _MsgSC_PurgeAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_PurgeInfo::kMVtPurgeUSNFieldNumber;
const int _MsgSC_PurgeInfo::kMNCountFieldNumber;
#endif  // !_MSC_VER

_MsgSC_PurgeInfo::_MsgSC_PurgeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_PurgeInfo::InitAsDefaultInstance() {
}

_MsgSC_PurgeInfo::_MsgSC_PurgeInfo(const _MsgSC_PurgeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_PurgeInfo::SharedCtor() {
  _cached_size_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_PurgeInfo::~_MsgSC_PurgeInfo() {
  SharedDtor();
}

void _MsgSC_PurgeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_PurgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_PurgeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_PurgeInfo_descriptor_;
}

const _MsgSC_PurgeInfo& _MsgSC_PurgeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_PurgeInfo* _MsgSC_PurgeInfo::default_instance_ = NULL;

_MsgSC_PurgeInfo* _MsgSC_PurgeInfo::New() const {
  return new _MsgSC_PurgeInfo;
}

void _MsgSC_PurgeInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_ncount_ = 0;
  }
  m_vtpurgeusn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_PurgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Game_Poker._VecUSN m_vtPurgeUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vtPurgeUSN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vtpurgeusn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_vtPurgeUSN;
        if (input->ExpectTag(16)) goto parse_m_nCount;
        break;
      }
      
      // required int32 m_nCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_PurgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Game_Poker._VecUSN m_vtPurgeUSN = 1;
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_vtpurgeusn(i), output);
  }
  
  // required int32 m_nCount = 2;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ncount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_PurgeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Game_Poker._VecUSN m_vtPurgeUSN = 1;
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_vtpurgeusn(i), target);
  }
  
  // required int32 m_nCount = 2;
  if (has_m_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ncount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_PurgeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 m_nCount = 2;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }
    
  }
  // repeated .Game_Poker._VecUSN m_vtPurgeUSN = 1;
  total_size += 1 * this->m_vtpurgeusn_size();
  for (int i = 0; i < this->m_vtpurgeusn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vtpurgeusn(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_PurgeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_PurgeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_PurgeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_PurgeInfo::MergeFrom(const _MsgSC_PurgeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vtpurgeusn_.MergeFrom(from.m_vtpurgeusn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_PurgeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_PurgeInfo::CopyFrom(const _MsgSC_PurgeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_PurgeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < m_vtpurgeusn_size(); i++) {
    if (!this->m_vtpurgeusn(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_PurgeInfo::Swap(_MsgSC_PurgeInfo* other) {
  if (other != this) {
    m_vtpurgeusn_.Swap(&other->m_vtpurgeusn_);
    std::swap(m_ncount_, other->m_ncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_PurgeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_PurgeInfo_descriptor_;
  metadata.reflection = _MsgSC_PurgeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_SetPurgeMoney::kMLUSNFieldNumber;
const int _MsgSC_SetPurgeMoney::kMMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_SetPurgeMoney::_MsgSC_SetPurgeMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_SetPurgeMoney::InitAsDefaultInstance() {
  m_money_ = const_cast< ::Game_Poker::_Money*>(&::Game_Poker::_Money::default_instance());
}

_MsgSC_SetPurgeMoney::_MsgSC_SetPurgeMoney(const _MsgSC_SetPurgeMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_SetPurgeMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_SetPurgeMoney::~_MsgSC_SetPurgeMoney() {
  SharedDtor();
}

void _MsgSC_SetPurgeMoney::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void _MsgSC_SetPurgeMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_SetPurgeMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_SetPurgeMoney_descriptor_;
}

const _MsgSC_SetPurgeMoney& _MsgSC_SetPurgeMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_SetPurgeMoney* _MsgSC_SetPurgeMoney::default_instance_ = NULL;

_MsgSC_SetPurgeMoney* _MsgSC_SetPurgeMoney::New() const {
  return new _MsgSC_SetPurgeMoney;
}

void _MsgSC_SetPurgeMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_SetPurgeMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker._Money m_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_SetPurgeMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required .Game_Poker._Money m_money = 2;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_SetPurgeMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required .Game_Poker._Money m_money = 2;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_SetPurgeMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required .Game_Poker._Money m_money = 2;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_SetPurgeMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_SetPurgeMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_SetPurgeMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_SetPurgeMoney::MergeFrom(const _MsgSC_SetPurgeMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::_Money::MergeFrom(from.m_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_SetPurgeMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_SetPurgeMoney::CopyFrom(const _MsgSC_SetPurgeMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_SetPurgeMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_SetPurgeMoney::Swap(_MsgSC_SetPurgeMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_SetPurgeMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_SetPurgeMoney_descriptor_;
  metadata.reflection = _MsgSC_SetPurgeMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_AssaItemNotify::kMLUSNFieldNumber;
const int _MsgSC_AssaItemNotify::kMLRankTypeFieldNumber;
const int _MsgSC_AssaItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

_MsgSC_AssaItemNotify::_MsgSC_AssaItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_AssaItemNotify::InitAsDefaultInstance() {
}

_MsgSC_AssaItemNotify::_MsgSC_AssaItemNotify(const _MsgSC_AssaItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_AssaItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_AssaItemNotify::~_MsgSC_AssaItemNotify() {
  SharedDtor();
}

void _MsgSC_AssaItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void _MsgSC_AssaItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_AssaItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_AssaItemNotify_descriptor_;
}

const _MsgSC_AssaItemNotify& _MsgSC_AssaItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_AssaItemNotify* _MsgSC_AssaItemNotify::default_instance_ = NULL;

_MsgSC_AssaItemNotify* _MsgSC_AssaItemNotify::New() const {
  return new _MsgSC_AssaItemNotify;
}

void _MsgSC_AssaItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_AssaItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sitem().data(), this->m_sitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_AssaItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_sitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_AssaItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lranktype(), target);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_sitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_AssaItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required string m_sItem = 3;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_AssaItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_AssaItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_AssaItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_AssaItemNotify::MergeFrom(const _MsgSC_AssaItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_AssaItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_AssaItemNotify::CopyFrom(const _MsgSC_AssaItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_AssaItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void _MsgSC_AssaItemNotify::Swap(_MsgSC_AssaItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_AssaItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_AssaItemNotify_descriptor_;
  metadata.reflection = _MsgSC_AssaItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_ThankYouItemNotify::kMLUSNFieldNumber;
const int _MsgSC_ThankYouItemNotify::kMLRankTypeFieldNumber;
const int _MsgSC_ThankYouItemNotify::kMLlBasicDDangMoneyFieldNumber;
const int _MsgSC_ThankYouItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

_MsgSC_ThankYouItemNotify::_MsgSC_ThankYouItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_ThankYouItemNotify::InitAsDefaultInstance() {
}

_MsgSC_ThankYouItemNotify::_MsgSC_ThankYouItemNotify(const _MsgSC_ThankYouItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_ThankYouItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_llbasicddangmoney_ = GOOGLE_LONGLONG(0);
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_ThankYouItemNotify::~_MsgSC_ThankYouItemNotify() {
  SharedDtor();
}

void _MsgSC_ThankYouItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void _MsgSC_ThankYouItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_ThankYouItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_ThankYouItemNotify_descriptor_;
}

const _MsgSC_ThankYouItemNotify& _MsgSC_ThankYouItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_ThankYouItemNotify* _MsgSC_ThankYouItemNotify::default_instance_ = NULL;

_MsgSC_ThankYouItemNotify* _MsgSC_ThankYouItemNotify::New() const {
  return new _MsgSC_ThankYouItemNotify;
}

void _MsgSC_ThankYouItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    m_llbasicddangmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_ThankYouItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llBasicDDangMoney;
        break;
      }
      
      // required sint64 m_llBasicDDangMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llBasicDDangMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llbasicddangmoney_)));
          set_has_m_llbasicddangmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sitem().data(), this->m_sitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_ThankYouItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required sint64 m_llBasicDDangMoney = 3;
  if (has_m_llbasicddangmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llbasicddangmoney(), output);
  }
  
  // required string m_sItem = 4;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_sitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_ThankYouItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lranktype(), target);
  }
  
  // required sint64 m_llBasicDDangMoney = 3;
  if (has_m_llbasicddangmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llbasicddangmoney(), target);
  }
  
  // required string m_sItem = 4;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_sitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_ThankYouItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required sint64 m_llBasicDDangMoney = 3;
    if (has_m_llbasicddangmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llbasicddangmoney());
    }
    
    // required string m_sItem = 4;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_ThankYouItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_ThankYouItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_ThankYouItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_ThankYouItemNotify::MergeFrom(const _MsgSC_ThankYouItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_llbasicddangmoney()) {
      set_m_llbasicddangmoney(from.m_llbasicddangmoney());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_ThankYouItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_ThankYouItemNotify::CopyFrom(const _MsgSC_ThankYouItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_ThankYouItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void _MsgSC_ThankYouItemNotify::Swap(_MsgSC_ThankYouItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_llbasicddangmoney_, other->m_llbasicddangmoney_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_ThankYouItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_ThankYouItemNotify_descriptor_;
  metadata.reflection = _MsgSC_ThankYouItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_MadeItemNotify::kMLUSNFieldNumber;
const int _MsgSC_MadeItemNotify::kMLRankTypeFieldNumber;
const int _MsgSC_MadeItemNotify::kMSItemFieldNumber;
#endif  // !_MSC_VER

_MsgSC_MadeItemNotify::_MsgSC_MadeItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_MadeItemNotify::InitAsDefaultInstance() {
}

_MsgSC_MadeItemNotify::_MsgSC_MadeItemNotify(const _MsgSC_MadeItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_MadeItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lranktype_ = 0;
  m_sitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_MadeItemNotify::~_MsgSC_MadeItemNotify() {
  SharedDtor();
}

void _MsgSC_MadeItemNotify::SharedDtor() {
  if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sitem_;
  }
  if (this != default_instance_) {
  }
}

void _MsgSC_MadeItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_MadeItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_MadeItemNotify_descriptor_;
}

const _MsgSC_MadeItemNotify& _MsgSC_MadeItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_MadeItemNotify* _MsgSC_MadeItemNotify::default_instance_ = NULL;

_MsgSC_MadeItemNotify* _MsgSC_MadeItemNotify::New() const {
  return new _MsgSC_MadeItemNotify;
}

void _MsgSC_MadeItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lranktype_ = 0;
    if (has_m_sitem()) {
      if (m_sitem_ != &::google::protobuf::internal::kEmptyString) {
        m_sitem_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_MadeItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lRankType;
        break;
      }
      
      // required sint32 m_lRankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lRankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lranktype_)));
          set_has_m_lranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_sItem;
        break;
      }
      
      // required string m_sItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sitem().data(), this->m_sitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_MadeItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lranktype(), output);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_sitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_MadeItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_lRankType = 2;
  if (has_m_lranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lranktype(), target);
  }
  
  // required string m_sItem = 3;
  if (has_m_sitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sitem().data(), this->m_sitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_sitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_MadeItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_lRankType = 2;
    if (has_m_lranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lranktype());
    }
    
    // required string m_sItem = 3;
    if (has_m_sitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_MadeItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_MadeItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_MadeItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_MadeItemNotify::MergeFrom(const _MsgSC_MadeItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lranktype()) {
      set_m_lranktype(from.m_lranktype());
    }
    if (from.has_m_sitem()) {
      set_m_sitem(from.m_sitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_MadeItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_MadeItemNotify::CopyFrom(const _MsgSC_MadeItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_MadeItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void _MsgSC_MadeItemNotify::Swap(_MsgSC_MadeItemNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lranktype_, other->m_lranktype_);
    std::swap(m_sitem_, other->m_sitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_MadeItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_MadeItemNotify_descriptor_;
  metadata.reflection = _MsgSC_MadeItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_ExtMoneyNotify::kMLUSNFieldNumber;
const int _MsgSC_ExtMoneyNotify::kMBExtTypeFieldNumber;
const int _MsgSC_ExtMoneyNotify::kMLlCMoneyFieldNumber;
const int _MsgSC_ExtMoneyNotify::kMLlCashBoxFieldNumber;
const int _MsgSC_ExtMoneyNotify::kMLlExtMoneyFieldNumber;
const int _MsgSC_ExtMoneyNotify::kMLlExtDateFieldNumber;
#endif  // !_MSC_VER

_MsgSC_ExtMoneyNotify::_MsgSC_ExtMoneyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_ExtMoneyNotify::InitAsDefaultInstance() {
}

_MsgSC_ExtMoneyNotify::_MsgSC_ExtMoneyNotify(const _MsgSC_ExtMoneyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_ExtMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_bexttype_ = 0;
  m_llcmoney_ = GOOGLE_LONGLONG(0);
  m_llcashbox_ = GOOGLE_LONGLONG(0);
  m_llextmoney_ = GOOGLE_LONGLONG(0);
  m_llextdate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_ExtMoneyNotify::~_MsgSC_ExtMoneyNotify() {
  SharedDtor();
}

void _MsgSC_ExtMoneyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_ExtMoneyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_ExtMoneyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_ExtMoneyNotify_descriptor_;
}

const _MsgSC_ExtMoneyNotify& _MsgSC_ExtMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_ExtMoneyNotify* _MsgSC_ExtMoneyNotify::default_instance_ = NULL;

_MsgSC_ExtMoneyNotify* _MsgSC_ExtMoneyNotify::New() const {
  return new _MsgSC_ExtMoneyNotify;
}

void _MsgSC_ExtMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_bexttype_ = 0;
    m_llcmoney_ = GOOGLE_LONGLONG(0);
    m_llcashbox_ = GOOGLE_LONGLONG(0);
    m_llextmoney_ = GOOGLE_LONGLONG(0);
    m_llextdate_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_ExtMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bExtType;
        break;
      }
      
      // required sint32 m_bExtType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bExtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bexttype_)));
          set_has_m_bexttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llCMoney;
        break;
      }
      
      // required sint64 m_llCMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcmoney_)));
          set_has_m_llcmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llCashBox;
        break;
      }
      
      // required sint64 m_llCashBox = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llCashBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llcashbox_)));
          set_has_m_llcashbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_llExtMoney;
        break;
      }
      
      // required sint64 m_llExtMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llExtMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llextmoney_)));
          set_has_m_llextmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_llExtDate;
        break;
      }
      
      // required sint64 m_llExtDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llExtDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llextdate_)));
          set_has_m_llextdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_ExtMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint32 m_bExtType = 2;
  if (has_m_bexttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_bexttype(), output);
  }
  
  // required sint64 m_llCMoney = 3;
  if (has_m_llcmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llcmoney(), output);
  }
  
  // required sint64 m_llCashBox = 4;
  if (has_m_llcashbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llcashbox(), output);
  }
  
  // required sint64 m_llExtMoney = 5;
  if (has_m_llextmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->m_llextmoney(), output);
  }
  
  // required sint64 m_llExtDate = 6;
  if (has_m_llextdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->m_llextdate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_ExtMoneyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint32 m_bExtType = 2;
  if (has_m_bexttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_bexttype(), target);
  }
  
  // required sint64 m_llCMoney = 3;
  if (has_m_llcmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llcmoney(), target);
  }
  
  // required sint64 m_llCashBox = 4;
  if (has_m_llcashbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llcashbox(), target);
  }
  
  // required sint64 m_llExtMoney = 5;
  if (has_m_llextmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->m_llextmoney(), target);
  }
  
  // required sint64 m_llExtDate = 6;
  if (has_m_llextdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->m_llextdate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_ExtMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_bExtType = 2;
    if (has_m_bexttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bexttype());
    }
    
    // required sint64 m_llCMoney = 3;
    if (has_m_llcmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcmoney());
    }
    
    // required sint64 m_llCashBox = 4;
    if (has_m_llcashbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llcashbox());
    }
    
    // required sint64 m_llExtMoney = 5;
    if (has_m_llextmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llextmoney());
    }
    
    // required sint64 m_llExtDate = 6;
    if (has_m_llextdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llextdate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_ExtMoneyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_ExtMoneyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_ExtMoneyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_ExtMoneyNotify::MergeFrom(const _MsgSC_ExtMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_bexttype()) {
      set_m_bexttype(from.m_bexttype());
    }
    if (from.has_m_llcmoney()) {
      set_m_llcmoney(from.m_llcmoney());
    }
    if (from.has_m_llcashbox()) {
      set_m_llcashbox(from.m_llcashbox());
    }
    if (from.has_m_llextmoney()) {
      set_m_llextmoney(from.m_llextmoney());
    }
    if (from.has_m_llextdate()) {
      set_m_llextdate(from.m_llextdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_ExtMoneyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_ExtMoneyNotify::CopyFrom(const _MsgSC_ExtMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_ExtMoneyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void _MsgSC_ExtMoneyNotify::Swap(_MsgSC_ExtMoneyNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_bexttype_, other->m_bexttype_);
    std::swap(m_llcmoney_, other->m_llcmoney_);
    std::swap(m_llcashbox_, other->m_llcashbox_);
    std::swap(m_llextmoney_, other->m_llextmoney_);
    std::swap(m_llextdate_, other->m_llextdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_ExtMoneyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_ExtMoneyNotify_descriptor_;
  metadata.reflection = _MsgSC_ExtMoneyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_GameEndSystemMsg::kMLTypeFieldNumber;
const int _MsgSC_GameEndSystemMsg::kMLUSNFieldNumber;
const int _MsgSC_GameEndSystemMsg::kMBGiveUpFieldNumber;
const int _MsgSC_GameEndSystemMsg::kMLlMoneyFieldNumber;
const int _MsgSC_GameEndSystemMsg::kMSMsgFieldNumber;
#endif  // !_MSC_VER

_MsgSC_GameEndSystemMsg::_MsgSC_GameEndSystemMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_GameEndSystemMsg::InitAsDefaultInstance() {
}

_MsgSC_GameEndSystemMsg::_MsgSC_GameEndSystemMsg(const _MsgSC_GameEndSystemMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_GameEndSystemMsg::SharedCtor() {
  _cached_size_ = 0;
  m_ltype_ = 0;
  m_lusn_ = 0;
  m_bgiveup_ = 0;
  m_llmoney_ = GOOGLE_LONGLONG(0);
  m_smsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_GameEndSystemMsg::~_MsgSC_GameEndSystemMsg() {
  SharedDtor();
}

void _MsgSC_GameEndSystemMsg::SharedDtor() {
  if (m_smsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smsg_;
  }
  if (this != default_instance_) {
  }
}

void _MsgSC_GameEndSystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_GameEndSystemMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_GameEndSystemMsg_descriptor_;
}

const _MsgSC_GameEndSystemMsg& _MsgSC_GameEndSystemMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_GameEndSystemMsg* _MsgSC_GameEndSystemMsg::default_instance_ = NULL;

_MsgSC_GameEndSystemMsg* _MsgSC_GameEndSystemMsg::New() const {
  return new _MsgSC_GameEndSystemMsg;
}

void _MsgSC_GameEndSystemMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ltype_ = 0;
    m_lusn_ = 0;
    m_bgiveup_ = 0;
    m_llmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_smsg()) {
      if (m_smsg_ != &::google::protobuf::internal::kEmptyString) {
        m_smsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_GameEndSystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_ltype_)));
          set_has_m_ltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lUSN;
        break;
      }
      
      // required sint32 m_lUSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lUSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_bGiveUp;
        break;
      }
      
      // required sint32 m_bGiveUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bGiveUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bgiveup_)));
          set_has_m_bgiveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llMoney;
        break;
      }
      
      // required sint64 m_llMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llmoney_)));
          set_has_m_llmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_sMsg;
        break;
      }
      
      // required string m_sMsg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_smsg().data(), this->m_smsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_GameEndSystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_ltype(), output);
  }
  
  // required sint32 m_lUSN = 2;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_lusn(), output);
  }
  
  // required sint32 m_bGiveUp = 3;
  if (has_m_bgiveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_bgiveup(), output);
  }
  
  // required sint64 m_llMoney = 4;
  if (has_m_llmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llmoney(), output);
  }
  
  // required string m_sMsg = 5;
  if (has_m_smsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smsg().data(), this->m_smsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_smsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_GameEndSystemMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lType = 1;
  if (has_m_ltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_ltype(), target);
  }
  
  // required sint32 m_lUSN = 2;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_lusn(), target);
  }
  
  // required sint32 m_bGiveUp = 3;
  if (has_m_bgiveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_bgiveup(), target);
  }
  
  // required sint64 m_llMoney = 4;
  if (has_m_llmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llmoney(), target);
  }
  
  // required string m_sMsg = 5;
  if (has_m_smsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smsg().data(), this->m_smsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_smsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_GameEndSystemMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lType = 1;
    if (has_m_ltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_ltype());
    }
    
    // required sint32 m_lUSN = 2;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint32 m_bGiveUp = 3;
    if (has_m_bgiveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bgiveup());
    }
    
    // required sint64 m_llMoney = 4;
    if (has_m_llmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llmoney());
    }
    
    // required string m_sMsg = 5;
    if (has_m_smsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_GameEndSystemMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_GameEndSystemMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_GameEndSystemMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_GameEndSystemMsg::MergeFrom(const _MsgSC_GameEndSystemMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ltype()) {
      set_m_ltype(from.m_ltype());
    }
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_bgiveup()) {
      set_m_bgiveup(from.m_bgiveup());
    }
    if (from.has_m_llmoney()) {
      set_m_llmoney(from.m_llmoney());
    }
    if (from.has_m_smsg()) {
      set_m_smsg(from.m_smsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_GameEndSystemMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_GameEndSystemMsg::CopyFrom(const _MsgSC_GameEndSystemMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_GameEndSystemMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void _MsgSC_GameEndSystemMsg::Swap(_MsgSC_GameEndSystemMsg* other) {
  if (other != this) {
    std::swap(m_ltype_, other->m_ltype_);
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_bgiveup_, other->m_bgiveup_);
    std::swap(m_llmoney_, other->m_llmoney_);
    std::swap(m_smsg_, other->m_smsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_GameEndSystemMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_GameEndSystemMsg_descriptor_;
  metadata.reflection = _MsgSC_GameEndSystemMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_ChangeAvatarNotify::kMLUSNFieldNumber;
const int _MsgSC_ChangeAvatarNotify::kMNIndexFieldNumber;
const int _MsgSC_ChangeAvatarNotify::kMUinfoFieldNumber;
#endif  // !_MSC_VER

_MsgSC_ChangeAvatarNotify::_MsgSC_ChangeAvatarNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_ChangeAvatarNotify::InitAsDefaultInstance() {
  m_uinfo_ = const_cast< ::Game_Poker::_UserInfo*>(&::Game_Poker::_UserInfo::default_instance());
}

_MsgSC_ChangeAvatarNotify::_MsgSC_ChangeAvatarNotify(const _MsgSC_ChangeAvatarNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_ChangeAvatarNotify::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_uinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_ChangeAvatarNotify::~_MsgSC_ChangeAvatarNotify() {
  SharedDtor();
}

void _MsgSC_ChangeAvatarNotify::SharedDtor() {
  if (this != default_instance_) {
    delete m_uinfo_;
  }
}

void _MsgSC_ChangeAvatarNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_ChangeAvatarNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_ChangeAvatarNotify_descriptor_;
}

const _MsgSC_ChangeAvatarNotify& _MsgSC_ChangeAvatarNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_ChangeAvatarNotify* _MsgSC_ChangeAvatarNotify::default_instance_ = NULL;

_MsgSC_ChangeAvatarNotify* _MsgSC_ChangeAvatarNotify::New() const {
  return new _MsgSC_ChangeAvatarNotify;
}

void _MsgSC_ChangeAvatarNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    if (has_m_uinfo()) {
      if (m_uinfo_ != NULL) m_uinfo_->::Game_Poker::_UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_ChangeAvatarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_uinfo;
        break;
      }
      
      // required .Game_Poker._UserInfo m_uinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_uinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_ChangeAvatarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required .Game_Poker._UserInfo m_uinfo = 3;
  if (has_m_uinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_uinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_ChangeAvatarNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required .Game_Poker._UserInfo m_uinfo = 3;
  if (has_m_uinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_uinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_ChangeAvatarNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required .Game_Poker._UserInfo m_uinfo = 3;
    if (has_m_uinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_uinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_ChangeAvatarNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_ChangeAvatarNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_ChangeAvatarNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_ChangeAvatarNotify::MergeFrom(const _MsgSC_ChangeAvatarNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_uinfo()) {
      mutable_m_uinfo()->::Game_Poker::_UserInfo::MergeFrom(from.m_uinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_ChangeAvatarNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_ChangeAvatarNotify::CopyFrom(const _MsgSC_ChangeAvatarNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_ChangeAvatarNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_m_uinfo()) {
    if (!this->m_uinfo().IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_ChangeAvatarNotify::Swap(_MsgSC_ChangeAvatarNotify* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_uinfo_, other->m_uinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_ChangeAvatarNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_ChangeAvatarNotify_descriptor_;
  metadata.reflection = _MsgSC_ChangeAvatarNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgSC_AbuseAns::_MsgSC_AbuseAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_AbuseAns::InitAsDefaultInstance() {
}

_MsgSC_AbuseAns::_MsgSC_AbuseAns(const _MsgSC_AbuseAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_AbuseAns::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_AbuseAns::~_MsgSC_AbuseAns() {
  SharedDtor();
}

void _MsgSC_AbuseAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_AbuseAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_AbuseAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_AbuseAns_descriptor_;
}

const _MsgSC_AbuseAns& _MsgSC_AbuseAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_AbuseAns* _MsgSC_AbuseAns::default_instance_ = NULL;

_MsgSC_AbuseAns* _MsgSC_AbuseAns::New() const {
  return new _MsgSC_AbuseAns;
}

void _MsgSC_AbuseAns::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_AbuseAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgSC_AbuseAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_AbuseAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_AbuseAns::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_AbuseAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_AbuseAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_AbuseAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_AbuseAns::MergeFrom(const _MsgSC_AbuseAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_AbuseAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_AbuseAns::CopyFrom(const _MsgSC_AbuseAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_AbuseAns::IsInitialized() const {
  
  return true;
}

void _MsgSC_AbuseAns::Swap(_MsgSC_AbuseAns* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_AbuseAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_AbuseAns_descriptor_;
  metadata.reflection = _MsgSC_AbuseAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_SoundTypeAns::kMLUSNFieldNumber;
const int _MsgSC_SoundTypeAns::kMNIndexFieldNumber;
const int _MsgSC_SoundTypeAns::kMLSoundTypeFieldNumber;
#endif  // !_MSC_VER

_MsgSC_SoundTypeAns::_MsgSC_SoundTypeAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_SoundTypeAns::InitAsDefaultInstance() {
}

_MsgSC_SoundTypeAns::_MsgSC_SoundTypeAns(const _MsgSC_SoundTypeAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_SoundTypeAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lsoundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_SoundTypeAns::~_MsgSC_SoundTypeAns() {
  SharedDtor();
}

void _MsgSC_SoundTypeAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_SoundTypeAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_SoundTypeAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_SoundTypeAns_descriptor_;
}

const _MsgSC_SoundTypeAns& _MsgSC_SoundTypeAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_SoundTypeAns* _MsgSC_SoundTypeAns::default_instance_ = NULL;

_MsgSC_SoundTypeAns* _MsgSC_SoundTypeAns::New() const {
  return new _MsgSC_SoundTypeAns;
}

void _MsgSC_SoundTypeAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lsoundtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_SoundTypeAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lSoundType;
        break;
      }
      
      // required sint32 m_lSoundType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lsoundtype_)));
          set_has_m_lsoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_SoundTypeAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lsoundtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_SoundTypeAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_lSoundType = 3;
  if (has_m_lsoundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lsoundtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_SoundTypeAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lSoundType = 3;
    if (has_m_lsoundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lsoundtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_SoundTypeAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_SoundTypeAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_SoundTypeAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_SoundTypeAns::MergeFrom(const _MsgSC_SoundTypeAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lsoundtype()) {
      set_m_lsoundtype(from.m_lsoundtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_SoundTypeAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_SoundTypeAns::CopyFrom(const _MsgSC_SoundTypeAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_SoundTypeAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void _MsgSC_SoundTypeAns::Swap(_MsgSC_SoundTypeAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lsoundtype_, other->m_lsoundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_SoundTypeAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_SoundTypeAns_descriptor_;
  metadata.reflection = _MsgSC_SoundTypeAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_FMoney::kMSFMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_FMoney::_MsgSC_FMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_FMoney::InitAsDefaultInstance() {
}

_MsgSC_FMoney::_MsgSC_FMoney(const _MsgSC_FMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_FMoney::SharedCtor() {
  _cached_size_ = 0;
  m_sfmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_FMoney::~_MsgSC_FMoney() {
  SharedDtor();
}

void _MsgSC_FMoney::SharedDtor() {
  if (m_sfmoney_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sfmoney_;
  }
  if (this != default_instance_) {
  }
}

void _MsgSC_FMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_FMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_FMoney_descriptor_;
}

const _MsgSC_FMoney& _MsgSC_FMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_FMoney* _MsgSC_FMoney::default_instance_ = NULL;

_MsgSC_FMoney* _MsgSC_FMoney::New() const {
  return new _MsgSC_FMoney;
}

void _MsgSC_FMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_sfmoney()) {
      if (m_sfmoney_ != &::google::protobuf::internal::kEmptyString) {
        m_sfmoney_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_FMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sFMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sfmoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sfmoney().data(), this->m_sfmoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_FMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sFMoney = 1;
  if (has_m_sfmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sfmoney().data(), this->m_sfmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_sfmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_FMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_sFMoney = 1;
  if (has_m_sfmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sfmoney().data(), this->m_sfmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_sfmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_FMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sFMoney = 1;
    if (has_m_sfmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sfmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_FMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_FMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_FMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_FMoney::MergeFrom(const _MsgSC_FMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_sfmoney()) {
      set_m_sfmoney(from.m_sfmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_FMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_FMoney::CopyFrom(const _MsgSC_FMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_FMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_FMoney::Swap(_MsgSC_FMoney* other) {
  if (other != this) {
    std::swap(m_sfmoney_, other->m_sfmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_FMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_FMoney_descriptor_;
  metadata.reflection = _MsgSC_FMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_ItemNotify::kMLLimitTotalCntFieldNumber;
const int _MsgSC_ItemNotify::kMLLimitTodayCntFieldNumber;
const int _MsgSC_ItemNotify::kMBInfinitySpeedItemFieldNumber;
const int _MsgSC_ItemNotify::kMLlSpeedToTimeFieldNumber;
#endif  // !_MSC_VER

_MsgSC_ItemNotify::_MsgSC_ItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_ItemNotify::InitAsDefaultInstance() {
}

_MsgSC_ItemNotify::_MsgSC_ItemNotify(const _MsgSC_ItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_ItemNotify::SharedCtor() {
  _cached_size_ = 0;
  m_llimittotalcnt_ = 0;
  m_llimittodaycnt_ = 0;
  m_binfinityspeeditem_ = 0;
  m_llspeedtotime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_ItemNotify::~_MsgSC_ItemNotify() {
  SharedDtor();
}

void _MsgSC_ItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_ItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_ItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_ItemNotify_descriptor_;
}

const _MsgSC_ItemNotify& _MsgSC_ItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_ItemNotify* _MsgSC_ItemNotify::default_instance_ = NULL;

_MsgSC_ItemNotify* _MsgSC_ItemNotify::New() const {
  return new _MsgSC_ItemNotify;
}

void _MsgSC_ItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llimittotalcnt_ = 0;
    m_llimittodaycnt_ = 0;
    m_binfinityspeeditem_ = 0;
    m_llspeedtotime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_ItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lLimitTotalCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llimittotalcnt_)));
          set_has_m_llimittotalcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lLimitTodayCnt;
        break;
      }
      
      // required sint32 m_lLimitTodayCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lLimitTodayCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_llimittodaycnt_)));
          set_has_m_llimittodaycnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_bInfinitySpeedItem;
        break;
      }
      
      // required sint32 m_bInfinitySpeedItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bInfinitySpeedItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_binfinityspeeditem_)));
          set_has_m_binfinityspeeditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_llSpeedToTime;
        break;
      }
      
      // required sint64 m_llSpeedToTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llSpeedToTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llspeedtotime_)));
          set_has_m_llspeedtotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_ItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lLimitTotalCnt = 1;
  if (has_m_llimittotalcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_llimittotalcnt(), output);
  }
  
  // required sint32 m_lLimitTodayCnt = 2;
  if (has_m_llimittodaycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->m_llimittodaycnt(), output);
  }
  
  // required sint32 m_bInfinitySpeedItem = 3;
  if (has_m_binfinityspeeditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_binfinityspeeditem(), output);
  }
  
  // required sint64 m_llSpeedToTime = 4;
  if (has_m_llspeedtotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->m_llspeedtotime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_ItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lLimitTotalCnt = 1;
  if (has_m_llimittotalcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_llimittotalcnt(), target);
  }
  
  // required sint32 m_lLimitTodayCnt = 2;
  if (has_m_llimittodaycnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->m_llimittodaycnt(), target);
  }
  
  // required sint32 m_bInfinitySpeedItem = 3;
  if (has_m_binfinityspeeditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_binfinityspeeditem(), target);
  }
  
  // required sint64 m_llSpeedToTime = 4;
  if (has_m_llspeedtotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->m_llspeedtotime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_ItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lLimitTotalCnt = 1;
    if (has_m_llimittotalcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llimittotalcnt());
    }
    
    // required sint32 m_lLimitTodayCnt = 2;
    if (has_m_llimittodaycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_llimittodaycnt());
    }
    
    // required sint32 m_bInfinitySpeedItem = 3;
    if (has_m_binfinityspeeditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_binfinityspeeditem());
    }
    
    // required sint64 m_llSpeedToTime = 4;
    if (has_m_llspeedtotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llspeedtotime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_ItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_ItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_ItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_ItemNotify::MergeFrom(const _MsgSC_ItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llimittotalcnt()) {
      set_m_llimittotalcnt(from.m_llimittotalcnt());
    }
    if (from.has_m_llimittodaycnt()) {
      set_m_llimittodaycnt(from.m_llimittodaycnt());
    }
    if (from.has_m_binfinityspeeditem()) {
      set_m_binfinityspeeditem(from.m_binfinityspeeditem());
    }
    if (from.has_m_llspeedtotime()) {
      set_m_llspeedtotime(from.m_llspeedtotime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_ItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_ItemNotify::CopyFrom(const _MsgSC_ItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_ItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void _MsgSC_ItemNotify::Swap(_MsgSC_ItemNotify* other) {
  if (other != this) {
    std::swap(m_llimittotalcnt_, other->m_llimittotalcnt_);
    std::swap(m_llimittodaycnt_, other->m_llimittodaycnt_);
    std::swap(m_binfinityspeeditem_, other->m_binfinityspeeditem_);
    std::swap(m_llspeedtotime_, other->m_llspeedtotime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_ItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_ItemNotify_descriptor_;
  metadata.reflection = _MsgSC_ItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_DisconnectMoneyNotify::kMSNickNameFieldNumber;
const int _MsgSC_DisconnectMoneyNotify::kMLlDisconnectMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_DisconnectMoneyNotify::_MsgSC_DisconnectMoneyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_DisconnectMoneyNotify::InitAsDefaultInstance() {
}

_MsgSC_DisconnectMoneyNotify::_MsgSC_DisconnectMoneyNotify(const _MsgSC_DisconnectMoneyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_DisconnectMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  m_snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lldisconnectmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_DisconnectMoneyNotify::~_MsgSC_DisconnectMoneyNotify() {
  SharedDtor();
}

void _MsgSC_DisconnectMoneyNotify::SharedDtor() {
  if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_snickname_;
  }
  if (this != default_instance_) {
  }
}

void _MsgSC_DisconnectMoneyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_DisconnectMoneyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_DisconnectMoneyNotify_descriptor_;
}

const _MsgSC_DisconnectMoneyNotify& _MsgSC_DisconnectMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_DisconnectMoneyNotify* _MsgSC_DisconnectMoneyNotify::default_instance_ = NULL;

_MsgSC_DisconnectMoneyNotify* _MsgSC_DisconnectMoneyNotify::New() const {
  return new _MsgSC_DisconnectMoneyNotify;
}

void _MsgSC_DisconnectMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_snickname()) {
      if (m_snickname_ != &::google::protobuf::internal::kEmptyString) {
        m_snickname_->clear();
      }
    }
    m_lldisconnectmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_DisconnectMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_snickname().data(), this->m_snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llDisconnectMoney;
        break;
      }
      
      // required sint64 m_llDisconnectMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llDisconnectMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lldisconnectmoney_)));
          set_has_m_lldisconnectmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_DisconnectMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sNickName = 1;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_snickname(), output);
  }
  
  // required sint64 m_llDisconnectMoney = 2;
  if (has_m_lldisconnectmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_lldisconnectmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_DisconnectMoneyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_sNickName = 1;
  if (has_m_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_snickname().data(), this->m_snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_snickname(), target);
  }
  
  // required sint64 m_llDisconnectMoney = 2;
  if (has_m_lldisconnectmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_lldisconnectmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_DisconnectMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sNickName = 1;
    if (has_m_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_snickname());
    }
    
    // required sint64 m_llDisconnectMoney = 2;
    if (has_m_lldisconnectmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lldisconnectmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_DisconnectMoneyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_DisconnectMoneyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_DisconnectMoneyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_DisconnectMoneyNotify::MergeFrom(const _MsgSC_DisconnectMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_snickname()) {
      set_m_snickname(from.m_snickname());
    }
    if (from.has_m_lldisconnectmoney()) {
      set_m_lldisconnectmoney(from.m_lldisconnectmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_DisconnectMoneyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_DisconnectMoneyNotify::CopyFrom(const _MsgSC_DisconnectMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_DisconnectMoneyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgSC_DisconnectMoneyNotify::Swap(_MsgSC_DisconnectMoneyNotify* other) {
  if (other != this) {
    std::swap(m_snickname_, other->m_snickname_);
    std::swap(m_lldisconnectmoney_, other->m_lldisconnectmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_DisconnectMoneyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_DisconnectMoneyNotify_descriptor_;
  metadata.reflection = _MsgSC_DisconnectMoneyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_ExitNtf::kMLUSNFieldNumber;
const int _MsgSC_ExitNtf::kMNIndexFieldNumber;
const int _MsgSC_ExitNtf::kMLExitFieldNumber;
const int _MsgSC_ExitNtf::kMBExitFieldNumber;
#endif  // !_MSC_VER

_MsgSC_ExitNtf::_MsgSC_ExitNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_ExitNtf::InitAsDefaultInstance() {
}

_MsgSC_ExitNtf::_MsgSC_ExitNtf(const _MsgSC_ExitNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_ExitNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nindex_ = 0;
  m_lexit_ = 0;
  m_bexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_ExitNtf::~_MsgSC_ExitNtf() {
  SharedDtor();
}

void _MsgSC_ExitNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_ExitNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_ExitNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_ExitNtf_descriptor_;
}

const _MsgSC_ExitNtf& _MsgSC_ExitNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_ExitNtf* _MsgSC_ExitNtf::default_instance_ = NULL;

_MsgSC_ExitNtf* _MsgSC_ExitNtf::New() const {
  return new _MsgSC_ExitNtf;
}

void _MsgSC_ExitNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nindex_ = 0;
    m_lexit_ = 0;
    m_bexit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_ExitNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nIndex;
        break;
      }
      
      // required int32 m_nIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nindex_)));
          set_has_m_nindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lExit;
        break;
      }
      
      // required sint32 m_lExit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lexit_)));
          set_has_m_lexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bExit;
        break;
      }
      
      // required sint32 m_bExit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bexit_)));
          set_has_m_bexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_ExitNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nindex(), output);
  }
  
  // required sint32 m_lExit = 3;
  if (has_m_lexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->m_lexit(), output);
  }
  
  // required sint32 m_bExit = 4;
  if (has_m_bexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_bexit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_ExitNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nIndex = 2;
  if (has_m_nindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nindex(), target);
  }
  
  // required sint32 m_lExit = 3;
  if (has_m_lexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->m_lexit(), target);
  }
  
  // required sint32 m_bExit = 4;
  if (has_m_bexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_bexit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_ExitNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nIndex = 2;
    if (has_m_nindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nindex());
    }
    
    // required sint32 m_lExit = 3;
    if (has_m_lexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lexit());
    }
    
    // required sint32 m_bExit = 4;
    if (has_m_bexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bexit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_ExitNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_ExitNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_ExitNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_ExitNtf::MergeFrom(const _MsgSC_ExitNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nindex()) {
      set_m_nindex(from.m_nindex());
    }
    if (from.has_m_lexit()) {
      set_m_lexit(from.m_lexit());
    }
    if (from.has_m_bexit()) {
      set_m_bexit(from.m_bexit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_ExitNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_ExitNtf::CopyFrom(const _MsgSC_ExitNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_ExitNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void _MsgSC_ExitNtf::Swap(_MsgSC_ExitNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nindex_, other->m_nindex_);
    std::swap(m_lexit_, other->m_lexit_);
    std::swap(m_bexit_, other->m_bexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_ExitNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_ExitNtf_descriptor_;
  metadata.reflection = _MsgSC_ExitNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_RematchOKAns::kMLUSNFieldNumber;
const int _MsgSC_RematchOKAns::kMLlPoolMoneyFieldNumber;
const int _MsgSC_RematchOKAns::kMMoneyFieldNumber;
const int _MsgSC_RematchOKAns::kMBRematchOKFieldNumber;
#endif  // !_MSC_VER

_MsgSC_RematchOKAns::_MsgSC_RematchOKAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_RematchOKAns::InitAsDefaultInstance() {
  m_money_ = const_cast< ::Game_Poker::_Money*>(&::Game_Poker::_Money::default_instance());
}

_MsgSC_RematchOKAns::_MsgSC_RematchOKAns(const _MsgSC_RematchOKAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_RematchOKAns::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_llpoolmoney_ = GOOGLE_LONGLONG(0);
  m_money_ = NULL;
  m_brematchok_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_RematchOKAns::~_MsgSC_RematchOKAns() {
  SharedDtor();
}

void _MsgSC_RematchOKAns::SharedDtor() {
  if (this != default_instance_) {
    delete m_money_;
  }
}

void _MsgSC_RematchOKAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_RematchOKAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_RematchOKAns_descriptor_;
}

const _MsgSC_RematchOKAns& _MsgSC_RematchOKAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_RematchOKAns* _MsgSC_RematchOKAns::default_instance_ = NULL;

_MsgSC_RematchOKAns* _MsgSC_RematchOKAns::New() const {
  return new _MsgSC_RematchOKAns;
}

void _MsgSC_RematchOKAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_llpoolmoney_ = GOOGLE_LONGLONG(0);
    if (has_m_money()) {
      if (m_money_ != NULL) m_money_->::Game_Poker::_Money::Clear();
    }
    m_brematchok_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_RematchOKAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llPoolMoney;
        break;
      }
      
      // required sint64 m_llPoolMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llPoolMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llpoolmoney_)));
          set_has_m_llpoolmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_money;
        break;
      }
      
      // required .Game_Poker._Money m_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bRematchOK;
        break;
      }
      
      // required sint32 m_bRematchOK = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bRematchOK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_brematchok_)));
          set_has_m_brematchok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_RematchOKAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_llpoolmoney(), output);
  }
  
  // required .Game_Poker._Money m_money = 3;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_money(), output);
  }
  
  // required sint32 m_bRematchOK = 4;
  if (has_m_brematchok()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->m_brematchok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_RematchOKAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint64 m_llPoolMoney = 2;
  if (has_m_llpoolmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_llpoolmoney(), target);
  }
  
  // required .Game_Poker._Money m_money = 3;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_money(), target);
  }
  
  // required sint32 m_bRematchOK = 4;
  if (has_m_brematchok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->m_brematchok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_RematchOKAns::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint64 m_llPoolMoney = 2;
    if (has_m_llpoolmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llpoolmoney());
    }
    
    // required .Game_Poker._Money m_money = 3;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_money());
    }
    
    // required sint32 m_bRematchOK = 4;
    if (has_m_brematchok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_brematchok());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_RematchOKAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_RematchOKAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_RematchOKAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_RematchOKAns::MergeFrom(const _MsgSC_RematchOKAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_llpoolmoney()) {
      set_m_llpoolmoney(from.m_llpoolmoney());
    }
    if (from.has_m_money()) {
      mutable_m_money()->::Game_Poker::_Money::MergeFrom(from.m_money());
    }
    if (from.has_m_brematchok()) {
      set_m_brematchok(from.m_brematchok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_RematchOKAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_RematchOKAns::CopyFrom(const _MsgSC_RematchOKAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_RematchOKAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_m_money()) {
    if (!this->m_money().IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_RematchOKAns::Swap(_MsgSC_RematchOKAns* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_llpoolmoney_, other->m_llpoolmoney_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_brematchok_, other->m_brematchok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_RematchOKAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_RematchOKAns_descriptor_;
  metadata.reflection = _MsgSC_RematchOKAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_RuleNotify::kMNRuleIdxFieldNumber;
#endif  // !_MSC_VER

_MsgSC_RuleNotify::_MsgSC_RuleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_RuleNotify::InitAsDefaultInstance() {
}

_MsgSC_RuleNotify::_MsgSC_RuleNotify(const _MsgSC_RuleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_RuleNotify::SharedCtor() {
  _cached_size_ = 0;
  m_nruleidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_RuleNotify::~_MsgSC_RuleNotify() {
  SharedDtor();
}

void _MsgSC_RuleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_RuleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_RuleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_RuleNotify_descriptor_;
}

const _MsgSC_RuleNotify& _MsgSC_RuleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_RuleNotify* _MsgSC_RuleNotify::default_instance_ = NULL;

_MsgSC_RuleNotify* _MsgSC_RuleNotify::New() const {
  return new _MsgSC_RuleNotify;
}

void _MsgSC_RuleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nruleidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_RuleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRuleIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nruleidx_)));
          set_has_m_nruleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_RuleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nruleidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_RuleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nRuleIdx = 1;
  if (has_m_nruleidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nruleidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_RuleNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRuleIdx = 1;
    if (has_m_nruleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nruleidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_RuleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_RuleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_RuleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_RuleNotify::MergeFrom(const _MsgSC_RuleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nruleidx()) {
      set_m_nruleidx(from.m_nruleidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_RuleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_RuleNotify::CopyFrom(const _MsgSC_RuleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_RuleNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_RuleNotify::Swap(_MsgSC_RuleNotify* other) {
  if (other != this) {
    std::swap(m_nruleidx_, other->m_nruleidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_RuleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_RuleNotify_descriptor_;
  metadata.reflection = _MsgSC_RuleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

_MsgSC_AllowEntryWaitingUser::_MsgSC_AllowEntryWaitingUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_AllowEntryWaitingUser::InitAsDefaultInstance() {
}

_MsgSC_AllowEntryWaitingUser::_MsgSC_AllowEntryWaitingUser(const _MsgSC_AllowEntryWaitingUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_AllowEntryWaitingUser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_AllowEntryWaitingUser::~_MsgSC_AllowEntryWaitingUser() {
  SharedDtor();
}

void _MsgSC_AllowEntryWaitingUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_AllowEntryWaitingUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_AllowEntryWaitingUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_AllowEntryWaitingUser_descriptor_;
}

const _MsgSC_AllowEntryWaitingUser& _MsgSC_AllowEntryWaitingUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_AllowEntryWaitingUser* _MsgSC_AllowEntryWaitingUser::default_instance_ = NULL;

_MsgSC_AllowEntryWaitingUser* _MsgSC_AllowEntryWaitingUser::New() const {
  return new _MsgSC_AllowEntryWaitingUser;
}

void _MsgSC_AllowEntryWaitingUser::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_AllowEntryWaitingUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void _MsgSC_AllowEntryWaitingUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_AllowEntryWaitingUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_AllowEntryWaitingUser::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_AllowEntryWaitingUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_AllowEntryWaitingUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_AllowEntryWaitingUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_AllowEntryWaitingUser::MergeFrom(const _MsgSC_AllowEntryWaitingUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_AllowEntryWaitingUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_AllowEntryWaitingUser::CopyFrom(const _MsgSC_AllowEntryWaitingUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_AllowEntryWaitingUser::IsInitialized() const {
  
  return true;
}

void _MsgSC_AllowEntryWaitingUser::Swap(_MsgSC_AllowEntryWaitingUser* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_AllowEntryWaitingUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_AllowEntryWaitingUser_descriptor_;
  metadata.reflection = _MsgSC_AllowEntryWaitingUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_AllWaitingUserDataNtf::kMBSendWaitingUserFieldNumber;
const int _MsgSC_AllWaitingUserDataNtf::kMWaitingUserDataFieldNumber;
#endif  // !_MSC_VER

_MsgSC_AllWaitingUserDataNtf::_MsgSC_AllWaitingUserDataNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_AllWaitingUserDataNtf::InitAsDefaultInstance() {
}

_MsgSC_AllWaitingUserDataNtf::_MsgSC_AllWaitingUserDataNtf(const _MsgSC_AllWaitingUserDataNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_AllWaitingUserDataNtf::SharedCtor() {
  _cached_size_ = 0;
  m_bsendwaitinguser_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_AllWaitingUserDataNtf::~_MsgSC_AllWaitingUserDataNtf() {
  SharedDtor();
}

void _MsgSC_AllWaitingUserDataNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_AllWaitingUserDataNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_AllWaitingUserDataNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_AllWaitingUserDataNtf_descriptor_;
}

const _MsgSC_AllWaitingUserDataNtf& _MsgSC_AllWaitingUserDataNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_AllWaitingUserDataNtf* _MsgSC_AllWaitingUserDataNtf::default_instance_ = NULL;

_MsgSC_AllWaitingUserDataNtf* _MsgSC_AllWaitingUserDataNtf::New() const {
  return new _MsgSC_AllWaitingUserDataNtf;
}

void _MsgSC_AllWaitingUserDataNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bsendwaitinguser_ = 0;
  }
  m_waitinguserdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_AllWaitingUserDataNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_bSendWaitingUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_bsendwaitinguser_)));
          set_has_m_bsendwaitinguser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_WaitingUserData;
        break;
      }
      
      // repeated .Game_Poker._WAITINGUSERDATA m_WaitingUserData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WaitingUserData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_waitinguserdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_WaitingUserData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_AllWaitingUserDataNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_bSendWaitingUser = 1;
  if (has_m_bsendwaitinguser()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_bsendwaitinguser(), output);
  }
  
  // repeated .Game_Poker._WAITINGUSERDATA m_WaitingUserData = 2;
  for (int i = 0; i < this->m_waitinguserdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_waitinguserdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_AllWaitingUserDataNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_bSendWaitingUser = 1;
  if (has_m_bsendwaitinguser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_bsendwaitinguser(), target);
  }
  
  // repeated .Game_Poker._WAITINGUSERDATA m_WaitingUserData = 2;
  for (int i = 0; i < this->m_waitinguserdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_waitinguserdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_AllWaitingUserDataNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_bSendWaitingUser = 1;
    if (has_m_bsendwaitinguser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_bsendwaitinguser());
    }
    
  }
  // repeated .Game_Poker._WAITINGUSERDATA m_WaitingUserData = 2;
  total_size += 1 * this->m_waitinguserdata_size();
  for (int i = 0; i < this->m_waitinguserdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_waitinguserdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_AllWaitingUserDataNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_AllWaitingUserDataNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_AllWaitingUserDataNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_AllWaitingUserDataNtf::MergeFrom(const _MsgSC_AllWaitingUserDataNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_waitinguserdata_.MergeFrom(from.m_waitinguserdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bsendwaitinguser()) {
      set_m_bsendwaitinguser(from.m_bsendwaitinguser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_AllWaitingUserDataNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_AllWaitingUserDataNtf::CopyFrom(const _MsgSC_AllWaitingUserDataNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_AllWaitingUserDataNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < m_waitinguserdata_size(); i++) {
    if (!this->m_waitinguserdata(i).IsInitialized()) return false;
  }
  return true;
}

void _MsgSC_AllWaitingUserDataNtf::Swap(_MsgSC_AllWaitingUserDataNtf* other) {
  if (other != this) {
    std::swap(m_bsendwaitinguser_, other->m_bsendwaitinguser_);
    m_waitinguserdata_.Swap(&other->m_waitinguserdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_AllWaitingUserDataNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_AllWaitingUserDataNtf_descriptor_;
  metadata.reflection = _MsgSC_AllWaitingUserDataNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_UserDataChangeNtf::kMUserDataFieldNumber;
#endif  // !_MSC_VER

_MsgSC_UserDataChangeNtf::_MsgSC_UserDataChangeNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_UserDataChangeNtf::InitAsDefaultInstance() {
  m_userdata_ = const_cast< ::Game_Poker::_RCUserData*>(&::Game_Poker::_RCUserData::default_instance());
}

_MsgSC_UserDataChangeNtf::_MsgSC_UserDataChangeNtf(const _MsgSC_UserDataChangeNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_UserDataChangeNtf::SharedCtor() {
  _cached_size_ = 0;
  m_userdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_UserDataChangeNtf::~_MsgSC_UserDataChangeNtf() {
  SharedDtor();
}

void _MsgSC_UserDataChangeNtf::SharedDtor() {
  if (this != default_instance_) {
    delete m_userdata_;
  }
}

void _MsgSC_UserDataChangeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_UserDataChangeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_UserDataChangeNtf_descriptor_;
}

const _MsgSC_UserDataChangeNtf& _MsgSC_UserDataChangeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_UserDataChangeNtf* _MsgSC_UserDataChangeNtf::default_instance_ = NULL;

_MsgSC_UserDataChangeNtf* _MsgSC_UserDataChangeNtf::New() const {
  return new _MsgSC_UserDataChangeNtf;
}

void _MsgSC_UserDataChangeNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_userdata()) {
      if (m_userdata_ != NULL) m_userdata_->::Game_Poker::_RCUserData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_UserDataChangeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Game_Poker._RCUserData m_userData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_userdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_UserDataChangeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Game_Poker._RCUserData m_userData = 1;
  if (has_m_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_userdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_UserDataChangeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Game_Poker._RCUserData m_userData = 1;
  if (has_m_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_userdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_UserDataChangeNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Game_Poker._RCUserData m_userData = 1;
    if (has_m_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_userdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_UserDataChangeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_UserDataChangeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_UserDataChangeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_UserDataChangeNtf::MergeFrom(const _MsgSC_UserDataChangeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_userdata()) {
      mutable_m_userdata()->::Game_Poker::_RCUserData::MergeFrom(from.m_userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_UserDataChangeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_UserDataChangeNtf::CopyFrom(const _MsgSC_UserDataChangeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_UserDataChangeNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_UserDataChangeNtf::Swap(_MsgSC_UserDataChangeNtf* other) {
  if (other != this) {
    std::swap(m_userdata_, other->m_userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_UserDataChangeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_UserDataChangeNtf_descriptor_;
  metadata.reflection = _MsgSC_UserDataChangeNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_RefillMoneyNtf::kMLUSNFieldNumber;
const int _MsgSC_RefillMoneyNtf::kMNRefillCntFieldNumber;
const int _MsgSC_RefillMoneyNtf::kMLlRefillMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_RefillMoneyNtf::_MsgSC_RefillMoneyNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_RefillMoneyNtf::InitAsDefaultInstance() {
}

_MsgSC_RefillMoneyNtf::_MsgSC_RefillMoneyNtf(const _MsgSC_RefillMoneyNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_RefillMoneyNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nrefillcnt_ = 0;
  m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_RefillMoneyNtf::~_MsgSC_RefillMoneyNtf() {
  SharedDtor();
}

void _MsgSC_RefillMoneyNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_RefillMoneyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_RefillMoneyNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_RefillMoneyNtf_descriptor_;
}

const _MsgSC_RefillMoneyNtf& _MsgSC_RefillMoneyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_RefillMoneyNtf* _MsgSC_RefillMoneyNtf::default_instance_ = NULL;

_MsgSC_RefillMoneyNtf* _MsgSC_RefillMoneyNtf::New() const {
  return new _MsgSC_RefillMoneyNtf;
}

void _MsgSC_RefillMoneyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nrefillcnt_ = 0;
    m_llrefillmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_RefillMoneyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nRefillCnt;
        break;
      }
      
      // required int32 m_nRefillCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nRefillCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nrefillcnt_)));
          set_has_m_nrefillcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llRefillMoney;
        break;
      }
      
      // required sint64 m_llRefillMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llRefillMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llrefillmoney_)));
          set_has_m_llrefillmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_RefillMoneyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nRefillCnt = 2;
  if (has_m_nrefillcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nrefillcnt(), output);
  }
  
  // required sint64 m_llRefillMoney = 3;
  if (has_m_llrefillmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llrefillmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_RefillMoneyNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nRefillCnt = 2;
  if (has_m_nrefillcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nrefillcnt(), target);
  }
  
  // required sint64 m_llRefillMoney = 3;
  if (has_m_llrefillmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llrefillmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_RefillMoneyNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nRefillCnt = 2;
    if (has_m_nrefillcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nrefillcnt());
    }
    
    // required sint64 m_llRefillMoney = 3;
    if (has_m_llrefillmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llrefillmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_RefillMoneyNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_RefillMoneyNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_RefillMoneyNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_RefillMoneyNtf::MergeFrom(const _MsgSC_RefillMoneyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nrefillcnt()) {
      set_m_nrefillcnt(from.m_nrefillcnt());
    }
    if (from.has_m_llrefillmoney()) {
      set_m_llrefillmoney(from.m_llrefillmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_RefillMoneyNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_RefillMoneyNtf::CopyFrom(const _MsgSC_RefillMoneyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_RefillMoneyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void _MsgSC_RefillMoneyNtf::Swap(_MsgSC_RefillMoneyNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nrefillcnt_, other->m_nrefillcnt_);
    std::swap(m_llrefillmoney_, other->m_llrefillmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_RefillMoneyNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_RefillMoneyNtf_descriptor_;
  metadata.reflection = _MsgSC_RefillMoneyNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_JackpotMoneyNtf::kMLUSNFieldNumber;
const int _MsgSC_JackpotMoneyNtf::kMLlJackpotMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_JackpotMoneyNtf::_MsgSC_JackpotMoneyNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_JackpotMoneyNtf::InitAsDefaultInstance() {
}

_MsgSC_JackpotMoneyNtf::_MsgSC_JackpotMoneyNtf(const _MsgSC_JackpotMoneyNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_JackpotMoneyNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_JackpotMoneyNtf::~_MsgSC_JackpotMoneyNtf() {
  SharedDtor();
}

void _MsgSC_JackpotMoneyNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_JackpotMoneyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_JackpotMoneyNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_JackpotMoneyNtf_descriptor_;
}

const _MsgSC_JackpotMoneyNtf& _MsgSC_JackpotMoneyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_JackpotMoneyNtf* _MsgSC_JackpotMoneyNtf::default_instance_ = NULL;

_MsgSC_JackpotMoneyNtf* _MsgSC_JackpotMoneyNtf::New() const {
  return new _MsgSC_JackpotMoneyNtf;
}

void _MsgSC_JackpotMoneyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_lljackpotmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_JackpotMoneyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_llJackpotMoney;
        break;
      }
      
      // required sint64 m_llJackpotMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llJackpotMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_lljackpotmoney_)));
          set_has_m_lljackpotmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_JackpotMoneyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required sint64 m_llJackpotMoney = 2;
  if (has_m_lljackpotmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->m_lljackpotmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_JackpotMoneyNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required sint64 m_llJackpotMoney = 2;
  if (has_m_lljackpotmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->m_lljackpotmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_JackpotMoneyNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required sint64 m_llJackpotMoney = 2;
    if (has_m_lljackpotmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_lljackpotmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_JackpotMoneyNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_JackpotMoneyNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_JackpotMoneyNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_JackpotMoneyNtf::MergeFrom(const _MsgSC_JackpotMoneyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_lljackpotmoney()) {
      set_m_lljackpotmoney(from.m_lljackpotmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_JackpotMoneyNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_JackpotMoneyNtf::CopyFrom(const _MsgSC_JackpotMoneyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_JackpotMoneyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void _MsgSC_JackpotMoneyNtf::Swap(_MsgSC_JackpotMoneyNtf* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_lljackpotmoney_, other->m_lljackpotmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_JackpotMoneyNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_JackpotMoneyNtf_descriptor_;
  metadata.reflection = _MsgSC_JackpotMoneyNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_GuardianAngelMoney::kMLUSNFieldNumber;
const int _MsgSC_GuardianAngelMoney::kMNGuardianAngelCntFieldNumber;
const int _MsgSC_GuardianAngelMoney::kMLlAngelMoneyFieldNumber;
#endif  // !_MSC_VER

_MsgSC_GuardianAngelMoney::_MsgSC_GuardianAngelMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_GuardianAngelMoney::InitAsDefaultInstance() {
}

_MsgSC_GuardianAngelMoney::_MsgSC_GuardianAngelMoney(const _MsgSC_GuardianAngelMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_GuardianAngelMoney::SharedCtor() {
  _cached_size_ = 0;
  m_lusn_ = 0;
  m_nguardianangelcnt_ = 0;
  m_llangelmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_GuardianAngelMoney::~_MsgSC_GuardianAngelMoney() {
  SharedDtor();
}

void _MsgSC_GuardianAngelMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_GuardianAngelMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_GuardianAngelMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_GuardianAngelMoney_descriptor_;
}

const _MsgSC_GuardianAngelMoney& _MsgSC_GuardianAngelMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_GuardianAngelMoney* _MsgSC_GuardianAngelMoney::default_instance_ = NULL;

_MsgSC_GuardianAngelMoney* _MsgSC_GuardianAngelMoney::New() const {
  return new _MsgSC_GuardianAngelMoney;
}

void _MsgSC_GuardianAngelMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lusn_ = 0;
    m_nguardianangelcnt_ = 0;
    m_llangelmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_GuardianAngelMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lUSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lusn_)));
          set_has_m_lusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nGuardianAngelCnt;
        break;
      }
      
      // required int32 m_nGuardianAngelCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nGuardianAngelCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nguardianangelcnt_)));
          set_has_m_nguardianangelcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_llAngelMoney;
        break;
      }
      
      // required sint64 m_llAngelMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_llAngelMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llangelmoney_)));
          set_has_m_llangelmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_GuardianAngelMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lusn(), output);
  }
  
  // required int32 m_nGuardianAngelCnt = 2;
  if (has_m_nguardianangelcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nguardianangelcnt(), output);
  }
  
  // required sint64 m_llAngelMoney = 3;
  if (has_m_llangelmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->m_llangelmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_GuardianAngelMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lUSN = 1;
  if (has_m_lusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lusn(), target);
  }
  
  // required int32 m_nGuardianAngelCnt = 2;
  if (has_m_nguardianangelcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nguardianangelcnt(), target);
  }
  
  // required sint64 m_llAngelMoney = 3;
  if (has_m_llangelmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->m_llangelmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_GuardianAngelMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lUSN = 1;
    if (has_m_lusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lusn());
    }
    
    // required int32 m_nGuardianAngelCnt = 2;
    if (has_m_nguardianangelcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nguardianangelcnt());
    }
    
    // required sint64 m_llAngelMoney = 3;
    if (has_m_llangelmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llangelmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_GuardianAngelMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_GuardianAngelMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_GuardianAngelMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_GuardianAngelMoney::MergeFrom(const _MsgSC_GuardianAngelMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lusn()) {
      set_m_lusn(from.m_lusn());
    }
    if (from.has_m_nguardianangelcnt()) {
      set_m_nguardianangelcnt(from.m_nguardianangelcnt());
    }
    if (from.has_m_llangelmoney()) {
      set_m_llangelmoney(from.m_llangelmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_GuardianAngelMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_GuardianAngelMoney::CopyFrom(const _MsgSC_GuardianAngelMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_GuardianAngelMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void _MsgSC_GuardianAngelMoney::Swap(_MsgSC_GuardianAngelMoney* other) {
  if (other != this) {
    std::swap(m_lusn_, other->m_lusn_);
    std::swap(m_nguardianangelcnt_, other->m_nguardianangelcnt_);
    std::swap(m_llangelmoney_, other->m_llangelmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_GuardianAngelMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_GuardianAngelMoney_descriptor_;
  metadata.reflection = _MsgSC_GuardianAngelMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_GameMasterCallNtf::kMLGMCallUSNFieldNumber;
#endif  // !_MSC_VER

_MsgSC_GameMasterCallNtf::_MsgSC_GameMasterCallNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_GameMasterCallNtf::InitAsDefaultInstance() {
}

_MsgSC_GameMasterCallNtf::_MsgSC_GameMasterCallNtf(const _MsgSC_GameMasterCallNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_GameMasterCallNtf::SharedCtor() {
  _cached_size_ = 0;
  m_lgmcall_usn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_GameMasterCallNtf::~_MsgSC_GameMasterCallNtf() {
  SharedDtor();
}

void _MsgSC_GameMasterCallNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_GameMasterCallNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_GameMasterCallNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_GameMasterCallNtf_descriptor_;
}

const _MsgSC_GameMasterCallNtf& _MsgSC_GameMasterCallNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_GameMasterCallNtf* _MsgSC_GameMasterCallNtf::default_instance_ = NULL;

_MsgSC_GameMasterCallNtf* _MsgSC_GameMasterCallNtf::New() const {
  return new _MsgSC_GameMasterCallNtf;
}

void _MsgSC_GameMasterCallNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lgmcall_usn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_GameMasterCallNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 m_lGMCall_USN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_lgmcall_usn_)));
          set_has_m_lgmcall_usn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_GameMasterCallNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 m_lGMCall_USN = 1;
  if (has_m_lgmcall_usn()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->m_lgmcall_usn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_GameMasterCallNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 m_lGMCall_USN = 1;
  if (has_m_lgmcall_usn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->m_lgmcall_usn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_GameMasterCallNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 m_lGMCall_USN = 1;
    if (has_m_lgmcall_usn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_lgmcall_usn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_GameMasterCallNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_GameMasterCallNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_GameMasterCallNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_GameMasterCallNtf::MergeFrom(const _MsgSC_GameMasterCallNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lgmcall_usn()) {
      set_m_lgmcall_usn(from.m_lgmcall_usn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_GameMasterCallNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_GameMasterCallNtf::CopyFrom(const _MsgSC_GameMasterCallNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_GameMasterCallNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_GameMasterCallNtf::Swap(_MsgSC_GameMasterCallNtf* other) {
  if (other != this) {
    std::swap(m_lgmcall_usn_, other->m_lgmcall_usn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_GameMasterCallNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_GameMasterCallNtf_descriptor_;
  metadata.reflection = _MsgSC_GameMasterCallNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_ObserverCnt::kMNObserverCntFieldNumber;
#endif  // !_MSC_VER

_MsgSC_ObserverCnt::_MsgSC_ObserverCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_ObserverCnt::InitAsDefaultInstance() {
}

_MsgSC_ObserverCnt::_MsgSC_ObserverCnt(const _MsgSC_ObserverCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_ObserverCnt::SharedCtor() {
  _cached_size_ = 0;
  m_nobservercnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_ObserverCnt::~_MsgSC_ObserverCnt() {
  SharedDtor();
}

void _MsgSC_ObserverCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_ObserverCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_ObserverCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_ObserverCnt_descriptor_;
}

const _MsgSC_ObserverCnt& _MsgSC_ObserverCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_ObserverCnt* _MsgSC_ObserverCnt::default_instance_ = NULL;

_MsgSC_ObserverCnt* _MsgSC_ObserverCnt::New() const {
  return new _MsgSC_ObserverCnt;
}

void _MsgSC_ObserverCnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nobservercnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_ObserverCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nObserverCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nobservercnt_)));
          set_has_m_nobservercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_ObserverCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nObserverCnt = 1;
  if (has_m_nobservercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nobservercnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_ObserverCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nObserverCnt = 1;
  if (has_m_nobservercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nobservercnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_ObserverCnt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nObserverCnt = 1;
    if (has_m_nobservercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nobservercnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_ObserverCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_ObserverCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_ObserverCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_ObserverCnt::MergeFrom(const _MsgSC_ObserverCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nobservercnt()) {
      set_m_nobservercnt(from.m_nobservercnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_ObserverCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_ObserverCnt::CopyFrom(const _MsgSC_ObserverCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_ObserverCnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_ObserverCnt::Swap(_MsgSC_ObserverCnt* other) {
  if (other != this) {
    std::swap(m_nobservercnt_, other->m_nobservercnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_ObserverCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_ObserverCnt_descriptor_;
  metadata.reflection = _MsgSC_ObserverCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_Bonus::kMLlBonusFieldNumber;
#endif  // !_MSC_VER

_MsgSC_Bonus::_MsgSC_Bonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_Bonus::InitAsDefaultInstance() {
}

_MsgSC_Bonus::_MsgSC_Bonus(const _MsgSC_Bonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_Bonus::SharedCtor() {
  _cached_size_ = 0;
  m_llbonus_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_Bonus::~_MsgSC_Bonus() {
  SharedDtor();
}

void _MsgSC_Bonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void _MsgSC_Bonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_Bonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_Bonus_descriptor_;
}

const _MsgSC_Bonus& _MsgSC_Bonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_Bonus* _MsgSC_Bonus::default_instance_ = NULL;

_MsgSC_Bonus* _MsgSC_Bonus::New() const {
  return new _MsgSC_Bonus;
}

void _MsgSC_Bonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_llbonus_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_Bonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 m_llBonus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_llbonus_)));
          set_has_m_llbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_Bonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 m_llBonus = 1;
  if (has_m_llbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->m_llbonus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_Bonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 m_llBonus = 1;
  if (has_m_llbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->m_llbonus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_Bonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 m_llBonus = 1;
    if (has_m_llbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_llbonus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_Bonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_Bonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_Bonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_Bonus::MergeFrom(const _MsgSC_Bonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_llbonus()) {
      set_m_llbonus(from.m_llbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_Bonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_Bonus::CopyFrom(const _MsgSC_Bonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_Bonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_Bonus::Swap(_MsgSC_Bonus* other) {
  if (other != this) {
    std::swap(m_llbonus_, other->m_llbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_Bonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_Bonus_descriptor_;
  metadata.reflection = _MsgSC_Bonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int _MsgSC_PoliceNotify::kMPoliceMsgFieldNumber;
#endif  // !_MSC_VER

_MsgSC_PoliceNotify::_MsgSC_PoliceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void _MsgSC_PoliceNotify::InitAsDefaultInstance() {
}

_MsgSC_PoliceNotify::_MsgSC_PoliceNotify(const _MsgSC_PoliceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void _MsgSC_PoliceNotify::SharedCtor() {
  _cached_size_ = 0;
  m_policemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

_MsgSC_PoliceNotify::~_MsgSC_PoliceNotify() {
  SharedDtor();
}

void _MsgSC_PoliceNotify::SharedDtor() {
  if (m_policemsg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_policemsg_;
  }
  if (this != default_instance_) {
  }
}

void _MsgSC_PoliceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _MsgSC_PoliceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MsgSC_PoliceNotify_descriptor_;
}

const _MsgSC_PoliceNotify& _MsgSC_PoliceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_5fPoker_2eproto();  return *default_instance_;
}

_MsgSC_PoliceNotify* _MsgSC_PoliceNotify::default_instance_ = NULL;

_MsgSC_PoliceNotify* _MsgSC_PoliceNotify::New() const {
  return new _MsgSC_PoliceNotify;
}

void _MsgSC_PoliceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_policemsg()) {
      if (m_policemsg_ != &::google::protobuf::internal::kEmptyString) {
        m_policemsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool _MsgSC_PoliceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_policeMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_policemsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_policemsg().data(), this->m_policemsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void _MsgSC_PoliceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_policeMsg = 1;
  if (has_m_policemsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_policemsg().data(), this->m_policemsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_policemsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* _MsgSC_PoliceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_policeMsg = 1;
  if (has_m_policemsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_policemsg().data(), this->m_policemsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_policemsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int _MsgSC_PoliceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_policeMsg = 1;
    if (has_m_policemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_policemsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _MsgSC_PoliceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const _MsgSC_PoliceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const _MsgSC_PoliceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void _MsgSC_PoliceNotify::MergeFrom(const _MsgSC_PoliceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_policemsg()) {
      set_m_policemsg(from.m_policemsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void _MsgSC_PoliceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _MsgSC_PoliceNotify::CopyFrom(const _MsgSC_PoliceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _MsgSC_PoliceNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void _MsgSC_PoliceNotify::Swap(_MsgSC_PoliceNotify* other) {
  if (other != this) {
    std::swap(m_policemsg_, other->m_policemsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata _MsgSC_PoliceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = _MsgSC_PoliceNotify_descriptor_;
  metadata.reflection = _MsgSC_PoliceNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game_Poker

// @@protoc_insertion_point(global_scope)
